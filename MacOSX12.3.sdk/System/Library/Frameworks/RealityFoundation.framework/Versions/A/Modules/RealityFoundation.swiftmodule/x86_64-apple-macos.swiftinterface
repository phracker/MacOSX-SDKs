// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-macos12.3 -enable-objc-interop -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-library-evolution -enable-experimental-concurrency -module-name RealityFoundation
// swift-module-flags-ignorable: -user-module-version 161.404
import AVFAudio
import AVFoundation
import AppKit
import AudioToolbox
import Combine
import Combine/*.AnyPublisher*/
import Combine/*.Cancellable*/
import Combine/*.Empty*/
import CoreFoundation
import CoreGraphics
import CoreMedia
import CoreMotion
import CoreText
import CoreVideo
import Darwin
import Foundation
import Metal.MTLDevice
import Metal
import QuartzCore
import Swift
import _Concurrency
import os.log
import os
import os/*.OSLog*/
import os/*.OSSignpostID*/
import os/*.os_signpost*/
@_exported import simd
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityInteractionsComponent {
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityInteractionsComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __interactions: [RealityFoundation.__RKEntityInteractionSpecification] {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct DirectionalLightComponent : RealityFoundation.Component, Swift.Equatable {
  public struct Shadow : RealityFoundation.Component, Swift.Equatable {
    public var depthBias: Swift.Float
    public var maximumDistance: Swift.Float
    public init()
    public init(maximumDistance: Swift.Float = 5.0, depthBias: Swift.Float = 1.0)
    public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.DirectionalLightComponent.Shadow
    public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
    public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
      get
    }
    public static func == (a: RealityFoundation.DirectionalLightComponent.Shadow, b: RealityFoundation.DirectionalLightComponent.Shadow) -> Swift.Bool
  }
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public var isRealWorldProxy: Swift.Bool
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.DirectionalLightComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.DirectionalLightComponent, b: RealityFoundation.DirectionalLightComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REOSLog {
  public static var UpdateLoop: os.OSLog
  public static var ARQL: os.OSLog
  public static var RealityComposer: os.OSLog
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RESignpostID {
  public static var UpdateLoop: os.OSSignpostID
  public static var ARQL: os.OSSignpostID
  public static var RealityComposer: os.OSSignpostID
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __REOSSignpostScope {
  public init(osLog: os.OSLog, signpostID: os.OSSignpostID, name: Swift.StaticString)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKSimulationSceneCoordinatorDelegate : AnyObject {
  func coordinator(_ coordinator: RealityFoundation.__RKSimulationSceneCoordinator, didRequestToChangeToScene sceneIdentifier: Foundation.UUID) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKSimulationSceneCoordinatorState {
  case stopped
  case running
  public static func == (a: RealityFoundation.__RKSimulationSceneCoordinatorState, b: RealityFoundation.__RKSimulationSceneCoordinatorState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSimulationSceneCoordinator {
  @available(*, deprecated, message: "Please use the per-interaction-service scene coordinator.")
  public static var shared: RealityFoundation.__RKSimulationSceneCoordinator
  public init()
  weak public var delegate: RealityFoundation.__RKSimulationSceneCoordinatorDelegate?
  public var simulationState: RealityFoundation.__RKSimulationSceneCoordinatorState
  public func changeToScene(with identifier: Foundation.UUID) -> Swift.Bool
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct FromToByAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var isAdditive: Swift.Bool {
    get
    set
  }
  public var timing: RealityFoundation.AnimationTimingFunction {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public init(name: Swift.String = "", from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.Float {
  public var fromValue: Swift.Float? {
    get
    set
  }
  public var toValue: Swift.Float? {
    get
    set
  }
  public var byValue: Swift.Float? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.Double {
  public var fromValue: Swift.Double? {
    get
    set
  }
  public var toValue: Swift.Double? {
    get
    set
  }
  public var byValue: Swift.Double? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD2<Swift.Float> {
  public var fromValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD3<Swift.Float> {
  public var fromValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD4<Swift.Float> {
  public var fromValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == simd.simd_quatf {
  public var fromValue: simd.simd_quatf? {
    get
    set
  }
  public var toValue: simd.simd_quatf? {
    get
    set
  }
  public var byValue: simd.simd_quatf? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == RealityFoundation.Transform {
  public var fromValue: RealityFoundation.Transform? {
    get
    set
  }
  public var toValue: RealityFoundation.Transform? {
    get
    set
  }
  public var byValue: RealityFoundation.Transform? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == RealityFoundation.JointTransforms {
  public var jointNames: [Swift.String] {
    get
    set
  }
  public var fromValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var toValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var byValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var isScaleAnimated: Swift.Bool {
    get
    set
  }
  public var isRotationAnimated: Swift.Bool {
    get
    set
  }
  public var isTranslationAnimated: Swift.Bool {
    get
    set
  }
  public init(jointNames: [Swift.String], name: Swift.String = "", isScaleAnimated: Swift.Bool = true, isRotationAnimated: Swift.Bool = true, isTranslationAnimated: Swift.Bool = true, from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindPath {
  public enum Part : Swift.Equatable {
    case scene(_: Swift.String)
    case anchorEntity(_: Swift.String)
    case entity(_: Swift.String)
    case parameter(_: Swift.String)
    case transform
    case jointTransforms
    public static func == (lhs: RealityFoundation.BindPath.Part, rhs: RealityFoundation.BindPath.Part) -> Swift.Bool
  }
  public var parts: [RealityFoundation.BindPath.Part] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum BindTarget : Swift.Equatable {
  case `internal`(_: RealityFoundation.InternalBindPath)
  case transform
  case jointTransforms
  case parameter(_: Swift.String)
  case path(_: RealityFoundation.BindPath)
  public struct ScenePath {
    public func anchorEntity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
    public var `self`: RealityFoundation.BindTarget {
      get
    }
  }
  public struct EntityPath {
    public func entity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
    public var transform: RealityFoundation.BindTarget {
      get
    }
    public var jointTransforms: RealityFoundation.BindTarget {
      get
    }
    public func parameter(_ name: Swift.String) -> RealityFoundation.BindTarget
    public var `self`: RealityFoundation.BindTarget {
      get
    }
  }
  public static func scene(_ name: Swift.String) -> RealityFoundation.BindTarget.ScenePath
  public static func anchorEntity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
  public static func entity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
  public static func == (lhs: RealityFoundation.BindTarget, rhs: RealityFoundation.BindTarget) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct InternalBindPath {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Float : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Double : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD2 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD3 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD4 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension simd.simd_quatf : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Transform : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Bool : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Int : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.String : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindableValue<T> where T : RealityFoundation.BindableData {
  public init(_ value: T, animatedValue: T? = nil)
  public var value: T {
    get
    set
  }
  public var baseValue: T
  public var animatedValue: T?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindableValuesReference {
  public subscript<T>(bindTarget: RealityFoundation.BindTarget, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct ParameterSet {
  public subscript<T>(name: Swift.String, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  public var bindableValues: RealityFoundation.BindableValuesReference {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  public struct ParameterSet {
    public subscript<T>(name: Swift.String, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
      get
      set
    }
  }
  public var parameters: RealityFoundation.Entity.ParameterSet {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AmbientLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public init()
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__AmbientLightComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.__AmbientLightComponent, b: RealityFoundation.__AmbientLightComponent) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisPopAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookAtCameraAction : RealityFoundation.__RKEntityAction {
  convenience public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0))
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, animationDuration: Swift.Float = 0.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), rotation: Swift.Float = 0, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), loops: Swift.Bool = false)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RealityFileURLResolver {
  @available(*, deprecated, message: "Don't use this variable")
  public static var weakShared: RealityFoundation.__RealityFileURLResolver? {
    get
    set
  }
  @available(*, deprecated, message: "use the \"instance(for assetService: __REAssetService)\" instead")
  public static var shared: RealityFoundation.__RealityFileURLResolver {
    get
  }
  public static func instance(for assetService: RealityFoundation.__REAssetService) -> RealityFoundation.__RealityFileURLResolver
  @available(*, deprecated, message: "use the \"init(_ assetService: __REAssetService)\" instead")
  public init()
  @objc deinit
  public static let assetPathPrefix: Swift.String
  public static let schemePrefix: Swift.String
  public func registerRealityFileResolver(assetService: RealityFoundation.__REAssetService)
  public func registerRealityFileResolver()
  public func unregisterRealityFileResolver()
  public func resolvedURL(for subpath: Swift.String) -> Foundation.URL?
  public func resolvedURL(group: Swift.String, name: Swift.String) -> Foundation.URL?
  public func setResolvedURLPath(_ resolvedURLPath: Swift.String, for key: Swift.String)
  public func createSchemePrefix(with realityFileName: Swift.String) -> Swift.String
  public func createSubAssetPath(with assetName: Swift.String) -> Swift.String
  @available(*, deprecated, message: "use the static version instead")
  public func createFullSchemePath(group: Swift.String, name: Swift.String) -> Swift.String
  public static func createFullSchemePath(group: Swift.String, name: Swift.String) -> Swift.String
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @inlinable internal static var one: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(1, 1, 1) }
  }
  @inlinable internal static var positiveInfinity: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(+.infinity, +.infinity, +.infinity) }
  }
  @inlinable internal static var negativeInfinity: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(-.infinity, -.infinity, -.infinity) }
  }
}
extension simd.simd_float4x4 {
  @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
  @inlinable internal var identity: simd.float4x4 {
    get {
        return matrix_identity_float4x4
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal static let identity: simd.simd_quatf
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisFlipAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol __ARReferenceProviding {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKSpecificationHasTarget {
  var target: Foundation.UUID { get set }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityTriggerSpecification : Swift.Codable, Swift.Equatable {
  case drag
  case light
  case lookAt
  case placement
  case proximity(target: Foundation.UUID, distance: Swift.Float, type: RealityFoundation.__RKEntityProximityTrigger.ExitType)
  case removal
  case sound
  case start
  case tapTarget(target: Foundation.UUID)
  case timer
  case collision(target: Foundation.UUID, collidingEntities: [Foundation.UUID], tags: [Swift.String])
  case custom(tag: Swift.String)
  case customWithArguments(identifier: Swift.String, customArguments: [Swift.String : Swift.String]?)
  case group(triggers: [RealityFoundation.__RKEntityTriggerSpecification])
  public enum Name : Swift.String {
    case drag
    case light
    case lookAt
    case placement
    case proximity
    case removal
    case sound
    case start
    case tapTarget
    case timer
    case collision
    case custom
    case customWithArguments
    case group
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__RKEntityTriggerSpecification.Name {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: RealityFoundation.__RKEntityTriggerSpecification, b: RealityFoundation.__RKEntityTriggerSpecification) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionSpecification : Swift.Codable, Swift.Equatable {
  case audio(RealityFoundation.__RKEntityAudioActionArguments)
  case changeScene(RealityFoundation.__RKChangeSceneActionArguments)
  case custom(RealityFoundation.__RKEntityCustomActionArguments)
  case emphasis(RealityFoundation.__RKEntityEmphasisActionArguments)
  case fadeEntity(RealityFoundation.__RKEntityFadeActionArguments)
  case fadeScene(RealityFoundation.__RKFadeSceneActionArguments)
  case group(RealityFoundation.__RKEntityActionGroupArguments)
  case hide(RealityFoundation.__RKEntityHideActionArguments)
  case force(RealityFoundation.__RKEntityForceActionArguments)
  case show(RealityFoundation.__RKEntityShowActionArguments)
  case startAnimate(RealityFoundation.__RKEntityStartAnimateActionArguments)
  case stopAnimate(RealityFoundation.__RKEntityStopAnimateActionArguments)
  case toggleAnimate(RealityFoundation.__RKEntityToggleAnimateActionArguments)
  case toggleVisibility(RealityFoundation.__RKEntityToggleVisibilityActionArguments)
  case transform(RealityFoundation.__RKEntityTransformActionArguments)
  case wait(RealityFoundation.__RKWaitActionArguments)
  case orbitEntity(RealityFoundation.__RKEntityOrbitEntityActionArguments)
  case lookAtCamera(RealityFoundation.__RKEntityLookAtCameraActionArguments)
  case swapEntity(RealityFoundation.__RKEntitySwapEntityActionArguments)
  case spin(RealityFoundation.__RKEntitySpinActionArguments)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  case setOpacity(RealityFoundation.__RKEntitySetOpacityActionArguments)
  public enum Name : Swift.String {
    case audio
    case changeScene
    case custom
    case emphasis
    case fadeEntity
    case fadeScene
    case force
    case group
    case hide
    case lookAtCamera
    case orbitEntity
    @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
    case setOpacity
    case show
    case spin
    case startAnimate
    case stopAnimate
    case swapEntity
    case toggleAnimate
    case toggleVisibility
    case transform
    case wait
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__RKEntityActionSpecification.Name {
    get
  }
  public var target: Foundation.UUID? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: RealityFoundation.__RKEntityActionSpecification, b: RealityFoundation.__RKEntityActionSpecification) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityGroupActionOrder : Swift.String, Swift.Codable, Swift.Equatable {
  case concurrent
  case sequenced
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityActionGroupArguments : Swift.Codable, Swift.Equatable {
  public var order: RealityFoundation.__RKEntityGroupActionOrder
  public var actions: [RealityFoundation.__RKEntityActionSpecification]
  public var exclusive: Swift.Bool?
  public var loopCount: Swift.Int?
  public var exclusiveBlocks: Swift.Bool?
  public init(order: RealityFoundation.__RKEntityGroupActionOrder, actions: [RealityFoundation.__RKEntityActionSpecification], exclusive: Swift.Bool = false, loopCount: Swift.Int = 1)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  public init(order: RealityFoundation.__RKEntityGroupActionOrder, actions: [RealityFoundation.__RKEntityActionSpecification], exclusive: Swift.Bool = false, loopCount: Swift.Int = 1, exclusiveBlocks: Swift.Bool = false)
  public static func == (a: RealityFoundation.__RKEntityActionGroupArguments, b: RealityFoundation.__RKEntityActionGroupArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKWaitActionArguments : Swift.Codable, Swift.Equatable {
  public var duration: Swift.Float
  public init(duration: Swift.Float)
  public static func == (a: RealityFoundation.__RKWaitActionArguments, b: RealityFoundation.__RKWaitActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityCustomActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var actionIdentifier: Swift.String
  public var customArguments: [Swift.String : Swift.String]
  public var optionalTarget: Foundation.UUID? {
    get
    set
  }
  public init(target: Foundation.UUID?, actionIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  public static func == (a: RealityFoundation.__RKEntityCustomActionArguments, b: RealityFoundation.__RKEntityCustomActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKChangeSceneActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID {
    get
    set
  }
  public var sceneRoot: Foundation.UUID
  public var targetSceneIdentifier: Foundation.UUID
  public init(sceneRoot: Foundation.UUID, targetSceneIdentifier: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKChangeSceneActionArguments, b: RealityFoundation.__RKChangeSceneActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKFadeSceneActionArguments : Swift.Codable, Swift.Equatable {
  public var targetOpacity: Swift.Float
  public var duration: Swift.Float?
  public init(targetOpacity: Swift.Float, duration: Swift.Float = 0.0)
  public static func == (a: RealityFoundation.__RKFadeSceneActionArguments, b: RealityFoundation.__RKFadeSceneActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityFadeActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var targetOpacity: Swift.Float
  public var duration: Swift.Float?
  public init(target: Foundation.UUID, targetOpacity: Swift.Float, duration: Swift.Float = 1.0)
  public static func == (a: RealityFoundation.__RKEntityFadeActionArguments, b: RealityFoundation.__RKEntityFadeActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityToggleAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityToggleAnimateActionArguments, b: RealityFoundation.__RKEntityToggleAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityStartAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public let loopCount: Swift.Int
  public let multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior
  public let clipStart: Swift.Double
  public let clipDuration: Swift.Double
  public let clipReverses: Swift.Bool
  public let clipReversed: Swift.Bool
  public let animationSpeed: Swift.Float
  public let muteAudio: Swift.Bool?
  public let audioGain: Swift.Double?
  public var targetAnimation: Foundation.UUID?
  public init(target: Foundation.UUID, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false)
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public init(target: Foundation.UUID, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false, muteAudio: Swift.Bool = false, audioGain: Swift.Double = 1.0, targetAnimation: Foundation.UUID? = nil)
  public static func == (a: RealityFoundation.__RKEntityStartAnimateActionArguments, b: RealityFoundation.__RKEntityStartAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityStopAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityStopAnimateActionArguments, b: RealityFoundation.__RKEntityStopAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityToggleVisibilityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityToggleVisibilityActionArguments, b: RealityFoundation.__RKEntityToggleVisibilityActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityShowActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var distance: Swift.Float?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var fadeIn: Swift.Bool?
  public var finalOpacity: Swift.Float?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeIn: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType = .none)
  public static func == (a: RealityFoundation.__RKEntityShowActionArguments, b: RealityFoundation.__RKEntityShowActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityHideActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var distance: Swift.Float?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var fadeOut: Swift.Bool?
  public var finalOpacity: Swift.Float?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeOut: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType = .none)
  public static func == (a: RealityFoundation.__RKEntityHideActionArguments, b: RealityFoundation.__RKEntityHideActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityEmphasisActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var iterations: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, iterations: Swift.Float = 1.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType = .pop)
  public static func == (a: RealityFoundation.__RKEntityEmphasisActionArguments, b: RealityFoundation.__RKEntityEmphasisActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityAudioActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var path: Swift.String
  public var type: RealityFoundation.__RKEntityAudioActionType?
  public var volume: Swift.Double?
  public var loops: Swift.Bool?
  public var spatialMode: RealityFoundation.__RKAudioSpatialModeSelection?
  public let multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior?
  public init(target: Foundation.UUID, path: Swift.String, type: RealityFoundation.__RKEntityAudioActionType, spatialMode: RealityFoundation.__RKAudioSpatialModeSelection, volume: Swift.Double = 0.5, loops: Swift.Bool = false, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore)
  public static func == (a: RealityFoundation.__RKEntityAudioActionArguments, b: RealityFoundation.__RKEntityAudioActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityTransformActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var location: Swift.SIMD3<Swift.Float>?
  public var orientation: simd.simd_quatf? {
    get
    set
  }
  public var scale: Swift.Float?
  public var duration: Swift.Float?
  public var moveType: RealityFoundation.__RKEntityMoveSelection?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var relativeToEntity: Foundation.UUID?
  public init(target: Foundation.UUID, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float = 1.0, moveType: RealityFoundation.__RKEntityMoveSelection = .local, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0)
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(target: Foundation.UUID, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float = 1.0, moveType: RealityFoundation.__RKEntityMoveSelection = .local, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, relativeToEntity: Foundation.UUID? = nil)
  public static func == (a: RealityFoundation.__RKEntityTransformActionArguments, b: RealityFoundation.__RKEntityTransformActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityForceActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var force: Swift.SIMD3<Swift.Float>?
  public var velocity: Swift.SIMD3<Swift.Float>?
  public init(target: Foundation.UUID, force: Swift.SIMD3<Swift.Float>? = nil, velocity: Swift.SIMD3<Swift.Float>? = nil)
  public static func == (a: RealityFoundation.__RKEntityForceActionArguments, b: RealityFoundation.__RKEntityForceActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySwapEntityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var newTarget: Foundation.UUID
  public var buildOutAction: RealityFoundation.__RKEntityHideActionArguments
  public var buildInAction: RealityFoundation.__RKEntityShowActionArguments
  public init(target: Foundation.UUID, newTarget: Foundation.UUID, buildOutAction: RealityFoundation.__RKEntityHideActionArguments, buildInAction: RealityFoundation.__RKEntityShowActionArguments)
  public static func == (a: RealityFoundation.__RKEntitySwapEntityActionArguments, b: RealityFoundation.__RKEntitySwapEntityActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySpinActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var iterations: Swift.Float?
  public var direction: RealityFoundation.__RKEntitySpinDirectionType?
  public var axis: Swift.SIMD3<Swift.Float>?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, iterations: Swift.Float = 1, direction: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, axis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0,1,0))
  public static func == (a: RealityFoundation.__RKEntitySpinActionArguments, b: RealityFoundation.__RKEntitySpinActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityOrbitEntityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var pivotTarget: Foundation.UUID
  public var duration: Swift.Float?
  public var rotations: Swift.Float?
  public var orbitalAxis: Swift.SIMD3<Swift.Float>?
  public var orientToPath: Swift.Bool?
  public var spinDirection: RealityFoundation.__RKEntitySpinDirectionType?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public init(target: Foundation.UUID, pivotTarget: Foundation.UUID, duration: Swift.Float = 1.0, rotations: Swift.Float = 1.0, orbitalAxis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), orientToPath: Swift.Bool = false, spinDirection: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0)
  public static func == (a: RealityFoundation.__RKEntityOrbitEntityActionArguments, b: RealityFoundation.__RKEntityOrbitEntityActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityLookAtCameraActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var animationDuration: Swift.Float?
  public var direction: Swift.SIMD3<Swift.Float>?
  public var rotation: Swift.Float?
  public var upVector: Swift.SIMD3<Swift.Float>?
  public var loops: Swift.Bool?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, animationDuration: Swift.Float = 0.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), rotation: Swift.Float = 0.0, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), loops: Swift.Bool = false)
  public static func == (a: RealityFoundation.__RKEntityLookAtCameraActionArguments, b: RealityFoundation.__RKEntityLookAtCameraActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySetOpacityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float
  public var opacity: Swift.Float
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, opacity: Swift.Float = 1.0)
  public static func == (a: RealityFoundation.__RKEntitySetOpacityActionArguments, b: RealityFoundation.__RKEntitySetOpacityActionArguments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityInteractionSpecification : Swift.Codable, Swift.Equatable, Swift.CustomStringConvertible {
  public var trigger: RealityFoundation.__RKEntityTriggerSpecification
  public var action: RealityFoundation.__RKEntityActionSpecification
  public var accessibilityDescription: Swift.String?
  public init(trigger: RealityFoundation.__RKEntityTriggerSpecification, action: RealityFoundation.__RKEntityActionSpecification)
  public init(_ trigger: RealityFoundation.__RKEntityTriggerSpecification, _ action: RealityFoundation.__RKEntityActionSpecification)
  public init(trigger: RealityFoundation.__RKEntityTriggerSpecification, action: RealityFoundation.__RKEntityActionSpecification, accessibilityDescription: Swift.String? = nil)
  public init(_ trigger: RealityFoundation.__RKEntityTriggerSpecification, _ action: RealityFoundation.__RKEntityActionSpecification, _ accessibilityDescription: Swift.String? = nil)
  public var description: Swift.String {
    get
  }
  public static func == (a: RealityFoundation.__RKEntityInteractionSpecification, b: RealityFoundation.__RKEntityInteractionSpecification) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __ImageBasedLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var environment: RealityFoundation.EnvironmentResource?
  public var intensityExponent: Swift.Float
  public init(environment: RealityFoundation.EnvironmentResource?, intensityExponent: Swift.Float = 0)
  public static func == (lhs: RealityFoundation.__ImageBasedLightComponent, rhs: RealityFoundation.__ImageBasedLightComponent) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.__ImageBasedLightComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__ImageBasedLightComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasModel : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  public var model: RealityFoundation.ModelComponent? {
    get
    set
  }
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  public var modelDebugOptions: RealityFoundation.ModelDebugOptionsComponent? {
    get
    set
  }
  @available(*, unavailable, renamed: "modelDebugOptions")
  public var debugModel: RealityFoundation.ModelDebugOptionsComponent? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct EntityQuery {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(where predicate: RealityFoundation.QueryPredicate<RealityFoundation.Entity>)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityEmphasisAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pop
  case blink
  case bounce
  case flip
  case float
  case jiggle
  case pulse
  case spin
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityEmphasisAnimationType]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityEmphasisAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityEmphasisAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float, iterations: Swift.Float = 1.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType = .pop)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKSceneUUIDComponent {
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKSceneUUIDComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public var __sceneIdentifier: Foundation.UUID? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.UInt64 : RealityFoundation.SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol SynchronizationService : AnyObject {
  typealias Identifier = Swift.UInt64
  func entity(for identifier: Self.Identifier) -> RealityFoundation.Entity?
  func owner(of entity: RealityFoundation.Entity) -> RealityFoundation.SynchronizationPeerID?
  @discardableResult
  func giveOwnership(of entity: RealityFoundation.Entity, toPeer: RealityFoundation.SynchronizationPeerID) -> Swift.Bool
  func __fromCore(peerID: RealityFoundation.__PeerIDRef) -> RealityFoundation.SynchronizationPeerID?
  func __toCore(peerID: RealityFoundation.SynchronizationPeerID) -> RealityFoundation.__PeerIDRef
}
@_hasMissingDesignatedInitializers @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class NetworkCompatibilityToken : Swift.Codable {
  public enum Compatibility {
    case compatible
    case sessionProtocolVersionMismatch
    public static func == (a: RealityFoundation.NetworkCompatibilityToken.Compatibility, b: RealityFoundation.NetworkCompatibilityToken.Compatibility) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let local: RealityFoundation.NetworkCompatibilityToken
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func compatibilityWith(_ otherToken: RealityFoundation.NetworkCompatibilityToken) -> RealityFoundation.NetworkCompatibilityToken.Compatibility
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class TextureResource : RealityFoundation.Resource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Semantic {
    case raw
    case scalar
    case color
    case hdrColor
    case normal
    public static func == (a: RealityFoundation.TextureResource.Semantic, b: RealityFoundation.TextureResource.Semantic) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum MipmapsMode {
    case none
    case allocateAll
    case allocateAndGenerateAll
    public static func == (a: RealityFoundation.TextureResource.MipmapsMode, b: RealityFoundation.TextureResource.MipmapsMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct CreateOptions {
    public var semantic: RealityFoundation.TextureResource.Semantic?
    public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode
    public init(semantic: RealityFoundation.TextureResource.Semantic?, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode = .allocateAndGenerateAll)
  }
  @objc deinit
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var semantic: RealityFoundation.TextureResource.Semantic? {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var width: Swift.Int {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var height: Swift.Int {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var mipmapLevelCount: Swift.Int {
    get
  }
  public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.TextureResource
  public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func generate(from cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func generateAsync(from cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func replace(withImage cgImage: CoreGraphics.CGImage, options: RealityFoundation.TextureResource.CreateOptions) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func replaceAsync(withImage cgImage: CoreGraphics.CGImage, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func copy(to texture: Metal.MTLTexture) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func copyAsync(to texture: Metal.MTLTexture, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  public static func __texture(from mtlTexture: Metal.MTLTexture) -> RealityFoundation.TextureResource
  public static func __texture(from cgImage: CoreGraphics.CGImage, label: Swift.String? = nil) -> RealityFoundation.TextureResource
  @_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public class Drawable {
    public var drawableQueue: RealityFoundation.TextureResource.DrawableQueue {
      get
    }
    public var texture: Metal.MTLTexture {
      get
    }
    public func present()
    @objc deinit
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public class DrawableQueue {
    public struct Descriptor {
      public var pixelFormat: Metal.MTLPixelFormat
      public var width: Swift.Int
      public var height: Swift.Int
      public var usage: Metal.MTLTextureUsage
      public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode
      public init(pixelFormat: Metal.MTLPixelFormat, width: Swift.Int, height: Swift.Int, usage: Metal.MTLTextureUsage, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode)
    }
    public var pixelFormat: Metal.MTLPixelFormat {
      get
    }
    public var width: Swift.Int {
      get
    }
    public var height: Swift.Int {
      get
    }
    public var usage: Metal.MTLTextureUsage {
      get
    }
    public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode {
      get
    }
    public init(_ descriptor: RealityFoundation.TextureResource.DrawableQueue.Descriptor) throws
    @objc deinit
    public func nextDrawable() throws -> RealityFoundation.TextureResource.Drawable
    public var allowsNextDrawableTimeout: Swift.Bool
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func replace(withDrawables drawableQueue: RealityFoundation.TextureResource.DrawableQueue)
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var drawableQueue: RealityFoundation.TextureResource.DrawableQueue? {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Metal.MTLCommandBuffer {
  public func present(_ drawable: RealityFoundation.TextureResource.Drawable)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityActionGroup : RealityFoundation.__RKEntityAction {
  public enum Ordering {
    case concurrent
    case sequenced
    public static func == (a: RealityFoundation.__RKEntityActionGroup.Ordering, b: RealityFoundation.__RKEntityActionGroup.Ordering) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let infiniteLoopCount: Swift.Int
  public static let noLoopCount: Swift.Int
  public var actions: [RealityFoundation.__RKEntityAction] {
    get
  }
  public var ordering: RealityFoundation.__RKEntityActionGroup.Ordering {
    get
  }
  public var loopCount: Swift.Int {
    get
  }
  public init(actions: [RealityFoundation.__RKEntityAction], ordering: RealityFoundation.__RKEntityActionGroup.Ordering, loopCount: Swift.Int? = __RKEntityActionGroup.noLoopCount)
  override public func preloadAssets()
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  public func allActions() -> [RealityFoundation.__RKEntityAction]
  override public func isExclusiveWith(action: RealityFoundation.__RKEntityAction) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public func stop() -> Swift.Bool
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsBodyComponent : RealityFoundation.Component, Swift.Equatable {
  public var mode: RealityFoundation.PhysicsBodyMode
  public var massProperties: RealityFoundation.PhysicsMassProperties
  public var material: RealityFoundation.PhysicsMaterialResource
  public var isTranslationLocked: (x: Swift.Bool, y: Swift.Bool, z: Swift.Bool)
  public var isRotationLocked: (x: Swift.Bool, y: Swift.Bool, z: Swift.Bool)
  public var isContinuousCollisionDetectionEnabled: Swift.Bool
  public init()
  public init(massProperties: RealityFoundation.PhysicsMassProperties = .default, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  public init(shapes: [RealityFoundation.ShapeResource], density: Swift.Float, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  public init(shapes: [RealityFoundation.ShapeResource], mass: Swift.Float, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsBodyComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (lhs: RealityFoundation.PhysicsBodyComponent, rhs: RealityFoundation.PhysicsBodyComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKRuntimeSceneCoordinatorObserver : AnyObject {
  func runtimeSceneCoordinator(_ coordinator: RealityFoundation.__RKRuntimeSceneCoordinator, willSwapFromEntity fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  func runtimeSceneCoordinator(_ coordinator: RealityFoundation.__RKRuntimeSceneCoordinator, didSwapFromEntity fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKRuntimeSceneCoordinator {
  public init()
  public func willSwap(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  public func didSwap(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  public func addObserver(observer: RealityFoundation.__RKRuntimeSceneCoordinatorObserver)
  public func removeObserver(observer: RealityFoundation.__RKRuntimeSceneCoordinatorObserver)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAnchoring {
  public var type: RealityFoundation.__REAnchoringType? {
    get
    set
  }
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__REAnchoring.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public var __anchoringType: RealityFoundation.__REAnchoringType? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __anchoringType: RealityFoundation.__REAnchoringType? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityDragTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowScaleAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowScaleDownAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisSpinAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityTagsComponent {
  public var tags: [Swift.String] {
    mutating get
    set(newTags)
  }
  @_hasMissingDesignatedInitializers public class Registration {
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityTagsComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __tags: [Swift.String] {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowDropAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @discardableResult
  public func playAudio(_ resource: RealityFoundation.AudioResource) -> RealityFoundation.AudioPlaybackController
  public func prepareAudio(_ resource: RealityFoundation.AudioResource) -> RealityFoundation.AudioPlaybackController
  public func stopAllAudio()
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AudioPlaybackController {
  public typealias Decibel = Swift.Double
  weak public var entity: RealityFoundation.Entity? {
    get
  }
  final public let resource: RealityFoundation.AudioResource
  @objc deinit
  public var completionHandler: (() -> Swift.Void)?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  public var speed: Swift.Double {
    get
    set
  }
  public var gain: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
  public func fade(to gain: RealityFoundation.AudioPlaybackController.Decibel, duration: Foundation.TimeInterval)
  public var reverbSendLevel: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  public var isPlaying: Swift.Bool {
    get
  }
  public func play()
  public func pause()
  public func stop()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  public var __playbackPosition: Foundation.TimeInterval {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController : Swift.Identifiable {
  public var id: Swift.UInt64 {
    get
  }
  public typealias ID = Swift.UInt64
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAssetIdentifier : Swift.ExpressibleByStringLiteral, Swift.Codable {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public init(_ value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = RealityFoundation.__REAssetIdentifier.StringLiteralType
  public typealias UnicodeScalarLiteralType = RealityFoundation.__REAssetIdentifier.StringLiteralType
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __REAsset : Swift.CustomDebugStringConvertible {
  public static func __fromHandle(_ assetRef: RealityFoundation.__AssetRef) -> RealityFoundation.__REAsset
  public static func __fromHandleTransfer(_ assetRef: RealityFoundation.__AssetRef) -> RealityFoundation.__REAsset
  @objc deinit
  public var debugDescription: Swift.String {
    get
  }
  public var sanitizedDescription: Swift.String {
    get
  }
  public var __hasSubsceneComponents: Swift.Bool {
    get
  }
  public var __handle: RealityFoundation.__AssetRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAsset : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RealityFoundation.__REAsset, rhs: RealityFoundation.__REAsset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __REAssetService {
  var mainBundle: RealityFoundation.__REAssetBundle { get }
  func loadBundle(at url: Foundation.URL) throws -> RealityFoundation.__REAssetBundle
  func makeBundle() -> RealityFoundation.__REAssetBundle
  var __handle: Swift.OpaquePointer { get }
  func __getDependencies(asset: RealityFoundation.__REAsset) -> [RealityFoundation.__REAsset]
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __REAssetManager : RealityFoundation.__REAssetService {
  public init(handle: Swift.OpaquePointer)
  public var engineQueue: Dispatch.DispatchQueue {
    get
  }
  public var mainBundle: RealityFoundation.__REAssetBundle {
    get
  }
  public func loadBundle(at url: Foundation.URL) throws -> RealityFoundation.__REAssetBundle
  public func makeBundle() -> RealityFoundation.__REAssetBundle
  public func __getDependencies(asset: RealityFoundation.__REAsset) -> [RealityFoundation.__REAsset]
  public var __handle: Swift.OpaquePointer {
    get
  }
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(*, deprecated)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetService {
  public func resource<T>(ofType type: T.Type, at path: RealityFoundation.__REAssetIdentifier) -> T?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(*, deprecated)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetBundle {
  public func resource<T>(ofType type: T.Type, at path: RealityFoundation.__REAssetIdentifier) -> T? where T : RealityFoundation.Resource
  public func __renderGraphEmitter(at path: RealityFoundation.__REAssetIdentifier) -> RealityFoundation.__RERenderGraphEmitter?
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __AssetLoadRequest {
  @objc deinit
  convenience public init(serviceLocator: RealityFoundation.__ServiceLocator)
  convenience public init(assetService: RealityFoundation.__REAssetService)
  final public func add(asset: RealityFoundation.__AssetRef)
  final public func add(asset: RealityFoundation.__REAsset)
  final public func add(_ entity: RealityFoundation.Entity, includeDescendants: Swift.Bool = true)
  final public var progress: Swift.Float {
    get
  }
  public typealias CompletionHandler = @convention(block) (_ success: Swift.Bool) -> Swift.Void
  final public func setCompletionHandler(_ handler: @escaping RealityFoundation.__AssetLoadRequest.CompletionHandler)
  final public func waitForCompletion()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasSynchronization : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasSynchronization {
  public var synchronization: RealityFoundation.SynchronizationComponent? {
    get
    set
  }
  public var isOwner: Swift.Bool {
    get
  }
  public func requestOwnership(timeout: Foundation.TimeInterval = 15, _ callback: @escaping (_ failure: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult) -> Swift.Void)
  public func withUnsynchronized(_ changes: () -> Swift.Void)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SynchronizationComponent : RealityFoundation.Component, Swift.Equatable {
  public enum OwnershipTransferMode {
    case autoAccept
    case manual
    public static func == (a: RealityFoundation.SynchronizationComponent.OwnershipTransferMode, b: RealityFoundation.SynchronizationComponent.OwnershipTransferMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum OwnershipTransferCompletionResult {
    case granted
    case timedOut
    public static func == (a: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult, b: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var identifier: Swift.UInt64 {
    get
  }
  public var isOwner: Swift.Bool {
    get
  }
  public var ownershipTransferMode: RealityFoundation.SynchronizationComponent.OwnershipTransferMode
  public init()
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SynchronizationComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (lhs: RealityFoundation.SynchronizationComponent, rhs: RealityFoundation.SynchronizationComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  public var jointNames: [Swift.String] {
    get
  }
  public var jointTransforms: [RealityFoundation.Transform] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum BlendWeight : Swift.Equatable {
  case value(_: Swift.Float)
  case parameter(_: Swift.String, defaultWeight: Swift.Float = 1.0)
  case bindTarget(_: RealityFoundation.BindTarget, defaultWeight: Swift.Float = 1.0)
  public static func == (lhs: RealityFoundation.BlendWeight, rhs: RealityFoundation.BlendWeight) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol BlendTreeNode {
  var name: Swift.String { get set }
  var weight: RealityFoundation.BlendWeight { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeSourceNode : RealityFoundation.BlendTreeNode {
  public init(source: RealityFoundation.AnimationDefinition, name: Swift.String = "", weight: RealityFoundation.BlendWeight = .value(1.0))
  public var source: RealityFoundation.AnimationDefinition?
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeBlendNode : RealityFoundation.BlendTreeNode {
  public init(sources: [RealityFoundation.BlendTreeNode], name: Swift.String = "", weight: RealityFoundation.BlendWeight = .value(1.0), isAdditive: Swift.Bool = false)
  public var sources: [RealityFoundation.BlendTreeNode]
  public var isAdditive: Swift.Bool
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeInvalidNode : RealityFoundation.BlendTreeNode {
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func blend(_ x: RealityFoundation.BlendTreeNode, _ y: RealityFoundation.BlendTreeNode, name: Swift.String = "", isAdditive: Swift.Bool = false) -> RealityFoundation.BlendTreeNode
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func blend(sources: [RealityFoundation.BlendTreeNode], name: Swift.String = "", isAdditive: Swift.Bool = false) -> RealityFoundation.BlendTreeNode
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public init(_ root: RealityFoundation.BlendTreeNode, name: Swift.String = "", isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1)
  public var root: RealityFoundation.BlendTreeNode {
    get
    set
  }
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var isAdditive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSceneAssetLookupTable {
  public static var shared: RealityFoundation.__RKSceneAssetLookupTable
  public func reSceneAsset(for uuid: Foundation.UUID) -> RealityFoundation.__REAsset?
  public func registerRESceneAsset(_ reSceneAsset: RealityFoundation.__REAsset, for uuid: Foundation.UUID)
  public func removeAllRESceneAssets()
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct QueryResult<Element> {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.QueryResult : Swift.Sequence {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Element?
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func makeIterator() -> RealityFoundation.QueryResult<Element>.Iterator
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowRiseAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xy: Swift.SIMD2<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD4 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xyz: Swift.SIMD3<Swift.Float> {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CustomMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.CustomMaterial.CustomMaterialTexture
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public typealias TextureCoordinateTransform = RealityFoundation.MaterialParameterTypes.TextureCoordinateTransform
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct CustomMaterialTexture {
    public var resource: RealityFoundation.TextureResource
    public init(_ resource: RealityFoundation.TextureResource)
    public init(_ texture: RealityFoundation.MaterialParameters.Texture)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct BaseColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.BaseColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Metallic : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Metallic)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Roughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Roughness)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct EmissiveColor {
    public static let __colorKey: Swift.String
    public var __color: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.EmissiveColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Specular : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Specular)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Blending {
    case opaque
    case transparent(opacity: RealityFoundation.CustomMaterial.Opacity)
    public init(blending value: RealityFoundation.PhysicallyBasedMaterial.Blending)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Opacity : Swift.ExpressibleByFloatLiteral {
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Opacity)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Clearcoat : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Clearcoat)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct ClearcoatRoughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.ClearcoatRoughness)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Normal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Normal)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AmbientOcclusion {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.AmbientOcclusion)
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __REAnchoringType : Swift.Codable, Swift.Equatable {
  case surface(alignment: RealityFoundation.__REAnchoringType.Alignment, classification: RealityFoundation.__REAnchoringType.Classification)
  case image(url: Foundation.URL, physicalWidth: Foundation.Measurement<Foundation.UnitLength>)
  case face(meshVertex: Swift.Int)
  case object(url: Foundation.URL)
  public enum Name : Swift.String, Swift.CaseIterable {
    case surface
    case image
    case face
    case object
    public init?(rawValue: Swift.String)
    public typealias AllCases = [RealityFoundation.__REAnchoringType.Name]
    public typealias RawValue = Swift.String
    public static var allCases: [RealityFoundation.__REAnchoringType.Name] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__REAnchoringType.Name {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public struct Alignment : Swift.OptionSet, Swift.Codable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public static let horizontal: RealityFoundation.__REAnchoringType.Alignment
    public static let vertical: RealityFoundation.__REAnchoringType.Alignment
    public static let any: RealityFoundation.__REAnchoringType.Alignment
    public typealias ArrayLiteralElement = RealityFoundation.__REAnchoringType.Alignment
    public typealias Element = RealityFoundation.__REAnchoringType.Alignment
    public typealias RawValue = Swift.Int
  }
  public struct Classification : Swift.OptionSet, Swift.Codable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public static let wall: RealityFoundation.__REAnchoringType.Classification
    public static let floor: RealityFoundation.__REAnchoringType.Classification
    public static let ceiling: RealityFoundation.__REAnchoringType.Classification
    public static let table: RealityFoundation.__REAnchoringType.Classification
    public static let seat: RealityFoundation.__REAnchoringType.Classification
    public static let any: RealityFoundation.__REAnchoringType.Classification
    public typealias ArrayLiteralElement = RealityFoundation.__REAnchoringType.Classification
    public typealias Element = RealityFoundation.__REAnchoringType.Classification
    public typealias RawValue = Swift.Int
  }
  public static func == (a: RealityFoundation.__REAnchoringType, b: RealityFoundation.__REAnchoringType) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisPulseAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __SceneService {
  var scenes: [RealityFoundation.Scene] { get }
  func append(scene: RealityFoundation.Scene)
  func remove(scene: RealityFoundation.Scene)
  var coreECSManager: RealityFoundation.__REECSManagerRef { get }
  func coreCustomComponentType(_ attributeType: RealityFoundation.Component.Type) -> Swift.OpaquePointer
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveSelection : Swift.String, Swift.Codable, Swift.CaseIterable {
  case local
  case absolute
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveSelection]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityMoveSelection] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveEase : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case back
  case bounce
  case circle
  case elastic
  case exponential
  case hermite
  case log
  case power
  case sine
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveEase]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityMoveEase] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveEaseType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case easeIn
  case easeOut
  case easeInEaseOut
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveEaseType]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityMoveEaseType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTransformAction : RealityFoundation.__RKEntityAction {
  public var relativeToEntity: RealityFoundation.Entity?
  convenience public init(targetEntity: RealityFoundation.Entity?, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float, moveType: RealityFoundation.__RKEntityMoveSelection, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  public init(targetEntity: RealityFoundation.Entity?, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float, moveType: RealityFoundation.__RKEntityMoveSelection, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, relativeToEntity: RealityFoundation.Entity? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public func prefersInitialOrdering() -> Swift.Bool
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationGroup : RealityFoundation.AnimationDefinition {
  public var group: [RealityFoundation.AnimationDefinition] {
    get
    set
  }
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public init(group: [RealityFoundation.AnimationDefinition], name: Swift.String = "", repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  public var group_: [RealityFoundation.AnimationDefinition]?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideMoveOutAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public func __remapUUIDs(entityIdentifierMapping: @escaping (Foundation.UUID) -> Foundation.UUID, interactionIdentifierMapping: @escaping (Foundation.UUID) -> Foundation.UUID)
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RERenderGraphEmitter : RealityFoundation.Resource {
  public static func __load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.__RERenderGraphEmitter
  public init(_ asset: RealityFoundation.__REAsset)
  public var __handle: RealityFoundation.__AssetRef {
    get
  }
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Material {
  var __resource: RealityFoundation.__MaterialResource { get }
  var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Material {
  public typealias Parameters = RealityFoundation.MaterialParameters
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __MaterialResource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  public struct BuildParameters {
    public enum Value : Swift.Hashable {
      case bool(Swift.Bool)
      case int(Swift.Int)
      case float(Swift.Float)
      case simd2Float(Swift.SIMD2<Swift.Float>)
      case simd3Float(Swift.SIMD3<Swift.Float>)
      case simd4Float(Swift.SIMD4<Swift.Float>)
      public var asString: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: RealityFoundation.__MaterialResource.BuildParameters.Value, b: RealityFoundation.__MaterialResource.BuildParameters.Value) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public var materialDefinition: RealityFoundation.__REAsset?
    public var functionConstants: [Swift.String : RealityFoundation.__MaterialResource.BuildParameters.Value]
    public var cullMode: Metal.MTLCullMode?
    public init(materialDefinition: RealityFoundation.__REAsset? = nil, functionConstants: [Swift.String : RealityFoundation.__MaterialResource.BuildParameters.Value] = [:])
  }
  public var cullMode: Metal.MTLCullMode? {
    get
  }
  public static func __load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.Material
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.Material>
  public static func load(_ params: RealityFoundation.__MaterialResource.BuildParameters, services: RealityFoundation.__ServiceLocator = .shared) throws -> RealityFoundation.Material
  public static func loadAsync(_ params: RealityFoundation.__MaterialResource.BuildParameters, services: RealityFoundation.__ServiceLocator = .shared) -> RealityFoundation.LoadRequest<RealityFoundation.Material>
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SimpleMaterial : RealityFoundation.Material {
  public let __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var color: RealityFoundation.SimpleMaterial.BaseColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var __tintColor: CoreGraphics.CGColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var __baseColor: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var roughness: RealityFoundation.MaterialScalarParameter {
    get
    set
  }
  public var metallic: RealityFoundation.MaterialScalarParameter {
    get
    set
  }
  public var __emissive: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var __usesTransparency: Swift.Bool {
    get
    set
  }
  public init()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct OcclusionMaterial : RealityFoundation.Material {
  public let __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public let receivesDynamicLighting: Swift.Bool
  public init(receivesDynamicLighting: Swift.Bool = false)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct UnlitMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource {
    get
  }
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var color: RealityFoundation.UnlitMaterial.BaseColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var __tintColor: CoreGraphics.CGColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var __baseColor: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var __usesTransparency: Swift.Bool {
    get
    set
  }
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.UnlitMaterial.Blending {
    get
    set
  }
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct VideoMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public var __videoResource: RealityFoundation.__VideoResource
  public init(avPlayer: AVFoundation.AVPlayer)
  public var avPlayer: AVFoundation.AVPlayer? {
    get
    set
  }
  public var controller: RealityFoundation.VideoPlaybackController {
    get
  }
  public static func __makeVideoMaterial(videoResource: RealityFoundation.__VideoResource) -> RealityFoundation.VideoMaterial
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum MaterialScalarParameter : Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByIntegerLiteral, Swift.Hashable {
  case float(Swift.Float)
  case texture(RealityFoundation.TextureResource)
  public init(floatLiteral value: Swift.Float)
  public init(integerLiteral value: Swift.Int)
  public static func == (lhs: RealityFoundation.MaterialScalarParameter, rhs: RealityFoundation.MaterialScalarParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias FloatLiteralType = Swift.Float
  public typealias IntegerLiteralType = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __MaterialColorParameter : Swift._ExpressibleByColorLiteral, Swift.Hashable {
  case color(CoreGraphics.CGColor)
  case texture(RealityFoundation.TextureResource)
  public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  public static func == (lhs: RealityFoundation.__MaterialColorParameter, rhs: RealityFoundation.__MaterialColorParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __debugTree: [(Swift.String, Swift.Int)] {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityUUIDComponent {
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityUUIDComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __interactionIdentifier: Foundation.UUID? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKEntityActionStateObserver : AnyObject {
  func action(_ action: RealityFoundation.__RKEntityAction, didChangeStateFrom fromState: RealityFoundation.__RKEntityAction.State, to toState: RealityFoundation.__RKEntityAction.State)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionMultiplePerformBehavior : Swift.String, Swift.Codable, Swift.CaseIterable {
  case allow
  case ignore
  case stopsAction
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityActionMultiplePerformBehavior]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityActionMultiplePerformBehavior] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityActionContext {
  public var trigger: RealityFoundation.__RKEntityTrigger
  public var scene: RealityFoundation.Scene
  public init(trigger: RealityFoundation.__RKEntityTrigger, scene: RealityFoundation.Scene)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
open class __RKEntityAction : Swift.CustomStringConvertible, Foundation.NSCopying {
  public enum State : Swift.Equatable {
    case notStarted
    case running
    case progress(Swift.Double)
    case finished
    case stopped
    case failed
    public static func == (a: RealityFoundation.__RKEntityAction.State, b: RealityFoundation.__RKEntityAction.State) -> Swift.Bool
  }
  public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
  public typealias CompletionHandler = ((_ success: Swift.Bool) -> Swift.Void)
  public var targetEntity: RealityFoundation.Entity?
  public var completionHandler: RealityFoundation.__RKEntityAction.CompletionHandler?
  public var isAlternate: Swift.Bool
  public var isExclusive: Swift.Bool
  public var exclusiveBlocksForCompletion: Swift.Bool
  public var state: RealityFoundation.__RKEntityAction.State {
    get
    set
  }
  public var multiplePerformBehaviour: RealityFoundation.__RKEntityActionMultiplePerformBehavior
  public func performAction(with context: RealityFoundation.__RKEntityActionContext)
  public func shouldContinueOnPerform() -> Swift.Bool
  public func preloadAssets()
  @discardableResult
  open func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  public func addStateObserver(_ observer: RealityFoundation.__RKEntityActionStateObserver)
  public func removeStateObserver(_ observer: RealityFoundation.__RKEntityActionStateObserver)
  public func reversed() -> RealityFoundation.__RKEntityAction?
  public var description: Swift.String {
    get
  }
  @discardableResult
  public func stop() -> Swift.Bool
  public func isExclusiveWith(action: RealityFoundation.__RKEntityAction) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  public func prefersInitialOrdering() -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAction {
  public struct ActionStateObservation {
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@usableFromInline
internal struct RETransform {
  @usableFromInline
  internal var position: Swift.SIMD3<Swift.Float>
  @usableFromInline
  internal var orientation: simd.simd_quatf
  @usableFromInline
  internal var scale: Swift.SIMD3<Swift.Float>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RETransform {
  @inlinable internal var matrix: RealityFoundation.REMatrix4x4F {
    get {
            return REMatrix4x4F(translation: position, rotation: orientation, scale: scale)
        }
    set {
            (position, orientation, scale) = newValue.decompose()
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SpotLightComponent : RealityFoundation.Component, Swift.Equatable {
  public struct Shadow : RealityFoundation.Component, Swift.Equatable {
    public init()
    public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SpotLightComponent.Shadow
    public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
    public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
      get
    }
    public static func == (a: RealityFoundation.SpotLightComponent.Shadow, b: RealityFoundation.SpotLightComponent.Shadow) -> Swift.Bool
  }
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public var innerAngleInDegrees: Swift.Float
  public var outerAngleInDegrees: Swift.Float
  public var attenuationRadius: Swift.Float
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SpotLightComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.SpotLightComponent, b: RealityFoundation.SpotLightComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
open class __RKEntityTrigger : Swift.CustomStringConvertible {
  public init()
  public var reversible: Swift.Bool
  public var shouldReverse: Swift.Bool
  public var shouldFireAlternate: Swift.Bool
  open func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.__RKEntityTrigger : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REEventSubscriber<CoreEvent> : Combine.Subscriber {
  public typealias Input = CoreEvent
  public typealias Failure = Swift.Never
  public var combineIdentifier: Combine.CombineIdentifier {
    get
  }
  public func receive(subscription: Combine.Subscription)
  public func receive(_ input: RealityFoundation.__REEventSubscriber<CoreEvent>.Input) -> Combine.Subscribers.Demand
  public func receive(completion: Combine.Subscribers.Completion<Swift.Never>)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKCustomTriggerNotification {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKCustomTrigger : RealityFoundation.__RKEntityTrigger {
  public init(identifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCustomTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, identifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideLaunchAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __Engine {
  public struct Configuration {
    public var clockMode: RealityFoundation.__EngineClockModeRef
    public var device: Metal.MTLDevice?
    public var queue: Dispatch.DispatchQueue?
    public var __createServices: RealityFoundation.__EngineServiceMaskRef
    public var __updateServices: RealityFoundation.__EngineServiceMaskRef
    public var __startupOptions: RealityFoundation.__StartupOptionsRef
    public var __renderFlags: RealityFoundation.__RenderFlagsRef
    public var __caLayerServer: Swift.Bool
    public init()
  }
  final public let configuration: RealityFoundation.__Engine.Configuration
  public var __coreEngine: RealityFoundation.__EngineRef {
    get
  }
  final public let queue: Dispatch.DispatchQueue
  public var services: RealityFoundation.__ServiceLocator! {
    get
  }
  public init(configuration: RealityFoundation.__Engine.Configuration)
  @objc deinit
  public static func __fromCore(_ coreEngine: RealityFoundation.__EngineRef) -> RealityFoundation.__Engine
  public func start()
  public func __start()
  public func __stop()
  public static func __ensureBuiltInComponentsAreRegistered()
  public static func __registerREKitComponents() throws
  public static func __unregisterREKitComponents()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct OrbitAnimation : RealityFoundation.AnimationDefinition {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public var axis: Swift.SIMD3<Swift.Float> {
    get
    set
  }
  public var startTransform: RealityFoundation.Transform {
    get
    set
  }
  public var spinClockwise: Swift.Bool {
    get
    set
  }
  public var orientToPath: Swift.Bool {
    get
    set
  }
  public var rotationCount: Swift.Float {
    get
    set
  }
  public init(name: Swift.String = "", duration: Foundation.TimeInterval = 1.0, axis: Swift.SIMD3<Swift.Float> = .init(x: 0.0, y: 1.0, z: 0.0), startTransform: RealityFoundation.Transform = .identity, spinClockwise: Swift.Bool = true, orientToPath: Swift.Bool = false, rotationCount: Swift.Float = 1.0, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], isAdditive: Swift.Bool = false, trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum TweenMode {
  case hold
  case linear
  public static func == (a: RealityFoundation.TweenMode, b: RealityFoundation.TweenMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct SampledAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var tweenMode: RealityFoundation.TweenMode {
    get
    set
  }
  public var frameInterval: Swift.Float {
    get
    set
  }
  public var start: Foundation.TimeInterval {
    get
    set
  }
  public var end: Foundation.TimeInterval {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public init(frames: [Value], name: Swift.String = "", tweenMode: RealityFoundation.TweenMode = .linear, frameInterval: Swift.Float = 1.0 / 30.0, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.Float {
  public var frames: [Swift.Float] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.Double {
  public var frames: [Swift.Double] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD2<Swift.Float> {
  public var frames: [Swift.SIMD2<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD3<Swift.Float> {
  public var frames: [Swift.SIMD3<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD4<Swift.Float> {
  public var frames: [Swift.SIMD4<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == simd.simd_quatf {
  public var frames: [simd.simd_quatf] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == RealityFoundation.Transform {
  public var frames: [RealityFoundation.Transform] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == RealityFoundation.JointTransforms {
  public init(jointNames: [Swift.String], frames: [Value], name: Swift.String = "", tweenMode: RealityFoundation.TweenMode = .linear, frameInterval: Swift.Float = 1.0 / 30.0, isAdditive: Swift.Bool = false, isScaleAnimated: Swift.Bool = true, isRotationAnimated: Swift.Bool = true, isTranslationAnimated: Swift.Bool = true, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  public var isScaleAnimated: Swift.Bool {
    get
    set
  }
  public var isRotationAnimated: Swift.Bool {
    get
    set
  }
  public var isTranslationAnimated: Swift.Bool {
    get
    set
  }
  public var frames: [RealityFoundation.JointTransforms] {
    get
    set
  }
  public var jointNames: [Swift.String] {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct AnimationTimingFunction : Swift.Hashable {
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public enum __Mode {
    case easeIn
    case easeOut
    case easeInOut
    public static func == (a: RealityFoundation.AnimationTimingFunction.__Mode, b: RealityFoundation.AnimationTimingFunction.__Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __smooth(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeInOut) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __back(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, amplitude: Swift.Float = 1) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __bounce(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, bounces: Swift.Int = 3, bounciness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __circle(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __exponential(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, exponent: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __logarithmic(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, base: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __power(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, power: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __sine(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Renamed to `elastic`.")
  public static func __spring(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, oscillations: Swift.Int = 2, springiness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __elastic(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, oscillations: Swift.Int = 2, springiness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  public static var `default`: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var linear: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeIn: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeOut: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeInOut: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static func cubicBezier(controlPoint1: Swift.SIMD2<Swift.Float>, controlPoint2: Swift.SIMD2<Swift.Float>) -> RealityFoundation.AnimationTimingFunction
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RealityFoundation.AnimationTimingFunction, b: RealityFoundation.AnimationTimingFunction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Resource {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Resource {
  public static func __fromCore(_ coreAsset: RealityFoundation.__AssetRef) -> Self
}
extension RealityFoundation.Scene {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func performQuery(_ query: RealityFoundation.EntityQuery) -> RealityFoundation.QueryResult<RealityFoundation.Entity>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTriggerGroup : RealityFoundation.__RKEntityTrigger {
  public var triggers: [RealityFoundation.__RKEntityTrigger] {
    get
  }
  public init(triggers: [RealityFoundation.__RKEntityTrigger])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  override public var description: Swift.String {
    get
  }
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySwapEntityAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, newEntity: RealityFoundation.Entity?, buildOutAction: RealityFoundation.__RKEntityHideAction, buildInAction: RealityFoundation.__RKEntityShowAction)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var availableAnimations: [RealityFoundation.AnimationResource] {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AnchorEntity : RealityFoundation.Entity, RealityFoundation.HasAnchoring {
  required public init()
  public init(_ target: RealityFoundation.AnchoringComponent.Target)
  convenience public init(world position: Swift.SIMD3<Swift.Float>)
  convenience public init(world transform: simd.float4x4)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class PerspectiveCamera : RealityFoundation.Entity, RealityFoundation.HasPerspectiveCamera {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class SpotLight : RealityFoundation.Entity, RealityFoundation.HasSpotLight {
  required public init()
  @usableFromInline
  override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class DirectionalLight : RealityFoundation.Entity, RealityFoundation.HasDirectionalLight {
  required public init()
  @usableFromInline
  override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class PointLight : RealityFoundation.Entity, RealityFoundation.HasPointLight {
  required public init()
  @usableFromInline
  override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class ModelEntity : RealityFoundation.Entity, RealityFoundation.HasModel, RealityFoundation.HasPhysics {
  required public init()
  public init(mesh: RealityFoundation.MeshResource, materials: [RealityFoundation.Material] = [])
  public init(mesh: RealityFoundation.MeshResource, materials: [RealityFoundation.Material] = [], collisionShape: RealityFoundation.ShapeResource, mass: Swift.Float)
  public init(mesh: RealityFoundation.MeshResource, materials: [RealityFoundation.Material] = [], collisionShapes: [RealityFoundation.ShapeResource], mass: Swift.Float)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class TriggerVolume : RealityFoundation.Entity, RealityFoundation.HasCollision {
  required public init()
  convenience public init(shape: RealityFoundation.ShapeResource, filter: RealityFoundation.CollisionFilter = .sensor)
  public init(shapes: [RealityFoundation.ShapeResource], filter: RealityFoundation.CollisionFilter = .sensor)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PointLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public var attenuationRadius: Swift.Float
  public init(cgColor: CoreGraphics.CGColor, intensity: Swift.Float = 26963.76, attenuationRadius: Swift.Float = 10.0)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PointLightComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.PointLightComponent, b: RealityFoundation.PointLightComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKChangeSceneAction : RealityFoundation.__RKEntityAction {
  public static let noTargetSceneIdentifier: Foundation.UUID
  public var rootEntity: RealityFoundation.Entity?
  public init(rootEntity: RealityFoundation.Entity?, targetSceneIdentifier: Foundation.UUID)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REECSManagerRef {
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EntityRef : Swift.Equatable {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EntityRef
  public static func == (a: RealityFoundation.__EntityRef, b: RealityFoundation.__EntityRef) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SceneRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneImportOperationRef : Swift.Equatable {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SceneImportOperationRef
  public static func == (a: RealityFoundation.__SceneImportOperationRef, b: RealityFoundation.__SceneImportOperationRef) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __ComponentRef {
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __ComponentTypeRef {
  public static func __fromCore(_ core: Any) -> RealityFoundation.__ComponentTypeRef
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AssetRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__AssetRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineClockModeRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineClockModeRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineServiceMaskRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineServiceMaskRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RenderFlagsRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__RenderFlagsRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __StartupOptionsRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__StartupOptionsRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __PeerIDRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__PeerIDRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AABBRef {
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SRTRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SRTRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AnimationPlaybackTokenRef {
  public var core: Swift.UInt64
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func convertToDegrees(radians: Swift.Float) -> Swift.Float {
    return radians * Float(180.0) / Float.pi
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func convertToRadians(degrees: Swift.Float) -> Swift.Float {
    return degrees * Float.pi / Float(180.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func log2RoundUp(_ v: Swift.Int32) -> Swift.Int32 {
    return Int32(ceil(log2(Double(v))))
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisLeanAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RenderService {
  var device: Metal.MTLDevice { get }
  var __coreRenderManager: Swift.OpaquePointer { get }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasTransform : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasTransform {
  public var transform: RealityFoundation.Transform {
    get
    set
  }
  public var scale: Swift.SIMD3<Swift.Float> {
    get
    set
    _modify
  }
  public func scale(relativeTo referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func setScale(_ scale: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public var position: Swift.SIMD3<Swift.Float> {
    get
    set
    _modify
  }
  public func position(relativeTo referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func setPosition(_ position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public var orientation: simd.simd_quatf {
    get
    set
    _modify
  }
  public func orientation(relativeTo referenceEntity: RealityFoundation.Entity?) -> simd.simd_quatf
  public func setOrientation(_ orientation: simd.simd_quatf, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func transformMatrix(relativeTo referenceEntity: RealityFoundation.Entity?) -> simd.float4x4
  public func setTransformMatrix(_ transform: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func convert(position: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(direction: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(normal: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(transform: RealityFoundation.Transform, from referenceEntity: RealityFoundation.Entity?) -> RealityFoundation.Transform
  public func convert(position: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(direction: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(normal: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  public func convert(transform: RealityFoundation.Transform, to referenceEntity: RealityFoundation.Entity?) -> RealityFoundation.Transform
  public func look(at target: Swift.SIMD3<Swift.Float>, from position: Swift.SIMD3<Swift.Float>, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), relativeTo referenceEntity: RealityFoundation.Entity?)
  public func move(to transform: RealityFoundation.Transform, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func move(to transform: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?)
  @discardableResult
  public func move(to target: RealityFoundation.Transform, relativeTo referenceEntity: RealityFoundation.Entity?, duration: Foundation.TimeInterval, timingFunction: RealityFoundation.AnimationTimingFunction = .default) -> RealityFoundation.AnimationPlaybackController
  @discardableResult
  public func move(to target: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?, duration: Foundation.TimeInterval, timingFunction: RealityFoundation.AnimationTimingFunction = .default) -> RealityFoundation.AnimationPlaybackController
  public func visualBounds(recursive: Swift.Bool = true, relativeTo referenceEntity: RealityFoundation.Entity?, excludeInactive: Swift.Bool = false) -> RealityFoundation.BoundingBox
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHidePopAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTapTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, reversible: Swift.Bool? = false)
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityOrbitEntityAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, pivotEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, rotations: Swift.Float = 1.0, orbitalAxis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), orientToPath: Swift.Bool = false, spinDirection: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0, physicsLinearCoefficient: Swift.Float = 0, loop: Swift.Bool = false)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func prefersInitialOrdering() -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public func __setLoadContext(_ loadContext: RealityFoundation.__SceneResourceLoadResultLoadContext?)
  public func __fetchLoadContext() -> RealityFoundation.__SceneResourceLoadResultLoadContext?
  public func __setSceneResourceCacheEntry(_ sceneResourceCache: RealityFoundation.__SceneResourceCache.Entry?)
  public func __fetchSceneResourceCacheEntry() -> RealityFoundation.__SceneResourceCache.Entry?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneResourceLoadResultLoadContext {
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneResourceLoadResult {
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __SceneResourceCache {
  @_hasMissingDesignatedInitializers final public class Entry {
    @objc deinit
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public static func __init() -> RealityFoundation.__SceneResourceCache
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public func __registerImportedScenes(url: Foundation.URL, importedScenes: [RealityFoundation.__SceneImportOperation.__ImportedScene]) throws -> RealityFoundation.__SceneResourceLoadResult
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __Downsampling {
  public struct Factor {
    public init(mipmapOffset: Swift.Int)
    public init(value: Swift.Int)
  }
  public enum Resolution {
    case noDownsampling
    case downsampling(factors: [RealityFoundation.__Downsampling.Factor])
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __DownsamplingStrategy {
  func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __DownsamplingStrategyClosure : RealityFoundation.__DownsamplingStrategy {
  public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Downsampling {
  public struct Minimal : RealityFoundation.__DownsamplingStrategy {
    public init()
    public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
  }
  public typealias ByteSize = Swift.UInt64
  public enum Error : Swift.Error, Swift.CustomDebugStringConvertible {
    case noSufficientDownsamplingStrategy(budget: RealityFoundation.__Downsampling.ByteSize, minimalSize: RealityFoundation.__Downsampling.ByteSize)
    public var debugDescription: Swift.String {
      get
    }
  }
  public struct Budgeted : RealityFoundation.__DownsamplingStrategy {
    public init(availableBytes: RealityFoundation.__Downsampling.ByteSize, device: Metal.MTLDevice)
    public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Downsampling {
  public static func getMipmapByteSizes(_ descriptor: Metal.MTLTextureDescriptor, device: Metal.MTLDevice) -> [RealityFoundation.__Downsampling.ByteSize]
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class VideoPlaybackController {
  public var audioInputMode: RealityFoundation.AudioResource.InputMode {
    get
    set
  }
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.VideoPlaybackController {
  public var reverbSendLevel: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityProximityTrigger : RealityFoundation.__RKEntityTrigger {
  public enum ExitType : Swift.Int, Swift.Codable {
    case none
    case sequence
    case reverse
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var targetEntity: RealityFoundation.Entity?
  public var __targetEntity: RealityFoundation.Entity? {
    get
  }
  public var distance: Swift.Float
  public var type: RealityFoundation.__RKEntityProximityTrigger.ExitType
  public var enterFired: Swift.Bool {
    get
  }
  public var exitFired: Swift.Bool {
    get
  }
  public init(targetEntity: RealityFoundation.Entity?, distance: Swift.Float, type: RealityFoundation.__RKEntityProximityTrigger.ExitType)
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Component {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  static var __typeName: Swift.String { get }
  static var __size: Swift.Int { get }
  static func __load(from buffer: Swift.UnsafeRawPointer, offset: Swift.Int) -> RealityFoundation.Component
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  static func __store(attribute: RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int, deinitialize: Swift.Bool)
  @available(macOS, deprecated: 11.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  @available(iOS, deprecated: 14.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  static func __store(attribute: RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> Self
  func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  static var __coreComponentType: RealityFoundation.__ComponentTypeRef { get }
  static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Component {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static var __typeName: Swift.String {
    get
  }
  public static var __size: Swift.Int {
    get
  }
  public static func __load(from buffer: Swift.UnsafeRawPointer, offset: Swift.Int) -> RealityFoundation.Component
  public static func __store(attribute: RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int, deinitialize: Swift.Bool)
  @available(macOS, deprecated: 11.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  @available(iOS, deprecated: 14.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  public static func __store(attribute: RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  public static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> Self
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
  public static func registerComponent()
  public static func __registerComponent() -> Swift.OpaquePointer?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol TransientComponent : RealityFoundation.Component {
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKActiveSceneObserver : AnyObject {
  func manager(_ manager: RealityFoundation.__RKActiveSceneManager, activeSceneDidChange scene: RealityFoundation.Scene?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(*, deprecated, message: "Please use the per-interaction-service runtime scene coordinator. __RKRuntimeSceneCoordinator")
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKActiveSceneManager {
  public static var shared: RealityFoundation.__RKActiveSceneManager
  public init()
  public var activeScene: RealityFoundation.Scene? {
    get
    set
  }
  public func addObserver(observer: RealityFoundation.__RKActiveSceneObserver)
  public func removeObserver(observer: RealityFoundation.__RKActiveSceneObserver)
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SimpleMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias BaseColor = RealityFoundation.PhysicallyBasedMaterial.BaseColor
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.PhysicallyBasedMaterial.Texture
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.UnlitMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias BaseColor = RealityFoundation.PhysicallyBasedMaterial.BaseColor
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.PhysicallyBasedMaterial.Texture
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Blending = RealityFoundation.PhysicallyBasedMaterial.Blending
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __SkyboxComponent : RealityFoundation.Component, Swift.Equatable {
  public var environment: RealityFoundation.EnvironmentResource?
  public init()
  public init(environment: RealityFoundation.EnvironmentResource?)
  public static func == (lhs: RealityFoundation.__SkyboxComponent, rhs: RealityFoundation.__SkyboxComponent) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.__SkyboxComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__SkyboxComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum MeshBuffers {
  public struct Identifier : Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
    public let name: Swift.String
    public let isCustom: Swift.Bool
    public static let positions: RealityFoundation.MeshBuffers.Identifier
    public static let normals: RealityFoundation.MeshBuffers.Identifier
    public static let tangents: RealityFoundation.MeshBuffers.Identifier
    public static let bitangents: RealityFoundation.MeshBuffers.Identifier
    public static let textureCoordinates: RealityFoundation.MeshBuffers.Identifier
    public static let triangleIndices: RealityFoundation.MeshBuffers.Identifier
    public var description: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: RealityFoundation.MeshBuffers.Identifier, rhs: RealityFoundation.MeshBuffers.Identifier) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Rate {
    case vertex
    case face
    case faceVarying
    public static func == (a: RealityFoundation.MeshBuffers.Rate, b: RealityFoundation.MeshBuffers.Rate) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ElementType {
    case uInt8
    case uInt16
    case uInt32
    case int8
    case int16
    case int32
    case float
    case double
    case simd2Float
    case simd3Float
    case simd4Float
    public static func == (a: RealityFoundation.MeshBuffers.ElementType, b: RealityFoundation.MeshBuffers.ElementType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MeshBufferSemantic : Swift.Identifiable {
  associatedtype Element
  var id: RealityFoundation.MeshBuffers.Identifier { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers {
  public struct Semantic<Element> : RealityFoundation.MeshBufferSemantic {
    public let id: RealityFoundation.MeshBuffers.Identifier
    public typealias ID = RealityFoundation.MeshBuffers.Identifier
  }
  public static let positions: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let normals: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let tangents: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let bitangents: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let textureCoordinates: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD2<Swift.Float>>
  public static let triangleIndices: RealityFoundation.MeshBuffers.Semantic<Swift.UInt32>
  public static func custom<Value>(_ name: Swift.String, type: Value.Type) -> RealityFoundation.MeshBuffers.Semantic<Value>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshBuffer<Element> : Swift.Sequence {
  public typealias Element = Element
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Element?
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshBuffer<Element>.Iterator
  public let count: Swift.Int
  public var rate: RealityFoundation.MeshBuffers.Rate
  public var elements: [Element] {
    get
  }
  public func usingRate(_ rate: RealityFoundation.MeshBuffers.Rate) -> RealityFoundation.MeshBuffer<Element>
  public func forEach(_ body: (Element, Element) throws -> Swift.Void) rethrows
  public func forEach(_ body: (Element, Element, Element) throws -> Swift.Void) rethrows
  public func forEach(_ body: (Element, Element, Element, Element) throws -> Swift.Void) rethrows
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int8 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt8 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int16 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int16
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt16 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt16
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int32 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int32
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt32 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt32
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Float {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Float
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Double {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Double
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD2<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD2<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD3<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD3<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD4<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD4<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers {
  public typealias Positions = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias Normals = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias Tangents = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias TextureCoordinates = RealityFoundation.MeshBuffer<Swift.SIMD2<Swift.Float>>
  public typealias TriangleIndices = RealityFoundation.MeshBuffer<Swift.UInt32>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnyMeshBuffer {
  public var id: RealityFoundation.MeshBuffers.Identifier {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var rate: RealityFoundation.MeshBuffers.Rate {
    get
  }
  public var elementType: RealityFoundation.MeshBuffers.ElementType {
    get
  }
  public func get<Value>(_: Value.Type = Value.self) -> RealityFoundation.MeshBuffer<Value>?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MeshBufferContainer {
  var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] { get }
  subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBufferContainer {
  public var positions: RealityFoundation.MeshBuffers.Positions {
    get
    set
  }
  public var normals: RealityFoundation.MeshBuffers.Normals? {
    get
    set
  }
  public var tangents: RealityFoundation.MeshBuffers.Tangents? {
    get
    set
  }
  public var bitangents: RealityFoundation.MeshBuffers.Tangents? {
    get
    set
  }
  public var textureCoordinates: RealityFoundation.MeshBuffers.TextureCoordinates? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshDescriptor : RealityFoundation.MeshBufferContainer {
  public enum Materials {
    case allFaces(Swift.UInt32)
    case perFace([Swift.UInt32])
  }
  public enum Primitives {
    case triangles([Swift.UInt32])
    case polygons([Swift.UInt8], [Swift.UInt32])
    case trianglesAndQuads(triangles: [Swift.UInt32], quads: [Swift.UInt32])
  }
  public init(name: Swift.String = "")
  public var name: Swift.String
  public var materials: RealityFoundation.MeshDescriptor.Materials
  public var primitives: RealityFoundation.MeshDescriptor.Primitives?
  public var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] {
    get
  }
  public subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBlinkAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKLightTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Event {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol EventSource {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum SceneEvents {
  public struct Update : RealityFoundation.Event {
    public let scene: RealityFoundation.Scene
    public let deltaTime: Foundation.TimeInterval
  }
  public struct AnchoredStateChanged : RealityFoundation.Event {
    public let isAnchored: Swift.Bool
    public let anchor: RealityFoundation.HasAnchoring
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SceneEvents {
  public struct DidAddEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct DidActivateEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct WillDeactivateEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct WillRemoveEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct DidReparentEntity : RealityFoundation.Event {
    public let child: RealityFoundation.Entity
    public let previousParent: RealityFoundation.Entity?
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum AnimationEvents {
  public struct PlaybackCompleted : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
  public struct PlaybackLooped : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
  public struct PlaybackTerminated : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum AudioEvents {
  public struct PlaybackCompleted : RealityFoundation.Event {
    public var playbackController: RealityFoundation.AudioPlaybackController
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum CollisionEvents {
  public struct Began : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
    public let position: Swift.SIMD3<Swift.Float>
    public let impulse: Swift.Float
  }
  public struct Updated : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
    public let position: Swift.SIMD3<Swift.Float>
    public let impulse: Swift.Float
  }
  public struct Ended : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum SynchronizationEvents {
  public struct OwnershipRequest : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let requester: RealityFoundation.SynchronizationPeerID
    public let accept: () -> Swift.Void
  }
  public struct OwnershipChanged : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let newOwner: RealityFoundation.SynchronizationPeerID?
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum ComponentEvents {
  public struct DidAdd : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: RealityFoundation.Component.Type
  }
  public struct DidActivate : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: RealityFoundation.Component.Type
  }
  public struct WillDeactivate : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: RealityFoundation.Component.Type
  }
  public struct WillRemove : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: RealityFoundation.Component.Type
  }
  public struct DidChange : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: RealityFoundation.Component.Type
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public func subscribe<E>(to event: E.Type, on sourceObject: RealityFoundation.EventSource? = nil, _ handler: @escaping (E) -> Swift.Void) -> Combine.Cancellable where E : RealityFoundation.Event
  public func publisher<E>(for event: E.Type, on sourceObject: RealityFoundation.EventSource? = nil) -> RealityFoundation.Scene.Publisher<E> where E : RealityFoundation.Event
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.Scene {
  public func subscribe<E>(to event: E.Type, on sourceObject: RealityFoundation.EventSource? = nil, componentType: RealityFoundation.Component.Type?, _ handler: @escaping (E) -> Swift.Void) -> Combine.Cancellable where E : RealityFoundation.Event
  public func publisher<E>(for event: E.Type, on sourceObject: RealityFoundation.EventSource? = nil, componentType: RealityFoundation.Component.Type?) -> RealityFoundation.Scene.Publisher<E> where E : RealityFoundation.Event
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public struct Publisher<E> : Combine.Publisher where E : RealityFoundation.Event {
    public typealias Output = E
    public typealias Failure = Swift.Never
    public func receive<S>(subscriber: S) where E == S.Input, S : Combine.Subscriber, S.Failure == RealityFoundation.Scene.Publisher<E>.Failure
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAssetBundle {
  public static let __sdkBundleID: Swift.String
  public static let __sdkBundleVersionKey: Swift.String
  public static let __sdkBundleVersion: Swift.String
  public static let __sdkBundleVersionInvalid: Swift.String
  public static let __fileExtension: Swift.String
  public static var fileExtension: Swift.String {
    get
  }
  public struct Header : Swift.Codable {
    public struct VersionInfo : Swift.Codable {
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public var versionInfo: RealityFoundation.__REAssetBundle.Header.VersionInfo
    public var minVersion: Swift.Int
    public var identifier: Foundation.UUID?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var sceneAssets: [RealityFoundation.__REAsset] {
    get
  }
  public let __sceneAssets: [RealityFoundation.__REAsset]
  public var mainSceneAsset: RealityFoundation.__REAsset? {
    get
  }
  public var __mainSceneAsset: RealityFoundation.__REAsset? {
    get
  }
  public static func frameworkVersion(key: Swift.String) -> Swift.String
  public func mainSceneIdentifier() -> RealityFoundation.__REAssetIdentifier?
  public enum QueueOptions : Swift.Equatable {
    case fromEngineQueue
    case notFromEngineQueue(canUseEngineQueue: Swift.Bool)
    public static func == (a: RealityFoundation.__REAssetBundle.QueueOptions, b: RealityFoundation.__REAssetBundle.QueueOptions) -> Swift.Bool
  }
  public struct ExportOptions {
    public struct AssetRemapping {
      public let rawAssetPath: Swift.String
      public let replacementName: Swift.String
      public init(rawAssetPath: Swift.String, replacement: Swift.String)
    }
    public var queueOptions: RealityFoundation.__REAssetBundle.QueueOptions
    public var compressionLevel: Swift.Int?
    public var progress: Foundation.Progress?
    public var generateIdentifier: Swift.Bool
    public var deduplicateAssets: Swift.Bool
    public var __envelopeVersion: RealityFoundation.__AssetBundleEnvelopeVersion
    public var remapSingleFile: ((Foundation.URL) -> RealityFoundation.__REAssetBundle.ExportOptions.AssetRemapping?)?
    public var remapMultipleFiles: ((Foundation.URL) -> [RealityFoundation.__REAssetBundle.ExportOptions.AssetRemapping]?)?
    public init(queueOptions: RealityFoundation.__REAssetBundle.QueueOptions)
  }
  public struct LoadOptions {
    public var queueOptions: RealityFoundation.__REAssetBundle.QueueOptions
    @available(*, deprecated, message: "will be removed")
    public var materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride?
    public var downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?
    public var performanceReport: RealityFoundation.__REArchivalStats?
    public init(queueOptions: RealityFoundation.__REAssetBundle.QueueOptions)
  }
  @available(*, deprecated, message: "will be removed")
  public struct __MaterialDefinitionOverride {
    public init(materialDefinition: Swift.String, serviceLocator: Swift.OpaquePointer)
  }
  public struct AssetMap : Swift.Codable {
    public struct SceneDescriptor : Swift.Codable, Swift.Equatable {
      public static func == (a: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor, b: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor) -> Swift.Bool
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct AssetDescriptor : Swift.Codable {
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public var scenes: [RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor]
    public var assets: [RealityFoundation.__REAssetBundle.AssetMap.AssetDescriptor]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public static func __init(sceneAssets: [RealityFoundation.__REAsset], assetService: RealityFoundation.__REAssetService) throws -> RealityFoundation.__REAssetBundle
  public static func __init(sceneAssets: [RealityFoundation.__REAsset], assetService: RealityFoundation.__REAssetService, assetMapSceneDescriptorsByAsset: [RealityFoundation.__REAsset : RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor] = [:]) -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Use __init(URL:__REAssetService:LoadOptions)")
  public init(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions = .fromEngineQueue) throws
  public static func __init(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  public static func __init(bundle: Foundation.Bundle, entryName: Swift.String, assetService: RealityFoundation.__REAssetService, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Use __init(URL:__REAssetService:LoadOptions)")
  public static func __init(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride? = nil, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions = .fromEngineQueue) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "will be moved to internal; use __init(URL:__REAssetService:LoadOptions)")
  public init(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?, with options: RealityFoundation.__REAssetBundle.QueueOptions) throws
  @available(*, deprecated, message: "use load(url:assetService:completionHandler:) instead")
  public static func load(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride? = nil, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, Swift.Error>) -> Swift.Void)
  public static func load(url: Foundation.URL, assetService: RealityFoundation.__REAssetService, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, Swift.Error>) -> Swift.Void)
  public static func load(bundle: Foundation.Bundle, entryName: Swift.String, assetService: RealityFoundation.__REAssetService, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, Swift.Error>) -> Swift.Void)
  public var sceneDescriptors: [RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor] {
    get
  }
  public func sceneAsset(for sceneDescriptor: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor) -> RealityFoundation.__REAsset?
  public static var temporaryURL: Foundation.URL
  public func write(to url: Foundation.URL) throws
  public func __write(to url: Foundation.URL, fromEngineQueue: Swift.Bool = true) throws
  public func write(to url: Foundation.URL, with options: RealityFoundation.__REAssetBundle.ExportOptions) throws
  @available(*, deprecated, message: "use __write(to:with:) instead")
  public func __write(to url: Foundation.URL, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions, compressionLevel: Swift.Int? = 1, progress: Foundation.Progress? = nil) throws
  public func __write(to url: Foundation.URL, with options: RealityFoundation.__REAssetBundle.ExportOptions) throws
  public func __write(to url: Foundation.URL, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RealityFileError : Swift.Error, Swift.CustomDebugStringConvertible {
  case unsupportedVersion(Swift.Int)
  case archiveLoadFailed
  case headerParseFailed
  case assetMapParseFailed
  case deduplicationInformationParseFailed
  case contentsLoadFailed
  case assetBundleCreationFailed
  case generic(Swift.String)
  public var debugDescription: Swift.String {
    get
  }
}
public typealias __REArchivalStats = Swift.OpaquePointer
public typealias __REArchiveEnvelopeVersion = Swift.UInt8
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __AssetBundleEnvelopeVersion {
  case defaultVersion
  case specificVersion(versionNumber: RealityFoundation.__REArchiveEnvelopeVersion)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __Archiving {
  public static func archivePackage(source: Foundation.URL, destination: Foundation.URL, envelopeVersion: RealityFoundation.__AssetBundleEnvelopeVersion, compressionLevel: Swift.Int? = nil, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "will be removed")
  public static func unarchivePackage(source: Foundation.URL, destination: Foundation.URL) throws
  public static func unarchivePackage(source: Foundation.URL, destination: Foundation.URL, withReport report: RealityFoundation.__REArchivalStats? = nil) throws
  public enum ArchivingError : Swift.Error {
    case couldNotUnarchive
    case couldNotArchive
    public static func == (a: RealityFoundation.__Archiving.ArchivingError, b: RealityFoundation.__Archiving.ArchivingError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct ModelComponent : RealityFoundation.Component {
  public var mesh: RealityFoundation.MeshResource
  public var materials: [RealityFoundation.Material]
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var boundsMargin: Swift.Float {
    get
    set
  }
  public init(mesh: RealityFoundation.MeshResource, materials: [RealityFoundation.Material])
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ModelComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshModelCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ models: [RealityFoundation.MeshResource.Model])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Model? {
    get
  }
  @discardableResult
  public mutating func insert(_ model: __owned RealityFoundation.MeshResource.Model) -> Swift.Bool
  @discardableResult
  public mutating func update(_ model: __owned RealityFoundation.MeshResource.Model) -> RealityFoundation.MeshResource.Model?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Model?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshModelCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Model?
    public typealias Element = RealityFoundation.MeshResource.Model
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshModelCollection.Iterator
  public typealias Element = RealityFoundation.MeshResource.Model
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshModelCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Model...)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Model
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshPartCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ parts: [RealityFoundation.MeshResource.Part])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Part? {
    get
  }
  @discardableResult
  public mutating func insert(_ part: __owned RealityFoundation.MeshResource.Part) -> Swift.Bool
  @discardableResult
  public mutating func update(_ part: __owned RealityFoundation.MeshResource.Part) -> RealityFoundation.MeshResource.Part?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Part?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshPartCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Part?
    public typealias Element = RealityFoundation.MeshResource.Part
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshPartCollection.Iterator
  public typealias Element = RealityFoundation.MeshResource.Part
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshPartCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Part...)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Part
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshInstanceCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ instances: [RealityFoundation.MeshResource.Instance])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Instance? {
    get
  }
  @discardableResult
  public mutating func insert(_ instance: __owned RealityFoundation.MeshResource.Instance) -> Swift.Bool
  @discardableResult
  public mutating func update(_ instance: __owned RealityFoundation.MeshResource.Instance) -> RealityFoundation.MeshResource.Instance?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Instance?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshInstanceCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Instance?
    public typealias Element = RealityFoundation.MeshResource.Instance
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshInstanceCollection.Iterator
  public typealias Element = RealityFoundation.MeshResource.Instance
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshInstanceCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Instance...)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Instance
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshResource {
  public struct Part : RealityFoundation.MeshBufferContainer, Swift.Identifiable {
    public var id: Swift.String
    public var materialIndex: Swift.Int {
      get
      set
    }
    public init(id: Swift.String, materialIndex: Swift.Int)
    public var triangleIndices: RealityFoundation.MeshBuffers.TriangleIndices? {
      get
      set
    }
    public var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] {
      get
    }
    public subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic {
      get
      set
    }
    public typealias ID = Swift.String
  }
  public struct Model : Swift.Identifiable {
    public var id: Swift.String
    public var parts: RealityFoundation.MeshPartCollection
    public init(id: Swift.String, parts: [RealityFoundation.MeshResource.Part])
    public init(id modelID: Swift.String, descriptors: [RealityFoundation.MeshDescriptor]) throws
    public typealias ID = Swift.String
  }
  public struct Instance : Swift.Identifiable {
    public var id: Swift.String
    public var model: Swift.String
    public var transform: simd.simd_float4x4
    public init(id: Swift.String, model: Swift.String, at transform: simd.simd_float4x4? = nil)
    public typealias ID = Swift.String
  }
  public struct Contents {
    public var models: RealityFoundation.MeshModelCollection
    public var instances: RealityFoundation.MeshInstanceCollection
    public init()
  }
  public var contents: RealityFoundation.MeshResource.Contents {
    get
  }
  public func replace(with content: RealityFoundation.MeshResource.Contents) throws
  public func replaceAsync(with content: RealityFoundation.MeshResource.Contents) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
  public static func generate(from content: RealityFoundation.MeshResource.Contents) throws -> RealityFoundation.MeshResource
  public static func generateAsync(from content: RealityFoundation.MeshResource.Contents) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
  public static func generate(from descriptors: [RealityFoundation.MeshDescriptor]) throws -> RealityFoundation.MeshResource
  public static func generateAsync(from descriptors: [RealityFoundation.MeshDescriptor]) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.MaterialParameters.Texture
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public typealias TextureCoordinateTransform = RealityFoundation.MaterialParameterTypes.TextureCoordinateTransform
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct BaseColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(_ value: RealityFoundation.CustomMaterial.BaseColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Metallic : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.Metallic)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Roughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.Roughness)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct EmissiveColor {
    public static let __colorKey: Swift.String
    public var __color: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(_ value: RealityFoundation.CustomMaterial.EmissiveColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Specular : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.Specular)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Blending {
    case opaque
    case transparent(opacity: RealityFoundation.PhysicallyBasedMaterial.Opacity)
    public init(blending value: RealityFoundation.CustomMaterial.Blending)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Opacity : Swift.ExpressibleByFloatLiteral {
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static var textureSemantic: RealityFoundation.TextureResource.Semantic {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.Opacity)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Clearcoat : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.Clearcoat)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct ClearcoatRoughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.CustomMaterial.ClearcoatRoughness)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Normal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.CustomMaterial.Normal)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AmbientOcclusion {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.CustomMaterial.AmbientOcclusion)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AnisotropyLevel : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AnisotropyAngle : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct SheenColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public struct ChildCollection : Swift.Collection {
    public typealias Element = RealityFoundation.Entity
    public typealias Index = Swift.Int
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.Entity.ChildCollection>
    public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<RealityFoundation.Entity.ChildCollection>
    public typealias SubSequence = Swift.Slice<RealityFoundation.Entity.ChildCollection>
    public __consuming func makeIterator() -> RealityFoundation.Entity.ChildCollection.Iterator
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public func index(after i: Swift.Int) -> Swift.Int
    public subscript(index: Swift.Int) -> RealityFoundation.Entity {
      get
      set
    }
    public func append(_ child: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
    public func append(contentsOf array: [RealityFoundation.Entity], preservingWorldTransforms: Swift.Bool = false)
    public func append<S>(contentsOf sequence: S, preservingWorldTransforms: Swift.Bool = false) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
    public func append(contentsOf children: RealityFoundation.Entity.ChildCollection, preservingWorldTransforms: Swift.Bool = false)
    public func remove(_ child: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
    public func remove(at index: Swift.Int, preservingWorldTransform: Swift.Bool = false)
    public func removeAll(keepCapacity: Swift.Bool = false, preservingWorldTransforms: Swift.Bool = false)
    public func removeAll(preservingWorldTransforms: Swift.Bool = false)
    public func replaceAll(_ children: [RealityFoundation.Entity], preservingWorldTransforms: Swift.Bool = false)
    public func replaceAll<S>(_ children: S, preservingWorldTransforms: Swift.Bool = false) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection {
  public struct IndexingIterator<Elements> where Elements : Swift.Collection {
    public init(_elements: Elements)
    public init(_elements: Elements, _position: Elements.Index)
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection.IndexingIterator : Swift.IteratorProtocol, Swift.Sequence {
  public typealias Element = Elements.Element
  public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<Elements>
  public typealias SubSequence = Swift.AnySequence<RealityFoundation.Entity.ChildCollection.IndexingIterator<Elements>.Element>
  public mutating func next() -> Elements.Element?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasDirectionalLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasDirectionalLight {
  public var light: RealityFoundation.DirectionalLightComponent {
    get
    set
  }
  public var shadow: RealityFoundation.DirectionalLightComponent.Shadow? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookAtTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public struct AnchorCollection : Swift.Collection {
    public typealias Element = RealityFoundation.HasAnchoring
    public typealias Index = Swift.Int
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.Scene.AnchorCollection>
    public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<RealityFoundation.Scene.AnchorCollection>
    public typealias SubSequence = Swift.Slice<RealityFoundation.Scene.AnchorCollection>
    public __consuming func makeIterator() -> RealityFoundation.Scene.AnchorCollection.Iterator
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public func index(after i: Swift.Int) -> Swift.Int
    public subscript(index: Swift.Int) -> RealityFoundation.Scene.AnchorCollection.Element {
      get
      set
    }
    public func append(_ entity: RealityFoundation.Scene.AnchorCollection.Element)
    public func append(contentsOf array: [RealityFoundation.Scene.AnchorCollection.Element])
    public func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.HasAnchoring
    public func remove(_ entity: RealityFoundation.Scene.AnchorCollection.Element)
    public func remove(at index: Swift.Int)
    public func removeAll(keepCapacity: Swift.Bool = false)
    public func removeAll()
    public func replaceAll(_ entities: [RealityFoundation.Scene.AnchorCollection.Element])
    public func replaceAll<S>(_ entities: S) where S : Swift.Sequence, S.Element : RealityFoundation.HasAnchoring
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene.AnchorCollection : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class EnvironmentResource : RealityFoundation.Resource {
  public static let __compiledExtension: Swift.String
  @objc deinit
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.EnvironmentResource
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.EnvironmentResource>
  public static func __load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.EnvironmentResource
  public static func __fromAssets(_ coreIBLAsset: RealityFoundation.__AssetRef?, _ coreSkyboxAsset: RealityFoundation.__AssetRef?) -> RealityFoundation.EnvironmentResource
  public static func __exportCompiledResource(contentsOf inURL: Foundation.URL, to outURL: Foundation.URL) throws
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __SkyboxMaterial : RealityFoundation.Material {
  public let __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public init()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public func generateCollisionShapes(recursive: Swift.Bool)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  public func __generateCollisionShape()
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class Scene {
  public var __coreScene: RealityFoundation.__SceneRef {
    get
  }
  public var name: Swift.String {
    get
  }
  public var __audioListener: RealityFoundation.Entity? {
    get
    set
  }
  public func __initAudioChannelCaptureUnit() -> AudioToolbox.AUAudioUnit
  public func __startAudioChannelCapture(auAudioUnit: AudioToolbox.AUAudioUnit, maxRecordingDurationInSeconds: Swift.Int)
  public func __stopAudioChannelCapture(auAudioUnit: AudioToolbox.AUAudioUnit) -> AVFAudio.AVAudioPCMBuffer
  @discardableResult
  public func __addPostProcessingAudioEffect(_ auDesc: AudioToolbox.AudioComponentDescription) -> AudioToolbox.AUAudioUnit?
  public var __defaultCamera: RealityFoundation.Entity! {
    get
  }
  public var __audioMixer: RealityFoundation.Entity? {
    get
  }
  @available(*, deprecated, message: "Will be removed after D12. Instead of `__entities`, use `Scene.anchors` to iterate over non-ninja root level entities, or RESceneGetEntitiesArray.")
  public var __entities: [RealityFoundation.Entity] {
    get
  }
  public var anchors: RealityFoundation.Scene.AnchorCollection {
    get
    set
    _modify
  }
  public func addAnchor(_ anchor: RealityFoundation.HasAnchoring)
  public func removeAnchor(_ anchor: RealityFoundation.HasAnchoring)
  public static func __testInit(name: Swift.String) -> RealityFoundation.Scene
  @objc deinit
  public func findEntity(named name: Swift.String) -> RealityFoundation.Entity?
  public var __interactionService: RealityFoundation.__RKEntityInteractionService {
    get
  }
  public var synchronizationService: RealityFoundation.SynchronizationService? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public static func __fromCore(_ coreScene: RealityFoundation.__SceneRef) -> RealityFoundation.Scene
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RealityFoundation.Scene, rhs: RealityFoundation.Scene) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : Swift.Identifiable {
  public var id: Swift.UInt64 {
    get
  }
  public typealias ID = Swift.UInt64
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : RealityFoundation.EventSource {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public var __corePointer: Swift.OpaquePointer {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityAnimateAction : RealityFoundation.__RKEntityAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func stop() -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityStartAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  public init(targetEntity: RealityFoundation.Entity?, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false, muteAudio: Swift.Bool = false, audioGain: Swift.Double = 1.0, targetAnimationEntity: RealityFoundation.Entity? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityStopAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityToggleAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  @discardableResult
  public func moveCharacter(by moveDelta: Swift.SIMD3<Swift.Float>, deltaTime: Swift.Float, relativeTo referenceEntity: RealityFoundation.Entity?, collisionHandler: ((RealityFoundation.CharacterControllerComponent.Collision) -> Swift.Void)? = nil) -> RealityFoundation.CharacterControllerComponent.CollisionFlags
  public func teleportCharacter(to position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public var characterController: RealityFoundation.CharacterControllerComponent? {
    get
    set
  }
  public var characterControllerState: RealityFoundation.CharacterControllerStateComponent? {
    get
    set
  }
}
@usableFromInline
internal typealias REMatrix2x2F = simd.simd_float2x2
@usableFromInline
internal typealias REMatrix3x3F = simd.simd_float3x3
@usableFromInline
internal typealias REMatrix4x4F = simd.simd_float4x4
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension simd.simd_float3x3 {
  @inlinable internal init(_ matrix: RealityFoundation.REMatrix4x4F) {
        self = REMatrix3x3F(columns: (matrix[0]._xyz, matrix[1]._xyz, matrix[2]._xyz))
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_float4x4 {
  @inlinable internal static var identity: RealityFoundation.REMatrix4x4F {
    get { return REMatrix4x4F( diagonal: SIMD4<Float>(repeating: 1.0)) }
  }
  @inlinable internal init(rows: (Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>)) {
        self = simd_matrix_from_rows(rows.0, rows.1, rows.2, rows.3)
    }
  @inlinable internal init(rows r: ((Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float))) {
        self = simd_matrix_from_rows(SIMD4<Float>(r.0.0, r.0.1, r.0.2, r.0.3),
                                     SIMD4<Float>(r.1.0, r.1.1, r.1.2, r.1.3),
                                     SIMD4<Float>(r.2.0, r.2.1, r.2.2, r.2.3),
                                     SIMD4<Float>(r.3.0, r.3.1, r.3.2, r.3.3))
    }
  @inlinable internal init(translation t: Swift.SIMD3<Swift.Float>) {
        self.init(columns: (SIMD4<Float>(1, 0, 0, 0),
                            SIMD4<Float>(0, 1, 0, 0),
                            SIMD4<Float>(0, 0, 1, 0),
                            SIMD4<Float>(t.x, t.y, t.z, 1)))
    }
  @inlinable internal init(scale s: Swift.SIMD3<Swift.Float>) {
        self.init(diagonal: SIMD4<Float>(s.x, s.y, s.z, 1))
    }
  @inlinable internal init(rotation: simd.simd_quatf) {
        self = simd_matrix4x4(rotation)
    }
  @inlinable internal init(translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        self = simd_matrix4x4(rotation)
        self.scale(scale)
        self.translate(translation)
    }
  @inlinable internal func scaled(_ scale: Swift.SIMD3<Swift.Float>) -> RealityFoundation.REMatrix4x4F {
        var m = self
        m.columns.0 *= scale.x
        m.columns.1 *= scale.y
        m.columns.2 *= scale.z
        return m
    }
  @inlinable internal func translated(_ trans: Swift.SIMD3<Swift.Float>) -> RealityFoundation.REMatrix4x4F {
        var m = self
        m.columns.3._xyz += trans
        return m
    }
  @inlinable internal mutating func scale(_ scale: Swift.SIMD3<Swift.Float>) {
        self.columns.0 *= scale.x
        self.columns.1 *= scale.y
        self.columns.2 *= scale.z
    }
  @inlinable internal mutating func translate(_ trans: Swift.SIMD3<Swift.Float>) {
        self.columns.3._xyz += trans
    }
  @inlinable internal var scale: Swift.SIMD3<Swift.Float> {
    get {
            // See `Matrix4x4.extractScale()` for additional comments.
            let minor = matrix_float3x3(self)
            let sign = minor.determinant > Float(0) ? Float(1) : Float(-1)
            return sign * SIMD3<Float>(simd.length(minor.columns.0),
                                       simd.length(minor.columns.1),
                                       simd.length(minor.columns.2))
        }
    set {
            self.columns.0._xyz = simd.normalize(self.columns.0._xyz)
            self.columns.1._xyz = simd.normalize(self.columns.1._xyz)
            self.columns.2._xyz = simd.normalize(self.columns.2._xyz)
            scale(newValue)
        }
  }
  @usableFromInline
  internal var rotation: simd.simd_quatf {
    get
    set
  }
  @inlinable internal var translation: Swift.SIMD3<Swift.Float> {
    get {
            return columns.3._xyz
        }
    set {
            columns.3._xyz = newValue
        }
  }
  @inlinable internal func decompose() -> (translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        return (translation, rotation, scale)
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKScenePhysics {
  public var gravity: Swift.SIMD3<Swift.Float>
  public var adaptiveTimeStep: Swift.Bool
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKScenePhysics.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public var __gravity: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  public var __adaptiveTimeStep: Swift.Bool? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct CharacterControllerStateComponent : RealityFoundation.Component {
  public init()
  public let velocity: Swift.SIMD3<Swift.Float>
  public let isOnGround: Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CharacterControllerStateComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CharacterControllerStateComponent
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RCEntity : RealityFoundation.Entity, RealityFoundation.HasAnchoring {
  public func invokeCustomTrigger(named name: Swift.String, overrides: [Swift.String : RealityFoundation.Entity]? = nil)
  public func registerCustomAction(named name: Swift.String, action: @escaping (RealityFoundation.Entity?) -> Swift.Void)
  required public init()
  @usableFromInline
  override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsMotionComponent : RealityFoundation.Component, Swift.Equatable {
  public var linearVelocity: Swift.SIMD3<Swift.Float>
  public var angularVelocity: Swift.SIMD3<Swift.Float>
  public init()
  public init(linearVelocity: Swift.SIMD3<Swift.Float> = .zero, angularVelocity: Swift.SIMD3<Swift.Float> = .zero)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsMotionComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.PhysicsMotionComponent, b: RealityFoundation.PhysicsMotionComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __RERetain(_ ptr: Swift.OpaquePointer?)
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __RERelease(_ ptr: Swift.OpaquePointer?)
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKTimerTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct QueryPredicate<Value> {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityFadeAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, targetOpacity: Swift.Float, duration: Swift.Float)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKFadeSceneAction : RealityFoundation.__RKEntityAction {
  public init(targetOpacity: Swift.Float, duration: Swift.Float)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  public func addForce(_ force: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func addForce(_ force: Swift.SIMD3<Swift.Float>, at position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func addTorque(_ torque: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func clearForcesAndTorques()
  public func applyLinearImpulse(_ impulse: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func applyAngularImpulse(_ impulse: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  public func applyImpulse(_ impulse: Swift.SIMD3<Swift.Float>, at position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasCollision : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasCollision {
  public var collision: RealityFoundation.CollisionComponent? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasAnchoring : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasAnchoring {
  public var anchoring: RealityFoundation.AnchoringComponent {
    get
    set
  }
  public var anchorIdentifier: Foundation.UUID? {
    get
  }
  public func reanchor(_ target: RealityFoundation.AnchoringComponent.Target, preservingWorldTransform: Swift.Bool = true)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var anchor: RealityFoundation.HasAnchoring? {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MaterialParameterTypes {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum FaceCulling {
    case none
    case front
    case back
    public static func == (a: RealityFoundation.MaterialParameterTypes.FaceCulling, b: RealityFoundation.MaterialParameterTypes.FaceCulling) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct TextureCoordinateTransform {
    public var offset: Swift.SIMD2<Swift.Float>
    public var scale: Swift.SIMD2<Swift.Float>
    public var rotation: Swift.Float
    public init(offset: Swift.SIMD2<Swift.Float> = .init(), scale: Swift.SIMD2<Swift.Float> = .init(1, 1), rotation: Swift.Float = 0.0)
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationView : RealityFoundation.AnimationDefinition {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var source: RealityFoundation.AnimationDefinition? {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public init(source: RealityFoundation.AnimationDefinition, name: Swift.String = "", bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityAudioActionType : Swift.String, Swift.Codable {
  case play
  case pause
  case stop
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKAudioSpatialModeSelection : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pointSource
  case ambientBed
  case stereoBypass
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKAudioSpatialModeSelection]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKAudioSpatialModeSelection] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityAudioAction : RealityFoundation.__RKEntityAction {
  public var type: RealityFoundation.__RKEntityAudioActionType
  public var path: Swift.String
  public var volume: Swift.Double
  public var loops: Swift.Bool
  public var spatialMode: RealityFoundation.__RKAudioSpatialModeSelection
  public var __audioAssetRef: Swift.OpaquePointer? {
    get
  }
  public init(targetEntity: RealityFoundation.Entity?, type: RealityFoundation.__RKEntityAudioActionType, path: Swift.String, volume: Swift.Double, loops: Swift.Bool, spatialMode: RealityFoundation.__RKAudioSpatialModeSelection = .pointSource, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore)
  @objc deinit
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public func stop() -> Swift.Bool
  override public func preloadAssets()
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowMoveInAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationFillMode : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public static let none: RealityFoundation.AnimationFillMode
  public static let forwards: RealityFoundation.AnimationFillMode
  public static let backwards: RealityFoundation.AnimationFillMode
  public static let both: RealityFoundation.AnimationFillMode
  public init(rawValue: Swift.Int8)
  public typealias ArrayLiteralElement = RealityFoundation.AnimationFillMode
  public typealias Element = RealityFoundation.AnimationFillMode
  public typealias RawValue = Swift.Int8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Float : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Double : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD2 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD3 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD4 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension simd.simd_quatf : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Transform : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct JointTransforms : Swift.BidirectionalCollection, Swift.MutableCollection, Swift.ExpressibleByArrayLiteral, Swift.Equatable, RealityFoundation.AnimatableData {
  public typealias Index = Swift.Int
  public typealias Element = RealityFoundation.Transform
  public typealias ArrayLiteralElement = RealityFoundation.Transform
  public init()
  public init(arrayLiteral elements: RealityFoundation.Transform...)
  public init<S>(_ transforms: S) where S : Swift.Sequence, S.Element == RealityFoundation.Transform
  public subscript(index: RealityFoundation.JointTransforms.Index) -> RealityFoundation.Transform {
    get
    set(newValue)
  }
  public var startIndex: RealityFoundation.JointTransforms.Index {
    get
  }
  public var endIndex: RealityFoundation.JointTransforms.Index {
    get
  }
  public func index(after i: RealityFoundation.JointTransforms.Index) -> RealityFoundation.JointTransforms.Index
  public func index(before i: RealityFoundation.JointTransforms.Index) -> RealityFoundation.JointTransforms.Index
  public static func == (lhs: RealityFoundation.JointTransforms, rhs: RealityFoundation.JointTransforms) -> Swift.Bool
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.JointTransforms>
  public typealias Iterator = Swift.IndexingIterator<RealityFoundation.JointTransforms>
  public typealias SubSequence = Swift.Slice<RealityFoundation.JointTransforms>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol AnimationDefinition {
  var name: Swift.String { get set }
  var blendLayer: Swift.Int32 { get set }
  var fillMode: RealityFoundation.AnimationFillMode { get set }
  var bindTarget: RealityFoundation.BindTarget { get set }
  var trimStart: Foundation.TimeInterval? { get set }
  var trimEnd: Foundation.TimeInterval? { get set }
  var trimDuration: Foundation.TimeInterval? { get set }
  var offset: Foundation.TimeInterval { get set }
  var delay: Foundation.TimeInterval { get set }
  var speed: Swift.Float { get set }
  var repeatMode: RealityFoundation.AnimationRepeatMode { get set }
  var duration: Foundation.TimeInterval { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationDefinition {
  public func trimmed(start: Foundation.TimeInterval? = nil, end: Foundation.TimeInterval? = nil, duration: Foundation.TimeInterval? = nil) -> Self
  public func repeated(count: Foundation.TimeInterval) -> Self
  public func repeated(count: Swift.Int) -> Self
  public func repeatingForever() -> Self
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetBundle {
  public func assetIdentifiers(forType: RealityFoundation.Resource.Type) -> [RealityFoundation.__REAssetIdentifier]
  public var sceneIdentifiers: [RealityFoundation.__REAssetIdentifier] {
    get
  }
  public func resource<T>(ofType: T.Type, identifier: RealityFoundation.__REAssetIdentifier) -> T? where T : RealityFoundation.Resource
  @discardableResult
  public func __add(resource: RealityFoundation.Resource) -> RealityFoundation.__REAssetIdentifier
  public func __renderGraphEmitter(identifier: RealityFoundation.__REAssetIdentifier) -> RealityFoundation.__RERenderGraphEmitter?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AnimationPlaybackController : Swift.Hashable {
  public var __identifier: RealityFoundation.__AnimationPlaybackTokenRef {
    get
  }
  weak public var entity: RealityFoundation.Entity? {
    get
  }
  public var isPaused: Swift.Bool {
    get
  }
  public var isComplete: Swift.Bool {
    get
  }
  public static func == (lhs: RealityFoundation.AnimationPlaybackController, rhs: RealityFoundation.AnimationPlaybackController) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func pause()
  public func resume()
  public func stop()
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationPlaybackController {
  public var isValid: Swift.Bool {
    get
  }
  public var isPlaying: Swift.Bool {
    get
  }
  public var isStopped: Swift.Bool {
    get
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var time: Foundation.TimeInterval {
    get
    set
  }
  public var blendFactor: Swift.Float {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var clock: CoreMedia.CMClockOrTimebase {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public struct ComponentSet {
    public subscript<T>(componentType: T.Type) -> T? where T : RealityFoundation.Component {
      get
      set
    }
    public subscript(componentType: RealityFoundation.Component.Type) -> RealityFoundation.Component? {
      get
      set
    }
    public func set<T>(_ component: T) where T : RealityFoundation.Component
    public func set(_ components: [RealityFoundation.Component])
    public func has(_ componentType: RealityFoundation.Component.Type) -> Swift.Bool
    public func remove(_ componentType: RealityFoundation.Component.Type)
    public func removeAll()
    public var count: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookupTable {
  public init()
  public func entity(for uuid: Foundation.UUID) -> RealityFoundation.Entity?
  public func uuid(for entity: RealityFoundation.Entity) -> Foundation.UUID?
  @discardableResult
  public func updateEntity(_ entity: RealityFoundation.Entity?, for uuid: Foundation.UUID) -> RealityFoundation.Entity?
  public func removeAllEntities()
  public func entity(name: Swift.String) -> RealityFoundation.Entity?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
open class Entity : RealityFoundation.HasHierarchy, RealityFoundation.HasSynchronization, RealityFoundation.HasTransform {
  public var __coreEntity: RealityFoundation.__EntityRef {
    get
  }
  public var components: RealityFoundation.Entity.ComponentSet {
    get
    set
  }
  public var scene: RealityFoundation.Scene? {
    get
  }
  public var name: Swift.String {
    get
    set
  }
  public var __boundingBox: RealityFoundation.__AABBRef {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func __findAssetDependencies(_ closure: (RealityFoundation.__AssetRef) -> Swift.Void)
  public var isActive: Swift.Bool {
    get
  }
  public var isAnchored: Swift.Bool {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var isEnabledInHierarchy: Swift.Bool {
    get
  }
  public static var __disableUpdateInteractionEntities: [RealityFoundation.Entity]?
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  open var __accessibilityElements: [Any]? {
    get
  }
  required public init()
  @usableFromInline
  internal init(_coreEntity: RealityFoundation.__EntityRef)
  public static func __testInit() -> RealityFoundation.Entity
  @objc deinit
  open func didClone(from source: RealityFoundation.Entity)
  public func findEntity(named name: Swift.String) -> RealityFoundation.Entity?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RealityFoundation.Entity, rhs: RealityFoundation.Entity) -> Swift.Bool
  open var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.Identifiable {
  public var id: Swift.UInt64 {
    get
  }
  public typealias ID = Swift.UInt64
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public static func __fromCore(_ coreEntity: RealityFoundation.__EntityRef) -> RealityFoundation.Entity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public func clone(recursive: Swift.Bool) -> Self
  public func __clone(recursive: Swift.Bool, remapInteractionIdentifiers: Swift.Bool) -> Self
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : RealityFoundation.EventSource {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCollisionTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, collidingEntities: [RealityFoundation.Entity] = [], tags: [Swift.String])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKWaitAction : RealityFoundation.__RKEntityAction {
  public init(duration: Swift.Float, block: @escaping () -> Swift.Void = { })
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public class __ARReferenceProvider : RealityFoundation.__ARReferenceProviding {
  @available(*, deprecated, message: "use the \"instance(for assetService: __REAssetService)\" instead")
  public static var shared: RealityFoundation.__ARReferenceProvider {
    get
  }
  public static func instance(for assetService: RealityFoundation.__REAssetService) -> RealityFoundation.__ARReferenceProvider
  public func supportsGroup(named group: Swift.String) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowPopAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasPerspectiveCamera : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPerspectiveCamera {
  public var camera: RealityFoundation.PerspectiveCameraComponent {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum CustomMaterialError : Swift.Error {
  case geometryModifierFunctionNotFound
  case surfaceShaderFunctionNotFound
  case defaultSurfaceShaderForMaterialNotFound
  public static func == (a: RealityFoundation.CustomMaterialError, b: RealityFoundation.CustomMaterialError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MaterialFunction {
  var name: Swift.String { get set }
  var library: Metal.MTLLibrary { get set }
  var __linkSPI: Swift.Bool { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct CustomMaterial : RealityFoundation.Material {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct GeometryModifier : RealityFoundation.MaterialFunction {
    public var name: Swift.String
    public var library: Metal.MTLLibrary
    public init(named name: Swift.String, in library: Metal.MTLLibrary)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct SurfaceShader : RealityFoundation.MaterialFunction {
    public var name: Swift.String
    public var library: Metal.MTLLibrary
    public init(named name: Swift.String, in library: Metal.MTLLibrary)
  }
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum LightingModel {
    case lit
    case unlit
    case clearcoat
    public static func == (a: RealityFoundation.CustomMaterial.LightingModel, b: RealityFoundation.CustomMaterial.LightingModel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier? = nil, lightingModel: RealityFoundation.CustomMaterial.LightingModel) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(from material: RealityFoundation.Material, surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier? = nil) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(from material: RealityFoundation.Material, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Custom {
    public var value: Swift.SIMD4<Swift.Float>
    public static let __valueKey: Swift.String
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public static let __defaultTexture: RealityFoundation.TextureResource
    public init(value: Swift.SIMD4<Swift.Float> = .init(repeating: 0), texture: RealityFoundation.CustomMaterial.Texture? = nil)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var lightingModel: RealityFoundation.CustomMaterial.LightingModel {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var baseColor: RealityFoundation.CustomMaterial.BaseColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var metallic: RealityFoundation.CustomMaterial.Metallic {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var roughness: RealityFoundation.CustomMaterial.Roughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveColor: RealityFoundation.CustomMaterial.EmissiveColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var specular: RealityFoundation.CustomMaterial.Specular {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var faceCulling: RealityFoundation.CustomMaterial.FaceCulling {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.CustomMaterial.Blending {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var normal: RealityFoundation.CustomMaterial.Normal {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var ambientOcclusion: RealityFoundation.CustomMaterial.AmbientOcclusion {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoat: RealityFoundation.CustomMaterial.Clearcoat {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoatRoughness: RealityFoundation.CustomMaterial.ClearcoatRoughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var textureCoordinateTransform: RealityFoundation.CustomMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var secondaryTextureCoordinateTransform: RealityFoundation.CustomMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var custom: RealityFoundation.CustomMaterial.Custom {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCustomAction : RealityFoundation.__RKEntityAction {
  public struct RKEntityCustomActionNotification {
    public static let name: Foundation.NSNotification.Name
    public static let sceneKey: Swift.String
    public static let identifierKey: Swift.String
    public static let entityKey: Swift.String
    public static let customArgumentsKey: Swift.String
  }
  public var handler: ((RealityFoundation.Entity?) -> Swift.Void)?
  final public let identifier: Swift.String
  final public let customArguments: [Swift.String : Swift.String]
  public var customArgumentsBlock: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?
  public init(targetEntity: RealityFoundation.Entity?, actionIdentifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)? = nil, customArguments: [Swift.String : Swift.String]? = [:], customArgumentsBlock: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisFloatAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MaterialParameters {
  public struct Texture {
    public struct Sampler {
      public init()
      public init(_ v: Metal.MTLSamplerDescriptor)
      public mutating func modify<R>(_ closure: (Metal.MTLSamplerDescriptor) throws -> R) rethrows -> R
      public func access<R>(_ closure: (Metal.MTLSamplerDescriptor) throws -> R) rethrows -> R
    }
    public var resource: RealityFoundation.TextureResource
    public var sampler: RealityFoundation.MaterialParameters.Texture.Sampler
    public var uvIndex: Swift.Int
    public init(_ resource: RealityFoundation.TextureResource, sampler: RealityFoundation.MaterialParameters.Texture.Sampler)
    public init(_ resource: RealityFoundation.TextureResource)
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class PhysicsMaterialResource : RealityFoundation.Resource {
  public static var `default`: RealityFoundation.PhysicsMaterialResource
  public var __staticFriction: Swift.Float {
    get
  }
  public var __dynamicFriction: Swift.Float {
    get
  }
  public var __restitution: Swift.Float {
    get
  }
  @objc deinit
  public static func generate(friction: Swift.Float = 0.8, restitution: Swift.Float = 0.8) -> RealityFoundation.PhysicsMaterialResource
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public static func generate(staticFriction: Swift.Float, dynamicFriction: Swift.Float, restitution: Swift.Float) -> RealityFoundation.PhysicsMaterialResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasSpotLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasSpotLight {
  public var light: RealityFoundation.SpotLightComponent {
    get
    set
  }
  public var shadow: RealityFoundation.SpotLightComponent.Shadow? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBounceAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisJiggleAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var isAccessibilityElement: Swift.Bool {
    get
    set
  }
  public var accessibilityLabel: Swift.String? {
    get
    set
  }
  public var accessibilityDescription: Swift.String? {
    get
    set
  }
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public var __isAccessibilityRoot: Swift.Bool {
    get
    set
  }
  public var __isAccessibilityEnabled: Swift.Bool {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var __accessibilityIdentifier: Swift.String? {
    get
    set
  }
  public var __accessibilityLabel: Swift.String? {
    get
    set
  }
  public var __accessibilityDescription: Swift.String? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var __accessibilityCustomContent: [(Swift.String, Swift.String, Swift.UInt)] {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.Entity
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  public static func __loadAsync(named name: Swift.String, in bundle: Foundation.Bundle?, generateDecimatedMesh: Swift.Bool) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.Entity
  public struct __LoadOptions {
    public var downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?
    public var realityPerformanceReport: RealityFoundation.__REArchivalStats?
    public init(downsamplingStrategy: RealityFoundation.__DownsamplingStrategy? = nil, realityPerformanceReport: RealityFoundation.__REArchivalStats? = nil)
  }
  @available(*, deprecated, message: "deprecated; use __load(contentsOf:withName:loadOptions:) instead")
  public static func __load(contentsOf url: Foundation.URL, withName resourceName: Swift.String?, downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?) throws -> RealityFoundation.Entity
  public static func __load(contentsOf url: Foundation.URL, withName resourceName: Swift.String?, loadOptions: RealityFoundation.Entity.__LoadOptions) throws -> RealityFoundation.Entity
  public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  public static func __loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, generateDecimatedMesh: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  public static func loadAnchor(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.AnchorEntity
  public static func loadAnchorAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  public static func loadAnchor(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.AnchorEntity
  public static func __loadAnchor(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?) throws -> RealityFoundation.AnchorEntity
  public static func loadAnchorAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  public static func __loadAnchorAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  public static func loadModel(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.ModelEntity
  public static func loadModelAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  public static func __loadModelAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, generateDecimatedMesh: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  public static func loadModel(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.ModelEntity
  public static func loadModelAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  public static func __loadModelAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String?, generateDecimatedMesh: Swift.Bool) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  public static func __loadAllAsync(contentsOf url: Foundation.URL) -> RealityFoundation.LoadRequest<[RealityFoundation.Entity]>
  public static func __loadAllAsync(contentsOf url: Foundation.URL, downsamplingStrategy: RealityFoundation.__DownsamplingStrategy?) -> RealityFoundation.LoadRequest<[RealityFoundation.Entity]>
  public static func __remapIdentifiersAndInteractions(root: RealityFoundation.Entity)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__SceneResourceLoadResult {
  public func __makeEntity() throws -> RealityFoundation.Entity
  public func __makeAnchorEntity() throws -> RealityFoundation.Entity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__SceneImportOperation {
  final public func makeEntity() throws -> RealityFoundation.Entity
  final public func makeModelEntity() throws -> RealityFoundation.ModelEntity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@frozen public struct BoundingBox : Swift.Hashable {
  public static let empty: RealityFoundation.BoundingBox
  public var min: Swift.SIMD3<Swift.Float> = .positiveInfinity
  public var max: Swift.SIMD3<Swift.Float> = .negativeInfinity
  public init()
  public init(min: Swift.SIMD3<Swift.Float>, max: Swift.SIMD3<Swift.Float>)
  @inlinable public static func == (lhs: RealityFoundation.BoundingBox, rhs: RealityFoundation.BoundingBox) -> Swift.Bool {
        return lhs.min == rhs.min && lhs.max == rhs.max
    }
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(min)
        hasher.combine(max)
    }
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.BoundingBox {
  public var center: Swift.SIMD3<Swift.Float> {
    get
  }
  public var extents: Swift.SIMD3<Swift.Float> {
    get
  }
  public var boundingRadius: Swift.Float {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func union(_ point: Swift.SIMD3<Swift.Float>) -> RealityFoundation.BoundingBox
  public mutating func formUnion(_ point: Swift.SIMD3<Swift.Float>)
  public func union(_ other: RealityFoundation.BoundingBox) -> RealityFoundation.BoundingBox
  public mutating func formUnion(_ other: RealityFoundation.BoundingBox)
  public func contains(_ point: Swift.SIMD3<Swift.Float>) -> Swift.Bool
  public func contains(_ boundingBox: RealityFoundation.BoundingBox) -> Swift.Bool
  public func intersects(_ boundingBox: RealityFoundation.BoundingBox) -> Swift.Bool
  public func transformed(by transform: simd.float4x4) -> RealityFoundation.BoundingBox
  public mutating func transform(by transform: simd.float4x4)
  public func distanceSquared(toPoint: Swift.SIMD3<Swift.Float>) -> Swift.Float
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __SceneResource {
  @objc deinit
  final public var coreHandle: RealityFoundation.__AssetRef {
    get
  }
  public static func fromCoreRetained(_ asset: RealityFoundation.__AssetRef) -> RealityFoundation.__SceneResource
  public static func fromCoreUnretained(_ asset: RealityFoundation.__AssetRef) -> RealityFoundation.__SceneResource
  final public func makeScene(named name: Swift.String) -> RealityFoundation.Scene?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct PhysicallyBasedMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var baseColor: RealityFoundation.PhysicallyBasedMaterial.BaseColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var metallic: RealityFoundation.PhysicallyBasedMaterial.Metallic {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var roughness: RealityFoundation.PhysicallyBasedMaterial.Roughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveColor: RealityFoundation.PhysicallyBasedMaterial.EmissiveColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveIntensity: Swift.Float {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var specular: RealityFoundation.PhysicallyBasedMaterial.Specular {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoat: RealityFoundation.PhysicallyBasedMaterial.Clearcoat {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoatRoughness: RealityFoundation.PhysicallyBasedMaterial.ClearcoatRoughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var faceCulling: RealityFoundation.PhysicallyBasedMaterial.FaceCulling {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.PhysicallyBasedMaterial.Blending {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var normal: RealityFoundation.PhysicallyBasedMaterial.Normal {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var ambientOcclusion: RealityFoundation.PhysicallyBasedMaterial.AmbientOcclusion {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var anisotropyLevel: RealityFoundation.PhysicallyBasedMaterial.AnisotropyLevel {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var anisotropyAngle: RealityFoundation.PhysicallyBasedMaterial.AnisotropyAngle {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var sheen: RealityFoundation.PhysicallyBasedMaterial.SheenColor? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var textureCoordinateTransform: RealityFoundation.PhysicallyBasedMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var secondaryTextureCoordinateTransform: RealityFoundation.PhysicallyBasedMaterial.TextureCoordinateTransform {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class ShapeResource : RealityFoundation.Resource, Swift.Hashable {
  @objc deinit
  public static func == (lhs: RealityFoundation.ShapeResource, rhs: RealityFoundation.ShapeResource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ShapeResource {
  public static func __makeShapeResource(_ shapes: [RealityFoundation.ShapeResource]) -> RealityFoundation.ShapeResource
  public func offsetBy(rotation: simd.simd_quatf) -> RealityFoundation.ShapeResource
  public func offsetBy(translation: Swift.SIMD3<Swift.Float>) -> RealityFoundation.ShapeResource
  public func offsetBy(rotation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1), translation: Swift.SIMD3<Swift.Float> = SIMD3<Float>()) -> RealityFoundation.ShapeResource
  public static func generateBox(size: Swift.SIMD3<Swift.Float>) -> RealityFoundation.ShapeResource
  public static func generateBox(width: Swift.Float, height: Swift.Float, depth: Swift.Float) -> RealityFoundation.ShapeResource
  public static func generateCapsule(height: Swift.Float, radius: Swift.Float) -> RealityFoundation.ShapeResource
  public static func generateConvex(from points: [Swift.SIMD3<Swift.Float>]) -> RealityFoundation.ShapeResource
  public static func generateConvex(from mesh: RealityFoundation.MeshResource) -> RealityFoundation.ShapeResource
  public static func generateSphere(radius: Swift.Float) -> RealityFoundation.ShapeResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKEntityInteractionService : AnyObject {
  var areInteractionsEnabled: Swift.Bool { get set }
  var customTriggerIdentifiers: [Swift.String] { get }
  var customActionIdentifiers: [Swift.String] { get }
  @discardableResult
  func performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]?, overrides: [Swift.String : RealityFoundation.Entity]?) -> Swift.Bool
  func setCustomActionHandler(for identifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)?)
  @discardableResult
  func __performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, with customArguments: [Swift.String : Swift.String], on elements: [RealityFoundation.Entity]?) -> Swift.Bool
  func __setCustomPackageActionHandler(withIdentifier identifier: Swift.String, actionHandler: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?)
  var automaticallyInvokesStartTrigger: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityInteractionManager : RealityFoundation.__RKEntityInteractionService {
  public var areInteractionsEnabled: Swift.Bool
  public var customTriggerIdentifiers: [Swift.String] {
    get
  }
  public var customActionIdentifiers: [Swift.String] {
    get
  }
  @discardableResult
  public func performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]? = nil, overrides: [Swift.String : RealityFoundation.Entity]?) -> Swift.Bool
  public func setCustomActionHandler(for identifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)?)
  @discardableResult
  public func __performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, with customArguments: [Swift.String : Swift.String], on entities: [RealityFoundation.Entity]?) -> Swift.Bool
  public func __setCustomPackageActionHandler(withIdentifier identifier: Swift.String, actionHandler: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?)
  public var automaticallyInvokesStartTrigger: Swift.Bool
  public var __entityLookupTable: RealityFoundation.__RKEntityLookupTable
  public var __simulationSceneCoordinator: RealityFoundation.__RKSimulationSceneCoordinator
  public var __runtimeSceneCoordinator: RealityFoundation.__RKRuntimeSceneCoordinator
  public var __interactions: [RealityFoundation.__RKEntityInteraction] {
    get
  }
  public func __hasInteractionsForTrigger<T>(of objectType: T.Type) -> Swift.Bool where T : RealityFoundation.__RKEntityTrigger
  public var __actions: [RealityFoundation.__RKEntityAction] {
    get
  }
  public func __addInteraction(_ interaction: RealityFoundation.__RKEntityInteraction)
  public func __removeInteraction(_ interaction: RealityFoundation.__RKEntityInteraction)
  public func __removeAllInteractions()
  public func __cloneInteractions(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity)
  @discardableResult
  public func __performInteractions(matching trigger: RealityFoundation.__RKEntityTrigger, on entities: [RealityFoundation.Entity]? = nil) -> Swift.Bool
  public func action(for specification: RealityFoundation.__RKEntityActionSpecification) -> RealityFoundation.__RKEntityAction
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityInteraction {
  public static func interaction(for specification: RealityFoundation.__RKEntityInteractionSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityInteraction
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTrigger {
  public static func trigger(for specification: RealityFoundation.__RKEntityTriggerSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityTrigger
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAction {
  public static func action(for specification: RealityFoundation.__RKEntityActionSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityAction
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __AnyARKitObject {
  public init<T>(_ base: T)
  public func `as`<T>(type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum CollisionCastQueryType : Swift.Hashable {
  case nearest
  case all
  case any
  public static func == (a: RealityFoundation.CollisionCastQueryType, b: RealityFoundation.CollisionCastQueryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionGroup : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public static let `default`: RealityFoundation.CollisionGroup
  @available(iOS 13.4, macCatalyst 13.4, *)
  public static let sceneUnderstanding: RealityFoundation.CollisionGroup
  public static let all: RealityFoundation.CollisionGroup
  public init(rawValue: Swift.UInt32)
  public typealias ArrayLiteralElement = RealityFoundation.CollisionGroup
  public typealias Element = RealityFoundation.CollisionGroup
  public typealias RawValue = Swift.UInt32
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionFilter : Swift.Equatable {
  public static let `default`: RealityFoundation.CollisionFilter
  public static let sensor: RealityFoundation.CollisionFilter
  public var group: RealityFoundation.CollisionGroup
  public var mask: RealityFoundation.CollisionGroup
  public init(group: RealityFoundation.CollisionGroup, mask: RealityFoundation.CollisionGroup)
  public static func == (a: RealityFoundation.CollisionFilter, b: RealityFoundation.CollisionFilter) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionCastHit : Swift.Equatable {
  public var entity: RealityFoundation.Entity {
    get
  }
  public var position: Swift.SIMD3<Swift.Float> {
    get
  }
  public var normal: Swift.SIMD3<Swift.Float> {
    get
  }
  public var distance: Swift.Float {
    get
  }
  public static func == (a: RealityFoundation.CollisionCastHit, b: RealityFoundation.CollisionCastHit) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public func raycast(origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>, length: Swift.Float = 100, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
  public func raycast(from startPosition: Swift.SIMD3<Swift.Float>, to endPosition: Swift.SIMD3<Swift.Float>, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
  public func convexCast(convexShape: RealityFoundation.ShapeResource, fromPosition: Swift.SIMD3<Swift.Float>, fromOrientation: simd.simd_quatf, toPosition: Swift.SIMD3<Swift.Float>, toOrientation: simd.simd_quatf, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityInteractionSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntitySpinDirectionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case clockwise
  case counterclockwise
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntitySpinDirectionType]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntitySpinDirectionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySpinAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float, iterations: Swift.Float = 1.0, direction: RealityFoundation.__RKEntitySpinDirectionType, axis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0,1,0))
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PerspectiveCameraComponent : RealityFoundation.Component, Swift.Equatable {
  public var near: Swift.Float
  public var far: Swift.Float
  public var fieldOfViewInDegrees: Swift.Float
  public init(near: Swift.Float = 0.01, far: Swift.Float = .infinity, fieldOfViewInDegrees: Swift.Float = 60.0)
  public static func == (a: RealityFoundation.PerspectiveCameraComponent, b: RealityFoundation.PerspectiveCameraComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.PerspectiveCameraComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PerspectiveCameraComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EntityInfoComponent : RealityFoundation.Component, Swift.Codable {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static var __typeName: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasPointLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPointLight {
  public var light: RealityFoundation.PointLightComponent {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetBundle {
  public static func __init(element: RealityFoundation.Entity, assetService: RealityFoundation.__REAssetService) -> RealityFoundation.__REAssetBundle
  public static func __init(realityScenes: [RealityFoundation.Scene], assetService: RealityFoundation.__REAssetService) -> RealityFoundation.__REAssetBundle
  public static func loadSceneDescriptors(url: Foundation.URL) throws -> [RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor]
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class LoadRequest<Output> : Combine.Publisher {
  public typealias Failure = Swift.Error
  public var result: Swift.Result<Output, Swift.Error>? {
    get
  }
  public func subscribe<S>(_ subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  @objc deinit
  public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == RealityFoundation.LoadRequest<Output>.Failure
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func && <Value>(left: RealityFoundation.QueryPredicate<Value>, right: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func || <Value>(left: RealityFoundation.QueryPredicate<Value>, right: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
prefix public func ! <Value>(operand: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKMaterialParameterBlock {
  public enum Parameter : Swift.ExpressibleByNilLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByIntegerLiteral {
    @available(*, deprecated, message: "Use textureAndSampler")
    case texture(RealityFoundation.TextureResource)
    case textureAndSampler(RealityFoundation.MaterialParameters.Texture)
    case float(Swift.Float)
    case float2(Swift.SIMD2<Swift.Float>)
    case float3(Swift.SIMD3<Swift.Float>)
    case float4(Swift.SIMD4<Swift.Float>)
    case float2x2(simd.float2x2)
    case float3x3(simd.float3x3)
    case float4x4(simd.float4x4)
    case bool(Swift.Bool)
    case `default`
    public init(nilLiteral: ())
    public init(floatLiteral value: Swift.Float)
    public init(integerLiteral value: Swift.Int)
    public typealias FloatLiteralType = Swift.Float
    public typealias IntegerLiteralType = Swift.Int
  }
  public enum TransparentPass : Swift.String, Swift.CaseIterable {
    case Transparent, TransparentAR, TransparentDynamicLighting, TransparentARDynamicLighting
    public init?(rawValue: Swift.String)
    public typealias AllCases = [RealityFoundation.__RKMaterialParameterBlock.TransparentPass]
    public typealias RawValue = Swift.String
    public static var allCases: [RealityFoundation.__RKMaterialParameterBlock.TransparentPass] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OpaquePass : Swift.String, Swift.CaseIterable {
    case Opaque, OpaqueAR, OpaqueDynamicLighting, OpaqueARDynamicLighting, Shadow
    public init?(rawValue: Swift.String)
    public typealias AllCases = [RealityFoundation.__RKMaterialParameterBlock.OpaquePass]
    public typealias RawValue = Swift.String
    public static var allCases: [RealityFoundation.__RKMaterialParameterBlock.OpaquePass] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public let transparentPassTechniqueMapping: [(pass: RealityFoundation.__RKMaterialParameterBlock.TransparentPass, techniqueHash: Darwin.size_t)]
  public var transparentPassTechniqueMappingEnabled: Swift.Bool {
    get
  }
  public mutating func setTransparentPassTechniqueMappingEnabled(_ enabled: Swift.Bool)
  public var parameters: [Swift.String : RealityFoundation.__RKMaterialParameterBlock.Parameter] {
    get
    set
  }
  public mutating func set(parameter name: Swift.String, value: RealityFoundation.__RKMaterialParameterBlock.Parameter)
  public mutating func reset()
  public init()
  public init(transparentPassTechniqueMappping mapping: [(RealityFoundation.__RKMaterialParameterBlock.TransparentPass, Swift.String)])
  public init(hashedTransparentPassTechniqueMapping mapping: [(RealityFoundation.__RKMaterialParameterBlock.TransparentPass, Darwin.size_t)])
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef, index: Darwin.size_t) -> RealityFoundation.__RKMaterialParameterBlock
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef, index: Darwin.size_t)
}
extension RealityFoundation.QueryPredicate {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func has<T>(_ t: T.Type) -> RealityFoundation.QueryPredicate<RealityFoundation.Entity> where T : RealityFoundation.Component
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  public enum __PackageTranslationError : Swift.Error {
    case noScenes(message: Swift.String)
    case noScenesMetadata(message: Swift.String)
    case failedToImportUSD(message: Swift.String, url: Foundation.URL)
    case invalidDictionary(message: Swift.String, invalidDictionary: [Swift.String : Any]?)
  }
  public static func __packageToRealityFile(packageURL: Foundation.URL, completion: @escaping (Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __SceneImportOperation {
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public struct __ImportedScene {
    public let sceneIdentifier: Foundation.UUID
    public let sceneName: Swift.String
    public let sceneAsset: RealityFoundation.__REAsset
    public let sceneActive: Swift.Bool
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public var __url: Foundation.URL? {
    get
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public var __importedScenes: [RealityFoundation.__SceneImportOperation.__ImportedScene] {
    get
  }
  final public var __coreOperation: RealityFoundation.__SceneImportOperationRef {
    get
  }
  @objc deinit
  convenience public init(url: Foundation.URL, serviceLocator: RealityFoundation.__ServiceLocator)
  convenience public init?(bundle: Foundation.Bundle, resourceName: Swift.String, serviceLocator: RealityFoundation.__ServiceLocator)
  @discardableResult
  final public func setIsolateFromEngine(_ isolate: Swift.Bool) -> Self
  @discardableResult
  final public func setCompressTextures(_ compressTextures: Swift.Bool) -> Self
  @discardableResult
  final public func setMergeIntoSingleEntity(_ mergeEntities: Swift.Bool) -> Self
  @discardableResult
  final public func setPlayDefaultAnimationsImmediately(_ playImmediately: Swift.Bool) -> Self
  @discardableResult
  final public func setGenerateDecimatedMesh(_ decimateMesh: Swift.Bool) -> Self
  @discardableResult
  final public func setEnableAnimationInterpolation(_ enableInterpolation: Swift.Bool) -> Self
  @discardableResult
  final public func setRootSceneAssetPath(_ assetPath: Swift.String) -> Self
  @discardableResult
  final public func setMaterialDefinitionPath(_ materialDefinitionPath: Swift.String) -> Self
  @discardableResult
  final public func setApplyUnitConversionScale(_ applyScale: Swift.Bool) -> Self
  @discardableResult
  final public func setRetainSubdivisionSurfaceInfo(_ importSubdivisionSurfaces: Swift.Bool) -> Self
  final public func run() throws
  final public func publishToEngine() throws
  @available(macOS, deprecated: 10.15.4)
  @available(iOS, deprecated: 13.4)
  final public func getSceneResource() -> RealityFoundation.__SceneResource?
}
@available(iOS, introduced: 13.4, deprecated: 13.4, message: "Use the alternative that includes `actionAssets`")
@available(macOS, introduced: 10.15.4, deprecated: 10.15.4, message: "Use the alternative that includes `actionAssets`")
@available(macCatalyst, introduced: 13.4, deprecated: 13.4, message: "Use the alternative that includes `actionAssets`")
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __SceneImportOperation_addCustomUSDDataToScene(uskNode: RealityFoundation.__USKNodeWrapper, uskScene: RealityFoundation.__USKSceneWrapper, scene: RealityFoundation.Scene, sceneIdentifier: Foundation.UUID, usdNodeToEntityMapping: [Swift.String : Swift.String], scenePathToUUIDMapping: [Swift.String : Foundation.UUID], fileName: Swift.String, error: Swift.UnsafeMutablePointer<Swift.Unmanaged<CoreFoundation.CFError>?>?) -> Swift.Bool
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __SceneImportOperation_addCustomUSDDataToScene(uskNode: RealityFoundation.__USKNodeWrapper, uskScene: RealityFoundation.__USKSceneWrapper, scene: RealityFoundation.Scene, sceneIdentifier: Foundation.UUID, usdNodeToEntityMapping: [Swift.String : Swift.String], scenePathToUUIDMapping: [Swift.String : Foundation.UUID], actionAssets: [Swift.String : Swift.String], fileName: Swift.String) -> Swift.Error?
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum PhysicsBodyMode : Swift.Hashable {
  case `static`
  case kinematic
  case dynamic
  public static func == (a: RealityFoundation.PhysicsBodyMode, b: RealityFoundation.PhysicsBodyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsMassProperties : Swift.Equatable {
  public static let `default`: RealityFoundation.PhysicsMassProperties
  public var mass: Swift.Float
  public var inertia: Swift.SIMD3<Swift.Float>
  public var centerOfMass: (position: Swift.SIMD3<Swift.Float>, orientation: simd.simd_quatf)
  public init()
  public init(mass: Swift.Float, inertia: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 0.1, y: 0.1, z: 0.1), centerOfMass: (position: Swift.SIMD3<Swift.Float>, orientation: simd.simd_quatf) = (SIMD3<Float>(x: 0, y: 0, z: 0), simd_quatf(ix: 0, iy: 0, iz: 0, r: 1)))
  public init(shape: RealityFoundation.ShapeResource, density: Swift.Float)
  public init(shape: RealityFoundation.ShapeResource, mass: Swift.Float)
  public static func == (lhs: RealityFoundation.PhysicsMassProperties, rhs: RealityFoundation.PhysicsMassProperties) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityForceAction : RealityFoundation.__RKEntityAction {
  public var force: Swift.SIMD3<Swift.Float>?
  public var velocity: Swift.SIMD3<Swift.Float>?
  public init(targetEntity: RealityFoundation.Entity?, force: Swift.SIMD3<Swift.Float>? = nil, velocity: Swift.SIMD3<Swift.Float>? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @available(*, deprecated, message: "Use playAnimation functions that utilize an AnimationResource instead of a name.")
  @discardableResult
  public func playAnimation(named animationName: Swift.String, transitionDuration: Foundation.TimeInterval = 0, startsPaused: Swift.Bool = false, recursive: Swift.Bool = true) -> RealityFoundation.AnimationPlaybackController
  @discardableResult
  public func playAnimation(_ animation: RealityFoundation.AnimationResource, transitionDuration: Foundation.TimeInterval, startsPaused: Swift.Bool) -> RealityFoundation.AnimationPlaybackController
  public func stopAllAnimations(recursive: Swift.Bool = true)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  @discardableResult
  public func playAnimation(_ animation: RealityFoundation.AnimationResource, transitionDuration: Foundation.TimeInterval = 0, blendLayerOffset: Swift.Int = 0, separateAnimatedValue: Swift.Bool = false, startsPaused: Swift.Bool = false, clock: CoreMedia.CMClockOrTimebase? = nil) -> RealityFoundation.AnimationPlaybackController
  public var defaultAnimationClock: CoreMedia.CMClockOrTimebase {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal struct REAngleF {
  public init(radians: Swift.Float)
  public init(degrees: Swift.Float)
  public var radians: Swift.Float
  @inlinable public var degrees: Swift.Float {
    get {
            return radians * 180 / .pi
        }
    set {
            radians = newValue * .pi / 180
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal enum RotationOrder : Swift.UInt8 {
  public static let `default`: RealityFoundation.RotationOrder
  public static let sceneKit: RealityFoundation.RotationOrder
  case xyz
  case yzx
  case zxy
  case xzy
  case yxz
  case zyx
  @usableFromInline
  internal init?(rawValue: Swift.UInt8)
  @usableFromInline
  internal typealias RawValue = Swift.UInt8
  @usableFromInline
  internal var rawValue: Swift.UInt8 {
    @usableFromInline
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal init(eulerAngles: Swift.SIMD3<Swift.Float>, order: RealityFoundation.RotationOrder = .default)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideScaleAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideScaleUpAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USDExportContext {
  public typealias AssetResolverCallback = (_ url: Foundation.URL) throws -> Foundation.URL?
  @_hasMissingDesignatedInitializers public class InstanceMapper {
    public func addMapping(from: Foundation.UUID?, to: RealityFoundation.__USKObjectPathWrapper)
    public func getMapping(_ from: Foundation.UUID) -> RealityFoundation.__USKObjectPathWrapper?
    @objc deinit
  }
  public var instanceMapper: RealityFoundation.__USDExportContext.InstanceMapper
  @available(*, deprecated, message: "Use init(with:resolver:)")
  public init?(with scene: RealityFoundation.__USKSceneWrapper)
  public init?(with scene: RealityFoundation.__USKSceneWrapper, resolver: RealityFoundation.__USDExportContext.AssetResolverCallback?)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKSceneWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKNodeWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKObjectPathWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKNodeSpecifierTypeWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __USDEncodablePublic {
  func encode(to encoder: RealityFoundation.__USDEncoder, at parentPath: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  func encode(to encoder: RealityFoundation.__USDEncoder, at parentPath: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USDEncoder {
  public var exportContext: RealityFoundation.__USDExportContext
  public init(exportContext: RealityFoundation.__USDExportContext)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AnimationResource : RealityFoundation.Resource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  final public let name: Swift.String?
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum AnimationRepeatMode {
  case none
  case `repeat`
  case cumulative
  case autoReverse
  public static func == (a: RealityFoundation.AnimationRepeatMode, b: RealityFoundation.AnimationRepeatMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AnimationResource {
  public func `repeat`(duration: Foundation.TimeInterval = .infinity) -> RealityFoundation.AnimationResource
  public func `repeat`(count: Swift.Int) -> RealityFoundation.AnimationResource
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationResource {
  public static func group(with resources: [RealityFoundation.AnimationResource]) throws -> RealityFoundation.AnimationResource
  public static func sequence(with resources: [RealityFoundation.AnimationResource]) throws -> RealityFoundation.AnimationResource
  public static func generate(with definition: RealityFoundation.AnimationDefinition) throws -> RealityFoundation.AnimationResource
  public func store(in: RealityFoundation.Entity)
  public var definition: RealityFoundation.AnimationDefinition {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKStartTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class MeshResource : RealityFoundation.Resource {
  public var expectedMaterialCount: Swift.Int {
    get
  }
  public var bounds: RealityFoundation.BoundingBox {
    get
  }
  @objc deinit
  public static func __load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.MeshResource
  public static func generateBox(size: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  public static func generateBox(size: Swift.SIMD3<Swift.Float>, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  public static func generateBox(width: Swift.Float, height: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0, splitFaces: Swift.Bool = false) -> RealityFoundation.MeshResource
  public static func generatePlane(width: Swift.Float, height: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  public static func generatePlane(width: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  public static func __generatePlane(width: Swift.Float = 1, widthSegmentCount: Swift.UInt = 1, depth: Swift.Float = 1, depthSegmentCount: Swift.UInt = 1, cornerRadius: Swift.Float = 0, cornerSegmentCount: Swift.UInt = 0, addUVs: Swift.Bool = true, addNormals: Swift.Bool = true) -> RealityFoundation.MeshResource
  public static func __generateOccluderPlane(width: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  public static func generateSphere(radius: Swift.Float) -> RealityFoundation.MeshResource
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __MeshCompileOptions {
  final public var coreOptions: Swift.OpaquePointer {
    get
  }
  public init()
  @objc deinit
  final public var generateVertexFaceAdjacencyAttributes: Swift.Bool {
    get
    set
  }
  final public var reorderVertexCaching: Swift.Bool {
    get
    set
  }
  final public var repairTangents: Swift.Bool {
    get
    set
  }
  final public var mergeVerticesIfPolygonSoup: Swift.Bool {
    get
    set
  }
  final public var preserveSharpFeatures: Swift.Bool {
    get
    set
  }
  final public var preserveSubdivisonSurfaceData: Swift.Bool {
    get
    set
  }
  final public var generateDecimatedMesh: Swift.Bool {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionComponent : RealityFoundation.Component, Swift.Equatable {
  public enum Mode {
    case `default`
    case trigger
    public static func == (a: RealityFoundation.CollisionComponent.Mode, b: RealityFoundation.CollisionComponent.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var shapes: [RealityFoundation.ShapeResource]
  public var mode: RealityFoundation.CollisionComponent.Mode
  public var filter: RealityFoundation.CollisionFilter
  public init(shapes: [RealityFoundation.ShapeResource], mode: RealityFoundation.CollisionComponent.Mode = .default, filter: RealityFoundation.CollisionFilter = .default)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CollisionComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.CollisionComponent, b: RealityFoundation.CollisionComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct AnchoringComponent : RealityFoundation.Component, Swift.Equatable {
  public enum Target : Swift.Hashable {
    case camera
    case world(transform: simd.float4x4)
    public static func == (lhs: RealityFoundation.AnchoringComponent.Target, rhs: RealityFoundation.AnchoringComponent.Target) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let target: RealityFoundation.AnchoringComponent.Target
  public init(_ target: RealityFoundation.AnchoringComponent.Target)
  public func __toCore(_ component: RealityFoundation.__ComponentRef)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AnchoringComponent
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.AnchoringComponent, b: RealityFoundation.AnchoringComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasPhysicsBody : RealityFoundation.HasCollision {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasPhysicsMotion : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasPhysics : RealityFoundation.HasPhysicsBody, RealityFoundation.HasPhysicsMotion {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  public var physicsBody: RealityFoundation.PhysicsBodyComponent? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsMotion {
  public var physicsMotion: RealityFoundation.PhysicsMotionComponent? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public func resetPhysicsTransform(_ transform: RealityFoundation.Transform, recursive: Swift.Bool = true)
  public func resetPhysicsTransform(recursive: Swift.Bool = true)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct CharacterControllerComponent : RealityFoundation.Component {
  public struct Collision {
    public init(characterEntity: RealityFoundation.Entity, hitEntity: RealityFoundation.Entity, hitPosition: Swift.SIMD3<Swift.Float>, hitNormal: Swift.SIMD3<Swift.Float>, moveDirection: Swift.SIMD3<Swift.Float>, moveDistance: Swift.Float)
    public var characterEntity: RealityFoundation.Entity
    public var hitEntity: RealityFoundation.Entity
    public var hitPosition: Swift.SIMD3<Swift.Float>
    public var hitNormal: Swift.SIMD3<Swift.Float>
    public var moveDirection: Swift.SIMD3<Swift.Float>
    public var moveDistance: Swift.Float
  }
  public struct CollisionFlags : Swift.OptionSet {
    public init(rawValue: Swift.UInt8)
    public let rawValue: Swift.UInt8
    public static let none: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let side: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let top: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let bottom: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public typealias ArrayLiteralElement = RealityFoundation.CharacterControllerComponent.CollisionFlags
    public typealias Element = RealityFoundation.CharacterControllerComponent.CollisionFlags
    public typealias RawValue = Swift.UInt8
  }
  public init()
  public init(radius: Swift.Float, height: Swift.Float, skinWidth: Swift.Float = defaultSkinWidth, slopeLimit: Swift.Float = defaultSlopeLimit, stepLimit: Swift.Float = defaultStepLimit, upVector: Swift.SIMD3<Swift.Float> = defaultUpVector, collisionFilter: RealityFoundation.CollisionFilter = .default)
  public var radius: Swift.Float
  public var height: Swift.Float
  public var skinWidth: Swift.Float
  public var slopeLimit: Swift.Float
  public var stepLimit: Swift.Float
  public var upVector: Swift.SIMD3<Swift.Float>
  public var collisionFilter: RealityFoundation.CollisionFilter
  public static let defaultRadius: Swift.Float
  public static let defaultHeight: Swift.Float
  public static let defaultSkinWidth: Swift.Float
  public static let defaultSlopeLimit: Swift.Float
  public static let defaultStepLimit: Swift.Float
  public static let defaultUpVector: Swift.SIMD3<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CharacterControllerComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CharacterControllerComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum SystemDependency : Swift.Equatable {
  case before(RealityFoundation.System.Type)
  case after(RealityFoundation.System.Type)
  public static func == (lhs: RealityFoundation.SystemDependency, rhs: RealityFoundation.SystemDependency) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct SceneUpdateContext {
  public var scene: RealityFoundation.Scene
  public var deltaTime: Foundation.TimeInterval
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol System {
  static var dependencies: [RealityFoundation.SystemDependency] { get }
  init(scene: RealityFoundation.Scene)
  mutating func update(context: RealityFoundation.SceneUpdateContext)
}
extension RealityFoundation.System {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func registerSystem()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static var dependencies: [RealityFoundation.SystemDependency] {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public mutating func update(context: RealityFoundation.SceneUpdateContext)
}
@available(macOS 12.0, macCatalyst 15.0, *)
public struct PhotogrammetrySample : Swift.Identifiable {
  public let id: Swift.Int
  public let image: CoreVideo.CVPixelBuffer
  public var metadata: [Swift.String : Any]
  public var depthDataMap: CoreVideo.CVPixelBuffer?
  public var gravity: CoreMotion.CMAcceleration?
  public var objectMask: CoreVideo.CVPixelBuffer?
  public init(id: Swift.Int, image: CoreVideo.CVPixelBuffer)
  public typealias ID = Swift.Int
}
@_hasMissingDesignatedInitializers @available(macOS 12.0, macCatalyst 15.0, *)
public class PhotogrammetrySession {
  public enum Request : Swift.Hashable {
    case modelFile(url: Foundation.URL, detail: RealityFoundation.PhotogrammetrySession.Request.Detail = .medium, geometry: RealityFoundation.PhotogrammetrySession.Request.Geometry? = nil)
    case modelEntity(detail: RealityFoundation.PhotogrammetrySession.Request.Detail = .medium, geometry: RealityFoundation.PhotogrammetrySession.Request.Geometry? = nil)
    case bounds
    public enum Detail : Swift.Int, Swift.Hashable {
      case preview
      case reduced
      case medium
      case full
      case raw
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public struct Geometry : Swift.Hashable {
      public var bounds: RealityFoundation.BoundingBox
      public var transform: RealityFoundation.Transform
      public init(bounds: RealityFoundation.BoundingBox = BoundingBox.empty, transform: RealityFoundation.Transform = Transform.identity)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: RealityFoundation.PhotogrammetrySession.Request.Geometry, b: RealityFoundation.PhotogrammetrySession.Request.Geometry) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(modelFile: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: RealityFoundation.PhotogrammetrySession.Request, b: RealityFoundation.PhotogrammetrySession.Request) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Result {
    case modelFile(Foundation.URL)
    case modelEntity(RealityFoundation.ModelEntity)
    case bounds(RealityFoundation.BoundingBox)
  }
  public enum Output {
    case inputComplete
    case requestError(RealityFoundation.PhotogrammetrySession.Request, Swift.Error)
    case requestComplete(RealityFoundation.PhotogrammetrySession.Request, RealityFoundation.PhotogrammetrySession.Result)
    case requestProgress(RealityFoundation.PhotogrammetrySession.Request, fractionComplete: Swift.Double)
    case processingComplete
    case processingCancelled
    case invalidSample(id: Swift.Int, reason: Swift.String)
    case skippedSample(id: Swift.Int)
    case automaticDownsampling
    public var localizedDescription: Swift.String {
      get
    }
  }
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Outputs : _Concurrency.AsyncSequence {
    public typealias Element = RealityFoundation.PhotogrammetrySession.Output
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async throws -> RealityFoundation.PhotogrammetrySession.Output?
      #endif

      public typealias Element = RealityFoundation.PhotogrammetrySession.Output
    }
    public func makeAsyncIterator() -> RealityFoundation.PhotogrammetrySession.Outputs.Iterator
    public typealias AsyncIterator = RealityFoundation.PhotogrammetrySession.Outputs.Iterator
  }
  #endif

  public struct Configuration : Swift.Equatable {
    public enum SampleOrdering {
      case unordered, sequential
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering, b: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum FeatureSensitivity {
      case normal, high
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity, b: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var isObjectMaskingEnabled: Swift.Bool
    public var sampleOrdering: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering
    public var featureSensitivity: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity
    public init()
    public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration, b: RealityFoundation.PhotogrammetrySession.Configuration) -> Swift.Bool
  }
  public var activeRequests: [RealityFoundation.PhotogrammetrySession.Request] {
    get
  }
  public var isProcessing: Swift.Bool {
    get
  }
  public var configuration: RealityFoundation.PhotogrammetrySession.Configuration {
    get
  }
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public var outputs: RealityFoundation.PhotogrammetrySession.Outputs {
    get
  }
  #endif

  convenience public init(input: Foundation.URL, configuration: RealityFoundation.PhotogrammetrySession.Configuration = Configuration()) throws
  convenience public init<S>(input: S, configuration: RealityFoundation.PhotogrammetrySession.Configuration = Configuration()) throws where S : Swift.Sequence, S.Element == RealityFoundation.PhotogrammetrySample
  public func process(requests: [RealityFoundation.PhotogrammetrySession.Request]) throws
  public func cancel()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideDropAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
extension Combine.Cancellable {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func storeWhileEntityActive(_ entity: RealityFoundation.Entity)
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __ServiceLocator {
  public static var __sharedEngine: RealityFoundation.__Engine! {
    get
    set
  }
  public static var hasSharedServiceLocator: Swift.Bool {
    get
  }
  public static var shared: RealityFoundation.__ServiceLocator {
    get
  }
  public static func __createSharedIfNeeded(with configuration: RealityFoundation.__Engine.Configuration)
  public var __engineRef: RealityFoundation.__EngineRef {
    get
  }
  unowned public var engine: RealityFoundation.__Engine
  public var renderService: RealityFoundation.__RenderService
  @available(*, deprecated, message: "Use renderService directly")
  public var __renderService: RealityFoundation.__RenderService {
    get
  }
  public var sceneService: RealityFoundation.__SceneService
  @available(*, deprecated, message: "Use sceneService directly")
  public var __sceneService: RealityFoundation.__SceneService {
    get
  }
  public var assetService: RealityFoundation.__REAssetService
  @available(*, deprecated, message: "Use assetService directly")
  public var __assetService: RealityFoundation.__REAssetService {
    get
  }
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@frozen public struct Transform : RealityFoundation.Component, Swift.Hashable {
  public static let identity: RealityFoundation.Transform
  public var scale: Swift.SIMD3<Swift.Float> = .one
  public var rotation: simd.simd_quatf = .identity
  public var translation: Swift.SIMD3<Swift.Float> = .zero
  public var __coreSRT: RealityFoundation.__SRTRef {
    get
  }
  @inlinable public var matrix: simd.float4x4 {
    get {
            let reMatrix = REMatrix4x4F(translation: translation, rotation: rotation, scale: scale)
            return reMatrix
        }
    set {
            let reMatrix = newValue as REMatrix4x4F
            let srt = reMatrix.decompose()
            scale = srt.scale
            rotation = srt.rotation
            translation = srt.translation
        }
  }
  public init()
  @inlinable public init(scale: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 1, y: 1, z: 1), rotation: simd.simd_quatf = simd_quaternion(0, 0, 0, 1), translation: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 0, y: 0, z: 0)) {
        self.scale = scale
        self.rotation = rotation
        self.translation = translation
    }
  @inlinable public init(pitch x: Swift.Float = 0, yaw y: Swift.Float = 0, roll z: Swift.Float = 0) {
        let angles = SIMD3<Float>(x, y, z)
        self.init(scale: .one,
                  rotation: simd_quatf(eulerAngles: angles, order: .yxz),
                  translation: .zero)
    }
  public init(matrix: simd.float4x4)
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(scale)
        hasher.combine(rotation.vector)
        hasher.combine(translation)
    }
  public static func == (a: RealityFoundation.Transform, b: RealityFoundation.Transform) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Transform {
  public static func __fromCore(_ coreSRT: RealityFoundation.__SRTRef) -> RealityFoundation.Transform
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.Transform
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __VideoResource : RealityFoundation.Resource {
  public static func __fromCore(_ coreAsset: RealityFoundation.__AssetRef) -> Self
  @objc deinit
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.__VideoResource
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AudioResource : RealityFoundation.Resource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @objc deinit
  public enum InputMode {
    case nonSpatial
    case spatial
    case ambient
    public static func == (a: RealityFoundation.AudioResource.InputMode, b: RealityFoundation.AudioResource.InputMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var inputMode: RealityFoundation.AudioResource.InputMode {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class AudioFileResource : RealityFoundation.AudioResource {
  public enum LoadingStrategy {
    case stream
    case preload
    public static func == (a: RealityFoundation.AudioFileResource.LoadingStrategy, b: RealityFoundation.AudioFileResource.LoadingStrategy) -> Swift.Bool
  }
  public var loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy {
    get
    set
  }
  public var shouldLoop: Swift.Bool {
    get
    set
  }
  public var __duration: Foundation.TimeInterval {
    get
  }
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioFileResource {
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) throws -> RealityFoundation.AudioFileResource
  public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) throws -> RealityFoundation.AudioFileResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioFileResource {
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.AudioFileResource>
  public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.AudioFileResource>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioFileResource.LoadingStrategy : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public class AudioBufferResource : RealityFoundation.AudioResource {
  public var shouldLoop: Swift.Bool {
    get
  }
  @objc deinit
  public init(buffer: AVFAudio.AVAudioBuffer, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, shouldLoop: Swift.Bool = false) throws
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct ModelDebugOptionsComponent : RealityFoundation.Component {
  public var visualizationMode: RealityFoundation.ModelDebugOptionsComponent.VisualizationMode {
    get
  }
  public init(visualizationMode: RealityFoundation.ModelDebugOptionsComponent.VisualizationMode = .none)
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ModelDebugOptionsComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public enum VisualizationMode : Swift.String {
    case none
    case normal
    case tangent
    case bitangent
    case baseColor
    case textureCoordinates
    case finalColor
    case finalAlpha
    case roughness
    case metallic
    case ambientOcclusion
    case specular
    case emissive
    case clearcoat
    case clearcoatRoughness
    case lightingDiffuse
    case lightingSpecular
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionAnimationStyle : Swift.String, Swift.Codable, Swift.CaseIterable {
  case basic
  case playful
  case wild
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityActionAnimationStyle]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityActionAnimationStyle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityShowActionBuildInAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case moveFromLeft
  case moveFromRight
  case moveFromFront
  case moveFromRear
  case moveFromAbove
  case moveFromBelow
  case pop
  case scale
  case scaleBig
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityShowActionBuildInAnimationType]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityShowActionBuildInAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityHideActionBuildOutAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case moveToLeft
  case moveToRight
  case moveToFront
  case moveToRear
  case moveToAbove
  case moveToBelow
  case pop
  case scale
  case scaleUp
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RealityFoundation.__RKEntityHideActionBuildOutAnimationType]
  public typealias RawValue = Swift.String
  public static var allCases: [RealityFoundation.__RKEntityHideActionBuildOutAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityVisibilityAction : RealityFoundation.__RKEntityAction {
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityToggleVisibilityAction : RealityFoundation.__RKEntityVisibilityAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySetOpacityAction : RealityFoundation.__RKEntityVisibilityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, opacity: Swift.Float = 1.0)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityShowAction : RealityFoundation.__RKEntityVisibilityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeIn: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType = .none)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityHideAction : RealityFoundation.__RKEntityVisibilityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeOut: Swift.Bool = false, finalOpacity: Swift.Float = 0.0, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType = .none)
  @discardableResult
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  override public func stop() -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSoundTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol HasHierarchy : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasHierarchy {
  public var parent: RealityFoundation.Entity? {
    get
  }
  public func setParent(_ parent: RealityFoundation.Entity?, preservingWorldTransform: Swift.Bool = false)
  public var children: RealityFoundation.Entity.ChildCollection {
    get
    set
    _modify
  }
  public func addChild(_ entity: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
  public func removeChild(_ entity: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
  public func removeFromParent(preservingWorldTransform: Swift.Bool = false)
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityPlacementTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityRemovalTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityInteraction : Swift.CustomStringConvertible {
  public var trigger: RealityFoundation.__RKEntityTrigger {
    get
  }
  public var action: RealityFoundation.__RKEntityAction {
    get
  }
  public var enabled: Swift.Bool
  public var accessibilityDescription: Swift.String?
  public init(trigger: RealityFoundation.__RKEntityTrigger, action: RealityFoundation.__RKEntityAction)
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  convenience public init(trigger: RealityFoundation.__RKEntityTrigger, action: RealityFoundation.__RKEntityAction, accessibilityDescription: Swift.String? = nil)
  public func fire(context: RealityFoundation.__RKEntityActionContext)
  public var description: Swift.String {
    get
  }
  public func clone(matching targetEntity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityInteraction?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKSimulationSceneCoordinatorState : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKSimulationSceneCoordinatorState : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Transform : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityGroupActionOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityGroupActionOrder : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.RawRepresentable {}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.NetworkCompatibilityToken.Compatibility : Swift.Equatable {}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.NetworkCompatibilityToken.Compatibility : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.Semantic : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.Semantic : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.MipmapsMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.MipmapsMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionGroup.Ordering : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionGroup.Ordering : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferMode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TweenMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TweenMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
extension RealityFoundation.AnimationTimingFunction.__Mode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
extension RealityFoundation.AnimationTimingFunction.__Mode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.Rate : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.Rate : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.ElementType : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.ElementType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Archiving.ArchivingError : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Archiving.ArchivingError : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MaterialParameterTypes.FaceCulling : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MaterialParameterTypes.FaceCulling : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CustomMaterialError : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CustomMaterialError : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CustomMaterial.LightingModel : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CustomMaterial.LightingModel : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.BoundingBox : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationRepeatMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationRepeatMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.CollisionComponent.Mode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.CollisionComponent.Mode : Swift.Hashable {}
@available(macOS 12.0, macCatalyst 15.0, *)
extension RealityFoundation.PhotogrammetrySession.Request.Detail : Swift.RawRepresentable {}
@available(macOS 12.0, macCatalyst 15.0, *)
extension RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering : Swift.Equatable {}
@available(macOS 12.0, macCatalyst 15.0, *)
extension RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering : Swift.Hashable {}
@available(macOS 12.0, macCatalyst 15.0, *)
extension RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity : Swift.Equatable {}
@available(macOS 12.0, macCatalyst 15.0, *)
extension RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioResource.InputMode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioResource.InputMode : Swift.Hashable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.Equatable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.Hashable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.RawRepresentable {}
