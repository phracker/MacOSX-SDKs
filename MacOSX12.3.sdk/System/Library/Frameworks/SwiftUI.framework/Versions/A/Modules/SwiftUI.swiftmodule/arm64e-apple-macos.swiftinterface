// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target arm64e-apple-macos12.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -library-level api -module-name SwiftUI
// swift-module-flags-ignorable: -user-module-version 3.4.12
import Accessibility
import AppKit
import Combine
import CoreData
import CoreFoundation
import CoreGraphics
import Darwin
@_exported import DeveloperToolsSupport
import Foundation
import Swift
@_exported import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import os.log
import os
import os.signpost
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var listRowSpacing: CoreGraphics.CGFloat? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {
  public static var accentColor: SwiftUI.Color {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @inlinable public func accentColor(_ accentColor: SwiftUI.Color?) -> some SwiftUI.View {
        return environment(\.accentColor, accentColor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var accentColor: SwiftUI.Color? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.DefaultNavigationViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct DefaultNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableColumnContent {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableColumnBody.TableRowValue
  associatedtype TableColumnSortComparator : Foundation.SortComparator = Self.TableColumnBody.TableColumnSortComparator
  associatedtype TableColumnBody : SwiftUI.TableColumnContent
  var tableColumnBody: Self.TableColumnBody { get }
  static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnInputs {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnOutputs {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent where Self.TableColumnSortComparator == Self.TableColumnBody.TableColumnSortComparator, Self.TableRowValue == Self.TableColumnBody.TableRowValue {
  public static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableColumnContent {
  public typealias TableColumnSortComparator = Swift.Never
  public typealias TableColumnBody = Swift.Never
  public var tableColumnBody: Swift.Never {
    get
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableColumnBuilder<RowValue, Sort> where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  @_alwaysEmitIntoClient public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Sort, Content, Label>) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> where Content : SwiftUI.View, Label : SwiftUI.View {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label>) -> SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label> where Content : SwiftUI.View, Label : SwiftUI.View {
        column
    }
  @_alwaysEmitIntoClient public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
  @_alwaysEmitIntoClient public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ReferenceFileDocument : Combine.ObservableObject {
  associatedtype Snapshot
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func snapshot(contentType: UniformTypeIdentifiers.UTType) throws -> Self.Snapshot
  func fileWrapper(snapshot: Self.Snapshot, configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ReferenceFileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.ReferenceFileDocument {
  public init(newDocument: @escaping () -> Document, @SwiftUI.ViewBuilder editor: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
  public init(viewing documentType: Document.Type, @SwiftUI.ViewBuilder viewer: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) public struct ReferenceFileDocumentConfiguration<Document> where Document : SwiftUI.ReferenceFileDocument {
  @SwiftUI.ObservedObject @_projectedValueProperty($document) @_Concurrency.MainActor(unsafe) public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $document: SwiftUI.ObservedObject<Document>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public var fileURL: Foundation.URL?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum __App {
}
extension SwiftUI.__App {
  public static func run<V>(_ rootView: V) -> Swift.Never where V : SwiftUI.View
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroup<Content> : SwiftUI.Commands where Content : SwiftUI.View {
  @available(iOS 15.0, macOS 12.0, *)
  public static func _makeCommands(content: SwiftUI._GraphValue<SwiftUI.CommandGroup<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init(before group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public init(after group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public init(replacing group: SwiftUI.CommandGroupPlacement, @SwiftUI.ViewBuilder addition: () -> Content)
  public var body: some SwiftUI.Commands {
    get
  }
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12CommandGroupV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroupPlacement {
  public static let appInfo: SwiftUI.CommandGroupPlacement
  public static let appSettings: SwiftUI.CommandGroupPlacement
  public static let systemServices: SwiftUI.CommandGroupPlacement
  public static let appVisibility: SwiftUI.CommandGroupPlacement
  public static let appTermination: SwiftUI.CommandGroupPlacement
  public static let newItem: SwiftUI.CommandGroupPlacement
  public static let saveItem: SwiftUI.CommandGroupPlacement
  public static let importExport: SwiftUI.CommandGroupPlacement
  public static let printItem: SwiftUI.CommandGroupPlacement
  public static let undoRedo: SwiftUI.CommandGroupPlacement
  public static let pasteboard: SwiftUI.CommandGroupPlacement
  public static let textEditing: SwiftUI.CommandGroupPlacement
  public static let textFormatting: SwiftUI.CommandGroupPlacement
  public static let toolbar: SwiftUI.CommandGroupPlacement
  public static let sidebar: SwiftUI.CommandGroupPlacement
  public static let windowSize: SwiftUI.CommandGroupPlacement
  @available(iOS, unavailable)
  public static let windowList: SwiftUI.CommandGroupPlacement
  public static let windowArrangement: SwiftUI.CommandGroupPlacement
  public static let help: SwiftUI.CommandGroupPlacement
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ToggleStyle where Self == SwiftUI.DefaultToggleStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultToggleStyle : SwiftUI.ToggleStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public var _defaultSwiftUIActivityEnvironmentLoggingEnabled: Swift.Bool
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func userActivity(_ activityType: Swift.String, isActive: Swift.Bool = true, _ update: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func userActivity<P>(_ activityType: Swift.String, element: P?, _ update: @escaping (P, Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func onContinueUserActivity(_ activityType: Swift.String, perform action: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUI.View
  
  public func onOpenURL(perform action: @escaping (Foundation.URL) -> ()) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func handlesExternalEvents(preferring: Swift.Set<Swift.String>, allowing: Swift.Set<Swift.String>) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Menu<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4MenuV4bodyQrvp", 0) __<Label, Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label, primaryAction: @escaping () -> Swift.Void)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.MenuStyleConfiguration.Label, Content == SwiftUI.MenuStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.MenuStyleConfiguration)
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public protocol GaugeStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GaugeStyleConfiguration
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct GaugeStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct CurrentValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MinimumValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MaximumValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct MarkedValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public var value: Swift.Double
  public var label: SwiftUI.GaugeStyleConfiguration.Label
  public var currentValueLabel: SwiftUI.GaugeStyleConfiguration.CurrentValueLabel?
  public var minimumValueLabel: SwiftUI.GaugeStyleConfiguration.MinimumValueLabel?
  public var maximumValueLabel: SwiftUI.GaugeStyleConfiguration.MaximumValueLabel?
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func gaugeStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.GaugeStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnDeleteTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet) -> Swift.Void> {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet) -> Swift.Void>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.DynamicViewContent {
  @inlinable public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> some SwiftUI.DynamicViewContent {
        return modifier(_TraitWritingModifier<OnDeleteTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsDeleteDisabledTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func deleteDisabled(_ isDisabled: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsDeleteDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol FileDocument {
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func fileWrapper(configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.FileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.FileDocument {
  public init(newDocument: @autoclosure @escaping () -> Document, @SwiftUI.ViewBuilder editor: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
  public init(viewing documentType: Document.Type, @SwiftUI.ViewBuilder viewer: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentConfiguration<Document> where Document : SwiftUI.FileDocument {
  @SwiftUI.Binding @_projectedValueProperty($document) public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    nonmutating set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    nonmutating _modify
  }
  public var $document: SwiftUI.Binding<Document> {
    get
  }
  public var fileURL: Foundation.URL?
  public var isEditable: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static var slide: SwiftUI.AnyTransition {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SearchFieldPlacement {
  public static let automatic: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  public static let toolbar: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let sidebar: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let navigationBarDrawer: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func navigationBarDrawer(displayMode: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SwiftUI.SearchFieldPlacement
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SearchFieldPlacement {
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct NavigationBarDrawerDisplayMode {
    public static let automatic: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
    public static let always: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TestApp {
  public init()
  public func run() -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Optional : SwiftUI.View where Wrapped : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct _DisclosureIndicator : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_DisclosureIndicatorV4bodyQrvp", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PrimitiveButtonStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.PrimitiveButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PrimitiveButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.PrimitiveButtonStyleConfiguration.Label
  public func trigger()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func buttonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.PrimitiveButtonStyle
  
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.SidebarListStyle {
  @_alwaysEmitIntoClient public static var sidebar: SwiftUI.SidebarListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ButtonStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.ButtonStyleConfiguration.Label
  public let isPressed: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func buttonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ButtonStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct AppStorage<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var location: SwiftUI.UserDefaultLocation<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage {
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Swift.Bool>
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Swift.Int>
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Swift.Double>
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Swift.String>
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Foundation.URL>
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<Foundation.Data>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AppStorage {
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<R>, R : Swift.RawRepresentable, R.RawValue == Swift.String
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Optional<R>, R : Swift.RawRepresentable, R.RawValue == Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var defaultAppStorageDefaults: Foundation.UserDefaults {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class UserDefaultLocation<Value> {
  @objc @usableFromInline
  deinit
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentWriteConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let existingFile: Foundation.FileWrapper?
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentReadConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let file: Foundation.FileWrapper
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum TypedPayloadError : Swift.Error {
    case invalidContent
    case encodingError
    public static func == (a: Foundation.NSUserActivity.TypedPayloadError, b: Foundation.NSUserActivity.TypedPayloadError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func typedPayload<T>(_ type: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func setTypedPayload<T>(_ payload: T) throws where T : Swift.Decodable, T : Swift.Encodable
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableColumnContent<RowValue, Sort, T> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public var value: T
  @inlinable internal init(_ value: T, valueType: RowValue.Type, sortType: Sort.Type) {
        self.value = value
    }
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.TupleTableColumnContent<RowValue, Sort, T>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  public typealias TableColumnBody = Swift.Never
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Group : SwiftUI.TableColumnContent where Content : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableColumnSortComparator = Content.TableColumnSortComparator
  public typealias TableColumnBody = Swift.Never
  @inlinable public init<R, C>(@SwiftUI.TableColumnBuilder<R, C> content: () -> Content) where R == Content.TableRowValue, C == Content.TableColumnSortComparator {
        self.content = content()
    }
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public static let `default`: SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.TabViewStyle where Self == SwiftUI.DefaultTabViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultTabViewStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct DefaultTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func help(_ textKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  public func help(_ text: SwiftUI.Text) -> some SwiftUI.View
  
  @_disfavoredOverload public func help<S>(_ text: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol LabelStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabelStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LabelStyleConfiguration {
  public struct Title {
    public typealias Body = Swift.Never
  }
  public struct Icon {
    public typealias Body = Swift.Never
  }
  public var title: SwiftUI.LabelStyleConfiguration.Title {
    get
  }
  public var icon: SwiftUI.LabelStyleConfiguration.Icon {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func labelStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.LabelStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _BenchmarkHost : AnyObject {
  func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  func _performScrollTest(startOffset: CoreGraphics.CGFloat, iterations: Swift.Int, delta: CoreGraphics.CGFloat, length: CoreGraphics.CGFloat, completion: (() -> Swift.Void)?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Benchmark : SwiftUI._Test {
  func measure(host: SwiftUI._BenchmarkHost) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BenchmarkHost {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  public func _performScrollTest(startOffset: CoreGraphics.CGFloat, iterations: Swift.Int, delta: CoreGraphics.CGFloat, length: CoreGraphics.CGFloat, completion: (() -> Swift.Void)?)
  public func measureAction(action: () -> Swift.Void) -> Swift.Double
  public func measureRender(interval: Swift.Double = 1.0 / 60.0) -> Swift.Double
  public func measureRenders(seconds: Swift.Double) -> [Swift.Double]
  public func measureRenders(duration: Swift.Double) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TestApp {
  public func runBenchmarks(_ benchmarks: [SwiftUI._Benchmark]) -> Swift.Never
}
extension SwiftUI._TestApp {
  @available(iOS 14.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
  public func runPerformanceTests(_ tests: [SwiftUI._PerformanceTest]) -> Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) open class NSHostingController<Content> : AppKit.NSViewController where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(rootView: Content)
  @_Concurrency.MainActor(unsafe) public init?(coder: Foundation.NSCoder, rootView: Content)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var rootView: Content {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var identifier: AppKit.NSUserInterfaceItemIdentifier? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public func sizeThatFits(in size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public func _render(seconds: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func _forEachIdentifiedView(body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) final public var _rendererConfiguration: SwiftUI._RendererConfiguration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public static func spring(response: Swift.Double = 0.55, dampingFraction: Swift.Double = 0.825, blendDuration: Swift.Double = 0) -> SwiftUI.Animation
  public static func interactiveSpring(response: Swift.Double = 0.15, dampingFraction: Swift.Double = 0.86, blendDuration: Swift.Double = 0.25) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func _defaultContext() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, *)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension SwiftUI.View {
  public func contextMenu<MenuItems>(@SwiftUI.ViewBuilder menuItems: () -> MenuItems) -> some SwiftUI.View where MenuItems : SwiftUI.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension SwiftUI.View {
  public func contextMenu<MenuItems>(_ contextMenu: SwiftUI.ContextMenu<MenuItems>?) -> some SwiftUI.View where MenuItems : SwiftUI.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
public struct ContextMenu<MenuItems> where MenuItems : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder menuItems: () -> MenuItems)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct TextField<Label> : SwiftUI.View where Label : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9TextFieldV4bodyQrvp", 0) __<Label>
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init(text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder label: () -> Label)
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>) {
        self.init(
            titleKey, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(
            title, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumn<RowValue, Sort, Content, Label> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator, Content : SwiftUI.View, Label : SwiftUI.View {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.TableColumn<RowValue, Sort, Content, Label>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  public typealias TableColumnBody = Swift.Never
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue == Sort.Compared, Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, sortUsing comparator: Sort, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, sortUsing comparator: Sort, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Swift.Never, Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUI.Text, S : Swift.StringProtocol
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn {
  public func width(_ width: CoreGraphics.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  public func width(min: CoreGraphics.CGFloat? = nil, ideal: CoreGraphics.CGFloat? = nil, max: CoreGraphics.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  @available(*, deprecated, message: "Please pass one or more parameters to modify a column's width.")
  @_alwaysEmitIntoClient public func width() -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> { self }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func foregroundStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        modifier(_ForegroundStyleModifier(style: style))
    }
  
  @inlinable public func foregroundStyle<S1, S2>(_ primary: S1, _ secondary: S2) -> some SwiftUI.View where S1 : SwiftUI.ShapeStyle, S2 : SwiftUI.ShapeStyle {
        modifier(_ForegroundStyleModifier2(
            primary: primary, secondary: secondary))
    }
  
  @inlinable public func foregroundStyle<S1, S2, S3>(_ primary: S1, _ secondary: S2, _ tertiary: S3) -> some SwiftUI.View where S1 : SwiftUI.ShapeStyle, S2 : SwiftUI.ShapeStyle, S3 : SwiftUI.ShapeStyle {
        modifier(_ForegroundStyleModifier3(
            primary: primary, secondary: secondary, tertiary: tertiary))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ForegroundStyleModifier<Style> where Style : SwiftUI.ShapeStyle {
  public var style: Style
  @inlinable public init(style: Style) {
        self.style = style
    }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundStyleModifier<Style>>, inputs: inout SwiftUI._ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ForegroundStyleModifier2<S1, S2> where S1 : SwiftUI.ShapeStyle, S2 : SwiftUI.ShapeStyle {
  public var primary: S1
  public var secondary: S2
  @inlinable public init(primary: S1, secondary: S2) {
        self.primary = primary
        self.secondary = secondary
    }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundStyleModifier2<S1, S2>>, inputs: inout SwiftUI._ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ForegroundStyleModifier3<S1, S2, S3> where S1 : SwiftUI.ShapeStyle, S2 : SwiftUI.ShapeStyle, S3 : SwiftUI.ShapeStyle {
  public var primary: S1
  public var secondary: S2
  public var tertiary: S3
  @inlinable public init(primary: S1, secondary: S2, tertiary: S3) {
        self.primary = primary
        self.secondary = secondary
        self.tertiary = tertiary
    }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundStyleModifier3<S1, S2, S3>>, inputs: inout SwiftUI._ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.ForegroundStyle {
  @_alwaysEmitIntoClient public static var foreground: SwiftUI.ForegroundStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ForegroundStyle : SwiftUI.ShapeStyle {
  @inlinable public init() {}
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI.ForegroundStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ForegroundStyle {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.AutomaticTableStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.AutomaticTableStyle {
    get { .init() }
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AutomaticTableStyle : SwiftUI.TableStyle {
  @usableFromInline
  internal init()
  public func makeBody(configuration: SwiftUI.AutomaticTableStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19AutomaticTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font {
  public static func custom(_ name: Swift.String, size: CoreGraphics.CGFloat) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, size: CoreGraphics.CGFloat, relativeTo textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:size:textStyle:)")
  public static func _custom(_ name: Swift.String, size: CoreGraphics.CGFloat, textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, fixedSize: CoreGraphics.CGFloat) -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:fixedSize:)")
  public static func _custom(_ name: Swift.String, verbatimSize: CoreGraphics.CGFloat) -> SwiftUI.Font
  public init(_ font: CoreText.CTFont)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GeometryReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: (SwiftUI.GeometryProxy) -> Content
  @inlinable public init(@SwiftUI.ViewBuilder content: @escaping (SwiftUI.GeometryProxy) -> Content) {
        self.content = content
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.GeometryReader<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct GeometryProxy {
  public var size: CoreGraphics.CGSize {
    get
  }
  public subscript<T>(anchor: SwiftUI.Anchor<T>) -> T {
    get
  }
  public var safeAreaInsets: SwiftUI.EdgeInsets {
    get
  }
  public func frame(in coordinateSpace: SwiftUI.CoordinateSpace) -> CoreGraphics.CGRect
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Placement : Swift.Equatable {
  public var proposedSize: CoreGraphics.CGSize {
    get
    set
  }
  public var anchor: SwiftUI.UnitPoint
  public var anchorPosition: CoreGraphics.CGPoint
  public init(proposedSize: CoreGraphics.CGSize, anchoring anchor: SwiftUI.UnitPoint = .topLeading, at anchorPosition: CoreGraphics.CGPoint)
  public static func == (a: SwiftUI._Placement, b: SwiftUI._Placement) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListInputs {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ViewListCountInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListOutputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transaction(_ transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_TransactionModifier(transform: transform))
    }
  
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use withAnimation or animation(_:value:) instead.")
  @_disfavoredOverload @inlinable public func animation(_ animation: SwiftUI.Animation?) -> some SwiftUI.View {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewModifier {
  @inlinable public func transaction(_ transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) -> some SwiftUI.ViewModifier {
        return _PushPopTransactionModifier(content: self, transform: transform)
    }
  
  @inlinable public func animation(_ animation: SwiftUI.Animation?) -> some SwiftUI.ViewModifier {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TransactionModifier : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var transform: (inout SwiftUI.Transaction) -> Swift.Void
  @inlinable public init(transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) {
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._TransactionModifier>, inputs: inout SwiftUI._GraphInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PushPopTransactionModifier<Content> : SwiftUI.ViewModifier where Content : SwiftUI.ViewModifier {
  public var content: Content
  public var base: SwiftUI._TransactionModifier
  @inlinable public init(content: Content, transform: @escaping (inout SwiftUI.Transaction) -> Swift.Void) {
        self.content = content
        base = .init(transform: transform)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PushPopTransactionModifier<Content>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EdgeInsets : Swift.Equatable {
  public var top: CoreGraphics.CGFloat
  public var leading: CoreGraphics.CGFloat
  public var bottom: CoreGraphics.CGFloat
  public var trailing: CoreGraphics.CGFloat
  @inlinable public init(top: CoreGraphics.CGFloat, leading: CoreGraphics.CGFloat, bottom: CoreGraphics.CGFloat, trailing: CoreGraphics.CGFloat) {
        self.top = top
        self.leading = leading
        self.bottom = bottom
        self.trailing = trailing
    }
  @inlinable public init() {
        self.init(top: 0, leading: 0, bottom: 0, trailing: 0)
    }
  public static func == (a: SwiftUI.EdgeInsets, b: SwiftUI.EdgeInsets) -> Swift.Bool
}
extension SwiftUI.EdgeInsets {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal init(_all: CoreGraphics.CGFloat)
}
extension SwiftUI.EdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ nsEdgeInsets: AppKit.NSDirectionalEdgeInsets)
}
extension AppKit.NSDirectionalEdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ edgeInsets: SwiftUI.EdgeInsets)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EdgeInsets : SwiftUI.Animatable, SwiftUI._VectorMath {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>>
  public var animatableData: SwiftUI.EdgeInsets.AnimatableData {
    @inlinable get {
            return .init(top, .init(leading, .init(bottom, trailing)))
        }
    @inlinable set {
            let top = newValue[].0
            let leading = newValue[].1[].0
            let (bottom, trailing) = newValue[].1[].1[]
            self = .init(
                top: top, leading: leading, bottom: bottom, trailing: trailing)
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct TupleView<T> : SwiftUI.View {
  public var value: T
  @inlinable public init(_ value: T) { self.value = value }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.TupleView<T>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.TupleView<T>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func searchable(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUI.Text? = nil) -> some SwiftUI.View
  
  public func searchable(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @_disfavoredOverload public func searchable<S>(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
  public func searchable<S>(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder suggestions: () -> S) -> some SwiftUI.View where S : SwiftUI.View
  
  public func searchable<S>(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder suggestions: () -> S) -> some SwiftUI.View where S : SwiftUI.View
  
  @_disfavoredOverload public func searchable<V, S>(text: SwiftUI.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUI.ViewBuilder suggestions: () -> V) -> some SwiftUI.View where V : SwiftUI.View, S : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func mask<Mask>(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder _ mask: () -> Mask) -> some SwiftUI.View where Mask : SwiftUI.View {
        return modifier(_MaskAlignmentEffect(
            alignment: alignment, mask: mask()))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _MaskAlignmentEffect<Mask> : SwiftUI.ViewModifier where Mask : SwiftUI.View {
  public var alignment: SwiftUI.Alignment
  public var mask: Mask
  @inlinable public init(alignment: SwiftUI.Alignment, mask: Mask) {
        self.mask = mask
        self.alignment = alignment
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._MaskAlignmentEffect<Mask>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._MaskEffect : Swift.Equatable where Mask : Swift.Equatable {
  public static func == (a: SwiftUI._MaskEffect<Mask>, b: SwiftUI._MaskEffect<Mask>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(iOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(macOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(tvOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(watchOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @inlinable public func mask<Mask>(_ mask: Mask) -> some SwiftUI.View where Mask : SwiftUI.View {
        return modifier(_MaskEffect(mask: mask))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _MaskEffect<Mask> : SwiftUI.ViewModifier where Mask : SwiftUI.View {
  public var mask: Mask
  @inlinable public init(mask: Mask) {
        self.mask = mask
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._MaskEffect<Mask>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _EnvironmentKeyWritingModifier<Value> : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>
  public var value: Value
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._EnvironmentKeyWritingModifier<Value>>, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._EnvironmentKeyWritingModifier : SwiftUI._SceneModifier {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, _ value: V) -> some SwiftUI.View {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @inlinable internal func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, _ value: V) -> some SwiftUI.Scene {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }

}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol NSViewRepresentable : SwiftUI.View where Self.Body == Swift.Never {
  associatedtype NSViewType : AppKit.NSView
  @_Concurrency.MainActor(unsafe) func makeNSView(context: Self.Context) -> Self.NSViewType
  @_Concurrency.MainActor(unsafe) func updateNSView(_ nsView: Self.NSViewType, context: Self.Context)
  @_Concurrency.MainActor(unsafe) static func dismantleNSView(_ nsView: Self.NSViewType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor(unsafe) func makeCoordinator() -> Self.Coordinator
  @_Concurrency.MainActor(unsafe) func _identifiedViewTree(in nsView: Self.NSViewType) -> SwiftUI._IdentifiedViewTree
  @_Concurrency.MainActor(unsafe) func _overrideSizeThatFits(_ size: inout CoreGraphics.CGSize, in proposedSize: SwiftUI._ProposedSize, nsView: Self.NSViewType)
  @_Concurrency.MainActor(unsafe) func _overrideLayoutTraits(_ layoutTraits: inout SwiftUI._LayoutTraits, for nsView: Self.NSViewType)
  @available(macOS 11.3, *)
  static func _modifyBridgedViewInputs(_ inputs: inout SwiftUI._ViewInputs)
  typealias Context = SwiftUI.NSViewRepresentableContext<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Self.Coordinator
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewRepresentable {
  @available(macOS 12.0, *)
  public func _resetNSView(_ nsView: Self.NSViewType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  public static func dismantleNSView(_ nsView: Self.NSViewType, coordinator: Self.Coordinator)
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public func _identifiedViewTree(in nsView: Self.NSViewType) -> SwiftUI._IdentifiedViewTree
  public func _overrideSizeThatFits(_ size: inout CoreGraphics.CGSize, in proposedSize: SwiftUI._ProposedSize, nsView: Self.NSViewType)
  public func _overrideLayoutTraits(_ layoutTraits: inout SwiftUI._LayoutTraits, for nsView: Self.NSViewType)
  @available(macOS 11.3, *)
  public static func _modifyBridgedViewInputs(_ inputs: inout SwiftUI._ViewInputs)
  public var body: Swift.Never {
    get
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) public struct NSViewRepresentableContext<View> where View : SwiftUI.NSViewRepresentable {
  @_Concurrency.MainActor(unsafe) public let coordinator: View.Coordinator
  @_Concurrency.MainActor(unsafe) public var transaction: SwiftUI.Transaction {
    get
  }
  @_Concurrency.MainActor(unsafe) public var environment: SwiftUI.EnvironmentValues {
    get
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Stepper<Label> : SwiftUI.View where Label : SwiftUI.View {
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder label: () -> Label, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) {
        self.init(
            onIncrement: onIncrement,
            onDecrement: onDecrement,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7StepperV4bodyQrvp", 0) __<Label>
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Stepper {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Stepper where Label == SwiftUI.Text {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Stepper {
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @_disfavoredOverload public init(onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<V>(value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public protocol NavigationViewStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body
  associatedtype _Body2 : SwiftUI.View = SwiftUI.EmptyView
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @SwiftUI.ViewBuilder func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body2
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct _NavigationViewStyleConfiguration {
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI._NavigationViewStyleConfiguration.Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.View {
  @available(watchOS 7.0, *)
  public func navigationViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.NavigationViewStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct NavigationLink<Label, Destination> : SwiftUI.View where Label : SwiftUI.View, Destination : SwiftUI.View {
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder destination: () -> Destination, @SwiftUI.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), label: label)
    }
  @_alwaysEmitIntoClient public init(isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder destination: () -> Destination, @SwiftUI.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), isActive: isActive, label: label)
    }
  @_alwaysEmitIntoClient public init<V>(tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder destination: () -> Destination, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Hashable {
        self.init(
            destination: destination(),
            tag: tag,
            selection: selection,
            label: label)
    }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  public init(destination: Destination, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(isActive:destination:label:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(isActive:destination:label:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(isActive:destination:label:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(isActive:destination:label:)")
  public init(destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(tag:selection:destination:label:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(tag:selection:destination:label:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(tag:selection:destination:label:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(tag:selection:destination:label:)")
  public init<V>(destination: Destination, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Hashable
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14NavigationLinkV4bodyQrvp", 0) __<Label, Destination>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.NavigationLink where Label == SwiftUI.Text {
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination())
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S>(_ title: S, @SwiftUI.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination())
    }
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination(), isActive: isActive)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S>(_ title: S, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination(), isActive: isActive)
    }
  @_alwaysEmitIntoClient public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder destination: () -> Destination) where V : Swift.Hashable {
        self.init(
            titleKey,
            destination: destination(),
            tag: tag, selection: selection)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S, V>(_ title: S, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol, V : Swift.Hashable {
        self.init(
            title,
            destination: destination(),
            tag: tag, selection: selection)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @_disfavoredOverload public init<S>(_ title: S, destination: Destination) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(_:isActive:destination:)")
  @_disfavoredOverload public init<S>(_ title: S, destination: Destination, isActive: SwiftUI.Binding<Swift.Bool>) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, destination: Destination, tag: V, selection: SwiftUI.Binding<V?>) where V : Swift.Hashable
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "NavigationLink(_:tag:selection:destination:)")
  @_disfavoredOverload public init<S, V>(_ title: S, destination: Destination, tag: V, selection: SwiftUI.Binding<V?>) where S : Swift.StringProtocol, V : Swift.Hashable
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.NavigationLink where Destination == SwiftUI._WKStoryboardContent {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init(destinationName: Swift.String, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init(destinationName: Swift.String, isActive: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public init<V>(destinationName: Swift.String, tag: V, selection: SwiftUI.Binding<V?>, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Hashable
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NavigationLink {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func isDetailLink(_ isDetailLink: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public protocol AXChartDescriptorRepresentable {
  func makeChartDescriptor() -> Accessibility.AXChartDescriptor
  func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
extension SwiftUI.AXChartDescriptorRepresentable {
  public func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityChartDescriptor<R>(_ representable: R) -> some SwiftUI.View where R : SwiftUI.AXChartDescriptorRepresentable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.DynamicViewContent {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.DynamicViewContent
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  public func onInsert(of acceptedTypeIdentifiers: [Swift.String], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.DynamicViewContent
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __ViewRemovalLayout {
  public init(showsBothRows: Swift.Bool)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.DefaultLabelStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultLabelStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _Velocity<Value> : Swift.Equatable where Value : Swift.Equatable {
  public var valuePerSecond: Value
  @inlinable public init(valuePerSecond: Value) {
        self.valuePerSecond = valuePerSecond
    }
  public static func == (a: SwiftUI._Velocity<Value>, b: SwiftUI._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Velocity : Swift.Comparable where Value : Swift.Comparable {
  public static func < (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Velocity : SwiftUI.Animatable where Value : SwiftUI.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: SwiftUI._Velocity<Value>.AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Velocity : Swift.AdditiveArithmetic where Value : Swift.AdditiveArithmetic {
  @inlinable public init() {
        self.init(valuePerSecond: .zero)
    }
  @inlinable public static var zero: SwiftUI._Velocity<Value> {
    get {
        return .init(valuePerSecond: .zero)
    }
  }
  @inlinable public static func += (lhs: inout SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) {
        lhs.valuePerSecond += rhs.valuePerSecond
    }
  @inlinable public static func -= (lhs: inout SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) {
        lhs.valuePerSecond -= rhs.valuePerSecond
    }
  @inlinable public static func + (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> SwiftUI._Velocity<Value> {
        var r = lhs; r += rhs; return r
    }
  @inlinable public static func - (lhs: SwiftUI._Velocity<Value>, rhs: SwiftUI._Velocity<Value>) -> SwiftUI._Velocity<Value> {
        var r = lhs; r -= rhs; return r
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Velocity : SwiftUI.VectorArithmetic where Value : SwiftUI.VectorArithmetic {
  @inlinable public mutating func scale(by rhs: Swift.Double) {
        valuePerSecond.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Swift.Double {
    get {
        return valuePerSecond.magnitudeSquared
    }
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct MagnificationGesture : SwiftUI.Gesture {
  public var minimumScaleDelta: CoreGraphics.CGFloat
  public init(minimumScaleDelta: CoreGraphics.CGFloat = 0.01)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.MagnificationGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<CoreGraphics.CGFloat>
  public typealias Body = Swift.Never
  public typealias Value = CoreGraphics.CGFloat
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct PropertyList : Swift.CustomStringConvertible {
  @usableFromInline
  internal var elements: SwiftUI.PropertyList.Element?
  @inlinable internal init() { elements = nil }
  @usableFromInline
  internal var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  internal class Tracker {
    @objc deinit
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  internal class Element : Swift.CustomStringConvertible {
    @usableFromInline
    internal var description: Swift.String {
      get
    }
    @objc @usableFromInline
    deinit
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceReadingView<Key, Content> : SwiftUI.View where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var value: SwiftUI._PreferenceValue<Key>
  public var transform: (Key.Value) -> Content
  @inlinable public init(value: SwiftUI._PreferenceValue<Key>, transform: @escaping (Key.Value) -> Content) {
        self.value = value
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._PreferenceReadingView<Key, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PreferenceValue {
  @inlinable public func _force<T>(_ transform: @escaping (Key.Value) -> T) -> SwiftUI._PreferenceReadingView<Key, T> where T : SwiftUI.View {
        return _PreferenceReadingView(value: self, transform: transform)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityRotor<Content>(_ label: SwiftUI.Text, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.AccessibilityRotorContent
  
  public func accessibilityRotor<Content>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.AccessibilityRotorContent
  
  public func accessibilityRotor<EntryModel>(_ rotorLabel: SwiftUI.Text, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where EntryModel : Swift.Identifiable
  
  public func accessibilityRotor<EntryModel, ID>(_ rotorLabel: SwiftUI.Text, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where ID : Swift.Hashable
  
  public func accessibilityRotor<EntryModel>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where EntryModel : Swift.Identifiable
  
  public func accessibilityRotor<EntryModel, ID>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where ID : Swift.Hashable
  
  public func accessibilityRotor(_ label: SwiftUI.Text, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUI.View
  
  public func accessibilityRotor(_ systemRotor: SwiftUI.AccessibilitySystemRotor, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityRotor<Content>(_ labelKey: SwiftUI.LocalizedStringKey, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.AccessibilityRotorContent
  
  @_disfavoredOverload public func accessibilityRotor<L, Content>(_ label: L, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUI.View where L : Swift.StringProtocol, Content : SwiftUI.AccessibilityRotorContent
  
  public func accessibilityRotor<EntryModel>(_ rotorLabelKey: SwiftUI.LocalizedStringKey, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where EntryModel : Swift.Identifiable
  
  @_disfavoredOverload public func accessibilityRotor<L, EntryModel>(_ rotorLabel: L, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where L : Swift.StringProtocol, EntryModel : Swift.Identifiable
  
  public func accessibilityRotor<EntryModel, ID>(_ rotorLabelKey: SwiftUI.LocalizedStringKey, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where ID : Swift.Hashable
  
  @_disfavoredOverload public func accessibilityRotor<L, EntryModel, ID>(_ rotorLabel: L, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUI.View where L : Swift.StringProtocol, ID : Swift.Hashable
  
  public func accessibilityRotor(_ labelKey: SwiftUI.LocalizedStringKey, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUI.View
  
  @_disfavoredOverload public func accessibilityRotor<L>(_ label: L, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUI.View where L : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilitySystemRotor {
  public static func links(visited: Swift.Bool) -> SwiftUI.AccessibilitySystemRotor
  public static var links: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static func headings(level: SwiftUI.AccessibilityHeadingLevel) -> SwiftUI.AccessibilitySystemRotor
  public static var headings: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var boldText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var italicText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var underlineText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var misspelledWords: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var images: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var textFields: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var tables: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var lists: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var landmarks: SwiftUI.AccessibilitySystemRotor {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditingCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TextEditingCommandsV4bodyQrvp", 0) __
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextFormattingCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TextFormattingCommandsV4bodyQrvp", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct TimelineView<Schedule, Content> where Schedule : SwiftUI.TimelineSchedule {
  public struct Context {
    public enum Cadence : Swift.Comparable {
      case live
      case seconds
      case minutes
      public static func == (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public static func < (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public let date: Foundation.Date
    public let cadence: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView : SwiftUI.View where Content : SwiftUI.View {
  public typealias Body = Swift.Never
  public init(_ schedule: Schedule, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.TimelineView<Schedule, Content>.Context) -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.TimelineView<Schedule, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol VectorArithmetic : Swift.AdditiveArithmetic {
  mutating func scale(by rhs: Swift.Double)
  var magnitudeSquared: Swift.Double { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Float : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= Float(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Double : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= rhs }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return self * self }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGFloat : SwiftUI.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= CGFloat(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
extension SwiftUI.Color {
  public init(_ cgColor: CoreGraphics.CGColor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Color {
  public init(cgColor: CoreGraphics.CGColor)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil, label: SwiftUI.Text)
  public init(decorative name: Swift.String, bundle: Foundation.Bundle? = nil)
  @available(macOS 11.0, *)
  public init(systemName: Swift.String)
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_internalSystemName systemName: Swift.String)
}
extension SwiftUI.Image {
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_systemName systemName: Swift.String, colorPalette: [SwiftUI.Color]? = nil)
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_internalSystemName systemName: Swift.String, colorPalette: [SwiftUI.Color]? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct ScrollViewReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: (SwiftUI.ScrollViewProxy) -> Content
  @inlinable public init(@SwiftUI.ViewBuilder content: @escaping (SwiftUI.ScrollViewProxy) -> Content) {
        self.content = content
    }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScrollViewReaderV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ScrollViewProxy {
  public func scrollTo<ID>(_ id: ID, anchor: SwiftUI.UnitPoint? = nil) where ID : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct OpenURLAction {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct Result {
    public static let handled: SwiftUI.OpenURLAction.Result
    public static let discarded: SwiftUI.OpenURLAction.Result
    public static let systemAction: SwiftUI.OpenURLAction.Result
    public static func systemAction(_ url: Foundation.URL) -> SwiftUI.OpenURLAction.Result
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init(handler: @escaping (Foundation.URL) -> SwiftUI.OpenURLAction.Result)
  public func callAsFunction(_ url: Foundation.URL)
  @available(watchOS, unavailable)
  public func callAsFunction(_ url: Foundation.URL, completion: @escaping (_ accepted: Swift.Bool) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.EnvironmentValues {
  public var openURL: SwiftUI.OpenURLAction {
    get
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    set
  }
  public var _openURL: SwiftUI.OpenURLAction {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var _openSensitiveURL: SwiftUI.OpenURLAction {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __FourUpLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUI.EnvironmentValues, Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUI.View where Value : Swift.Equatable
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _CALayerView<LayerType> : SwiftUI.View where LayerType : QuartzCore.CALayer {
  public var update: (LayerType) -> Swift.Void
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._CALayerView {
  public init(type: LayerType.Type, onUpdate update: @escaping (LayerType) -> Swift.Void)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._CALayerView<LayerType>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
extension SwiftUI._CALayerView where LayerType == QuartzCore.CALayer {
  public init(onUpdate update: @escaping (LayerType) -> Swift.Void)
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleAndIconLabelStyle {
  @_alwaysEmitIntoClient public static var titleAndIcon: SwiftUI.TitleAndIconLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
public struct TitleAndIconLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.TitleAndIconLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TitleAndIconLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItem<ID, Content> : SwiftUI.ToolbarContent where Content : SwiftUI.View {
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem where ID == Swift.Void {
  public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : SwiftUI.CustomizableToolbarContent where ID == Swift.String {
  public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, showsByDefault: Swift.Bool = true, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : Swift.Identifiable where ID : Swift.Hashable {
  public var id: ID {
    get
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TouchBar<Content> where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public init(id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum TouchBarItemPresence {
  case required(_: Swift.String)
  case `default`(_: Swift.String)
  case optional(_: Swift.String)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBar<Content>(_ touchBar: SwiftUI.TouchBar<Content>) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBar<Content>(@SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TouchBarModifier<Content> : SwiftUI.ViewModifier where Content : SwiftUI.View {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TouchBarModifier<Content>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
public protocol _PerformanceTest : SwiftUI._Test {
  var name: Swift.String { get }
  func runTest(host: SwiftUI._BenchmarkHost, options: [Swift.AnyHashable : Any])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__App {
  public static func _registerPerformanceTests(_ tests: [SwiftUI._PerformanceTest])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BenchmarkHost {
  public func _started(test: SwiftUI._PerformanceTest)
  public func _finished(test: SwiftUI._PerformanceTest)
  public func _failed(test: SwiftUI._PerformanceTest)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EquatableView<Content> : SwiftUI.View where Content : Swift.Equatable, Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(content: Content) {
        self.content = content
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.EquatableView<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View where Self : Swift.Equatable {
  @inlinable public func equatable() -> SwiftUI.EquatableView<Self> {
        return EquatableView(content: self)
    }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ControlGroup<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ControlGroupV4bodyQrvp", 0) __<Content>
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup where Content == SwiftUI.ControlGroupStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.ControlGroupStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Graph {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GraphValue<Value> : Swift.Equatable {
  public subscript<U>(keyPath: Swift.KeyPath<Value, U>) -> SwiftUI._GraphValue<U> {
    get
  }
  public static func == (a: SwiftUI._GraphValue<Value>, b: SwiftUI._GraphValue<Value>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable && $InheritActorContext
  @inlinable public func task(priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUI.View {
        modifier(_TaskModifier(priority: priority, action: action))
    }
  
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable && $InheritActorContext
  @inlinable public func task<T>(id value: T, priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUI.View where T : Swift.Equatable {
        modifier(_TaskValueModifier(
            value: value, priority: priority, action: action))
    }
  
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _TaskModifier : SwiftUI.ViewModifier {
  public var action: @Sendable () async -> Swift.Void
  public var priority: _Concurrency.TaskPriority
  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @inlinable public init(priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.priority = priority
        self.action = action
    }
  #endif

  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _TaskValueModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public var action: @Sendable () async -> Swift.Void
  public var priority: _Concurrency.TaskPriority
  public var value: Value
  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @inlinable public init(value: Value, priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.action = action
        self.priority = priority
        self.value = value
    }
  #endif

  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ScrollView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: Content
  public var axes: SwiftUI.Axis.Set {
    get
    set
  }
  public var showsIndicators: Swift.Bool {
    get
    set
  }
  public init(_ axes: SwiftUI.Axis.Set = .vertical, showsIndicators: Swift.Bool = true, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10ScrollViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ScrollView {
  public var _contentInsets: SwiftUI.EdgeInsets {
    get
    set
  }
  public var _automaticallyAdjustsContentInsets: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScrollView {
  public var _alwaysBounceAxes: SwiftUI.Axis.Set {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text {
  public func foregroundColor(_ color: SwiftUI.Color?) -> SwiftUI.Text
  public func font(_ font: SwiftUI.Font?) -> SwiftUI.Text
  public func fontWeight(_ weight: SwiftUI.Font.Weight?) -> SwiftUI.Text
  public func bold() -> SwiftUI.Text
  public func italic() -> SwiftUI.Text
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospacedDigit() -> SwiftUI.Text
  public func strikethrough(_ active: Swift.Bool = true, color: SwiftUI.Color? = nil) -> SwiftUI.Text
  public func underline(_ active: Swift.Bool = true, color: SwiftUI.Color? = nil) -> SwiftUI.Text
  public func kerning(_ kerning: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func tracking(_ tracking: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func baselineOffset(_ baselineOffset: CoreGraphics.CGFloat) -> SwiftUI.Text
  public func _stylisticAlternative(_ alternative: SwiftUI.Font._StylisticAlternative) -> SwiftUI.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __SpiralLayout {
  public typealias AnimatableData = SwiftUI.Angle.AnimatableData
  public init(spacing: SwiftUI.Angle)
  public var animatableData: SwiftUI.__SpiralLayout.AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ViewDebug {
  public enum Property : Swift.UInt32, Swift.Hashable {
    case type
    case value
    case transform
    case position
    case size
    case environment
    case phase
    case layoutComputer
    case displayList
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Properties : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let type: SwiftUI._ViewDebug.Properties
    public static let value: SwiftUI._ViewDebug.Properties
    public static let transform: SwiftUI._ViewDebug.Properties
    public static let position: SwiftUI._ViewDebug.Properties
    public static let size: SwiftUI._ViewDebug.Properties
    public static let environment: SwiftUI._ViewDebug.Properties
    public static let phase: SwiftUI._ViewDebug.Properties
    public static let layoutComputer: SwiftUI._ViewDebug.Properties
    public static let displayList: SwiftUI._ViewDebug.Properties
    public static let all: SwiftUI._ViewDebug.Properties
    public typealias ArrayLiteralElement = SwiftUI._ViewDebug.Properties
    public typealias Element = SwiftUI._ViewDebug.Properties
    public typealias RawValue = Swift.UInt32
  }
  public struct Data {
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewDebug {
  public static func serializedData(_ viewDebugData: [SwiftUI._ViewDebug.Data]) -> Foundation.Data?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewDebug.Data : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public static func _printChanges()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ViewModifier {
  public static func _printChanges()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ShadowView<Content> : SwiftUI.View where Content : SwiftUI.Shape {
  public var shape: Content
  public var effect: SwiftUI._ShadowEffect
  @inlinable public init(shape: Content, effect: SwiftUI._ShadowEffect) {
        self.shape = shape
        self.effect = effect
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ShadowView<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Divider : SwiftUI.View {
  public init()
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Divider>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct TapGesture : SwiftUI.Gesture {
  public var count: Swift.Int
  public init(count: Swift.Int = 1)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.TapGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Void>
  public typealias Body = Swift.Never
  public typealias Value = ()
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @inlinable public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ValueActionModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public typealias Body = Swift.Never
  public var value: Value
  public var action: (Value) -> Swift.Void
  @inlinable public init(value: Value, action: @escaping (Value) -> Swift.Void) {
        (self.value, self.action) = (value, action)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ValueActionModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol NSViewControllerRepresentable : SwiftUI.View where Self.Body == Swift.Never {
  associatedtype NSViewControllerType : AppKit.NSViewController
  @_Concurrency.MainActor(unsafe) func makeNSViewController(context: Self.Context) -> Self.NSViewControllerType
  @_Concurrency.MainActor(unsafe) func updateNSViewController(_ nsViewController: Self.NSViewControllerType, context: Self.Context)
  @_Concurrency.MainActor(unsafe) static func dismantleNSViewController(_ nsViewController: Self.NSViewControllerType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor(unsafe) func makeCoordinator() -> Self.Coordinator
  @_Concurrency.MainActor(unsafe) func _identifiedViewTree(in nsViewController: Self.NSViewControllerType) -> SwiftUI._IdentifiedViewTree
  typealias Context = SwiftUI.NSViewControllerRepresentableContext<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewControllerRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Self.Coordinator
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewControllerRepresentable {
  @available(macOS 12.0, *)
  public func _resetNSViewController(_ nsViewController: Self.NSViewControllerType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  public static func dismantleNSViewController(_ nsViewController: Self.NSViewControllerType, coordinator: Self.Coordinator)
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public func _identifiedViewTree(in nsViewController: Self.NSViewControllerType) -> SwiftUI._IdentifiedViewTree
  public var body: Swift.Never {
    get
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) public struct NSViewControllerRepresentableContext<ViewController> where ViewController : SwiftUI.NSViewControllerRepresentable {
  @_Concurrency.MainActor(unsafe) public let coordinator: ViewController.Coordinator
  @_Concurrency.MainActor(unsafe) public var transaction: SwiftUI.Transaction {
    get
  }
  @_Concurrency.MainActor(unsafe) public var environment: SwiftUI.EnvironmentValues {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font {
  public static func system(size: CoreGraphics.CGFloat, weight: SwiftUI.Font.Weight = .regular, design: SwiftUI.Font.Design = .default) -> SwiftUI.Font
  public enum Design : Swift.Hashable {
    case `default`
    @available(watchOS 7.0, *)
    case serif
    case rounded
    @available(watchOS 7.0, *)
    case monospaced
    public static func == (a: SwiftUI.Font.Design, b: SwiftUI.Font.Design) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _TableRowContentModifier {
  associatedtype Body : SwiftUI._TableRowContentModifier
  var body: Self.Body { get }
  static func _makeRows(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._TableRowContentModifier {
  public static func _makeRows(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI._TableRowContentModifier {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ModifiedContent : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  public var tableRowBody: Swift.Never {
    get
  }
}
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ModifiedContent : SwiftUI.DynamicTableRowContent where Content : SwiftUI.DynamicTableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public var data: Content.Data {
    get
  }
  public typealias Data = Content.Data
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProviderLocator {
  static var previewProviders: [SwiftUI._PreviewProvider.Type] { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProvider {
  static var _previews: Any { get }
  static var _platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor(unsafe) public protocol PreviewProvider : SwiftUI._PreviewProvider {
  associatedtype Previews : SwiftUI.View
  @SwiftUI.ViewBuilder @_Concurrency.MainActor(unsafe) static var previews: Self.Previews { get }
  @_Concurrency.MainActor(unsafe) static var platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public static var platform: SwiftUI.PreviewPlatform? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var _previews: Any {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var _platform: SwiftUI.PreviewPlatform? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewPlatform {
  case iOS
  case macOS
  case tvOS
  case watchOS
  public static func == (a: SwiftUI.PreviewPlatform, b: SwiftUI.PreviewPlatform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewLayout {
  case device
  case sizeThatFits
  case fixed(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PreviewDevice : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public init(stringLiteral: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias RawValue = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContextKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContext {
  subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct InterfaceOrientation : Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
  public static var allCases: [SwiftUI.InterfaceOrientation] {
    get
  }
  public var id: Swift.String {
    get
  }
  public static let portrait: SwiftUI.InterfaceOrientation
  public static let portraitUpsideDown: SwiftUI.InterfaceOrientation
  public static let landscapeLeft: SwiftUI.InterfaceOrientation
  public static let landscapeRight: SwiftUI.InterfaceOrientation
  public static func == (a: SwiftUI.InterfaceOrientation, b: SwiftUI.InterfaceOrientation) -> Swift.Bool
  public typealias AllCases = [SwiftUI.InterfaceOrientation]
  public typealias ID = Swift.String
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func previewDevice(_ value: SwiftUI.PreviewDevice?) -> some SwiftUI.View {
        return _trait(PreviewDeviceTraitKey.self, value)
    }
  
  @inlinable public func previewLayout(_ value: SwiftUI.PreviewLayout) -> some SwiftUI.View {
        return _trait(PreviewLayoutTraitKey.self, value)
    }
  
  @inlinable public func previewDisplayName(_ value: Swift.String?) -> some SwiftUI.View {
        return _trait(PreviewDisplayNameTraitKey.self, value)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable public func previewContext<C>(_ value: C) -> some SwiftUI.View where C : SwiftUI.PreviewContext {
        return _trait(PreviewContextTraitKey.self, value)
    }
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func previewInterfaceOrientation(_ value: SwiftUI.InterfaceOrientation) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDeviceTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewDevice? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewDevice?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewLayoutTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewLayout {
    get { .device }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewLayout
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDisplayNameTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.String?
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
@usableFromInline
internal struct PreviewColorSchemeTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.ColorScheme? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.ColorScheme?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct PreviewInterfaceOrientationTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.InterfaceOrientation {
    get { .portrait }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.InterfaceOrientation
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct PreviewContextTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewContext? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewContext?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PreviewProvider {
  public static var _allPreviews: [SwiftUI._Preview] {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Preview {
  public let id: Swift.Int
  public let contentType: Swift.String
  public var content: SwiftUI.AnyView {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var context: SwiftUI.PreviewContext? {
    get
  }
  public var displayName: Swift.String? {
    get
  }
  public var device: SwiftUI.PreviewDevice? {
    get
  }
  public var layout: SwiftUI.PreviewLayout {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var interfaceOrientation: SwiftUI.InterfaceOrientation {
    get
  }
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  public var colorScheme: SwiftUI.ColorScheme? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Font : Swift.Hashable {
  private var provider: SwiftUI.AnyFontBox
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.Font, rhs: SwiftUI.Font) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyFontBox {
  @objc @usableFromInline
  deinit
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
public enum ContentSizeCategory : Swift.Hashable, Swift.CaseIterable {
  case extraSmall
  case small
  case medium
  case large
  case extraLarge
  case extraExtraLarge
  case extraExtraExtraLarge
  case accessibilityMedium
  case accessibilityLarge
  case accessibilityExtraLarge
  case accessibilityExtraExtraLarge
  case accessibilityExtraExtraExtraLarge
  @available(iOS 13.4, macOS 10.15.4, tvOS 13.4, watchOS 6.2, *)
  public var isAccessibilityCategory: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.ContentSizeCategory, b: SwiftUI.ContentSizeCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ContentSizeCategory]
  public static var allCases: [SwiftUI.ContentSizeCategory] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ContentSizeCategory {
  @_alwaysEmitIntoClient public static func < (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        func comparisonValue(for sizeCategory: Self) -> Int {
            switch sizeCategory {
            case .extraSmall: return 0
            case .small: return 1
            case .medium: return 2
            case .large: return 3
            case .extraLarge: return 4
            case .extraExtraLarge: return 5
            case .extraExtraExtraLarge: return 6
            case .accessibilityMedium: return 7
            case .accessibilityLarge: return 8
            case .accessibilityExtraLarge: return 9
            case .accessibilityExtraExtraLarge: return 10
            case .accessibilityExtraExtraExtraLarge: return 11
            @unknown default: return 3
            }
        }
        return comparisonValue(for: lhs) < comparisonValue(for: rhs)
    }
  @_alwaysEmitIntoClient public static func <= (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        !(rhs < lhs)
    }
  @_alwaysEmitIntoClient public static func > (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        rhs < lhs
    }
  @_alwaysEmitIntoClient public static func >= (lhs: SwiftUI.ContentSizeCategory, rhs: SwiftUI.ContentSizeCategory) -> Swift.Bool {
        !(lhs < rhs)
    }
}
extension SwiftUI.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  public var sizeCategory: SwiftUI.ContentSizeCategory {
    get
    set
  }
}
extension SwiftUI.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ image: SwiftUI.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ image: SwiftUI.Image)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  public func handlesExternalEvents(matching conditions: Swift.Set<Swift.String>) -> some SwiftUI.Scene
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCommand(_ selector: ObjectiveC.Selector, perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onPasteCommand(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onPasteCommand<Payload>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCopyCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onCutCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUI.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func onPasteCommand(of supportedTypes: [Swift.String], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUI.View
  
  public func onPasteCommand<Payload>(of supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __ResizableImagesExampleLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._PreferenceWritingModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._PreferenceTransformModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceTransformModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use Color(nsColor:) when converting a NSColor, or create a standard Color directly")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Color {
  @_disfavoredOverload public init(_ color: AppKit.NSColor)
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Color {
  public init(nsColor: AppKit.NSColor)
}
extension AppKit.NSColor {
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  convenience public init(_ color: SwiftUI.Color)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PasteButton : SwiftUI.View {
  @available(macOS 11.0, *)
  public init(supportedContentTypes: [UniformTypeIdentifiers.UTType], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  @available(macOS 11.0, *)
  public init<Payload>(supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11PasteButtonV4bodyQrvp", 0) __
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PasteButton {
  public init(supportedTypes: [Swift.String], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  public init<Payload>(supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct Canvas<Symbols> where Symbols : SwiftUI.View {
  public var symbols: Symbols
  public var renderer: (inout SwiftUI.GraphicsContext, CoreGraphics.CGSize) -> Swift.Void
  public var isOpaque: Swift.Bool {
    get
    set
  }
  public var colorMode: SwiftUI.ColorRenderingMode {
    get
    set
  }
  public var rendersAsynchronously: Swift.Bool {
    get
    set
  }
  public init(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUI.GraphicsContext, CoreGraphics.CGSize) -> Swift.Void, @SwiftUI.ViewBuilder symbols: () -> Symbols)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Canvas<Symbols>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Canvas where Symbols == SwiftUI.EmptyView {
  public init(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUI.GraphicsContext, CoreGraphics.CGSize) -> Swift.Void)
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsInputs {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsOutputs {
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EditButton : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10EditButtonV4bodyQrvp", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func interactiveDismissDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyView : SwiftUI.View {
  @inlinable public init() {}
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.EmptyView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.EmptyView>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> T
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> some SwiftUI.View where T : SwiftUI.View

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct FetchedResults<Result> : Swift.RandomAccessCollection where Result : CoreData.NSFetchRequestResult {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> Result {
    get
  }
  public typealias Element = Result
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.FetchedResults<Result>>
  public typealias SubSequence = Swift.Slice<SwiftUI.FetchedResults<Result>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct FetchRequest<Result> where Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor(unsafe) public var wrappedValue: SwiftUI.FetchedResults<Result> {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct Configuration {
    public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    public var nsPredicate: Foundation.NSPredicate?
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<SwiftUI.FetchRequest<Result>.Configuration> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest : SwiftUI.DynamicProperty {
  @_Concurrency.MainActor(unsafe) public mutating func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest {
  @_Concurrency.MainActor(unsafe) public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest {
  @_Concurrency.MainActor(unsafe) public init(entity: CoreData.NSEntityDescription, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
  @_Concurrency.MainActor(unsafe) public init(fetchRequest: CoreData.NSFetchRequest<Result>, animation: SwiftUI.Animation? = nil)
  @_Concurrency.MainActor(unsafe) public init(fetchRequest: CoreData.NSFetchRequest<Result>, transaction: SwiftUI.Transaction)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor(unsafe) public init(sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  @_disfavoredOverload @_Concurrency.MainActor(unsafe) public init(sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest.Configuration where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchedResults where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public func renderingMode(_ renderingMode: SwiftUI.Image.TemplateRenderingMode?) -> SwiftUI.Image
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __FluidSpringTestLayout {
  public static let count: Swift.Int
  public init(iteration: Swift.Int, location: CoreGraphics.CGPoint?)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @propertyWrapper public struct FocusState<Value> : SwiftUI.DynamicProperty where Value : Swift.Hashable {
  @frozen @propertyWrapper public struct Binding {
    private var _binding: SwiftUI.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.FocusState<Value>.Binding {
      get
    }
  }
  internal var value: Value
  internal var location: SwiftUI.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.FocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public init() where Value == Swift.Bool
  public init<T>() where Value == Swift.Optional<T>, T : Swift.Hashable
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func focused<Value>(_ binding: SwiftUI.FocusState<Value>.Binding, equals value: Value) -> some SwiftUI.View where Value : Swift.Hashable
  
  public func focused(_ condition: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.IconOnlyLabelStyle {
  @_alwaysEmitIntoClient public static var iconOnly: SwiftUI.IconOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct IconOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.IconOnlyLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18IconOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L, T>(leading: L, trailing: T) -> some SwiftUI.View where L : SwiftUI.View, T : SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L>(leading: L) -> some SwiftUI.View where L : SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<T>(trailing: T) -> some SwiftUI.View where T : SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public struct ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyView {
        EmptyView()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.View {
        content
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.View {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUI._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUI._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
        .init(storage: .falseContent(second))
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> SwiftUI.AnyView where Content : SwiftUI.View {
        .init(content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Foundation.KeyPathComparator<RowValue>, Label == SwiftUI.Text {
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where V : Swift.Comparable
  @_disfavoredOverload public init<S, V>(_ title: S, value: Swift.KeyPath<RowValue, V>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V : Swift.Comparable
  public init<V, C>(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where V == C.Compared, C : Foundation.SortComparator
  @_disfavoredOverload public init<S, V, C>(_ title: S, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V == C.Compared, C : Foundation.SortComparator
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func onDrag<V>(_ data: @escaping () -> Foundation.NSItemProvider, @SwiftUI.ViewBuilder preview: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DraggingModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DraggingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct List<SelectionValue, Content> : SwiftUI.View where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder content: () -> Content)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4ListV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  @_semantics("swiftui.requires_constant_range") public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_semantics("swiftui.requires_constant_range") public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUI.View {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @usableFromInline
  @_disfavoredOverload internal init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @usableFromInline
  @_disfavoredOverload internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @usableFromInline
  @_disfavoredOverload internal init<Data, RowContent>(_ data: Data, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @usableFromInline
  @_disfavoredOverload internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") internal init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: Data, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @_semantics("swiftui.requires_constant_range") @_alwaysEmitIntoClient public init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUI.View {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @usableFromInline
  @_disfavoredOverload internal init<Data, RowContent>(_ data: Data, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, Data.Element.ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @usableFromInline
  @_disfavoredOverload internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.ForEach<Data, ID, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @usableFromInline
  @_semantics("swiftui.requires_constant_range") @_disfavoredOverload internal init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUI.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUI.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUI.HStack<RowContent>>, RowContent : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, rowContent: rowContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View, Data.Index : Swift.Hashable {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List {
  public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Swift.Set<SelectionValue>>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<SelectionValue?>?, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List where SelectionValue == Swift.Never {
  public init<Data, RowContent>(_ data: SwiftUI.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : Swift.Identifiable
  public init<Data, ID, RowContent>(_ data: SwiftUI.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUI.ViewBuilder rowContent: @escaping (SwiftUI.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUI.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct IDView<Content, ID> : SwiftUI.View where Content : SwiftUI.View, ID : Swift.Hashable {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal var id: ID
  @inlinable internal init(_ content: Content, id: ID) {
        self.content = content
        self.id = id
    }
  @usableFromInline
  @_Concurrency.MainActor(unsafe) internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func id<ID>(_ id: ID) -> some SwiftUI.View where ID : Swift.Hashable {
        return IDView(self, id: id)
    }
  
}
extension SwiftUI.IDView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal static func _makeView(view: SwiftUI._GraphValue<SwiftUI.IDView<Content, ID>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
extension SwiftUI.IDView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  internal static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.IDView<Content, ID>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  internal static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func privacySensitive(_ sensitive: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public enum AccessibilityLabeledPairRole {
  case label
  case content
  public static func == (a: SwiftUI.AccessibilityLabeledPairRole, b: SwiftUI.AccessibilityLabeledPairRole) -> Swift.Bool
}
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityLinkedGroup<ID>(id: ID, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View where ID : Swift.Hashable
  
  public func accessibilityLabeledPair<ID>(role: SwiftUI.AccessibilityLabeledPairRole, id: ID, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View where ID : Swift.Hashable
  
}
extension SwiftUI.View {
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func textContentType(_ textContentType: AppKit.NSTextContentType?) -> some SwiftUI.View {
        environment(\.textContentType, textContentType?.rawValue)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var textContentType: Swift.String? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font {
  public static let largeTitle: SwiftUI.Font
  public static let title: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title2: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title3: SwiftUI.Font
  public static let headline: SwiftUI.Font
  public static let subheadline: SwiftUI.Font
  public static let body: SwiftUI.Font
  public static let callout: SwiftUI.Font
  public static let footnote: SwiftUI.Font
  public static let caption: SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let caption2: SwiftUI.Font
  public static func system(_ style: SwiftUI.Font.TextStyle, design: SwiftUI.Font.Design = .default) -> SwiftUI.Font
  public enum TextStyle : Swift.CaseIterable {
    case largeTitle
    case title
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title2
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title3
    case headline
    case subheadline
    case body
    case callout
    case footnote
    case caption
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case caption2
    public static var allCases: [SwiftUI.Font.TextStyle]
    public static func == (a: SwiftUI.Font.TextStyle, b: SwiftUI.Font.TextStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [SwiftUI.Font.TextStyle]
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
public protocol _AnimatableView : SwiftUI.Animatable, SwiftUI.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
extension SwiftUI._AnimatableView {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View where Self : SwiftUI.Animatable {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, tvOS 13.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.StackNavigationViewStyle {
  @_alwaysEmitIntoClient public static var stack: SwiftUI.StackNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct StackNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonRole : Swift.Equatable {
  public static let destructive: SwiftUI.ButtonRole
  public static let cancel: SwiftUI.ButtonRole
  public static func == (a: SwiftUI.ButtonRole, b: SwiftUI.ButtonRole) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func onPreferenceChange<K>(_ key: K.Type = K.self, perform action: @escaping (K.Value) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey, K.Value : Swift.Equatable {
        return modifier(_PreferenceActionModifier<K>(action: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceActionModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey, Key.Value : Swift.Equatable {
  public var action: (Key.Value) -> Swift.Void
  @inlinable public init(action: @escaping (Key.Value) -> Swift.Void) {
        self.action = action
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceActionModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Image {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(nsImage: AppKit.NSImage)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct ContainerRelativeShape : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.ContainerRelativeShape, SwiftUI.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ContainerRelativeShape : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.ContainerRelativeShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.ContainerRelativeShape._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.ContainerRelativeShape._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22ContainerRelativeShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ShapeStyle {
  public func _fillingContainerShape() -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func containerShape<T>(_ shape: T) -> some SwiftUI.View where T : SwiftUI.InsettableShape {
        modifier(_ContainerShapeModifier(shape: shape))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func _containerShape<T>(_ shape: T) -> some SwiftUI.View where T : SwiftUI.InsettableShape
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ContainerShapeModifier<Shape> where Shape : SwiftUI.InsettableShape {
  public var shape: Shape
  @inlinable public init(shape: Shape) { self.shape = shape }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ContainerShapeModifier<Shape>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public protocol AccessibilityRotorContent {
  static func _makeEntries(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  associatedtype Body : SwiftUI.AccessibilityRotorContent
  @SwiftUI.AccessibilityRotorContentBuilder var body: Self.Body { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContent {
  public static func _makeEntries(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Never : SwiftUI.AccessibilityRotorContent {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryInputs {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryOutputs {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_functionBuilder public struct AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        content
    }
  
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        AccessibilityOptionalRotorContent(content)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen internal struct AccessibilityTupleRotorContent<T> : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  internal var value: T
  @inlinable internal init(_ value: T) { self.value = value }
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  @usableFromInline
  internal static func _makeEntries(content: SwiftUI._GraphValue<SwiftUI.AccessibilityTupleRotorContent<T>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ForEach : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  public var body: Swift.Never {
    get
  }
  public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  public static func _makeEntries(content: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ForEach where ID == Data.Element.ID, Content : SwiftUI.AccessibilityRotorContent, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ForEach where Content : SwiftUI.AccessibilityRotorContent {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorEntry : SwiftUI.AccessibilityRotorContent {
  public var body: Swift.Never {
    get
  }
  public static func _makeEntries(content: SwiftUI._GraphValue<SwiftUI.AccessibilityRotorEntry<ID>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen internal struct AccessibilityOptionalRotorContent<Content> where Content : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  internal var content: Content?
  @inlinable internal init(_ content: Content?) {
        self.content = content
    }
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _makeEntries(content: SwiftUI._GraphValue<SwiftUI.AccessibilityOptionalRotorContent<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Group : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  public var body: Swift.Never {
    get
  }
  public init(@SwiftUI.AccessibilityRotorContentBuilder content: () -> Content)
  public static func _makeEntries(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AllowsHitTestingModifier : Swift.Equatable {
  public var allowsHitTesting: Swift.Bool
  @inlinable public init(allowsHitTesting: Swift.Bool) {
        self.allowsHitTesting = allowsHitTesting
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AllowsHitTestingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._AllowsHitTestingModifier, b: SwiftUI._AllowsHitTestingModifier) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func allowsHitTesting(_ enabled: Swift.Bool) -> some SwiftUI.View {
        return modifier(_AllowsHitTestingModifier(allowsHitTesting: enabled))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum _CrownHapticsConfiguration {
  case none
  case infiniteScrolling
  case finiteScrolling(CoreGraphics.CGFloat, CoreGraphics.CGFloat)
  case platters([SwiftUI._CrownHapticsConfiguration.Notch])
  public struct Notch {
    public enum Strength {
      case weak
      case standard
      case strong
      public static func == (a: SwiftUI._CrownHapticsConfiguration.Notch.Strength, b: SwiftUI._CrownHapticsConfiguration.Notch.Strength) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(from: CoreGraphics.CGFloat, to: CoreGraphics.CGFloat, strength: SwiftUI._CrownHapticsConfiguration.Notch.Strength)
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public protocol _CrownHapticsConfigurationProvider {
  func makeConfiguration() -> SwiftUI._CrownHapticsConfiguration
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfigurationProvider {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func notchRadius(forHeight notchHeight: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol AlignmentID {
  static func defaultValue(in context: SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat
  static func _combineExplicit(childValue: CoreGraphics.CGFloat, _ n: Swift.Int, into parentValue: inout CoreGraphics.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AlignmentID {
  public static func _combineExplicit(childValue: CoreGraphics.CGFloat, _ n: Swift.Int, into parentValue: inout CoreGraphics.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct HorizontalAlignment : Swift.Equatable {
  public init(_ id: SwiftUI.AlignmentID.Type)
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  public static func == (a: SwiftUI.HorizontalAlignment, b: SwiftUI.HorizontalAlignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct VerticalAlignment : Swift.Equatable {
  public init(_ id: SwiftUI.AlignmentID.Type)
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  public static func == (a: SwiftUI.VerticalAlignment, b: SwiftUI.VerticalAlignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.HorizontalAlignment {
  public static let leading: SwiftUI.HorizontalAlignment
  public static let center: SwiftUI.HorizontalAlignment
  public static let trailing: SwiftUI.HorizontalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.VerticalAlignment {
  public static let top: SwiftUI.VerticalAlignment
  public static let center: SwiftUI.VerticalAlignment
  public static let bottom: SwiftUI.VerticalAlignment
  public static let firstTextBaseline: SwiftUI.VerticalAlignment
  public static let lastTextBaseline: SwiftUI.VerticalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
@frozen internal struct AlignmentKey : Swift.Hashable, Swift.Comparable {
  private let bits: Swift.UInt
  @usableFromInline
  internal static func < (lhs: SwiftUI.AlignmentKey, rhs: SwiftUI.AlignmentKey) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal static func == (a: SwiftUI.AlignmentKey, b: SwiftUI.AlignmentKey) -> Swift.Bool
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.BorderedTableStyle {
  @_alwaysEmitIntoClient public static var bordered: SwiftUI.BorderedTableStyle {
    get {
        .init(alternatesRowBackgrounds: true)
    }
  }
  @_alwaysEmitIntoClient public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderedTableStyle : SwiftUI.TableStyle {
  public init()
  public init(alternatesRowBackgrounds: Swift.Bool)
  public func makeBody(configuration: SwiftUI.BorderedTableStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18BorderedTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func sheet<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  public func sheet<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUI.View {
  public func fullScreenCover<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(*, deprecated, renamed: "fullScreenCover(item:onDismiss:content:)")
  public func _cover<Item, Content>(item: SwiftUI.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  public func fullScreenCover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(*, deprecated, renamed: "fullScreenCover(isPresented:onDismiss:content:)")
  public func _cover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct RedactionReasons : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let placeholder: SwiftUI.RedactionReasons
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let privacy: SwiftUI.RedactionReasons
  public typealias ArrayLiteralElement = SwiftUI.RedactionReasons
  public typealias Element = SwiftUI.RedactionReasons
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func redacted(reason: SwiftUI.RedactionReasons) -> some SwiftUI.View
  
  public func unredacted() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.EnvironmentValues {
  public var redactionReasons: SwiftUI.RedactionReasons {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RotationGesture : SwiftUI.Gesture {
  public var minimumAngleDelta: SwiftUI.Angle
  public init(minimumAngleDelta: SwiftUI.Angle = .degrees(1))
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.RotationGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.Angle>
  public typealias Body = Swift.Never
  public typealias Value = SwiftUI.Angle
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum Prominence {
  case standard
  case increased
  public static func == (a: SwiftUI.Prominence, b: SwiftUI.Prominence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var headerProminence: SwiftUI.Prominence {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func headerProminence(_ prominence: SwiftUI.Prominence) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorScheme : Swift.CaseIterable {
  case light
  case dark
  public static func == (a: SwiftUI.ColorScheme, b: SwiftUI.ColorScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ColorScheme]
  public static var allCases: [SwiftUI.ColorScheme] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorSchemeContrast : Swift.CaseIterable {
  case standard
  case increased
  public static func == (a: SwiftUI.ColorSchemeContrast, b: SwiftUI.ColorSchemeContrast) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ColorSchemeContrast]
  public static var allCases: [SwiftUI.ColorSchemeContrast] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
  @inlinable public func colorScheme(_ colorScheme: SwiftUI.ColorScheme) -> some SwiftUI.View {
        return environment(\.colorScheme, colorScheme)
    }
  
}
extension SwiftUI.EnvironmentValues {
  public var colorScheme: SwiftUI.ColorScheme {
    get
    set
  }
  public var colorSchemeContrast: SwiftUI.ColorSchemeContrast {
    get
  }
  public var _colorSchemeContrast: SwiftUI.ColorSchemeContrast {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ShapeStyle {
  @available(*, deprecated, message: "obsolete")
  static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, Self>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle {
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, Self>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _ShapeStyle_Shape {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _ShapeStyle_ShapeType {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentGroup<Document, Content> : SwiftUI.Scene where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13DocumentGroupV4bodyQrvp", 0) __<Document, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityAttachmentModifier : SwiftUI.ViewModifier {
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityTextContentType {
  public static let plain: SwiftUI.AccessibilityTextContentType
  public static let console: SwiftUI.AccessibilityTextContentType
  public static let fileSystem: SwiftUI.AccessibilityTextContentType
  public static let messaging: SwiftUI.AccessibilityTextContentType
  public static let narrative: SwiftUI.AccessibilityTextContentType
  public static let sourceCode: SwiftUI.AccessibilityTextContentType
  public static let spreadsheet: SwiftUI.AccessibilityTextContentType
  public static let wordProcessing: SwiftUI.AccessibilityTextContentType
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum AccessibilityHeadingLevel : Swift.UInt {
  case unspecified
  case h1
  case h2
  case h3
  case h4
  case h5
  case h6
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Text {
  public func accessibilityTextContentType(_ value: SwiftUI.AccessibilityTextContentType) -> SwiftUI.Text
  public func accessibilityHeading(_ level: SwiftUI.AccessibilityHeadingLevel) -> SwiftUI.Text
  public func accessibilityLabel(_ label: SwiftUI.Text) -> SwiftUI.Text
  public func accessibilityLabel(_ labelKey: SwiftUI.LocalizedStringKey) -> SwiftUI.Text
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUI.Text where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityTextContentType(_ value: SwiftUI.AccessibilityTextContentType) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityHeading(_ level: SwiftUI.AccessibilityHeadingLevel) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityTextContentType(_ textContentType: SwiftUI.AccessibilityTextContentType) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityHeading(_ level: SwiftUI.AccessibilityHeadingLevel) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchoredShapeStyle<S> : SwiftUI.ShapeStyle where S : SwiftUI.ShapeStyle {
  public var style: S
  public var bounds: CoreGraphics.CGRect
  @inlinable internal init(style: S, bounds: CoreGraphics.CGRect) {
        self.style = style
        self.bounds = bounds
    }
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI._AnchoredShapeStyle<S>>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._AnchoredShapeStyle {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle {
  @inlinable public func `in`(_ rect: CoreGraphics.CGRect) -> some SwiftUI.ShapeStyle {
        return _AnchoredShapeStyle(style: self, bounds: rect)
    }
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
public struct Alert {
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, dismissButton: SwiftUI.Alert.Button? = nil)
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static func sideBySideButtons(title: SwiftUI.Text, message: SwiftUI.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button) -> SwiftUI.Alert
  public struct Button {
    public static func `default`(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func destructive(_ label: SwiftUI.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  public func alert<Item>(item: SwiftUI.Binding<Item?>, content: (Item) -> SwiftUI.Alert) -> some SwiftUI.View where Item : Swift.Identifiable
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  public func alert(isPresented: SwiftUI.Binding<Swift.Bool>, content: () -> SwiftUI.Alert) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct PinnedScrollableViews : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let sectionHeaders: SwiftUI.PinnedScrollableViews
  public static let sectionFooters: SwiftUI.PinnedScrollableViews
  public typealias ArrayLiteralElement = SwiftUI.PinnedScrollableViews
  public typealias Element = SwiftUI.PinnedScrollableViews
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func gesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
  public func highPriorityGesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
  public func simultaneousGesture<T>(_ gesture: T, including mask: SwiftUI.GestureMask = .all) -> some SwiftUI.View where T : SwiftUI.Gesture
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureMask : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let none: SwiftUI.GestureMask
  public static let gesture: SwiftUI.GestureMask
  public static let subviews: SwiftUI.GestureMask
  public static let all: SwiftUI.GestureMask
  public typealias ArrayLiteralElement = SwiftUI.GestureMask
  public typealias Element = SwiftUI.GestureMask
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ProjectionEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var transform: SwiftUI.ProjectionTransform
  @inlinable public init(transform: SwiftUI.ProjectionTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public static func == (a: SwiftUI._ProjectionEffect, b: SwiftUI._ProjectionEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func projectionEffect(_ transform: SwiftUI.ProjectionTransform) -> some SwiftUI.View {
        return modifier(_ProjectionEffect(transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _LayoutTraits : Swift.Equatable {
  public static func == (a: SwiftUI._LayoutTraits, b: SwiftUI._LayoutTraits) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LayoutTraits : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _RendererConfiguration {
  public enum Renderer {
    case `default`
    indirect case rasterized(_: SwiftUI._RendererConfiguration.RasterizationOptions = .init())
  }
  public var renderer: SwiftUI._RendererConfiguration.Renderer
  public var minFrameInterval: Swift.Double
  public init(renderer: SwiftUI._RendererConfiguration.Renderer = .default)
  public static func rasterized(_ options: SwiftUI._RendererConfiguration.RasterizationOptions = .init()) -> SwiftUI._RendererConfiguration
  public struct RasterizationOptions {
    public var colorMode: SwiftUI.ColorRenderingMode
    public var rbColorMode: Swift.Int32?
    public var rendersAsynchronously: Swift.Bool
    public var isOpaque: Swift.Bool
    public var drawsPlatformViews: Swift.Bool
    public var prefersDisplayCompositing: Swift.Bool
    public var maxDrawableCount: Swift.Int
    public init()
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineSchedule where Self == SwiftUI.AnimationTimelineSchedule {
  @_alwaysEmitIntoClient public static var animation: SwiftUI.AnimationTimelineSchedule {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func animation(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false) -> SwiftUI.AnimationTimelineSchedule {
        .init(minimumInterval: minimumInterval, paused: paused)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AnimationTimelineSchedule : SwiftUI.TimelineSchedule {
  public init(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false)
  public func entries(from start: Foundation.Date, mode: SwiftUI.TimelineScheduleMode) -> SwiftUI.AnimationTimelineSchedule.Entries
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol {
    public mutating func next() -> Foundation.Date?
    public typealias Element = Foundation.Date
    public typealias Iterator = SwiftUI.AnimationTimelineSchedule.Entries
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyGesture<Value> : SwiftUI.Gesture {
  fileprivate var storage: SwiftUI.AnyGestureStorageBase<Value>
  public init<T>(_ gesture: T) where Value == T.Value, T : SwiftUI.Gesture
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.AnyGesture<Value>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyGestureStorageBase<Value> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum LayoutDirection : Swift.Hashable, Swift.CaseIterable {
  case leftToRight
  case rightToLeft
  public static func == (a: SwiftUI.LayoutDirection, b: SwiftUI.LayoutDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.LayoutDirection]
  public static var allCases: [SwiftUI.LayoutDirection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var layoutDirection: SwiftUI.LayoutDirection {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BackgroundModifier<Background> : SwiftUI.ViewModifier where Background : SwiftUI.View {
  public var background: Background
  public var alignment: SwiftUI.Alignment
  @inlinable public init(background: Background, alignment: SwiftUI.Alignment = .center) {
        self.background = background
        self.alignment = alignment
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackgroundModifier<Background>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BackgroundModifier : Swift.Equatable where Background : Swift.Equatable {
  public static func == (a: SwiftUI._BackgroundModifier<Background>, b: SwiftUI._BackgroundModifier<Background>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _BackgroundStyleModifier<Style> : SwiftUI.ViewModifier where Style : SwiftUI.ShapeStyle {
  public var style: Style
  public var ignoresSafeAreaEdges: SwiftUI.Edge.Set
  @inlinable public init(style: Style, ignoresSafeAreaEdges: SwiftUI.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackgroundStyleModifier<Style>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _BackgroundShapeModifier<Style, Bounds> : SwiftUI.ViewModifier where Style : SwiftUI.ShapeStyle, Bounds : SwiftUI.Shape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUI.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUI.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _InsettableBackgroundShapeModifier<Style, Bounds> : SwiftUI.ViewModifier where Style : SwiftUI.ShapeStyle, Bounds : SwiftUI.InsettableShape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUI.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUI.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._InsettableBackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload public func background<Background>(_ background: Background, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View where Background : SwiftUI.View {
        return modifier(
            _BackgroundModifier(background: background, alignment: alignment))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func background<V>(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder content: () -> V) -> some SwiftUI.View where V : SwiftUI.View {
        modifier(
            _BackgroundModifier(background: content(), alignment: alignment))
    }
  
  @inlinable public func background(ignoresSafeAreaEdges edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View {
        modifier(_BackgroundStyleModifier(
            style: .background, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable public func background<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        modifier(_BackgroundStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable public func background<S>(in shape: S, fillStyle: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.Shape {
        modifier(_BackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.ShapeStyle, T : SwiftUI.Shape {
        modifier(_BackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable public func background<S>(in shape: S, fillStyle: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.ShapeStyle, T : SwiftUI.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ScrollViewBoundsModifier<Result> : SwiftUI.ViewModifier where Result : SwiftUI.ViewModifier {
  public var transform: (CoreGraphics.CGRect?) -> Result
  @inlinable public init(transform: @escaping (CoreGraphics.CGRect?) -> Result) {
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ScrollViewBoundsModifier<Result>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ScrollViewBoundsModifier2<Result> : SwiftUI.ViewModifier where Result : SwiftUI.ViewModifier {
  public var transform: (CoreGraphics.CGSize, CoreGraphics.CGRect?) -> Result
  @inlinable public init(transform: @escaping (CoreGraphics.CGSize, CoreGraphics.CGRect?) -> Result) {
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ScrollViewBoundsModifier2<Result>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ViewModifier {
  static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder @_Concurrency.MainActor(unsafe) func body(content: Self.Content) -> Self.Body
  typealias Content = SwiftUI._ViewModifier_Content<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewModifier where Self.Body == Swift.Never {
  public func body(content: Self.Content) -> Self.Body
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewModifier where Self : SwiftUI._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyModifier : SwiftUI.ViewModifier {
  public static let identity: SwiftUI.EmptyModifier
  public typealias Body = Swift.Never
  @inlinable public init() {}
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @_Concurrency.MainActor(unsafe) public func body(content: SwiftUI.EmptyModifier.Content) -> SwiftUI.EmptyModifier.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func modifier<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ModifiedContent<Content, Modifier> {
  public typealias Body = Swift.Never
  public var content: Content
  public var modifier: Modifier
  @inlinable public init(content: Content, modifier: Modifier) {
        self.content = content
        self.modifier = modifier
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent : Swift.Equatable where Content : Swift.Equatable, Modifier : Swift.Equatable {
  public static func == (a: SwiftUI.ModifiedContent<Content, Modifier>, b: SwiftUI.ModifiedContent<Content, Modifier>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent : SwiftUI.View where Content : SwiftUI.View, Modifier : SwiftUI.ViewModifier {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  @_Concurrency.MainActor(unsafe) public var body: SwiftUI.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent : SwiftUI.ViewModifier where Content : SwiftUI.ViewModifier, Modifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewModifier {
  @inlinable public func concat<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OverlayModifier<Overlay> : SwiftUI.ViewModifier where Overlay : SwiftUI.View {
  public var overlay: Overlay
  public var alignment: SwiftUI.Alignment
  @inlinable public init(overlay: Overlay, alignment: SwiftUI.Alignment = .center) {
        self.overlay = overlay
        self.alignment = alignment
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OverlayModifier<Overlay>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayModifier : Swift.Equatable where Overlay : Swift.Equatable {
  public static func == (a: SwiftUI._OverlayModifier<Overlay>, b: SwiftUI._OverlayModifier<Overlay>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _OverlayStyleModifier<Style> : SwiftUI.ViewModifier where Style : SwiftUI.ShapeStyle {
  public var style: Style
  public var ignoresSafeAreaEdges: SwiftUI.Edge.Set
  @inlinable public init(style: Style, ignoresSafeAreaEdges: SwiftUI.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OverlayStyleModifier<Style>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _OverlayShapeModifier<Style, Bounds> : SwiftUI.ViewModifier where Style : SwiftUI.ShapeStyle, Bounds : SwiftUI.Shape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUI.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUI.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OverlayShapeModifier<Style, Bounds>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload public func overlay<Overlay>(_ overlay: Overlay, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View where Overlay : SwiftUI.View {
        return modifier(_OverlayModifier(
            overlay: overlay, alignment: alignment))
    }
  
  @inlinable public func border<S>(_ content: S, width: CoreGraphics.CGFloat = 1) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return overlay(Rectangle().strokeBorder(content, lineWidth: width))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func overlay<V>(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder content: () -> V) -> some SwiftUI.View where V : SwiftUI.View {
        modifier(_OverlayModifier(overlay: content(), alignment: alignment))
    }
  
  @inlinable public func overlay<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        modifier(_OverlayStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable public func overlay<S, T>(_ style: S, in shape: T, fillStyle: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.ShapeStyle, T : SwiftUI.Shape {
        modifier(_OverlayShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitLabel {
  public static var done: SwiftUI.SubmitLabel {
    get
  }
  public static var go: SwiftUI.SubmitLabel {
    get
  }
  public static var send: SwiftUI.SubmitLabel {
    get
  }
  public static var join: SwiftUI.SubmitLabel {
    get
  }
  public static var route: SwiftUI.SubmitLabel {
    get
  }
  public static var search: SwiftUI.SubmitLabel {
    get
  }
  public static var `return`: SwiftUI.SubmitLabel {
    get
  }
  public static var next: SwiftUI.SubmitLabel {
    get
  }
  public static var `continue`: SwiftUI.SubmitLabel {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func submitLabel(_ submitLabel: SwiftUI.SubmitLabel) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnMoveTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void> {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct OnMoveClipBackgroundTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.DynamicViewContent {
  @inlinable public func onMove(perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUI.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsMoveDisabledTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func moveDisabled(_ isDisabled: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsMoveDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text {
  public struct DateStyle {
    public static let time: SwiftUI.Text.DateStyle
    public static let date: SwiftUI.Text.DateStyle
    public static let relative: SwiftUI.Text.DateStyle
    public static let offset: SwiftUI.Text.DateStyle
    public static let timer: SwiftUI.Text.DateStyle
  }
  public init(_ date: Foundation.Date, style: SwiftUI.Text.DateStyle)
  public init(_ dates: Swift.ClosedRange<Foundation.Date>)
  public init(_ interval: Foundation.DateInterval)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ date: Foundation.Date, style: SwiftUI.Text.DateStyle)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ dates: Swift.ClosedRange<Foundation.Date>)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ interval: Foundation.DateInterval)
}
extension SwiftUI.Text.DateStyle : Swift.Equatable {
  public static func == (a: SwiftUI.Text.DateStyle, b: SwiftUI.Text.DateStyle) -> Swift.Bool
}
extension SwiftUI.Text.DateStyle : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _CircleLayout {
  public let radius: CoreGraphics.CGFloat
  public init(radius: CoreGraphics.CGFloat)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityRotorEntry<ID> where ID : Swift.Hashable {
  public init(_ label: SwiftUI.Text, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  public init(_ label: SwiftUI.Text, id: ID, in namespace: SwiftUI.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  public init(_ label: SwiftUI.Text? = nil, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {}) where ID == Swift.Never
  public init(_ labelKey: SwiftUI.LocalizedStringKey, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  @_disfavoredOverload public init<L>(_ label: L, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  public init(_ labelKey: SwiftUI.LocalizedStringKey, id: ID, in namespace: SwiftUI.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  @_disfavoredOverload public init<L>(_ label: L, _ id: ID, in namespace: SwiftUI.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  public init(_ labelKey: SwiftUI.LocalizedStringKey, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {})
  @_disfavoredOverload public init<L>(_ label: L, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {}) where ID == Swift.Never, L : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityRotorEntry<ID>(id: ID, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View where ID : Swift.Hashable
  
}
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  public func focusable(_ isFocusable: Swift.Bool = true, onFocusChange: @escaping (_ isFocused: Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUI.View
  
  @available(macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @available(iOS, unavailable)
  public func focusable(_ isFocusable: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _FocusableModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._FocusableModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var isFocused: Swift.Bool {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreGraphics.CGPoint) -> Swift.Bool) -> some SwiftUI.View
  
  public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: SwiftUI.DropDelegate) -> some SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropInfo {
  public var location: CoreGraphics.CGPoint {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  public func hasItemsConforming(to contentTypes: [UniformTypeIdentifiers.UTType]) -> Swift.Bool
  @available(iOS 14.0, macOS 11.0, *)
  public func itemProviders(for contentTypes: [UniformTypeIdentifiers.UTType]) -> [Foundation.NSItemProvider]
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) public protocol DropDelegate {
  @_Concurrency.MainActor(unsafe) func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) func performDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) func dropEntered(info: SwiftUI.DropInfo)
  @_Concurrency.MainActor(unsafe) func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  @_Concurrency.MainActor(unsafe) func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropDelegate {
  @_Concurrency.MainActor(unsafe) public func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func dropEntered(info: SwiftUI.DropInfo)
  @_Concurrency.MainActor(unsafe) public func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  @_Concurrency.MainActor(unsafe) public func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum DropOperation {
  case cancel
  case forbidden
  case copy
  case move
  public static func == (a: SwiftUI.DropOperation, b: SwiftUI.DropOperation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropProposal {
  public let operation: SwiftUI.DropOperation
  public init(operation: SwiftUI.DropOperation)
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUI.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreGraphics.CGPoint) -> Swift.Bool) -> some SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDrop(of supportedTypes: [Swift.String], delegate: SwiftUI.DropDelegate) -> some SwiftUI.View
  
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropInfo {
  public func hasItemsConforming(to types: [Swift.String]) -> Swift.Bool
  public func itemProviders(for types: [Swift.String]) -> [Foundation.NSItemProvider]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum ContentMode : Swift.Hashable, Swift.CaseIterable {
  case fit
  case fill
  public static func == (a: SwiftUI.ContentMode, b: SwiftUI.ContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ContentMode]
  public static var allCases: [SwiftUI.ContentMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AspectRatioLayout {
  public var aspectRatio: CoreGraphics.CGFloat?
  public var contentMode: SwiftUI.ContentMode
  @inlinable public init(aspectRatio: CoreGraphics.CGFloat? = nil, contentMode: SwiftUI.ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func aspectRatio(_ aspectRatio: CoreGraphics.CGFloat? = nil, contentMode: SwiftUI.ContentMode) -> some SwiftUI.View {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  
  @inlinable public func aspectRatio(_ aspectRatio: CoreGraphics.CGSize, contentMode: SwiftUI.ContentMode) -> some SwiftUI.View {
        return self.aspectRatio(
            aspectRatio.width / aspectRatio.height, contentMode: contentMode)
    }
  
  @inlinable public func scaledToFit() -> some SwiftUI.View {
        return aspectRatio(contentMode: .fit)
    }
  
  @inlinable public func scaledToFill() -> some SwiftUI.View {
        return aspectRatio(contentMode: .fill)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SymbolVariants : Swift.Hashable {
  public static let none: SwiftUI.SymbolVariants
  public static let circle: SwiftUI.SymbolVariants
  public static let square: SwiftUI.SymbolVariants
  public static let rectangle: SwiftUI.SymbolVariants
  public var circle: SwiftUI.SymbolVariants {
    get
  }
  public var square: SwiftUI.SymbolVariants {
    get
  }
  public var rectangle: SwiftUI.SymbolVariants {
    get
  }
  public static let fill: SwiftUI.SymbolVariants
  public var fill: SwiftUI.SymbolVariants {
    get
  }
  public static let slash: SwiftUI.SymbolVariants
  public var slash: SwiftUI.SymbolVariants {
    get
  }
  public func contains(_ other: SwiftUI.SymbolVariants) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.SymbolVariants, b: SwiftUI.SymbolVariants) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func symbolVariant(_ variant: SwiftUI.SymbolVariants) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var symbolVariants: SwiftUI.SymbolVariants {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PaddingLayout {
  public var edges: SwiftUI.Edge.Set
  public var insets: SwiftUI.EdgeInsets?
  @inlinable public init(edges: SwiftUI.Edge.Set = .all, insets: SwiftUI.EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func padding(_ insets: SwiftUI.EdgeInsets) -> some SwiftUI.View {
        return modifier(_PaddingLayout(insets: insets))
    }
  
  @inlinable public func padding(_ edges: SwiftUI.Edge.Set = .all, _ length: CoreGraphics.CGFloat? = nil) -> some SwiftUI.View {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  
  @inlinable public func padding(_ length: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return padding(.all, length)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _tightPadding() -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func scenePadding(_ edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum TextAlignment : Swift.Hashable, Swift.CaseIterable {
  case leading
  case center
  case trailing
  public static func == (a: SwiftUI.TextAlignment, b: SwiftUI.TextAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.TextAlignment]
  public static var allCases: [SwiftUI.TextAlignment] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum _VAlignment {
  case top
  case center
  case bottom
  public static func == (a: SwiftUI._VAlignment, b: SwiftUI._VAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AlignmentLayout {
  public var horizontal: SwiftUI.TextAlignment?
  public var vertical: SwiftUI._VAlignment?
  @inlinable public init(horizontal: SwiftUI.TextAlignment? = nil, vertical: SwiftUI._VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol MenuStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.MenuStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func menuStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.MenuStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OffsetEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var offset: CoreGraphics.CGSize
  @inlinable public init(offset: CoreGraphics.CGSize) {
        self.offset = offset
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    get
    set
  }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OffsetEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._OffsetEffect, b: SwiftUI._OffsetEffect) -> Swift.Bool
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func offset(_ offset: CoreGraphics.CGSize) -> some SwiftUI.View {
        return modifier(_OffsetEffect(offset: offset))
    }
  
  @inlinable public func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return offset(CGSize(width: x, height: y))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static func offset(_ offset: CoreGraphics.CGSize) -> SwiftUI.AnyTransition
  public static func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
public struct PreferredColorSchemeKey : SwiftUI.PreferenceKey {
  public typealias Value = SwiftUI.ColorScheme?
  public static func reduce(value: inout SwiftUI.PreferredColorSchemeKey.Value, nextValue: () -> SwiftUI.PreferredColorSchemeKey.Value)
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func preferredColorScheme(_ colorScheme: SwiftUI.ColorScheme?) -> some SwiftUI.View {
        return preference(key: PreferredColorSchemeKey.self,
            value: colorScheme)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PositionLayout {
  public var position: CoreGraphics.CGPoint
  @inlinable public init(position: CoreGraphics.CGPoint) {
        self.position = position
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func position(_ position: CoreGraphics.CGPoint) -> some SwiftUI.View {
        return modifier(_PositionLayout(position: position))
    }
  
  @inlinable public func position(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return position(CGPoint(x: x, y: y))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ArchivedViewStates : Swift.RandomAccessCollection {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct EncodingStyle {
    public static let binaryPlist: SwiftUI._ArchivedViewStates.EncodingStyle
    public static let json: SwiftUI._ArchivedViewStates.EncodingStyle
  }
  public init()
  public init(data: Foundation.Data) throws
  public init(contentsOf url: Foundation.URL) throws
  public init(contentsOf file: Foundation.FileHandle) throws
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI._ArchivedView {
    get
  }
  public func state(at index: Swift.Int) throws -> SwiftUI._ArchivedView
  public var auxiliaryData: Foundation.Data? {
    get
  }
  public typealias Element = SwiftUI._ArchivedView
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ArchivedViewStates>
  public typealias SubSequence = Swift.Slice<SwiftUI._ArchivedViewStates>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ArchivedView : SwiftUI.View {
  public init()
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ArchivedView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Angle {
  public var radians: Swift.Double
  @inlinable public var degrees: Swift.Double {
    get { return radians * (180.0 / .pi) }
    set { radians = newValue * (.pi / 180.0) }
  }
  @inlinable public init() {
        self.init(radians: 0.0)
    }
  @inlinable public init(radians: Swift.Double) {
        self.radians = radians
    }
  @inlinable public init(degrees: Swift.Double) {
        self.init(radians: degrees * (.pi / 180.0))
    }
  @inlinable public static func radians(_ radians: Swift.Double) -> SwiftUI.Angle {
        return Angle(radians: radians)
    }
  @inlinable public static func degrees(_ degrees: Swift.Double) -> SwiftUI.Angle {
        return Angle(degrees: degrees)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Angle : Swift.Hashable, Swift.Comparable {
  @inlinable public static func < (lhs: SwiftUI.Angle, rhs: SwiftUI.Angle) -> Swift.Bool {
        return lhs.radians < rhs.radians
    }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.Angle, b: SwiftUI.Angle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Angle : SwiftUI.Animatable, SwiftUI._VectorMath {
  public var animatableData: Swift.Double {
    get
    set
  }
  @inlinable public static var zero: SwiftUI.Angle {
    get {
        return .init()
    }
  }
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ContentShapeModifier<ContentShape> : SwiftUI.ViewModifier where ContentShape : SwiftUI.Shape {
  public var shape: ContentShape
  public var eoFill: Swift.Bool
  @inlinable public init(shape: ContentShape, eoFill: Swift.Bool = false) {
        self.shape = shape
        self.eoFill = eoFill
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ContentShapeModifier<ContentShape>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func contentShape<S>(_ shape: S, eoFill: Swift.Bool = false) -> some SwiftUI.View where S : SwiftUI.Shape {
        return modifier(_ContentShapeModifier(shape: shape, eoFill: eoFill))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public func combined(with other: SwiftUI.AnyTransition) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Image : Swift.Equatable {
  internal var provider: SwiftUI.AnyImageProviderBox
  public static func == (lhs: SwiftUI.Image, rhs: SwiftUI.Image) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image : SwiftUI.View {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Image>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyImageProviderBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func swipeActions<T>(edge: SwiftUI.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUI.ViewBuilder content: () -> T) -> some SwiftUI.View where T : SwiftUI.View
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @inlinable public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_HoverRegionModifier(action))
    }
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct _HoverRegionModifier : SwiftUI.ViewModifier {
  public let callback: (Swift.Bool) -> Swift.Void
  @inlinable public init(_ callback: @escaping (Swift.Bool) -> Swift.Void) {
        self.callback = callback
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._HoverRegionModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._HoverRegionModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var undoManager: Foundation.UndoManager? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TransformEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var transform: CoreGraphics.CGAffineTransform
  @inlinable public init(transform: CoreGraphics.CGAffineTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public static func == (a: SwiftUI._TransformEffect, b: SwiftUI._TransformEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transformEffect(_ transform: CoreGraphics.CGAffineTransform) -> some SwiftUI.View {
        return modifier(_TransformEffect(transform: transform))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _CodableTransition : Swift.Codable {
  public init?(_ base: SwiftUI.AnyTransition)
  public var base: SwiftUI.AnyTransition {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.AutomaticControlGroupStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.AutomaticControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AutomaticControlGroupStyle : SwiftUI.ControlGroupStyle {
  @usableFromInline
  internal init()
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: SwiftUI.AutomaticControlGroupStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26AutomaticControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func disabled(_ disabled: Swift.Bool) -> some SwiftUI.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: \.isEnabled, transform: { $0 = $0 && !disabled }))
    }
  
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
extension SwiftUI.View {
  public func prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true, in namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View
  
  public func focusScope(_ namespace: SwiftUI.Namespace.ID) -> some SwiftUI.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func _prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
public struct _DefaultFocusModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DefaultFocusModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 11.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
public struct _FocusSystem {
  @available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
  public func resetToDefault()
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
public struct ResetFocusAction {
  public func callAsFunction(in namespace: SwiftUI.Namespace.ID)
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
extension SwiftUI.EnvironmentValues {
  public var resetFocus: SwiftUI.ResetFocusAction {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  public var _focusSystem: SwiftUI._FocusSystem {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func fileExporter<D>(isPresented: SwiftUI.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View where D : SwiftUI.FileDocument
  
  public func fileExporter<C>(isPresented: SwiftUI.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  public func fileExporter<D>(isPresented: SwiftUI.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View where D : SwiftUI.ReferenceFileDocument
  
  public func fileExporter<C>(isPresented: SwiftUI.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _RotationEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUI.Angle
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) {
        self.angle = angle
        self.anchor = anchor
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.UnitPoint.AnimatableData>
  public var animatableData: SwiftUI._RotationEffect.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._RotationEffect, b: SwiftUI._RotationEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func rotationEffect(_ angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return modifier(_RotationEffect(angle: angle, anchor: anchor))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityRepresentation<V>(@SwiftUI.ViewBuilder representation: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func accessibilityChildren<V>(@SwiftUI.ViewBuilder children: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ScaleEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var scale: CoreGraphics.CGSize
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) {
        self.scale = scale
        self.anchor = anchor
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGSize.AnimatableData, SwiftUI.UnitPoint.AnimatableData>
  public var animatableData: SwiftUI._ScaleEffect.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._ScaleEffect, b: SwiftUI._ScaleEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func scaleEffect(_ scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return modifier(_ScaleEffect(scale: scale, anchor: anchor))
    }
  
  @inlinable public func scaleEffect(_ s: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return scaleEffect(CGSize(width: s, height: s), anchor: anchor)
    }
  
  @inlinable public func scaleEffect(x: CoreGraphics.CGFloat = 1.0, y: CoreGraphics.CGFloat = 1.0, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View {
        return scaleEffect(CGSize(width: x, height: y), anchor: anchor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static var scale: SwiftUI.AnyTransition {
    get
  }
  public static func scale(scale: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.AnyTransition
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public class _PreviewHost : Combine.ObservableObject {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public var environment: SwiftUI.EnvironmentValues
  public var focusedValues: SwiftUI.FocusedValues
  public static func makeHost(providerType: Any.Type) -> SwiftUI._PreviewHost?
  public func invalidatePreviews()
  public func invalidateEverything()
  public var previews: [SwiftUI._Preview] {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func _trait<K>(_ key: K.Type, _ value: K.Value) -> some SwiftUI.View where K : SwiftUI._ViewTraitKey {
        return modifier(_TraitWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTraitKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TraitWritingModifier<Trait> where Trait : SwiftUI._ViewTraitKey {
  public let value: Trait.Value
  @inlinable public init(value: Trait.Value) {
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._TraitWritingModifier<Trait>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._TraitWritingModifier<Trait>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HiddenModifier : SwiftUI.ViewModifier {
  @inlinable public init() {}
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._HiddenModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func hidden() -> some SwiftUI.View {
        return modifier(_HiddenModifier())
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BlurEffect : Swift.Equatable {
  public var radius: CoreGraphics.CGFloat
  public var isOpaque: Swift.Bool
  @inlinable public init(radius: CoreGraphics.CGFloat, opaque: Swift.Bool) {
        self.radius = radius
        self.isOpaque = opaque
    }
  public var animatableData: CoreGraphics.CGFloat {
    get
    set
  }
  public static func == (a: SwiftUI._BlurEffect, b: SwiftUI._BlurEffect) -> Swift.Bool
  public typealias AnimatableData = CoreGraphics.CGFloat
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func blur(radius: CoreGraphics.CGFloat, opaque: Swift.Bool = false) -> some SwiftUI.View {
        return modifier(_BlurEffect(radius: radius, opaque: opaque))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Text {
  public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> SwiftUI.Text
  public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> SwiftUI.Text
  public func speechAdjustedPitch(_ value: Swift.Double) -> SwiftUI.Text
  public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> SwiftUI.Text
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> some SwiftUI.View
  
  public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> some SwiftUI.View
  
  public func speechAdjustedPitch(_ value: Swift.Double) -> some SwiftUI.View
  
  public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FrameLayout {
  internal let width: CoreGraphics.CGFloat?
  internal let height: CoreGraphics.CGFloat?
  internal let alignment: SwiftUI.Alignment
  @usableFromInline
  internal init(width: CoreGraphics.CGFloat?, height: CoreGraphics.CGFloat?, alignment: SwiftUI.Alignment)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func frame(width: CoreGraphics.CGFloat? = nil, height: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View {
        return modifier(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @inlinable public func frame() -> some SwiftUI.View {
        return frame(width: nil, height: nil, alignment: .center)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FlexFrameLayout {
  internal let minWidth: CoreGraphics.CGFloat?
  internal let idealWidth: CoreGraphics.CGFloat?
  internal let maxWidth: CoreGraphics.CGFloat?
  internal let minHeight: CoreGraphics.CGFloat?
  internal let idealHeight: CoreGraphics.CGFloat?
  internal let maxHeight: CoreGraphics.CGFloat?
  internal let alignment: SwiftUI.Alignment
  @usableFromInline
  internal init(minWidth: CoreGraphics.CGFloat? = nil, idealWidth: CoreGraphics.CGFloat? = nil, maxWidth: CoreGraphics.CGFloat? = nil, minHeight: CoreGraphics.CGFloat? = nil, idealHeight: CoreGraphics.CGFloat? = nil, maxHeight: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func frame(minWidth: CoreGraphics.CGFloat? = nil, idealWidth: CoreGraphics.CGFloat? = nil, maxWidth: CoreGraphics.CGFloat? = nil, minHeight: CoreGraphics.CGFloat? = nil, idealHeight: CoreGraphics.CGFloat? = nil, maxHeight: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment = .center) -> some SwiftUI.View {
        func areInNondecreasingOrder(
            _ min: CGFloat?, _ ideal: CGFloat?, _ max: CGFloat?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInNondecreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInNondecreasingOrder(minHeight, idealHeight, maxHeight)
        {
            os_log(
                .fault, log: Log.runtimeIssuesLog,
                "Contradictory frame constraints specified.")
        }

        return modifier(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Section<Parent, Content, Footer> {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section : SwiftUI.View where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  public typealias Body = Swift.Never
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder header: () -> Parent, @SwiftUI.ViewBuilder footer: () -> Footer) {
        self.init(header: header(), footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUI.EmptyView, Content : SwiftUI.View, Footer : SwiftUI.View {
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder footer: () -> Footer) {
        self.init(footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder header: () -> Parent) {
        self.init(header: header(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUI.EmptyView, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Section where Parent == SwiftUI.Text, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  public func collapsible(_ collapsible: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsCollapsibleTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  public init(header: Parent, footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUI.EmptyView, Content : SwiftUI.View, Footer : SwiftUI.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  public init(footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUI.View, Content : SwiftUI.View, Footer == SwiftUI.EmptyView {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  public init(header: Parent, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct EmptyWidgetConfiguration : SwiftUI.WidgetConfiguration {
  @inlinable public init() {}
  public static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<SwiftUI.EmptyWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BrightnessEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._BrightnessEffect, b: SwiftUI._BrightnessEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func brightness(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_BrightnessEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AlignmentWritingModifier : SwiftUI.ViewModifier {
  @usableFromInline
  internal let key: SwiftUI.AlignmentKey
  @usableFromInline
  internal let computeValue: (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat
  @inlinable internal init(key: SwiftUI.AlignmentKey, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) {
        self.key = key
        self.computeValue = computeValue
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AlignmentWritingModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func alignmentGuide(_ g: SwiftUI.HorizontalAlignment, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) -> some SwiftUI.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
  @inlinable public func alignmentGuide(_ g: SwiftUI.VerticalAlignment, computeValue: @escaping (SwiftUI.ViewDimensions) -> CoreGraphics.CGFloat) -> some SwiftUI.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
}
extension SwiftUI.View {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  public func disableAutocorrection(_ disable: Swift.Bool?) -> some SwiftUI.View
  
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  public var disableAutocorrection: Swift.Bool? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Color : Swift.Hashable, Swift.CustomStringConvertible {
  internal var provider: SwiftUI.AnyColorBox
  @available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
  public var cgColor: CoreGraphics.CGColor? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.Color, rhs: SwiftUI.Color) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Color {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color : SwiftUI.View {
  public typealias Body = Swift.Never
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyColorBox : SwiftUI.AnyShapeStyleBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text {
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : Foundation.ReferenceConvertible
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : ObjectiveC.NSObject
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Text {
  public init<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressView<Label, CurrentValueLabel> : SwiftUI.View where Label : SwiftUI.View, CurrentValueLabel : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ProgressViewV4bodyQrvp", 0) __<Label, CurrentValueLabel>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUI.EmptyView {
  public init() where Label == SwiftUI.EmptyView
  public init(@SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S) where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  public init<V>(value: V?, total: V = 1.0) where Label == SwiftUI.EmptyView, CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V?, total: V = 1.0, @SwiftUI.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V?, total: V = 1.0, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where V : Swift.BinaryFloatingPoint
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: V?, total: V = 1.0) where Label == SwiftUI.Text, CurrentValueLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  @_disfavoredOverload public init<S, V>(_ title: S, value: V?, total: V = 1.0) where Label == SwiftUI.Text, CurrentValueLabel == SwiftUI.EmptyView, S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  public init(_ progress: Foundation.Progress) where Label == SwiftUI.EmptyView, CurrentValueLabel == SwiftUI.EmptyView
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  public init(_ configuration: SwiftUI.ProgressViewStyleConfiguration) where Label == SwiftUI.ProgressViewStyleConfiguration.Label, CurrentValueLabel == SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableView : Swift.Decodable, Swift.Encodable, SwiftUI.View {
  func sizeThatFits(in proposedSize: SwiftUI._ProposedSize) -> CoreGraphics.CGSize
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivableView {
  public static func registerDecoder()
  public func sizeThatFits(in proposedSize: SwiftUI._ProposedSize) -> CoreGraphics.CGSize
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BenchmarkHost {
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUI.View
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type, in _: V.Type) -> SwiftUI.Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ColorInvertEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._ColorInvertEffect, b: SwiftUI._ColorInvertEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func colorInvert() -> some SwiftUI.View {
        return modifier(_ColorInvertEffect())
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMatrixEffect {
  public var matrix: SwiftUI._ColorMatrix
  @inlinable public init(matrix: SwiftUI._ColorMatrix) {
        self.matrix = matrix
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func _colorMatrix(_ matrix: SwiftUI._ColorMatrix) -> some SwiftUI.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _texturedSegmentedControlStyle() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ColorMultiplyEffect : SwiftUI.EnvironmentalModifier, Swift.Equatable {
  public var color: SwiftUI.Color
  @inlinable public init(color: SwiftUI.Color) {
        self.color = color
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ColorMultiplyEffect._Resolved
  public var _requiresMainThread: Swift.Bool {
    get
  }
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>
    public var animatableData: SwiftUI._ColorMultiplyEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public static func == (a: SwiftUI._ColorMultiplyEffect, b: SwiftUI._ColorMultiplyEffect) -> Swift.Bool
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ColorMultiplyEffect._Resolved
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func colorMultiply(_ color: SwiftUI.Color) -> some SwiftUI.View {
        return modifier(_ColorMultiplyEffect(color: color))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text {
  @_semantics("swiftui.init_with_localization") public init(_ key: SwiftUI.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct LocalizedStringKey : Swift.Equatable, Swift.ExpressibleByStringInterpolation {
  internal var key: Swift.String
  internal var hasFormatting: Swift.Bool = false
  private var arguments: [SwiftUI.LocalizedStringKey.FormatArgument]
  public init(_ value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_literal") public init(stringLiteral value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_interpolation") public init(stringInterpolation: SwiftUI.LocalizedStringKey.StringInterpolation)
  @usableFromInline
  internal struct FormatArgument : Swift.Equatable {
    @usableFromInline
    internal static func == (lhs: SwiftUI.LocalizedStringKey.FormatArgument, rhs: SwiftUI.LocalizedStringKey.FormatArgument) -> Swift.Bool
  }
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    @_semantics("swiftui.localized.interpolation_init") public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    @_semantics("swiftui.localized.appendLiteral") public mutating func appendLiteral(_ literal: Swift.String)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ string: Swift.String)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : ObjectiveC.NSObject
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
    @_transparent public mutating func appendInterpolation<T>(_ value: T) where T : SwiftUI._FormatSpecifiable {
            appendInterpolation(value, specifier: formatSpecifier(T.self))
        }
    @_semantics("swiftui.localized.appendInterpolation_param_specifier") public mutating func appendInterpolation<T>(_ value: T, specifier: Swift.String) where T : SwiftUI._FormatSpecifiable
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ text: SwiftUI.Text)
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ attributedString: Foundation.AttributedString)
    public typealias StringLiteralType = Swift.String
  }
  public static func == (a: SwiftUI.LocalizedStringKey, b: SwiftUI.LocalizedStringKey) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@_alwaysEmitIntoClient internal var int64Specifier: Swift.String {
  get { "%lld" }
}
@_alwaysEmitIntoClient internal var int32Specifier: Swift.String {
  get { "%d" }
}
@_alwaysEmitIntoClient internal var uint64Specifier: Swift.String {
  get { "%llu" }
}
@_alwaysEmitIntoClient internal var uint32Specifier: Swift.String {
  get { "%u" }
}
@_alwaysEmitIntoClient internal var floatSpecifier: Swift.String {
  get { "%f" }
}
@_alwaysEmitIntoClient internal var doubleSpecifier: Swift.String {
  get { "%lf" }
}
@_alwaysEmitIntoClient @_semantics("constant_evaluable") internal func formatSpecifier<T>(_ type: T.Type) -> Swift.String {
    switch type {
    case is Int.Type:
        fallthrough
    case is Int64.Type:
        return int64Specifier
    case is Int8.Type:
        fallthrough
    case is Int16.Type:
        fallthrough
    case is Int32.Type:
        return int32Specifier
    case is UInt.Type:
        fallthrough
    case is UInt64.Type:
        return uint64Specifier
    case is UInt8.Type:
        fallthrough
    case is UInt16.Type:
        fallthrough
    case is UInt32.Type:
        return uint32Specifier
    case is Float.Type:
        return floatSpecifier
    case is CGFloat.Type:
        fallthrough
    case is Double.Type:
        return doubleSpecifier
    default:
        return "%@"
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _FormatSpecifiable : Swift.Equatable {
  associatedtype _Arg : Swift.CVarArg
  var _arg: Self._Arg { get }
  var _specifier: Swift.String { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Int : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Int8 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Int16 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Int32 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Int64 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.UInt : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.UInt8 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.UInt16 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.UInt32 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.UInt64 : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Float : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Float {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Double : SwiftUI._FormatSpecifiable {
  public var _arg: Swift.Double {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGFloat : SwiftUI._FormatSpecifiable {
  public var _arg: CoreGraphics.CGFloat {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct HStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._HStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _HStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.HStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HStackLayout {
  public var alignment: SwiftUI.VerticalAlignment
  public var spacing: CoreGraphics.CGFloat?
  @inlinable public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyHStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func navigationTitle(_ title: SwiftUI.Text) -> some SwiftUI.View
  
  public func navigationTitle(_ titleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @_disfavoredOverload public func navigationTitle<S>(_ title: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func navigationTitle<V>(@SwiftUI.ViewBuilder _ title: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
@available(iOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func navigationBarTitleDisplayMode(_ displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
}
@available(macCatalyst 14.0, macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func navigationSubtitle(_ subtitle: SwiftUI.Text) -> some SwiftUI.View
  
  public func navigationSubtitle(_ subtitleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @_disfavoredOverload public func navigationSubtitle<S>(_ subtitle: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ConditionalContent<TrueContent, FalseContent> {
  @usableFromInline
  @frozen internal enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  @usableFromInline
  internal let storage: SwiftUI._ConditionalContent<TrueContent, FalseContent>.Storage
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ConditionalContent : SwiftUI.View where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public typealias Body = Swift.Never
  @usableFromInline
  internal init(storage: SwiftUI._ConditionalContent<TrueContent, FalseContent>.Storage)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the `menu` style instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PopUpButtonPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ContrastEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._ContrastEffect, b: SwiftUI._ContrastEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func contrast(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_ContrastEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.DefaultDatePickerStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.DefaultDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct IsLinkedGroupTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable public func _listLinkedGroup(_ isLinked: Swift.Bool) -> some SwiftUI.View {
        return _trait(IsLinkedGroupTraitKey.self, isLinked)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _IsLinkedGroupTraitKey {
  public static let _linkedGroup: SwiftUI._IsLinkedGroupTraitKey
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _GrayscaleEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._GrayscaleEffect, b: SwiftUI._GrayscaleEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func grayscale(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_GrayscaleEffect(amount: amount))
    }
  
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetGroupedListStyle {
  @_alwaysEmitIntoClient public static var insetGrouped: SwiftUI.InsetGroupedListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetGroupedListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct Material {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ShapeStyle where Self == SwiftUI.Material {
  @_alwaysEmitIntoClient public static var regularMaterial: SwiftUI.Material {
    get { .regular }
  }
  @_alwaysEmitIntoClient public static var thickMaterial: SwiftUI.Material {
    get { .thick }
  }
  @_alwaysEmitIntoClient public static var thinMaterial: SwiftUI.Material {
    get { .thin }
  }
  @_alwaysEmitIntoClient public static var ultraThinMaterial: SwiftUI.Material {
    get { .ultraThin }
  }
  @_alwaysEmitIntoClient public static var ultraThickMaterial: SwiftUI.Material {
    get { .ultraThick }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ShapeStyle where Self == SwiftUI.Material {
  @_alwaysEmitIntoClient public static var bar: SwiftUI.Material {
    get { .bar }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Material {
  public static let regular: SwiftUI.Material
  public static let thick: SwiftUI.Material
  public static let thin: SwiftUI.Material
  public static let ultraThin: SwiftUI.Material
  public static let ultraThick: SwiftUI.Material
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Material {
  public static let bar: SwiftUI.Material
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var backgroundMaterial: SwiftUI.Material? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Material : SwiftUI.ShapeStyle {
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI.Material>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Item, Content>(item: SwiftUI.Binding<Item?>, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination(isPresented: SwiftUI.Binding<Swift.Bool>, storyboardName: Swift.String) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _navigationDestination<Item>(item: SwiftUI.Binding<Item?>, storyboardName: Swift.String) -> some SwiftUI.View where Item : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HueRotationEffect : Swift.Equatable {
  public var angle: SwiftUI.Angle
  @inlinable public init(angle: SwiftUI.Angle) {
        self.angle = angle
    }
  public var animatableData: SwiftUI.Angle.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUI._HueRotationEffect, b: SwiftUI._HueRotationEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.Angle.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func hueRotation(_ angle: SwiftUI.Angle) -> some SwiftUI.View {
        return modifier(_HueRotationEffect(angle: angle))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Anchor<Value> {
  fileprivate let box: SwiftUI.AnchorValueBoxBase<Value>
  @frozen public struct Source {
    private var box: SwiftUI.AnchorBoxBase<Value>
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Anchor : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: SwiftUI.Anchor<Value>, rhs: SwiftUI.Anchor<Value>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Anchor : Swift.Hashable where Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnchorBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnchorValueBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Anchor.Source {
  public init<T>(_ array: [SwiftUI.Anchor<T>.Source]) where Value == [T]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Anchor.Source {
  public init<T>(_ anchor: SwiftUI.Anchor<T>.Source?) where Value == T?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _LuminanceToAlphaEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._LuminanceToAlphaEffect, b: SwiftUI._LuminanceToAlphaEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func luminanceToAlpha() -> some SwiftUI.View {
        return modifier(_LuminanceToAlphaEffect())
    }
  
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePicker<Label> : SwiftUI.View where Label : SwiftUI.View {
  public typealias Components = SwiftUI.DatePickerComponents
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10DatePickerV4bodyQrvp", 0) __<Label>
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePicker {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePicker where Label == SwiftUI.Text {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePickerComponents : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let hourAndMinute: SwiftUI.DatePickerComponents
  public static let date: SwiftUI.DatePickerComponents
  public typealias ArrayLiteralElement = SwiftUI.DatePickerComponents
  public typealias Element = SwiftUI.DatePickerComponents
  public typealias RawValue = Swift.UInt
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func safeAreaInset<V>(edge: SwiftUI.VerticalEdge, alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> V) -> some SwiftUI.View where V : SwiftUI.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(vertical: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  @inlinable public func safeAreaInset<V>(edge: SwiftUI.HorizontalEdge, alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> V) -> some SwiftUI.View where V : SwiftUI.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(horizontal: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _InsetViewModifier<Content> : SwiftUI.ViewModifier where Content : SwiftUI.View {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal var properties: (regions: SwiftUI.SafeAreaRegions, spacing: CoreGraphics.CGFloat?, edge: SwiftUI.Edge, alignmentKey: SwiftUI.AlignmentKey)
  @inlinable internal init(content: Content, edge: SwiftUI.Edge, regions: SwiftUI.SafeAreaRegions, spacing: CoreGraphics.CGFloat?, alignmentKey: SwiftUI.AlignmentKey) {
        self.content = content
        properties = (regions, spacing, edge, alignmentKey)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._InsetViewModifier<Content>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  @inlinable public func fill<S>(_ content: S, style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return _ShapeView(shape: self, style: content, fillStyle: style)
    }
  
  @inlinable public func fill(style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View {
        return _ShapeView(shape: self, style: .foreground, fillStyle: style)
    }
  
  @inlinable public func stroke<S>(_ content: S, style: SwiftUI.StrokeStyle) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return stroke(style: style).fill(content)
    }
  
  @inlinable public func stroke<S>(_ content: S, lineWidth: CoreGraphics.CGFloat = 1) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return stroke(content, style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  public var body: SwiftUI._ShapeView<Self, SwiftUI.ForegroundStyle> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Shape {
  public static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self : SwiftUI.View, Self.Body == SwiftUI._ShapeView<SwiftUI.Rectangle, Self> {
  public var body: SwiftUI._ShapeView<SwiftUI.Rectangle, Self> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ShapeView<Content, Style> : SwiftUI.View where Content : SwiftUI.Shape, Style : SwiftUI.ShapeStyle {
  public var shape: Content
  public var style: Style
  public var fillStyle: SwiftUI.FillStyle
  @inlinable public init(shape: Content, style: Style, fillStyle: SwiftUI.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
        self.fillStyle = fillStyle
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ShapeView<Content, Style>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SaturationEffect : Swift.Equatable {
  public var amount: Swift.Double
  @inlinable public init(amount: Swift.Double) {
        self.amount = amount
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func == (a: SwiftUI._SaturationEffect, b: SwiftUI._SaturationEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func saturation(_ amount: Swift.Double) -> some SwiftUI.View {
        return modifier(_SaturationEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Detachable {
  static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
  static var detachedProperties: SwiftUI._DetachableProperties { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachableProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let position: SwiftUI._DetachableProperties
  public static let dimensions: SwiftUI._DetachableProperties
  public static let environment: SwiftUI._DetachableProperties
  public static let transaction: SwiftUI._DetachableProperties
  public static let layout: SwiftUI._DetachableProperties
  public static let all: SwiftUI._DetachableProperties
  public typealias ArrayLiteralElement = SwiftUI._DetachableProperties
  public typealias Element = SwiftUI._DetachableProperties
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Detachable {
  public static var detachedProperties: SwiftUI._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _DetachedView<Detached, Content, Child> : SwiftUI.View where Detached : SwiftUI._Detachable, Content : SwiftUI.View, Child : SwiftUI.View {
  public var content: Content
  public var transform: (SwiftUI._DetachedPlaceholder<Detached>) -> Child
  @inlinable public init(content: Content, transform: @escaping (SwiftUI._DetachedPlaceholder<Detached>) -> Child) {
        self.content = content
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DetachedView<Detached, Content, Child>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func _detached<T, U>(with _: T.Type = T.self, _ transform: @escaping (SwiftUI._DetachedPlaceholder<T>) -> U) -> some SwiftUI.View where T : SwiftUI._Detachable, U : SwiftUI.View {
        return _DetachedView(content: self, transform: transform)
    }
  
  @inlinable public func _detached<T>(_ transform: @escaping (SwiftUI._DetachedPlaceholder<SwiftUI._EmptyDetached>) -> T) -> some SwiftUI.View where T : SwiftUI.View {
        return _DetachedView(content: self, transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedKey<Key> : SwiftUI._Detachable where Key : SwiftUI.PreferenceKey {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EmptyDetached : SwiftUI._Detachable {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUI.PreferenceKey
  public static var detachedProperties: SwiftUI._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedPlaceholder<Detached> : SwiftUI.View where Detached : SwiftUI._Detachable {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DetachedPlaceholder<Detached>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _OpacityEffect : Swift.Equatable {
  public var opacity: Swift.Double
  @inlinable public init(opacity: Swift.Double) {
        self.opacity = opacity
    }
  public var animatableData: Swift.Double {
    get
    set
  }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._OpacityEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._OpacityEffect, b: SwiftUI._OpacityEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func opacity(_ opacity: Swift.Double) -> some SwiftUI.View {
        return modifier(_OpacityEffect(opacity: opacity))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static let opacity: SwiftUI.AnyTransition
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Text {
  public struct LineStyle : Swift.Hashable {
    public init(pattern: SwiftUI.Text.LineStyle.Pattern = .solid, color: SwiftUI.Color? = nil)
    public struct Pattern {
      public static let solid: SwiftUI.Text.LineStyle.Pattern
      public static let dot: SwiftUI.Text.LineStyle.Pattern
      public static let dash: SwiftUI.Text.LineStyle.Pattern
      public static let dashDot: SwiftUI.Text.LineStyle.Pattern
      public static let dashDotDot: SwiftUI.Text.LineStyle.Pattern
    }
    public static let single: SwiftUI.Text.LineStyle
    public init?(nsUnderlineStyle: AppKit.NSUnderlineStyle)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.Text.LineStyle, b: SwiftUI.Text.LineStyle) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension AppKit.NSUnderlineStyle {
  public init(_ lineStyle: SwiftUI.Text.LineStyle)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SectionedFetchResults<SectionIdentifier, Result> : Swift.RandomAccessCollection where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  public struct Section : Swift.Identifiable, Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(position: Swift.Int) -> Result {
      get
    }
    public let id: SectionIdentifier
    public typealias Element = Result
    public typealias ID = SectionIdentifier
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
    public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
  }
  public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier> {
    get
    nonmutating set
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section {
    get
  }
  public typealias Element = SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
  public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct SectionedFetchRequest<SectionIdentifier, Result> where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor(unsafe) public var wrappedValue: SwiftUI.SectionedFetchResults<SectionIdentifier, Result> {
    get
  }
  public struct Configuration {
    public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>
    public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    public var nsPredicate: Foundation.NSPredicate?
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<SwiftUI.SectionedFetchRequest<SectionIdentifier, Result>.Configuration> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest : SwiftUI.DynamicProperty {
  @_Concurrency.MainActor(unsafe) public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  @_Concurrency.MainActor(unsafe) public func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest {
  @_Concurrency.MainActor(unsafe) public init(entity: CoreData.NSEntityDescription, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
  @_Concurrency.MainActor(unsafe) public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, animation: SwiftUI.Animation? = nil)
  @_Concurrency.MainActor(unsafe) public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, transaction: SwiftUI.Transaction)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor(unsafe) public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
  @_disfavoredOverload @_Concurrency.MainActor(unsafe) public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUI.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest.Configuration where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.StepperFieldDatePickerStyle {
  @_alwaysEmitIntoClient public static var stepperField: SwiftUI.StepperFieldDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.FieldDatePickerStyle {
  @_alwaysEmitIntoClient public static var field: SwiftUI.FieldDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.GraphicalDatePickerStyle {
  @_alwaysEmitIntoClient public static var graphical: SwiftUI.GraphicalDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StepperFieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.StepperFieldDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27StepperFieldDatePickerStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.FieldDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI20FieldDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GraphicalDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.GraphicalDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24GraphicalDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnimationModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public var animation: SwiftUI.Animation?
  public var value: Value
  @inlinable public init(animation: SwiftUI.Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnimationModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._AnimationModifier<Value>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _AnimationView<Content> : SwiftUI.View where Content : Swift.Equatable, Content : SwiftUI.View {
  public var content: Content
  public var animation: SwiftUI.Animation?
  @inlinable public init(content: Content, animation: SwiftUI.Animation?) {
        self.content = content
        self.animation = animation
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._AnimationView<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._AnimationView<Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AnimationModifier : Swift.Equatable {
  public static func == (a: SwiftUI._AnimationModifier<Value>, b: SwiftUI._AnimationModifier<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func animation<V>(_ animation: SwiftUI.Animation?, value: V) -> some SwiftUI.View where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
  
}
extension SwiftUI.View where Self : Swift.Equatable {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @inlinable public func animation(_ animation: SwiftUI.Animation?) -> some SwiftUI.View {
        return _AnimationView(content: self, animation: animation)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol App {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor(unsafe) var body: Self.Body { get }
  @_Concurrency.MainActor(unsafe) init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.App {
  @_Concurrency.MainActor(unsafe) public static func main()
}
@available(iOS 13.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS 13.4, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic) -> some SwiftUI.View
  
}
@available(iOS 13.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HoverEffect {
  public static let automatic: SwiftUI.HoverEffect
  public static let highlight: SwiftUI.HoverEffect
  public static let lift: SwiftUI.HoverEffect
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public typealias Touch = (location: CoreGraphics.CGPoint, globalLocation: CoreGraphics.CGPoint?, timestamp: Foundation.Date)
  public func sendTouchSequence(_ touches: [Self.Touch])
  public func measureTouchSequence(host: SwiftUI._BenchmarkHost, _ touches: [Self.Touch]) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func tabItem<V>(@SwiftUI.ViewBuilder _ label: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
extension Swift.RangeReplaceableCollection where Self : Swift.MutableCollection {
  public mutating func remove(atOffsets offsets: Foundation.IndexSet)
}
extension Swift.MutableCollection {
  public mutating func move(fromOffsets source: Foundation.IndexSet, toOffset destination: Swift.Int)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _BlendModeEffect : Swift.Equatable {
  public var blendMode: SwiftUI.BlendMode
  @inlinable public init(blendMode: SwiftUI.BlendMode) {
        self.blendMode = blendMode
    }
  public static func == (a: SwiftUI._BlendModeEffect, b: SwiftUI._BlendModeEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func blendMode(_ blendMode: SwiftUI.BlendMode) -> some SwiftUI.View {
        return modifier(_BlendModeEffect(blendMode: blendMode))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _EnvironmentKeyTransformModifier<Value> : SwiftUI.ViewModifier, SwiftUI._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>
  public var transform: (inout Value) -> Swift.Void
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Value>, transform: @escaping (inout Value) -> Swift.Void) {
        self.keyPath = keyPath
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUI._GraphValue<SwiftUI._EnvironmentKeyTransformModifier<Value>>, inputs: inout SwiftUI._GraphInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUI.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: keyPath, transform: transform))
    }
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.ExpandedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var expanded: SwiftUI.ExpandedWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ExpandedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.SegmentedPickerStyle {
  @_alwaysEmitIntoClient public static var segmented: SwiftUI.SegmentedPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct SegmentedPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __IconLayout {
  public init(columnCount: Swift.Int = 4, rowCount: Swift.Int? = nil, openFolderIndex: Swift.Int? = nil, openFolderScale: CoreGraphics.CGFloat = 1.0, iconScale: CoreGraphics.CGFloat = 1.0)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularGaugeStyle {
  @_alwaysEmitIntoClient public static var circular: SwiftUI.CircularGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CircularGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public init(tint: SwiftUI.Color)
  public init(tint: SwiftUI.Gradient)
  public func makeBody(configuration: SwiftUI.CircularGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18CircularGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ToggleStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ToggleStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ToggleStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.ToggleStyleConfiguration.Label
  @SwiftUI.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isOn: SwiftUI.Binding<Swift.Bool> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func toggleStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ToggleStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorRenderingMode {
  case nonLinear
  case linear
  case extendedLinear
  public static func == (a: SwiftUI.ColorRenderingMode, b: SwiftUI.ColorRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DrawingGroupEffect : SwiftUI.ViewModifier, Swift.Equatable {
  public var isOpaque: Swift.Bool {
    get
    set
  }
  public var colorMode: SwiftUI.ColorRenderingMode {
    get
    set
  }
  public init(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear)
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DrawingGroupEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._DrawingGroupEffect, b: SwiftUI._DrawingGroupEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func drawingGroup(opaque: Swift.Bool = false, colorMode: SwiftUI.ColorRenderingMode = .nonLinear) -> some SwiftUI.View
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.InsetTableStyle {
  @_alwaysEmitIntoClient public static var inset: SwiftUI.InsetTableStyle {
    get {
        .init(alternatesRowBackgrounds: true)
    }
  }
  @_alwaysEmitIntoClient public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetTableStyle : SwiftUI.TableStyle {
  public init()
  public init(alternatesRowBackgrounds: Swift.Bool)
  public func makeBody(configuration: SwiftUI.InsetTableStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15InsetTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableRowContent {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableRowBody.TableRowValue
  associatedtype TableRowBody : SwiftUI.TableRowContent
  var tableRowBody: Self.TableRowBody { get }
  static func _makeRows(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowInputs {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowOutputs {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public static func _makeRows(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never {
  public typealias TableRowValue = Swift.Never
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableRowContent {
  public typealias TableRowBody = Swift.Never
  public var tableRowBody: Swift.Never {
    get
  }
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableRowBuilder<Value> where Value : Swift.Identifiable {
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Value == Content.TableRowValue, Content : SwiftUI.TableRowContent {
        content
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _CompositingGroupEffect : Swift.Equatable {
  @inlinable public init() {}
  public static func == (a: SwiftUI._CompositingGroupEffect, b: SwiftUI._CompositingGroupEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func compositingGroup() -> some SwiftUI.View {
        return modifier(_CompositingGroupEffect())
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureGroup<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public init(isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DisclosureGroupV4bodyQrvp", 0) __<Label, Content>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroup where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_disfavoredOverload public init<S>(_ label: S, @SwiftUI.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ label: S, isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct IsExpandedTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Binding<Swift.Bool>? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Binding<Swift.Bool>?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct OffsetShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var offset: CoreGraphics.CGSize
  @inlinable public init(shape: Content, offset: CoreGraphics.CGSize) {
        self.shape = shape
        self.offset = offset
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: SwiftUI.OffsetShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.OffsetShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.OffsetShape : SwiftUI.InsettableShape where Content : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.OffsetShape<Content.InsetShape> {
        return shape.inset(by: amount).offset(offset)
    }
  public typealias InsetShape = SwiftUI.OffsetShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ScaledShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var scale: CoreGraphics.CGSize
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(shape: Content, scale: CoreGraphics.CGSize, anchor: SwiftUI.UnitPoint = .center) {
        self.shape = shape
        self.scale = scale
        self.anchor = anchor
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGSize.AnimatableData, SwiftUI.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUI.ScaledShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.ScaledShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RotatedShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var angle: SwiftUI.Angle
  public var anchor: SwiftUI.UnitPoint
  @inlinable public init(shape: Content, angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) {
        self.shape = shape
        self.angle = angle
        self.anchor = anchor
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<Content.AnimatableData, SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUI.RotatedShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.RotatedShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RotatedShape : SwiftUI.InsettableShape where Content : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.RotatedShape<Content.InsetShape> {
        return shape.inset(by: amount).rotation(angle, anchor: anchor)
    }
  public typealias InsetShape = SwiftUI.RotatedShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct TransformedShape<Content> : SwiftUI.Shape where Content : SwiftUI.Shape {
  public var shape: Content
  public var transform: CoreGraphics.CGAffineTransform
  @inlinable public init(shape: Content, transform: CoreGraphics.CGAffineTransform) {
        self.shape = shape
        self.transform = transform
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = Content.AnimatableData
  public var animatableData: SwiftUI.TransformedShape<Content>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.TransformedShape<Content>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  @inlinable public func offset(_ offset: CoreGraphics.CGSize) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: offset)
    }
  @inlinable public func offset(_ offset: CoreGraphics.CGPoint) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(
            shape: self, offset: CGSize(width: offset.x, height: offset.y))
    }
  @inlinable public func offset(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: .init(width: x, height: y))
    }
  @inlinable public func scale(x: CoreGraphics.CGFloat = 1, y: CoreGraphics.CGFloat = 1, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return ScaledShape(shape: self,
            scale: CGSize(width: x, height: y), anchor: anchor)
    }
  @inlinable public func scale(_ scale: CoreGraphics.CGFloat, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return self.scale(x: scale, y: scale, anchor: anchor)
    }
  @inlinable public func rotation(_ angle: SwiftUI.Angle, anchor: SwiftUI.UnitPoint = .center) -> SwiftUI.RotatedShape<Self> {
        return RotatedShape(shape: self, angle: angle, anchor: anchor)
    }
  @inlinable public func transform(_ transform: CoreGraphics.CGAffineTransform) -> SwiftUI.TransformedShape<Self> {
        return TransformedShape(shape: self, transform: transform)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ShadowEffect : SwiftUI.EnvironmentalModifier, Swift.Equatable {
  public var color: SwiftUI.Color
  public var radius: CoreGraphics.CGFloat
  public var offset: CoreGraphics.CGSize
  @inlinable public init(color: SwiftUI.Color, radius: CoreGraphics.CGFloat, offset: CoreGraphics.CGSize) {
        self.color = color
        self.radius = radius
        self.offset = offset
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ShadowEffect._Resolved
  public var _requiresMainThread: Swift.Bool {
    get
  }
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGSize.AnimatableData>>
    public var animatableData: SwiftUI._ShadowEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public static func == (a: SwiftUI._ShadowEffect, b: SwiftUI._ShadowEffect) -> Swift.Bool
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ShadowEffect._Resolved
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func shadow(color: SwiftUI.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0) -> some SwiftUI.View {
        return modifier(
            _ShadowEffect(
                color: color,
                radius: radius,
                offset: CGSize(width: x, height: y)
        ))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VectorMath : SwiftUI.Animatable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VectorMath {
  @inlinable public var magnitude: Swift.Double {
    get {
        return animatableData.magnitudeSquared.squareRoot()
    }
  }
  @inlinable public mutating func negate() {
        animatableData = .zero - animatableData
    }
  @inlinable prefix public static func - (operand: Self) -> Self {
        var result = operand
        result.negate()
        return result
    }
  @inlinable public static func += (lhs: inout Self, rhs: Self) {
        lhs.animatableData += rhs.animatableData
    }
  @inlinable public static func + (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result += rhs
        return result
    }
  @inlinable public static func -= (lhs: inout Self, rhs: Self) {
        lhs.animatableData -= rhs.animatableData
    }
  @inlinable public static func - (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result -= rhs
        return result
    }
  @inlinable public static func *= (lhs: inout Self, rhs: Swift.Double) {
        lhs.animatableData.scale(by: rhs)
    }
  @inlinable public static func * (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result *= rhs
        return result
    }
  @inlinable public static func /= (lhs: inout Self, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @inlinable public static func / (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result /= rhs
        return result
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SubscriptionView<PublisherType, Content> : SwiftUI.View where PublisherType : Combine.Publisher, Content : SwiftUI.View, PublisherType.Failure == Swift.Never {
  public var content: Content
  public var publisher: PublisherType
  public var action: (PublisherType.Output) -> Swift.Void
  @inlinable public init(content: Content, publisher: PublisherType, action: @escaping (PublisherType.Output) -> Swift.Void) {
        self.content = content
        self.publisher = publisher
        self.action = action
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func onReceive<P>(_ publisher: P, perform action: @escaping (P.Output) -> Swift.Void) -> some SwiftUI.View where P : Combine.Publisher, P.Failure == Swift.Never {
        SubscriptionView(content: self, publisher: publisher, action: action)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.DefaultTextFieldStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.DefaultTextFieldStyle._Label>) -> SwiftUI.DefaultTextFieldStyle._Body
  public struct _Body : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultTextFieldStyleV5_BodyV4bodyQrvp", 0) __
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public typealias __GridSpacing = SwiftUI.__GridLayout.Spacing
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __GridLayout {
  public struct Spacing {
    public var min: CoreGraphics.CGFloat
    public var max: CoreGraphics.CGFloat?
    public init(min: CoreGraphics.CGFloat = 0, max: CoreGraphics.CGFloat? = nil)
    public init(fixed: CoreGraphics.CGFloat)
  }
  public enum FillDirection {
    case horizontal, vertical
    public static func == (a: SwiftUI.__GridLayout.FillDirection, b: SwiftUI.__GridLayout.FillDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var itemSize: CoreGraphics.CGSize
  public var itemSpacing: SwiftUI.__GridLayout.Spacing
  public var lineSpacing: SwiftUI.__GridLayout.Spacing
  public var fillDirection: SwiftUI.__GridLayout.FillDirection
  public init(itemSize: CoreGraphics.CGSize, itemSpacing: CoreGraphics.CGFloat = 0, lineSpacing: CoreGraphics.CGFloat = 0, fillDirection: SwiftUI.__GridLayout.FillDirection = .horizontal)
  public init(itemSize: CoreGraphics.CGSize, itemSpacing: SwiftUI.__GridLayout.Spacing, lineSpacing: SwiftUI.__GridLayout.Spacing, fillDirection: SwiftUI.__GridLayout.FillDirection = .horizontal)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum Visibility : Swift.Hashable, Swift.CaseIterable {
  case automatic
  case visible
  case hidden
  public static func == (a: SwiftUI.Visibility, b: SwiftUI.Visibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.Visibility]
  public static var allCases: [SwiftUI.Visibility] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _SceneModifier {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder func body(content: Self.SceneContent) -> Self.Body
  typealias SceneContent = SwiftUI._SceneModifier_Content<Self>
  static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self.Body == Swift.Never {
  public func body(content: Self.SceneContent) -> Self.Body
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self : SwiftUI._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.EmptyModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI.EmptyModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @inlinable internal func modifier<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent : SwiftUI.Scene where Content : SwiftUI.Scene, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @_Concurrency.MainActor(unsafe) public var body: SwiftUI.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent : SwiftUI._SceneModifier where Content : SwiftUI._SceneModifier, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  @inlinable internal func concat<T>(_ modifier: T) -> SwiftUI.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneModifier_Content<Modifier> : SwiftUI.Scene where Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._SceneModifier_Content<Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUI._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct Namespace : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var id: Swift.Int
  @inlinable public init() { id = 0 }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public var wrappedValue: SwiftUI.Namespace.ID {
    get
  }
  @frozen public struct ID : Swift.Hashable {
    fileprivate var id: Swift.Int
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.Namespace.ID, b: SwiftUI.Namespace.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableContentProvider {
  associatedtype ScrollableContent : SwiftUI.View
  var scrollableContent: Self.ScrollableContent { get }
  associatedtype Root : SwiftUI.View
  func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> Self.Root
  func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollViewGestureProvider {
  func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewGestureProvider {
  public func defaultScrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func defaultGestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
  public func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollLayout : Swift.Equatable {
  public var contentOffset: CoreGraphics.CGPoint
  public var size: CoreGraphics.CGSize
  public var visibleRect: CoreGraphics.CGRect
  public init(contentOffset: CoreGraphics.CGPoint, size: CoreGraphics.CGSize, visibleRect: CoreGraphics.CGRect)
  public static func == (a: SwiftUI._ScrollLayout, b: SwiftUI._ScrollLayout) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewConfig {
  public static let decelerationRateNormal: Swift.Double
  public static let decelerationRateFast: Swift.Double
  public enum ContentOffset {
    case initially(CoreGraphics.CGPoint)
    case binding(SwiftUI.Binding<CoreGraphics.CGPoint>)
  }
  public var contentOffset: SwiftUI._ScrollViewConfig.ContentOffset
  public var contentInsets: SwiftUI.EdgeInsets
  public var decelerationRate: Swift.Double
  public var alwaysBounceVertical: Swift.Bool
  public var alwaysBounceHorizontal: Swift.Bool
  public var gestureProvider: SwiftUI._ScrollViewGestureProvider
  public var stopDraggingImmediately: Swift.Bool
  public var isScrollEnabled: Swift.Bool
  public var showsHorizontalIndicator: Swift.Bool
  public var showsVerticalIndicator: Swift.Bool
  public var indicatorInsets: SwiftUI.EdgeInsets
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollView<Provider> : SwiftUI.View where Provider : SwiftUI._ScrollableContentProvider {
  public var contentProvider: Provider
  public var config: SwiftUI._ScrollViewConfig
  public init(contentProvider: Provider, config: SwiftUI._ScrollViewConfig = _ScrollViewConfig())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public struct Main : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_ScrollViewV4bodyQrvp", 0) __<Provider>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func _scrollable(stretchChildrenToMaxHeight: Swift.Bool = false, horizontal: SwiftUI.TextAlignment? = .center, vertical: SwiftUI._VAlignment? = .center) -> SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Self>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AligningContentProvider<Content> : SwiftUI._ScrollableContentProvider where Content : SwiftUI.View {
  public var content: Content
  public var horizontal: SwiftUI.TextAlignment?
  public var vertical: SwiftUI._VAlignment?
  public init(content: Content, horizontal: SwiftUI.TextAlignment? = nil, vertical: SwiftUI._VAlignment? = nil)
  public var scrollableContent: SwiftUI.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout> {
    get
  }
  public struct AligningContentProviderLayout {
    public typealias AnimatableData = SwiftUI.EmptyAnimatableData
    public typealias Body = Swift.Never
  }
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._AligningContentProvider<Content>>
  public typealias ScrollableContent = SwiftUI.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingViewConfig : Swift.Equatable {
  public enum Direction {
    case vertical
    case horizontal
    public static func == (a: SwiftUI._PagingViewConfig.Direction, b: SwiftUI._PagingViewConfig.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var direction: SwiftUI._PagingViewConfig.Direction
  public var size: CoreGraphics.CGFloat?
  public var margin: CoreGraphics.CGFloat
  public var spacing: CoreGraphics.CGFloat
  public var constrainedDeceleration: Swift.Bool
  public init(direction: SwiftUI._PagingViewConfig.Direction = .horizontal, size: CoreGraphics.CGFloat? = nil, margin: CoreGraphics.CGFloat = 0, spacing: CoreGraphics.CGFloat = 0, constrainedDeceleration: Swift.Bool = true)
  public static func == (a: SwiftUI._PagingViewConfig, b: SwiftUI._PagingViewConfig) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingView<Views> : SwiftUI.View where Views : Swift.RandomAccessCollection, Views.Element : SwiftUI.View, Views.Index : Swift.Hashable {
  public var views: Views
  public var page: SwiftUI.Binding<Views.Index>?
  public var config: SwiftUI._PagingViewConfig
  public var scrollViewConfig: SwiftUI._ScrollViewConfig
  public init(config: SwiftUI._PagingViewConfig = _PagingViewConfig(), page: SwiftUI.Binding<Views.Index>? = nil, views: Views)
  public init(direction: SwiftUI._PagingViewConfig.Direction, page: SwiftUI.Binding<Views.Index>? = nil, views: Views)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_PagingViewV4bodyQrvp", 0) __<Views>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.MenuPickerStyle {
  @_alwaysEmitIntoClient public static var menu: SwiftUI.MenuPickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 15.0, macOS 12.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  public func badge(_ count: Swift.Int) -> some SwiftUI.View
  
  public func badge(_ label: SwiftUI.Text?) -> some SwiftUI.View
  
  public func badge(_ key: SwiftUI.LocalizedStringKey?) -> some SwiftUI.View
  
  @_disfavoredOverload public func badge<S>(_ label: S?) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Settings<Content> : SwiftUI.Scene where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8SettingsV4bodyQrvp", 0) __<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func tag<V>(_ tag: V) -> some SwiftUI.View where V : Swift.Hashable {
        return _trait(TagValueTraitKey<V>.self, .tagged(tag))
    }
  
  @inlinable public func _untagged() -> some SwiftUI.View {
        return _trait(IsAuxiliaryContentTraitKey.self, true)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TagValueTraitKey<V> : SwiftUI._ViewTraitKey where V : Swift.Hashable {
  @usableFromInline
  @frozen internal enum Value {
    case untagged
    case tagged(V)
  }
  @inlinable internal static var defaultValue: SwiftUI.TagValueTraitKey<V>.Value {
    get { .untagged }
  }
}
@usableFromInline
internal struct IsAuxiliaryContentTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public enum TemplateRenderingMode {
    case template
    case original
    public static func == (a: SwiftUI.Image.TemplateRenderingMode, b: SwiftUI.Image.TemplateRenderingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 11.0, *)
  public enum Scale {
    case small
    case medium
    case large
    public static func == (a: SwiftUI.Image.Scale, b: SwiftUI.Image.Scale) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum UserInterfaceSizeClass {
  case compact
  case regular
  public static func == (a: SwiftUI.UserInterfaceSizeClass, b: SwiftUI.UserInterfaceSizeClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macCatalyst 13.0, macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ControlActiveState : Swift.Equatable, Swift.CaseIterable {
  case key
  case active
  case inactive
  public static func == (a: SwiftUI.ControlActiveState, b: SwiftUI.ControlActiveState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ControlActiveState]
  public static var allCases: [SwiftUI.ControlActiveState] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "WatchDisplayVariant")
public enum _DeviceVariant : Swift.Equatable {
  case compact
  case regular
  case h394
  case h448
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI._DeviceVariant, b: SwiftUI._DeviceVariant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum LegibilityWeight : Swift.Hashable {
  case regular
  case bold
  public static func == (a: SwiftUI.LegibilityWeight, b: SwiftUI.LegibilityWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @available(macOS 11.0, *)
  @inlinable public func imageScale(_ scale: SwiftUI.Image.Scale) -> some SwiftUI.View {
        return environment(\.imageScale, scale)
    }
  
  @inlinable public func font(_ font: SwiftUI.Font?) -> some SwiftUI.View {
        return environment(\.font, font)
    }
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospacedDigit() -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var font: SwiftUI.Font? {
    get
    set
  }
  public var displayScale: CoreGraphics.CGFloat {
    get
    set
  }
  @available(macOS 11.0, *)
  public var imageScale: SwiftUI.Image.Scale {
    get
    set
  }
  public var pixelLength: CoreGraphics.CGFloat {
    get
  }
  public var legibilityWeight: SwiftUI.LegibilityWeight? {
    get
    set
  }
  public var locale: Foundation.Locale {
    get
    set
  }
  public var calendar: Foundation.Calendar {
    get
    set
  }
  public var timeZone: Foundation.TimeZone {
    get
    set
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var horizontalSizeClass: SwiftUI.UserInterfaceSizeClass? {
    get
    set
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var verticalSizeClass: SwiftUI.UserInterfaceSizeClass? {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var controlActiveState: SwiftUI.ControlActiveState {
    get
    set
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use `backgroundMaterial` instead")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var _useVibrantStyling: Swift.Bool {
    get
    set
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated: 8.0, renamed: "watchDisplayVariant")
extension SwiftUI.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var _deviceVariant: SwiftUI._DeviceVariant {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicProperty {
  static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _propertyBehaviors: Swift.UInt32 { get }
  mutating func update()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public mutating func update()
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct Gauge<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels> : SwiftUI.View where Label : SwiftUI.View, CurrentValueLabel : SwiftUI.View, BoundsLabel : SwiftUI.View, MarkedValueLabels : SwiftUI.View {
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUI.EmptyView, BoundsLabel == SwiftUI.EmptyView, MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where BoundsLabel == SwiftUI.EmptyView, MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> BoundsLabel) where MarkedValueLabels == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where BoundsLabel == SwiftUI.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUI.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> BoundsLabel, @SwiftUI.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where V : Swift.BinaryFloatingPoint
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5GaugeV4bodyQrvp", 0) __<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityActionKind : Swift.Equatable {
  public static let `default`: SwiftUI.AccessibilityActionKind
  public static let escape: SwiftUI.AccessibilityActionKind
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public static let magicTap: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let delete: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let showMenu: SwiftUI.AccessibilityActionKind
  public init(named name: SwiftUI.Text)
  public static func == (a: SwiftUI.AccessibilityActionKind, b: SwiftUI.AccessibilityActionKind) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityAction(named name: SwiftUI.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityAction(named name: SwiftUI.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityAction<Label>(action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label) -> some SwiftUI.View where Label : SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityAction(named nameKey: SwiftUI.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(named nameKey: SwiftUI.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func _onBindingChange<Value>(_ binding: SwiftUI.Binding<Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUI.View where Value : Swift.Equatable {
        return modifier(_BindingActionModifier(
            binding: binding, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BindingActionModifier<Value> : SwiftUI.ViewModifier where Value : Swift.Equatable {
  public var binding: SwiftUI.Binding<Value>
  public var action: (Value) -> Swift.Void
  @inlinable public init(binding: SwiftUI.Binding<Value>, action: @escaping (Value) -> Swift.Void) {
        (self.binding, self.action) = (binding, action)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BindingActionModifier<Value>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._BindingActionModifier<Value>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUI.IndexViewStyle where Self == SwiftUI.PageIndexViewStyle {
  @_alwaysEmitIntoClient public static var page: SwiftUI.PageIndexViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func page(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode) -> SwiftUI.PageIndexViewStyle {
        .init(backgroundDisplayMode: backgroundDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct PageIndexViewStyle : SwiftUI.IndexViewStyle {
  public struct BackgroundDisplayMode {
    public static let automatic: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let interactive: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let always: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let never: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
  }
  public init(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode = .automatic)
  public func _makeBody(configuration: SwiftUI.PageIndexViewStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI18PageIndexViewStyleV9_makeBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __DesignTimeSelectionIdentifier : Swift.Hashable {
  public let identifier: Swift.String
  public init(_ identifier: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.__DesignTimeSelectionIdentifier, b: SwiftUI.__DesignTimeSelectionIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PopoverAttachmentAnchor {
  case rect(SwiftUI.Anchor<CoreGraphics.CGRect>.Source)
  case point(SwiftUI.UnitPoint)
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func popover<Item, Content>(item: SwiftUI.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUI.Edge = .top, @SwiftUI.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.View where Item : Swift.Identifiable, Content : SwiftUI.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func popover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUI.Edge = .top, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct ListRowPlatterColorTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Color? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Color?
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "listItemTint(_:)")
  @available(tvOS, unavailable)
  @inlinable public func listRowPlatterColor(_ color: SwiftUI.Color?) -> some SwiftUI.View {
        _trait(ListRowPlatterColorTraitKey.self, color)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TrimmedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var startFraction: CoreGraphics.CGFloat
  public var endFraction: CoreGraphics.CGFloat
  @inlinable public init(shape: S, startFraction: CoreGraphics.CGFloat = 0, endFraction: CoreGraphics.CGFloat = 1) {
        self.shape = shape
        self.startFraction = startFraction
        self.endFraction = endFraction
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>
  public var animatableData: SwiftUI._TrimmedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._TrimmedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  @inlinable public func trim(from startFraction: CoreGraphics.CGFloat = 0, to endFraction: CoreGraphics.CGFloat = 1) -> some SwiftUI.Shape {
        return _TrimmedShape(shape: self, startFraction: startFraction,
            endFraction: endFraction)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct ColorMatrix : Swift.Equatable {
  public var r1: Swift.Float = 1, r2: Swift.Float = 0, r3: Swift.Float = 0, r4: Swift.Float = 0, r5: Swift.Float = 0
  public var g1: Swift.Float = 0, g2: Swift.Float = 1, g3: Swift.Float = 0, g4: Swift.Float = 0, g5: Swift.Float = 0
  public var b1: Swift.Float = 0, b2: Swift.Float = 0, b3: Swift.Float = 1, b4: Swift.Float = 0, b5: Swift.Float = 0
  public var a1: Swift.Float = 0, a2: Swift.Float = 0, a3: Swift.Float = 0, a4: Swift.Float = 1, a5: Swift.Float = 0
  @inlinable public init() {}
  public static func == (a: SwiftUI.ColorMatrix, b: SwiftUI.ColorMatrix) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMatrix : Swift.Equatable, Swift.Codable {
  public var m11: Swift.Float = 1, m12: Swift.Float = 0, m13: Swift.Float = 0, m14: Swift.Float = 0, m15: Swift.Float = 0
  public var m21: Swift.Float = 0, m22: Swift.Float = 1, m23: Swift.Float = 0, m24: Swift.Float = 0, m25: Swift.Float = 0
  public var m31: Swift.Float = 0, m32: Swift.Float = 0, m33: Swift.Float = 1, m34: Swift.Float = 0, m35: Swift.Float = 0
  public var m41: Swift.Float = 0, m42: Swift.Float = 0, m43: Swift.Float = 0, m44: Swift.Float = 1, m45: Swift.Float = 0
  @inlinable public init() {}
  public init(color: SwiftUI.Color, in environment: SwiftUI.EnvironmentValues)
  public static func * (a: SwiftUI._ColorMatrix, b: SwiftUI._ColorMatrix) -> SwiftUI._ColorMatrix
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: SwiftUI._ColorMatrix, b: SwiftUI._ColorMatrix) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func _ignoresAutomaticPadding(_ ignoresPadding: Swift.Bool) -> some SwiftUI.View
  
  public func _automaticPadding(_ edgeInsets: SwiftUI.EdgeInsets? = nil) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func confirmationDialog<A>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where A : SwiftUI.View
  
  @_disfavoredOverload public func confirmationDialog<S, A>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View
  
  public func confirmationDialog<A>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where A : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func confirmationDialog<A, M>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
  @_disfavoredOverload public func confirmationDialog<S, A, M>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View, M : SwiftUI.View
  
  public func confirmationDialog<A, M>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func confirmationDialog<A, T>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where A : SwiftUI.View
  
  @_disfavoredOverload public func confirmationDialog<S, A, T>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View
  
  public func confirmationDialog<A, T>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where A : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func confirmationDialog<A, M, T>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
  @_disfavoredOverload public func confirmationDialog<S, A, M, T>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View, M : SwiftUI.View
  
  public func confirmationDialog<A, M, T>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var isSearching: Swift.Bool {
    get
  }
  public var dismissSearch: SwiftUI.DismissSearchAction {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct DismissSearchAction {
  public func callAsFunction()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewOutputs {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var defaultWheelPickerItemHeight: CoreGraphics.CGFloat {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable public func defaultWheelPickerItemHeight(_ height: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.defaultWheelPickerItemHeight, height)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ForEach<Data, ID, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
  public var data: Data
  public var content: (Data.Element) -> Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach : SwiftUI.View where Content : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach where ID == Data.Element.ID, Content : SwiftUI.View, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUI.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach where Content : SwiftUI.View {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach where Content : SwiftUI.View {
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUI.Binding<C>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, ID == C.Element.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Element : Swift.Identifiable, C.Index : Swift.Hashable {
        self.init(data, id: \.id, content: content)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUI.Binding<C>, id: Swift.KeyPath<C.Element, ID>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Index : Swift.Hashable {
        let elementIDs = data.wrappedValue.indices.lazy.map { index in
            (index, data.wrappedValue[index][keyPath: id])
        }
        self.init(elementIDs, id: \.1) { (index, _) in
            let elementBinding = Binding {
                data.wrappedValue[index]
            } set: {
                data.wrappedValue[index] = $0
            }
            content(elementBinding)
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.View {
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.ViewBuilder content: @escaping (Swift.Int) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ItemProviderTraitKey : SwiftUI._ViewTraitKey {
  @usableFromInline
  internal typealias Value = Swift.Optional<() -> Foundation.NSItemProvider?>
  @inlinable internal static var defaultValue: SwiftUI.ItemProviderTraitKey.Value {
    get { nil }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func itemProvider(_ action: Swift.Optional<() -> Foundation.NSItemProvider?>) -> some SwiftUI.View {
        return _trait(ItemProviderTraitKey.self, action)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static func modifier<E>(active: E, identity: E) -> SwiftUI.AnyTransition where E : SwiftUI.ViewModifier
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct StateObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @usableFromInline
  @frozen internal enum Storage {
    case initially(() -> ObjectType)
    case object(SwiftUI.ObservedObject<ObjectType>)
  }
  @usableFromInline
  internal var storage: SwiftUI.StateObject<ObjectType>.Storage
  @inlinable public init(wrappedValue thunk: @autoclosure @escaping () -> ObjectType) {
        storage = .initially(thunk)
    }
  @_Concurrency.MainActor(unsafe) public var wrappedValue: ObjectType {
    get
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.StateObject {
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EventModifiers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let capsLock: SwiftUI.EventModifiers
  public static let shift: SwiftUI.EventModifiers
  public static let control: SwiftUI.EventModifiers
  public static let option: SwiftUI.EventModifiers
  public static let command: SwiftUI.EventModifiers
  public static let numericPad: SwiftUI.EventModifiers
  @available(iOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(macOS, deprecated: 12.0, message: "Function modifier is reserved for system applications")
  @available(tvOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(watchOS, deprecated: 8.0, message: "Function modifier is reserved for system applications")
  public static let function: SwiftUI.EventModifiers
  public static let all: SwiftUI.EventModifiers
  public typealias ArrayLiteralElement = SwiftUI.EventModifiers
  public typealias Element = SwiftUI.EventModifiers
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Path : Swift.Equatable, Swift.LosslessStringConvertible {
  @_hasMissingDesignatedInitializers @usableFromInline
  final internal class PathBox : Swift.Equatable {
    @objc deinit
    @usableFromInline
    internal static func == (lhs: SwiftUI.Path.PathBox, rhs: SwiftUI.Path.PathBox) -> Swift.Bool
  }
  @usableFromInline
  @frozen internal enum Storage : Swift.Equatable {
    case empty
    case rect(CoreGraphics.CGRect)
    case ellipse(CoreGraphics.CGRect)
    indirect case roundedRect(SwiftUI.FixedRoundedRect)
    indirect case stroked(SwiftUI.StrokedPath)
    indirect case trimmed(SwiftUI.TrimmedPath)
    case path(SwiftUI.Path.PathBox)
    @usableFromInline
    internal static func == (a: SwiftUI.Path.Storage, b: SwiftUI.Path.Storage) -> Swift.Bool
  }
  internal var storage: SwiftUI.Path.Storage
  public init()
  public init(_ path: CoreGraphics.CGPath)
  public init(_ path: CoreGraphics.CGMutablePath)
  public init(_ rect: CoreGraphics.CGRect)
  public init(roundedRect rect: CoreGraphics.CGRect, cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular)
  public init(roundedRect rect: CoreGraphics.CGRect, cornerRadius: CoreGraphics.CGFloat, style: SwiftUI.RoundedCornerStyle = .circular)
  public init(ellipseIn rect: CoreGraphics.CGRect)
  public init(_ callback: (inout SwiftUI.Path) -> ())
  public init?(_ string: Swift.String)
  public var description: Swift.String {
    get
  }
  public var cgPath: CoreGraphics.CGPath {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var boundingRect: CoreGraphics.CGRect {
    get
  }
  public func contains(_ p: CoreGraphics.CGPoint, eoFill: Swift.Bool = false) -> Swift.Bool
  @frozen public enum Element : Swift.Equatable {
    case move(to: CoreGraphics.CGPoint)
    case line(to: CoreGraphics.CGPoint)
    case quadCurve(to: CoreGraphics.CGPoint, control: CoreGraphics.CGPoint)
    case curve(to: CoreGraphics.CGPoint, control1: CoreGraphics.CGPoint, control2: CoreGraphics.CGPoint)
    case closeSubpath
    public static func == (a: SwiftUI.Path.Element, b: SwiftUI.Path.Element) -> Swift.Bool
  }
  public func forEach(_ body: (SwiftUI.Path.Element) -> Swift.Void)
  public func strokedPath(_ style: SwiftUI.StrokeStyle) -> SwiftUI.Path
  public func trimmedPath(from: CoreGraphics.CGFloat, to: CoreGraphics.CGFloat) -> SwiftUI.Path
  public static func == (a: SwiftUI.Path, b: SwiftUI.Path) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Path : SwiftUI.Shape {
  public func path(in _: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Path, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct StrokedPath : Swift.Equatable {
  public init(path: SwiftUI.Path, style: SwiftUI.StrokeStyle)
  @usableFromInline
  internal static func == (lhs: SwiftUI.StrokedPath, rhs: SwiftUI.StrokedPath) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TrimmedPath : Swift.Equatable {
  @usableFromInline
  internal static func == (lhs: SwiftUI.TrimmedPath, rhs: SwiftUI.TrimmedPath) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Path {
  public mutating func move(to p: CoreGraphics.CGPoint)
  public mutating func addLine(to p: CoreGraphics.CGPoint)
  public mutating func addQuadCurve(to p: CoreGraphics.CGPoint, control cp: CoreGraphics.CGPoint)
  public mutating func addCurve(to p: CoreGraphics.CGPoint, control1 cp1: CoreGraphics.CGPoint, control2 cp2: CoreGraphics.CGPoint)
  public mutating func closeSubpath()
  public mutating func addRect(_ rect: CoreGraphics.CGRect, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addRoundedRect(in rect: CoreGraphics.CGRect, cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addEllipse(in rect: CoreGraphics.CGRect, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addRects(_ rects: [CoreGraphics.CGRect], transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addLines(_ lines: [CoreGraphics.CGPoint])
  public mutating func addRelativeArc(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, startAngle: SwiftUI.Angle, delta: SwiftUI.Angle, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addArc(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle, clockwise: Swift.Bool, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addArc(tangent1End p1: CoreGraphics.CGPoint, tangent2End p2: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat, transform: CoreGraphics.CGAffineTransform = .identity)
  public mutating func addPath(_ path: SwiftUI.Path, transform: CoreGraphics.CGAffineTransform = .identity)
  public var currentPoint: CoreGraphics.CGPoint? {
    get
  }
  public func applying(_ transform: CoreGraphics.CGAffineTransform) -> SwiftUI.Path
  public func offsetBy(dx: CoreGraphics.CGFloat, dy: CoreGraphics.CGFloat) -> SwiftUI.Path
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleWidget<T> : SwiftUI.Widget {
  @usableFromInline
  internal init()
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @usableFromInline
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11TupleWidgetV4bodyQrvp", 0) __<T>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleWidgetConfiguration<T> : SwiftUI.WidgetConfiguration {
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<SwiftUI.TupleWidgetConfiguration<T>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Gesture {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func modifiers(_ modifiers: SwiftUI.EventModifiers) -> SwiftUI._ModifiersGesture<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ModifiersGesture<Content> : SwiftUI.Gesture where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ModifiersGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum RoundedCornerStyle {
  case circular
  case continuous
  public static func == (a: SwiftUI.RoundedCornerStyle, b: SwiftUI.RoundedCornerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct FixedRoundedRect : Swift.Equatable {
  @usableFromInline
  internal static func == (a: SwiftUI.FixedRoundedRect, b: SwiftUI.FixedRoundedRect) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Label<Title, Icon> : SwiftUI.View where Title : SwiftUI.View, Icon : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5LabelV4bodyQrvp", 0) __<Title, Icon>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUI.Text, Icon == SwiftUI.Image {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, image name: Swift.String)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage name: Swift.String)
  @_disfavoredOverload public init<S>(_ title: S, image name: Swift.String) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ title: S, systemImage name: Swift.String) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUI.LabelStyleConfiguration.Title, Icon == SwiftUI.LabelStyleConfiguration.Icon {
  public init(_ configuration: SwiftUI.LabelStyleConfiguration)
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public protocol IndexViewStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _makeBody(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._IndexViewStyleConfiguration
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUI.View {
  public func indexViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.IndexViewStyle
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct _IndexViewStyleConfiguration {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol TabViewStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _TabViewValue<Style, SelectionValue> where Style : SwiftUI.TabViewStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func tabViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.TabViewStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct SafeAreaRegions : Swift.OptionSet {
  public let rawValue: Swift.UInt
  @inlinable public init(rawValue: Swift.UInt) { self.rawValue = rawValue }
  public static let container: SwiftUI.SafeAreaRegions
  public static let keyboard: SwiftUI.SafeAreaRegions
  public static let all: SwiftUI.SafeAreaRegions
  public typealias ArrayLiteralElement = SwiftUI.SafeAreaRegions
  public typealias Element = SwiftUI.SafeAreaRegions
  public typealias RawValue = Swift.UInt
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _safeAreaInsets(_ insets: SwiftUI.EdgeInsets) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Gradient : Swift.Equatable {
  @frozen public struct Stop : Swift.Equatable {
    public var color: SwiftUI.Color
    public var location: CoreGraphics.CGFloat
    public init(color: SwiftUI.Color, location: CoreGraphics.CGFloat)
    public static func == (a: SwiftUI.Gradient.Stop, b: SwiftUI.Gradient.Stop) -> Swift.Bool
  }
  public var stops: [SwiftUI.Gradient.Stop]
  public init(stops: [SwiftUI.Gradient.Stop])
  public init(colors: [SwiftUI.Color])
  public static func == (a: SwiftUI.Gradient, b: SwiftUI.Gradient) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum BlendMode {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case softLight
  case hardLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  case sourceAtop
  case destinationOver
  case destinationOut
  case plusDarker
  case plusLighter
  public static func == (a: SwiftUI.BlendMode, b: SwiftUI.BlendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __RadialLayout {
  public var radius: CoreGraphics.CGFloat
  public var size: CoreGraphics.CGSize
  public init(radius: CoreGraphics.CGFloat, size: CoreGraphics.CGSize)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.CardButtonStyle {
  @_alwaysEmitIntoClient public static var card: SwiftUI.CardButtonStyle {
    get { .init() }
  }
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct CardButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.CardButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15CardButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _EmptyScene : SwiftUI.Scene {
  @inlinable public init() {}
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._EmptyScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _VariadicView {
  public typealias Root = SwiftUI._VariadicView_Root
  public typealias ViewRoot = SwiftUI._VariadicView_ViewRoot
  public typealias Children = SwiftUI._VariadicView_Children
  public typealias UnaryViewRoot = SwiftUI._VariadicView_UnaryViewRoot
  public typealias MultiViewRoot = SwiftUI._VariadicView_MultiViewRoot
  @frozen public struct Tree<Root, Content> where Root : SwiftUI._VariadicView_Root {
    public var root: Root
    public var content: Content
    @inlinable internal init(root: Root, content: Content) {
            self.root = root
            self.content = content
        }
    @inlinable public init(_ root: Root, @SwiftUI.ViewBuilder content: () -> Content) {
            self.root = root
            self.content = content()
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_Root {
  static var _viewListOptions: Swift.Int { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_Root {
  public static var _viewListOptions: Swift.Int {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_ViewRoot : SwiftUI._VariadicView_Root {
  static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(children: SwiftUI._VariadicView.Children) -> Self.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_ViewRoot where Self.Body == Swift.Never {
  public func body(children: SwiftUI._VariadicView.Children) -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_UnaryViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_UnaryViewRoot {
  public static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_MultiViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_MultiViewRoot {
  public static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _VariadicView_Children {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_ViewRoot {
  public static func _makeView(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(root: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView.Tree : SwiftUI.View where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
  public typealias Body = Swift.Never
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Tree<Root, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Tree<Root, Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public enum Interpolation {
    case none
    case low
    case medium
    case high
    public static func == (a: SwiftUI.Image.Interpolation, b: SwiftUI.Image.Interpolation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public func interpolation(_ interpolation: SwiftUI.Image.Interpolation) -> SwiftUI.Image
  public func antialiased(_ isAntialiased: Swift.Bool) -> SwiftUI.Image
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func searchCompletion(_ completion: Swift.String) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct FillStyle : Swift.Equatable {
  public var isEOFilled: Swift.Bool
  public var isAntialiased: Swift.Bool
  @inlinable public init(eoFill: Swift.Bool = false, antialiased: Swift.Bool = true) {
        self.isEOFilled = eoFill
        self.isAntialiased = antialiased
    }
  public static func == (a: SwiftUI.FillStyle, b: SwiftUI.FillStyle) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct SceneStorage<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var _key: Swift.String
  @usableFromInline
  internal var _domain: Swift.String?
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUI.AnyLocation<Value>?
  @usableFromInline
  internal var _transformBox: SwiftUI.SceneStorageTransformBox
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage {
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.URL
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String) where Value == Swift.Optional<Swift.Bool>
  public init(_ key: Swift.String) where Value == Swift.Optional<Swift.Int>
  public init(_ key: Swift.String) where Value == Swift.Optional<Swift.Double>
  public init(_ key: Swift.String) where Value == Swift.Optional<Swift.String>
  public init(_ key: Swift.String) where Value == Swift.Optional<Foundation.URL>
  public init(_ key: Swift.String) where Value == Swift.Optional<Foundation.Data>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SceneStorage {
  public init<R>(_ key: Swift.String) where Value == Swift.Optional<R>, R : Swift.RawRepresentable, R.RawValue == Swift.String
  public init<R>(_ key: Swift.String) where Value == Swift.Optional<R>, R : Swift.RawRepresentable, R.RawValue == Swift.Int
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class SceneStorageTransformBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Spacer {
  public var minLength: CoreGraphics.CGFloat?
  @inlinable public init(minLength: CoreGraphics.CGFloat? = nil) {
        self.minLength = minLength
    }
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _TextBaselineRelativeSpacer {
  public var minLength: CoreGraphics.CGFloat?
  @inlinable public init(minLength: CoreGraphics.CGFloat? = nil) {
        self.minLength = minLength
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HSpacer {
  public var minWidth: CoreGraphics.CGFloat?
  @inlinable public init(minWidth: CoreGraphics.CGFloat? = nil) {
        self.minWidth = minWidth
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _VSpacer {
  public var minHeight: CoreGraphics.CGFloat?
  @inlinable public init(minHeight: CoreGraphics.CGFloat? = nil) {
        self.minHeight = minHeight
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct StrokeStyle : Swift.Equatable {
  public var lineWidth: CoreGraphics.CGFloat
  public var lineCap: CoreGraphics.CGLineCap
  public var lineJoin: CoreGraphics.CGLineJoin
  public var miterLimit: CoreGraphics.CGFloat
  public var dash: [CoreGraphics.CGFloat]
  public var dashPhase: CoreGraphics.CGFloat
  public init(lineWidth: CoreGraphics.CGFloat = 1, lineCap: CoreGraphics.CGLineCap = .butt, lineJoin: CoreGraphics.CGLineJoin = .miter, miterLimit: CoreGraphics.CGFloat = 10, dash: [CoreGraphics.CGFloat] = [CGFloat](), dashPhase: CoreGraphics.CGFloat = 0)
  public static func == (a: SwiftUI.StrokeStyle, b: SwiftUI.StrokeStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.StrokeStyle : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>
  public var animatableData: SwiftUI.StrokeStyle.AnimatableData {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum ScenePhase : Swift.Comparable {
  case background
  case inactive
  case active
  public static func == (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.EnvironmentValues {
  public var scenePhase: SwiftUI.ScenePhase {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @frozen public struct AccessibilityFocusState<Value> : SwiftUI.DynamicProperty where Value : Swift.Hashable {
  @propertyWrapper @frozen public struct Binding {
    private var _binding: SwiftUI.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
      get
    }
  }
  internal var technologies: SwiftUI.AccessibilityTechnologies? = nil
  internal var value: Value
  internal var location: SwiftUI.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
  public init() where Value == Swift.Bool
  public init(for technologies: SwiftUI.AccessibilityTechnologies) where Value == Swift.Bool
  public init<T>() where Value == Swift.Optional<T>, T : Swift.Hashable
  public init<T>(for technologies: SwiftUI.AccessibilityTechnologies) where Value == Swift.Optional<T>, T : Swift.Hashable
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityFocused<Value>(_ binding: SwiftUI.AccessibilityFocusState<Value>.Binding, equals value: Value) -> some SwiftUI.View where Value : Swift.Hashable
  
  public func accessibilityFocused(_ condition: SwiftUI.AccessibilityFocusState<Swift.Bool>.Binding) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {
  public enum RGBColorSpace {
    case sRGB
    case sRGBLinear
    case displayP3
    public static func == (a: SwiftUI.Color.RGBColorSpace, b: SwiftUI.Color.RGBColorSpace) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1)
  public init(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1)
  public init(hue: Swift.Double, saturation: Swift.Double, brightness: Swift.Double, opacity: Swift.Double = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ProposedSize {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ProposedSize : Swift.Hashable {
  public static func == (a: SwiftUI._ProposedSize, b: SwiftUI._ProposedSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SizedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var size: CoreGraphics.CGSize
  @inlinable public init(shape: S, size: CoreGraphics.CGSize) {
        self.shape = shape
        self.size = size
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: SwiftUI._SizedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._SizedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  @inlinable public func size(_ size: CoreGraphics.CGSize) -> some SwiftUI.Shape {
        return _SizedShape(shape: self, size: size)
    }
  
  @inlinable public func size(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> some SwiftUI.Shape {
        return size(.init(width: width, height: height))
    }
  
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<F>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<F.FormatInput?>, format: F, prompt: SwiftUI.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload public init<S, F>(_ title: S, value: SwiftUI.Binding<F.FormatInput?>, format: F, prompt: SwiftUI.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<F>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<F.FormatInput>, format: F, prompt: SwiftUI.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload public init<S, F>(_ title: S, value: SwiftUI.Binding<F.FormatInput>, format: F, prompt: SwiftUI.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<F>(value: SwiftUI.Binding<F.FormatInput?>, format: F, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<F>(value: SwiftUI.Binding<F.FormatInput>, format: F, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUI.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUI.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init<V>(value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder label: () -> Label)
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
}
extension SwiftUI.TextField where Label == SwiftUI.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient public init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient public init<S, V>(_ title: S, value: SwiftUI.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FixedSizeLayout {
  @inlinable public init(horizontal: Swift.Bool = true, vertical: Swift.Bool = true) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @usableFromInline
  internal var horizontal: Swift.Bool
  @usableFromInline
  internal var vertical: Swift.Bool
}
extension SwiftUI._FixedSizeLayout {
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func fixedSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUI.View {
        return modifier(
            _FixedSizeLayout(horizontal: horizontal, vertical: vertical))
    }
  
  @inlinable public func fixedSize() -> some SwiftUI.View {
        return fixedSize(horizontal: true, vertical: true)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Button<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ButtonV4bodyQrvp", 0) __<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, action: @escaping () -> Swift.Void)
  @_disfavoredOverload public init<S>(_ title: S, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.PrimitiveButtonStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public init(_ configuration: SwiftUI.PrimitiveButtonStyleConfiguration)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button {
  public init(role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void)
  @_disfavoredOverload public init<S>(_ title: S, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Group : SwiftUI.Scene where Content : SwiftUI.Scene {
  @inlinable public init(@SwiftUI.SceneBuilder content: () -> Content) {
        self.content = content()
    }
  public static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct _TupleScene<T> : SwiftUI.Scene {
  @usableFromInline
  internal var value: T
  @usableFromInline
  @_Concurrency.MainActor(unsafe) internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal static func _makeScene(scene: SwiftUI._GraphValue<SwiftUI._TupleScene<T>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBoxStyle where Self == SwiftUI.DefaultGroupBoxStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultGroupBoxStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultGroupBoxStyle : SwiftUI.GroupBoxStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultGroupBoxStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20DefaultGroupBoxStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func foregroundColor(_ color: SwiftUI.Color?) -> some SwiftUI.View {
        return environment(\.foregroundColor, color)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var foregroundColor: SwiftUI.Color? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "will be removed")
@frozen public struct _ForegroundColorModifier {
  public var color: SwiftUI.Color?
  @inlinable public init(color: SwiftUI.Color?) { self.color = color }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundColorModifier>, inputs: inout SwiftUI._ViewInputs)
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.LinkButtonStyle {
  @_alwaysEmitIntoClient public static var link: SwiftUI.LinkButtonStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct LinkButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.LinkButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LinkButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unified: SwiftUI.UnifiedWindowToolbarStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func unified(showsTitle: Swift.Bool) -> SwiftUI.UnifiedWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct UnifiedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.ButtonToggleStyle {
  @_alwaysEmitIntoClient public static var button: SwiftUI.ButtonToggleStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ButtonToggleStyle : SwiftUI.ToggleStyle {
  public init()
  public func makeBody(configuration: SwiftUI.ButtonToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17ButtonToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearGaugeStyle {
  @_alwaysEmitIntoClient public static var linear: SwiftUI.LinearGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct LinearGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUI.Color)
  public init(tint: SwiftUI.Gradient)
  public func makeBody(configuration: SwiftUI.LinearGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16LinearGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentalModifier : SwiftUI.ViewModifier where Self.Body == Swift.Never {
  associatedtype ResolvedModifier : SwiftUI.ViewModifier
  func resolve(in environment: SwiftUI.EnvironmentValues) -> Self.ResolvedModifier
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _requiresMainThread: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentalModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _requiresMainThread: Swift.Bool {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ColorPicker<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true, @SwiftUI.ViewBuilder label: () -> Label)
  public init(selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true, @SwiftUI.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11ColorPickerV4bodyQrvp", 0) __<Label>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ColorPicker where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<SwiftUI.Color>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Shape : SwiftUI.Animatable, SwiftUI.View {
  func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var role: SwiftUI.ShapeRole { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum ShapeRole {
  case fill
  case stroke
  case separator
  public static func == (a: SwiftUI.ShapeRole, b: SwiftUI.ShapeRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.Shape {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color : SwiftUI.ShapeStyle {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewModifier_Content<Modifier> where Modifier : SwiftUI.ViewModifier {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ViewModifier_Content<Modifier>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._ViewModifier_Content<Modifier>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.LinearGradient {
  @_alwaysEmitIntoClient public static func linearGradient(_ gradient: SwiftUI.Gradient, startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint) -> SwiftUI.LinearGradient {
        .init(gradient: gradient, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(colors: [SwiftUI.Color], startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint) -> SwiftUI.LinearGradient {
        .init(colors: colors, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(stops: [SwiftUI.Gradient.Stop], startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint) -> SwiftUI.LinearGradient {
        .init(stops: stops, startPoint: startPoint, endPoint: endPoint)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.RadialGradient {
  @_alwaysEmitIntoClient public static func radialGradient(_ gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat) -> SwiftUI.RadialGradient {
        .init(
            gradient: gradient, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat) -> SwiftUI.RadialGradient {
        .init(
            colors: colors, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat) -> SwiftUI.RadialGradient {
        .init(
            stops: stops, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.EllipticalGradient {
  @_alwaysEmitIntoClient public static func ellipticalGradient(_ gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5) -> SwiftUI.EllipticalGradient {
        .init(
            gradient: gradient, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5) -> SwiftUI.EllipticalGradient {
        .init(
            colors: colors, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5) -> SwiftUI.EllipticalGradient {
        .init(
            stops: stops, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.AngularGradient {
  @_alwaysEmitIntoClient public static func angularGradient(_ gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle) -> SwiftUI.AngularGradient {
        .init(
            gradient: gradient, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle) -> SwiftUI.AngularGradient {
        .init(
            colors: colors, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle) -> SwiftUI.AngularGradient {
        .init(
            stops: stops, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.AngularGradient {
  @_alwaysEmitIntoClient public static func conicGradient(_ gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero) -> SwiftUI.AngularGradient {
        .init(gradient: gradient, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero) -> SwiftUI.AngularGradient {
        .init(colors: colors, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero) -> SwiftUI.AngularGradient {
        .init(stops: stops, center: center, angle: angle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct LinearGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var startPoint: SwiftUI.UnitPoint
  internal var endPoint: SwiftUI.UnitPoint
  public init(gradient: SwiftUI.Gradient, startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint)
  @_alwaysEmitIntoClient public init(colors: [SwiftUI.Color], startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint) {
        self.init(
            gradient: Gradient(colors: colors),
            startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUI.Gradient.Stop], startPoint: SwiftUI.UnitPoint, endPoint: SwiftUI.UnitPoint) {
        self.init(
            gradient: Gradient(stops: stops),
            startPoint: startPoint, endPoint: endPoint)
    }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.LinearGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RadialGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var center: SwiftUI.UnitPoint
  internal var startRadius: CoreGraphics.CGFloat
  internal var endRadius: CoreGraphics.CGFloat
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat)
  @_alwaysEmitIntoClient public init(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat) {
        self.init(
            gradient: Gradient(colors: colors), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat) {
        self.init(
            gradient: Gradient(stops: stops), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.RadialGradient>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct EllipticalGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var center: SwiftUI.UnitPoint
  internal var startRadiusFraction: CoreGraphics.CGFloat
  internal var endRadiusFraction: CoreGraphics.CGFloat
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5)
  public init(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5)
  public init(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint = .center, startRadiusFraction: CoreGraphics.CGFloat = 0, endRadiusFraction: CoreGraphics.CGFloat = 0.5)
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.EllipticalGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AngularGradient : SwiftUI.ShapeStyle, SwiftUI.View {
  internal var gradient: SwiftUI.Gradient
  internal var center: SwiftUI.UnitPoint
  internal var startAngle: SwiftUI.Angle
  internal var endAngle: SwiftUI.Angle
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle = .zero, endAngle: SwiftUI.Angle = .zero)
  @_alwaysEmitIntoClient public init(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle) {
        self.init(gradient: Gradient(colors: colors), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, startAngle: SwiftUI.Angle, endAngle: SwiftUI.Angle) {
        self.init(gradient: Gradient(stops: stops), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  public init(gradient: SwiftUI.Gradient, center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero)
  @_alwaysEmitIntoClient public init(colors: [SwiftUI.Color], center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero) {
        self.init(gradient: Gradient(colors: colors), center: center,
            angle: angle)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUI.Gradient.Stop], center: SwiftUI.UnitPoint, angle: SwiftUI.Angle = .zero) {
        self.init(gradient: Gradient(stops: stops), center: center,
            angle: angle)
    }
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.AngularGradient>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ProjectionTransform {
  public var m11: CoreGraphics.CGFloat = 1.0, m12: CoreGraphics.CGFloat = 0.0, m13: CoreGraphics.CGFloat = 0.0
  public var m21: CoreGraphics.CGFloat = 0.0, m22: CoreGraphics.CGFloat = 1.0, m23: CoreGraphics.CGFloat = 0.0
  public var m31: CoreGraphics.CGFloat = 0.0, m32: CoreGraphics.CGFloat = 0.0, m33: CoreGraphics.CGFloat = 1.0
  @inlinable public init() {}
  @inlinable public init(_ m: CoreGraphics.CGAffineTransform) {
        m11 = m.a
        m12 = m.b
        m21 = m.c
        m22 = m.d
        m31 = m.tx
        m32 = m.ty
    }
  @inlinable public init(_ m: QuartzCore.CATransform3D) {
        m11 = m.m11
        m12 = m.m12
        m13 = m.m14
        m21 = m.m21
        m22 = m.m22
        m23 = m.m24
        m31 = m.m41
        m32 = m.m42
        m33 = m.m44
    }
  @inlinable public var isIdentity: Swift.Bool {
    get {
        return self == ProjectionTransform()
    }
  }
  @inlinable public var isAffine: Swift.Bool {
    get {
        return m13 == 0 && m23 == 0 && m33 == 1
    }
  }
  public mutating func invert() -> Swift.Bool
  public func inverted() -> SwiftUI.ProjectionTransform
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ProjectionTransform : Swift.Equatable {
  public static func == (a: SwiftUI.ProjectionTransform, b: SwiftUI.ProjectionTransform) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ProjectionTransform {
  @inline(__always) @inlinable internal func dot(_ a: (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat), _ b: (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat)) -> CoreGraphics.CGFloat {
        return a.0 * b.0 + a.1 * b.1 + a.2 * b.2
    }
  @inlinable public func concatenating(_ rhs: SwiftUI.ProjectionTransform) -> SwiftUI.ProjectionTransform {
        var m = ProjectionTransform()
        m.m11 = dot((m11, m12, m13), (rhs.m11, rhs.m21, rhs.m31))
        m.m12 = dot((m11, m12, m13), (rhs.m12, rhs.m22, rhs.m32))
        m.m13 = dot((m11, m12, m13), (rhs.m13, rhs.m23, rhs.m33))
        m.m21 = dot((m21, m22, m23), (rhs.m11, rhs.m21, rhs.m31))
        m.m22 = dot((m21, m22, m23), (rhs.m12, rhs.m22, rhs.m32))
        m.m23 = dot((m21, m22, m23), (rhs.m13, rhs.m23, rhs.m33))
        m.m31 = dot((m31, m32, m33), (rhs.m11, rhs.m21, rhs.m31))
        m.m32 = dot((m31, m32, m33), (rhs.m12, rhs.m22, rhs.m32))
        m.m33 = dot((m31, m32, m33), (rhs.m13, rhs.m23, rhs.m33))
        return m
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGPoint {
  public func applying(_ m: SwiftUI.ProjectionTransform) -> CoreGraphics.CGPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyView : SwiftUI.View {
  internal var storage: SwiftUI.AnyViewStorageBase
  public init<V>(_ view: V) where V : SwiftUI.View
  @_alwaysEmitIntoClient public init<V>(erasing view: V) where V : SwiftUI.View {
        self.init(view)
    }
  public init?(_fromValue value: Any)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.AnyView>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.AnyView>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyViewStorageBase {
  @objc @usableFromInline
  deinit
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  
  #if compiler(>=5.3) && $AsyncAwait && $Sendable && $InheritActorContext
  public func refreshable(@_inheritActorContext action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUI.View
  
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var refresh: SwiftUI.RefreshAction? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct RefreshAction {
  
  #if compiler(>=5.3) && $AsyncAwait
  public func callAsFunction() async
  #endif

}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct __ScaleToFitView<V> : SwiftUI.View where V : SwiftUI.View {
  public var content: V
  public var bounds: CoreGraphics.CGRect
  @inlinable public init(content: V, bounds: CoreGraphics.CGRect) {
        self.content = content
        self.bounds = bounds
    }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16__ScaleToFitViewV4bodyQrvp", 0) __<V>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct __SetFrameLayout {
  @usableFromInline
  internal var frame: CoreGraphics.CGRect
  @inlinable public init(_ frame: CoreGraphics.CGRect) {
        self.frame = frame
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.PlainListStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Group<Content> {
  public typealias Body = Swift.Never
  @usableFromInline
  internal var content: Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Group : SwiftUI.View where Content : SwiftUI.View {
  @inlinable public init(@SwiftUI.ViewBuilder content: () -> Content) {
        self.content = content()
    }
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct DepthTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Int {
    get { 0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsSectionedTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsEmptyViewTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsSectionFooterTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _WidgetInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Text : Swift.Equatable {
  @usableFromInline
  @frozen internal enum Storage : Swift.Equatable {
    case verbatim(Swift.String)
    case anyTextStorage(SwiftUI.AnyTextStorage)
    @usableFromInline
    internal static func == (lhs: SwiftUI.Text.Storage, rhs: SwiftUI.Text.Storage) -> Swift.Bool
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  @frozen internal enum Modifier : Swift.Equatable {
    case color(SwiftUI.Color?)
    case font(SwiftUI.Font?)
    case italic
    case weight(SwiftUI.Font.Weight?)
    case kerning(CoreGraphics.CGFloat)
    case tracking(CoreGraphics.CGFloat)
    case baseline(CoreGraphics.CGFloat)
    case rounded
    case anyTextModifier(SwiftUI.AnyTextModifier)
    @usableFromInline
    internal static func == (lhs: SwiftUI.Text.Modifier, rhs: SwiftUI.Text.Modifier) -> Swift.Bool
  }
  @usableFromInline
  internal var storage: SwiftUI.Text.Storage
  @usableFromInline
  internal var modifiers: [SwiftUI.Text.Modifier] = [Modifier]()
  @inlinable public init(verbatim content: Swift.String) {
        storage = .verbatim(content)
    }
  @_disfavoredOverload public init<S>(_ content: S) where S : Swift.StringProtocol
  public static func == (a: SwiftUI.Text, b: SwiftUI.Text) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTextStorage {
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTextModifier {
  @objc @usableFromInline
  deinit
}
extension SwiftUI.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _resolveText(in environment: SwiftUI.EnvironmentValues) -> Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum _LocalizationInfo : Swift.Equatable {
  case none
  case verbatim(Swift.String)
  case localized(key: Swift.String, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, hasFormatting: Swift.Bool = false)
  public static func == (a: SwiftUI._LocalizationInfo, b: SwiftUI._LocalizationInfo) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text {
  public var _localizationInfo: SwiftUI._LocalizationInfo {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.View {
  @available(macOS, unavailable)
  public func navigationBarHidden(_ hidden: Swift.Bool) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  public func navigationBarTitle(_ title: SwiftUI.Text) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  public func navigationBarTitle(_ titleKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @_disfavoredOverload public func navigationBarTitle<S>(_ title: S) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarTitle(_ title: SwiftUI.Text, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarTitle(_ titleKey: SwiftUI.LocalizedStringKey, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public func navigationBarTitle<S>(_ title: S, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUI.View where S : Swift.StringProtocol
  
  @available(macOS, unavailable)
  public func navigationBarBackButtonHidden(_ hidesBackButton: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public struct NavigationBarItem {
  public enum TitleDisplayMode {
    case automatic
    case inline
    @available(watchOS 8.0, *)
    @available(tvOS, unavailable)
    case large
    public static func == (a: SwiftUI.NavigationBarItem.TitleDisplayMode, b: SwiftUI.NavigationBarItem.TitleDisplayMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.PullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI23PullDownMenuButtonStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessPullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI33BorderlessPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessButtonMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessButtonMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI020BorderlessButtonMenuD5StyleV5_body13configurationQrAA01_edF13ConfigurationV_tF", 0) __
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TexturedPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI._TexturedPullDownMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI32_TexturedPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicViewContent : SwiftUI.View {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForEach : SwiftUI.DynamicViewContent where Content : SwiftUI.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent : SwiftUI.DynamicViewContent where Content : SwiftUI.DynamicViewContent, Modifier : SwiftUI.ViewModifier {
  public var data: Content.Data {
    get
  }
  public typealias Data = Content.Data
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollView.Main {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ScrollView<Provider>.Main>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ScrollViewAnimationMode {
  case never
  case discreteChanges
  case always
  public static func == (a: SwiftUI._ScrollViewAnimationMode, b: SwiftUI._ScrollViewAnimationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Transaction {
  public var _scrollViewAnimates: SwiftUI._ScrollViewAnimationMode {
    get
    set
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol MenuButtonStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._MenuButtonStyleConfiguration
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _MenuButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public var label: SwiftUI._MenuButtonStyleConfiguration.Label
  public var content: SwiftUI._MenuButtonStyleConfiguration.Content
  public init()
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(_:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func menuButtonStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.MenuButtonStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Gesture {
  associatedtype Value
  static func _makeGesture(gesture: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Self.Value>
  associatedtype Body : SwiftUI.Gesture
  var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Never : SwiftUI.Gesture {
  public typealias Value = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture where Self.Value == Self.Body.Value {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Self.Body.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureOutputs<Value> {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AsyncImage<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(url: Foundation.URL?, scale: CoreGraphics.CGFloat = 1) where Content == SwiftUI.Image
  @_alwaysEmitIntoClient public init<I, P>(url: Foundation.URL?, scale: CoreGraphics.CGFloat = 1, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Image) -> I, @SwiftUI.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUI._ConditionalContent<I, P>, I : SwiftUI.View, P : SwiftUI.View {
        self.init(url: url, scale: scale) { phase in
            if let i = phase.image {
                content(i)
            } else {
                placeholder()
            }
        }
    }
  public init(url: Foundation.URL?, scale: CoreGraphics.CGFloat = 1, transaction: SwiftUI.Transaction = Transaction(), @SwiftUI.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10AsyncImageV4bodyQrvp", 0) __<Content>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum AsyncImagePhase {
  case empty
  case success(SwiftUI.Image)
  case failure(Swift.Error)
  public var image: SwiftUI.Image? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewProxy {
  public var identifier: Swift.AnyHashable
  public var boundingRect: CoreGraphics.CGRect {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _IdentifiedViewTree {
  case empty
  case proxy(SwiftUI._IdentifiedViewProxy)
  case array([SwiftUI._IdentifiedViewTree])
  public func forEach(_ body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewsKey {
  public typealias Value = SwiftUI._IdentifiedViewTree
  public static let defaultValue: SwiftUI._IdentifiedViewTree
  public static func reduce(value: inout SwiftUI._IdentifiedViewsKey.Value, nextValue: () -> SwiftUI._IdentifiedViewsKey.Value)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IdentifiedModifier<Identifier> : SwiftUI.ViewModifier, Swift.Equatable where Identifier : Swift.Hashable {
  public var identifier: Identifier
  @inlinable public init(identifier: Identifier) {
        self.identifier = identifier
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._IdentifiedModifier<Identifier>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func == (a: SwiftUI._IdentifiedModifier<Identifier>, b: SwiftUI._IdentifiedModifier<Identifier>) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func _identified<I>(by identifier: I) -> some SwiftUI.View where I : Swift.Hashable {
        return modifier(_IdentifiedModifier(identifier: identifier))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _WidgetOutputs {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityTechnologies : Swift.SetAlgebra {
  public static var voiceOver: SwiftUI.AccessibilityTechnologies
  public static var switchControl: SwiftUI.AccessibilityTechnologies
  public init()
  public func union(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formUnion(_ other: SwiftUI.AccessibilityTechnologies)
  public func intersection(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formIntersection(_ other: SwiftUI.AccessibilityTechnologies)
  public func symmetricDifference(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formSymmetricDifference(_ other: SwiftUI.AccessibilityTechnologies)
  public func contains(_ member: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUI.AccessibilityTechnologies) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.AccessibilityTechnologies)
  public mutating func remove(_ member: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  public mutating func update(with newMember: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  public static func == (a: SwiftUI.AccessibilityTechnologies, b: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTechnologies
  public typealias Element = SwiftUI.AccessibilityTechnologies
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func alert<A>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where A : SwiftUI.View
  
  @_disfavoredOverload public func alert<S, A>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View
  
  public func alert<A>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where A : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func alert<A, M>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
  @_disfavoredOverload public func alert<S, A, M>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View, M : SwiftUI.View
  
  public func alert<A, M>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder actions: () -> A, @SwiftUI.ViewBuilder message: () -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func alert<A, T>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where A : SwiftUI.View
  
  @_disfavoredOverload public func alert<S, A, T>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View
  
  public func alert<A, T>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A) -> some SwiftUI.View where A : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func alert<A, M, T>(_ titleKey: SwiftUI.LocalizedStringKey, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
  @_disfavoredOverload public func alert<S, A, M, T>(_ title: S, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where S : Swift.StringProtocol, A : SwiftUI.View, M : SwiftUI.View
  
  public func alert<A, M, T>(_ title: SwiftUI.Text, isPresented: SwiftUI.Binding<Swift.Bool>, presenting data: T?, @SwiftUI.ViewBuilder actions: (T) -> A, @SwiftUI.ViewBuilder message: (T) -> M) -> some SwiftUI.View where A : SwiftUI.View, M : SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func alert<E, A>(isPresented: SwiftUI.Binding<Swift.Bool>, error: E?, @SwiftUI.ViewBuilder actions: () -> A) -> some SwiftUI.View where E : Foundation.LocalizedError, A : SwiftUI.View
  
  public func alert<E, A, M>(isPresented: SwiftUI.Binding<Swift.Bool>, error: E?, @SwiftUI.ViewBuilder actions: (E) -> A, @SwiftUI.ViewBuilder message: (E) -> M) -> some SwiftUI.View where E : Foundation.LocalizedError, A : SwiftUI.View, M : SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static func asymmetric(insertion: SwiftUI.AnyTransition, removal: SwiftUI.AnyTransition) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DatePickerStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._DatePickerStyleLabel
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DatePickerStyleLabel : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func datePickerStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.DatePickerStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.DefaultWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.HierarchicalShapeStyle {
  @_alwaysEmitIntoClient public static var primary: SwiftUI.HierarchicalShapeStyle {
    get { .primary }
  }
  @_alwaysEmitIntoClient public static var secondary: SwiftUI.HierarchicalShapeStyle {
    get { .secondary }
  }
  @_alwaysEmitIntoClient public static var tertiary: SwiftUI.HierarchicalShapeStyle {
    get { .tertiary }
  }
  @_alwaysEmitIntoClient public static var quaternary: SwiftUI.HierarchicalShapeStyle {
    get { .quaternary }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct HierarchicalShapeStyle : SwiftUI.ShapeStyle {
  internal var id: Swift.UInt32
  public static let primary: SwiftUI.HierarchicalShapeStyle
  public static let secondary: SwiftUI.HierarchicalShapeStyle
  public static let tertiary: SwiftUI.HierarchicalShapeStyle
  public static let quaternary: SwiftUI.HierarchicalShapeStyle
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SymbolRenderingMode {
  public static let monochrome: SwiftUI.SymbolRenderingMode
  public static let multicolor: SwiftUI.SymbolRenderingMode
  public static let hierarchical: SwiftUI.SymbolRenderingMode
  public static let palette: SwiftUI.SymbolRenderingMode
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func symbolRenderingMode(_ mode: SwiftUI.SymbolRenderingMode?) -> some SwiftUI.View {
        return environment(\.symbolRenderingMode, mode)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Image {
  public func symbolRenderingMode(_ mode: SwiftUI.SymbolRenderingMode?) -> SwiftUI.Image
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var symbolRenderingMode: SwiftUI.SymbolRenderingMode? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func anchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUI.Anchor<A>.Source, transform: @escaping (SwiftUI.Anchor<A>) -> K.Value) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_AnchorWritingModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchorWritingModifier<AnchorValue, Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var anchor: SwiftUI.Anchor<AnchorValue>.Source
  public var transform: (SwiftUI.Anchor<AnchorValue>) -> Key.Value
  @inlinable public init(anchor: SwiftUI.Anchor<AnchorValue>.Source, transform: @escaping (SwiftUI.Anchor<AnchorValue>) -> Key.Value) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnchorWritingModifier<AnchorValue, Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowStyle {
  associatedtype _Body : SwiftUI.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  public func windowStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func presentedWindowStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.WindowStyle
  
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBox<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init(@SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label) {
        self.init(label: label(), content: content)
    }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8GroupBoxV4bodyQrvp", 0) __<Label, Content>
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUI.GroupBoxStyleConfiguration.Label, Content == SwiftUI.GroupBoxStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.GroupBoxStyleConfiguration)
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox {
  @available(iOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _DigitalCrownModifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._DigitalCrownModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _StrokedShape<S> : SwiftUI.Shape where S : SwiftUI.Shape {
  public var shape: S
  public var style: SwiftUI.StrokeStyle
  @inlinable public init(shape: S, style: SwiftUI.StrokeStyle) {
        self.shape = shape
        self.style = style
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUI.ShapeRole {
    get
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<S.AnimatableData, SwiftUI.StrokeStyle.AnimatableData>
  public var animatableData: SwiftUI._StrokedShape<S>.AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI._ShapeView<SwiftUI._StrokedShape<S>, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Shape {
  @inlinable public func stroke(style: SwiftUI.StrokeStyle) -> some SwiftUI.Shape {
        return _StrokedShape(shape: self, style: style)
    }
  
  @inlinable public func stroke(lineWidth: CoreGraphics.CGFloat = 1) -> some SwiftUI.Shape {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider]) -> some SwiftUI.View
  
  public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider], onEdit: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
  public func importsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onImport: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 15.0, tvOS 15.0, watchOS 7.0, *)
@available(macOS, unavailable)
@usableFromInline
internal struct ListItemReuseIdentifierTrait : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String {
    get { "ListCell" }
  }
  @usableFromInline
  internal typealias Value = Swift.String
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableRowContent<Value, T> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public var value: T
  @inlinable internal init(_ value: T, ofType: SwiftUI.TupleTableRowContent<Value, T>.TableRowValue.Type) { self.value = value }
  public static func _makeRows(content: SwiftUI._GraphValue<SwiftUI.TupleTableRowContent<Value, T>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  public typealias TableRowBody = Swift.Never
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Group : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  @inlinable public init<R>(@SwiftUI.TableRowBuilder<R> content: () -> Content) where R == Content.TableRowValue {
        self.content = content()
    }
  public static func _makeRows(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
public struct LongPressGesture : SwiftUI.Gesture {
  public var minimumDuration: Swift.Double
  @available(tvOS, unavailable)
  public var maximumDistance: CoreGraphics.CGFloat {
    get
    set
  }
  @available(tvOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreGraphics.CGFloat = 10)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.LongPressGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Bool>
  public typealias Body = Swift.Never
  public typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreGraphics.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUI.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            maximumDistance: maximumDistance,
            pressing: onPressingChanged,
            perform: action)
    }
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUI.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            pressing: onPressingChanged,
            perform: action)
    }
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUI.View {
  @available(iOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @_disfavoredOverload public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreGraphics.CGFloat = 10, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:perform:onPressingChanged:)")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ToolbarCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ToolbarCommandsV4bodyQrvp", 0) __
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SidebarCommandsV4bodyQrvp", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ImportFromDevicesCommands : SwiftUI.Commands {
  public init()
  public var body: some SwiftUI.Commands {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25ImportFromDevicesCommandsV4bodyQrvp", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {
  public static let red: SwiftUI.Color
  public static let orange: SwiftUI.Color
  public static let yellow: SwiftUI.Color
  public static let green: SwiftUI.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let mint: SwiftUI.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let teal: SwiftUI.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let cyan: SwiftUI.Color
  public static let blue: SwiftUI.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let indigo: SwiftUI.Color
  public static let purple: SwiftUI.Color
  public static let pink: SwiftUI.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let brown: SwiftUI.Color
  public static let white: SwiftUI.Color
  public static let gray: SwiftUI.Color
  public static let black: SwiftUI.Color
  public static let clear: SwiftUI.Color
  public static let primary: SwiftUI.Color
  public static let secondary: SwiftUI.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.Color {
  @_alwaysEmitIntoClient public static var red: SwiftUI.Color {
    get { .red }
  }
  @_alwaysEmitIntoClient public static var orange: SwiftUI.Color {
    get { .orange }
  }
  @_alwaysEmitIntoClient public static var yellow: SwiftUI.Color {
    get { .yellow }
  }
  @_alwaysEmitIntoClient public static var green: SwiftUI.Color {
    get { .green }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var mint: SwiftUI.Color {
    get { .mint }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var teal: SwiftUI.Color {
    get { .teal }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var cyan: SwiftUI.Color {
    get { .cyan }
  }
  @_alwaysEmitIntoClient public static var blue: SwiftUI.Color {
    get { .blue }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var indigo: SwiftUI.Color {
    get { .indigo }
  }
  @_alwaysEmitIntoClient public static var purple: SwiftUI.Color {
    get { .purple }
  }
  @_alwaysEmitIntoClient public static var pink: SwiftUI.Color {
    get { .pink }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var brown: SwiftUI.Color {
    get { .brown }
  }
  @_alwaysEmitIntoClient public static var white: SwiftUI.Color {
    get { .white }
  }
  @_alwaysEmitIntoClient public static var gray: SwiftUI.Color {
    get { .gray }
  }
  @_alwaysEmitIntoClient public static var black: SwiftUI.Color {
    get { .black }
  }
  @_alwaysEmitIntoClient public static var clear: SwiftUI.Color {
    get { .clear }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SecureField<Label> : SwiftUI.View where Label : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11SecureFieldV4bodyQrvp", 0) __<Label>
}
extension SwiftUI.SecureField where Label == SwiftUI.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.SecureField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public init(text: SwiftUI.Binding<Swift.String>, prompt: SwiftUI.Text? = nil, @SwiftUI.ViewBuilder label: () -> Label)
}
extension SwiftUI.SecureField where Label == SwiftUI.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>) {
        self.init(titleKey, text: text, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(title, text: text, onCommit: {})
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SecureField where Label == SwiftUI.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  public init(_ titleKey: SwiftUI.LocalizedStringKey, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @_disfavoredOverload public init<S>(_ title: S, text: SwiftUI.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.BackgroundStyle {
  @_alwaysEmitIntoClient public static var background: SwiftUI.BackgroundStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct BackgroundStyle {
  @inlinable public init() {}
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI.BackgroundStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func _addingBackgroundGroup() -> some SwiftUI.View
  
  public func _addingBackgroundLayer() -> some SwiftUI.View
  
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.CarouselTabViewStyle {
  @_alwaysEmitIntoClient public static var carousel: SwiftUI.CarouselTabViewStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CarouselTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_Children : SwiftUI.View {
  public static func _makeViewList(view: SwiftUI._GraphValue<SwiftUI._VariadicView.Children>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VariadicView_Children : Swift.RandomAccessCollection {
  public struct Element : SwiftUI.View, Swift.Identifiable {
    public var id: Swift.AnyHashable {
      get
    }
    public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUI._ViewTraitKey {
      get
      set
    }
    public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._VariadicView_Children.Element>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
    public typealias Body = Swift.Never
    public typealias ID = Swift.AnyHashable
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI._VariadicView_Children.Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._VariadicView_Children>
  public typealias SubSequence = Swift.Slice<SwiftUI._VariadicView_Children>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Animatable {
  associatedtype AnimatableData : SwiftUI.VectorArithmetic
  var animatableData: Self.AnimatableData { get set }
  static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animatable where Self : SwiftUI.VectorArithmetic {
  public var animatableData: Self {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animatable where Self.AnimatableData == SwiftUI.EmptyAnimatableData {
  public var animatableData: SwiftUI.EmptyAnimatableData {
    @inlinable get { return EmptyAnimatableData() }
    @inlinable set {}
  }
  public static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animatable {
  public static func _makeAnimatable(value: inout SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EmptyAnimatableData : SwiftUI.VectorArithmetic {
  @inlinable public init() {}
  @inlinable public static var zero: SwiftUI.EmptyAnimatableData {
    get { return .init() }
  }
  @inlinable public static func += (lhs: inout SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) {}
  @inlinable public static func -= (lhs: inout SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) {}
  @inlinable public static func + (lhs: SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) -> SwiftUI.EmptyAnimatableData {
        return .zero
    }
  @inlinable public static func - (lhs: SwiftUI.EmptyAnimatableData, rhs: SwiftUI.EmptyAnimatableData) -> SwiftUI.EmptyAnimatableData {
        return .zero
    }
  @inlinable public mutating func scale(by rhs: Swift.Double) {}
  @inlinable public var magnitudeSquared: Swift.Double {
    get { return 0 }
  }
  public static func == (a: SwiftUI.EmptyAnimatableData, b: SwiftUI.EmptyAnimatableData) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  public func onEnded(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUI._EndedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture where Self.Value : Swift.Equatable {
  public func onChanged(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUI._ChangedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EndedGesture<Content> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._EndedGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ChangedGesture<Content> where Content : SwiftUI.Gesture, Content.Value : Swift.Equatable {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ChangedGesture<Content>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Content.Value>
  public typealias Body = Swift.Never
  public typealias Value = Content.Value
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HSplitView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VSplitView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _SplitViewContainer : SwiftUI._VariadicView.UnaryViewRoot {
  public func body(children: SwiftUI._VariadicView.Children) -> some SwiftUI.View
  
  public static var _viewListOptions: Swift.Int {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19_SplitViewContainerV4body8childrenQrAA09_VariadicD9_ChildrenV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Form<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4FormV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.CompactDatePickerStyle {
  @_alwaysEmitIntoClient public static var compact: SwiftUI.CompactDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CompactDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.CompactDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22CompactDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func accessibilityScrollAction(_ handler: @escaping (SwiftUI.Edge) -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityScrollAction(_ handler: @escaping (SwiftUI.Edge) -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public func repeatCount(_ repeatCount: Swift.Int, autoreverses: Swift.Bool = true) -> SwiftUI.Animation
  public func repeatForever(autoreverses: Swift.Bool = true) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text {
  public static func + (lhs: SwiftUI.Text, rhs: SwiftUI.Text) -> SwiftUI.Text
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.HiddenTitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var hiddenTitleBar: SwiftUI.HiddenTitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HiddenTitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
public func __designTimeBoolean<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByBooleanLiteral
public func __designTimeFloat<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByFloatLiteral
public func __designTimeInteger<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByIntegerLiteral
@available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
@_semantics("constant_evaluable") @_transparent public func __designTimeString(_ key: Swift.String, fallback: os.OSLogMessage) -> os.OSLogMessage {
    fallback
}
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByStringLiteral
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByExtendedGraphemeClusterLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeApplyIncrementalValues(_ updates: [[Swift.String : Any]])
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct ObservedObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen public struct Wrapper {
    internal let root: ObjectType
    public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUI.Binding<Subject> {
      get
    }
  }
  @usableFromInline
  internal var _seed: Swift.Int = 0
  @_alwaysEmitIntoClient public init(initialValue: ObjectType) {
      self.init(wrappedValue: initialValue)
    }
  public init(wrappedValue: ObjectType)
  @_Concurrency.MainActor(unsafe) public var wrappedValue: ObjectType
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ObservedObject {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ObservedObject {
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  @inlinable public func simultaneously<Other>(with other: Other) -> SwiftUI.SimultaneousGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SimultaneousGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SimultaneousGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public struct Value {
    public var first: First.Value?
    public var second: Second.Value?
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.SimultaneousGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.SimultaneousGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SimultaneousGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SimultaneousGesture<First, Second>.Value, b: SwiftUI.SimultaneousGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SimultaneousGesture.Value : Swift.Hashable where First.Value : Swift.Hashable, Second.Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  public func map<T>(_ body: @escaping (Self.Value) -> T) -> SwiftUI._MapGesture<Self, T>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _MapGesture<Content, Value> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._MapGesture<Content, Value>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __UniversalListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.DefaultButtonStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.PlainTextFieldStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.PlainTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI19PlainTextFieldStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Table<Value, Rows, Columns> : SwiftUI.View where Value == Rows.TableRowValue, Rows : SwiftUI.TableRowContent, Columns : SwiftUI.TableColumnContent, Rows.TableRowValue == Columns.TableRowValue {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Table<Value, Rows, Columns>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  public init(@SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  public init(selection: SwiftUI.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  public init(selection: SwiftUI.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  public init<Sort>(sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  public init<Sort>(selection: SwiftUI.Binding<Value.ID?>, sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  public init<Sort>(selection: SwiftUI.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  public init<Data>(_ data: Data, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  public init<Data>(_ data: Data, selection: SwiftUI.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  public init<Data>(_ data: Data, selection: SwiftUI.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  public init<Data, Sort>(_ data: Data, sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  public init<Data, Sort>(_ data: Data, selection: SwiftUI.Binding<Value.ID?>, sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  public init<Data, Sort>(_ data: Data, selection: SwiftUI.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUI.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableForEachContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {
  public typealias TableRowValue = Data.Element
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI19TableForEachContentV12tableRowBodyQrvp", 0) __<Data>
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.WheelDatePickerStyle {
  @_alwaysEmitIntoClient public static var wheel: SwiftUI.WheelDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WheelDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  public func _body(configuration: SwiftUI.DatePicker<SwiftUI.WheelDatePickerStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI20WheelDatePickerStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ItemProviderTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28ItemProviderTableRowModifierV4bodyQrvp", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OnInsertTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24OnInsertTableRowModifierV4bodyQrvp", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public func itemProvider(_ action: (() -> Foundation.NSItemProvider?)?) -> SwiftUI.ModifiedContent<Self, SwiftUI.ItemProviderTableRowModifier>
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.OnInsertTableRowModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func accessibilityElement(children: SwiftUI.AccessibilityChildBehavior = .ignore) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityChildBehavior {
  public static let ignore: SwiftUI.AccessibilityChildBehavior
  public static let contain: SwiftUI.AccessibilityChildBehavior
  public static let combine: SwiftUI.AccessibilityChildBehavior
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum DigitalCrownRotationalSensitivity {
  case low
  case medium
  case high
  public static func == (a: SwiftUI.DigitalCrownRotationalSensitivity, b: SwiftUI.DigitalCrownRotationalSensitivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _digitalCrownRotation<V>(_ binding: SwiftUI.Binding<V>, configuration: SwiftUI._DigitalCrownConfiguration) -> some SwiftUI.View where V : Swift.BinaryFloatingPoint
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct MatchedGeometryProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
  public static let position: SwiftUI.MatchedGeometryProperties
  public static let size: SwiftUI.MatchedGeometryProperties
  public static let frame: SwiftUI.MatchedGeometryProperties
  public typealias ArrayLiteralElement = SwiftUI.MatchedGeometryProperties
  public typealias Element = SwiftUI.MatchedGeometryProperties
  public typealias RawValue = Swift.UInt32
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func matchedGeometryEffect<ID>(id: ID, in namespace: SwiftUI.Namespace.ID, properties: SwiftUI.MatchedGeometryProperties = .frame, anchor: SwiftUI.UnitPoint = .center, isSource: Swift.Bool = true) -> some SwiftUI.View where ID : Swift.Hashable {
        return modifier(_MatchedGeometryEffect(id: id,
            namespace: namespace, properties: properties,
            anchor: anchor, isSource: isSource))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _MatchedGeometryEffect<ID> where ID : Swift.Hashable {
  public var id: ID
  public var namespace: SwiftUI.Namespace.ID
  public var args: (properties: SwiftUI.MatchedGeometryProperties, anchor: SwiftUI.UnitPoint, isSource: Swift.Bool)
  @inlinable public init(id: ID, namespace: SwiftUI.Namespace.ID, properties: SwiftUI.MatchedGeometryProperties, anchor: SwiftUI.UnitPoint, isSource: Swift.Bool) {
        (self.id, self.namespace) = (id, namespace)
        args = (properties: properties, anchor: anchor, isSource: isSource)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._MatchedGeometryEffect<ID>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.NavigationControlGroupStyle {
  @_alwaysEmitIntoClient public static var navigation: SwiftUI.NavigationControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct NavigationControlGroupStyle : SwiftUI.ControlGroupStyle {
  public init()
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: SwiftUI.NavigationControlGroupStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27NavigationControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol Widget {
  associatedtype Body : SwiftUI.WidgetConfiguration
  init()
  var body: Self.Body { get }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct WidgetBundleBuilder {
  public static func buildBlock() -> some SwiftUI.Widget
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.Widget
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  @inlinable public func exclusively<Other>(before other: Other) -> SwiftUI.ExclusiveGesture<Self, Other> where Other : SwiftUI.Gesture {
        return ExclusiveGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ExclusiveGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(Second.Value)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.ExclusiveGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.ExclusiveGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ExclusiveGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.ExclusiveGesture<First, Second>.Value, b: SwiftUI.ExclusiveGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command) -> some SwiftUI.View
  
  public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut) -> some SwiftUI.View
  
  @available(iOS 15.4, macOS 12.3, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyboardShortcut {
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct Localization {
    public static let automatic: SwiftUI.KeyboardShortcut.Localization
    public static let withoutMirroring: SwiftUI.KeyboardShortcut.Localization
    public static let custom: SwiftUI.KeyboardShortcut.Localization
  }
  public static let defaultAction: SwiftUI.KeyboardShortcut
  public static let cancelAction: SwiftUI.KeyboardShortcut
  public var key: SwiftUI.KeyEquivalent
  public var modifiers: SwiftUI.EventModifiers
  public var localization: SwiftUI.KeyboardShortcut.Localization
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command)
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUI.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyEquivalent {
  public static let upArrow: SwiftUI.KeyEquivalent
  public static let downArrow: SwiftUI.KeyEquivalent
  public static let leftArrow: SwiftUI.KeyEquivalent
  public static let rightArrow: SwiftUI.KeyEquivalent
  public static let escape: SwiftUI.KeyEquivalent
  public static let delete: SwiftUI.KeyEquivalent
  public static let deleteForward: SwiftUI.KeyEquivalent
  public static let home: SwiftUI.KeyEquivalent
  public static let end: SwiftUI.KeyEquivalent
  public static let pageUp: SwiftUI.KeyEquivalent
  public static let pageDown: SwiftUI.KeyEquivalent
  public static let clear: SwiftUI.KeyEquivalent
  public static let tab: SwiftUI.KeyEquivalent
  public static let space: SwiftUI.KeyEquivalent
  public static let `return`: SwiftUI.KeyEquivalent
  public var character: Swift.Character
  public init(_ character: Swift.Character)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.KeyEquivalent : Swift.ExpressibleByExtendedGraphemeClusterLiteral {
  public init(extendedGraphemeClusterLiteral: Swift.Character)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.Character
  public typealias UnicodeScalarLiteralType = Swift.Character
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  public var keyboardShortcut: SwiftUI.KeyboardShortcut? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.KeyboardShortcut : Swift.Hashable {
  public static func == (lhs: SwiftUI.KeyboardShortcut, rhs: SwiftUI.KeyboardShortcut) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.View {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func statusBar(hidden: Swift.Bool) -> some SwiftUI.View
  
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func _statusBar(hidden: Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AppearanceActionModifier : SwiftUI.ViewModifier {
  public var appear: (() -> Swift.Void)?
  public var disappear: (() -> Swift.Void)?
  @inlinable public init(appear: (() -> Swift.Void)? = nil, disappear: (() -> Swift.Void)? = nil) {
        self.appear = appear
        self.disappear = disappear
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AppearanceActionModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._AppearanceActionModifier>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.View {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  @inlinable public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.View {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitTriggers : Swift.OptionSet {
  public typealias RawValue = Swift.Int
  public let rawValue: SwiftUI.SubmitTriggers.RawValue
  public init(rawValue: SwiftUI.SubmitTriggers.RawValue)
  public static let text: SwiftUI.SubmitTriggers
  public static let search: SwiftUI.SubmitTriggers
  public typealias ArrayLiteralElement = SwiftUI.SubmitTriggers
  public typealias Element = SwiftUI.SubmitTriggers
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Anchor.Source where Value == CoreGraphics.CGPoint {
  public static func point(_ p: CoreGraphics.CGPoint) -> SwiftUI.Anchor<Value>.Source
  public static func unitPoint(_ p: SwiftUI.UnitPoint) -> SwiftUI.Anchor<Value>.Source
  public static var topLeading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var top: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var topTrailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var leading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var center: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var trailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottomLeading: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottom: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
  public static var bottomTrailing: SwiftUI.Anchor<CoreGraphics.CGPoint>.Source {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ContentShapeKinds : Swift.OptionSet {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let interaction: SwiftUI.ContentShapeKinds
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let dragPreview: SwiftUI.ContentShapeKinds
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let contextMenuPreview: SwiftUI.ContentShapeKinds
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let hoverEffect: SwiftUI.ContentShapeKinds
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  public static let focusEffect: SwiftUI.ContentShapeKinds
  public typealias ArrayLiteralElement = SwiftUI.ContentShapeKinds
  public typealias Element = SwiftUI.ContentShapeKinds
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FlipForRTLEffect : SwiftUI.ViewModifier, Swift.Equatable {
  public var isEnabled: Swift.Bool
  @inlinable public init(isEnabled: Swift.Bool) {
        self.isEnabled = isEnabled
    }
  public static func == (a: SwiftUI._FlipForRTLEffect, b: SwiftUI._FlipForRTLEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func flipsForRightToLeftLayoutDirection(_ enabled: Swift.Bool) -> some SwiftUI.View {
        modifier(_FlipForRTLEffect(isEnabled: enabled))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect {
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._FlipForRTLEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDirections : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public init(rawValue: Swift.Int8)
  public static let left: SwiftUI._EventDirections
  public static let right: SwiftUI._EventDirections
  public static let up: SwiftUI._EventDirections
  public static let down: SwiftUI._EventDirections
  public static let horizontal: SwiftUI._EventDirections
  public static let vertical: SwiftUI._EventDirections
  public static let all: SwiftUI._EventDirections
  public typealias ArrayLiteralElement = SwiftUI._EventDirections
  public typealias Element = SwiftUI._EventDirections
  public typealias RawValue = Swift.Int8
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.DefaultProgressViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDebugTriggers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let responders: SwiftUI._EventDebugTriggers
  public static let sendEvents: SwiftUI._EventDebugTriggers
  public static let eventBindings: SwiftUI._EventDebugTriggers
  public static let eventPhases: SwiftUI._EventDebugTriggers
  public typealias ArrayLiteralElement = SwiftUI._EventDebugTriggers
  public typealias Element = SwiftUI._EventDebugTriggers
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public var _eventDebugTriggers: SwiftUI._EventDebugTriggers
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.TitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var titleBar: SwiftUI.TitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DynamicPropertyBuffer {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use Animatable directly")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use Animatable directly")
public protocol AnimatableModifier : SwiftUI.Animatable, SwiftUI.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnimatableModifier {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ViewModifier where Self : SwiftUI.Animatable {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.ColumnNavigationViewStyle {
  @_alwaysEmitIntoClient public static var columns: SwiftUI.ColumnNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  @usableFromInline
  internal init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutView<Data, Layout> : SwiftUI.View where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUI.View, Data.Index : Swift.Hashable {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._ScrollableLayoutView<Data, Layout>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayoutView : SwiftUI._ScrollableContentProvider {
  public var scrollableContent: SwiftUI._ScrollableLayoutView<Data, Layout> {
    get
  }
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._ScrollableLayoutView<Data, Layout>>
  public typealias ScrollableContent = SwiftUI._ScrollableLayoutView<Data, Layout>
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public enum _DigitalCrownDecelerationRate {
  case immediate
  case fast
  case normal
  public static func == (a: SwiftUI._DigitalCrownDecelerationRate, b: SwiftUI._DigitalCrownDecelerationRate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _DigitalCrownConfiguration {
  public var _isScrollIndicatorAlwaysOnScreen: Swift.Bool
  public var _onlyUseMinorDetents: Swift.Bool
  public var _decelerationRate: SwiftUI._DigitalCrownDecelerationRate
  public var _hapticsStrength: SwiftUI._CrownHapticsConfiguration.Notch.Strength
  public var isContinuous: Swift.Bool {
    get
    set
  }
  public var isHapticFeedbackEnabled: Swift.Bool
  public var rotationalSensitivity: SwiftUI.DigitalCrownRotationalSensitivity
  public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityChildBehavior : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.AccessibilityChildBehavior, rhs: SwiftUI.AccessibilityChildBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct GridItem {
  public enum Size {
    case fixed(_: CoreGraphics.CGFloat)
    case flexible(minimum: CoreGraphics.CGFloat = 10, maximum: CoreGraphics.CGFloat = .infinity)
    case adaptive(minimum: CoreGraphics.CGFloat, maximum: CoreGraphics.CGFloat = .infinity)
  }
  public var size: SwiftUI.GridItem.Size
  public var spacing: CoreGraphics.CGFloat?
  public var alignment: SwiftUI.Alignment?
  public init(_ size: SwiftUI.GridItem.Size = .flexible(), spacing: CoreGraphics.CGFloat? = nil, alignment: SwiftUI.Alignment? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHGrid<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(rows: [SwiftUI.GridItem], alignment: SwiftUI.VerticalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyHGrid<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVGrid<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(columns: [SwiftUI.GridItem], alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyVGrid<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineGroup<Data, ID, Parent, Leaf, Subgroup> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup : SwiftUI.View where Parent : SwiftUI.View, Leaf : SwiftUI.View, Subgroup : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVA2A4ViewR0_AaDR1_AaDR2_rlE4bodyQrvp", 0) __<Data, ID, Parent, Leaf, Subgroup>
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  public init<C, E>(_ root: SwiftUI.Binding<E>, children: Swift.WritableKeyPath<E, C?>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<E>) -> Leaf) where Data == SwiftUI.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  public init<C, E>(_ data: SwiftUI.Binding<C>, children: Swift.WritableKeyPath<E, C?>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<E>) -> Leaf) where Data == SwiftUI.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUI.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  public init<C, E>(_ root: SwiftUI.Binding<E>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<E>) -> Leaf) where Data == SwiftUI.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  public init<C, E>(_ data: SwiftUI.Binding<C>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Binding<E>) -> Leaf) where Data == SwiftUI.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineSubgroupChildren : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Link<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(destination: Foundation.URL, @SwiftUI.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4LinkV4bodyQrvp", 0) __<Label>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, destination: Foundation.URL)
  @_disfavoredOverload public init<S>(_ title: S, destination: Foundation.URL) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedProminentButtonStyle {
  @_alwaysEmitIntoClient public static var borderedProminent: SwiftUI.BorderedProminentButtonStyle {
    get {
        .init()
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct BorderedProminentButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.BorderedProminentButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28BorderedProminentButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static let identity: SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transformAnchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUI.Anchor<A>.Source, transform: @escaping (inout K.Value, SwiftUI.Anchor<A>) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_AnchorTransformModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AnchorTransformModifier<AnchorValue, Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var anchor: SwiftUI.Anchor<AnchorValue>.Source
  public var transform: (inout Key.Value, SwiftUI.Anchor<AnchorValue>) -> Swift.Void
  @inlinable public init(anchor: SwiftUI.Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, SwiftUI.Anchor<AnchorValue>) -> Swift.Void) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AnchorTransformModifier<AnchorValue, Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Text {
  @_disfavoredOverload public init(_ attributedContent: Foundation.AttributedString)
}
extension Foundation.AttributeScopes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var swiftUI: Foundation.AttributeScopes.SwiftUIAttributes.Type {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public struct SwiftUIAttributes : Foundation.AttributeScope {
    public let font: Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute
    public let foregroundColor: Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute
    public let backgroundColor: Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute
    public let strikethroughStyle: Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute
    public let underlineStyle: Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute
    public let kern: Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute
    public let tracking: Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute
    public let baselineOffset: Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute
    public let accessibility: Foundation.AttributeScopes.AccessibilityAttributes
    public let foundation: Foundation.AttributeScopes.FoundationAttributes
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
extension Foundation.AttributeScopes.SwiftUIAttributes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum FontAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUI.Font
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum ForegroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUI.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BackgroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUI.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum StrikethroughStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUI.Text.LineStyle
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum UnderlineStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUI.Text.LineStyle
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum KerningAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum TrackingAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BaselineOffsetAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeDynamicLookup {
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.SwiftUIAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __BedtimeTickLabelsLayout {
  public init(center: CoreGraphics.CGPoint, radius: CoreGraphics.CGFloat)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyLocationBase {
  @objc @usableFromInline
  deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyLocation<Value> : SwiftUI.AnyLocationBase {
  @objc @usableFromInline
  deinit
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func fileImporter(isPresented: SwiftUI.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
  public func fileImporter(isPresented: SwiftUI.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var _accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUI.View {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func accessibilityShowsLargeContentViewer<V>(@SwiftUI.ViewBuilder _ largeContentView: () -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func accessibilityShowsLargeContentViewer() -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public enum EditMode {
  case inactive
  case transient
  case active
  public var isEditing: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.EditMode, b: SwiftUI.EditMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public var editMode: SwiftUI.Binding<SwiftUI.EditMode>? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Group : SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Group : SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct TupleToolbarContent<T> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @usableFromInline
  internal static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Transaction {
  public var isContinuous: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Test {
  func setUpTest()
  func tearDownTest()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Test {
  public func setUpTest()
  public func tearDownTest()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityLabel(_ label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityHint(_ hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityInputLabels(_ inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityActivationPoint(_ activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityLabel(_ label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityHint(_ hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityInputLabels(_ inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityLabel(_ labelKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  public func accessibilityHint(_ hintKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUI.LocalizedStringKey]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityLabel(_ labelKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityHint(_ hintKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUI.LocalizedStringKey]) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  public func accessibility(hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  public func accessibility(label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  public func accessibility(hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  public func accessibility(inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  public func accessibility(identifier: Swift.String) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  public func accessibility(sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  public func accessibility(hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  public func accessibility(label: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  public func accessibility(hint: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  public func accessibility(inputLabels: [SwiftUI.Text]) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  public func accessibility(identifier: Swift.String) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  public func accessibility(sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: CoreGraphics.CGPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: SwiftUI.UnitPoint) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.DefaultGaugeStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct DefaultGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultGaugeStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public static func move(edge: SwiftUI.Edge) -> SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum AccessibilityAdjustmentDirection {
  case increment
  case decrement
  public static func == (a: SwiftUI.AccessibilityAdjustmentDirection, b: SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.CheckboxToggleStyle {
  @_alwaysEmitIntoClient public static var checkbox: SwiftUI.CheckboxToggleStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CheckboxToggleStyle : SwiftUI.ToggleStyle {
  public init()
  public func makeBody(configuration: SwiftUI.CheckboxToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19CheckboxToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct DismissAction {
  public func callAsFunction()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var dismiss: SwiftUI.DismissAction {
    get
  }
  public var isPresented: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableLayout : SwiftUI.Animatable {
  associatedtype StateType = Swift.Void
  static func initialState() -> Self.StateType
  func update(state: inout Self.StateType, proxy: inout SwiftUI._ScrollableLayoutProxy)
  associatedtype ItemModifier : SwiftUI.ViewModifier = SwiftUI.EmptyModifier
  func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUI._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
  func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.StateType == Swift.Void {
  public static func initialState() -> Self.StateType
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.ItemModifier == SwiftUI.EmptyModifier {
  public func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUI._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout {
  public func decelerationTarget(contentOffset: CoreGraphics.CGPoint, originalContentOffset: CoreGraphics.CGPoint, velocity: SwiftUI._Velocity<CoreGraphics.CGSize>, size: CoreGraphics.CGSize) -> CoreGraphics.CGPoint?
  public subscript<T>(data: T) -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<T, Self>> where T : Swift.RandomAccessCollection, T.Element : SwiftUI.View, T.Index : Swift.Hashable {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self : Swift.RandomAccessCollection, Self.Element : SwiftUI.View, Self.Index : Swift.Hashable {
  public subscript() -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<Self, Self>> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutProxy : Swift.RandomAccessCollection {
  public let size: CoreGraphics.CGSize
  public let visibleRect: CoreGraphics.CGRect
  public let count: Swift.Int
  public var visibleItems: [SwiftUI._ScrollableLayoutItem]
  public var contentSize: CoreGraphics.CGSize
  public var validRect: CoreGraphics.CGRect
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> Swift.AnyHashable {
    get
  }
  public mutating func size(of identifier: Swift.AnyHashable, in size: CoreGraphics.CGSize, validatingContent: Swift.Bool = true) -> CoreGraphics.CGSize
  public mutating func size(at index: Swift.Int, in size: CoreGraphics.CGSize, validatingContent: Swift.Bool = true) -> CoreGraphics.CGSize
  public mutating func removeSize(of identifier: Swift.AnyHashable)
  public mutating func removeAllSizes()
  public typealias Element = Swift.AnyHashable
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ScrollableLayoutProxy>
  public typealias SubSequence = Swift.Slice<SwiftUI._ScrollableLayoutProxy>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutItem : Swift.Equatable {
  public var id: Swift.AnyHashable
  public var proposedSize: CoreGraphics.CGSize {
    get
  }
  public var anchor: SwiftUI.UnitPoint {
    get
  }
  public var anchorPosition: CoreGraphics.CGPoint {
    get
  }
  public init(id: Swift.AnyHashable, proposedSize: CoreGraphics.CGSize, anchoring anchor: SwiftUI.UnitPoint = .topLeading, at position: CoreGraphics.CGPoint)
  public static func == (a: SwiftUI._ScrollableLayoutItem, b: SwiftUI._ScrollableLayoutItem) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Transaction {
  public init(animation: SwiftUI.Animation?)
  public var animation: SwiftUI.Animation? {
    get
    set
  }
  public var disablesAnimations: Swift.Bool {
    get
    set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarItemPresenceTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.TouchBarItemPresence? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.TouchBarItemPresence?
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func touchBarItemPresence(_ presence: SwiftUI.TouchBarItemPresence) -> some SwiftUI.View {
        return _trait(TouchBarItemPresenceTraitKey.self, presence)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarItemPrincipalTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func touchBarItemPrincipal(_ principal: Swift.Bool = true) -> some SwiftUI.View {
        return _trait(TouchBarItemPrincipalTraitKey.self, principal)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TouchBarCustomizationLabelTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.Text {
    get { Text("") }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.Text
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func touchBarCustomizationLabel(_ label: SwiftUI.Text) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _Rotation3DEffect : SwiftUI.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUI.Angle
  public var axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat)
  public var anchor: SwiftUI.UnitPoint
  public var anchorZ: CoreGraphics.CGFloat
  public var perspective: CoreGraphics.CGFloat
  @inlinable public init(angle: SwiftUI.Angle, axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat), anchor: SwiftUI.UnitPoint = .center, anchorZ: CoreGraphics.CGFloat = 0, perspective: CoreGraphics.CGFloat = 1) {
        self.angle = angle
        self.axis = axis
        self.anchor = anchor
        self.anchorZ = anchorZ
        self.perspective = perspective
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.Angle.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, SwiftUI.AnimatablePair<SwiftUI.UnitPoint.AnimatableData, SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>>>>>>
  public var animatableData: SwiftUI._Rotation3DEffect.AnimatableData {
    get
    set
  }
  public static func == (lhs: SwiftUI._Rotation3DEffect, rhs: SwiftUI._Rotation3DEffect) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func rotation3DEffect(_ angle: SwiftUI.Angle, axis: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat), anchor: SwiftUI.UnitPoint = .center, anchorZ: CoreGraphics.CGFloat = 0, perspective: CoreGraphics.CGFloat = 1) -> some SwiftUI.View {
        return modifier(_Rotation3DEffect(
            angle: angle, axis: axis, anchor: anchor, anchorZ: anchorZ,
            perspective: perspective
        ))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedValue<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
    case value(Value?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedValue<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
  @inlinable public var wrappedValue: Value? {
    get {
        if case .value(let value) = content {
            return value
        } else {
            return nil
        }
    }
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedBinding<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, SwiftUI.Binding<Value>?>)
    case value(SwiftUI.Binding<Value>?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedBinding<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, SwiftUI.Binding<Value>?>)
  @inlinable public var wrappedValue: Value? {
    get {
            if case .value(let value) = content {
                return value?.wrappedValue
            } else {
                return nil
            }
        }
    nonmutating set {
            if case .value(let value) = content, let newValue = newValue {
                value?.wrappedValue = newValue
            }
        }
  }
  public var projectedValue: SwiftUI.Binding<Value?> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol FocusedValueKey {
  associatedtype Value
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct FocusedValues {
  @usableFromInline
  internal init()
  public subscript<Key>(key: Key.Type) -> Key.Value? where Key : SwiftUI.FocusedValueKey {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FocusedValues : Swift.Equatable {
  public static func == (lhs: SwiftUI.FocusedValues, rhs: SwiftUI.FocusedValues) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _OverlayLayout {
  public init(contentIndex: Swift.Int? = nil)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.WheelPickerStyle {
  @_alwaysEmitIntoClient public static var wheel: SwiftUI.WheelPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WheelPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  @inlinable public func sequenced<Other>(before other: Other) -> SwiftUI.SequenceGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SequenceGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SequenceGesture<First, Second> : SwiftUI.Gesture where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(First.Value, Second.Value?)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.SequenceGesture<First, Second>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.SequenceGesture<First, Second>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SequenceGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SequenceGesture<First, Second>.Value, b: SwiftUI.SequenceGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IgnoredByLayoutEffect<Base> : SwiftUI.GeometryEffect where Base : SwiftUI.GeometryEffect {
  public var base: Base
  public static var _affectsLayout: Swift.Bool {
    get
  }
  @inlinable public init(_ base: Base) {
        self.base = base
    }
  public func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  public var animatableData: Base.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = Base.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._IgnoredByLayoutEffect : Swift.Equatable where Base : Swift.Equatable {
  public static func == (a: SwiftUI._IgnoredByLayoutEffect<Base>, b: SwiftUI._IgnoredByLayoutEffect<Base>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GeometryEffect {
  @inlinable public func ignoredByLayout() -> SwiftUI._IgnoredByLayoutEffect<Self> {
        return _IgnoredByLayoutEffect(self)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemGroup<Content> : SwiftUI.ToolbarContent where Content : SwiftUI.View {
  public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeContent(content: SwiftUI._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __Random : Swift.Equatable {
  public var seed: Swift.UInt32
  public init(seed: Swift.UInt32 = 0)
  public mutating func next() -> Swift.Double
  public mutating func next(_ mean: Swift.Double, range: Swift.Double) -> Swift.Double
  public mutating func normal() -> Swift.Double
  public mutating func normal(_ mean: Swift.Double, range: Swift.Double) -> Swift.Double
  public mutating func nextColor(mean: Swift.Double = 0.75, range: Swift.Double = 0.5) -> SwiftUI.Color
  public static func == (a: SwiftUI.__Random, b: SwiftUI.__Random) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct State<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUI.AnyLocation<Value>?
  public init(wrappedValue value: Value)
  @_alwaysEmitIntoClient public init(initialValue value: Value) {
        _value = value
    }
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.State where Value : Swift.ExpressibleByNilLiteral {
  @inlinable public init() {
        self.init(wrappedValue: nil)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public static func easeInOut(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeInOut: SwiftUI.Animation {
    get
  }
  public static func easeIn(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeIn: SwiftUI.Animation {
    get
  }
  public static func easeOut(duration: Swift.Double) -> SwiftUI.Animation
  public static var easeOut: SwiftUI.Animation {
    get
  }
  public static func linear(duration: Swift.Double) -> SwiftUI.Animation
  public static var linear: SwiftUI.Animation {
    get
  }
  public static func timingCurve(_ c0x: Swift.Double, _ c0y: Swift.Double, _ c1x: Swift.Double, _ c1y: Swift.Double, duration: Swift.Double = 0.35) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct Slider<Label, ValueLabel> : SwiftUI.View where Label : SwiftUI.View, ValueLabel : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6SliderV4bodyQrvp", 0) __<Label, ValueLabel>
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider {
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUI.EmptyView {
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where Label == SwiftUI.EmptyView, ValueLabel == SwiftUI.EmptyView {
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUI.EmptyView {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @_disfavoredOverload public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @_disfavoredOverload public init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public static func interpolatingSpring(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: Swift.Double = 0.0) -> SwiftUI.Animation
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandMenu<Content> : SwiftUI.Commands where Content : SwiftUI.View {
  @available(iOS 15.0, macOS 12.0, *)
  public static func _makeCommands(content: SwiftUI._GraphValue<SwiftUI.CommandMenu<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init(_ nameKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ name: SwiftUI.Text, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ name: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  public var body: some SwiftUI.Commands {
    get
  }
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11CommandMenuV4bodyQrvp", 0) __<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Picker<Label, SelectionValue, Content> : SwiftUI.View where Label : SwiftUI.View, SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6PickerV4bodyQrvp", 0) __<Label, SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @_alwaysEmitIntoClient public init(selection: SwiftUI.Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label) {
        self.init(selection: selection, label: label(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, selection: SwiftUI.Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, selection: SwiftUI.Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @available(iOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  public init(selection: SwiftUI.Binding<SelectionValue>, label: Label, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public func delay(_ delay: Swift.Double) -> SwiftUI.Animation
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityCustomContentKey {
  public init(_ label: SwiftUI.Text, id: Swift.String)
  public init(_ labelKey: SwiftUI.LocalizedStringKey, id: Swift.String)
  public init(_ labelKey: SwiftUI.LocalizedStringKey)
}
extension SwiftUI.AccessibilityCustomContentKey : Swift.Equatable {
  public static func == (a: SwiftUI.AccessibilityCustomContentKey, b: SwiftUI.AccessibilityCustomContentKey) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityCustomContent(_ key: SwiftUI.AccessibilityCustomContentKey, _ value: SwiftUI.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityCustomContent(_ key: SwiftUI.AccessibilityCustomContentKey, _ valueKey: SwiftUI.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ key: SwiftUI.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func accessibilityCustomContent(_ label: SwiftUI.Text, _ value: SwiftUI.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUI.LocalizedStringKey, _ value: SwiftUI.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUI.LocalizedStringKey, _ valueKey: SwiftUI.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ labelKey: SwiftUI.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityCustomContent(_ key: SwiftUI.AccessibilityCustomContentKey, _ value: SwiftUI.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityCustomContent(_ key: SwiftUI.AccessibilityCustomContentKey, _ valueKey: SwiftUI.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ key: SwiftUI.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  public func accessibilityCustomContent(_ label: SwiftUI.Text, _ value: SwiftUI.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUI.LocalizedStringKey, _ value: SwiftUI.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUI.LocalizedStringKey, _ valueKey: SwiftUI.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ labelKey: SwiftUI.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUI.ModifiedContent<Content, Modifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation {
  public func speed(_ speed: Swift.Double) -> SwiftUI.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum Edge : Swift.Int8, Swift.CaseIterable {
  case top, leading, bottom, trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.Edge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUI.Edge.Set
    public static let leading: SwiftUI.Edge.Set
    public static let bottom: SwiftUI.Edge.Set
    public static let trailing: SwiftUI.Edge.Set
    public static let all: SwiftUI.Edge.Set
    public static let horizontal: SwiftUI.Edge.Set
    public static let vertical: SwiftUI.Edge.Set
    public init(_ e: SwiftUI.Edge)
    public typealias ArrayLiteralElement = SwiftUI.Edge.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.Edge]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.Edge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Edge {
  @_alwaysEmitIntoClient internal init(vertical edge: SwiftUI.VerticalEdge) {
        self = Edge(rawValue: edge.rawValue << 1).unsafelyUnwrapped
    }
  @_alwaysEmitIntoClient internal init(horizontal edge: SwiftUI.HorizontalEdge) {
        self = Edge(rawValue: 1 &+ (edge.rawValue << 1)).unsafelyUnwrapped
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum HorizontalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case leading
  case trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.HorizontalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let leading: SwiftUI.HorizontalEdge.Set
    public static let trailing: SwiftUI.HorizontalEdge.Set
    public static let all: SwiftUI.HorizontalEdge.Set
    public init(_ edge: SwiftUI.HorizontalEdge)
    public typealias ArrayLiteralElement = SwiftUI.HorizontalEdge.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.HorizontalEdge]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.HorizontalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum VerticalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case top
  case bottom
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.VerticalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUI.VerticalEdge.Set
    public static let bottom: SwiftUI.VerticalEdge.Set
    public static let all: SwiftUI.VerticalEdge.Set
    public init(_ e: SwiftUI.VerticalEdge)
    public typealias ArrayLiteralElement = SwiftUI.VerticalEdge.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.VerticalEdge]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.VerticalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct ContainerBackgroundTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.AnyView? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.AnyView?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Toggle<Label> : SwiftUI.View where Label : SwiftUI.View {
  public init(isOn: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ToggleV4bodyQrvp", 0) __<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.ToggleStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public init(_ configuration: SwiftUI.ToggleStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, isOn: SwiftUI.Binding<Swift.Bool>)
  @_disfavoredOverload public init<S>(_ title: S, isOn: SwiftUI.Binding<Swift.Bool>) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public protocol TimelineSchedule {
  typealias Mode = SwiftUI.TimelineScheduleMode
  associatedtype Entries : Swift.Sequence where Self.Entries.Element == Foundation.Date
  func entries(from startDate: Foundation.Date, mode: Self.Mode) -> Self.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum TimelineScheduleMode {
  case normal
  case lowFrequency
  public static func == (a: SwiftUI.TimelineScheduleMode, b: SwiftUI.TimelineScheduleMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineSchedule where Self == SwiftUI.PeriodicTimelineSchedule {
  @_alwaysEmitIntoClient public static func periodic(from startDate: Foundation.Date, by interval: Foundation.TimeInterval) -> SwiftUI.PeriodicTimelineSchedule {
        .init(from: startDate, by: interval)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineSchedule where Self == SwiftUI.EveryMinuteTimelineSchedule {
  @_alwaysEmitIntoClient public static var everyMinute: SwiftUI.EveryMinuteTimelineSchedule {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineSchedule {
  @_alwaysEmitIntoClient public static func explicit<S>(_ dates: S) -> SwiftUI.ExplicitTimelineSchedule<S> where Self == SwiftUI.ExplicitTimelineSchedule<S>, S : Swift.Sequence, S.Element == Foundation.Date {
        .init(dates)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct PeriodicTimelineSchedule : SwiftUI.TimelineSchedule {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol {
    public mutating func next() -> Foundation.Date?
    public typealias Element = Foundation.Date
    public typealias Iterator = SwiftUI.PeriodicTimelineSchedule.Entries
  }
  public init(from startDate: Foundation.Date, by interval: Foundation.TimeInterval)
  public func entries(from startDate: Foundation.Date, mode: SwiftUI.TimelineScheduleMode) -> SwiftUI.PeriodicTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct EveryMinuteTimelineSchedule : SwiftUI.TimelineSchedule {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol {
    public mutating func next() -> Foundation.Date?
    public typealias Element = Foundation.Date
    public typealias Iterator = SwiftUI.EveryMinuteTimelineSchedule.Entries
  }
  public init()
  public func entries(from startDate: Foundation.Date, mode: SwiftUI.TimelineScheduleMode) -> SwiftUI.EveryMinuteTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ExplicitTimelineSchedule<Entries> : SwiftUI.TimelineSchedule where Entries : Swift.Sequence, Entries.Element == Foundation.Date {
  public init(_ dates: Entries)
  public func entries(from startDate: Foundation.Date, mode: SwiftUI.TimelineScheduleMode) -> Entries
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct GestureState<Value> : SwiftUI.DynamicProperty {
  fileprivate var state: SwiftUI.State<Value>
  fileprivate let reset: (SwiftUI.Binding<Value>) -> Swift.Void
  public init(wrappedValue: Value)
  @_alwaysEmitIntoClient public init(initialValue: Value) {
        self.init(wrappedValue: initialValue, resetTransaction: Transaction())
    }
  public init(wrappedValue: Value, resetTransaction: SwiftUI.Transaction)
  @_alwaysEmitIntoClient public init(initialValue: Value, resetTransaction: SwiftUI.Transaction) {
      self.init(wrappedValue: initialValue, resetTransaction: resetTransaction)
    }
  public init(wrappedValue: Value, reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void)
  @_alwaysEmitIntoClient public init(initialValue: Value, reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void) {
      self.init(wrappedValue: initialValue, reset: reset)
    }
  public var wrappedValue: Value {
    get
  }
  public var projectedValue: SwiftUI.GestureState<Value> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureState where Value : Swift.ExpressibleByNilLiteral {
  public init(resetTransaction: SwiftUI.Transaction = Transaction())
  public init(reset: @escaping (Value, inout SwiftUI.Transaction) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Gesture {
  @inlinable public func updating<State>(_ state: SwiftUI.GestureState<State>, body: @escaping (Self.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void) -> SwiftUI.GestureStateGesture<Self, State> {
        return .init(base: self, state: state, body: body)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureStateGesture<Base, State> : SwiftUI.Gesture where Base : SwiftUI.Gesture {
  public typealias Value = Base.Value
  public var base: Base
  public var state: SwiftUI.GestureState<State>
  public var body: (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void
  @inlinable public init(base: Base, state: SwiftUI.GestureState<State>, body: @escaping (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUI.Transaction) -> Swift.Void) {
        self.base = base
        self.state = state
        self.body = body
    }
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.GestureStateGesture<Base, State>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.GestureStateGesture<Base, State>.Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowBackgroundTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.AnyView? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.AnyView?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func listRowBackground<V>(_ view: V?) -> some SwiftUI.View where V : SwiftUI.View {
        return _trait(ListRowBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font {
  public func italic() -> SwiftUI.Font
  public func smallCaps() -> SwiftUI.Font
  public func lowercaseSmallCaps() -> SwiftUI.Font
  public func uppercaseSmallCaps() -> SwiftUI.Font
  public func monospacedDigit() -> SwiftUI.Font
  public func weight(_ weight: SwiftUI.Font.Weight) -> SwiftUI.Font
  public func bold() -> SwiftUI.Font
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospaced() -> SwiftUI.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func leading(_ leading: SwiftUI.Font.Leading) -> SwiftUI.Font
  @available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "leading")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "leading")
  public func _leading(_ leading: SwiftUI.Font._Leading) -> SwiftUI.Font
  public func _stylisticAlternative(_ alternative: SwiftUI.Font._StylisticAlternative) -> SwiftUI.Font
  @frozen public struct Weight : Swift.Hashable {
    internal var value: CoreGraphics.CGFloat
    public static let ultraLight: SwiftUI.Font.Weight
    public static let thin: SwiftUI.Font.Weight
    public static let light: SwiftUI.Font.Weight
    public static let regular: SwiftUI.Font.Weight
    public static let medium: SwiftUI.Font.Weight
    public static let semibold: SwiftUI.Font.Weight
    public static let bold: SwiftUI.Font.Weight
    public static let heavy: SwiftUI.Font.Weight
    public static let black: SwiftUI.Font.Weight
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.Font.Weight, b: SwiftUI.Font.Weight) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _StylisticAlternative : Swift.Int, Swift.Hashable {
    case one
    case two
    case three
    case four
    case five
    case six
    case seven
    case eight
    case nine
    case ten
    case eleven
    case twelve
    case thirteen
    case fourteen
    case fifteen
    case sixteen
    case seventeen
    case eighteen
    case nineteen
    case twenty
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Leading {
    case standard
    case tight
    case loose
    public static func == (a: SwiftUI.Font.Leading, b: SwiftUI.Font.Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _Leading : Swift.Hashable {
    case tight
    case loose
    case standard
    public static func == (a: SwiftUI.Font._Leading, b: SwiftUI.Font._Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transition(_ t: SwiftUI.AnyTransition) -> some SwiftUI.View {
        return _trait(TransitionTraitKey.self, t)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct TransitionTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.AnyTransition {
    get { .opacity }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.AnyTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct CanTransitionTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnyTransition {
  fileprivate let box: SwiftUI.AnyTransitionBox
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnyTransitionBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  public var menuIndicatorVisibility: SwiftUI.Visibility {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @inlinable public func menuIndicator(_ visibility: SwiftUI.Visibility) -> some SwiftUI.View {
        environment(\.menuIndicatorVisibility, visibility)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.CarouselListStyle {
  @_alwaysEmitIntoClient public static var carousel: SwiftUI.CarouselListStyle {
    get { .init() }
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct CarouselListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func zIndex(_ value: Swift.Double) -> some SwiftUI.View {
        return _trait(ZIndexTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ZIndexTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _SafeAreaIgnoringLayout {
  public var edges: SwiftUI.Edge.Set
  @inlinable public init(edges: SwiftUI.Edge.Set = .all) {
        self.edges = edges
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _SafeAreaRegionsIgnoringLayout {
  public var regions: SwiftUI.SafeAreaRegions
  public var edges: SwiftUI.Edge.Set
  @inlinable internal init(regions: SwiftUI.SafeAreaRegions, edges: SwiftUI.Edge.Set) {
        self.regions = regions
        self.edges = edges
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
extension SwiftUI.View {
  @inlinable public func edgesIgnoringSafeArea(_ edges: SwiftUI.Edge.Set) -> some SwiftUI.View {
        return modifier(_SafeAreaIgnoringLayout(edges: edges))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func ignoresSafeArea(_ regions: SwiftUI.SafeAreaRegions = .all, edges: SwiftUI.Edge.Set = .all) -> some SwiftUI.View {
        return modifier(_SafeAreaRegionsIgnoringLayout(
            regions: regions, edges: edges))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct UnitPoint : Swift.Hashable {
  public var x: CoreGraphics.CGFloat
  public var y: CoreGraphics.CGFloat
  @inlinable public init() {
        self.init(x: 0, y: 0)
    }
  @inlinable public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) {
        self.x = x
        self.y = y
    }
  public static let zero: SwiftUI.UnitPoint
  public static let center: SwiftUI.UnitPoint
  public static let leading: SwiftUI.UnitPoint
  public static let trailing: SwiftUI.UnitPoint
  public static let top: SwiftUI.UnitPoint
  public static let bottom: SwiftUI.UnitPoint
  public static let topLeading: SwiftUI.UnitPoint
  public static let topTrailing: SwiftUI.UnitPoint
  public static let bottomLeading: SwiftUI.UnitPoint
  public static let bottomTrailing: SwiftUI.UnitPoint
  public static func == (a: SwiftUI.UnitPoint, b: SwiftUI.UnitPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.UnitPoint : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: SwiftUI.UnitPoint.AnimatableData {
    get
    set
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) @propertyWrapper public struct NSApplicationDelegateAdaptor<DelegateType> : SwiftUI.DynamicProperty where DelegateType : ObjectiveC.NSObject, DelegateType : AppKit.NSApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public var wrappedValue: DelegateType {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSApplicationDelegateAdaptor where DelegateType : Combine.ObservableObject {
  @_Concurrency.MainActor(unsafe) public init(_ delegateType: DelegateType.Type = DelegateType.self)
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.ObservedObject<DelegateType>.Wrapper {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceWritingModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var value: Key.Value
  public typealias Body = Swift.Never
  @inlinable public init(key: Key.Type = Key.self, value: Key.Value) {
        self.value = value
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceWritingModifier<Key>>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PreferenceWritingModifier : Swift.Equatable where Key.Value : Swift.Equatable {
  public static func == (a: SwiftUI._PreferenceWritingModifier<Key>, b: SwiftUI._PreferenceWritingModifier<Key>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PickerStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PickerValue<Style, SelectionValue> where Style : SwiftUI.PickerStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func pickerStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.PickerStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ListStyle {
  static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ListValue<Style, SelectionValue> where Style : SwiftUI.ListStyle, SelectionValue : Swift.Hashable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func listStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ListStyle
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.DefaultMenuStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultMenuStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultMenuStyle : SwiftUI.MenuStyle {
  public init()
  public func makeBody(configuration: SwiftUI.DefaultMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16DefaultMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableViewModifier : Swift.Decodable, Swift.Encodable, SwiftUI.ViewModifier {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivableViewModifier {
  public static func registerDecoder()
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneInputs {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
public struct PresentationMode {
  public var isPresented: Swift.Bool {
    get
  }
  public mutating func dismiss()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  public var presentationMode: SwiftUI.Binding<SwiftUI.PresentationMode> {
    get
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MenuButton<Label, Content> : SwiftUI.View where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10MenuButtonV4bodyQrvp", 0) __<Label, Content>
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MenuButton where Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(tvOS 15.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func focusSection() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemPlacement {
  public static let automatic: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let principal: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let navigation: SwiftUI.ToolbarItemPlacement
  public static let primaryAction: SwiftUI.ToolbarItemPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let status: SwiftUI.ToolbarItemPlacement
  public static let confirmationAction: SwiftUI.ToolbarItemPlacement
  public static let cancellationAction: SwiftUI.ToolbarItemPlacement
  public static let destructiveAction: SwiftUI.ToolbarItemPlacement
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let keyboard: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let navigationBarLeading: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let navigationBarTrailing: SwiftUI.ToolbarItemPlacement
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let bottomBar: SwiftUI.ToolbarItemPlacement
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GraphInputs {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _GraphInputsModifier {
  static func _makeInputs(modifier: SwiftUI._GraphValue<Self>, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Anchor.Source where Value == CoreGraphics.CGRect {
  public static func rect(_ r: CoreGraphics.CGRect) -> SwiftUI.Anchor<Value>.Source
  public static var bounds: SwiftUI.Anchor<CoreGraphics.CGRect>.Source {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ViewDimensions {
  public var width: CoreGraphics.CGFloat {
    get
  }
  public var height: CoreGraphics.CGFloat {
    get
  }
  public subscript(guide: SwiftUI.HorizontalAlignment) -> CoreGraphics.CGFloat {
    get
  }
  public subscript(guide: SwiftUI.VerticalAlignment) -> CoreGraphics.CGFloat {
    get
  }
  public subscript(explicit guide: SwiftUI.HorizontalAlignment) -> CoreGraphics.CGFloat? {
    get
  }
  public subscript(explicit guide: SwiftUI.VerticalAlignment) -> CoreGraphics.CGFloat? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewDimensions : Swift.Equatable {
  public static func == (lhs: SwiftUI.ViewDimensions, rhs: SwiftUI.ViewDimensions) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol TextFieldStyle {
  associatedtype _Body : SwiftUI.View
  @SwiftUI.ViewBuilder func _body(configuration: SwiftUI.TextField<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._TextFieldStyleLabel
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TextFieldStyleLabel : SwiftUI.View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func textFieldStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.TextFieldStyle
  
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ControlSize : Swift.CaseIterable {
  case mini
  case small
  case regular
  @available(macOS 11.0, *)
  case large
  public static var allCases: [SwiftUI.ControlSize] {
    get
  }
  public static func == (a: SwiftUI.ControlSize, b: SwiftUI.ControlSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftUI.ControlSize]
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var controlSize: SwiftUI.ControlSize {
    get
    set
  }
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable public func controlSize(_ controlSize: SwiftUI.ControlSize) -> some SwiftUI.View {
        return environment(\.controlSize, controlSize)
    }
  
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedButtonStyle {
  @_alwaysEmitIntoClient public static var bordered: SwiftUI.BorderedButtonStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct BorderedButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.BorderedButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19BorderedButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonBorderShape : Swift.Equatable {
  public static let automatic: SwiftUI.ButtonBorderShape
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static let capsule: SwiftUI.ButtonBorderShape
  public static let roundedRectangle: SwiftUI.ButtonBorderShape
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static func roundedRectangle(radius: CoreGraphics.CGFloat) -> SwiftUI.ButtonBorderShape
  public static func == (a: SwiftUI.ButtonBorderShape, b: SwiftUI.ButtonBorderShape) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func buttonBorderShape(_ shape: SwiftUI.ButtonBorderShape) -> some SwiftUI.View {
        environment(\._buttonBorderShape, shape)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var _buttonBorderShape: SwiftUI.ButtonBorderShape {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.InlinePickerStyle {
  @_alwaysEmitIntoClient public static var inline: SwiftUI.InlinePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct InlinePickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor(unsafe) open class NSHostingView<Content> : AppKit.NSView, AppKit.NSUserInterfaceValidations, AppKit.NSDraggingSource where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) required public init(rootView: Content)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public var _rendererConfiguration: SwiftUI._RendererConfiguration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc final override public var isFlipped: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func renewGState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var firstBaselineOffsetFromTop: CoreGraphics.CGFloat {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var lastBaselineOffsetFromBottom: CoreGraphics.CGFloat {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) open var firstTextLineCenter: CoreGraphics.CGFloat? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: Foundation.NSSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var requiresConstraintBasedLayout: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layerContentsRedrawPolicy: AppKit.NSView.LayerContentsRedrawPolicy {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setFrameSize(_ newSize: Foundation.NSSize)
  @_Concurrency.MainActor(unsafe) public var rootView: Content {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidChangeBackingProperties()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidChangeEffectiveAppearance()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var userInterfaceLayoutDirection: AppKit.NSUserInterfaceLayoutDirection {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillMove(toWindow newWindow: AppKit.NSWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidMoveToSuperview()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: Foundation.NSPoint) -> AppKit.NSView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var needsPanelToBecomeKey: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func magnify(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rotate(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func performKeyEquivalent(with event: AppKit.NSEvent) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseEntered(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseExited(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollWheel(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func menu(for event: AppKit.NSEvent) -> AppKit.NSMenu?
  @objc override dynamic open var accessibilityFocusedUIElement: Any? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityChildren() -> [Any]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityChildrenInNavigationOrder() -> [AppKit.NSAccessibilityElementProtocol]?
  @objc override dynamic open func accessibilityHitTest(_ point: Foundation.NSPoint) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var acceptsFirstResponder: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc public func validateUserInterfaceItem(_ item: AppKit.NSValidatedUserInterfaceItem) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func keyDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func doCommand(by selector: ObjectiveC.Selector)
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector!) -> Swift.Bool
  @objc override dynamic open func forwardingTarget(for selector: ObjectiveC.Selector!) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func validRequestor(forSendType sendType: AppKit.NSPasteboard.PasteboardType?, returnType: AppKit.NSPasteboard.PasteboardType?) -> Any?
  @_Concurrency.MainActor(unsafe) @objc public func draggingSession(_ session: AppKit.NSDraggingSession, sourceOperationMaskFor context: AppKit.NSDraggingContext) -> AppKit.NSDragOperation
  @_Concurrency.MainActor(unsafe) @objc public func draggingSession(_ session: AppKit.NSDraggingSession, willBeginAt screenPoint: Foundation.NSPoint)
  @_Concurrency.MainActor(unsafe) @objc public func draggingSession(_ session: AppKit.NSDraggingSession, endedAt screenPoint: Foundation.NSPoint, operation: AppKit.NSDragOperation)
}
extension SwiftUI.NSHostingView {
  @_Concurrency.MainActor(unsafe) final public func _viewDebugData() -> [SwiftUI._ViewDebug.Data]
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSHostingView {
  @_Concurrency.MainActor(unsafe) public func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor(unsafe) public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.SwitchToggleStyle {
  @_alwaysEmitIntoClient public static var `switch`: SwiftUI.SwitchToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct SwitchToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.SwitchToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17SwitchToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.LinearProgressViewStyle {
  @_alwaysEmitIntoClient public static var linear: SwiftUI.LinearProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LinearProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.LinearProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23LinearProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnyTransition {
  public func animation(_ animation: SwiftUI.Animation?) -> SwiftUI.AnyTransition
}
@available(iOS, unavailable)
@available(macOS, deprecated, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias PullDownButton = SwiftUI._PullDownButton
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PullDownButton<Label, Content> where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(iOS, unavailable)
@available(macOS, deprecated, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._PullDownButton where Label == SwiftUI.Text {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WidgetConfiguration {
  associatedtype Body : SwiftUI.WidgetConfiguration
  var body: Self.Body { get }
  static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  public static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.WidgetConfiguration {
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.GroupedListStyle {
  @_alwaysEmitIntoClient public static var grouped: SwiftUI.GroupedListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct GroupedListStyle : SwiftUI.ListStyle {
  public init()
  public static func _sectionInset(_ sectionInset: SwiftUI.EdgeInsets) -> SwiftUI.GroupedListStyle
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
  }
  public var _accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceTransparency: Swift.Bool {
    get
  }
  public var _accessibilityReduceTransparency: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceMotion: Swift.Bool {
    get
  }
  public var _accessibilityReduceMotion: Swift.Bool {
    get
    set
  }
  public var accessibilityInvertColors: Swift.Bool {
    get
  }
  public var _accessibilityInvertColors: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.EnvironmentValues {
  public var accessibilityShowButtonShapes: Swift.Bool {
    get
  }
  public var _accessibilityShowButtonShapes: Swift.Bool {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var accessibilityVoiceOverEnabled: Swift.Bool {
    get
  }
  public var accessibilitySwitchControlEnabled: Swift.Bool {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WidgetBundle {
  associatedtype Body : SwiftUI.Widget
  init()
  @SwiftUI.WidgetBundleBuilder var body: Self.Body { get }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct WindowGroup<Content> : SwiftUI.Scene where Content : SwiftUI.View {
  public init(id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init(_ title: SwiftUI.Text, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, id: Swift.String, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init(_ title: SwiftUI.Text, @SwiftUI.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, @SwiftUI.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.Scene {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11WindowGroupV4bodyQrvp", 0) __<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ClipEffect<ClipShape> where ClipShape : SwiftUI.Shape {
  public var shape: ClipShape
  public var style: SwiftUI.FillStyle
  @inlinable public init(shape: ClipShape, style: SwiftUI.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
    }
  public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = ClipShape.AnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func clipShape<S>(_ shape: S, style: SwiftUI.FillStyle = FillStyle()) -> some SwiftUI.View where S : SwiftUI.Shape {
        return modifier(_ClipEffect(shape: shape, style: style))
    }
  
  @inlinable public func clipped(antialiased: Swift.Bool = false) -> some SwiftUI.View {
        return clipShape(Rectangle(),
            style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func cornerRadius(_ radius: CoreGraphics.CGFloat, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return clipShape(RoundedRectangle(cornerRadius: radius),
            style: FillStyle(antialiased: antialiased))
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct _WKStoryboardContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_WKStoryboardContentV4bodyQrvp", 0) __
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableRow<Value> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public typealias TableRowBody = Swift.Never
  public init(_ value: Value)
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  public static func _makeRows(content: SwiftUI._GraphValue<SwiftUI.TableRow<Value>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.ImagePaint {
  @_alwaysEmitIntoClient public static func image(_ image: SwiftUI.Image, sourceRect: CoreGraphics.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreGraphics.CGFloat = 1) -> SwiftUI.ImagePaint {
        .init(image: image, sourceRect: sourceRect, scale: scale)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ImagePaint : SwiftUI.ShapeStyle {
  public var image: SwiftUI.Image
  public var sourceRect: CoreGraphics.CGRect
  public var scale: CoreGraphics.CGFloat
  public init(image: SwiftUI.Image, sourceRect: CoreGraphics.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreGraphics.CGFloat = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Never {
  public typealias Body = Swift.Never
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Optional : SwiftUI.Gesture where Wrapped : SwiftUI.Gesture {
  public typealias Value = Wrapped.Value
  public static func _makeGesture(gesture: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Wrapped.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowInsetsTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.EdgeInsets? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.EdgeInsets?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func listRowInsets(_ insets: SwiftUI.EdgeInsets?) -> some SwiftUI.View {
        return _trait(ListRowInsetsTraitKey.self, insets)
    }
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.TableStyleConfiguration
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableStyleConfiguration {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func tableStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.TableStyle
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
public struct ActionSheet {
  public init(title: SwiftUI.Text, message: SwiftUI.Text? = nil, buttons: [SwiftUI.ActionSheet.Button] = [.cancel()])
  public typealias Button = SwiftUI.Alert.Button
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  public func actionSheet<T>(item: SwiftUI.Binding<T?>, content: (T) -> SwiftUI.ActionSheet) -> some SwiftUI.View where T : Swift.Identifiable
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  public func actionSheet(isPresented: SwiftUI.Binding<Swift.Bool>, content: () -> SwiftUI.ActionSheet) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct Environment<Value> : SwiftUI.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.EnvironmentValues, Value>)
    case value(Value)
  }
  @usableFromInline
  internal var content: SwiftUI.Environment<Value>.Content
  @inlinable public init(_ keyPath: Swift.KeyPath<SwiftUI.EnvironmentValues, Value>) {
        content = .keyPath(keyPath)
    }
  @inlinable public var wrappedValue: Value {
    get {
        switch content {
        case let .value(value):
            return value
        case let .keyPath(keyPath):
            // not bound to a view, return the default value.
            return EnvironmentValues()[keyPath: keyPath]
        }
    }
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ButtonGesture : SwiftUI.Gesture {
  public var action: () -> Swift.Void
  public var pressingAction: ((Swift.Bool) -> Swift.Void)?
  public init(action: @escaping () -> Swift.Void, pressing: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI._ButtonGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<Swift.Void>
  public typealias Body = Swift.Never
  public typealias Value = ()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func _onButtonGesture(pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneOutputs {
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderedButtonMenuStyle {
  @_alwaysEmitIntoClient public static var borderedButton: SwiftUI.BorderedButtonMenuStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderedButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  public func makeBody(configuration: SwiftUI.BorderedButtonMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23BorderedButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderlessButtonMenuStyle {
  @_alwaysEmitIntoClient public static var borderlessButton: SwiftUI.BorderlessButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderlessButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use ``View/menuIndicator(_)`` instead.")
  public init(showsMenuIndicator: Swift.Bool)
  public func makeBody(configuration: SwiftUI.BorderlessButtonMenuStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25BorderlessButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text {
  public enum TruncationMode {
    case head
    case tail
    case middle
    public static func == (a: SwiftUI.Text.TruncationMode, b: SwiftUI.Text.TruncationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Case {
    case uppercase
    case lowercase
    public static func == (a: SwiftUI.Text.Case, b: SwiftUI.Text.Case) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var multilineTextAlignment: SwiftUI.TextAlignment {
    get
    set
  }
  public var truncationMode: SwiftUI.Text.TruncationMode {
    get
    set
  }
  public var lineSpacing: CoreGraphics.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "lineHeightMultiple")
  public var _lineHeightMultiple: CoreGraphics.CGFloat {
    get
    set
  }
  public var allowsTightening: Swift.Bool {
    get
    set
  }
  public var lineLimit: Swift.Int? {
    get
    set
  }
  public var minimumScaleFactor: CoreGraphics.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var textCase: SwiftUI.Text.Case? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func multilineTextAlignment(_ alignment: SwiftUI.TextAlignment) -> some SwiftUI.View {
        return environment(\.multilineTextAlignment, alignment)
    }
  
  @inlinable public func truncationMode(_ mode: SwiftUI.Text.TruncationMode) -> some SwiftUI.View {
        return environment(\.truncationMode, mode)
    }
  
  @inlinable public func lineSpacing(_ lineSpacing: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.lineSpacing, lineSpacing)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "lineHeightMultiple")
  @inlinable public func _lineHeightMultiple(_ multiple: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\._lineHeightMultiple, multiple)
    }
  
  @inlinable public func allowsTightening(_ flag: Swift.Bool) -> some SwiftUI.View {
        return environment(\.allowsTightening, flag)
    }
  
  @inlinable public func lineLimit(_ number: Swift.Int?) -> some SwiftUI.View {
        return environment(\.lineLimit, number)
    }
  
  @inlinable public func minimumScaleFactor(_ factor: CoreGraphics.CGFloat) -> some SwiftUI.View {
        return environment(\.minimumScaleFactor, factor)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable public func textCase(_ textCase: SwiftUI.Text.Case?) -> some SwiftUI.View {
        environment(\.textCase, textCase)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper @dynamicMemberLookup public struct Binding<Value> {
  public var transaction: SwiftUI.Transaction
  internal var location: SwiftUI.AnyLocation<Value>
  fileprivate var _value: Value
  public init(get: @escaping () -> Value, set: @escaping (Value) -> Swift.Void)
  public init(get: @escaping () -> Value, set: @escaping (Value, SwiftUI.Transaction) -> Swift.Void)
  public static func constant(_ value: Value) -> SwiftUI.Binding<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
  @_alwaysEmitIntoClient public init(projectedValue: SwiftUI.Binding<Value>) {
        self = projectedValue
    }
  public subscript<Subject>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Subject>) -> SwiftUI.Binding<Subject> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Binding : Swift.Identifiable where Value : Swift.Identifiable {
  public var id: Value.ID {
    get
  }
  public typealias ID = Value.ID
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Binding : Swift.Sequence where Value : Swift.MutableCollection {
  public typealias Element = SwiftUI.Binding<Value.Element>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.Binding<Value>>
  public typealias SubSequence = Swift.Slice<SwiftUI.Binding<Value>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Binding : Swift.Collection where Value : Swift.MutableCollection {
  public typealias Index = Value.Index
  public typealias Indices = Value.Indices
  public var startIndex: SwiftUI.Binding<Value>.Index {
    get
  }
  public var endIndex: SwiftUI.Binding<Value>.Index {
    get
  }
  public var indices: Value.Indices {
    get
  }
  public func index(after i: SwiftUI.Binding<Value>.Index) -> SwiftUI.Binding<Value>.Index
  public func formIndex(after i: inout SwiftUI.Binding<Value>.Index)
  public subscript(position: SwiftUI.Binding<Value>.Index) -> SwiftUI.Binding<Value>.Element {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Binding : Swift.BidirectionalCollection where Value : Swift.BidirectionalCollection, Value : Swift.MutableCollection {
  public func index(before i: SwiftUI.Binding<Value>.Index) -> SwiftUI.Binding<Value>.Index
  public func formIndex(before i: inout SwiftUI.Binding<Value>.Index)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Binding : Swift.RandomAccessCollection where Value : Swift.MutableCollection, Value : Swift.RandomAccessCollection {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Binding {
  public func transaction(_ transaction: SwiftUI.Transaction) -> SwiftUI.Binding<Value>
  public func animation(_ animation: SwiftUI.Animation? = .default) -> SwiftUI.Binding<Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Binding : SwiftUI.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public enum Axis : Swift.Int8, Swift.CaseIterable {
  case horizontal
  case vertical
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.Axis.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let horizontal: SwiftUI.Axis.Set
    public static let vertical: SwiftUI.Axis.Set
    public typealias ArrayLiteralElement = SwiftUI.Axis.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  public typealias AllCases = [SwiftUI.Axis]
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.Axis] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.BorderedListStyle {
  @_alwaysEmitIntoClient public static var bordered: SwiftUI.BorderedListStyle {
    get {
        .init(alternatesRowBackgrounds: false)
    }
  }
  @_alwaysEmitIntoClient public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BorderedListStyle : SwiftUI.ListStyle {
  public init()
  public init(alternatesRowBackgrounds: Swift.Bool)
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct TupleCommandContent<T> : SwiftUI.Commands {
  @usableFromInline
  internal var body: Swift.Never {
    get
  }
  @available(iOS 15.0, macOS 12.0, *)
  @usableFromInline
  internal static func _makeCommands(content: SwiftUI._GraphValue<SwiftUI.TupleCommandContent<T>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  internal func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Group : SwiftUI.Commands where Content : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  public static func _makeCommands(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @inlinable public init(@SwiftUI.CommandsBuilder content: () -> Content) {
        self.content = content()
    }
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public enum ResizingMode {
    case tile
    case stretch
    public static func == (a: SwiftUI.Image.ResizingMode, b: SwiftUI.Image.ResizingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func resizable(capInsets: SwiftUI.EdgeInsets = EdgeInsets(), resizingMode: SwiftUI.Image.ResizingMode = .stretch) -> SwiftUI.Image
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ShapeStyle where Self == SwiftUI.SeparatorShapeStyle {
  @_alwaysEmitIntoClient public static var separator: SwiftUI.SeparatorShapeStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SeparatorShapeStyle : SwiftUI.ShapeStyle {
  public init()
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI.SeparatorShapeStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SeparatorShapeStyle {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _SystemShapeStyle : SwiftUI.ShapeStyle {
  public static let primaryFill: SwiftUI._SystemShapeStyle
  public static let secondaryFill: SwiftUI._SystemShapeStyle
  public static let tertiaryFill: SwiftUI._SystemShapeStyle
  public static let quaternaryFill: SwiftUI._SystemShapeStyle
  public static func _makeView<S>(view: SwiftUI._GraphValue<SwiftUI._ShapeView<S, SwiftUI._SystemShapeStyle>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where S : SwiftUI.Shape
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._SystemShapeStyle {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct DragGesture : SwiftUI.Gesture {
  public struct Value : Swift.Equatable {
    public var time: Foundation.Date
    public var location: CoreGraphics.CGPoint
    public var startLocation: CoreGraphics.CGPoint
    public var translation: CoreGraphics.CGSize {
      get
    }
    public var predictedEndLocation: CoreGraphics.CGPoint {
      get
    }
    public var predictedEndTranslation: CoreGraphics.CGSize {
      get
    }
    public static func == (a: SwiftUI.DragGesture.Value, b: SwiftUI.DragGesture.Value) -> Swift.Bool
  }
  public var minimumDistance: CoreGraphics.CGFloat
  public var coordinateSpace: SwiftUI.CoordinateSpace
  public init(minimumDistance: CoreGraphics.CGFloat = 10, coordinateSpace: SwiftUI.CoordinateSpace = .local)
  public static func _makeGesture(gesture: SwiftUI._GraphValue<SwiftUI.DragGesture>, inputs: SwiftUI._GestureInputs) -> SwiftUI._GestureOutputs<SwiftUI.DragGesture.Value>
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BackdropEffect<Backdrop> where Backdrop : SwiftUI.View {
  @usableFromInline
  internal var backdrop: Backdrop
  @inlinable internal init(backdrop: Backdrop) {
        self.backdrop = backdrop
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._BackdropEffect<Backdrop>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _BackdropEffectPlaceholder {
  @inlinable internal init() {}
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._BackdropEffectPlaceholder>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol Scene {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor(unsafe) var body: Self.Body { get }
  static func _makeScene(scene: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  public static func _makeScene(scene: SwiftUI._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
extension Swift.Never : SwiftUI.Scene {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_typeEraser(AnyView) public protocol View {
  static func _makeView(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  static func _makeViewList(view: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder @_Concurrency.MainActor(unsafe) var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Never : SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _UnaryViewAdaptor<Content> : SwiftUI.View where Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(_ content: Content) { self.content = content }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._UnaryViewAdaptor<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  public init(_ cgImage: CoreGraphics.CGImage, scale: CoreGraphics.CGFloat, orientation: SwiftUI.Image.Orientation = .up, label: SwiftUI.Text)
  public init(decorative cgImage: CoreGraphics.CGImage, scale: CoreGraphics.CGFloat, orientation: SwiftUI.Image.Orientation = .up)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityValue(_ valueDescription: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityValue(_ valueKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload public func accessibilityValue<S>(_ value: S) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityValue(_ valueDescription: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityValue(_ valueKey: SwiftUI.LocalizedStringKey) -> SwiftUI.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityValue<S>(_ value: S) -> SwiftUI.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  public func accessibility(value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  public func accessibility(value: SwiftUI.Text) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ShapeStyle where Self == SwiftUI.SelectionShapeStyle {
  @_alwaysEmitIntoClient public static var selection: SwiftUI.SelectionShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SelectionShapeStyle : SwiftUI.ShapeStyle {
  @available(macOS 12.0, *)
  public init()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var accessibilityEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@inlinable @inline(__always) internal func asOptional<T>(_ value: T) -> T? {
    func unwrap<T>() -> T { value as! T }
    let optionalValue: T? = unwrap()
    return optionalValue
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum DynamicTypeSize : Swift.Hashable, Swift.Comparable, Swift.CaseIterable {
  case xSmall
  case small
  case medium
  case large
  case xLarge
  case xxLarge
  case xxxLarge
  case accessibility1
  case accessibility2
  case accessibility3
  case accessibility4
  case accessibility5
  public var isAccessibilitySize: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.DynamicTypeSize, b: SwiftUI.DynamicTypeSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SwiftUI.DynamicTypeSize, b: SwiftUI.DynamicTypeSize) -> Swift.Bool
  public typealias AllCases = [SwiftUI.DynamicTypeSize]
  public static var allCases: [SwiftUI.DynamicTypeSize] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  public var dynamicTypeSize: SwiftUI.DynamicTypeSize {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func dynamicTypeSize(_ size: SwiftUI.DynamicTypeSize) -> some SwiftUI.View
  
  public func dynamicTypeSize<T>(_ range: T) -> some SwiftUI.View where T : Swift.RangeExpression, T.Bound == SwiftUI.DynamicTypeSize
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PreferenceTransformModifier<Key> : SwiftUI.ViewModifier where Key : SwiftUI.PreferenceKey {
  public var transform: (inout Key.Value) -> Swift.Void
  public typealias Body = Swift.Never
  @inlinable public init(key _: Key.Type = Key.self, transform: @escaping (inout Key.Value) -> Swift.Void) {
        self.transform = transform
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._PreferenceTransformModifier<Key>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.View where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleOnlyLabelStyle {
  @_alwaysEmitIntoClient public static var titleOnly: SwiftUI.TitleOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct TitleOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  public func makeBody(configuration: SwiftUI.TitleOnlyLabelStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TitleOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Rectangle : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct RoundedRectangle : SwiftUI.Shape {
  public var cornerSize: CoreGraphics.CGSize
  public var style: SwiftUI.RoundedCornerStyle
  @inlinable public init(cornerSize: CoreGraphics.CGSize, style: SwiftUI.RoundedCornerStyle = .circular) {
        self.cornerSize = cornerSize
        self.style = style
    }
  @inlinable public init(cornerRadius: CoreGraphics.CGFloat, style: SwiftUI.RoundedCornerStyle = .circular) {
        let cornerSize = CGSize(width: cornerRadius, height: cornerRadius)
        self.init(cornerSize: cornerSize, style: style)
    }
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.RoundedRectangle, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Capsule : SwiftUI.Shape {
  public var style: SwiftUI.RoundedCornerStyle
  @inlinable public init(style: SwiftUI.RoundedCornerStyle = .circular) {
        self.style = style
    }
  public func path(in r: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Capsule, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Ellipse : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Ellipse, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Circle : SwiftUI.Shape {
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUI.Circle, SwiftUI.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol GroupBoxStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GroupBoxStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBoxStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.GroupBoxStyleConfiguration.Label
  public let content: SwiftUI.GroupBoxStyleConfiguration.Content
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func groupBoxStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.GroupBoxStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct VStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._VStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _VStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.VStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _VStackLayout {
  public var alignment: SwiftUI.HorizontalAlignment
  public var spacing: CoreGraphics.CGFloat?
  @inlinable public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(alignment: SwiftUI.HorizontalAlignment = .center, spacing: CoreGraphics.CGFloat? = nil, pinnedViews: SwiftUI.PinnedScrollableViews = .init(), @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.LazyVStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func layoutPriority(_ value: Swift.Double) -> some SwiftUI.View {
        return _trait(LayoutPriorityTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct LayoutPriorityTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @usableFromInline
  internal typealias Value = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol GeometryEffect : SwiftUI.Animatable, SwiftUI.ViewModifier where Self.Body == Swift.Never {
  func effectValue(size: CoreGraphics.CGSize) -> SwiftUI.ProjectionTransform
  static var _affectsLayout: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GeometryEffect {
  public static var _affectsLayout: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GeometryEffect {
  public static func _makeView(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public static func _makeViewList(modifier: SwiftUI._GraphValue<Self>, inputs: SwiftUI._ViewListInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs) -> SwiftUI._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUI._ViewListCountInputs, body: (SwiftUI._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTest : SwiftUI._Test {
  associatedtype RootView : SwiftUI.View
  func initRootView() -> Self.RootView
  func initSize() -> CoreGraphics.CGSize
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func setUpTest()
  public func tearDownTest()
  public var rootView: Self.RootView {
    get
  }
  public func viewForIdentifier<V, I>(_ identifier: I, _ type: V.Type = V.self) -> V? where V : SwiftUI.View, I : Swift.Hashable
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> SwiftUI.Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
  public func render(seconds: Swift.Double = 1.0 / 60.0)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func renderAsync(seconds: Swift.Double = 1.0 / 60.0) -> Swift.Bool
  public func initSize() -> CoreGraphics.CGSize
  public func setSize(_ size: CoreGraphics.CGSize)
  public func setEnvironment(_ environment: SwiftUI.EnvironmentValues)
  public func resetEvents()
  public func loop()
  public func turnRunloop(times: Swift.Int = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func rootState<S>(type _: S.Type = S.self) -> SwiftUI.Binding<S>
  public func rootState<S, V>(type _: S.Type = S.self, in _: V.Type) -> SwiftUI.Binding<S> where V : SwiftUI.View
}
@available(iOS, introduced: 13.0, deprecated: 100000, message: "Use NavigationViewStyle.columns")
@available(macOS, introduced: 10.15, deprecated: 100000, message: "Use NavigationViewStyle.columns")
@available(tvOS, introduced: 13.0, deprecated: 100000, message: "Use NavigationViewStyle.stack")
@available(watchOS, unavailable)
public struct DoubleColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowToolbarStyle {
  associatedtype _Body : SwiftUI.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  public func windowToolbarStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowToolbarStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func presentedWindowToolbarStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.WindowToolbarStyle
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.SquareBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var squareBorder: SwiftUI.SquareBorderTextFieldStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SquareBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.SquareBorderTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26SquareBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGPoint : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: CoreGraphics.CGPoint.AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = newValue[] }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image {
  @frozen public enum Orientation : Swift.UInt8, Swift.CaseIterable, Swift.Hashable {
    case up
    case upMirrored
    case down
    case downMirrored
    case left
    case leftMirrored
    case right
    case rightMirrored
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [SwiftUI.Image.Orientation]
    public typealias RawValue = Swift.UInt8
    public static var allCases: [SwiftUI.Image.Orientation] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlGroupStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder @_Concurrency.MainActor(unsafe) func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ControlGroupStyleConfiguration
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ControlGroupStyleConfiguration {
  public struct Content : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.ControlGroupStyleConfiguration.Content
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func controlGroupStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ControlGroupStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGSize : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGFloat, CoreGraphics.CGFloat>
  public var animatableData: CoreGraphics.CGSize.AnimatableData {
    @inlinable get { return .init(width, height) }
    @inlinable set { (width, height) = newValue[] }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text : SwiftUI.View {
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.Text>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _SymmetricallyScaledText : SwiftUI.View {
  public var source: SwiftUI.Text
  public var reference: SwiftUI.Text
  public init(source: SwiftUI.Text, reference: SwiftUI.Text)
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._SymmetricallyScaledText>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.RoundedBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var roundedBorder: SwiftUI.RoundedBorderTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.RoundedBorderTextFieldStyle._Label>) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27RoundedBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoreGraphics.CGRect : SwiftUI.Animatable {
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreGraphics.CGPoint.AnimatableData, CoreGraphics.CGSize.AnimatableData>
  public var animatableData: CoreGraphics.CGRect.AnimatableData {
    @inlinable get {
            return .init(origin.animatableData, size.animatableData)
        }
    @inlinable set {
            (origin.animatableData, size.animatableData) = newValue[]
        }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _AccessibilityIgnoresInvertColorsViewModifier {
  public var active: Swift.Bool
  @inlinable public init(active: Swift.Bool) { self.active = active }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._AccessibilityIgnoresInvertColorsViewModifier>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func accessibilityIgnoresInvertColors(_ active: Swift.Bool = true) -> some SwiftUI.View {
        return modifier(
            _AccessibilityIgnoresInvertColorsViewModifier(active: active))
    }
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ForEach : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public init(_ data: Data, @SwiftUI.TableRowBuilder<Data.Element> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element == Content.TableRowValue
  public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TableRowBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TableRowValue
  public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TableRowBuilder<V> content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int, V == Content.TableRowValue
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DynamicTableRowContent : SwiftUI.TableRowContent {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ForEach : SwiftUI.DynamicTableRowContent where Content : SwiftUI.TableRowContent {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func contentShape<S>(_ kind: SwiftUI.ContentShapeKinds, _ shape: S, eoFill: Swift.Bool = false) -> some SwiftUI.View where S : SwiftUI.Shape {
        modifier(
            _ContentShapeKindModifier(shape: shape, eoFill: eoFill, kind: kind))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ContentShapeKindModifier<ContentShape> : SwiftUI.ViewModifier where ContentShape : SwiftUI.Shape {
  public var shape: ContentShape
  public var eoFill: Swift.Bool
  public var kind: SwiftUI.ContentShapeKinds
  @inlinable public init(shape: ContentShape, eoFill: Swift.Bool = false, kind: SwiftUI.ContentShapeKinds) {
        self.shape = shape
        self.eoFill = eoFill
        self.kind = kind
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ContentShapeKindModifier<ContentShape>>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Animation : Swift.Equatable {
  internal var box: SwiftUI.AnimationBoxBase
  public static func == (lhs: SwiftUI.Animation, rhs: SwiftUI.Animation) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Animation : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomReflectable {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var customMirror: Swift.Mirror {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal class AnimationBoxBase {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  public func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> SwiftUI._ScrollViewRoot<Self>
}
public struct _ScrollViewRoot<P> : SwiftUI.View where P : SwiftUI._ScrollableContentProvider {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15_ScrollViewRootV4bodyQrvp", 0) __<P>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.PlainButtonStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.PlainButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PlainButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(.automatic)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.DefaultMenuButtonStyle._Configuration) -> some SwiftUI.View
  
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultMenuButtonStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PreferenceValue<Key> where Key : SwiftUI.PreferenceKey {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _DelayedPreferenceView<Key, Content> : SwiftUI.View where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var transform: (SwiftUI._PreferenceValue<Key>) -> Content
  @inlinable public init(transform: @escaping (SwiftUI._PreferenceValue<Key>) -> Content) {
        self.transform = transform
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI._DelayedPreferenceView<Key, Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreferenceKey {
  @inlinable public static func _delay<T>(_ transform: @escaping (SwiftUI._PreferenceValue<Self>) -> T) -> some SwiftUI.View where T : SwiftUI.View {
        return _DelayedPreferenceView(transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func overlayPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUI.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUI.View where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.overlay($0._force(transform)) }
    }
  
  @inlinable public func backgroundPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUI.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUI.View where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.background($0._force(transform)) }
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  public func onSubmit(of triggers: SwiftUI.SubmitTriggers = .text, _ action: @escaping (() -> Swift.Void)) -> some SwiftUI.View
  
  public func submitScope(_ isBlocking: Swift.Bool = true) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var managedObjectContext: CoreData.NSManagedObjectContext {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ForegroundLayerViewModifier {
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ForegroundLayerColorMatrixEffect {
  public var foreground: SwiftUI._ColorMatrix
  public var background: SwiftUI._ColorMatrix
  @inlinable public init(foreground: SwiftUI._ColorMatrix = .init(), background: SwiftUI._ColorMatrix = .init()) {
        (self.foreground, self.background) = (foreground, background)
    }
  public static func _makeView(modifier: SwiftUI._GraphValue<SwiftUI._ForegroundLayerColorMatrixEffect>, inputs: SwiftUI._ViewInputs, body: @escaping (SwiftUI._Graph, SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.View {
  @inlinable public func tint(_ tint: SwiftUI.Color?) -> some SwiftUI.View {
        environment(\.tintColor, tint)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var tintColor: SwiftUI.Color? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.TintShapeStyle {
  @_alwaysEmitIntoClient public static var tint: SwiftUI.TintShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct TintShapeStyle : SwiftUI.ShapeStyle {
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
  public init()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct GraphicsContext {
  @_hasMissingDesignatedInitializers @usableFromInline
  final internal class Storage {
    @objc deinit
  }
  internal var storage: SwiftUI.GraphicsContext.Storage
  @frozen public struct BlendMode : Swift.RawRepresentable, Swift.Equatable {
    public let rawValue: Swift.Int32
    @inlinable public init(rawValue: Swift.Int32) { self.rawValue = rawValue }
    @inlinable public static var normal: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.normal.rawValue)
        }
    }
    @inlinable public static var multiply: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.multiply.rawValue)
        }
    }
    @inlinable public static var screen: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.screen.rawValue)
        }
    }
    @inlinable public static var overlay: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.overlay.rawValue)
        }
    }
    @inlinable public static var darken: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.darken.rawValue)
        }
    }
    @inlinable public static var lighten: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.lighten.rawValue)
        }
    }
    @inlinable public static var colorDodge: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorDodge.rawValue)
        }
    }
    @inlinable public static var colorBurn: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorBurn.rawValue)
        }
    }
    @inlinable public static var softLight: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.softLight.rawValue)
        }
    }
    @inlinable public static var hardLight: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hardLight.rawValue)
        }
    }
    @inlinable public static var difference: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.difference.rawValue)
        }
    }
    @inlinable public static var exclusion: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.exclusion.rawValue)
        }
    }
    @inlinable public static var hue: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hue.rawValue)
        }
    }
    @inlinable public static var saturation: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.saturation.rawValue)
        }
    }
    @inlinable public static var color: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.color.rawValue)
        }
    }
    @inlinable public static var luminosity: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.luminosity.rawValue)
        }
    }
    @inlinable public static var clear: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.clear.rawValue)
        }
    }
    @inlinable public static var copy: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.copy.rawValue)
        }
    }
    @inlinable public static var sourceIn: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceIn.rawValue)
        }
    }
    @inlinable public static var sourceOut: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceOut.rawValue)
        }
    }
    @inlinable public static var sourceAtop: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceAtop.rawValue)
        }
    }
    @inlinable public static var destinationOver: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOver.rawValue)
        }
    }
    @inlinable public static var destinationIn: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationIn.rawValue)
        }
    }
    @inlinable public static var destinationOut: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOut.rawValue)
        }
    }
    @inlinable public static var destinationAtop: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationAtop.rawValue)
        }
    }
    @inlinable public static var xor: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.xor.rawValue)
        }
    }
    @inlinable public static var plusDarker: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusDarker.rawValue)
        }
    }
    @inlinable public static var plusLighter: SwiftUI.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusLighter.rawValue)
        }
    }
    public typealias RawValue = Swift.Int32
  }
  public var opacity: Swift.Double {
    get
    set
  }
  public var blendMode: SwiftUI.GraphicsContext.BlendMode {
    get
    set
  }
  public var environment: SwiftUI.EnvironmentValues {
    get
  }
  public var transform: CoreGraphics.CGAffineTransform {
    get
    set
  }
  public mutating func scaleBy(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat)
  public mutating func translateBy(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat)
  public mutating func rotate(by angle: SwiftUI.Angle)
  public mutating func concatenate(_ matrix: CoreGraphics.CGAffineTransform)
  @frozen public struct ClipOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var inverse: SwiftUI.GraphicsContext.ClipOptions {
      get { Self(rawValue: 1 << 0) }
    }
    public typealias ArrayLiteralElement = SwiftUI.GraphicsContext.ClipOptions
    public typealias Element = SwiftUI.GraphicsContext.ClipOptions
    public typealias RawValue = Swift.UInt32
  }
  public var clipBoundingRect: CoreGraphics.CGRect {
    get
  }
  public mutating func clip(to path: SwiftUI.Path, style: SwiftUI.FillStyle = FillStyle(), options: SwiftUI.GraphicsContext.ClipOptions = ClipOptions())
  public mutating func clipToLayer(opacity: Swift.Double = 1, options: SwiftUI.GraphicsContext.ClipOptions = ClipOptions(), content: (inout SwiftUI.GraphicsContext) throws -> Swift.Void) rethrows
  public struct Filter {
    public static func projectionTransform(_ matrix: SwiftUI.ProjectionTransform) -> SwiftUI.GraphicsContext.Filter
    public static func shadow(color: SwiftUI.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreGraphics.CGFloat, x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, blendMode: SwiftUI.GraphicsContext.BlendMode = .normal, options: SwiftUI.GraphicsContext.ShadowOptions = ShadowOptions()) -> SwiftUI.GraphicsContext.Filter
    public static func colorMultiply(_ color: SwiftUI.Color) -> SwiftUI.GraphicsContext.Filter
    public static func colorMatrix(_ matrix: SwiftUI.ColorMatrix) -> SwiftUI.GraphicsContext.Filter
    public static func hueRotation(_ angle: SwiftUI.Angle) -> SwiftUI.GraphicsContext.Filter
    public static func saturation(_ amount: Swift.Double) -> SwiftUI.GraphicsContext.Filter
    public static func brightness(_ amount: Swift.Double) -> SwiftUI.GraphicsContext.Filter
    public static func contrast(_ amount: Swift.Double) -> SwiftUI.GraphicsContext.Filter
    public static func colorInvert(_ amount: Swift.Double = 1) -> SwiftUI.GraphicsContext.Filter
    public static func grayscale(_ amount: Swift.Double) -> SwiftUI.GraphicsContext.Filter
    public static var luminanceToAlpha: SwiftUI.GraphicsContext.Filter {
      get
    }
    public static func blur(radius: CoreGraphics.CGFloat, options: SwiftUI.GraphicsContext.BlurOptions = BlurOptions()) -> SwiftUI.GraphicsContext.Filter
    public static func alphaThreshold(min: Swift.Double, max: Swift.Double = 1, color: SwiftUI.Color = Color.black) -> SwiftUI.GraphicsContext.Filter
  }
  @frozen public struct ShadowOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var shadowAbove: SwiftUI.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var shadowOnly: SwiftUI.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var invertsAlpha: SwiftUI.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 2) }
    }
    @inlinable public static var disablesGroup: SwiftUI.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 3) }
    }
    public typealias ArrayLiteralElement = SwiftUI.GraphicsContext.ShadowOptions
    public typealias Element = SwiftUI.GraphicsContext.ShadowOptions
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct BlurOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var opaque: SwiftUI.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var dithersResult: SwiftUI.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 1) }
    }
    public typealias ArrayLiteralElement = SwiftUI.GraphicsContext.BlurOptions
    public typealias Element = SwiftUI.GraphicsContext.BlurOptions
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct FilterOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) {
            self.rawValue = rawValue
        }
    @inlinable public static var linearColor: SwiftUI.GraphicsContext.FilterOptions {
      get { Self(rawValue: 1 << 0) }
    }
    public typealias ArrayLiteralElement = SwiftUI.GraphicsContext.FilterOptions
    public typealias Element = SwiftUI.GraphicsContext.FilterOptions
    public typealias RawValue = Swift.UInt32
  }
  public mutating func addFilter(_ filter: SwiftUI.GraphicsContext.Filter, options: SwiftUI.GraphicsContext.FilterOptions = FilterOptions())
  public struct Shading {
    public static var backdrop: SwiftUI.GraphicsContext.Shading {
      get
    }
    public static var foreground: SwiftUI.GraphicsContext.Shading {
      get
    }
    public static func palette(_ array: [SwiftUI.GraphicsContext.Shading]) -> SwiftUI.GraphicsContext.Shading
    public static func color(_ color: SwiftUI.Color) -> SwiftUI.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1) -> SwiftUI.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUI.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1) -> SwiftUI.GraphicsContext.Shading
    public static func style<S>(_ style: S) -> SwiftUI.GraphicsContext.Shading where S : SwiftUI.ShapeStyle
    public static func linearGradient(_ gradient: SwiftUI.Gradient, startPoint: CoreGraphics.CGPoint, endPoint: CoreGraphics.CGPoint, options: SwiftUI.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUI.GraphicsContext.Shading
    public static func radialGradient(_ gradient: SwiftUI.Gradient, center: CoreGraphics.CGPoint, startRadius: CoreGraphics.CGFloat, endRadius: CoreGraphics.CGFloat, options: SwiftUI.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUI.GraphicsContext.Shading
    public static func conicGradient(_ gradient: SwiftUI.Gradient, center: CoreGraphics.CGPoint, angle: SwiftUI.Angle = Angle(), options: SwiftUI.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUI.GraphicsContext.Shading
    public static func tiledImage(_ image: SwiftUI.Image, origin: CoreGraphics.CGPoint = .zero, sourceRect: CoreGraphics.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreGraphics.CGFloat = 1) -> SwiftUI.GraphicsContext.Shading
  }
  @frozen public struct GradientOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var `repeat`: SwiftUI.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var mirror: SwiftUI.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var linearColor: SwiftUI.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 2) }
    }
    public typealias ArrayLiteralElement = SwiftUI.GraphicsContext.GradientOptions
    public typealias Element = SwiftUI.GraphicsContext.GradientOptions
    public typealias RawValue = Swift.UInt32
  }
  public func resolve(_ shading: SwiftUI.GraphicsContext.Shading) -> SwiftUI.GraphicsContext.Shading
  public func drawLayer(content: (inout SwiftUI.GraphicsContext) throws -> Swift.Void) rethrows
  public func fill(_ path: SwiftUI.Path, with shading: SwiftUI.GraphicsContext.Shading, style: SwiftUI.FillStyle = FillStyle())
  public func stroke(_ path: SwiftUI.Path, with shading: SwiftUI.GraphicsContext.Shading, style: SwiftUI.StrokeStyle)
  public func stroke(_ path: SwiftUI.Path, with shading: SwiftUI.GraphicsContext.Shading, lineWidth: CoreGraphics.CGFloat = 1)
  public struct ResolvedImage {
    public var size: CoreGraphics.CGSize {
      get
    }
    public let baseline: CoreGraphics.CGFloat
    public var shading: SwiftUI.GraphicsContext.Shading?
  }
  public func resolve(_ image: SwiftUI.Image) -> SwiftUI.GraphicsContext.ResolvedImage
  public func draw(_ image: SwiftUI.GraphicsContext.ResolvedImage, in rect: CoreGraphics.CGRect, style: SwiftUI.FillStyle = FillStyle())
  public func draw(_ image: SwiftUI.GraphicsContext.ResolvedImage, at point: CoreGraphics.CGPoint, anchor: SwiftUI.UnitPoint = .center)
  public func draw(_ image: SwiftUI.Image, in rect: CoreGraphics.CGRect, style: SwiftUI.FillStyle = FillStyle())
  public func draw(_ image: SwiftUI.Image, at point: CoreGraphics.CGPoint, anchor: SwiftUI.UnitPoint = .center)
  public struct ResolvedText {
    public var shading: SwiftUI.GraphicsContext.Shading
    public func measure(in size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
    public func firstBaseline(in size: CoreGraphics.CGSize) -> CoreGraphics.CGFloat
    public func lastBaseline(in size: CoreGraphics.CGSize) -> CoreGraphics.CGFloat
  }
  public func resolve(_ text: SwiftUI.Text) -> SwiftUI.GraphicsContext.ResolvedText
  public func draw(_ text: SwiftUI.GraphicsContext.ResolvedText, in rect: CoreGraphics.CGRect)
  public func draw(_ text: SwiftUI.GraphicsContext.ResolvedText, at point: CoreGraphics.CGPoint, anchor: SwiftUI.UnitPoint = .center)
  public func draw(_ text: SwiftUI.Text, in rect: CoreGraphics.CGRect)
  public func draw(_ text: SwiftUI.Text, at point: CoreGraphics.CGPoint, anchor: SwiftUI.UnitPoint = .center)
  public struct ResolvedSymbol {
    public var size: CoreGraphics.CGSize {
      get
    }
  }
  public func resolveSymbol<ID>(id: ID) -> SwiftUI.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  public func draw(_ symbol: SwiftUI.GraphicsContext.ResolvedSymbol, in rect: CoreGraphics.CGRect)
  public func draw(_ symbol: SwiftUI.GraphicsContext.ResolvedSymbol, at point: CoreGraphics.CGPoint, anchor: SwiftUI.UnitPoint = .center)
  public func withCGContext(content: (CoreGraphics.CGContext) throws -> Swift.Void) rethrows
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct AnyShapeStyle : SwiftUI.ShapeStyle {
  @usableFromInline
  @frozen internal struct Storage : Swift.Equatable {
    internal var box: SwiftUI.AnyShapeStyleBox
    @usableFromInline
    internal static func == (lhs: SwiftUI.AnyShapeStyle.Storage, rhs: SwiftUI.AnyShapeStyle.Storage) -> Swift.Bool
  }
  internal var storage: SwiftUI.AnyShapeStyle.Storage
  public init<S>(_ style: S) where S : SwiftUI.ShapeStyle
  public func _apply(to shape: inout SwiftUI._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUI._ShapeStyle_ShapeType)
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal class AnyShapeStyleBox {
  @objc @usableFromInline
  deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct ScaledMetric<Value> : SwiftUI.DynamicProperty where Value : Swift.BinaryFloatingPoint {
  public init(wrappedValue: Value, relativeTo textStyle: SwiftUI.Font.TextStyle)
  public init(wrappedValue: Value)
  public var wrappedValue: Value {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(*, deprecated, message: "Use @ScaledMetric")
@propertyWrapper public struct _ScaledValue : SwiftUI.DynamicProperty {
  public init(wrappedValue: CoreGraphics.CGFloat, textStyle: SwiftUI.Font.TextStyle = .body)
  public var wrappedValue: CoreGraphics.CGFloat {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetListStyle {
  @_alwaysEmitIntoClient public static var inset: SwiftUI.InsetListStyle {
    get { .init() }
  }
  @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetListStyle : SwiftUI.ListStyle {
  public init()
  @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(alternatesRowBackgrounds: Swift.Bool)
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _CoordinateSpaceModifier<Name> : SwiftUI.ViewModifier, Swift.Equatable where Name : Swift.Hashable {
  public var name: Name
  @inlinable public init(name: Name) {
        self.name = name
    }
  public static func _makeViewInputs(modifier: SwiftUI._GraphValue<SwiftUI._CoordinateSpaceModifier<Name>>, inputs: inout SwiftUI._ViewInputs)
  public static func == (a: SwiftUI._CoordinateSpaceModifier<Name>, b: SwiftUI._CoordinateSpaceModifier<Name>) -> Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func coordinateSpace<T>(name: T) -> some SwiftUI.View where T : Swift.Hashable {
        return modifier(_CoordinateSpaceModifier(name: name))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct TabView<SelectionValue, Content> : SwiftUI.View where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: SwiftUI.Binding<SelectionValue>?, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7TabViewV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.TabView where SelectionValue == Swift.Int {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol InsettableShape : SwiftUI.Shape {
  associatedtype InsetShape : SwiftUI.InsettableShape
  func inset(by amount: CoreGraphics.CGFloat) -> Self.InsetShape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.InsettableShape {
  @inlinable public func strokeBorder<S>(_ content: S, style: SwiftUI.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(content, style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func strokeBorder(style: SwiftUI.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable public func strokeBorder<S>(_ content: S, lineWidth: CoreGraphics.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUI.View where S : SwiftUI.ShapeStyle {
        return strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
  @inlinable public func strokeBorder(lineWidth: CoreGraphics.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUI.View {
        return strokeBorder(style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Rectangle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Rectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Rectangle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Rectangle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI9RectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RoundedRectangle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var base: SwiftUI.RoundedRectangle
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(base: SwiftUI.RoundedRectangle, amount: CoreGraphics.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: SwiftUI.AnimatablePair<SwiftUI.RoundedRectangle.AnimatableData, CoreGraphics.CGFloat> {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.RoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = SwiftUI.AnimatablePair<SwiftUI.RoundedRectangle.AnimatableData, CoreGraphics.CGFloat>
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.RoundedRectangle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.RoundedRectangle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI16RoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Capsule : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Capsule._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Capsule._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Capsule._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7CapsuleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Ellipse : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Ellipse._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Ellipse._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Ellipse._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7EllipseV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Circle : SwiftUI.InsettableShape {
  @inlinable public func inset(by amount: CoreGraphics.CGFloat) -> some SwiftUI.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUI.InsettableShape {
    @usableFromInline
    internal var amount: CoreGraphics.CGFloat
    @inlinable internal init(amount: CoreGraphics.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    internal func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
    @usableFromInline
    internal var animatableData: CoreGraphics.CGFloat {
      get
      set
    }
    @inlinable internal func inset(by amount: CoreGraphics.CGFloat) -> SwiftUI.Circle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @usableFromInline
    internal typealias AnimatableData = CoreGraphics.CGFloat
    @usableFromInline
    internal typealias Body = SwiftUI._ShapeView<SwiftUI.Circle._Inset, SwiftUI.ForegroundStyle>
    @usableFromInline
    internal typealias InsetShape = SwiftUI.Circle._Inset
  }
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI6CircleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct EnvironmentValues : Swift.CustomStringConvertible {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.EnvironmentKey {
    get
    set
  }
  public var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PreferenceKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)
  static var _includesRemovedValues: Swift.Bool { get }
  static var _isReadableByHost: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreferenceKey where Self.Value : Swift.ExpressibleByNilLiteral {
  public static var defaultValue: Self.Value {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreferenceKey {
  public static var _includesRemovedValues: Swift.Bool {
    get
  }
  public static var _isReadableByHost: Swift.Bool {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedCompactWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unifiedCompact: SwiftUI.UnifiedCompactWindowToolbarStyle {
    get {
        .init()
    }
  }
  @_alwaysEmitIntoClient public static func unifiedCompact(showsTitle: Swift.Bool) -> SwiftUI.UnifiedCompactWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct UnifiedCompactWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct NavigationView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper public struct EnvironmentObject<ObjectType> : SwiftUI.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen public struct Wrapper {
    internal let root: ObjectType
    public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUI.Binding<Subject> {
      get
    }
  }
  @inlinable @_Concurrency.MainActor(unsafe) public var wrappedValue: ObjectType {
    get {
      guard let store = _store else { error() }
      return store
    }
  }
  @usableFromInline
  internal var _store: ObjectType?
  @usableFromInline
  internal var _seed: Swift.Int = 0
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.EnvironmentObject<ObjectType>.Wrapper {
    get
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public init()
  public static func _makeProperty<V>(in buffer: inout SwiftUI._DynamicPropertyBuffer, container: SwiftUI._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUI._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentObject {
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.View {
  @inlinable public func environmentObject<T>(_ object: T) -> some SwiftUI.View where T : Combine.ObservableObject {
        return environment(T.environmentStore, object)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Combine.ObservableObject {
  @usableFromInline
  internal static var environmentStore: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, Self?> {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.PageTabViewStyle {
  @_alwaysEmitIntoClient public static var page: SwiftUI.PageTabViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func page(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode) -> SwiftUI.PageTabViewStyle {
        .init(indexDisplayMode: indexDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct PageTabViewStyle : SwiftUI.TabViewStyle {
  public struct IndexDisplayMode {
    public static let automatic: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let always: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let never: SwiftUI.PageTabViewStyle.IndexDisplayMode
  }
  public init(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode = .automatic)
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Transaction {
  @usableFromInline
  internal var plist: SwiftUI.PropertyList
  @inlinable public init() {
        plist = PropertyList()
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func withTransaction<Result>(_ transaction: SwiftUI.Transaction, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func withAnimation<Result>(_ animation: SwiftUI.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color {
  public func opacity(_ opacity: Swift.Double) -> SwiftUI.Color
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
public enum MoveCommandDirection {
  case up
  case down
  case left
  case right
  public static func == (a: SwiftUI.MoveCommandDirection, b: SwiftUI.MoveCommandDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  public func onMoveCommand(perform action: ((SwiftUI.MoveCommandDirection) -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  public func onExitCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func onPlayPauseCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onDeleteCommand(perform action: (() -> Swift.Void)?) -> some SwiftUI.View
  
  @available(tvOS 14.3, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public func pageCommand<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V = 1) -> some SwiftUI.View where V : Swift.BinaryInteger
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.DefaultListStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct SceneBuilder {
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene
}
public func __previewThunksHaveFinishedLoading()
@available(iOS 14.5, macOS 11.0, tvOS 14.5, watchOS 7.4, *)
@usableFromInline
internal struct IsLeafTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentValues {
  public var defaultMinListRowHeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var defaultMinListHeaderHeight: CoreGraphics.CGFloat? {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public var _plainListSectionSpacing: CoreGraphics.CGFloat? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Binding {
  public init<V>(_ base: SwiftUI.Binding<V>) where Value == V?
  public init?(_ base: SwiftUI.Binding<Value?>)
  public init<V>(_ base: SwiftUI.Binding<V>) where Value == Swift.AnyHashable, V : Swift.Hashable
}
extension SwiftUI.View {
  public func labelsHidden() -> some SwiftUI.View
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.DefaultWindowStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ListItemTint {
  public static func fixed(_ tint: SwiftUI.Color) -> SwiftUI.ListItemTint
  public static func preferred(_ tint: SwiftUI.Color) -> SwiftUI.ListItemTint
  public static let monochrome: SwiftUI.ListItemTint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func listItemTint(_ tint: SwiftUI.ListItemTint?) -> some SwiftUI.View {
        _trait(ListItemTintTraitKey.self, tint)
    }
  
  @inlinable public func listItemTint(_ tint: SwiftUI.Color?) -> some SwiftUI.View {
        listItemTint(tint.map { .fixed($0) })
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemTintTraitKey : SwiftUI._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.ListItemTint? {
    get { nil }
  }
  @usableFromInline
  internal typealias Value = SwiftUI.ListItemTint?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ColorMonochromeEffect : SwiftUI.EnvironmentalModifier {
  public var color: SwiftUI.Color
  public var amount: Swift.Double
  public var bias: Swift.Double
  @inlinable public init(color: SwiftUI.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) {
        self.color = color
        self.bias = bias
        self.amount = amount
    }
  public func resolve(in environment: SwiftUI.EnvironmentValues) -> SwiftUI._ColorMonochromeEffect._Resolved
  public var _requiresMainThread: Swift.Bool {
    get
  }
  public struct _Resolved {
    public typealias AnimatableData = SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, SwiftUI.AnimatablePair<Swift.Float, Swift.Float>>>>>
    public var animatableData: SwiftUI._ColorMonochromeEffect._Resolved.AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public typealias Body = Swift.Never
  public typealias ResolvedModifier = SwiftUI._ColorMonochromeEffect._Resolved
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  @inlinable public func _colorMonochrome(_ color: SwiftUI.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) -> some SwiftUI.View {
        return modifier(_ColorMonochromeEffect(
            color: color, amount: amount, bias: bias))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal enum Log {
  @usableFromInline
  internal static var runtimeIssuesLog: os.OSLog
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.DefaultPickerStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.CircularProgressViewStyle {
  @_alwaysEmitIntoClient public static var circular: SwiftUI.CircularProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct CircularProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUI.Color)
  public func makeBody(configuration: SwiftUI.CircularProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25CircularProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func textSelection<S>(_ selectability: S) -> some SwiftUI.View where S : SwiftUI.TextSelectability
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TextSelectability {
  static var allowsSelection: Swift.Bool { get }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextSelectability where Self == SwiftUI.EnabledTextSelectability {
  @_alwaysEmitIntoClient public static var enabled: SwiftUI.EnabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextSelectability where Self == SwiftUI.DisabledTextSelectability {
  @_alwaysEmitIntoClient public static var disabled: SwiftUI.DisabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EnabledTextSelectability : SwiftUI.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisabledTextSelectability : SwiftUI.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditor : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10TextEditorV4bodyQrvp", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __SimpleColumnLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct AnimatablePair<First, Second> : SwiftUI.VectorArithmetic where First : SwiftUI.VectorArithmetic, Second : SwiftUI.VectorArithmetic {
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        self.first = first
        self.second = second
    }
  @inlinable internal subscript() -> (First, Second) {
    get { return (first, second) }
    set { (first, second) = newValue }
  }
  @_transparent public static var zero: SwiftUI.AnimatablePair<First, Second> {
    @_transparent get {
        return .init(First.zero, Second.zero)
    }
  }
  @_transparent public static func += (lhs: inout SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) {
        lhs.first += rhs.first
        lhs.second += rhs.second
    }
  @_transparent public static func -= (lhs: inout SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) {
        lhs.first -= rhs.first
        lhs.second -= rhs.second
    }
  @_transparent public static func + (lhs: SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) -> SwiftUI.AnimatablePair<First, Second> {
        return .init(lhs.first + rhs.first, lhs.second + rhs.second)
    }
  @_transparent public static func - (lhs: SwiftUI.AnimatablePair<First, Second>, rhs: SwiftUI.AnimatablePair<First, Second>) -> SwiftUI.AnimatablePair<First, Second> {
        return .init(lhs.first - rhs.first, lhs.second - rhs.second)
    }
  @_transparent public mutating func scale(by rhs: Swift.Double) {
        first.scale(by: rhs)
        second.scale(by: rhs)
    }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get {
        return first.magnitudeSquared + second.magnitudeSquared
    }
  }
  public static func == (a: SwiftUI.AnimatablePair<First, Second>, b: SwiftUI.AnimatablePair<First, Second>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct Alignment : Swift.Equatable {
  public var horizontal: SwiftUI.HorizontalAlignment
  public var vertical: SwiftUI.VerticalAlignment
  @inlinable public init(horizontal: SwiftUI.HorizontalAlignment, vertical: SwiftUI.VerticalAlignment) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public static let center: SwiftUI.Alignment
  public static let leading: SwiftUI.Alignment
  public static let trailing: SwiftUI.Alignment
  public static let top: SwiftUI.Alignment
  public static let bottom: SwiftUI.Alignment
  public static let topLeading: SwiftUI.Alignment
  public static let topTrailing: SwiftUI.Alignment
  public static let bottomLeading: SwiftUI.Alignment
  public static let bottomTrailing: SwiftUI.Alignment
  public static func == (a: SwiftUI.Alignment, b: SwiftUI.Alignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct ZStack<Content> : SwiftUI.View where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: SwiftUI._VariadicView.Tree<SwiftUI._ZStackLayout, Content>
  @inlinable public init(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _ZStackLayout(alignment: alignment), content: content())
    }
  public static func _makeView(view: SwiftUI._GraphValue<SwiftUI.ZStack<Content>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ZStackLayout {
  public var alignment: SwiftUI.Alignment
  @inlinable public init(alignment: SwiftUI.Alignment = .center) {
        self.alignment = alignment
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum CoordinateSpace {
  case global
  case local
  case named(Swift.AnyHashable)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.CoordinateSpace {
  public var isGlobal: Swift.Bool {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.CoordinateSpace : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.CoordinateSpace, rhs: SwiftUI.CoordinateSpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewProxy : Swift.Equatable {
  public var config: SwiftUI._ScrollViewConfig {
    get
  }
  public var contentOffset: CoreGraphics.CGPoint {
    get
    set
  }
  public var minContentOffset: CoreGraphics.CGPoint {
    get
  }
  public var maxContentOffset: CoreGraphics.CGPoint {
    get
  }
  public var contentSize: CoreGraphics.CGSize {
    get
  }
  public var pageSize: CoreGraphics.CGSize {
    get
  }
  public var visibleRect: CoreGraphics.CGRect {
    get
  }
  public var isDragging: Swift.Bool {
    get
  }
  public var isDecelerating: Swift.Bool {
    get
  }
  public var isScrolling: Swift.Bool {
    get
  }
  public var isScrollingHorizontally: Swift.Bool {
    get
  }
  public var isScrollingVertically: Swift.Bool {
    get
  }
  public func setContentOffset(_ newOffset: CoreGraphics.CGPoint, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func scrollRectToVisible(_ rect: CoreGraphics.CGRect, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func contentOffsetOfNextPage(_ directions: SwiftUI._EventDirections) -> CoreGraphics.CGPoint
  public static func == (lhs: SwiftUI._ScrollViewProxy, rhs: SwiftUI._ScrollViewProxy) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ContainedScrollViewKey {
  public typealias Value = SwiftUI._ScrollViewProxy?
  public static func reduce(value: inout SwiftUI._ContainedScrollViewKey.Value, nextValue: () -> SwiftUI._ContainedScrollViewKey.Value)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol Commands {
  associatedtype Body : SwiftUI.Commands
  @SwiftUI.CommandsBuilder var body: Self.Body { get }
  @available(iOS 15.0, macOS 12.0, *)
  static func _makeCommands(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  public static func _makeCommands(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyCommands : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  public static func _makeCommands(content: SwiftUI._GraphValue<SwiftUI.EmptyCommands>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init()
  public func _resolve(into: inout SwiftUI._ResolvedCommands)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedCommands {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  public func commands<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyCommands {
        EmptyCommands()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Commands {
        content
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivedViewHostDelegate {
  mutating func viewDataNeedsUpdate()
  mutating func failedToEncodeView(type: Any.Type)
  mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivedViewHostDelegate {
  public mutating func failedToEncodeView(type: Any.Type)
  public mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  public func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
final public class _ArchivedViewHost<Content, Delegate> where Content : SwiftUI.View, Delegate : SwiftUI._ArchivedViewHostDelegate {
  final public var content: Content {
    get
    set
  }
  final public var environment: SwiftUI.EnvironmentValues {
    get
    set
  }
  final public var size: CoreGraphics.CGSize {
    get
    set
  }
  final public var safeAreaInsets: SwiftUI.EdgeInsets {
    get
    set
  }
  final public var auxiliaryData: Foundation.Data?
  final public var delegate: Delegate
  final public var encodesCustomFontsAsURLs: Swift.Bool
  final public var allowedImageTypes: Swift.Set<UniformTypeIdentifiers.UTType>
  final public var defaultImageType: UniformTypeIdentifiers.UTType?
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  final public var encodingStyle: SwiftUI._ArchivedViewStates.EncodingStyle {
    get
    set
  }
  public init(content: Content, delegate: Delegate)
  final public func archiveIfChanged() throws -> Foundation.Data?
  final public func archiveStates(count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws -> Foundation.Data
  final public func archiveStates(to file: Foundation.FileHandle, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  final public func archiveStates(to url: Foundation.URL, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  final public func forEachIdentifiedView(body: (SwiftUI._IdentifiedViewProxy) -> Swift.Void)
  final public func reset()
  @objc deinit
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func fileMover(isPresented: SwiftUI.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, Swift.Error>) -> Swift.Void) -> some SwiftUI.View
  
  public func fileMover<C>(isPresented: SwiftUI.Binding<Swift.Bool>, files: C, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], Swift.Error>) -> Swift.Void) -> some SwiftUI.View where C : Swift.Collection, C.Element == Foundation.URL
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol ToolbarContent {
  associatedtype Body : SwiftUI.ToolbarContent
  @SwiftUI.ToolbarContentBuilder var body: Self.Body { get }
  static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol CustomizableToolbarContent : SwiftUI.ToolbarContent where Self.Body : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContent {
  public static func _makeContent(content: SwiftUI._GraphValue<Self>, inputs: SwiftUI._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
extension Swift.Never : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ToolbarItemList {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct ToolbarContentBuilder {
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func toolbar<Content>(@SwiftUI.ViewBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
  public func toolbar<Content>(@SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.ToolbarContent
  
  public func toolbar<Content>(id: Swift.String, @SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUI.View where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.EllipticalListStyle {
  @_alwaysEmitIntoClient public static var elliptical: SwiftUI.EllipticalListStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct EllipticalListStyle : SwiftUI.ListStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func listRowSeparator(_ visibility: SwiftUI.Visibility, edges: SwiftUI.VerticalEdge.Set = .all) -> some SwiftUI.View
  
  public func listRowSeparatorTint(_ color: SwiftUI.Color?, edges: SwiftUI.VerticalEdge.Set = .all) -> some SwiftUI.View
  
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func listSectionSeparator(_ visibility: SwiftUI.Visibility, edges: SwiftUI.VerticalEdge.Set = .all) -> some SwiftUI.View
  
  public func listSectionSeparatorTint(_ color: SwiftUI.Color?, edges: SwiftUI.VerticalEdge.Set = .all) -> some SwiftUI.View
  
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  @usableFromInline
  internal var alignListSeparators: Swift.Bool {
    get
    set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.RadioGroupPickerStyle {
  @_alwaysEmitIntoClient public static var radioGroup: SwiftUI.RadioGroupPickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RadioGroupPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewInputs) -> SwiftUI._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUI._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUI._ViewListInputs) -> SwiftUI._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func horizontalRadioGroupLayout() -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol ProgressViewStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ProgressViewStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressViewStyleConfiguration {
  public struct Label : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public struct CurrentValueLabel : SwiftUI.View {
    public typealias Body = Swift.Never
  }
  public let fractionCompleted: Swift.Double?
  public var label: SwiftUI.ProgressViewStyleConfiguration.Label?
  public var currentValueLabel: SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func progressViewStyle<S>(_ style: S) -> some SwiftUI.View where S : SwiftUI.ProgressViewStyle
  
}
@available(iOS 13.0, macOS 10.15, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderlessButtonStyle {
  @_alwaysEmitIntoClient public static var borderless: SwiftUI.BorderlessButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, watchOS 8.0, *)
@available(tvOS, unavailable)
public struct BorderlessButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  public func makeBody(configuration: SwiftUI.BorderlessButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BorderlessButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityTraits : Swift.SetAlgebra {
  public static let isButton: SwiftUI.AccessibilityTraits
  public static let isHeader: SwiftUI.AccessibilityTraits
  public static let isSelected: SwiftUI.AccessibilityTraits
  public static let isLink: SwiftUI.AccessibilityTraits
  public static let isSearchField: SwiftUI.AccessibilityTraits
  public static let isImage: SwiftUI.AccessibilityTraits
  public static let playsSound: SwiftUI.AccessibilityTraits
  public static let isKeyboardKey: SwiftUI.AccessibilityTraits
  public static let isStaticText: SwiftUI.AccessibilityTraits
  public static let isSummaryElement: SwiftUI.AccessibilityTraits
  public static let updatesFrequently: SwiftUI.AccessibilityTraits
  public static let startsMediaSession: SwiftUI.AccessibilityTraits
  public static let allowsDirectInteraction: SwiftUI.AccessibilityTraits
  public static let causesPageTurn: SwiftUI.AccessibilityTraits
  public static let isModal: SwiftUI.AccessibilityTraits
  public init()
  public func union(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func formUnion(_ other: SwiftUI.AccessibilityTraits)
  public func intersection(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func formIntersection(_ other: SwiftUI.AccessibilityTraits)
  public func symmetricDifference(_ other: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits
  public mutating func formSymmetricDifference(_ other: SwiftUI.AccessibilityTraits)
  public func contains(_ member: SwiftUI.AccessibilityTraits) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUI.AccessibilityTraits) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.AccessibilityTraits)
  public mutating func remove(_ member: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits?
  public mutating func update(with newMember: SwiftUI.AccessibilityTraits) -> SwiftUI.AccessibilityTraits?
  public static func == (a: SwiftUI.AccessibilityTraits, b: SwiftUI.AccessibilityTraits) -> Swift.Bool
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTraits
  public typealias Element = SwiftUI.AccessibilityTraits
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func accessibilityAddTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  public func accessibilityRemoveTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAddTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  public func accessibilityRemoveTraits(_ traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
}
extension SwiftUI.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  public func accessibility(addTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  public func accessibility(removeTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUI.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  public func accessibility(addTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  public func accessibility(removeTraits traits: SwiftUI.AccessibilityTraits) -> SwiftUI.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent, C9 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent, C9 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget {
        return TupleWidget<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget, C3 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Widget where C0 : SwiftUI.Widget, C1 : SwiftUI.Widget, C2 : SwiftUI.Widget, C3 : SwiftUI.Widget, C4 : SwiftUI.Widget {
        return TupleWidget<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands {
        TupleCommandContent((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands, C9 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never, C8.TableRowValue == C9.TableRowValue, C9.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent, C9 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleView<(C0, C1)> where C0 : SwiftUI.View, C1 : SwiftUI.View {
        return .init((c0, c1))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleView<(C0, C1, C2)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View {
        return .init((c0, c1, c2))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleView<(C0, C1, C2, C3)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View {
        return .init((c0, c1, c2, c3))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View, C9 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue : ObjectiveC.NSObject, Sort == Foundation.SortDescriptor<RowValue>, Label == SwiftUI.Text {
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUI.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene {
        return _TupleScene((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene, C8 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Scene where C0 : SwiftUI.Scene, C1 : SwiftUI.Scene, C2 : SwiftUI.Scene, C3 : SwiftUI.Scene, C4 : SwiftUI.Scene, C5 : SwiftUI.Scene, C6 : SwiftUI.Scene, C7 : SwiftUI.Scene, C8 : SwiftUI.Scene, C9 : SwiftUI.Scene {
        return _TupleScene((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableRowContent<Value, (C0, C1)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableRowContent((c0, c1), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableRowContent((c0, c1, c2), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), ofType: Value.self)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C9 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), ofType: Value.self)
    }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.Commands {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Title : SwiftUI.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Icon : SwiftUI.View {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._ForegroundStyleModifier : SwiftUI.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._ForegroundStyleModifier2 : SwiftUI.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._ForegroundStyleModifier3 : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ForegroundStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EdgeInsets : Swift.Sendable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewRepresentableContext : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ViewRemovalLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ViewRemovalLayout : SwiftUI.Animatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityHeadingLevel : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityHeadingLevel : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityHeadingLevel : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityHeadingLevel : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView.Context.Cadence : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font.Weight : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 11.0, *)
extension SwiftUI.Image.Scale : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 11.0, *)
extension SwiftUI.Image.Scale : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FourUpLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FourUpLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyWidgetConfiguration : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._TaskModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SpiralLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SpiralLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewDebug.Property : Swift.RawRepresentable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSViewControllerRepresentableContext : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ResizableImagesExampleLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__ResizableImagesExampleLayout : SwiftUI.Animatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Canvas : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EmptyView : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FluidSpringTestLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__FluidSpringTestLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font.TextStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font.TextStyle : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ContainerRelativeShape : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ContainerRelativeShape._Inset : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._ContainerShapeModifier : SwiftUI.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityOptionalRotorContent : SwiftUI.AccessibilityRotorContent {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : Swift.Sendable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.HorizontalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.VerticalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AlignmentKey : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Prominence : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Prominence : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorScheme : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorScheme : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorSchemeContrast : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorSchemeContrast : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureMask : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ProjectionEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EmptyModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CircleLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CircleLayout : SwiftUI.Animatable {}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlSize : Swift.Equatable {}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlSize : Swift.Hashable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Equatable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ContentMode : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AspectRatioLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AspectRatioLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AspectRatioLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PaddingLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PaddingLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PaddingLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VAlignment : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VAlignment : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AlignmentLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AlignmentLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AlignmentLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OffsetEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Angle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TransformEffect : Swift.Sendable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSHostingView : SwiftUI._BenchmarkHost {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._RotationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScaleEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TraitWritingModifier : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HiddenModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlurEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlurEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlurEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FrameLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlexFrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlexFrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlexFrameLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BrightnessEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BrightnessEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BrightnessEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorInvertEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorInvertEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorInvertEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrixEffect : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrixEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrixEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorMultiplyEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ColorMultiplyEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HStackLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContrastEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContrastEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContrastEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._GrayscaleEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._GrayscaleEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._GrayscaleEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HueRotationEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HueRotationEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HueRotationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LuminanceToAlphaEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LuminanceToAlphaEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._LuminanceToAlphaEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SaturationEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SaturationEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SaturationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OpacityEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OpacityEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OpacityEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlendModeEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._BlendModeEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__IconLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__IconLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ColorRenderingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CompositingGroupEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CompositingGroupEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._CompositingGroupEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ShadowEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ShadowEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout.FillDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__GridLayout.FillDirection : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Visibility : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Namespace : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Namespace.ID : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.TemplateRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.TemplateRenderingMode : Swift.Hashable {}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UserInterfaceSizeClass : Swift.Equatable {}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UserInterfaceSizeClass : Swift.Hashable {}
@available(macCatalyst 13.0, macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlActiveState : Swift.Hashable {}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "WatchDisplayVariant")
extension SwiftUI._DeviceVariant : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ColorMatrix : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMatrix : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EventModifiers : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Path.Element : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RoundedCornerStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RoundedCornerStyle : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SafeAreaRegions : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.BlendMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.BlendMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__RadialLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__RadialLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._EmptyScene : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Interpolation : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Interpolation : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FillStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Spacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Spacer : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._TextBaselineRelativeSpacer : SwiftUI.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._TextBaselineRelativeSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HSpacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VSpacer : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.StrokeStyle : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color.RGBColorSpace : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Color.RGBColorSpace : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FixedSizeLayout : Swift.Sendable {}
extension SwiftUI._FixedSizeLayout : SwiftUI.Animatable {}
extension SwiftUI._FixedSizeLayout : SwiftUI.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.BlendMode : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "will be removed")
extension SwiftUI._ForegroundColorModifier : SwiftUI.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeRole : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ShapeRole : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewModifier_Content : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ProjectionTransform : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SetFrameLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SetFrameLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SetFrameLayout : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HierarchicalShapeStyle : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.BackgroundStyle : SwiftUI.ShapeStyle {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.BackgroundStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EmptyAnimatableData : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._EndedGesture : SwiftUI.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ChangedGesture : SwiftUI.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._MapGesture : SwiftUI.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.UnitPoint : Swift.Sendable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.MatchedGeometryProperties : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._MatchedGeometryEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect : Swift.Sendable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__BedtimeTickLabelsLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__BedtimeTickLabelsLayout : SwiftUI.Animatable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._Rotation3DEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._OverlayLayout : SwiftUI._VariadicView_ViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Edge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HorizontalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HorizontalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HorizontalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HorizontalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.HorizontalEdge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.VerticalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.VerticalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.VerticalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.VerticalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.VerticalEdge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineScheduleMode : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineScheduleMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Font._StylisticAlternative : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Font.Leading : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Font.Leading : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SafeAreaIgnoringLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SafeAreaIgnoringLayout : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._SafeAreaIgnoringLayout : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SafeAreaRegionsIgnoringLayout : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SafeAreaRegionsIgnoringLayout : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SafeAreaRegionsIgnoringLayout : Swift.Sendable {}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NSApplicationDelegateAdaptor : Swift.Sendable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._PullDownButton : SwiftUI.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ClipEffect : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ClipEffect : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text.TruncationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Text.TruncationMode : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text.Case : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Text.Case : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Axis.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.ResizingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.ResizingMode : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._BackdropEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._BackdropEffectPlaceholder : SwiftUI.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._BackdropEffectPlaceholder : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Rectangle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Ellipse : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Circle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VStackLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VStackLayout : Swift.Sendable {}
extension SwiftUI._VStackLayout : SwiftUI._VariadicView_ViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Orientation : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Image.Orientation : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerViewModifier : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerViewModifier : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerColorMatrixEffect : SwiftUI.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ForegroundLayerColorMatrixEffect : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.ClipOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.ShadowOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.BlurOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.FilterOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.GraphicsContext.GradientOptions : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Rectangle._Inset : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Capsule._Inset : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Ellipse._Inset : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Circle._Inset : Swift.Sendable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Equatable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMonochromeEffect._Resolved : SwiftUI.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ColorMonochromeEffect._Resolved : SwiftUI.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SimpleColumnLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__SimpleColumnLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Alignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ZStackLayout : SwiftUI._VariadicView_UnaryViewRoot {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ZStackLayout : SwiftUI.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ZStackLayout : Swift.Sendable {}
extension SwiftUI._ZStackLayout : SwiftUI._VariadicView_ViewRoot {}
