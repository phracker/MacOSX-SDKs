.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Algorithm::DiffOld 3"
.TH Algorithm::DiffOld 3 "2014-11-26" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Algorithm::DiffOld \- Compute `intelligent' differences between two files / lists
but use the old (<=0.59) interface.
.SH "NOTE"
.IX Header "NOTE"
This has been provided as part of the Algorithm::Diff package by Ned Konz.
This particular module is \fB\s-1ONLY\s0\fR for people who \fB\s-1HAVE\s0\fR to have the old
interface, which uses a comparison function rather than a key generating
function.
.PP
Because each of the lines in one array have to be compared with each 
of the lines in the other array, this does M*N comparisons. This can
be very slow. I clocked it at taking 18 times as long as the stock
version of Algorithm::Diff for a 4000\-line file. It will get worse
quadratically as array sizes increase.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Algorithm::DiffOld qw(diff LCS traverse_sequences);
\&
\&  @lcs    = LCS( \e@seq1, \e@seq2, $comparison_function );
\&
\&  $lcsref = LCS( \e@seq1, \e@seq2, $comparison_function );
\&
\&  @diffs = diff( \e@seq1, \e@seq2, $comparison_function );
\&  
\&  traverse_sequences( \e@seq1, \e@seq2,
\&                     { MATCH => $callback,
\&                       DISCARD_A => $callback,
\&                       DISCARD_B => $callback,
\&                     },
\&                     $comparison_function );
.Ve
.SH "COMPARISON FUNCTIONS"
.IX Header "COMPARISON FUNCTIONS"
Each of the main routines should be passed a comparison function. If you
aren't passing one in, \fBuse Algorithm::Diff instead\fR.
.PP
These functions should return a true value when two items should compare
as equal.
.PP
For instance,
.PP
.Vb 1
\&  @lcs    = LCS( \e@seq1, \e@seq2, sub { my ($a, $b) = @_; $a eq $b } );
.Ve
.PP
but if that is all you're doing with your comparison function, just use
Algorithm::Diff and let it do this (this is its default).
.PP
Or:
.PP
.Vb 5
\&  sub someFunkyComparisonFunction
\&  {
\&        my ($a, $b) = @_;
\&        $a =~ m{$b};
\&  }
\&
\&  @diffs = diff( \e@lines, \e@patterns, \e&someFunkyComparisonFunction );
.Ve
.PP
which would allow you to diff an array \f(CW@lines\fR which consists of text
lines with an array \f(CW@patterns\fR which consists of regular expressions.
.PP
This is actually the reason I wrote this version \*(-- there is no way
to do this with a key generation function as in the stock Algorithm::Diff.
