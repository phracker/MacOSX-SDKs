.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Object 3"
.TH Test::Object 3 "2006-09-06" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Object \- Thoroughly testing objects via registered handlers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  ###################################################################
\&  # In your test module, register test handlers again class names   #
\&  ###################################################################
\&  
\&  package My::ModuleTester;
\&  
\&  use Test::More;
\&  use Test::Object;
\&  
\&  # Foo::Bar is a subclass of Foo
\&  Test::Object\->register(
\&        class => \*(AqFoo\*(Aq,
\&        tests => 5,
\&        code  => \e&foo_ok,
\&        );
\&  Test::Object\->register(
\&        class => \*(AqFoo::Bar\*(Aq,
\&        # No fixed number of tests
\&        code  => \e&foobar_ok,
\&        );
\&  
\&  sub foo_ok {
\&        my $object = shift;
\&        ok( $object\->foo, \*(Aq\->foo returns true\*(Aq );
\&  }
\&  
\&  sub foobar_ok {
\&        my $object = shift;
\&        is( $object\->foo, \*(Aqbar\*(Aq, \*(Aq\->foo returns "bar"\*(Aq );
\&  }
\&  
\&  1;
\&  
\&  
\&  
\&  ###################################################################
\&  # In test script, test object against all registered classes      #
\&  ###################################################################
\&  
\&  #!/usr/bin/perl \-w
\&  
\&  use Test::More \*(Aqno_plan\*(Aq;
\&  use Test::Object;
\&  use My::ModuleTester;
\&  
\&  my $object = Foo::Bar\->new;
\&  isa_ok( $object, \*(AqFoo::Bar\*(Aq );
\&  object_ok( $object );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In situations where you have deep trees of classes, there is a common
situation in which you test a module 4 or 5 subclasses down, which should
follow the correct behaviour of not just the subclass, but of all the
parent classes.
.PP
This should be done to ensure that the implementation of a subclass has
not somehow \*(L"broken\*(R" the object's behaviour in a more general sense.
.PP
\&\f(CW\*(C`Test::Object\*(C'\fR is a testing package designed to allow you to easily test
what you believe is a valid object against the expected behaviour of \fBall\fR
of the classes in its inheritance tree in one single call.
.PP
To do this, you \*(L"register\*(R" tests (in the form of \s-1CODE\s0 or function
references) with \f(CW\*(C`Test::Object\*(C'\fR, with each test associated with a
particular class.
.PP
When you call \f(CW\*(C`object_ok\*(C'\fR in your test script, \f(CW\*(C`Test::Object\*(C'\fR will check
the object against all registered tests. For each class that your object
responds to \f(CW\*(C`$object\->isa($class)\*(C'\fR for, the appropriate testing
function will be called.
.PP
Doing it this way allows adapter objects and other things that respond
to \f(CW\*(C`isa\*(C'\fR differently that the default to still be tested against the
classes that it is advertising itself as correctly.
.PP
This also means that more than one test might be \*(L"counted\*(R" for each call
to \f(CW\*(C`object_ok\*(C'\fR. You should account for this correctly in your expected
test count.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be submitted via the \s-1CPAN\s0 bug tracker, located at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Object>
.PP
For other issues, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <cpan@ali.as>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://ali.as/>, Test::More, Test::Builder::Tester, Test::Class
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005, 2006 Adam Kennedy. All rights reserved.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
