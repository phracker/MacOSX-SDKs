.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Roles::Restartable_AdvancedComposition 3"
.TH Moose::Cookbook::Roles::Restartable_AdvancedComposition 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Roles::Restartable_AdvancedComposition \- Advanced Role Composition \- method exclusion and aliasing
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Restartable;
\&  use Moose::Role;
\&
\&  has \*(Aqis_paused\*(Aq => (
\&      is      => \*(Aqrw\*(Aq,
\&      isa     => \*(AqBool\*(Aq,
\&      default => 0,
\&  );
\&
\&  requires \*(Aqsave_state\*(Aq, \*(Aqload_state\*(Aq;
\&
\&  sub stop { 1 }
\&
\&  sub start { 1 }
\&
\&  package Restartable::ButUnreliable;
\&  use Moose::Role;
\&
\&  with \*(AqRestartable\*(Aq => {
\&      \-alias => {
\&          stop  => \*(Aq_stop\*(Aq,
\&          start => \*(Aq_start\*(Aq
\&      },
\&      \-excludes => [ \*(Aqstop\*(Aq, \*(Aqstart\*(Aq ],
\&  };
\&
\&  sub stop {
\&      my $self = shift;
\&
\&      $self\->explode() if rand(1) > .5;
\&
\&      $self\->_stop();
\&  }
\&
\&  sub start {
\&      my $self = shift;
\&
\&      $self\->explode() if rand(1) > .5;
\&
\&      $self\->_start();
\&  }
\&
\&  package Restartable::ButBroken;
\&  use Moose::Role;
\&
\&  with \*(AqRestartable\*(Aq => { \-excludes => [ \*(Aqstop\*(Aq, \*(Aqstart\*(Aq ] };
\&
\&  sub stop {
\&      my $self = shift;
\&
\&      $self\->explode();
\&  }
\&
\&  sub start {
\&      my $self = shift;
\&
\&      $self\->explode();
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In this example, we demonstrate how to exercise fine-grained control
over what methods we consume from a role. We have a \f(CW\*(C`Restartable\*(C'\fR
role which provides an \f(CW\*(C`is_paused\*(C'\fR attribute, and two methods,
\&\f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`start\*(C'\fR.
.PP
Then we have two more roles which implement the same interface, each
putting their own spin on the \f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`start\*(C'\fR methods.
.PP
In the \f(CW\*(C`Restartable::ButUnreliable\*(C'\fR role, we want to provide a new
implementation of \f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`start\*(C'\fR, but still have access to the
original implementation. To do this, we alias the methods from
\&\f(CW\*(C`Restartable\*(C'\fR to private methods, and provide wrappers around the
originals (1).
.PP
Note that aliasing simply \fIadds\fR a name, so we also need to exclude the
methods with their original names.
.PP
.Vb 7
\&  with \*(AqRestartable\*(Aq => {
\&      \-alias => {
\&          stop  => \*(Aq_stop\*(Aq,
\&          start => \*(Aq_start\*(Aq
\&      },
\&      \-excludes => [ \*(Aqstop\*(Aq, \*(Aqstart\*(Aq ],
\&  };
.Ve
.PP
In the \f(CW\*(C`Restartable::ButBroken\*(C'\fR role, we want to provide an entirely
new behavior for \f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`start\*(C'\fR. We exclude them entirely when
composing the \f(CW\*(C`Restartable\*(C'\fR role into \f(CW\*(C`Restartable::ButBroken\*(C'\fR.
.PP
It's worth noting that the \f(CW\*(C`\-excludes\*(C'\fR parameter also accepts a single
string as an argument if you just want to exclude one method.
.PP
.Vb 1
\&  with \*(AqRestartable\*(Aq => { \-excludes => [ \*(Aqstop\*(Aq, \*(Aqstart\*(Aq ] };
.Ve
.SH "CONCLUSION"
.IX Header "CONCLUSION"
Exclusion and renaming are a power tool that can be handy, especially
when building roles out of other roles. In this example, all of our
roles implement the \f(CW\*(C`Restartable\*(C'\fR role. Each role provides same \s-1API,\s0
but each has a different implementation under the hood.
.PP
You can also use the method aliasing and excluding features when
composing a role into a class.
.SH "FOOTNOTES"
.IX Header "FOOTNOTES"
.IP "(1)" 4
.IX Item "(1)"
The mention of wrapper should tell you that we could do the same thing
using method modifiers, but for the sake of this example, we don't.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
