.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::Debug 3"
.TH LWP::Debug 3 "2020-04-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Debug \- deprecated
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module has been deprecated.  Please see LWP::ConsoleLogger for your
debugging needs.
.PP
LWP::Debug is used to provide tracing facilities, but these are not used
by \s-1LWP\s0 any more.  The code in this module is kept around
(undocumented) so that 3rd party code that happens to use the old
interfaces continue to run.
.PP
One useful feature that LWP::Debug provided (in an imprecise and
troublesome way) was network traffic monitoring.  The following
section provides some hints about recommended replacements.
.SS "Network traffic monitoring"
.IX Subsection "Network traffic monitoring"
The best way to monitor the network traffic that \s-1LWP\s0 generates is to
use an external \s-1TCP\s0 monitoring program.  The
WireShark <http://www.wireshark.org/> program is highly recommended for this.
.PP
Another approach it to use a debugging \s-1HTTP\s0 proxy server and make
\&\s-1LWP\s0 direct all its traffic via this one.  Call \f(CW\*(C`$ua\->proxy\*(C'\fR to
set it up and then just use \s-1LWP\s0 as before.
.PP
For less precise monitoring needs just setting up a few simple
handlers might do.  The following example sets up handlers to dump the
request and response objects that pass through \s-1LWP:\s0
.PP
.Vb 3
\&  use LWP::UserAgent;
\&  $ua = LWP::UserAgent\->new;
\&  $ua\->default_header(\*(AqAccept\-Encoding\*(Aq => scalar HTTP::Message::decodable());
\&
\&  $ua\->add_handler("request_send",  sub { shift\->dump; return });
\&  $ua\->add_handler("response_done", sub { shift\->dump; return });
\&
\&  $ua\->get("http://www.example.com");
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::ConsoleLogger, LWP::ConsoleLogger::Everywhere, LWP::UserAgent
