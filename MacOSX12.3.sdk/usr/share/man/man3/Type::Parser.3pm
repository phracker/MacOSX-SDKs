.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Parser 3"
.TH Type::Parser 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Parser \- parse type constraint strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use v5.10;
\& use strict;
\& use warnings;
\& 
\& use Type::Parser qw( eval_type );
\& use Type::Registry;
\& 
\& my $reg = Type::Registry\->for_me;
\& $reg\->add_types("Types::Standard");
\& 
\& my $type = eval_type("Int | ArrayRef[Int]", $reg);
\& 
\& $type\->check(10);        # true
\& $type\->check([1..4]);    # true
\& $type\->check({foo=>1});  # false
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generally speaking, you probably don't want to be using this module directly.
Instead use the \f(CW\*(C`lookup\*(C'\fR method from Type::Registry which wraps it.
.SS "Functions"
.IX Subsection "Functions"
.ie n .IP """parse($string)""" 4
.el .IP "\f(CWparse($string)\fR" 4
.IX Item "parse($string)"
Parse the type constraint string into something like an \s-1AST.\s0
.Sp
If called in list context, also returns any \*(L"tail\*(R" found on the original string.
.ie n .IP """extract_type($string, $registry)""" 4
.el .IP "\f(CWextract_type($string, $registry)\fR" 4
.IX Item "extract_type($string, $registry)"
Compile a type constraint string into a Type::Tiny object.
.Sp
If called in list context, also returns any \*(L"tail\*(R" found on the original string.
.ie n .IP """eval_type($string, $registry)""" 4
.el .IP "\f(CWeval_type($string, $registry)\fR" 4
.IX Item "eval_type($string, $registry)"
Compile a type constraint string into a Type::Tiny object.
.Sp
Throws an error if the \*(L"tail\*(R" contains any non-whitespace character.
.SS "Constants"
.IX Subsection "Constants"
The following constants correspond to values returned by \f(CW\*(C`$token\->type\*(C'\fR.
.ie n .IP """TYPE""" 4
.el .IP "\f(CWTYPE\fR" 4
.IX Item "TYPE"
.PD 0
.ie n .IP """QUOTELIKE""" 4
.el .IP "\f(CWQUOTELIKE\fR" 4
.IX Item "QUOTELIKE"
.ie n .IP """STRING""" 4
.el .IP "\f(CWSTRING\fR" 4
.IX Item "STRING"
.ie n .IP """CLASS""" 4
.el .IP "\f(CWCLASS\fR" 4
.IX Item "CLASS"
.ie n .IP """L_BRACKET""" 4
.el .IP "\f(CWL_BRACKET\fR" 4
.IX Item "L_BRACKET"
.ie n .IP """R_BRACKET""" 4
.el .IP "\f(CWR_BRACKET\fR" 4
.IX Item "R_BRACKET"
.ie n .IP """COMMA""" 4
.el .IP "\f(CWCOMMA\fR" 4
.IX Item "COMMA"
.ie n .IP """SLURPY""" 4
.el .IP "\f(CWSLURPY\fR" 4
.IX Item "SLURPY"
.ie n .IP """UNION""" 4
.el .IP "\f(CWUNION\fR" 4
.IX Item "UNION"
.ie n .IP """INTERSECT""" 4
.el .IP "\f(CWINTERSECT\fR" 4
.IX Item "INTERSECT"
.ie n .IP """NOT""" 4
.el .IP "\f(CWNOT\fR" 4
.IX Item "NOT"
.ie n .IP """L_PAREN""" 4
.el .IP "\f(CWL_PAREN\fR" 4
.IX Item "L_PAREN"
.ie n .IP """R_PAREN""" 4
.el .IP "\f(CWR_PAREN\fR" 4
.IX Item "R_PAREN"
.ie n .IP """MYSTERY""" 4
.el .IP "\f(CWMYSTERY\fR" 4
.IX Item "MYSTERY"
.PD
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Type\-Tiny>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Registry.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
