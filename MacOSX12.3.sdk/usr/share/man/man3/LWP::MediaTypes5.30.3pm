.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::MediaTypes 3"
.TH LWP::MediaTypes 3 "2019-03-20" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::MediaTypes \- guess media type for a file or a URL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use LWP::MediaTypes qw(guess_media_type);
\& $type = guess_media_type("/tmp/foo.gif");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions for handling media (also known as
\&\s-1MIME\s0) types and encodings.  The mapping from file extensions to media
types is defined by the \fImedia.types\fR file.  If the \fI~/.media.types\fR
file exists it is used instead.
For backwards compatibility we will also look for \fI~/.mime.types\fR.
.PP
The following functions are exported by default:
.ie n .IP "guess_media_type( $filename )" 4
.el .IP "guess_media_type( \f(CW$filename\fR )" 4
.IX Item "guess_media_type( $filename )"
.PD 0
.ie n .IP "guess_media_type( $uri )" 4
.el .IP "guess_media_type( \f(CW$uri\fR )" 4
.IX Item "guess_media_type( $uri )"
.ie n .IP "guess_media_type( $filename_or_object, $header_to_modify )" 4
.el .IP "guess_media_type( \f(CW$filename_or_object\fR, \f(CW$header_to_modify\fR )" 4
.IX Item "guess_media_type( $filename_or_object, $header_to_modify )"
.PD
This function tries to guess media type and encoding for a file or objects that
support the a \f(CW\*(C`path\*(C'\fR or \f(CW\*(C`filename\*(C'\fR method, eg, \s-1URI\s0 or File::Temp objects.
When an object does not support either method, it will be stringified to
determine the filename.
It returns the content type, which is a string like \f(CW"text/html"\fR.
In array context it also returns any content encodings applied (in the
order used to encode the file).  You can pass a \s-1URI\s0 object
reference, instead of the file name.
.Sp
If the type can not be deduced from looking at the file name,
then \fBguess_media_type()\fR will let the \f(CW\*(C`\-T\*(C'\fR Perl operator take a look.
If this works (and \f(CW\*(C`\-T\*(C'\fR returns a \s-1TRUE\s0 value) then we return
\&\fItext/plain\fR as the type, otherwise we return
\&\fIapplication/octet\-stream\fR as the type.
.Sp
The optional second argument should be a reference to a HTTP::Headers
object or any object that implements the \f(CW$obj\fR\->header method in a
similar way.  When it is present the values of the
\&'Content\-Type' and 'Content\-Encoding' will be set for this header.
.ie n .IP "media_suffix( $type, ... )" 4
.el .IP "media_suffix( \f(CW$type\fR, ... )" 4
.IX Item "media_suffix( $type, ... )"
This function will return all suffixes that can be used to denote the
specified media type(s).  Wildcard types can be used.  In a scalar
context it will return the first suffix found. Examples:
.Sp
.Vb 2
\&  @suffixes = media_suffix(\*(Aqimage/*\*(Aq, \*(Aqaudio/basic\*(Aq);
\&  $suffix = media_suffix(\*(Aqtext/html\*(Aq);
.Ve
.PP
The following functions are only exported by explicit request:
.ie n .IP "add_type( $type, @exts )" 4
.el .IP "add_type( \f(CW$type\fR, \f(CW@exts\fR )" 4
.IX Item "add_type( $type, @exts )"
Associate a list of file extensions with the given media type.
Example:
.Sp
.Vb 1
\&    add_type("x\-world/x\-vrml" => qw(wrl vrml));
.Ve
.ie n .IP "add_encoding( $type, @ext )" 4
.el .IP "add_encoding( \f(CW$type\fR, \f(CW@ext\fR )" 4
.IX Item "add_encoding( $type, @ext )"
Associate a list of file extensions with an encoding type.
Example:
.Sp
.Vb 1
\& add_encoding("x\-gzip" => "gz");
.Ve
.ie n .IP "read_media_types( @files )" 4
.el .IP "read_media_types( \f(CW@files\fR )" 4
.IX Item "read_media_types( @files )"
Parse media types files and add the type mappings found there.
Example:
.Sp
.Vb 1
\&    read_media_types("conf/mime.types");
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1999 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
