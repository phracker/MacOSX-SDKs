.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::QuotedPrint 3pm"
.TH MIME::QuotedPrint 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::QuotedPrint \- Encoding and decoding of quoted\-printable strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use MIME::QuotedPrint;
\&
\& $encoded = encode_qp($decoded);
\& $decoded = decode_qp($encoded);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions to encode and decode strings into and from the
quoted-printable encoding specified in \s-1RFC 2045 \- \s0\fI\s-1MIME \s0(Multipurpose
Internet Mail Extensions)\fR.  The quoted-printable encoding is intended
to represent data that largely consists of bytes that correspond to
printable characters in the \s-1ASCII\s0 character set.  Each non-printable
character (as defined by English Americans) is represented by a
triplet consisting of the character \*(L"=\*(R" followed by two hexadecimal
digits.
.PP
The following functions are provided:
.ie n .IP "encode_qp( $str)" 4
.el .IP "encode_qp( \f(CW$str\fR)" 4
.IX Item "encode_qp( $str)"
.PD 0
.ie n .IP "encode_qp( $str, $eol)" 4
.el .IP "encode_qp( \f(CW$str\fR, \f(CW$eol\fR)" 4
.IX Item "encode_qp( $str, $eol)"
.ie n .IP "encode_qp( $str, $eol, $binmode )" 4
.el .IP "encode_qp( \f(CW$str\fR, \f(CW$eol\fR, \f(CW$binmode\fR )" 4
.IX Item "encode_qp( $str, $eol, $binmode )"
.PD
This function returns an encoded version of the string ($str) given as
argument.
.Sp
The second argument ($eol) is the line-ending sequence to use.  It is
optional and defaults to \*(L"\en\*(R".  Every occurrence of \*(L"\en\*(R" is replaced
with this string, and it is also used for additional \*(L"soft line
breaks\*(R" to ensure that no line end up longer than 76 characters.  Pass
it as \*(L"\e015\e012\*(R" to produce data suitable for external consumption.
The string \*(L"\er\en\*(R" produces the same result on many platforms, but not
all.
.Sp
The third argument ($binmode) will select binary mode if passed as a
\&\s-1TRUE\s0 value.  In binary mode \*(L"\en\*(R" will be encoded in the same way as
any other non-printable character.  This ensures that a decoder will
end up with exactly the same string whatever line ending sequence it
uses.  In general it is preferable to use the base64 encoding for
binary data; see MIME::Base64.
.Sp
An \f(CW$eol\fR of "\*(L" (the empty string) is special.  In this case, no \*(R"soft
line breaks\*(L" are introduced and binary mode is effectively enabled so
that any \*(R"\en" in the original data is encoded as well.
.ie n .IP "decode_qp( $str )" 4
.el .IP "decode_qp( \f(CW$str\fR )" 4
.IX Item "decode_qp( $str )"
This function returns the plain text version of the string given
as argument.  The lines of the result are \*(L"\en\*(R" terminated, even if
the \f(CW$str\fR argument contains \*(L"\er\en\*(R" terminated lines.
.PP
If you prefer not to import these routines into your namespace, you can
call them as:
.PP
.Vb 3
\&  use MIME::QuotedPrint ();
\&  $encoded = MIME::QuotedPrint::encode($decoded);
\&  $decoded = MIME::QuotedPrint::decode($encoded);
.Ve
.PP
Perl v5.8 and better allow extended Unicode characters in strings.
Such strings cannot be encoded directly, as the quoted-printable
encoding is only defined for single-byte characters.  The solution is
to use the Encode module to select the byte encoding you want.  For
example:
.PP
.Vb 2
\&    use MIME::QuotedPrint qw(encode_qp);
\&    use Encode qw(encode);
\&
\&    $encoded = encode_qp(encode("UTF\-8", "\ex{FFFF}\en"));
\&    print $encoded;
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1997,2002\-2004 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Base64
