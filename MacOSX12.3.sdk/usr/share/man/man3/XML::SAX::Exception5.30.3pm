.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::SAX::Exception 3"
.TH XML::SAX::Exception 3 "2017-04-03" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::SAX::Exception \- Exception classes for XML::SAX
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  throw XML::SAX::Exception::NotSupported(
\&          Message => "The foo feature is not supported",
\&          );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is the base class for all \s-1SAX\s0 Exceptions, those defined in
the spec as well as those that one may create for one's own \s-1SAX\s0 errors.
.PP
There are three subclasses included, corresponding to those of the \s-1SAX\s0
spec:
.PP
.Vb 3
\&  XML::SAX::Exception::NotSupported
\&  XML::SAX::Exception::NotRecognized
\&  XML::SAX::Exception::Parse
.Ve
.PP
Use them wherever you want, and as much as possible when you encounter
such errors. \s-1SAX\s0 is meant to use exceptions as much as possible to 
flag problems.
.SH "CREATING NEW EXCEPTION CLASSES"
.IX Header "CREATING NEW EXCEPTION CLASSES"
All you need to do to create a new exception class is:
.PP
.Vb 1
\&  @XML::SAX::Exception::MyException::ISA = (\*(AqXML::SAX::Exception\*(Aq)
.Ve
.PP
The given package doesn't need to exist, it'll behave correctly this 
way. If your exception refines an existing exception class, then you
may also inherit from that instead of from the base class.
.SH "THROWING EXCEPTIONS"
.IX Header "THROWING EXCEPTIONS"
This is as simple as exemplified in the \s-1SYNOPSIS.\s0 In fact, there's 
nothing more to know. All you have to do is:
.PP
.Vb 1
\&  throw XML::SAX::Exception::MyException( Message => \*(AqSomething went wrong\*(Aq );
.Ve
.PP
and voila, you've thrown an exception which can be caught in an eval block.
