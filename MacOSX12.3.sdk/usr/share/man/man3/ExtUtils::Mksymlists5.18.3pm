.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Mksymlists 3pm"
.TH ExtUtils::Mksymlists 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Mksymlists \- write linker options files for dynamic extension
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use ExtUtils::Mksymlists;
\&    Mksymlists(  NAME     => $name ,
\&                 DL_VARS  => [ $var1, $var2, $var3 ],
\&                 DL_FUNCS => { $pkg1 => [ $func1, $func2 ],
\&                               $pkg2 => [ $func3 ] );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR produces files used by the linker under some OSs
during the creation of shared libraries for dynamic extensions.  It is
normally called from a MakeMaker-generated Makefile when the extension
is built.  The linker option file is generated by calling the function
\&\f(CW\*(C`Mksymlists\*(C'\fR, which is exported by default from \f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR.
It takes one argument, a list of key-value pairs, in which the following
keys are recognized:
.IP "\s-1DLBASE\s0" 4
.IX Item "DLBASE"
This item specifies the name by which the linker knows the
extension, which may be different from the name of the
extension itself (for instance, some linkers add an '_' to the
name of the extension).  If it is not specified, it is derived
from the \s-1NAME\s0 attribute.  It is presently used only by \s-1OS2\s0 and Win32.
.IP "\s-1DL_FUNCS\s0" 4
.IX Item "DL_FUNCS"
This is identical to the \s-1DL_FUNCS\s0 attribute available via MakeMaker,
from which it is usually taken.  Its value is a reference to an
associative array, in which each key is the name of a package, and
each value is an a reference to an array of function names which
should be exported by the extension.  For instance, one might say
\&\f(CW\*(C`DL_FUNCS => { Homer::Iliad => [ qw(trojans greeks) ],
Homer::Odyssey => [ qw(travellers family suitors) ] }\*(C'\fR.  The
function names should be identical to those in the \s-1XSUB\s0 code;
\&\f(CW\*(C`Mksymlists\*(C'\fR will alter the names written to the linker option
file to match the changes made by \fIxsubpp\fR.  In addition, if
none of the functions in a list begin with the string \fBboot_\fR,
\&\f(CW\*(C`Mksymlists\*(C'\fR will add a bootstrap function for that package,
just as xsubpp does.  (If a \fBboot_<pkg>\fR function is
present in the list, it is passed through unchanged.)  If
\&\s-1DL_FUNCS\s0 is not specified, it defaults to the bootstrap
function for the extension specified in \s-1NAME.\s0
.IP "\s-1DL_VARS\s0" 4
.IX Item "DL_VARS"
This is identical to the \s-1DL_VARS\s0 attribute available via MakeMaker,
and, like \s-1DL_FUNCS,\s0 it is usually specified via MakeMaker.  Its
value is a reference to an array of variable names which should
be exported by the extension.
.IP "\s-1FILE\s0" 4
.IX Item "FILE"
This key can be used to specify the name of the linker option file
(minus the OS-specific extension), if for some reason you do not
want to use the default value, which is the last word of the \s-1NAME\s0
attribute (\fIe.g.\fR for \f(CW\*(C`Tk::Canvas\*(C'\fR, \s-1FILE\s0 defaults to \f(CW\*(C`Canvas\*(C'\fR).
.IP "\s-1FUNCLIST\s0" 4
.IX Item "FUNCLIST"
This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported by the extension.  These
names are passed through unaltered to the linker options file.
Specifying a value for the \s-1FUNCLIST\s0 attribute suppresses automatic
generation of the bootstrap function for the package. To still create
the bootstrap name you have to specify the package name in the
\&\s-1DL_FUNCS\s0 hash:
.Sp
.Vb 3
\&    Mksymlists(  NAME     => $name ,
\&                 FUNCLIST => [ $func1, $func2 ],
\&                 DL_FUNCS => { $pkg => [] } );
.Ve
.IP "\s-1IMPORTS\s0" 4
.IX Item "IMPORTS"
This attribute is used to specify names to be imported into the
extension. It is currently only used by \s-1OS/2\s0 and Win32.
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
This gives the name of the extension (\fIe.g.\fR \f(CW\*(C`Tk::Canvas\*(C'\fR) for which
the linker option file will be produced.
.PP
When calling \f(CW\*(C`Mksymlists\*(C'\fR, one should always specify the \s-1NAME\s0
attribute.  In most cases, this is all that's necessary.  In
the case of unusual extensions, however, the other attributes
can be used to provide additional information to the linker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Charles Bailey \fI<bailey@newman.upenn.edu>\fR
.SH "REVISION"
.IX Header "REVISION"
Last revised 14\-Feb\-1996, for Perl 5.002.
