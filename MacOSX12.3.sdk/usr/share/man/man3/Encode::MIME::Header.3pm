.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Encode::MIME::Header 3pm"
.TH Encode::MIME::Header 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Encode::MIME::Header \-\- MIME encoding for an unstructured email header
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Encode qw(encode decode);
\&
\&    my $mime_str = encode("MIME\-Header", "Sample:Text \eN{U+263A}");
\&    # $mime_str is "=?UTF\-8?B?U2FtcGxlOlRleHQg4pi6?="
\&
\&    my $mime_q_str = encode("MIME\-Q", "Sample:Text \eN{U+263A}");
\&    # $mime_q_str is "=?UTF\-8?Q?Sample=3AText_=E2=98=BA?="
\&
\&    my $str = decode("MIME\-Header",
\&        "=?ISO\-8859\-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=\er\en " .
\&        "=?ISO\-8859\-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?="
\&    );
\&    # $str is "If you can read this you understand the example."
\&
\&    use Encode qw(decode :fallbacks);
\&    use Encode::MIME::Header;
\&    local $Encode::MIME::Header::STRICT_DECODE = 1;
\&    my $strict_string = decode("MIME\-Header", $mime_string, FB_CROAK);
\&    # use strict decoding and croak on errors
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module implements \s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047> \s-1MIME\s0
encoding for an unstructured field body of the email header.  It can also be
used for \s-1RFC 822\s0 <https://tools.ietf.org/html/rfc822> 'text' token.  However,
it cannot be used directly for the whole header with the field name or for the
structured header fields like From, To, Cc, Message-Id, etc...  There are 3
encoding names supported by this module: \f(CW\*(C`MIME\-Header\*(C'\fR, \f(CW\*(C`MIME\-B\*(C'\fR and
\&\f(CW\*(C`MIME\-Q\*(C'\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Decode method takes an unstructured field body of the email header (or
\&\s-1RFC 822\s0 <https://tools.ietf.org/html/rfc822> 'text' token) as its input and
decodes each \s-1MIME\s0 encoded-word from input string to a sequence of bytes
according to \s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047> and
\&\s-1RFC 2231\s0 <https://tools.ietf.org/html/rfc2231>.  Subsequently, each sequence
of bytes with the corresponding \s-1MIME\s0 charset is decoded with
the Encode module and finally, one output string is returned.  Text
parts of the input string which do not contain \s-1MIME\s0 encoded-word stay
unmodified in the output string.  Folded newlines between two consecutive \s-1MIME\s0
encoded-words are discarded, others are preserved in the output string.
\&\f(CW\*(C`MIME\-B\*(C'\fR can decode Base64 variant, \f(CW\*(C`MIME\-Q\*(C'\fR can decode Quoted-Printable
variant and \f(CW\*(C`MIME\-Header\*(C'\fR can decode both of them.  If Encode module
does not support particular \s-1MIME\s0 charset or chosen variant then an action based
on \s-1CHECK\s0 flags is performed (by default, the
\&\s-1MIME\s0 encoded-word is not decoded).
.PP
Encode method takes a scalar string as its input and uses
strict \s-1UTF\-8\s0 encoder for encoding it to \s-1UTF\-8\s0
bytes.  Then a sequence of \s-1UTF\-8\s0 bytes is encoded into \s-1MIME\s0 encoded-words
(\f(CW\*(C`MIME\-Header\*(C'\fR and \f(CW\*(C`MIME\-B\*(C'\fR use a Base64 variant while \f(CW\*(C`MIME\-Q\*(C'\fR uses a
Quoted-Printable variant) where each \s-1MIME\s0 encoded-word is limited to 75
characters.  \s-1MIME\s0 encoded-words are separated by \f(CW\*(C`CRLF SPACE\*(C'\fR and joined to
one output string.  Output string is suitable for unstructured field body of
the email header.
.PP
Both encode and decode methods propagate
\&\s-1CHECK\s0 flags when encoding and decoding the
\&\s-1MIME\s0 charset.
.SH "BUGS"
.IX Header "BUGS"
Versions prior to 2.22 (part of Encode 2.83) have a malfunctioning decoder
and encoder.  The \s-1MIME\s0 encoder infamously inserted additional spaces or
discarded white spaces between consecutive \s-1MIME\s0 encoded-words, which led to
invalid \s-1MIME\s0 headers produced by this module.  The \s-1MIME\s0 decoder had a tendency
to discard white spaces, incorrectly interpret data or attempt to decode Base64
\&\s-1MIME\s0 encoded-words as Quoted-Printable.  These problems were fixed in version
2.22.  It is highly recommended not to use any version prior 2.22!
.PP
Versions prior to 2.24 (part of Encode 2.87) ignored
\&\s-1CHECK\s0 flags.  The \s-1MIME\s0 encoder used
not strict utf8 encoder for input Unicode
strings which could lead to invalid \s-1UTF\-8\s0 sequences.  \s-1MIME\s0 decoder used also
not strict utf8 decoder and additionally
called the decode method with a \f(CW\*(C`Encode::FB_PERLQQ\*(C'\fR flag (thus user-specified
\&\s-1CHECK\s0 flags were ignored).  Moreover, it
automatically croaked when a \s-1MIME\s0 encoded-word contained unknown encoding.
Since version 2.24, this module uses
strict \s-1UTF\-8\s0 encoder and decoder.  And
\&\s-1CHECK\s0 flags are correctly propagated.
.PP
Since version 2.22 (part of Encode 2.83), the \s-1MIME\s0 encoder should be fully
compliant to \s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047> and
\&\s-1RFC 2231\s0 <https://tools.ietf.org/html/rfc2231>.  Due to the aforementioned
bugs in previous versions of the \s-1MIME\s0 encoder, there is a \fIless strict\fR
compatible mode for the \s-1MIME\s0 decoder which is used by default.  It should be
able to decode \s-1MIME\s0 encoded-words encoded by pre 2.22 versions of this module.
However, note that this is not correct according to
\&\s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047>.
.PP
In default \fInot strict\fR mode the \s-1MIME\s0 decoder attempts to decode every substring
which looks like a \s-1MIME\s0 encoded-word.  Therefore, the \s-1MIME\s0 encoded-words do not
need to be separated by white space.  To enforce a correct \fIstrict\fR mode, set
variable \f(CW$Encode::MIME::Header::STRICT_DECODE\fR to 1 e.g. by localizing:
.PP
.Vb 2
\&  use Encode::MIME::Header;
\&  local $Encode::MIME::Header::STRICT_DECODE = 1;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Pali <pali@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode,
\&\s-1RFC 822\s0 <https://tools.ietf.org/html/rfc822>,
\&\s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047>,
\&\s-1RFC 2231\s0 <https://tools.ietf.org/html/rfc2231>
