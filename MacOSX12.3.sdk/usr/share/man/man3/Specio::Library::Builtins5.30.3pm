.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Library::Builtins 3"
.TH Specio::Library::Builtins 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Library::Builtins \- Implements type constraint objects for Perl's built\-in types
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This library provides a set of types parallel to those provided by Moose.
.PP
The types are in the following hierarchy
.PP
.Vb 10
\&  Item
\&      Bool
\&      Maybe (of \`a)
\&      Undef
\&      Defined
\&          Value
\&              Str
\&                  Num
\&                      Int
\&                  ClassName
\&          Ref
\&              ScalarRef (of \`a)
\&              ArrayRef (of \`a)
\&              HashRef (of \`a)
\&              CodeRef
\&              RegexpRef
\&              GlobRef
\&              FileHandle
\&              Object
.Ve
.SS "Item"
.IX Subsection "Item"
Accepts any value
.SS "Bool"
.IX Subsection "Bool"
Accepts a non-reference that is \f(CW\*(C`undef\*(C'\fR, an empty string, \f(CW0\fR, or \f(CW1\fR. It
also accepts any object which overloads boolification.
.SS "Maybe (of `a)"
.IX Subsection "Maybe (of `a)"
A parameterizable type which accepts \f(CW\*(C`undef\*(C'\fR or the type \f(CW\*(C`\`a\*(C'\fR. If not
parameterized this type will accept any value.
.SS "Undef"
.IX Subsection "Undef"
Only accepts \f(CW\*(C`undef\*(C'\fR.
.SS "Value"
.IX Subsection "Value"
Accepts any non-reference value.
.SS "Str"
.IX Subsection "Str"
Accepts any non-reference value or an object which overloads stringification.
.SS "Num"
.IX Subsection "Num"
Accepts nearly the same values as \f(CW\*(C`Scalar::Util::looks_like_number\*(C'\fR, but does
not accept numbers with leading or trailing spaces, infinities, or NaN. Also
accepts an object which overloads numification.
.SS "Int"
.IX Subsection "Int"
Accepts any integer value, or an object which overloads numification and
numifies to an integer.
.SS "ClassName"
.IX Subsection "ClassName"
Accepts any value which passes \f(CW\*(C`Str\*(C'\fR where the string is a loaded package.
.SS "Ref"
.IX Subsection "Ref"
Accepts any reference.
.SS "ScalarRef (of `a)"
.IX Subsection "ScalarRef (of `a)"
Accepts a scalar reference or an object which overloads scalar
dereferencing. If parameterized, the dereferenced value must be of type \f(CW\*(C`\`a\*(C'\fR.
.SS "ArrayRef (of `a)"
.IX Subsection "ArrayRef (of `a)"
Accepts a array reference or an object which overloads array dereferencing. If
parameterized, the values in the arrayref must be of type \f(CW\*(C`\`a\*(C'\fR.
.SS "HashRef (of `a)"
.IX Subsection "HashRef (of `a)"
Accepts a hash reference or an object which overloads hash dereferencing. If
parameterized, the values in the hashref must be of type \f(CW\*(C`\`a\*(C'\fR.
.SS "CodeRef"
.IX Subsection "CodeRef"
Accepts a code (sub) reference or an object which overloads code
dereferencing.
.SS "RegexpRef"
.IX Subsection "RegexpRef"
Accepts a regex object created by \f(CW\*(C`qr//\*(C'\fR or an object which overloads
regex interpolation.
.SS "GlobRef"
.IX Subsection "GlobRef"
Accepts a glob reference or an object which overloads glob dereferencing.
.SS "FileHandle"
.IX Subsection "FileHandle"
Accepts a glob reference which is an open file handle, any \f(CW\*(C`IO::Handle\*(C'\fR
Object or subclass, or an object which overloads glob dereferencing and
returns a glob reference which is an open file handle.
.SS "Object"
.IX Subsection "Object"
Accepts any blessed object.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
