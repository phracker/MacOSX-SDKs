.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::AuthenticationResults::FoldableHeader 3"
.TH Mail::AuthenticationResults::FoldableHeader 3 "2020-08-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::AuthenticationResults::FoldableHeader \- Class for modelling a foldable header string
.SH "VERSION"
.IX Header "VERSION"
version 1.20200824.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class representing a foldable Authentication Results header string
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( $args )"
.el .SS "new( \f(CW$args\fP )"
.IX Subsection "new( $args )"
Return a new instance of this class
.SS "\fBeol()\fP"
.IX Subsection "eol()"
Return the current eol marker.
.ie n .SS "set_eol( $eol )"
.el .SS "set_eol( \f(CW$eol\fP )"
.IX Subsection "set_eol( $eol )"
Set the current eol marker.
.SS "\fBindent()\fP"
.IX Subsection "indent()"
Return the current base indent string.
.PP
Defaults to 4 spaces.
.ie n .SS "set_indent( $indent )"
.el .SS "set_indent( \f(CW$indent\fP )"
.IX Subsection "set_indent( $indent )"
Set the current base indent string.
.SS "\fBsub_indent()\fP"
.IX Subsection "sub_indent()"
Return the current fold indent string.
This is added to the current indent for folded headers.
.PP
Defaults to 2 spaces.
.ie n .SS "set_sub_indent( $indent )"
.el .SS "set_sub_indent( \f(CW$indent\fP )"
.IX Subsection "set_sub_indent( $indent )"
Set the current fold indent string.
.SS "\fBtry_fold_at()\fP"
.IX Subsection "try_fold_at()"
Return the length of header line for triggering a fold attempt
.ie n .SS "set_try_fold_at( $length )"
.el .SS "set_try_fold_at( \f(CW$length\fP )"
.IX Subsection "set_try_fold_at( $length )"
Set the length of header line for triggering a fold attempt.
.PP
Defaults to 800.
.SS "\fBforce_fold_at()\fP"
.IX Subsection "force_fold_at()"
Return the length of header line for forcing a fold.
.ie n .SS "set_force_fold_at( $length )"
.el .SS "set_force_fold_at( \f(CW$length\fP )"
.IX Subsection "set_force_fold_at( $length )"
Set the length of header line for forcing a fold.
.PP
Defaults to 900.
.ie n .SS "string( $string )"
.el .SS "string( \f(CW$string\fP )"
.IX Subsection "string( $string )"
Add \f(CW$string\fR to this header string
.PP
In this context, string can include a quoted string, or a string with assignment operators embedded within it.
A string is a unit of data which we do not want to break with a fold.
.ie n .SS "space( $string )"
.el .SS "space( \f(CW$string\fP )"
.IX Subsection "space( $string )"
Add a space \f(CW$string\fR to this header string
.PP
In this context, a space can be a single space, multiple spaces, or a folding space.
A space is a unit of data which would be an ideal spot to insert a fold.
.ie n .SS "separator( $string )"
.el .SS "separator( \f(CW$string\fP )"
.IX Subsection "separator( $string )"
Add a separator \f(CW$string\fR to this header string
.PP
In this context, a separator is the ; string or the / string.
.ie n .SS "comment( $string )"
.el .SS "comment( \f(CW$string\fP )"
.IX Subsection "comment( $string )"
Add a comment \f(CW$string\fR to this header string
.PP
In this context, a comment is a comment string. A comment is a unit of data which we do not want to break with a fold.
.ie n .SS "assignment( $string )"
.el .SS "assignment( \f(CW$string\fP )"
.IX Subsection "assignment( $string )"
Add an assignment \f(CW$string\fR to this header string
.PP
In this context, as assignment is the = string.
.SS "\fBas_string()\fP"
.IX Subsection "as_string()"
Return the current header string
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
