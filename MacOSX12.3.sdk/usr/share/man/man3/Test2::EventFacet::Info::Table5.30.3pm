.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Info::Table 3"
.TH Test2::EventFacet::Info::Table 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::EventFacet::Info::Table \- Intermediary representation of a table.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Intermediary representation of a table for use in specialized
Test::API::Context methods which generate Test2::EventFacet::Info facets.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test2::EventFacet::Info::Table;
\&    use Test2::API qw/context/;
\&
\&    sub my_tool {
\&        my $ctx = context();
\&
\&        ...
\&
\&        $ctx\->fail(
\&            $name,
\&            "failure diag message",
\&            Test2::EventFacet::Info::Table\->new(
\&                # Required
\&                rows => [[\*(Aqa\*(Aq, \*(Aqb\*(Aq], [\*(Aqc\*(Aq, \*(Aqd\*(Aq], ...],
\&
\&                # Strongly Recommended
\&                as_string => "... string to print when table cannot be rendered ...",
\&
\&                # Optional
\&                header => [\*(Aqcol1\*(Aq, \*(Aqcol2\*(Aq],
\&                collapse => $bool,
\&                no_collapse => [\*(Aqcol1\*(Aq, ...],
\&            ),
\&        );
\&
\&        ...
\&
\&        $ctx\->release;
\&    }
\&
\&    my_tool();
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .IP "$header_aref = $t\->\fBheader()\fR" 4
.el .IP "\f(CW$header_aref\fR = \f(CW$t\fR\->\fBheader()\fR" 4
.IX Item "$header_aref = $t->header()"
.PD 0
.ie n .IP "$rows_aref = $t\->\fBrows()\fR" 4
.el .IP "\f(CW$rows_aref\fR = \f(CW$t\fR\->\fBrows()\fR" 4
.IX Item "$rows_aref = $t->rows()"
.ie n .IP "$bool = $t\->\fBcollapse()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$t\fR\->\fBcollapse()\fR" 4
.IX Item "$bool = $t->collapse()"
.ie n .IP "$aref = $t\->\fBno_collapse()\fR" 4
.el .IP "\f(CW$aref\fR = \f(CW$t\fR\->\fBno_collapse()\fR" 4
.IX Item "$aref = $t->no_collapse()"
.PD
The above are all directly tied to the table hashref structure described in
Test2::EventFacet::Info.
.ie n .IP "$str = $t\->\fBas_string()\fR" 4
.el .IP "\f(CW$str\fR = \f(CW$t\fR\->\fBas_string()\fR" 4
.IX Item "$str = $t->as_string()"
This returns the string form of the table if it was set, otherwise it returns
the string \f(CW"<TABLE NOT DISPLAYED>"\fR.
.ie n .IP "$href = $t\->\fBas_hash()\fR" 4
.el .IP "\f(CW$href\fR = \f(CW$t\fR\->\fBas_hash()\fR" 4
.IX Item "$href = $t->as_hash()"
This returns the data structure used for tables by Test2::EventFacet::Info.
.ie n .IP "%args = $t\->\fBinfo_args()\fR" 4
.el .IP "\f(CW%args\fR = \f(CW$t\fR\->\fBinfo_args()\fR" 4
.IX Item "%args = $t->info_args()"
This returns the arguments that should be used to construct the proper
Test2::EventFacet::Info structure.
.Sp
.Vb 1
\&    return (table => $t\->as_hash(), details => $t\->as_string());
.Ve
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
