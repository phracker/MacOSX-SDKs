.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::AsyncSubtest 3"
.TH Test2::Tools::AsyncSubtest 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::AsyncSubtest \- Tools for writing async subtests.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These are tools for writing async subtests. Async subtests are subtests which
can be started and stashed so that they can continue to receive events while
other events are also being generated.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test2::Bundle::Extended;
\&    use Test2::Tools::AsyncSubtest;
\&
\&    my $ast1 = async_subtest local => sub {
\&        ok(1, "Inside subtest");
\&    };
\&
\&    my $ast2 = fork_subtest child => sub {
\&        ok(1, "Inside subtest in another process");
\&    };
\&
\&    # You must call finish on the subtests you create. Finish will wait/join on
\&    # any child processes and threads.
\&    $ast1\->finish;
\&    $ast2\->finish;
\&
\&    done_testing;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
Everything is exported by default.
.ie n .IP "$ast = async_subtest $name" 4
.el .IP "\f(CW$ast\fR = async_subtest \f(CW$name\fR" 4
.IX Item "$ast = async_subtest $name"
.PD 0
.ie n .IP "$ast = async_subtest $name => sub { ... }" 4
.el .IP "\f(CW$ast\fR = async_subtest \f(CW$name\fR => sub { ... }" 4
.IX Item "$ast = async_subtest $name => sub { ... }"
.ie n .IP "$ast = async_subtest $name => \e%hub_params, sub { ... }" 4
.el .IP "\f(CW$ast\fR = async_subtest \f(CW$name\fR => \e%hub_params, sub { ... }" 4
.IX Item "$ast = async_subtest $name => %hub_params, sub { ... }"
.PD
Create an async subtest. Run the codeblock if it is provided.
.ie n .IP "$ast = fork_subtest $name => sub { ... }" 4
.el .IP "\f(CW$ast\fR = fork_subtest \f(CW$name\fR => sub { ... }" 4
.IX Item "$ast = fork_subtest $name => sub { ... }"
.PD 0
.ie n .IP "$ast = fork_subtest $name => \e%hub_params, sub { ... }" 4
.el .IP "\f(CW$ast\fR = fork_subtest \f(CW$name\fR => \e%hub_params, sub { ... }" 4
.IX Item "$ast = fork_subtest $name => %hub_params, sub { ... }"
.PD
Create an async subtest. Run the codeblock in a forked process.
.ie n .IP "$ast = thread_subtest $name => sub { ... }" 4
.el .IP "\f(CW$ast\fR = thread_subtest \f(CW$name\fR => sub { ... }" 4
.IX Item "$ast = thread_subtest $name => sub { ... }"
.PD 0
.ie n .IP "$ast = thread_subtest $name => \e%hub_params, sub { ... }" 4
.el .IP "\f(CW$ast\fR = thread_subtest \f(CW$name\fR => \e%hub_params, sub { ... }" 4
.IX Item "$ast = thread_subtest $name => %hub_params, sub { ... }"
.PD
\&\fB** \s-1DISCOURAGED\s0 **\fR Threads are fragile. Thread tests are not even run unless
the \s-1AUTHOR_TESTING\s0 or T2_DO_THREAD_TESTS env vars are enabled.
.Sp
Create an async subtest. Run the codeblock in a thread.
.SH "NOTES"
.IX Header "NOTES"
.IP "Async Subtests are always buffered." 4
.IX Item "Async Subtests are always buffered."
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-AsyncSubtest can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
