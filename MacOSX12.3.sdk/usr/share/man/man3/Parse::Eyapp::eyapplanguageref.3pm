.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::eyapplanguageref 3"
.TH Parse::Eyapp::eyapplanguageref 3 "2012-03-23" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::eyapplanguageref \- The Eyapp language reference manual
.SH "THE EYAPP LANGUAGE"
.IX Header "THE EYAPP LANGUAGE"
.SS "Eyapp Grammar"
.IX Subsection "Eyapp Grammar"
This section describes the syntax of the Eyapp language using its own notation.
The grammar extends yacc and yapp grammars.  Semicolons have been omitted
to save space.  Between C\-like comments you can find an (informal) explanation
of the language associated with each token.
.PP
.Vb 10
\&  %token ASSOC /* is %(left|right|nonassoc) */                                                                                                          
\&  %token BEGINCODE /* is %begin { Perl code ... } */                                                                                                    
\&  %token CODE /* is { Perl code ... } */                                                                                                                
\&  %token CONFLICT /* is %conflict */                                                                                                                    
\&  %token DEFAULTACTION /* is %defaultaction */                                                                                                          
\&  %token EXPECT /* is %expect */                                                                                                                        
\&  %token HEADCODE /* is %{ Perl code ... %} */                                                                                                          
\&  %token IDENT /* is [A\-Za\-z_][A\-Za\-z0\-9_]* */                                                                                                          
\&  %token LABEL /* is :[A\-Za\-z0\-9_]+ */                                                                                                                  
\&  %token LITERAL /* is a string literal like \*(Aqhello\*(Aq */                                                                                                 
\&  %token METATREE /* is %metatree */                                                                                                                    
\&  %token NAME /* is %name */                                                                                                                            
\&  %token NAMINGSCHEME /* is %namingscheme */                                                                                                            
\&  %token NOCOMPACT /* is %nocompact */                                                                                                                  
\&  %token NUMBER /* is \ed+ */                                                                                                                            
\&  %token OPTION /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e? */                                                                                                 
\&  %token PLUS /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+ */                                                                                                   
\&  %token PREC /* is %prec */                                                                                                                            
\&  %token PREFIX /* is %prefix\es+([A\-Za\-z_][A\-Za\-z0\-9_:]*::) */                                                                                          
\&  %token SEMANTIC /* is %semantic\es+token */                                                                                                            
\&  %token STAR /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e* */                                                                                                   
\&  %token START /* is %start */                                                                                                                          
\&  %token STRICT /* is %strict */                                                                                                                        
\&  %token SYNTACTIC /* is %syntactic\es+token */                                                                                                          
\&  %token TAILCODE /* is { Perl code ... } */                                                                                                            
\&  %token TOKEN /* is %token */                                                                                                                          
\&  %token TREE /* is %tree */                                                                                                                            
\&  %token TYPE /* is %type */                                                                                                                            
\&  %token UNION /* is %union */                                                                                                                          
\&  %start eyapp                                                                                                                                          
\&
\&  %%
\&
\&  # Main rule
\&  eyapp:     
\&        head body tail 
\&  ;                    
\&  #Common rules:       
\&  symbol:              
\&        LITERAL        
\&      | ident #default action
\&  ;                          
\&  ident:                     
\&        IDENT                
\&  ;                          
\&  # Head section:            
\&  head:                      
\&        headsec \*(Aq%%\*(Aq         
\&  ;                          
\&  headsec:                   
\&        #empty  #default action
\&      | decls #default action  
\&  ;                            
\&  decls:                       
\&        decls decl #default action
\&      | decl #default action      
\&  ;                               
\&  decl:                           
\&        \*(Aq\en\*(Aq #default action      
\&      | SEMANTIC typedecl symlist \*(Aq\en\*(Aq
\&      | SYNTACTIC typedecl symlist \*(Aq\en\*(Aq
\&      | TOKEN typedecl toklist \*(Aq\en\*(Aq    
\&      | ASSOC typedecl symlist \*(Aq\en\*(Aq    
\&      | START ident \*(Aq\en\*(Aq               
\&      | PREFIX \*(Aq\en\*(Aq                    
\&      | WHITES CODE \*(Aq\en\*(Aq               
\&      | WHITES REGEXP \*(Aq\en\*(Aq             
\&      | WHITES \*(Aq=\*(Aq CODE \*(Aq\en\*(Aq           
\&      | WHITES \*(Aq=\*(Aq REGEXP \*(Aq\en\*(Aq         
\&      | NAMINGSCHEME CODE \*(Aq\en\*(Aq         
\&      | HEADCODE \*(Aq\en\*(Aq                  
\&      | UNION CODE \*(Aq\en\*(Aq  #ignore       
\&      | DEFAULTACTION CODE \*(Aq\en\*(Aq        
\&      | LEXER CODE \*(Aq\en\*(Aq                
\&      | TREE \*(Aq\en\*(Aq                      
\&      | METATREE \*(Aq\en\*(Aq                  
\&      | STRICT \*(Aq\en\*(Aq                    
\&      | NOCOMPACT \*(Aq\en\*(Aq                 
\&      | TYPE typedecl identlist \*(Aq\en\*(Aq   
\&      | CONFLICT ident CODE \*(Aq\en\*(Aq       
\&      | EXPECT NUMBER \*(Aq\en\*(Aq             
\&      | EXPECT NUMBER NUMBER \*(Aq\en\*(Aq      
\&      | EXPECTRR NUMBER \*(Aq\en\*(Aq           
\&      | error \*(Aq\en\*(Aq                     
\&  ;                                    
\&  typedecl:                            
\&        #empty                         
\&      | \*(Aq<\*(Aq IDENT \*(Aq>\*(Aq                  
\&  ;                                    
\&  symlist:                             
\&        symlist symbol                 
\&      | symbol                         
\&  ;                                    
\&  toklist:                             
\&        toklist tokendef               
\&      | tokendef                       
\&  ;                                    
\&  tokendef:                            
\&        symbol \*(Aq=\*(Aq REGEXP              
\&      | symbol \*(Aq=\*(Aq CODE                
\&      | symbol                         
\&  ;                                    
\&  identlist:                           
\&        identlist ident                
\&      | ident                          
\&  ;                                    
\&  # Rule section                       
\&  body:                                
\&        rulesec \*(Aq%%\*(Aq                   
\&      | \*(Aq%%\*(Aq                           
\&  ;                                    
\&  rulesec:                             
\&        rulesec rules #default action  
\&      | startrules #default action     
\&  ;                                    
\&  startrules:                          
\&        IDENT \*(Aq:\*(Aq  rhss \*(Aq;\*(Aq            
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rules:                               
\&        IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq             
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rhss:                                
\&        rhss \*(Aq|\*(Aq rule                  
\&      | rule                           
\&  ;                                    
\&  rule:                                
\&        optname rhs prec epscode       
\&      | optname rhs                    
\&  ;                                    
\&  rhs:                                 
\&        #empty      #default action (will return undef)
\&      | rhselts #default action                        
\&  ;                                                    
\&  rhselts:                                             
\&        rhselts rhseltwithid                           
\&      | rhseltwithid                                   
\&  ;                                                    
\&  rhseltwithid:                                        
\&        rhselt \*(Aq.\*(Aq IDENT
\&      | \*(Aq$\*(Aq rhselt
\&      | \*(Aq$\*(Aq error
\&      | rhselt
\&  ;
\&  rhselt:
\&        symbol
\&      | code
\&      | DPREC ident
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq
\&      | rhselt STAR
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq
\&      | rhselt OPTION
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS
\&  ;
\&  optname:
\&        /* empty */
\&      | NAME IDENT
\&      | NAME IDENT LABEL
\&      | NAME LABEL
\&  ;
\&  prec:
\&        PREC symbol
\&  ;
\&  epscode:
\&      | code
\&  ;
\&  code:
\&        CODE
\&      | BEGINCODE
\&  ;
\&  # Tail section:
\&  tail:
\&        /*empty*/
\&      | TAILCODE
\&  ;
\&
\&  %%
.Ve
.PP
The semantic of \f(CW\*(C`Eyapp\*(C'\fR agrees with the semantic of \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`yapp\*(C'\fR for
all the common constructions.
.SS "Comments"
.IX Subsection "Comments"
Comments are either Perl style, from \f(CW\*(C`#\*(C'\fR
up to the end of line, or C style, enclosed between  \f(CW\*(C`/*\*(C'\fR and \f(CW\*(C`*/\*(C'\fR.
.SS "Syntactic Variables, Symbolic Tokens and String Literals"
.IX Subsection "Syntactic Variables, Symbolic Tokens and String Literals"
Two kind of symbols may appear inside a Parse::Eyapp program:
\&\fINon-terminal\fR symbols or \fIsyntactic variables\fR, 
called also \fIleft-hand-side\fR symbols
and \fITerminal\fR symbols, called
also \fITokens\fR.
.PP
Tokens are the symbols the lexical analyzer function returns to the parser.
There are two kinds of tokens: \fIsymbolic tokens\fR and \fIstring
literals\fR.
.PP
\&\fISyntactic variables\fR and \fIsymbolic tokens\fR identifiers must conform
to the regular expression \f(CW\*(C`[A\-Za\-z][A\-Za\-z0\-9_]*\*(C'\fR.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIsymbolic tokens\fR will be considered \fIsemantic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISymbolic tokens\fR yield nodes
in the Abstract Syntax Tree.
.PP
String literals are enclosed in single quotes and can contain almost
anything. They will be received by the parser as double-quoted strings. 
Any special character as \f(CW\*(Aq"\*(Aq\fR, \f(CW\*(Aq$\*(Aq\fR and \f(CW\*(Aq@\*(Aq\fR is escaped.
To have a single quote inside a literal, escape it with '\e'.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIstring literals\fR will be considered \fIsyntactic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISyntactic tokens\fR do not produce
nodes in the Abstract Syntax Tree.
.PP
The examples used along this document can be found in the directory 
\&\f(CW\*(C`examples/eyapplanguageref\*(C'\fR accompanying this distribution.
.ie n .SS "Parts of an ""eyapp"" Program"
.el .SS "Parts of an \f(CWeyapp\fP Program"
.IX Subsection "Parts of an eyapp Program"
An Eyapp program has three parts called head, body and tail:
.PP
.Vb 1
\&                                 eyapp: head body tail ;
.Ve
.PP
Each part is separated from the former by the symbol \f(CW\*(C`%%\*(C'\fR:
.PP
.Vb 2
\&                                 head: headsec \*(Aq%%\*(Aq
\&                                 body: rulesec \*(Aq%%\*(Aq
.Ve
.SH "THE HEAD SECTION"
.IX Header "THE HEAD SECTION"
The head section contains a list of declarations
.PP
.Vb 1
\&                                 headsec:  decl *
.Ve
.PP
There are different kinds of declarations.
.PP
This reference does not 
fully describes all the declarations that are shared with \f(CW\*(C`yacc\*(C'\fR and 
yapp.
.SS "Example of Head Section"
.IX Subsection "Example of Head Section"
In this and the next sections we will describe the basics
of the Eyapp language using the file \f(CW\*(C`examples/eyapplanguageref/Calc.eyp\*(C'\fR 
that accompanies this distribution. This file implements a trivial 
calculator. Here is the header section:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,/%%/p\*(Aq Calc.eyp | cat \-n
\&     1  # examples/eyapplanguageref/Calc.eyp
\&     2  %whites    =  /([ \et]*(?:#.*)?)/
\&     3  %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&     4  %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&     5
\&     6  %right  \*(Aq=\*(Aq
\&     7  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     8  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     9  %left   NEG
\&    10  %right  \*(Aq^\*(Aq
\&    11
\&    12  %{
\&    13  my %s; # symbol table
\&    14  %}
\&    15
\&    16  %%
.Ve
.PP
Eyapp produces a lexical generator from the descriptions given
by the \f(CW%token\fR and \f(CW%whites\fR directives plus the tokens used 
inside the body section.
.PP
.Vb 3
\&       %whites    =  /([ \et]*(?:#.*)?)/
\&       %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&       %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
.Ve
.PP
See section \*(L"Automatic Generation of Lexical Analyzers\*(R" for more details.
.SS "Declarations and Precedence"
.IX Subsection "Declarations and Precedence"
Lines 2\-5 declare several tokens. The usual way to declare
tokens is through the \f(CW%token\fR directive. The declarations 
\&\f(CW%nonassoc\fR, \f(CW%left\fR and \f(CW%right\fR 
not only declare the tokens but also associate a \fIpriority\fR with them.  
Tokens declared in the same line have the same precedence. 
Tokens declared with these directives in lines below have more
precedence than those declared above. Thus, in the example
above
we are saying that \f(CW"+"\fR and \f(CW"\-"\fR have the same precedence
but higher precedence than =. The final effect of \f(CW"\-"\fR
having greater precedence than = will be that an
expression like:
.PP
.Vb 1
\&                        a = 4 \- 5
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                        a = (4 \- 5)
.Ve
.PP
and not as
.PP
.Vb 1
\&                        (a = 4) \- 5
.Ve
.PP
The use of the \f(CW%left\fR indicates that \- in case of ambiguity 
and a match between precedences \- the parser must build the tree corresponding
to a left parenthesizing. Thus, the expression
.PP
.Vb 1
\&                         4 \- 5 \- 9
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                         (4 \- 5) \- 9
.Ve
.PP
You can refer to the token end-of-input in the header section using the string \f(CW\*(Aq\*(Aq\fR (for example
to give it some priority, see the example in \f(CW\*(C`examples/debuggingtut/typicalrrwithprec.eyp\*(C'\fR).
.SS "Header Code"
.IX Subsection "Header Code"
Perl code surrounded by \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR
can be inserted in the head section. Such code will be inserted in the module
generated by \f(CW\*(C`eyapp\*(C'\fR near the beginning. Therefore, declarations like the
one of the calculator symbol table \f(CW%s\fR
.PP
.Vb 3
\&  7  %{
\&  8  my %s; # symbol table
\&  9  %}
.Ve
.PP
will be visible from almost any point in the file.
.SS "The Start Symbol of the Grammar"
.IX Subsection "The Start Symbol of the Grammar"
\&\f(CW\*(C`%start program\*(C'\fR declares \f(CW\*(C`program\*(C'\fR as the start symbol of 
the grammar. When \f(CW%start\fR is not
used, the first rule in the body section will be used.
.SS "Expect"
.IX Subsection "Expect"
The \f(CW\*(C`%expect #NUMBER\*(C'\fR directive works as in \f(CW\*(C`bison\*(C'\fR 
and  suppress warnings when the number of Shift/Reduce
conflicts is exactly \f(CW\*(C`#NUMBER\*(C'\fR.
.PP
The directive has been extended to be called with two numbers:
.PP
.Vb 1
\&  %expect NUMSHIFTRED NUMREDRED
.Ve
.PP
no warnings will be emitted if the number of shift-reduce 
conflicts is exactly \f(CW\*(C`NUMSHIFTRED\*(C'\fR and the number of reduce-reduce
conflicts is \f(CW\*(C`NUMREDRED\*(C'\fR.
.SS "Type and Union"
.IX Subsection "Type and Union"
C oriented declarations like \f(CW%type\fR and \f(CW%union\fR are
parsed but ignored.
.ie n .SS "The %strict Directive"
.el .SS "The \f(CW%strict\fP Directive"
.IX Subsection "The %strict Directive"
By default, identifiers appearing in the rule section
will be classified as terminal if they don't appear 
in the left hand side of any production rules.
.PP
The directive \f(CW%strict\fR forces the declaration of all tokens. 
The following \f(CW\*(C`eyapp\*(C'\fR program issues a warning:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp2.eyp
\&       1  %strict
\&       2  %%
\&       3  expr: NUM;
\&       4  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp2.eyp
\&  Warning! Non declared token NUM at line 3 of bugyapp2.eyp
.Ve
.PP
To keep silent the compiler declare all tokens using
one of the token declaration directives (\f(CW%token\fR, \f(CW%left\fR, etc.)
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp3.eyp
\&       1  %strict
\&       2  %token NUM
\&       3  %%
\&       4  expr: NUM;
\&       5  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp3.eyp
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ls \-ltr | tail \-1
\&  \-rw\-r\-\-r\-\- 1 pl users 2395 2008\-10\-02 09:41 bugyapp3.pm
.Ve
.PP
It is a good practice to use \f(CW%strict\fR at the beginning of your grammar.
.ie n .SS "The %prefix Directive"
.el .SS "The \f(CW%prefix\fP Directive"
.IX Subsection "The %prefix Directive"
The \f(CW%prefix\fR directive 
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix
.PP
.Vb 1
\&  %prefix Some::Prefix::
.Ve
.PP
See the example in \f(CW\*(C`examples/eyapplanguageref/alias_and_yyprefix.pl\*(C'\fR.
See also section \*(L"Grammar Reuse\*(R" in Parse::Eyapp::defaultactionsintro
for an example that does not involve the \f(CW%tree\fR directive.
.SS "Default Action Directive"
.IX Subsection "Default Action Directive"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify the default action 
using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0.
The examples \f(CW\*(C`examples/eyapplanguageref/Postfix.eyp\*(C'\fR and 
\&\f(CW\*(C`examples/eyapplanguageref/Lhs.eyp\*(C'\fR illustrate the use of the directive.
.SS "Tree Construction Directives"
.IX Subsection "Tree Construction Directives"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
and \f(CW%metatree\fR directives. See sections
\&\*(L"\s-1ABSTRACT SYNTAX TREES:\s0 \f(CW%tree\fR \s-1AND\s0 \f(CW%name\fR\*(R"
and
Parse::Eyapp::translationschemestut.
.SS "Tokens and the Abstract Syntax Tree"
.IX Subsection "Tokens and the Abstract Syntax Tree"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the way \f(CW\*(C`eyapp\*(C'\fR builds the abstract syntax tree.
See section \*(L"Syntactic and Semantic tokens\*(R".
.ie n .SS "The %nocompact directive"
.el .SS "The \f(CW%nocompact\fP directive"
.IX Subsection "The %nocompact directive"
This directive influences the generation of the \s-1LALR\s0 tables.
They will not be compacted and the tokens
for the \f(CW\*(C`DEFAULT\*(C'\fR reduction will be explicitly set.
It can be used to produce an \f(CW\*(C`.output\*(C'\fR file (option \f(CW\*(C`\-v\*(C'\fR)
with more information.
.SH "THE BODY"
.IX Header "THE BODY"
The body section contains the rules describing the grammar:
.PP
.Vb 3
\&                       body:   rules * \*(Aq%%\*(Aq
\&                       rules:  IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq  
\&                       rhss:   (optname rhs (prec epscode)?) <+ \*(Aq|\*(Aq>
.Ve
.SS "Rules"
.IX Subsection "Rules"
A rule is made of a left-hand-side symbol (the \fIsyntactic variable\fR), 
followed by a \f(CW\*(Aq:\*(Aq\fR and one
or more \fIright-hand-sides\fR (or \fIproductions\fR)
 separated by \f(CW\*(Aq|\*(Aq\fR and terminated by a \f(CW\*(Aq;\*(Aq\fR
like in:
.PP
.Vb 5
\&                          exp: 
\&                               exp \*(Aq+\*(Aq exp
\&                            |  exp \*(Aq\-\*(Aq exp
\&                            |  NUM
\&                          ;
.Ve
.PP
A \fIproduction\fR (\fIright hand side\fR) may be empty:
.PP
.Vb 4
\&                          input:   
\&                               /* empty */
\&                            |  input line
\&                          ;
.Ve
.PP
The former two productions can be abbreviated as
.PP
.Vb 3
\&                          input: 
\&                               line *
\&                          ;
.Ve
.PP
The operators \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`+\*(C'\fR and \f(CW\*(C`?\*(C'\fR are presented in section
\&\*(L"\s-1LISTS AND OPTIONALS\*(R"\s0.
.PP
A \fIsyntactic variable cannot appear more than once as
a rule name\fR (This differs from \f(CW\*(C`yacc\*(C'\fR).  So you can't 
write
.PP
.Vb 2
\&    thing: foo bar ;
\&    thing: foo baz ;
.Ve
.PP
instead, write:
.PP
.Vb 4
\&    thing: 
\&           foo bar 
\&         | foo baz 
\&    ;
.Ve
.SS "Semantic Values and Semantic Actions"
.IX Subsection "Semantic Values and Semantic Actions"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR 
a production rule
.PP
.Vb 1
\&                          A \-> X_1 X_2 ... X_n
.Ve
.PP
can be followed by a 
\&\fIsemantic action\fR:
.PP
.Vb 1
\&                    A \-> X_1 X_2 ... X_n { Perl Code }
.Ve
.PP
Such
semantic action is nothing but Perl code that will be treated 
as an anonymous subroutine.  The semantic action associated 
with production rule \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR  is executed
after any actions associated with the subtrees of \f(CW\*(C`X_1\*(C'\fR,
\&\f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR.
\&\f(CW\*(C`Eyapp\*(C'\fR parsers build the syntax tree using a left-right
bottom-up traverse of the syntax tree. Each times
the Parser visits the node associated with the 
production \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR
the associated semantic action is called. 
Associated with each symbol
of a Parse::Eyapp grammar there is a scalar \fISemantic Value\fR
or \fIAttribute\fR. The semantic values of terminals are provided
by the lexical analyzer. In the calculator example
(see file \f(CW\*(C`examples/eyapplanguageref/Calc.yp\*(C'\fR in the distribution),
the semantic value associated with an expression
is its numeric value. Thus in the rule:
.PP
.Vb 1
\&                       exp \*(Aq+\*(Aq exp { $_[1] + $_[3] }
.Ve
.PP
\&\f(CW$_[1]\fR refers to the attribute of the first \f(CW\*(C`exp\*(C'\fR, \f(CW$_[2]\fR 
is the attribute associated with \f(CW\*(Aq+\*(Aq\fR, which is the second component of the 
pair provided by the lexical analyzer and \f(CW$_[3]\fR refers to the attribute of 
the second \f(CW\*(C`exp\*(C'\fR.
.PP
When the semantic action/anonymous subroutine is called,
the arguments are as follows:
.IP "\(bu" 4
\&\f(CW$_[1]\fR to \f(CW$_[n]\fR are the attributes of
the symbols \f(CW\*(C`X_1\*(C'\fR, \f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR. 
Just as \f(CW$1\fR to \f(CW$n\fR in \f(CW\*(C`yacc\*(C'\fR,
.IP "\(bu" 4
\&\f(CW$_[0]\fR is the parser object itself.
Having \f(CW$_[0]\fR being the parser object itself allows you to call
parser methods. Most \f(CW\*(C`yacc\*(C'\fR macros have been converted into
parser methods. See section \*(L"\s-1METHODS AVAILABLE IN THE GENERATED CLASS\*(R"\s0 in Parse::Eyapp.
.PP
The returned value will be the attribute associated 
with the left hand side of the production.
.PP
Names can be given to the attributes using the dot notation
(see file \f(CW\*(C`examples/eyapplanguageref/CalcSimple.eyp\*(C'\fR):
.PP
.Vb 1
\&                     exp.left \*(Aq+\*(Aq exp.right { $left + $right }
.Ve
.PP
See section \*(L"\s-1NAMES FOR ATTRIBUTES\*(R"\s0 for more details about the \fIdot\fR and \fIdollar\fR 
notations.
.PP
If no action is specified and no \f(CW%defaultaction\fR is specified
the default action
.PP
.Vb 1
\&                               { $_[1] }
.Ve
.PP
will be executed instead. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0 to know more.
.SS "Actions in Mid-Rule"
.IX Subsection "Actions in Mid-Rule"
Actions can be inserted in the middle of a production like in:
.PP
.Vb 1
\& block: \*(Aq{\*(Aq.bracket { $ids\->begin_scope(); } declaration*.decs statement*.sts \*(Aq}\*(Aq { ... }
.Ve
.PP
A middle production action is managed by inserting a new rule in the grammar and associating
the semantic action with it:
.PP
.Vb 1
\&                     Temp: /* empty */ { $ids\->begin_scope(); }
.Ve
.PP
Middle production actions can refer to the attributes on its left. They count
as one of the components of the production. Thus the program:
.PP
.Vb 5
\&  ~/LEyapp/examples/eyapplanguageref$ cat intermediateaction2.yp 
\&  %%
\&  S:  \*(Aqa\*(Aq { $_[1]x4 }.mid \*(Aqa\*(Aq { print "\en<<$_[2], $mid, $_[3]>>\en"; }
\&  ;
\&  %%
.Ve
.PP
The auxiliar syntactic variables are named \f(CW\*(C`@#position\-#order\*(C'\fR where \f(CW\*(C`#position\*(C'\fR
is the position of the action in the rhs and \f(CW\*(C`order\*(C'\fR is an ordinal number. See
the \f(CW\*(C`.output\*(C'\fR file for the former example:
.PP
.Vb 7
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v intermediateaction2.yp
\&  ~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,5p\*(Aq intermediateaction2.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  S \-> \*(Aqa\*(Aq @1\-1 \*(Aqa\*(Aq
\&  2:  @1\-1 \-> /* empty */
.Ve
.PP
We can build an executable \f(CW\*(C`ia.pl\*(C'\fR from the former grammar using \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-C\*(C'\fR:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-C \-o ia.pl intermediateaction2.yp
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR, error and lexer methods are provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR.
When given input \f(CW\*(C`aa\*(C'\fR the execution will produce as output \f(CW\*(C`aaaa, aaaa, a\*(C'\fR. The option
\&\f(CW\*(C`\-d\*(C'\fR activates the debug mode, the option \f(CW\*(C`\-c\*(C'\fR tells the program to get the input from the command line::
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ ./ia.pl \-d \-c \*(Aqaa\*(Aq
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 0:
\&  Stack: 0
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack: 0\->\*(Aqa\*(Aq\->2
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (@1\-1 \-\-> /* empty */): Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4
\&  Need token. Got >a<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4\->\*(Aqa\*(Aq\->5
\&  Don\*(Aqt need token.
\&  Reduce using rule 1 (S \-\-> a @1\-1 a): 
\&  <<aaaa, aaaa, a>>
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack: 0\->\*(AqS\*(Aq\->1
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack: 0\->\*(AqS\*(Aq\->1\->\*(Aq\*(Aq\->3
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.SS "Example of Body Section"
.IX Subsection "Example of Body Section"
Following with the calculator example, the body is:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq17,/%%/p\*(Aq Calc.eyp | cat \-n 
\&     1  start:                                                                              
\&     2      input { \e%s }                                                                   
\&     3  ;
\&     4
\&     5  input: line *
\&     6  ;
\&     7
\&     8  line:
\&     9      \*(Aq\en\*(Aq       { undef }
\&    10    | exp \*(Aq\en\*(Aq   {
\&    11                    print "$_[1]\en" if defined($_[1]);
\&    12                    $_[1]
\&    13                 }
\&    14    | error  \*(Aq\en\*(Aq
\&    15        {
\&    16          $_[0]\->YYErrok;
\&    17          undef
\&    18        }
\&    19  ;
\&    20
\&    21  exp:
\&    22      NUM
\&    23    | $VAR                   { $s{$VAR} }
\&    24    | $VAR \*(Aq=\*(Aq $exp          { $s{$VAR} = $exp }
\&    25    | exp.left \*(Aq+\*(Aq exp.right { $left + $right }
\&    26    | exp.left \*(Aq\-\*(Aq exp.right { $left \- $right }
\&    27    | exp.left \*(Aq*\*(Aq exp.right { $left * $right }
\&    28    | exp.left \*(Aq/\*(Aq exp.right
\&    29      {
\&    30         $_[3] and return($_[1] / $_[3]);
\&    31         $_[0]\->YYData\->{ERRMSG} = "Illegal division by zero.\en";
\&    32         $_[0]\->YYError;
\&    33         undef
\&    34      }
\&    35    | \*(Aq\-\*(Aq $exp %prec NEG     { \-$exp }
\&    36    | exp.left \*(Aq^\*(Aq exp.right { $left ** $right }
\&    37    | \*(Aq(\*(Aq $exp \*(Aq)\*(Aq           { $exp }
\&    38  ;
\&    39
\&    40  %%
.Ve
.PP
This body does not uses any of the Eyapp extensions (with the exception of the 
\&\f(CW\*(C`*\*(C'\fR operator at line 5) and the dot and dollar notations.
.SS "Solving Ambiguities and Conflicts"
.IX Subsection "Solving Ambiguities and Conflicts"
When Eyapp analyzes a grammar like:
.PP
.Vb 7
\&  examples/eyapplanguageref$ cat \-n ambiguities.eyp
\&     1  %%
\&     2  exp:
\&     3      NUM
\&     4    | exp \*(Aq\-\*(Aq exp
\&     5  ;
\&     6  %%
.Ve
.PP
it will produce a warning announcing the existence of 
\&\fIshift-reduce\fR conflicts:
.PP
.Vb 5
\&  examples/eyapplanguageref$ eyapp ambiguities.eyp
\&  1 shift/reduce conflict (see .output file)
\&  State 5: reduce by rule 2: exp \-> exp \*(Aq\-\*(Aq exp (default action)
\&  State 5: shifts:
\&    to state    3 with \*(Aq\-\*(Aq
.Ve
.PP
when \f(CW\*(C`eyapp\*(C'\fR finds warnings automatically produces a \f(CW\*(C`.output\*(C'\fR file
describing the conflict.
.PP
What the warning is saying is that an expression like \f(CW\*(C`exp \*(Aq\-\*(Aq exp\*(C'\fR (rule 2) followed by a
minus \f(CW\*(Aq\-\*(Aq\fR can be parsed in more than one way. If we
have an input like \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR the activity of a \s-1\fILALR\s0\fR\|(1) parser
(the family of parsers to which Eyapp belongs)
consists of a sequence of \fIshift and reduce actions\fR. A \fIshift action\fR
has as consequence the reading of the next token. A \fIreduce action\fR
is finding a production rule that matches and substituting 
the rhs of the production by the lhs.  For input \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR
the activity will be as follows (the dot is used to indicate where the next 
input token is):
.PP
.Vb 6
\&                           .NUM \- NUM \- NUM # shift
\&                            NUM.\- NUM \- NUM # reduce exp: NUM 
\&                            exp.\- NUM \- NUM # shift
\&                            exp \-.NUM \- NUM # shift
\&                            exp \- NUM.\- NUM # reduce exp: NUM
\&                            exp \- exp.\- NUM # shift/reduce conflict
.Ve
.PP
up this point two different decisions can be taken: the next description can be
.PP
.Vb 1
\&                                  exp.\- NUM # reduce by exp: exp \*(Aq\-\*(Aq exp (rule 2)
.Ve
.PP
or:
.PP
.Vb 1
\&                            exp \- exp \-.NUM # shift \*(Aq\-\*(Aq (to state 3)
.Ve
.PP
that is why it is called a \fIshift-reduce conflict\fR.
.PP
That is also the reason for the precedence declarations in the 
head section. Another kind of conflicts are \fIreduce-reduce conflicts\fR.
They arise when more that rhs can be applied for a reduction
action.
.PP
Eyapp solves the conflicts applying the following rules:
.IP "\(bu" 4
In a shift/reduce conflict, the default is the shift.
.IP "\(bu" 4
In a reduce/reduce conflict, the default is to reduce by the
earlier grammar production (in the input sequence).
.IP "\(bu" 4
Precedences and associativities can be given to tokens in
the declarations section. This is made by a sequence of lines beginning
with one of the directives: \f(CW%left\fR, \f(CW%right\fR, or \f(CW%nonassoc\fR, 
followed by a list of
tokens. All the tokens on the same line
have the same precedence and associativity; 
the lines are listed in order of increasing precedence.
.IP "\(bu" 4
A precedence and associativity is associated with each grammar
production; it is the precedence and associativity of the \fIlast token\fR 
or \fIliteral\fR in the right hand side of the production.
.IP "\(bu" 4
The \f(CW%prec\fR directive can be used when
a rhs is involved in a conflict and has no tokens
inside or it has but the precedence of the last token leads
to an incorrect interpretation. A rhs can be followed by 
an optional \f(CW\*(C`%prec token\*(C'\fR directive
giving the production the precedence of the \f(CW\*(C`token\*(C'\fR
.Sp
.Vb 1
\&                          exp:   \*(Aq\-\*(Aq exp %prec NEG { \-$_[1] }
.Ve
.IP "\(bu" 4
If there is a shift/reduce conflict, and both the grammar production
and the input token have precedence and associativity associated
with them, then the conflict is solved in favor of the action (shift or
reduce) associated with the higher precedence. If the precedences are the
same, then the associativity is used; left associative implies reduce,
right associative implies shift, and non associative implies error.
The last is used to describe operators, like the operator \f(CW\*(C`.LT.\*(C'\fR in \s-1FORTRAN, \s0
that may not associate with themselves. That is, because
.Sp
.Vb 1
\&                             A .LT. B .LT. C
.Ve
.Sp
is invalid in \s-1FORTRAN, \s0\f(CW\*(C`.LT.\*(C'\fR would be described with the keyword \f(CW%nonassoc\fR in eyapp.
.PP
To solve a shift-reduce conflict between a production \f(CW\*(C`A \-\-> SOMETHING\*(C'\fR
and a token \f(CW\*(Aqa\*(Aq\fR you can follow this procedure:
.ie n .IP "1. Edit the "".output"" file" 4
.el .IP "1. Edit the \f(CW.output\fR file" 4
.IX Item "1. Edit the .output file"
.PD 0
.IP "2. Search for the state where the conflict between the production and the token is. In our example it looks like:" 4
.IX Item "2. Search for the state where the conflict between the production and the token is. In our example it looks like:"
.PD
.Vb 2
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ sed \-ne \*(Aq56,65p\*(Aq ambiguities.output
\& State 5:
\&
\&        exp \-> exp . \*(Aq\-\*(Aq exp    (Rule 2)
\&        exp \-> exp \*(Aq\-\*(Aq exp .    (Rule 2)
\&
\&        \*(Aq\-\*(Aq     shift, and go to state 3
\&
\&        \*(Aq\-\*(Aq     [reduce using rule 2 (exp)]
\&        $default        reduce using rule 2 (exp)
.Ve
.ie n .IP "3. Inside the state there has to be a production of the type ""A \-\-> SOMETHING."" (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form ""A \-\-> prefix . suffix"", where suffix can \fIstart\fR with the involved token \*(Aqa\*(Aq." 4
.el .IP "3. Inside the state there has to be a production of the type \f(CWA \-\-> SOMETHING.\fR (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form \f(CWA \-\-> prefix . suffix\fR, where suffix can \fIstart\fR with the involved token \f(CW\*(Aqa\*(Aq\fR." 4
.IX Item "3. Inside the state there has to be a production of the type A --> SOMETHING. (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form A --> prefix . suffix, where suffix can start with the involved token a."
.PD 0
.ie n .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want ""NUM \- NUM \- NUM"" to produce a tree like ""MINUS(MINUS(NUM, NUM), NUM)"" and not ""MINUS(NUM, MINUS(NUM, NUM))"". We want the conflict in ""exp \- exp.\- NUM"" to be solved in favor of the reduction by ""exp: exp \*(Aq\-\*(Aq exp"". This is achieved by declaring ""%left \*(Aq\-\*(Aq""." 4
.el .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want \f(CWNUM \- NUM \- NUM\fR to produce a tree like \f(CWMINUS(MINUS(NUM, NUM), NUM)\fR and not \f(CWMINUS(NUM, MINUS(NUM, NUM))\fR. We want the conflict in \f(CWexp \- exp.\- NUM\fR to be solved in favor of the reduction by \f(CWexp: exp \*(Aq\-\*(Aq exp\fR. This is achieved by declaring \f(CW%left \*(Aq\-\*(Aq\fR." 4
.IX Item "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want NUM - NUM - NUM to produce a tree like MINUS(MINUS(NUM, NUM), NUM) and not MINUS(NUM, MINUS(NUM, NUM)). We want the conflict in exp - exp.- NUM to be solved in favor of the reduction by exp: exp - exp. This is achieved by declaring %left -."
.PD
.SS "Error Recovery"
.IX Subsection "Error Recovery"
The token name \f(CW\*(C`error\*(C'\fR is reserved for error handling. This name can
be used in grammar productions; it suggests places where errors are
expected, and recovery can take place:
.PP
.Vb 8
\&     line:
\&       \*(Aq\en\*(Aq         { undef }
\&       | exp \*(Aq\en\*(Aq   { print "$_[1]\en" if defined($_[1]); $_[1] }
\&       | error  \*(Aq\en\*(Aq
\&           {
\&             $_[0]\->YYErrok;
\&             undef
\&           }
.Ve
.PP
The parser pops its stack until
it enters a state where the token \f(CW\*(C`error\*(C'\fR is legal. It then shifts
the token \f(CW\*(C`error\*(C'\fR and proceeds to discard tokens until finding 
one that is acceptable. In the example
all the tokens until finding a \f(CW\*(Aq\en\*(Aq\fR will be skipped. 
If no special error productions have been specified,
the processing will halt.
.PP
In order to prevent a cascade of error messages, the parser, after
detecting an error, remains in error state until three tokens have been
successfully read and shifted. If an error is detected when the parser
is already in error state, no message is given, and the input token is
quietly deleted. The method \f(CW\*(C`YYErrok\*(C'\fR used in the example 
communicates to the parser
that a satisfactory recovery has been reached 
and that it can safely emit new error
messages.
.PP
You cannot have a literal \fI'error'\fR in your grammar as it would
confuse the driver with the \fIerror\fR token. Use a symbolic token instead.
.SH "THE TAIL"
.IX Header "THE TAIL"
The tail section contains Perl code. Usually it is empty, but you
can if you want put here your own lexical analyzer and 
error management subroutines.
An example of this is in
files \f(CW\*(C`examples/eyapplanguageref/List3_tree_d_sem.yp\*(C'\fR (the grammar)
and \f(CW\*(C`use_list3_tree_d_dem.pl\*(C'\fR (the client).
.SH "THE LEXICAL ANALYZER"
.IX Header "THE LEXICAL ANALYZER"
The Lexical Analyzer 
is called each time the parser needs a new token.
It is called with only one argument (the parser object)
and returns a pair 
containing the next token and its associated attribute.
.PP
The fact that is a method of the parser object means that the parser
methods are accessible inside the lexical analyzer.
.PP
When the lexical analyzer reaches the end of input, it must return the
pair \f(CW\*(C`(\*(Aq\*(Aq, undef)\*(C'\fR
.SS "Automatic Generation of Lexical Analyzers"
.IX Subsection "Automatic Generation of Lexical Analyzers"
By default a lexical analyzer is built.
The \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-l\*(C'\fR
can be used to inhibit the generation of 
the default lexical analyzer. In such case,
one must be explictly provided.
.PP
\fINo token Definitions\fR
.IX Subsection "No token Definitions"
.PP
When no token definitions are given in the head section, 
the default lexical analyzer simply assumes
that the token is the string literal. See this example in 
file \f(CW\*(C`examples/lexergeneration/simple.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat simple.yp
\&  %%
\&  A:    a
\&      | A d
\&  ;
\&  %%
.Ve
.PP
The grammar does not describes the lexical analyzer nor the error default subroutine.
Eyapp will generate default lexical and error subroutines:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-o simple.pl \-TC simple.yp
\&
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl pl   27 2010\-06\-29 10:28 simple.yp
\&  \-rwxr\-xr\-x 1 pl pl 3245 2010\-06\-29 10:35 simple.pl
.Ve
.PP
The option \f(CW\*(C`\-T\*(C'\fR is equivalent to insert the \f(CW%tree\fR directive in the head section.
Since no names were explicitly given to the productions, the names of the productions are built using
the pattern \f(CW\*(C`Lhs_is_RHS\*(C'\fR.
.PP
Option \f(CW\*(C`\-C\*(C'\fR instructs the \f(CW\*(C`eyapp\*(C'\fR compiler to produce an executable by setting the execution permits
(see \f(CW\*(C`simple.pl\*(C'\fR permits above), inserting the appropriate she bang directive:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ head simple.pl | head \-1
\&  #!/usr/bin/perl
.Ve
.PP
and inserting a call to the package \f(CW\*(C`main\*(C'\fR subroutine at the end of the generated parser:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ tail \-6 simple.pl
\&  unless (caller) {
\&    exit !_\|_PACKAGE_\|_\->main(\*(Aq\*(Aq);
\&  }
.Ve
.PP
If no \f(CW\*(C`main\*(C'\fR was provided, \f(CW\*(C`eyapp\*(C'\fR will provide one.
.PP
Tokens \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`d\*(C'\fR are assumed to represent strings \f(CW\*(Aqa\*(Aq\fR
and \f(CW\*(Aqd\*(Aq\fR respectively.
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa d d\*(Aq
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d]),TERMINAL[d])
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR method provided by \f(CW\*(C`eyapp\*(C'\fR accepts several options in the command line:
.IP "\(bu" 2
\&\f(CW\*(C`\-t\*(C'\fR Prints the abstract syntax tree
.IP "\(bu" 2
\&\f(CW\*(C`\-i\*(C'\fR Shows the semantic value associated with each terminal
.IP "\(bu" 2
\&\f(CW\*(C`\-c string\*(C'\fR Indicates that the input is given by the \f(CW\*(C`string\*(C'\fR that follows the option
.PP
You can get the set of available options using \f(CW\*(C`\-\-help\*(C'\fR:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-h
\&  Available options:
\&    \-\-debug                    sets yydebug on
\&    \-\-nodebug                  sets yydebug off
\&    \-\-file filepath            read input from filepath
\&    \-\-commandinput string      read input from string
\&    \-\-tree                     prints $tree\->str
\&    \-\-notree                   does not print $tree\->str
\&    \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&    \-\-help                     shows this help
\&    \-\-slurp                    read until EOF reached
\&    \-\-noslurp                  read until CR is reached
\&    \-\-argfile                  main() will take the input string from its @_
\&    \-\-noargfile                main() will not take the input string from its @_
\&    \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&    \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.PP
If we try to feed it with an illegal input, an error message is emitted:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa e d\*(Aq
\&  Error inside the lexical analyzer near \*(Aqe\*(Aq. Line: 1. File: \*(Aqsimple.yp\*(Aq. No match found.
.Ve
.PP
In the example above we have taken advantage of the \f(CW\*(C`main\*(C'\fR method provided by Eyapp.
If we want to keep in control of the parsing process, we can write a client program that 
makes use of the generated modulino:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimple.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simple;
\&     6
\&     7  # build a parser object
\&     8  my $parser = simple\->new();
\&     9
\&    10  # take the input from the command line arguments
\&    11  # or from STDIN
\&    12  my $input = join \*(Aq \*(Aq,@ARGV;
\&    13  $input = <> unless $input;
\&    14
\&    15  # set the input
\&    16  $parser\->input($input);
\&    17
\&    18  # parse the input and get the AST
\&    19  my $tree = $parser\->YYParse();
\&    20
\&    21  print $tree\->str()."\en";
.Ve
.PP
Here is an example of execution:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simple.yp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimple.pl a d d
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL),TERMINAL),TERMINAL)
.Ve
.PP
\fIToken Definitions: Regular Expressions\fR
.IX Subsection "Token Definitions: Regular Expressions"
.PP
Eyapp extends the \f(CW%token\fR directive with the syntax:
.PP
.Vb 1
\&     %token TOKENID = /regexp/
.Ve
.PP
If such definition is used, an entry with the shape:
.PP
.Vb 1
\&   /\eG$regexp/gc and return (\*(AqTOKENID\*(Aq, $1);
.Ve
.PP
will be added to the generated lexical analyzer.
Therefore the string associated with the first parenthesis in \f(CW\*(C`/regexp/\*(C'\fR
will be used as semantic value for \f(CW\*(C`TOKENID\*(C'\fR. If \f(CW\*(C`/regexp/\*(C'\fR has no
parenthesis \f(CW\*(C`undef\*(C'\fR will be the semantic value.
See this example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n numlist.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = /(\ew+)/
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
The order of the \f(CW%token\fR declarations is important. 
In the example the token \f(CW\*(C`NUM\*(C'\fR is a subset of the token \f(CW\*(C`ID\*(C'\fR.
Since it appears first, it will be tried first:
.PP
.Vb 2
\&     /\eG(\ed+)/gc and return (\*(AqNUM\*(Aq, $1);
\&     /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1);
.Ve
.PP
Also observe that token \f(CW\*(Aqa\*(Aq\fR (line 12) is contained
in token \f(CW\*(C`ID\*(C'\fR. However, any implicit token like this that appears in the
body section and was not 
declared using an explicit \f(CW%token\fR directive in the
head section takes priority over the ones declared.
See the behavior of the former program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC numlist
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./numlist.pm \-t \-i \-c \*(Aq4 a b\*(Aq
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
The lexical analyzer returned \f(CW\*(C`NUM\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW4\fR was processed,
also it returned \f(CW\*(C`a\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW\*(Aqa\*(Aq\fR was 
processed.
.PP
A \f(CW%token\fR declaration without assignment like in:
.PP
.Vb 1
\&   %token A B
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  %token A   = /(A)/
\&  %token B   = /(B)/
.Ve
.PP
(in that order).
.PP
\fIToken Definitions via Code\fR
.IX Subsection "Token Definitions via Code"
.PP
An alternative way to define a token is via Perl code:
.PP
.Vb 1
\&      %token TOKENID = { ... }
.Ve
.PP
in such case the code defining \f(CW\*(C`TOKENID\*(C'\fR will be inserted
verbatim in the corresponding place of the generated lexical 
analyzer. When the code \f(CW\*(C`{ ... }\*(C'\fR
is executed, the variable \f(CW$_\fR 
contains the input being parsed and
the special variable \f(CW$self\fR refers to the parser object.
The following example is equivalent to the one used in the previous
section:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n tokensemdef.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = { /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1); }
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
Follows an example of compilation and execution:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC tokensemdef.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./tokensemdef.pm \-t \-i \-nos
\&  4 a b
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
\fIToken Definitions: Controling whites\fR
.IX Subsection "Token Definitions: Controling whites"
.PP
By default, the generated lexical analyzer skips 
white spaces, defined as \f(CW\*(C`/\es*/\*(C'\fR. The programmer
can change this behavior using the \f(CW%whites\fR directive.
The following example permits Perl-like comments 
in the input:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhites.eyp
\&     1  %whites  /(\es*(?:#.*)?\es*)/
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.PP
Follows an example of execution:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-nA input
\&       1  a # 1$
\&       2  $
\&       3  d ^I#2$
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC simplewithwhites.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simplewithwhites.pm \-t \-i \-f input
\&  A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d])
.Ve
.PP
The \f(CW%white\fR directive can be followed by some Perl
code defining the white spaces:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhitescode.eyp
\&     1  %whites  { /\eG(\es*(?:#.*)?\es*)/gc and $self\->tokenline($1 =~ tr{\en}{}) }
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.SS "Reading Input from File"
.IX Subsection "Reading Input from File"
You can use the method \f(CW\*(C`YYSlurpFile\*(C'\fR to read the input from a file
and set the input for the parser to its contents.
Yo can also use the \f(CW\*(C`YYInput\*(C'\fR method to set the input.
.PP
See the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimplefromfile.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simplewithwhites;
\&     6
\&     7  my $parser = simplewithwhites\->new();
\&     8
\&     9  # take the input from the specified file
\&    10  my $fn = shift;
\&    11
\&    12  $parser\->YYSlurpFile($fn);
\&    13
\&    14  # parse the input and get the AST
\&    15  my $tree = $parser\->YYParse();
\&    16
\&    17  print $tree\->str()."\en";
.Ve
.PP
First, compile the grammar \f(CW\*(C`simplewithwhites.eyp\*(C'\fR presented above:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simplewithwhites
.Ve
.PP
And then run it:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n  input
\&     1  a # 1
\&     2
\&     3  d       #2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimplefromfile.pl input
\&  A_is_A_d(A_is_a(TERMINAL),TERMINAL)
.Ve
.SS "Huge input and Incremental Lexical Analyzers"
.IX Subsection "Huge input and Incremental Lexical Analyzers"
If your input is huge, try to make use of an incremental
lexical analyzer. In an incremental lexer the input
is read and parsed in chunks. Read up to a 
point where  it is safe to parse.
In the example below, the lexer reads a new line
each time we reach the end of the input string \f(CW\*(C`${$parser\->YYInput}\*(C'\fR.
In the case of the arithmetic expressions grammar below,
by reading up to \f(CW\*(Aq\en\*(Aq\fR, we are sure that the input is not
broken in the middle of a token.
Instead of having the whole huge input in memory,
we only keep a small substring.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n Incremental.eyp                    
\&     1  %right  \*(Aq=\*(Aq                                                                     
\&     2  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq                                                                 
\&     3  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq                                                                 
\&     4  %left   NEG                                                                     
\&     5                                                                                  
\&     6  %tree                                                                           
\&     7                                                                                  
\&     8  %%                                                                              
\&     9  input:                                                                          
\&    10          |   input $line  { print $line\->str."\en" }                              
\&    11  ;                                                                               
\&    12                                                                                  
\&    13  line:     \*(Aq\en\*(Aq                                                                  
\&    14          | exp \*(Aq\en\*(Aq
\&    15          | error \*(Aq\en\*(Aq
\&    16  ;
\&    17
\&    18  exp:        NUM
\&    19          |   VAR
\&    20          |   VAR \*(Aq=\*(Aq exp
\&    21          |   exp \*(Aq+\*(Aq exp
\&    22          |   exp \*(Aq\-\*(Aq exp
\&    23          |   exp \*(Aq*\*(Aq exp
\&    24          |   exp \*(Aq/\*(Aq exp
\&    25          |   \*(Aq\-\*(Aq exp %prec NEG
\&    26          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    27  ;
\&    28
\&    29  %%
\&    30
\&    31  sub _Lexer {
\&    32      my($parser)=shift;
\&    33
\&    34      if ($parser\->YYEndOfInput) {
\&    35        my $input = <STDIN>;
\&    36        return(\*(Aq\*(Aq, undef) unless $input;
\&    37        $parser\->input($input);
\&    38      };
\&    39
\&    40      for (${$parser\->YYInput}) {
\&    41          m/\eG[ \et]*/gc;
\&    42          m/\eG([0\-9]+(?:\e.[0\-9]+)?)/gc and return(\*(AqNUM\*(Aq,$1);
\&    43          m/\eG([A\-Za\-z][A\-Za\-z0\-9_]*)/gc and return(\*(AqVAR\*(Aq,$1);
\&    44          m/\eG(.)/gcs and return($1,$1);
\&    45          return(\*(Aq\*(Aq, undef);
\&    46      }
\&    47  }
\&    48
\&    49  _\|_PACKAGE_\|_\->lexer(\e&_Lexer);
.Ve
.PP
This approach has limitations. The code will get more tangled if some token
can take more than one line. For example, if we extend this language to accept 
C\-like comments \f(CW\*(C`/* ... */\*(C'\fR which expands over several lines.
.PP
Here follows an example of execution. 
This is the client program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat useincremental.pl
\&  #!/usr/bin/perl \-w
\&  use Incremental;
\&
\&  Incremental\->new\->YYParse;
.Ve
.PP
This is a small test input file:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat inputforincremental
\&  a = 2
\&  a+3
\&  b=4
\&  b*2+a
.Ve
.PP
Finally, see the results of the execution:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./useincremental.pl < inputforincremental
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_7(TERMINAL),exp_6(TERMINAL)))
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_11(exp_7(TERMINAL),exp_6(TERMINAL)),exp_7(TERMINAL)))
.Ve
.PP
The numbers in the output refer to the production number:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-v Incremental.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ sed \-ne \*(Aq/Rules:/,/^$/p\*(Aq Incremental.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> input $end
\&  1:      input \-> /* empty */
\&  2:      input \-> input line
\&  3:      line \-> \*(Aq\en\*(Aq
\&  4:      line \-> exp \*(Aq\en\*(Aq
\&  5:      line \-> error \*(Aq\en\*(Aq
\&  6:      exp \-> NUM
\&  7:      exp \-> VAR
\&  8:      exp \-> VAR \*(Aq=\*(Aq exp
\&  9:      exp \-> exp \*(Aq+\*(Aq exp
\&  10:     exp \-> exp \*(Aq\-\*(Aq exp
\&  11:     exp \-> exp \*(Aq*\*(Aq exp
\&  12:     exp \-> exp \*(Aq/\*(Aq exp
\&  13:     exp \-> \*(Aq\-\*(Aq exp
\&  14:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.SS "Using Several Lexical Analyzers for the Same Parser"
.IX Subsection "Using Several Lexical Analyzers for the Same Parser"
At any time during the parsing you can use the method
\&\f(CW\*(C`$parser\->YYLexer\*(C'\fR to set a new lexical analyzer.
.PP
The following grammar starts setting the lexer
to  sub \f(CW\*(C`Lexer1\*(C'\fR (line 44). It later changes
the lexer to \f(CW\*(C`Lexer2\*(C'\fR (ine 24)
after the token \f(CW\*(Aq%%\*(Aq\fR is seen. 
Inside \f(CW\*(C`Lexer2\*(C'\fR the token \f(CW\*(C`A\*(C'\fR represents a \f(CW\*(AqB\*(Aq\fR.
This capability
allows the parsing of languages where different sections 
require different lexical analysis. For example, in \f(CW\*(C`yacc\*(C'\fR,
carriage returns separates declarations in the header 
section but is considered a white space inside the
body and tail sections. This feature has 
similar power to the \fIstate\fR concept of the
lexical analyzer generator \f(CW\*(C`flex\*(C'\fR.
.PP
.Vb 10
\&  $ cat \-n twolexers.eyp 
\&     1  %%
\&     2  s:  first \*(Aq%%\*(Aq second
\&     3  ;
\&     4  
\&     5  first:
\&     6      A first
\&     7    | A
\&     8  ;
\&     9  
\&    10  second:
\&    11      A second
\&    12    | A
\&    13  ;
\&    14  
\&    15  %%
\&    16  
\&    17  sub Lexer1 {
\&    18      my($parser)=shift;
\&    19  
\&    20      print "In Lexer 1 \en";
\&    21      for (${$parser\->YYInput}) {
\&    22          m/\eG\es*/gc;
\&    23          m/\eG(%%)/gc and do {
\&    24            $parser\->YYLexer(\e&Lexer2);
\&    25            return ($1, undef);
\&    26          };
\&    27          m/\eG(.)/gcs and return($1,$1);
\&    28          return(\*(Aq\*(Aq, undef);
\&    29      }
\&    30  }
\&    31  
\&    32  sub Lexer2 {
\&    33      my($parser)=shift;
\&    34  
\&    35      print "In Lexer 2 \en";
\&    36      for (${$parser\->YYInput}) {
\&    37          m/\eG\es*/gc;
\&    38          m/\eGB/gc    and return(\*(AqA\*(Aq,\*(AqB\*(Aq);
\&    39          m/\eG(.)/gcs and die "Error. Expected \*(AqB\*(Aq, found $1\en";
\&    40      }
\&    41          return(\*(Aq\*(Aq, undef);
\&    42  }
\&    43  
\&    44  _\|_PACKAGE_\|_\->lexer(\e&Lexer1);
.Ve
.PP
When executed, it behaves like this:
.PP
.Vb 7
\&        $ ./twolexers.pm \-t \-i \-m 1 \-c \*(AqA A %% B B\*(Aq
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 2 
\&        In Lexer 2 
\&        In Lexer 2 
\&
\&        s_is_first_second(
\&          first_is_A_first(
\&            TERMINAL[A],
\&            first_is_A(
\&              TERMINAL[A]
\&            )
\&          ),
\&          second_is_A_second(
\&            TERMINAL[B],
\&            second_is_A(
\&              TERMINAL[B]
\&            )
\&          )
\&        )
.Ve
.PP
The lexer can bechanged at any time. The following example
starts using the default lexer generated by \f(CW\*(C`eyapp\*(C'\fR.
It changes the lexer to \f(CW\*(C`Lexer2\*(C'\fRinside an intermediate semantic action (line 7).
Inside \f(CW\*(C`Lexer2\*(C'\fR  the token \f(CW\*(C`A\*(C'\fR is interpreted as a word \f(CW\*(C`\ew+\*(C'\fR.
.PP
.Vb 10
\&   $ cat \-n twolexers2.eyp 
\&     1  # Compile it with:
\&     2  # $ eyapp \-TC twolexers2.eyp 
\&     3  # Run it with:
\&     4  # $ ./twolexers2.pm \-t \-i \-c \*(AqA A %% d3 c2\*(Aq
\&     5  
\&     6  %%
\&     7  s:  first \*(Aq%%\*(Aq { $_[0]\->YYLexer(\e&Lexer2) } second
\&     8  ;
\&     9  
\&    10  first:
\&    11      A first
\&    12    | A
\&    13  ;
\&    14  
\&    15  second:
\&    16      A second
\&    17    | A
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Lexer2 {
\&    23      my($parser)=shift;
\&    24  
\&    25      print "In Lexer 2 \en";
\&    26      for (${$parser\->YYInput}) {
\&    27          m/\eG\es*/gc;
\&    28          m/\eG(\ew+)/gc    and return(\*(AqA\*(Aq,$1);
\&    29          m/\eG(.)/gcs and die "Error. Expected a word,Found $1\en";
\&    30      }
\&    31      return(\*(Aq\*(Aq, undef);
\&    32  }
.Ve
.SH "THE ERROR REPORT SUBROUTINE"
.IX Header "THE ERROR REPORT SUBROUTINE"
The Error Report subroutine is also a parser attribute, 
and must be defined. By default \f(CW\*(C`Parse::Eyapp\*(C'\fR
provides a convenient error handler.
.PP
See the Parse::Yapp pages and elsewhere documentation
on \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`bison\*(C'\fR for more information.
.SH "USING AN EYAPP GRAMMAR"
.IX Header "USING AN EYAPP GRAMMAR"
The following is an example of a program that uses the calculator explained 
in the two previous sections:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n usecalc.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Calc;
\&     4
\&     5  my $parser = Calc\->new();
\&     6  $parser\->input(\e<<\*(AqEOI\*(Aq
\&     7  a = 2*3       # 1: 6
\&     8  d = 5/(a\-6)   # 2: division by zero
\&     9  b = (a+1)/7   # 3: 1
\&    10  c=a*3+4)\-5    # 4: syntax error
\&    11  a = a+1       # 5: 7
\&    12  EOI
\&    13  );
\&    14  my $t = $parser\->Run();
\&    15  print "========= Symbol Table ==============\en";
\&    16  print "$_ = $t\->{$_}\en" for sort keys %$t;
.Ve
.PP
The output for this program is (the input for each output
appear as a Perl comment on the right):
.PP
.Vb 1
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ eyapp Calc.eyp
\&
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./usecalc.pl
\&  6
\&  Illegal division by zero.
\&  1
\&
\&  Syntax error near \*(Aq)\*(Aq (line number 4).
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(Aq/\*(Aq \*(Aq^\*(Aq \*(Aq*\*(Aq \*(Aq+\*(Aq \*(Aq
\&  \*(Aq
\&  7
\&  ========= Symbol Table ==============
\&  a = 7
\&  b = 1
\&  c = 22
.Ve
.SH "LISTS AND OPTIONALS"
.IX Header "LISTS AND OPTIONALS"
The elements of the right hand side of a production (abbreviated \fIrhs\fR) can be one of these:
.PP
.Vb 9
\&  rhselt:     
\&        symbol    
\&      | code    
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq 
\&      | rhselt STAR               /* STAR   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e*  */
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq 
\&      | rhselt OPTION             /* OPTION is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e?  */
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS               /* PLUS   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+  */
.Ve
.PP
The \f(CW\*(C`STAR\*(C'\fR, \f(CW\*(C`OPTION\*(C'\fR and \f(CW\*(C`PLUS\*(C'\fR operators provide a simple mechanism
to express lists:
.IP "\(bu" 4
In Eyapp the \f(CW\*(C`+\*(C'\fR operator indicates one or more repetitions of the element
to the left of \f(CW\*(C`+\*(C'\fR, thus a rule like:
.Sp
.Vb 1
\&                        decls:  decl +
.Ve
.Sp
is the same as:
.Sp
.Vb 2
\&                        decls:  decls decl 
\&                             |  decl
.Ve
.Sp
An additional  symbol may be included  to indicate lists of elements 
separated by such symbol. Thus
.Sp
.Vb 1
\&                       rhss: rule <+ \*(Aq|\*(Aq>
.Ve
.Sp
is equivalent to:
.Sp
.Vb 2
\&                       rhss: rhss \*(Aq|\*(Aq rule 
\&                           | rule
.Ve
.IP "\(bu" 4
The operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR have their usual meaning: 0 or more for
\&\f(CW\*(C`*\*(C'\fR and optionality for \f(CW\*(C`?\*(C'\fR. Is legal to parenthesize 
a \f(CW\*(C`rhs\*(C'\fR expression as in:
.Sp
.Vb 1
\&                       optname: (NAME IDENT)?
.Ve
.ie n .SS "The ""+"" operator"
.el .SS "The \f(CW+\fP operator"
.IX Subsection "The + operator"
The grammar:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat List3.yp 
\&  %semantic token \*(Aqc\*(Aq 
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  \*(Aqd\*(Aq+ 
\&             { 
\&                print Dumper($_[1]);
\&                print Dumper($_[2]);
\&             } 
\&  ;
\&  %%
.Ve
.PP
Is equivalent to:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v List3.yp; head \-9 List3.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  PLUS\-1 \-> PLUS\-1 \*(Aqc\*(Aq
\&  2:  PLUS\-1 \-> \*(Aqc\*(Aq
\&  3:  PLUS\-2 \-> PLUS\-2 \*(Aqd\*(Aq
\&  4:  PLUS\-2 \-> \*(Aqd\*(Aq
\&  5:  S \-> PLUS\-1 PLUS\-2
.Ve
.PP
By default, the semantic action associated with a \f(CW\*(C`+\*(C'\fR returns the lists of attributes
to which the \f(CW\*(C`+\*(C'\fR applies:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = [ \*(Aqc\*(Aq, \*(Aqc\*(Aq ];
\&  $VAR1 = [ \*(Aqd\*(Aq, \*(Aqd\*(Aq ];
.Ve
.PP
Observe that, in spite of \f(CW\*(Aqd\*(Aq\fR being a syntactic token
the actions related with the \f(CW\*(C`d+\*(C'\fR element (i.e. the actions associated
with the \f(CW\*(C`PLUS\-2\*(C'\fR productions) create the list of \f(CW\*(C`d\*(C'\fRs.
.PP
The semantic associated with a \f(CW\*(C`+\*(C'\fR changes 
when one of the tree creation directives is active (for instance \f(CW%tree\fR or \f(CW%metatree\fR)
or it has been explicitly requested with a call to the \f(CW\*(C`YYBuildingTree\*(C'\fR method:
.PP
.Vb 1
\&                            $self\->YYBuildingTree(1);
.Ve
.PP
Other ways to change the associated semantic are to use the 
\&\f(CW\*(C`yybuildingtree\*(C'\fR option of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 4
\&         $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&                           yybuildingtree => 1,
\&                         # yydebug => 0x1F
\&         );
.Ve
.PP
In such case the associated semantic action creates a node labelled
.PP
.Vb 1
\&                     _PLUS_LIST
.Ve
.PP
whose children are the attributes associated with the items in the plus list. 
As it happens when using the \f(CW%tree\fR directive, \fIsyntactic tokens\fR are skipped.
.PP
When executing the example above but under the \f(CW%tree\fR directive
the output changes. The \f(CW\*(C`\-T\*(C'\fR option tells the \f(CW\*(C`eyapp\*(C'\fR compiler
to introduce an implicit \f(CW%tree\fR directive>:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-T List3.yp
.Ve
.PP
If we now run the client program with input \f(CW\*(C`ccdd\*(C'\fR we get
a couple of syntax trees:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.PP
The node associated with the list of \f(CW\*(C`d\*(C'\fRs is empty since
terminal \f(CW\*(C`d\*(C'\fR wasn't declared semantic.
.SS "When Nodes Disappear from Lists"
.IX Subsection "When Nodes Disappear from Lists"
When under the influence of the \f(CW%tree\fR directive
the action associated with a list operator
is to \fIflat\fR the children in a single list.
.PP
In the former example, the \f(CW\*(C`d\*(C'\fR nodes don't show up 
since \f(CW\*(Aqd\*(Aq\fR is a syntactic token. However, it may happen that changing the status
of \f(CW\*(Aqd\*(Aq\fR to semantic will not suffice.
.PP
When inserting the children, the tree (\f(CW%tree\fR)  node construction
method (\f(CW\*(C`YYBuildAST\*(C'\fR) omits any attribute that is not a reference.
Therefore, when inserting explicit actions, it is necessary to guarantee that 
the returned value is a reference or a semantic token 
to assure the presence of the value in the lists of children of the node.
Certainly you can use this property to prune parts of the tree.
Consider the following example:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat ListWithRefs1.eyp 
\&  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  D+ 
\&             { 
\&                print Dumper($_[1]);
\&                print $_[1]\->str."\en";
\&                print Dumper($_[2]);
\&                print $_[2]\->str."\en";
\&             } 
\&  ;
\&
\&  D: \*(Aqd\*(Aq
\&  ;
\&
\&  %%
\&
\&  sub Run {
\&    my ($self) = shift;
\&    return $self\->YYParse( yybuildingtree => 1 );
\&  }
.Ve
.PP
To activate the \fItree semantic\fR for lists we use the \f(CW\*(C`yybuildingtree\*(C'\fR
option of \f(CW\*(C`YYParse\*(C'\fR (line 26).
.PP
The execution gives an output like this:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs1.eyp; ./use_listwithrefs1.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  _PLUS_LIST(TERMINAL,TERMINAL)
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq ); _PLUS_LIST
.Ve
.PP
Though \f(CW\*(Aqd\*(Aq\fR was declared semantic the default action 
associated with the production \f(CW\*(C`D: \*(Aqd\*(Aq\*(C'\fR in line 16
returns \f(CW$_[1]\fR (that is, the scalar \f(CW\*(Aqd\*(Aq\fR). Since it is not
a reference it won't be inserted in the list of children of
\&\f(CW\*(C`_PLUS_LIST\*(C'\fR.
.SS "Recovering the Missing Nodes"
.IX Subsection "Recovering the Missing Nodes"
The solution is to be sure that the attribute is a reference:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs.eyp
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:  \*(Aqc\*(Aq+  D+ 
\&     8        { 
\&     9           print Dumper($_[1]);
\&    10           print Dumper($_[2]);
\&    11        } 
\&    12  ;
\&    13  
\&    14  D: \*(Aqd\*(Aq
\&    15       {
\&    16         bless { attr => $_[1], children =>[]}, \*(AqDES\*(Aq;
\&    17       }
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Run {
\&    23    my ($self) = shift;
\&    24    return $self\->YYParse( yybuildingtree => 1 );
\&    25  }
.Ve
.PP
Now the attribute associated with \f(CW\*(C`D\*(C'\fR is a reference 
and appears in the list of children of \f(CW\*(C`_PLUS_LIST\*(C'\fR:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs.eyp; ./use_listwithrefs.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.ie n .SS "Building a Tree with ""Parse::Eyapp::Node\->new"""
.el .SS "Building a Tree with \f(CWParse::Eyapp::Node\->new\fP"
.IX Subsection "Building a Tree with Parse::Eyapp::Node->new"
The former solution consisting on writing \fIby hand\fR the code to 
build the node may suffice when dealing with a single node.
Writing by hand the code to build a node is a cumbersome task.
Even worst: though the node built in the former example
looks like a \f(CW\*(C`Parse::Eyapp\*(C'\fR node actually isn't. \f(CW\*(C`Parse::Eyapp\*(C'\fR 
nodes always inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR and 
consequently have access to the methods in such package.
The following execution using the debugger illustrates the point:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples$ perl \-wd use_listwithrefs.pl
\&
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&
\&  Enter h or \`h h\*(Aq for help, or \`man perldebug\*(Aq for more help.
\&
\&  main::(use_listwithrefs.pl:4):  $parser = new ListWithRefs();
\&    DB<1>  f ListWithRefs.eyp
\&  1       2       #line 3 "ListWithRefs.eyp"
\&  3
\&  4:      use Data::Dumper;
\&  5
\&  6       #line 7 "ListWithRefs.eyp"
\&  7       #line 8 "ListWithRefs.eyp"
\&  8
\&  9:                    print Dumper($_[1]);
\&  10:                   print $_[1]\->str."\en";
.Ve
.PP
through the command \f(CW\*(C`f ListWithRefs.eyp\*(C'\fR we inform the debugger
that subsequent commands will refer to such file. Next 
we execute the program up to the semantic action
associated with the production rule \f(CW\*(C`S: \*(Aqc\*(Aq+  D+\*(C'\fR (line 9)
.PP
.Vb 4
\&    DB<2> c 9     # Continue up to line 9 of ListWithRefs.eyp
\&  ccdd
\&  ListWithRefs::CODE(0x84ebe5c)(ListWithRefs.eyp:9):
\&  9:                    print Dumper($_[1]);
.Ve
.PP
Now we are in condition to look at the contents 
of the arguments:
.PP
.Vb 7
\&    DB<3> x $_[2]\->str
\&  0  \*(Aq_PLUS_LIST_2(DES,DES)\*(Aq
\&    DB<4> x $_[2]\->child(0)
\&  0  DES=HASH(0x85c4568)
\&     \*(Aqattr\*(Aq => \*(Aqd\*(Aq
\&     \*(Aqchildren\*(Aq => ARRAY(0x85c458c)
\&          empty array
.Ve
.PP
the \f(CW\*(C`str\*(C'\fR method works with the object \f(CW$_[2]\fR since
\&\f(CW\*(C`_PLUS_LIST_2\*(C'\fR nodes inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
However, when we try with the \f(CW\*(C`DES\*(C'\fR node we get an
error:
.PP
.Vb 4
\&    DB<6> x $_[2]\->child(0)\->str
\&  Can\*(Aqt locate object method "str" via package "DES" at \e
\&    (eval 11)[/usr/share/perl/5.8/perl5db.pl:628] line 2, <STDIN> line 1.
\&    DB<7>
.Ve
.PP
More robust than the former solution of building the node \fIby hand\fR
is to use the constructor \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR:
The method \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
is uset to build forests of syntactic trees.
.PP
It receives a  list of terms describing the trees and \- optionally \-
a reference to a subroutine used to set up the attributes
of the just created nodes. After the creation 
of the trees the sub is called by \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
with arguments the list of references to the nodes (in the order
in which they appear in the terms, from left to right).
\&\f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR returns a list of references 
to the just created nodes. In a scalar context returns a reference to the first of such trees.
See an example:
.PP
.Vb 10
\&  ~/LEyapp/examples$ perl \-MParse::Eyapp \-MData::Dumper \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> @t = Parse::Eyapp::Node\->new(\*(AqA(C,D) E(F)\*(Aq, sub { my $i = 0; $_\->{n} = $i++ for @_ })
\&    DB<2> $Data::Dumper::Indent = 0
\&    DB<3> print Dumper($_)."\en" for @t
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 0,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq ),
\&                                          bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq )
\&                                         ]
\&                 }, \*(AqA\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 3,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq )]}, \*(AqE\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq );
.Ve
.PP
See the following example in which the nodes associated with \f(CW\*(Aqd\*(Aq\fR are
explicitly constructed:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs2.eyp 
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:      \*(Aqc\*(Aq+  D+ 
\&     8             { 
\&     9                print Dumper($_[1]);
\&    10                print $_[1]\->str."\en";
\&    11                print Dumper($_[2]);
\&    12                print $_[2]\->str."\en";
\&    13             } 
\&    14  ;
\&    15  
\&    16  D: \*(Aqd\*(Aq.d
\&    17       {
\&    18         Parse::Eyapp::Node\->new(
\&    19           \*(AqDES(TERMINAL)\*(Aq, 
\&    20            sub { 
\&    21              my ($DES, $TERMINAL) = @_;
\&    22              $TERMINAL\->{attr} = $d;
\&    23            }
\&    24         );
\&    25       }
\&    26  ;
\&    27  
\&    28  %%
\&    29  
\&    30  sub Run {
\&    31    my ($self) = shift;
\&    32    return $self\->YYParse( yybuildingtree => 1 );
\&    33  }
.Ve
.PP
To know more about \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
see the section for \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
.PP
When the former eyapp program is executed produces the following
output:
.PP
.Vb 10
\&  $ eyapp ListWithRefs2.eyp; use_listwithrefs2.pl
\&  ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_1\*(Aq );
\&  _PLUS_LIST_1(TERMINAL,TERMINAL)
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_2\*(Aq );
\&  _PLUS_LIST_2(DES(TERMINAL),DES(TERMINAL))
.Ve
.ie n .SS "The ""*"" operator"
.el .SS "The \f(CW*\fP operator"
.IX Subsection "The * operator"
Any list operator operates on the factor to its left.
A list in the right hand side of a production rule
counts as a single symbol.
.PP
Both operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`+\*(C'\fR can be used 
with the format
\&\f(CW\*(C`X <* Separator>\*(C'\fR.
In such case they describe lists of \f(CW\*(C`X\*(C'\fRs separated by 
\&\f(CW\*(C`separator\*(C'\fR. See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-25 CsBetweenCommansAndD.eyp | cat \-n
\&   1  # CsBetweenCommansAndD.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  S:
\&  13      (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
\&  14        {
\&  15           print "\enNode\en";
\&  16           print $_[1]\->str."\en";
\&  17           print "\enChild 0\en";
\&  18           print $_[1]\->child(0)\->str."\en";
\&  19           print "\enChild 1\en";
\&  20           print $_[1]\->child(1)\->str."\en";
\&  21           $_[1]
\&  22        }
\&  23  ;
\&  24
\&  25  %%
.Ve
.PP
The rule
.PP
.Vb 1
\&                            S: (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
.Ve
.PP
has only two items in its right hand side: the (separated by commas) list
of \f(CW\*(C`c\*(C'\fRs and the list of \f(CW\*(C`d\*(C'\fRs.  The production rule is equivalent to:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v CsBetweenCommansAndD.eyp
\&  pl@nereida:~/LEyapp/examples$ head \-11 CsBetweenCommansAndD.output | cat \-n
\&   1  Rules:
\&   2  \-\-\-\-\-\-
\&   3  0:      $start \-> S $end
\&   4  1:      STAR\-1 \-> STAR\-1 \*(Aq,\*(Aq \*(Aqc\*(Aq
\&   5  2:      STAR\-1 \-> \*(Aqc\*(Aq
\&   6  3:      STAR\-2 \-> STAR\-1
\&   7  4:      STAR\-2 \-> /* empty */
\&   8  5:      PAREN\-3 \-> STAR\-2 \*(Aqd\*(Aq
\&   9  6:      STAR\-4 \-> STAR\-4 PAREN\-3
\&  10  7:      STAR\-4 \-> /* empty */
\&  11  8:      S \-> STAR\-4
.Ve
.PP
The semantic action associated with \f(CW\*(C`*\*(C'\fR is to return 
a reference to a list with the attributes of the 
matching items.
.PP
When working \-as in the example \-
under a tree creation directive it returns
a node belonging to a class named \f(CW\*(C`_STAR_LIST_#number\*(C'\fR
whose children are the items in the list.
The \f(CW\*(C`#number\*(C'\fR is the ordinal number of the production rule
as it appears in the \f(CW\*(C`.output\*(C'\fR file. The attributes must be 
references or associated with semantic tokens to be included 
in the list. Notice \-in the execution of the former
example  that follows \-
how the node for \f(CW\*(C`PAREN\-3\*(C'\fR has been 
eliminated from the tree. Parenthesis nodes are \- generally \-
obviated:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples$ use_csbetweencommansandd.pl
\&  c,c,cd
\&
\&  Node
\&  _STAR_LIST_4(_STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  _STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.PP
Notice that the comma (since it is a syntactic token) has 
also been suppressed.
.SS "Giving Names to Lists"
.IX Subsection "Giving Names to Lists"
To set the name of the node associated with a list operator the
\&\f(CW%name\fR directive must precede the operator as in 
the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,27p\*(Aq CsBetweenCommansAndDWithNames.eyp | cat \-n
\&   1  # CsBetweenCommansAndDWithNames.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  Start: S
\&  13  ;
\&  14  S:
\&  15      (\*(Aqc\*(Aq <%name Cs * \*(Aq,\*(Aq> \*(Aqd\*(Aq) %name Cs_and_d *
\&  16        {
\&  17           print "\enNode\en";
\&  18           print $_[1]\->str."\en";
\&  19           print "\enChild 0\en";
\&  20           print $_[1]\->child(0)\->str."\en";
\&  21           print "\enChild 1\en";
\&  22           print $_[1]\->child(1)\->str."\en";
\&  23           $_[1]
\&  24        }
\&  25  ;
\&  26
\&  27  %%
.Ve
.PP
The grammar describes the language of sequences
.PP
.Vb 1
\&                  c,...,cd c,...,cd c,...,cd ....
.Ve
.PP
The right hand side of the production has only one term which is a list, 
but the factor to which the star applies is itself a list. 
We are naming the term with the name \f(CW\*(C`Cs_and_d\*(C'\fR and the factor with 
the name \f(CW\*(C`Cs\*(C'\fR.
.PP
The execution shows the renamed nodes:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ use_csbetweencommansanddwithnames.pl
\&  c,c,c,cd
\&
\&  Node
\&  Cs_and_d(Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.SS "Optionals"
.IX Subsection "Optionals"
The \f(CW\*(C`X?\*(C'\fR operator stands for the presence or omission
of \f(CW\*(C`X\*(C'\fR.
.PP
The grammar:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples$ head \-11 List5.yp | cat \-n
\&       1  %semantic token \*(Aqc\*(Aq
\&       2  %tree
\&       3  %%
\&       4  S: \*(Aqc\*(Aq \*(Aqc\*(Aq?
\&       5       {
\&       6         print $_[2]\->str."\en";
\&       7         print $_[2]\->child(0)\->attr."\en" if $_[2]\->children;
\&       8      }
\&       9  ;
\&      10
\&      11  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 8
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v List5
\&  pl@nereida:~/LEyapp/examples$ head \-7 List5.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      OPTIONAL\-1 \-> \*(Aqc\*(Aq
\&  2:      OPTIONAL\-1 \-> /* empty */
\&  3:      S \-> \*(Aqc\*(Aq OPTIONAL\-1
.Ve
.PP
When \f(CW\*(C`yybuildingtree\*(C'\fR is false the associated attribute 
is a list that will be empty if \s-1CX\s0> does not show up.
.PP
Under the \f(CW%tree\fR directive the action creates an \f(CW\*(C`_OPTIONAL\*(C'\fR
node:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  cc
\&  _OPTIONAL_1(TERMINAL)
\&  c
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  c
\&  _OPTIONAL_1
.Ve
.SS "Parenthesis"
.IX Subsection "Parenthesis"
Any substring on the right hand side of a production rule can be grouped
using a parenthesis. The introduction of a parenthesis implies the introduction
of an additional syntactic variable whose only production 
is the sequence of symbols between the parenthesis. Thus the grammar:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ head \-6 Parenthesis.eyp | cat \-n
\&     1  %%
\&     2  S:
\&     3        (\*(Aqa\*(Aq S ) \*(Aqb\*(Aq  { shift; [ @_ ] }
\&     4      | \*(Aqc\*(Aq
\&     5  ;
\&     6  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v Parenthesis.eyp; head \-6 Parenthesis.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      PAREN\-1 \-> \*(Aqa\*(Aq S
\&  2:      S \-> PAREN\-1 \*(Aqb\*(Aq
\&  3:      S \-> \*(Aqc\*(Aq
.Ve
.PP
By default the semantic rule associated with a parenthesis
returns an anonymous list with the attributes of the symbols 
between the parenthesis:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n use_parenthesis.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Parenthesis;
\&       3  use Data::Dumper;
\&       4
\&       5  $Data::Dumper::Indent = 1;
\&       6  $parser = Parenthesis\->new();
\&       7  print Dumper($parser\->Run);
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  acb
\&  $VAR1 = [
\&    [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq
\&  ];
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  aacbb
\&  $VAR1 = [
\&    [
\&      \*(Aqa\*(Aq,
\&      [ [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq ]
\&    ],
\&    \*(Aqb\*(Aq
\&  ];
.Ve
.PP
when working under a tree directive or when the attribute
\&\f(CW\*(C`buildingtree\*(C'\fR is set via the \f(CW\*(C`YYBuildingtree\*(C'\fR method
the semantic action returns a node with children the attributes
of the symbols between parenthesis. As usual attributes
which aren't references will be skipped from the list of children.
See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-23 List2.yp | cat \-n
\&   1  %{
\&   2  use Data::Dumper;
\&   3  %}
\&   4  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq \*(Aqc\*(Aq
\&   5  %tree
\&   6  %%
\&   7  S:
\&   8        (%name AS \*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&   9          {
\&  10            print "S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\en";
\&  11            print "Attribute of the first symbol:\en".Dumper($_[1]);
\&  12            print "Attribute of the second symbol: $_[2]\en";
\&  13            $_[0]\->YYBuildAST(@_[1..$#_]);
\&  14          }
\&  15      | \*(Aqc\*(Aq
\&  16          {
\&  17            print "S \-> \*(Aqc\*(Aq\en";
\&  18            my $r = Parse::Eyapp::Node\->new(qw(C(TERMINAL)), sub { $_[1]\->attr(\*(Aqc\*(Aq) }) ;
\&  19            print Dumper($r);
\&  20            $r;
\&  21          }
\&  22  ;
\&  23  %%
.Ve
.PP
The example shows (line 8)
how to rename a \f(CW\*(C`_PAREN\*(C'\fR node. The \f(CW\*(C`%name CLASSNAME\*(C'\fR goes
after the opening parenthesis.
.PP
The call to \f(CW\*(C`YYBuildAST\*(C'\fR at line 13
with argumetns the attributes of the symbols on the right hand side
returns the node describing the current production rule.
Notice that line 13 can be rewritten as:
.PP
.Vb 1
\&                    goto &Parse::Eyapp::Driver::YYBuildAST;
.Ve
.PP
At line 18 the node for the rule is explicitly created
using \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR. The handler passed as second argument
is responsible for setting the value of the atribute \f(CW\*(C`attr\*(C'\fR
of the just created \f(CW\*(C`TERMINAL\*(C'\fR node.
.PP
Let us see an execution:
.PP
.Vb 11
\&  pl@nereida:~/LEyapp/examples$ use_list2.pl
\&  aacbb
\&  S \-> \*(Aqc\*(Aq
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [],
\&        \*(Aqattr\*(Aq => \*(Aqc\*(Aq
\&      }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(AqC\*(Aq );
.Ve
.PP
the first reduction occurs by the non recursive rule. The execution
shows the tree built by the call to
\&\f(CW\*(C`Parse::Eyapp::Node\-\*(C'\fRnew>
at line 18.
.PP
The execution continues with the reduction or reverse derivation by the rule
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR. The action at lines 9\-14
dumps the attribute associated with \f(CW\*(C`(\*(Aqa\*(Aq S)\*(C'\fR
\&\- or, in other words,  the attribute associated with the variable 
\&\f(CW\*(C`PAREN\-1\*(C'\fR. It also dumps the attribute of \f(CW\*(Aqb\*(Aq\fR:
.PP
.Vb 11
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&        bless( { \*(Aqchildren\*(Aq => [ bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&       ]
\&     }, \*(AqC\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&Attribute of the second symbol: b
.Ve
.PP
The last reduction shown is by the rule:
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR:
.PP
.Vb 10
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( {
\&            \*(Aqchildren\*(Aq => [
\&              bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&              bless( {
\&                \*(Aqchildren\*(Aq => [
\&                  bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&                ]
\&              }, \*(AqC\*(Aq )
\&            ]
\&          }, \*(AqAS\*(Aq ),
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqb\*(Aq, \*(Aqtoken\*(Aq => \*(Aqb\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqS_2\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&  Attribute of the second symbol: b
.Ve
.SS "Actions Inside Parenthesis"
.IX Subsection "Actions Inside Parenthesis"
Though is a practice to avoid, since it clutters
the code, it is certainly permitted to introduce
actions between the parenthesis, as in the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-16 ListAndAction.eyp | cat \-n
\&   1  # ListAndAction.eyp
\&   2  %{
\&   3  my $num = 0;
\&   4  %}
\&   5
\&   6  %%
\&   7  S:      \*(Aqc\*(Aq
\&   8              {
\&   9                print "S \-> c\en"
\&  10              }
\&  11      |    (\*(Aqa\*(Aq {$num++; print "Seen <$num> \*(Aqa\*(Aqs\en"; $_[1] }) S \*(Aqb\*(Aq
\&  12              {
\&  13                print "S \-> (a ) S b\en"
\&  14              }
\&  15  ;
\&  16  %%
.Ve
.PP
This is the output when executing this program with input \f(CW\*(C`aaacbbb\*(C'\fR:
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples$ use_listandaction.pl
\&  aaacbbb
\&  Seen <1> \*(Aqa\*(Aqs
\&  Seen <2> \*(Aqa\*(Aqs
\&  Seen <3> \*(Aqa\*(Aqs
\&  S \-> c
\&  S \-> (a ) S b
\&  S \-> (a ) S b
\&  S \-> (a ) S b
.Ve
.SH "NAMES FOR ATTRIBUTES"
.IX Header "NAMES FOR ATTRIBUTES"
Attributes can be referenced by meaningful names using the \fIdot notation\fR
instead of using the classic error-prone positional approach:
.PP
.Vb 5
\&                        rhs:  rhseltwithid *
\&                        rhseltwithid : 
\&                              rhselt \*(Aq.\*(Aq IDENT 
\&                            | \*(Aq$\*(Aq rhselt  
\&                            | rhselt
.Ve
.PP
for example:
.PP
.Vb 1
\&              exp : exp.left \*(Aq\-\*(Aq exp.right  { $left \- $right }
.Ve
.PP
By qualifying the first appearance of the syntactic variable \f(CW\*(C`exp\*(C'\fR
with the notation \f(CW\*(C`exp.left\*(C'\fR we can later refer inside the actions
to the associated attribute using the lexical variable
\&\f(CW$left\fR.
.PP
The \fIdollar notation\fR \f(CW$A\fR can be used as an abbreviation
of \f(CW\*(C`A.A\*(C'\fR.
.SH "DEFAULT ACTIONS"
.IX Header "DEFAULT ACTIONS"
When no action is specified both \f(CW\*(C`yapp\*(C'\fR and \f(CW\*(C`eyapp\*(C'\fR
implicitly insert the semantic action \f(CW\*(C`{ $_[1] }\*(C'\fR. 
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify such behavior using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. The \f(CW\*(C`{ Perl code }\*(C'\fR clause that follows the \f(CW%defaultaction\fR
directive is
executed when reducing by any production for which no explicit
action was specified.
.SS "An Example of Default Action: Translator from Infix to Postfix"
.IX Subsection "An Example of Default Action: Translator from Infix to Postfix"
See an example that translates an infix expression
like \f(CW\*(C`a=b*\-3\*(C'\fR into a postfix expression like \f(CW\*(C`a b 3 NEG * = \*(C'\fR:
.PP
.Vb 5
\& # File Postfix.eyp (See the examples/ directory)
\& %right  \*(Aq=\*(Aq
\& %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\& %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\& %left   NEG
\&
\& %defaultaction { return  "$left $right $op"; }
\&
\& %%
\& line: $exp  { print "$exp\en" }
\& ;
\&
\& exp:        $NUM  { $NUM }
\&         |   $VAR  { $VAR }
\&         |   VAR.left \*(Aq=\*(Aq.op exp.right
\&         |   exp.left \*(Aq+\*(Aq.op exp.right
\&         |   exp.left \*(Aq\-\*(Aq.op exp.right
\&         |   exp.left \*(Aq*\*(Aq.op exp.right
\&         |   exp.left \*(Aq/\*(Aq.op exp.right
\&         |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&         |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }
\& ;
\&
\& %%
\&
\& # Support subroutines as in the Synopsis example
\& ...
.Ve
.PP
The file containing the \f(CW\*(C`Eyapp\*(C'\fR program must be compiled with \f(CW\*(C`eyapp\*(C'\fR:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> eyapp Postfix.eyp
.Ve
.PP
Next, you have to write a client program:
.PP
.Vb 7
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n usepostfix.pl
\&      1  #!/usr/bin/perl \-w
\&      2  use strict;
\&      3  use Postfix;
\&      4
\&      5  my $parser = new Postfix();
\&      6  $parser\->Run;
.Ve
.PP
Now we can run the client program:
.PP
.Vb 3
\& nereida:~/src/perl/YappWithDefaultAction/examples> usepostfix.pl
\& Write an expression: \-(2*a\-b*\-3)
\& 2 a * b 3 NEG * \- NEG
.Ve
.ie n .SS "Default Actions, %name and ""YYName"""
.el .SS "Default Actions, \f(CW%name\fP and \f(CWYYName\fP"
.IX Subsection "Default Actions, %name and YYName"
In \f(CW\*(C`eyapp\*(C'\fR each production rule has a name.
The name of a rule can be explicitly given by the programmer 
using the \f(CW%name\fR directive. For example, in the piece of code
that follows the name \f(CW\*(C`ASSIGN\*(C'\fR is given to the rule \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR.
.PP
When no explicit name is given the rule has an implicit name.
The implicit name of a rule is shaped by concatenating
the name of the syntactic variable on its left, an underscore 
and the ordinal number of the production rule \f(CW\*(C`Lhs_#\*(C'\fR
as it appears in the \f(CW\*(C`.output\*(C'\fR file.
Avoid giving names matching such pattern to production rules.
The patterns
\&\f(CW\*(C`/${lhs}_\ed+$/\*(C'\fR where \f(CW\*(C`${lhs}\*(C'\fR is the name of the syntactic variable
are reserved for internal use by \f(CW\*(C`eyapp\*(C'\fR.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n Lhs.eyp
\&   1  # Lhs.eyp
\&   2
\&   3  %right  \*(Aq=\*(Aq
\&   4  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&   5  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&   6  %left   NEG
\&   7
\&   8  %defaultaction {
\&   9    my $self = shift;
\&  10    my $name = $self\->YYName();
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
\&  12  }
\&  13
\&  14  %%
\&  15  input:
\&  16              /* empty */
\&  17                { [] }
\&  18          |   input line
\&  19                {
\&  20                  push @{$_[1]}, $_[2] if defined($_[2]);
\&  21                  $_[1]
\&  22                }
\&  23  ;
\&  24
\&  25  line:     \*(Aq\en\*(Aq       { }
\&  26          | exp \*(Aq\en\*(Aq   {  $_[1] }
\&  27  ;
\&  28
\&  29  exp:
\&  30              NUM   { $_[1] }
\&  31          |   VAR   { $_[1] }
\&  32          |   %name ASSIGN
\&  33              VAR \*(Aq=\*(Aq exp
\&  34          |   %name PLUS
\&  35              exp \*(Aq+\*(Aq exp
\&  36          |   %name MINUS
\&  37              exp \*(Aq\-\*(Aq exp
\&  38          |   %name TIMES
\&  39              exp \*(Aq*\*(Aq exp
\&  40          |   %name DIV
\&  41              exp \*(Aq/\*(Aq exp
\&  42          |   %name UMINUS
\&  43              \*(Aq\-\*(Aq exp %prec NEG
\&  44          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&  45  ;
.Ve
.PP
Inside a semantic action
the name of the current rule can be recovered 
using the method \f(CW\*(C`YYName\*(C'\fR of the parser object.
.PP
The default action (lines 8\-12) computes as attribute of the left
hand side a reference to an object blessed in the name of the rule.
The object has an attribute \f(CW\*(C`children\*(C'\fR which is a reference 
to the list of children of the node.
The call to \f(CW\*(C`grep\*(C'\fR
.PP
.Vb 1
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
.Ve
.PP
excludes children that aren't references. Notice that the lexical analyzer 
only returns references for the \f(CW\*(C`NUM\*(C'\fR and \f(CW\*(C`VAR\*(C'\fR terminals:
.PP
.Vb 10
\&  59  sub _Lexer {
\&  60      my($parser)=shift;
\&  61
\&  62      for ($parser\->YYData\->{INPUT}) {
\&  63          s/^[ \et]+//;
\&  64          return(\*(Aq\*(Aq,undef) unless $_;
\&  65          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&  66                  and return(\*(AqNUM\*(Aq, bless { attr => $1}, \*(AqNUM\*(Aq);
\&  67          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&  68                  and return(\*(AqVAR\*(Aq,bless {attr => $1}, \*(AqVAR\*(Aq);
\&  69          s/^(.)//s
\&  70                  and return($1, $1);
\&  71      }
\&  72      return(\*(Aq\*(Aq,undef);
\&  73  }
.Ve
.PP
follows the client program:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n uselhs.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Lhs;
\&       3  use Data::Dumper;
\&       4
\&       5  $parser = new Lhs();
\&       6  my $tree = $parser\->Run;
\&       7  $Data::Dumper::Indent = 1;
\&       8  if (defined($tree)) { print Dumper($tree); }
\&       9  else { print "Cadena no va\*'lida\en"; }
.Ve
.PP
When executed with input \f(CW\*(C`a=(2+3)*b\*(C'\fR the parser produces
the following tree:
.PP
.Vb 1
\&  ASSIGN(TIMES(PLUS(NUM[2],NUM[3]), VAR[b]))
.Ve
.PP
See the result of an execution:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ uselhs.pl
\&  a=(2+3)*b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqattr\*(Aq => \*(Aqa\*(Aq }, \*(AqVAR\*(Aq ),
\&        bless( {
\&          \*(Aqchildren\*(Aq => [
\&            bless( {
\&              \*(Aqchildren\*(Aq => [
\&                bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq }, \*(AqNUM\*(Aq ),
\&                bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq }, \*(AqNUM\*(Aq )
\&              ]
\&            }, \*(AqPLUS\*(Aq ),
\&            bless( { \*(Aqattr\*(Aq => \*(Aqb\*(Aq }, \*(AqVAR\*(Aq )
\&          ]
\&        }, \*(AqTIMES\*(Aq )
\&      ]
\&    }, \*(AqASSIGN\*(Aq )
\&  ];
.Ve
.PP
The name of a production rule can be changed at execution time.
See the following example:
.PP
.Vb 10
\&  $ sed \-n \*(Aq29,50p\*(Aq YYNameDynamic.eyp | cat \-n
\&     1  exp:
\&     2              NUM   { $_[1] }
\&     3          |   VAR   { $_[1] }
\&     4          |   %name ASSIGN
\&     5              VAR \*(Aq=\*(Aq exp
\&     6          |   %name PLUS
\&     7              exp \*(Aq+\*(Aq exp
\&     8          |   %name MINUS
\&     9              exp \*(Aq\-\*(Aq exp
\&    10                {
\&    11                  my $self = shift;
\&    12                  $self\->YYName(\*(AqSUBTRACT\*(Aq); # rename it
\&    13                  $self\->YYBuildAST(@_); # build the node
\&    14                }
\&    15          |   %name TIMES
\&    16              exp \*(Aq*\*(Aq exp
\&    17          |   %name DIV
\&    18              exp \*(Aq/\*(Aq exp
\&    19          |   %name UMINUS
\&    20              \*(Aq\-\*(Aq exp %prec NEG
\&    21          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    22  ;
.Ve
.PP
When the client program is executed we can see the presence
of the \f(CW\*(C`SUBTRACT\*(C'\fR nodes:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ useyynamedynamic.pl
\&  2\-b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aq2\*(Aq
\&        }, \*(AqNUM\*(Aq ),
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aqb\*(Aq
\&        }, \*(AqVAR\*(Aq )
\&      ]
\&    }, \*(AqSUBTRACT\*(Aq )
\&  ];
.Ve
.SH "GRAMMAR REUSE"
.IX Header "GRAMMAR REUSE"
.SS "Reusing Grammars Using Inheritance"
.IX Subsection "Reusing Grammars Using Inheritance"
An method to reuse a grammar is via inheritance. 
The client inherits the generated parser module and expands it 
with methods that inherit or overwrite the actions.
Here is an example. Initially we have this Eyapp grammar:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n NoacInh.eyp
\&     1  %left   \*(Aq+\*(Aq
\&     2  %left   \*(Aq*\*(Aq
\&     3
\&     4  %defaultaction {
\&     5    my $self = shift;
\&     6
\&     7    my $action = $self\->YYName;
\&     8
\&     9    $self\->$action(@_);
\&    10  }
\&    11
\&    12  %%
\&    13  exp:        %name NUM
\&    14                NUM
\&    15          |   %name PLUS
\&    16                exp \*(Aq+\*(Aq exp
\&    17          |   %name TIMES
\&    18                exp \*(Aq*\*(Aq exp
\&    19          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    20                { $_[2] }
\&    21  ;
\&    22
\&    23  %%
\&    24
\&    25  sub _Error {
\&    26    my($token)=$_[0]\->YYCurval;
\&    27    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    28    my @expected = $_[0]\->YYExpect();
\&    29
\&    30    local $" = \*(Aq, \*(Aq;
\&    31    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    32  }
\&    33
\&    34
\&    35  my $x = \*(Aq\*(Aq;
\&    36
\&    37  sub _Lexer {
\&    38    my($parser)=shift;
\&    39
\&    40    for ($x) {
\&    41      s/^\es+//;
\&    42      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    43
\&    44      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    45      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    46      s/^(.)//s                    and return($1,$1);
\&    47    }
\&    48  }
\&    49
\&    50  sub Run {
\&    51    my($self)=shift;
\&    52    $x = shift;
\&    53    my $debug = shift;
\&    54
\&    55    $self\->YYParse(
\&    56      yylex => \e&_Lexer,
\&    57      yyerror => \e&_Error,
\&    58      yydebug => $debug,
\&    59    );
\&    60  }
.Ve
.PP
The following program defines two classes: \f(CW\*(C`CalcActions\*(C'\fR
that implements the actions for the calculator
and package \f(CW\*(C`PostActions\*(C'\fR that implements the actions
for the infix to postfix translation. This way we have an 
example that reuses the former grammar twice:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n icalcu_and_ipost.pl
\&     1  #!/usr/bin/perl \-w
\&     2  package CalcActions;
\&     3  use strict;
\&     4  use base qw{NoacInh};
\&     5
\&     6  sub NUM {
\&     7    return $_[1];
\&     8  }
\&     9
\&    10  sub PLUS {
\&    11    $_[1]+$_[3];
\&    12  }
\&    13
\&    14  sub TIMES {
\&    15    $_[1]*$_[3];
\&    16  }
\&    17
\&    18  package PostActions;
\&    19  use strict;
\&    20  use base qw{NoacInh};
\&    21
\&    22  sub NUM {
\&    23    return $_[1];
\&    24  }
\&    25
\&    26  sub PLUS {
\&    27    "$_[1] $_[3] +";
\&    28  }
\&    29
\&    30  sub TIMES {
\&    31    "$_[1] $_[3] *";
\&    32  }
\&    33
\&    34  package main;
\&    35  use strict;
\&    36
\&    37  my $calcparser = CalcActions\->new();
\&    38  print "Write an expression: ";
\&    39  my $x = <STDIN>;
\&    40  my $e = $calcparser\->Run($x);
\&    41
\&    42  print "$e\en";
\&    43
\&    44  my $postparser = PostActions\->new();
\&    45  my $p = $postparser\->Run($x);
\&    46
\&    47  print "$p\en";
.Ve
.PP
The subroutine used as default action in \f(CW\*(C`NoacInh.eyp\*(C'\fR is so useful 
that is packed as the Parse::Eyapp::Driver method 
\&\f(CW\*(C`YYDelegateaction\*(C'\fR.
.PP
See files \f(CW\*(C`examples/recycle/NoacYYDelegateaction.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost_yydel.pl\*(C'\fR
for an example of use of \f(CW\*(C`YYDelegateaction\*(C'\fR.
.SS "Reusing Grammars by Dynamic Substitution of Semantic Actions"
.IX Subsection "Reusing Grammars by Dynamic Substitution of Semantic Actions"
The methods \f(CW\*(C`YYSetaction\*(C'\fR and \f(CW\*(C`YYAction\*(C'\fR of the parser object provide a way
to selectively substitute some actions of a given grammar.
Let us consider once more a postfix to infix translator:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n PostfixWithActions.eyp
\&     1  # File PostfixWithActions.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6
\&     7  %%
\&     8  line: $exp  { print "$exp\en" }
\&     9  ;
\&    10
\&    11  exp:        $NUM
\&    12                  { $NUM }
\&    13          |   $VAR
\&    14                  { $VAR }
\&    15          |   %name ASSIGN
\&    16                VAR.left \*(Aq=\*(Aqexp.right
\&    17                  { "$_[3] &$_[1] ASSIGN"; }
\&    18          |   %name PLUS
\&    19                exp.left \*(Aq+\*(Aqexp.right
\&    20                  { "$_[1] $_[3] PLUS"; }
\&    21          |   %name MINUS
\&    22                exp.left \*(Aq\-\*(Aqexp.right
\&    23                  { "$_[1] $_[3] MINUS"; }
\&    24          |   %name TIMES
\&    25                exp.left \*(Aq*\*(Aqexp.right
\&    26                  { "$_[1] $_[3] TIMES"; }
\&    27          |   %name DIV
\&    28                exp.left \*(Aq/\*(Aqexp.right
\&    29                  { "$_[1] $_[3] DIV"; }
\&    30          |   %name NEG \*(Aq\-\*(Aq $exp %prec NEG
\&    31                  { "$exp NEG" }
\&    32          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq
\&    33                  { $exp }
\&    34  ;
\&    35
\&    36  %%
\&    37
\&    38  sub _Error {
\&    39    my($token)=$_[0]\->YYCurval;
\&    40    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    41    my @expected = $_[0]\->YYExpect();
\&    42
\&    43    local $" = \*(Aq, \*(Aq;
\&    44    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    45  }
\&    46
\&    47  my $x;
\&    48
\&    49  sub _Lexer {
\&    50    my($parser)=shift;
\&    51
\&    52    for ($x) {
\&    53      s/^\es+//;
\&    54      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    55
\&    56      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    57      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    58      s/^(.)//s                    and return($1,$1);
\&    59    }
\&    60  }
\&    61
\&    62  sub Run {
\&    63    my($self)=shift;
\&    64    $x = shift;
\&    65    $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    66      #yydebug => 0xFF
\&    67    );
\&    68  }
.Ve
.PP
The program \f(CW\*(C`rewritepostfixwithactions.pl\*(C'\fR uses the former grammar
to translate infix expressions to postfix expressions.
It also implements a calculator reusing the grammar in
\&\f(CW\*(C`PostfixWithActions.eyp\*(C'\fR. It does so using
the \f(CW\*(C`YYSetaction\*(C'\fR method.
The semantic actions for the productions named
.IP "\(bu" 2
\&\s-1ASSIGN\s0
.IP "\(bu" 2
\&\s-1PLUS\s0
.IP "\(bu" 2
\&\s-1TIMES\s0
.IP "\(bu" 2
\&\s-1DIV\s0
.IP "\(bu" 2
\&\s-1NEG\s0
.PP
are selectively substituted by the appropriate actions, while the other
semantic actions remain unchanged:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n rewritepostfixwithactions.pl
\&     1  #!/usr/bin/perl
\&     2  use warnings;
\&     3  use PostfixWithActions;
\&     4
\&     5  my $debug = shift || 0;
\&     6  my $pparser = PostfixWithActions\->new();
\&     7  print "Write an expression: ";
\&     8  my $x = <STDIN>;
\&     9
\&    10  # First, trasnlate to postfix ...
\&    11  $pparser\->Run($x, $debug);
\&    12
\&    13  # And then selectively substitute
\&    14  # some semantic actions
\&    15  # to obtain an infix calculator ...
\&    16  my %s;            # symbol table
\&    17  $pparser\->YYSetaction(
\&    18    ASSIGN => sub { $s{$_[1]} = $_[3] },
\&    19    PLUS   => sub { $_[1] + $_[3] },
\&    20    TIMES  => sub { $_[1] * $_[3] },
\&    21    DIV    => sub { $_[1] / $_[3] },
\&    22    NEG    => sub { \-$_[2] },
\&    23  );
\&    24
\&    25  $pparser\->Run($x, $debug);
.Ve
.PP
When running this program the output is:
.PP
.Vb 8
\&  examples/recycle$ ./rewritepostfixwithactions.pl
\&  Write an expression: 2*3+4
\&  2 3 TIMES 4 PLUS
\&  10
\&  examples/recycle$ rewritepostfixwithactions.pl
\&  Write an expression: a = 2*(b = 3+5)
\&  2 3 5 PLUS &b ASSIGN TIMES &a ASSIGN
\&  16
.Ve
.ie n .SH "ABSTRACT SYNTAX TREES: %tree AND %name"
.el .SH "ABSTRACT SYNTAX TREES: \f(CW%tree\fP AND \f(CW%name\fP"
.IX Header "ABSTRACT SYNTAX TREES: %tree AND %name"
.ie n .SS "%tree Default Names"
.el .SS "\f(CW%tree\fP Default Names"
.IX Subsection "%tree Default Names"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
directive. Actually, the \f(CW%tree\fR directive is equivalent to a call
to the \f(CW\*(C`YYBuildAST\*(C'\fR method of the parser object.
.PP
Any production production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
can be named using a directive \f(CW\*(C`%name someclass\*(C'\fR.
.PP
When reducing by a production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
the \f(CW%tree\fR directive (i.e., the \f(CW\*(C`YYBuildAST\*(C'\fR method) 
builds an anonymous hash blessed in \f(CW\*(C`someclass\*(C'\fR.
The hash has an attribute \f(CW\*(C`children\*(C'\fR containing the references
to the \s-1AST\s0 trees associated with the symbols in the right hand
side \f(CW\*(C`X\*(C'\fR, C>Y>, etc.
.PP
If no explicit name was given to the production rule,
\&\f(CW\*(C`YYBuildAST\*(C'\fR blesses the node in the class name resulting 
from the concatenation
of the left hand side and the production number. The production number
is the ordinal number of the production as they appear in the associated 
\&\f(CW\*(C`.output\*(C'\fR file (see option \f(CW\*(C`\-v\*(C'\fR of eyapp). For example,
given the grammar:
.PP
.Vb 7
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,27p\*(Aq treewithoutnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <+ \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&         NUM           |   VAR       | VAR \*(Aq=\*(Aq exp
\&      | exp \*(Aq+\*(Aq exp    | exp \*(Aq\-\*(Aq exp |  exp \*(Aq*\*(Aq exp
\&      | exp \*(Aq/\*(Aq exp
\&      | \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
\&
\&    %%
.Ve
.PP
The tree produced by the parser when feed with input \f(CW\*(C`a=2*b\*(C'\fR
is:
.PP
.Vb 1
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ ./treewithoutnames.pl
\&
\&  ************
\&  _PLUS_LIST(exp_6(TERMINAL[a],exp_9(exp_4(TERMINAL[2]),exp_5(TERMINAL[b]))))
\&  ************
.Ve
.PP
If we want to see the correspondence between names and rules we can generate and
check the corresponding file \f(CW\*(C`.output\*(C'\fR setting the \f(CW\*(C`outputfile\*(C'\fR
of \f(CW\*(C`Parse::Eyapp\*(C'\fR:
.PP
.Vb 6
\&  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    input=>$grammar,
\&    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    firstline=>9,      # String $grammar starts at line 9 (for error diagnostics)
\&    outputfile=>\*(Aqtreewithoutnames\*(Aq
\&  );
.Ve
.PP
The grammar with the expanded rules appears in the \f(CW\*(C`.output\*(C'\fR file:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq28,42p\*(Aq treewithoutnames.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> line $end
\&  1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&  2:      PLUS\-1 \-> exp
\&  3:      line \-> PLUS\-1
\&  4:      exp \-> NUM
\&  5:      exp \-> VAR
\&  6:      exp \-> VAR \*(Aq=\*(Aq exp
\&  7:      exp \-> exp \*(Aq+\*(Aq exp
\&  8:      exp \-> exp \*(Aq\-\*(Aq exp
\&  9:      exp \-> exp \*(Aq*\*(Aq exp
\&  10:     exp \-> exp \*(Aq/\*(Aq exp
\&  11:     exp \-> \*(Aq\-\*(Aq exp
\&  12:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
We can see now that the node \f(CW\*(C`exp_9\*(C'\fR corresponds to the production \f(CW\*(C`exp \-> exp \*(Aq*\*(Aq exp\*(C'\fR.
Observe also that the Eyapp production:
.PP
.Vb 2
\&                                line: exp <+ \*(Aq;\*(Aq>
\&actually produces the productions:
\&
\&                        1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&                        2:      PLUS\-1 \-> exp
.Ve
.PP
and that the name of the class associated with the non empty list is \f(CW\*(C`_PLUS_LIST\*(C'\fR.
.ie n .SS "%tree Giving Explicit Names"
.el .SS "\f(CW%tree\fP Giving Explicit Names"
.IX Subsection "%tree Giving Explicit Names"
A production rule can be \fInamed\fR using the \f(CW\*(C`%name IDENTIFIER\*(C'\fR directive.  For
each production rule a namespace/package is created. \fIThe\fR \f(CW\*(C`IDENTIFIER\*(C'\fR 
\&\fIis the name of the associated package\fR.  Therefore, by modifying the former
grammar with additional \f(CW%name\fR directives:
.PP
.Vb 7
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,26p\*(Aq treewithnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <%name EXPS + \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&        %name NUM    NUM           | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&      | %name PLUS   exp \*(Aq+\*(Aq exp   | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&      | %name DIV    exp \*(Aq/\*(Aq exp
\&      | %name UMINUS \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
.Ve
.PP
we are explicitly naming the productions. Thus, all the node instances 
corresponding to the production \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR will belong to the class \f(CW\*(C`ASSIGN\*(C'\fR. 
Now the tree for \f(CW\*(C`a=2*b\*(C'\fR becomes:
.PP
.Vb 1
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ ./treewithnames.pl
\&
\&  ************
\&  EXPS(ASSIGN(TERMINAL[a],TIMES(NUM(TERMINAL[2]),VAR(TERMINAL[b]))))
\&  ************
.Ve
.PP
Observe how the list has been named \f(CW\*(C`EXPS\*(C'\fR. The \f(CW%name\fR directive prefixes the 
list operator (\f(CW\*(C`[+*?]\*(C'\fR).
.SS "\s-1TERMINAL\s0 Nodes"
.IX Subsection "TERMINAL Nodes"
Nodes named \f(CW\*(C`TERMINAL\*(C'\fR are built from the tokens provided by the lexical
analyzer.  \f(CW\*(C`Parse::Eyapp\*(C'\fR follows the same protocol than Parse::Yapp for
communication between the parser and the lexical analyzer: A couple \f(CW\*(C`($token,
$attribute)\*(C'\fR is returned by the lexical analyzer.  These values are stored
under the keys \f(CW\*(C`token\*(C'\fR and \f(CW\*(C`attr\*(C'\fR.  \f(CW\*(C`TERMINAL\*(C'\fR nodes as all
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes also have the attribute \f(CW\*(C`children\*(C'\fR but is \- almost
always \- empty.
.ie n .SS "Explicit Actions Inside %tree"
.el .SS "Explicit Actions Inside \f(CW%tree\fP"
.IX Subsection "Explicit Actions Inside %tree"
Explicit actions can be specified by the programmer like in this line
from the Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 1
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }  /* Let us simplify a bit the tree */
.Ve
.PP
Explicit actions receive as arguments the references to the children nodes already 
built. The programmer can influence the shape of the tree by inserting
these explicit actions. In this example the programmer has decided to simplify the 
syntax tree: the nodes associated with the parenthesis are 
discarded and the reference to the subtree containing the proper
expression is returned. Such manoeuvre is called \fIbypassing\fR.
See section \*(L"The  bypass clause and the \f(CW%no\fR bypass directive\*(R"
to know more about \fIautomatic bypassing\fR
.ie n .SS "Explicitly Building Nodes With ""YYBuildAST"""
.el .SS "Explicitly Building Nodes With \f(CWYYBuildAST\fP"
.IX Subsection "Explicitly Building Nodes With YYBuildAST"
Sometimes the best time to decorate a node with some
attributes is just after being built.
In such cases the programmer can take \fImanual control\fR
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to 
inmediately proceed to decorate it.
.PP
The following example illustrates the situation (see
file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR 
inside \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-n \*(Aq397,408p\*(Aq lib/Simple/Types.eyp
\&  Variable:
\&      %name VAR
\&      ID
\&    | %name  VARARRAY
\&      $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&        {
\&          my $self = shift;
\&          my $node =  $self\->YYBuildAST(@_);
\&          $node\->{line} = $ID\->[1];# $_[1]\->[1]
\&          return $node;
\&        }
\&  ;
.Ve
.PP
This production rule defines the expression to access an array element 
as an identifier followed by
a non empty list of binary expressions \f(CW\*(C` Variable: ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq)+\*(C'\fR. 
Furthermore, the node corresponding
to the list of indices has been named \f(CW\*(C`INDEXSPEC\*(C'\fR.
.PP
When no explicit action is
inserted a binary node will be built having as first child the node
corresponding to the identifier \f(CW$ID\fR and as second child the reference 
to the list of binary expressions. The children corresponding to
\&\f(CW\*(Aq[\*(Aq\fR and \f(CW\*(Aq]\*(Aq\fR are discarded since they are \-by default\- \fIsyntactic tokens\fR
(see section \*(L"Syntactic and Semantic tokens\*(R").
However, the programmer wants to decorate
the node being built with a \f(CW\*(C`line\*(C'\fR attribute holding the line number in the source
code where the identifier being used appears. The call to the \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR
method \f(CW\*(C`YYBuildAST\*(C'\fR does the job of building the node. After
that the node can be decorated and returned.
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&                %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS "Returning non References Under %tree"
.el .SS "Returning non References Under \f(CW%tree\fP"
.IX Subsection "Returning non References Under %tree"
When a \fIexplicit user action returns s.t. that is not a reference
no node will be inserted\fR. This fact can be used to suppress nodes
in the \s-1AST\s0 being built. See the following example (file \f(CW\*(C`examples/returnnonode.yp\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,17p\*(Aq returnnonode.yp | cat \-n
\&     1  %tree
\&     2  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     3  %%
\&     4  S:    %name EMPTY
\&     5          /* empty */
\&     6      | %name AES
\&     7          S A
\&     8      | %name BES
\&     9          S B
\&    10  ;
\&    11  A : %name A
\&    12        \*(Aqa\*(Aq
\&    13  ;
\&    14  B : %name B
\&    15        \*(Aqb\*(Aq { }
\&    16  ;
\&    17  %%
.Ve
.PP
since the action at line 15 returns \f(CW\*(C`undef\*(C'\fR
the \f(CW\*(C`B : \*(Aqb\*(Aq\*(C'\fR subtree will not be inserted in the \s-1AST:\s0
.PP
.Vb 3
\&  $ usereturnnonode.pl
\&  ababa
\&  AES(BES(AES(BES(AES(EMPTY,A(TERMINAL[a]))),A(TERMINAL[a]))),A(TERMINAL[a]))
.Ve
.PP
Observe the absence of \f(CW\*(C`B\*(C'\fRs and \f(CW\*(Aqb\*(Aq\fRs.
.ie n .SS "Intermediate actions and %tree"
.el .SS "Intermediate actions and \f(CW%tree\fP"
.IX Subsection "Intermediate actions and %tree"
Intermediate actions can be used to change the shape of the \s-1AST \s0(prune it,
decorate it, etc.) but the value returned by them is ignored. The grammar 
below has two intermediate actions. They modify the attributes of the
node to its left and return a reference \f(CW$f\fR to such node (lines 5 and 6):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,15p\*(Aq intermediateactiontree.yp | cat \-n
\&     1  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     2  %tree bypass
\&     3  %%
\&     4  S:    %name EMPTY
\&     5         /* empty */
\&     6      | %name SA
\&     7         S A.f { $f\->{attr} = "A"; $f; } A
\&     8      | %name SB
\&     9         S B.f { $f\->{attr} = "B"; $f; } B
\&    10  ;
\&    11  A : %name A \*(Aqa\*(Aq
\&    12  ;
\&    13  B : %name B \*(Aqb\*(Aq
\&    14  ;
\&    15  %%
.Ve
.PP
See the client program:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n useintermediateactiontree.pl
\&  1  #!/usr/bin/perl \-w
\&  2  use strict;
\&  3  use Parse::Eyapp;
\&  4  use intermediateactiontree;
\&  5
\&  6  { no warnings;
\&  7  *A::info = *B::info = sub { $_[0]{attr} };
\&  8  }
\&  9
\& 10  my $parser = intermediateactiontree\->new();
\& 11  my $t = $parser\->Run;
\& 12  print $t\->str,"\en";
.Ve
.PP
When it runs produces this output:
.PP
.Vb 3
\&  $ useintermediateactiontree.pl
\&  aabbaa
\&  SA(SB(SA(EMPTY,A[A],A[a]),B[B],B[b]),A[A],A[a])
.Ve
.PP
The 
attributes 
of left \f(CW\*(C`A\*(C'\fRs 
have been effectively changed by the intermediate actions
from \f(CW\*(Aqa\*(Aq\fR to \f(CW\*(AqA\*(Aq\fR.
However no further children have been inserted.
.SS "Syntactic and Semantic tokens"
.IX Subsection "Syntactic and Semantic tokens"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR differences between \f(CW\*(C`syntactic tokens\*(C'\fR
and \f(CW\*(C`semantic tokens\*(C'\fR. By default all tokens
declared using string notation (i.e. between quotes
like \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq=\*(Aq\fR)
are considered \fIsyntactic tokens\fR. Tokens declared by an identifier
(like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR) are by default considered
\&\fIsemantic tokens\fR. \fBSyntactic tokens do not yield to nodes in the
syntactic tree\fR. Thus, the first print in the section Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 10
\&  $ cat \-n synopsis.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info {
\&     7    $_[0]{attr}
\&     8  }
\&     9
\&    10  my $grammar = q{
\&    11    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    12    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    13    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    14    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    15    %tree           # Let us build an abstract syntax tree ...
\&    16
\&    17    %%
\&    18    line:
\&    19        exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>
\&    20          { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    21    ;
\&    22
\&    23    /* The %name directive defines the name of the class */
\&    24    exp:
\&    25        %name NUM
\&    26        NUM
\&    27      | %name VAR
\&    28        VAR
\&    29      | %name ASSIGN
\&    30        VAR \*(Aq=\*(Aq exp
\&    31      | %name PLUS
\&    32        exp \*(Aq+\*(Aq exp
\&    33      | %name MINUS
\&    34        exp \*(Aq\-\*(Aq exp
\&    35      | %name TIMES
\&    36        exp \*(Aq*\*(Aq exp
\&    37      | %name DIV
\&    38        exp \*(Aq/\*(Aq exp
\&    39      | %name UMINUS
\&    40        \*(Aq\-\*(Aq exp %prec NEG
\&    41      | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    42          { $_[2] }  /* Let us simplify a bit the tree */
\&    43    ;
\&    44
\&    45    %%
\&    46    sub _Error { die "Syntax error near ".($_[0]\->YYCurval?$_[0]\->YYCurval:"end of file")."\en" }
\&    47
\&    48    sub _Lexer {
\&    49      my($parser)=shift; # The parser object
\&    50
\&    51      for ($parser\->YYData\->{INPUT}) { # Topicalize
\&    52        m{\eG\es+}gc;
\&    53        $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    54        m{\eG([0\-9]+(?:\e.[0\-9]+)?)}gc and return(\*(AqNUM\*(Aq,$1);
\&    55        m{\eG([A\-Za\-z][A\-Za\-z0\-9_]*)}gc and return(\*(AqVAR\*(Aq,$1);
\&    56        m{\eG(.)}gcs and return($1,$1);
\&    57      }
\&    58      return(\*(Aq\*(Aq,undef);
\&    59    }
\&    60
\&    61    sub Run {
\&    62        my($self)=shift;
\&    63        $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error, );
\&    64    }
\&    65  }; # end grammar
\&    66
\&    67  our (@all, $uminus);
\&    68
\&    69  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    70    input=>$grammar,
\&    71    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    72    firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\&    73  );
\&    74  my $parser = Calc\->new();                # Create a parser
\&    75  $parser\->YYData\->{INPUT} = "2*\-3+b*0;\-\-2\en"; # Set the input
\&    76  my $t = $parser\->Run;                    # Parse it!
\&    77  local $Parse::Eyapp::Node::INDENT=2;
\&    78  print "Syntax Tree:",$t\->str;
\&    79
\&    80  # Let us transform the tree. Define the tree\-regular expressions ..
\&    81  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&    82      { #  Example of support code
\&    83        my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&    84      }
\&    85      constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&    86        => {
\&    87          my $op = $Op{ref($bin)};
\&    88          $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\&    89          $_[0] = $NUM[0];
\&    90        }
\&    91      uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\&    92      zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    93      whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    94    },
\&    95    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\&    96  );
\&    97  $p\->generate(); # Create the tranformations
\&    98
\&    99  $t\->s($uminus); # Transform UMINUS nodes
\&   100  $t\->s(@all);    # constant folding and mult. by zero
\&   101
\&   102  local $Parse::Eyapp::Node::INDENT=0;
\&   103  print "\enSyntax Tree after transformations:\en",$t\->str,"\en";
.Ve
.PP
gives as result the following output:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> synopsis.pl
\& Syntax Tree:
\& EXPRESSION_LIST(
\&   PLUS(
\&     TIMES(
\&       NUM(
\&         TERMINAL[2]
\&       ),
\&       UMINUS(
\&         NUM(
\&           TERMINAL[3]
\&         )
\&       ) # UMINUS
\&     ) # TIMES,
\&     TIMES(
\&       VAR(
\&         TERMINAL[b]
\&       ),
\&       NUM(
\&         TERMINAL[0]
\&       )
\&     ) # TIMES
\&   ) # PLUS,
\&   UMINUS(
\&     UMINUS(
\&       NUM(
\&         TERMINAL[2]
\&       )
\&     ) # UMINUS
\&   ) # UMINUS
\& ) # EXPRESSION_LIST
.Ve
.PP
\&\f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined by strings like
\&\f(CW\*(Aq=\*(Aq\fR, \f(CW\*(Aq\-\*(Aq\fR, \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq/\*(Aq\fR, \f(CW\*(Aq*\*(Aq\fR, \f(CW\*(Aq(\*(Aq\fR and \f(CW\*(Aq)\*(Aq\fR  do not 
appear in the tree.  \f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined
using an identifier, like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR are, by default,  \fIsemantic tokens\fR
and appear in the \s-1AST.\s0
.SS "Changing the Status of a Token"
.IX Subsection "Changing the Status of a Token"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the status of a token.
For example (file \f(CW\*(C`15treewithsyntactictoken.pl\*(C'\fR in the \f(CW\*(C`examples/\*(C'\fR directory), 
given the grammar:
.PP
.Vb 3
\&   %syntactic token b
\&   %semantic token \*(Aqa\*(Aq \*(Aqc\*(Aq
\&   %tree
\&
\&   %%
\&
\&   S: %name ABC
\&        A B C
\&    | %name BC
\&        B C
\&   ;
\&
\&   A: %name A
\&        \*(Aqa\*(Aq
\&   ;
\&
\&   B: %name B
\&        b
\&   ;
\&
\&   C: %name C
\&       \*(Aqc\*(Aq
\&   ;
\&   %%
.Ve
.PP
the tree build for input \f(CW\*(C`abc\*(C'\fR will be 
\&\f(CW\*(C`ABC(A(TERMINAL[a]),B,C(TERMINAL[c]))\*(C'\fR.
.SS "Saving the Information of Syntactic Tokens in their Father"
.IX Subsection "Saving the Information of Syntactic Tokens in their Father"
The reason for the adjective \f(CW%syntactic\fR applied to a token is to 
state that the token influences the shape of the syntax tree
but carries no other information. When the syntax tree is built
the node corresponding to the token is discarded.
.PP
Sometimes the difference between syntactic and semantic 
tokens is blurred. For example the line number associated
with an instance of the syntactic token \f(CW\*(Aq+\*(Aq\fR can be used later
\&\-say during type checking\- to emit a more accurate error
diagnostic. But if the node was discarded the information
about that line number is no longer available.
When building the syntax tree \f(CW\*(C`Parse::Eyapp\*(C'\fR (namely
the method \f(CW\*(C`Parse::Eyapp::YYBuildAST\*(C'\fR) checks 
if the method \f(CW\*(C`TERMINAL::save_attributes\*(C'\fR exists and if so
it will be called when dealing with a \fIsyntactic token\fR. 
The method receives as argument \- additionally
to the reference to the attribute of the token as it
is returned by the lexical analyzer \- a reference
to the node associated with the left hand side of the
production. Here is an example (file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR)
of use:
.PP
.Vb 5
\&              sub TERMINAL::save_attributes {
\&                # $_[0] is a syntactic terminal
\&                # $_[1] is the father.
\&                push @{$_[1]\->{lines}}, $_[0]\->[1]; # save the line number
\&              }
.Ve
.ie n .SS "The  ""bypass"" clause and the ""%no bypass"" directive"
.el .SS "The  \f(CWbypass\fP clause and the \f(CW%no bypass\fP directive"
.IX Subsection "The bypass clause and the %no bypass directive"
The shape of the tree can be also modified using some \f(CW%tree\fR clauses
as \f(CW\*(C`%tree bypass\*(C'\fR which will produce an automatic \fIbypass\fR of any
node with only one child at tree-construction-time.
.PP
A \fIbypass operation\fR consists in \fIreturning the only child 
of the node being visited to the father of the node and re-typing (re-blessing)
the node in the name of the production\fR (if a name was provided).
.PP
A node may have only one child at tree-construction-time for one of
two reasons.
.IP "\(bu" 4
The first occurs when the right hand side of the production
was already unary like in:
.Sp
.Vb 2
\&                           exp:
\&                               %name NUM  NUM
.Ve
.Sp
Here \- if the \f(CW\*(C`bypass\*(C'\fR clause is used \- 
the \f(CW\*(C`NUM\*(C'\fR node will be bypassed and the child \f(CW\*(C`TERMINAL\*(C'\fR built
from the information provided by the lexical analyzer will be renamed/reblessed 
as \f(CW\*(C`NUM\*(C'\fR.
.IP "\(bu" 4
Another reason for a node to be \fIbypassed\fR is  the fact that though the right
hand side of the production may have more than one symbol, 
only one of them is not a syntactic token
like in:
.Sp
.Vb 1
\&                           exp: \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
A consequence of the global scope application of \f(CW\*(C`%tree bypass\*(C'\fR
is that undesired bypasses may occur like in
.PP
.Vb 2
\&                           exp : %name UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
though the right hand side has two symbols, token \f(CW\*(Aq\-\*(Aq\fR is
a syntactic token and therefore only \f(CW\*(C`exp\*(C'\fR is left. The \fIbypass\fR
operation will be applied when building this node.
This \fIbypass\fR can be avoided applying the \f(CW\*(C`no bypass ID\*(C'\fR directive to the corresponding 
production:
.PP
.Vb 2
\&                           exp : %no bypass UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
The following example (file \f(CW\*(C`examples/bypass.pl\*(C'\fR) 
is the equivalent of the Parse::Eyapp \s-1SYNOPSIS\s0 example
but using the \f(CW\*(C`bypass\*(C'\fR clause instead:
.PP
.Vb 2
\& use Parse::Eyapp;
\& use Parse::Eyapp::Treeregexp;
\&
\& sub TERMINAL::info { $_[0]{attr} }
\& { no warnings; *VAR::info = *NUM::info = \e&TERMINAL::info; }
\&
\& my $grammar = q{
\&   %right  \*(Aq=\*(Aq     # Lowest precedence
\&   %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq 
\&   %left   \*(Aq*\*(Aq \*(Aq/\*(Aq 
\&   %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&   %tree bypass    # Let us build an abstract syntax tree ...
\&
\&   %%
\&   line: exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>  { $_[1] } 
\&   ;
\&
\&   exp:
\&       %name NUM  NUM            | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&     | %name PLUS exp \*(Aq+\*(Aq exp    | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&     | %name DIV     exp \*(Aq/\*(Aq exp
\&     | %no bypass UMINUS
\&       \*(Aq\-\*(Aq $exp %prec NEG
\&     |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&   ;
\&
\&   %%
\&   # sub _Error, _Lexer and Run like in the synopsis example
\&   # ...
\& }; # end grammar
\&
\& our (@all, $uminus);
\&
\& Parse::Eyapp\->new_grammar( # Create the parser package/class
\&   input=>$grammar,
\&   classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&   firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\& );
\& my $parser = Calc\->new();                # Create a parser
\& $parser\->YYData\->{INPUT} = "a=2*\-3+b*0\en"; # Set the input
\& my $t = $parser\->Run;                    # Parse it!
\&
\& print "\en************\en".$t\->str."\en************\en";
\&
\& # Let us transform the tree. Define the tree\-regular expressions ..
\& my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&   { #  Example of support code
\&     my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&   }
\&   constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM, NUM)
\&     => {
\&       my $op = $Op{ref($_[0])};
\&       $NUM[0]\->{attr} = eval  "$NUM[0]\->{attr} $op $NUM[1]\->{attr}";
\&       $_[0] = $NUM[0];
\&     }
\&   zero_times_whatever: TIMES(NUM, .) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   whatever_times_zero: TIMES(., NUM) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   uminus: UMINUS(NUM) => { $NUM\->{attr} = \-$NUM\->{attr}; $_[0] = $NUM }
\&   },
\&   OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& );
\& $p\->generate(); # Create the tranformations
\&
\& $t\->s(@all);    # constant folding and mult. by zero
\&
\& print $t\->str,"\en";
.Ve
.PP
when running this example with input \f(CW"a=2*\-3+b*0\en"\fR
we obtain the following output:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> bypass.pl
\&
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],PLUS(TIMES(NUM[2],UMINUS(NUM[3])),TIMES(VAR[b],NUM[0]))))
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],NUM[\-6]))
.Ve
.PP
As you can see the trees are more compact when using the \f(CW\*(C`bypass\*(C'\fR directive.
.ie n .SS "The ""alias"" clause of the %tree directive"
.el .SS "The \f(CWalias\fP clause of the \f(CW%tree\fP directive"
.IX Subsection "The alias clause of the %tree directive"
Access to children in Parse::Eyapp is made through the \f(CW\*(C`child\*(C'\fR and \f(CW\*(C`children\*(C'\fR
methods.
There are occasions however where access by name to the children may be preferable.
The use of the \f(CW\*(C`alias\*(C'\fR clause with the \f(CW%tree\fR directive creates accessors
to the children with names specified by the programmer. The \fIdot and dollar notations\fR
are used for this. When dealing with a production like:
.PP
.Vb 3
\&                       A: 
\&                          %name A_Node
\&                          Node B.bum N.pum $Chip
.Ve
.PP
methods \f(CW\*(C`bum\*(C'\fR, \f(CW\*(C`pum\*(C'\fR and \f(CW\*(C`Chip\*(C'\fR will be created for the class \f(CW\*(C`A_Node\*(C'\fR.
Those methods will provide access to the respective child (first, second and third in
the example). The methods are build at compile-time and therefore later 
transformations of the \s-1AST\s0 modifying the order of the children may 
invalidate the use of these getter-setters.
.PP
The \f(CW%prefix\fR directive used in line 7 of the following example
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix: \f(CW\*(C`R::S::\*(C'\fR in this example.
.PP
.Vb 10
\& cat \-n alias_and_yyprefix.pl
\&     1  #!/usr/local/bin/perl
\&     2  use warnings;
\&     3  use strict;
\&     4  use Parse::Eyapp;
\&     5
\&     6  my $grammar = q{
\&     7    %prefix R::S::
\&     8
\&     9    %right  \*(Aq=\*(Aq
\&    10    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    11    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    12    %left   NEG
\&    13    %tree bypass alias
\&    14
\&    15    %%
\&    16    line: $exp  { $_[1] }
\&    17    ;
\&    18
\&    19    exp:
\&    20        %name NUM
\&    21              $NUM
\&    22      | %name VAR
\&    23              $VAR
\&    24      | %name ASSIGN
\&    25              $VAR \*(Aq=\*(Aq $exp
\&    26      | %name PLUS
\&    27              exp.left \*(Aq+\*(Aq exp.right
\&    28      | %name MINUS
\&    29              exp.left \*(Aq\-\*(Aq exp.right
\&    30      | %name TIMES
\&    31              exp.left \*(Aq*\*(Aq exp.right
\&    32      | %name DIV
\&    33              exp.left \*(Aq/\*(Aq exp.right
\&    34      | %no bypass UMINUS
\&    35              \*(Aq\-\*(Aq $exp %prec NEG
\&    36      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    37    ;
\&    38
\&    39    %%
\&    ..    ....
\&    76  }; # end grammar
\&    77
\&    78
\&    79  Parse::Eyapp\->new_grammar(
\&    80    input=>$grammar,
\&    81    classname=>\*(AqAlias\*(Aq,
\&    82    firstline =>7,
\&    83    outputfile => \*(Aqmain\*(Aq,
\&    84  );
\&    85  my $parser = Alias\->new();
\&    86  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    87  my $t = $parser\->Run;
\&    88  $Parse::Eyapp::Node::INDENT=0;
\&    89  print $t\->VAR\->str."\en";             # a
\&    90  print "***************\en";
\&    91  print $t\->exp\->exp\->left\->str."\en";  # 2*3+5
\&    92  print "***************\en";
\&    93  print $t\->exp\->exp\->right\->str."\en"; # 1
.Ve
.PP
The tree \f(CW$t\fR for the expression \f(CW"a = \-(2*3+5\-1)\en"\fR is:
.PP
.Vb 9
\&  R::S::ASSIGN(
\&     R::S::TERMINAL,
\&     R::S::UMINUS(
\&       R::S::MINUS(
\&         R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM),
\&         R::S::NUM
\&       )
\&     )
\&  )
.Ve
.PP
The \f(CW\*(C`R::S::ASSIGN\*(C'\fR class has methods \f(CW\*(C`VAR\*(C'\fR (see line 89 above)
and \f(CW\*(C`exp\*(C'\fR (see lines 91 and 93) to refer to its two children. 
The result of the execution is:
.PP
.Vb 6
\&  $ alias_and_yyprefix.pl
\&  R::S::TERMINAL
\&  ***************
\&  R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM)
\&  ***************
\&  R::S::NUM
.Ve
.PP
As a second example of the use of \f(CW%alias\fR, the \s-1CPAN\s0 module Language::AttributeGrammar provides
\&\s-1AST\s0 decorators from an attribute grammar specification of the \s-1AST.\s0
To work  Language::AttributeGrammar requires named access to the children
of the \s-1AST\s0 nodes. Follows an example (file \f(CW\*(C`examples/CalcwithAttributeGrammar.pl\*(C'\fR)
of a small calculator:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n CalcwithAttributeGrammar.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Data::Dumper;
\&     5  use Language::AttributeGrammar;
\&     6
\&     7  my $grammar = q{
\&     8  %{
\&     9  # use Data::Dumper;
\&    10  %}
\&    11  %right  \*(Aq=\*(Aq
\&    12  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    13  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    14  %left   NEG
\&    15  %tree bypass alias
\&    16
\&    17  %%
\&    18  line: $exp  { $_[1] }
\&    19  ;
\&    20
\&    21  exp:
\&    22      %name NUM
\&    23            $NUM
\&    24          | %name VAR
\&    25            $VAR
\&    26          | %name ASSIGN
\&    27            $VAR \*(Aq=\*(Aq $exp
\&    28          | %name PLUS
\&    29            exp.left \*(Aq+\*(Aq exp.right
\&    30          | %name MINUS
\&    31            exp.left \*(Aq\-\*(Aq exp.right
\&    32          | %name TIMES
\&    33            exp.left \*(Aq*\*(Aq exp.right
\&    34          | %name DIV
\&    35            exp.left \*(Aq/\*(Aq exp.right
\&    36          | %no bypass UMINUS
\&    37            \*(Aq\-\*(Aq $exp %prec NEG
\&    38    |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    39  ;
\&    40
\&    41  %%
\&    42
\&    43  sub _Error {
\&    44          exists $_[0]\->YYData\->{ERRMSG}
\&    45      and do {
\&    46          print $_[0]\->YYData\->{ERRMSG};
\&    47          delete $_[0]\->YYData\->{ERRMSG};
\&    48          return;
\&    49      };
\&    50      print "Syntax error.\en";
\&    51  }
\&    52
\&    53  sub _Lexer {
\&    54      my($parser)=shift;
\&    55
\&    56          $parser\->YYData\->{INPUT}
\&    57      or  $parser\->YYData\->{INPUT} = <STDIN>
\&    58      or  return(\*(Aq\*(Aq,undef);
\&    59
\&    60      $parser\->YYData\->{INPUT}=~s/^\es+//;
\&    61
\&    62      for ($parser\->YYData\->{INPUT}) {
\&    63          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&    64                  and return(\*(AqNUM\*(Aq,$1);
\&    65          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&    66                  and return(\*(AqVAR\*(Aq,$1);
\&    67          s/^(.)//s
\&    68                  and return($1,$1);
\&    69      }
\&    70  }
\&    71
\&    72  sub Run {
\&    73      my($self)=shift;
\&    74      $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    75                      #yydebug =>0xFF
\&    76                    );
\&    77  }
\&    78  }; # end grammar
\&    79
\&    80
\&    81  $Data::Dumper::Indent = 1;
\&    82  Parse::Eyapp\->new_grammar(
\&    83    input=>$grammar,
\&    84    classname=>\*(AqRule6\*(Aq,
\&    85    firstline =>7,
\&    86    outputfile => \*(AqCalc.pm\*(Aq,
\&    87  );
\&    88  my $parser = Rule6\->new();
\&    89  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    90  my $t = $parser\->Run;
\&    91  print "\en***** Before ******\en";
\&    92  print Dumper($t);
\&    93
\&    94  my $attgram = new Language::AttributeGrammar <<\*(AqEOG\*(Aq;
\&    95
\&    96  # Compute the expression
\&    97  NUM:    $/.val = { $<attr> }
\&    98  TIMES:  $/.val = { $<left>.val * $<right>.val }
\&    99  PLUS:   $/.val = { $<left>.val + $<right>.val }
\&   100  MINUS:  $/.val = { $<left>.val \- $<right>.val }
\&   101  UMINUS: $/.val = { \-$<exp>.val }
\&   102  ASSIGN: $/.val = { $<exp>.val }
\&   103  EOG
\&   104
\&   105  my $res = $attgram\->apply($t, \*(Aqval\*(Aq);
\&   106
\&   107  $Data::Dumper::Indent = 1;
\&   108  print "\en***** After ******\en";
\&   109  print Dumper($t);
\&   110  print Dumper($res);
\&
\& CalcwithAttributeGrammar.pl
.Ve
.PP
The program computes the tree for expression for expression
\&\f(CW\*(C`a = \-(2*3+5\-1)\*(C'\fR which is:
.PP
.Vb 1
\&  ASSIGN(TERMINAL,UMINUS(MINUS(PLUS(TIMES(NUM,NUM),NUM),NUM)))
.Ve
.PP
The children of the binary nodes can be accessed through the \f(CW\*(C`left\*(C'\fR
and \f(CW\*(C`right\*(C'\fR methods.
.SS "About the Encapsulation of Nodes"
.IX Subsection "About the Encapsulation of Nodes"
There is no encapsulation of nodes. The user/client 
knows that they are hashes that can be decorated with new keys/attributes.
All nodes in the \s-1AST\s0 created by \f(CW%tree\fR are \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
The only reserved field is \f(CW\*(C`children\*(C'\fR which is a reference to the
array of children. You can always create a \f(CW\*(C`Node\*(C'\fR class 
\&\fIby hand\fR by inheriting from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
.SH "SOLVING CONFLICTS WITH THE \fIPOSTPONED CONFLICT\fP STRATEGY"
.IX Header "SOLVING CONFLICTS WITH THE POSTPONED CONFLICT STRATEGY"
Yacc-like parser generators provide ways to solve shift-reduce mechanims
based on token precedence. No mechanisms are provided for the resolution
of reduce-reduce conflicts. The solution for such kind of conflicts is to modify
the grammar. The strategy We present here provides a way to broach conflicts
that can't be solved using static precedences.
.SS "The \fIPostponed Conflict Resolution\fP Strategy"
.IX Subsection "The Postponed Conflict Resolution Strategy"
The \fIpostponed conflict strategy\fR presented here can be used whenever there 
is a shift-reduce or reduce-reduce conflict that can not be solved using static 
precedences.
.SS "\fIPostponed Conflict Resolution\fP: Reduce-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Reduce-Reduce Conflicts"
Let us assume we have a reduce-reduce conflict between to productions
.PP
.Vb 2
\&                      A \-> alpha .
\&                      B \-> beta .
.Ve
.PP
for some token \f(CW\*(C`@\*(C'\fR. Let also assume that production
.PP
.Vb 1
\&                      A \-> alpha
.Ve
.PP
has name \f(CW\*(C`ruleA\*(C'\fR and production
.PP
.Vb 1
\&                      B \-> beta
.Ve
.PP
has name \f(CW\*(C`ruleB\*(C'\fR.
.PP
The postponed conflict resolution strategy consists
in modifying the conflictive grammar by marking the points where the  conflict occurs
with the new \f(CW%PREC\fR directive. In this case at then end of the involved productions:
.PP
.Vb 2
\&                      A \-> alpha %PREC IsAorB 
\&                      B \-> beta  $PREC IsAorB
.Ve
.PP
The \f(CW\*(C`IsAorB\*(C'\fR identifier is called the \fIconflict name\fR.
.PP
Inside the head section, the programmer associates with the 
conflict name a code
whose mission is to solve the conflict by dynamically changing the
parsing table like this:
.PP
.Vb 2
\&                     %conflict IsAorB {
\&                          my $self = shift;
\&
\&                          if (looks_like_A($self)) {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleA\*(Aq );
\&                          }
\&                          else {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleB\*(Aq );
\&                          }
\&                       }
.Ve
.PP
The code associated with the \fIconflict name\fR
receives the name of \fI conflict handler\fR.
The code of \f(CW\*(C`looks_like_A\*(C'\fR stands for some form of nested parsing
which will decide which production applies.
.SS "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
.IX Subsection "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
In file \f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR we apply the postponed conflict resolution strategy
to the reduce reduce conflict that arises in Extended Pascal between the declaration of ranges and
the declaration of enumerated types (see section \*(L"Reduce-Reduce conflict: Enumerated versus Range declarations in Extended Pascal\*(R").
Here is the solution:
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ cat \-n pascalenumeratedvsrangesolvedviadyn.eyp
\&     1  %{
\&     2  =head1 SYNOPSIS
\&     3  
\&     4  See 
\&     5  
\&     6  =over 2
\&     7  
\&     8  =item * File pascalenumeratedvsrange.eyp in examples/debuggintut/
\&     9  
\&    10  =item * The Bison manual L<http://www.gnu.org/software/bison/manual/html_mono/bison.html>
\&    11  
\&    12  =back
\&    13  
\&    14  Compile it with:
\&    15  
\&    16              eyapp \-b \*(Aq\*(Aq pascalenumeratedvsrangesolvedviadyn.eyp
\&    17  
\&    18  run it with this options:
\&    19  
\&    20              ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&    21  
\&    22  Try these inputs:
\&    23  
\&    24                  type r = (x) ..  y ;
\&    25                  type r = (x+2)*3 ..  y/2 ;
\&    26                  type e = (x, y, z);
\&    27                  type e = (x);
\&    28  
\&    29  =cut
\&    30  
\&    31  use base q{DebugTail}; 
\&    32  
\&    33  my $ID = qr{[A\-Za\-z][A\-Za\-z0\-9_]*};
\&    34               # Identifiers separated by commas
\&    35  my $IDLIST = qr{ \es*(?:\es*,\es* $ID)* \es* }x;
\&    36               # list followed by a closing par and a semicolon 
\&    37  my $RESTOFLIST = qr{$IDLIST \e) \es* ; }x;
\&    38  %}
\&    39  
\&    40  %namingscheme {
\&    41    #Receives a Parse::Eyapp object describing the grammar
\&    42    my $self = shift;
\&    43  
\&    44    $self\->tokennames(
\&    45      \*(Aq(\*(Aq => \*(AqLP\*(Aq,
\&    46      \*(Aq..\*(Aq => \*(AqDOTDOT\*(Aq,
\&    47      \*(Aq,\*(Aq => \*(AqCOMMA\*(Aq,
\&    48      \*(Aq)\*(Aq => \*(AqRP\*(Aq,
\&    49      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    50      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    51      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    52      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    53    );
\&    54  
\&    55    # returns the handler that will give names
\&    56    # to the right hand sides
\&    57    \e&give_rhs_name;
\&    58  }
\&    59  
\&    60  %strict
\&    61  
\&    62  %token ID NUM DOTDOT TYPE
\&    63  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    64  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    65  
\&    66  %tree
\&    67  
\&    68  %%
\&    69  
\&    70  type_decl : TYPE ID \*(Aq=\*(Aq type \*(Aq;\*(Aq
\&    71  ;
\&    72  
\&    73  type : 
\&    74        %name ENUM
\&    75        \*(Aq(\*(Aq id_list \*(Aq)\*(Aq
\&    76      | %name RANGE
\&    77        expr DOTDOT expr
\&    78  ;
\&    79  
\&    80  id_list : 
\&    81        %name EnumID
\&    82        ID rangeORenum
\&    83      | id_list \*(Aq,\*(Aq ID
\&    84  ;
\&    85  
\&    86  expr : \*(Aq(\*(Aq expr \*(Aq)\*(Aq
\&    87      | expr \*(Aq+\*(Aq expr
\&    88      | expr \*(Aq\-\*(Aq expr
\&    89      | expr \*(Aq*\*(Aq expr
\&    90      | expr \*(Aq/\*(Aq expr
\&    91      | %name RangeID
\&    92        ID rangeORenum
\&    93      | NUM
\&    94  ;
\&    95  
\&    96  rangeORenum: /* empty: postponed conflict resolution */
\&    97        {
\&    98            my $parser = shift;
\&    99            if (${$parser\->input()} =~ m{\eG(?= $RESTOFLIST)}gcx) {
\&   100                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqEnumID\*(Aq );
\&   101              }
\&   102              else {
\&   103                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqRangeID\*(Aq );
\&   104              }
\&   105        }
\&   106  ;
\&   107  
\&   108  %%
\&   109  
\&   110  _\|_PACKAGE_\|_\->lexer(
\&   111    sub {
\&   112      my $parser = shift;
\&   113  
\&   114      for (${$parser\->input()}) {    # contextualize
\&   115        m{\eG(\es*)}gc;
\&   116        $parser\->tokenline($1 =~ tr{\en}{});
\&   117  
\&   118        m{\eGtype\eb}gic                 and return (\*(AqTYPE\*(Aq, \*(AqTYPE\*(Aq);
\&   119  
\&   120        m{\eG($ID)}gc                   and return (\*(AqID\*(Aq,  $1);
\&   121  
\&   122        m{\eG([0\-9]+)}gc                and return (\*(AqNUM\*(Aq, $1);
\&   123  
\&   124        m{\eG\e.\e.}gc                    and return (\*(AqDOTDOT\*(Aq,  \*(Aq..\*(Aq);
\&   125  
\&   126        m{\eG(.)}gc                     and return ($1,    $1);
\&   127  
\&   128        return(\*(Aq\*(Aq,undef);
\&   129      }
\&   130    }
\&   131  );
\&   132  
\&   133  unless (caller()) {
\&   134    $Parse::Eyapp::Node::INDENT = 1;
\&   135    my $prompt = << \*(AqEOP\*(Aq;
\&   136  Try this input:
\&   137      type 
\&   138      r
\&   139      =
\&   140      (x)
\&   141      ..
\&   142      y
\&   143      ;
\&   144  
\&   145  Here other inputs you can try:
\&   146  
\&   147      type r = (x+2)*3 ..  y/2 ;
\&   148      type e = (x, y, z);
\&   149      type e = (x);
\&   150  
\&   151  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&   152  EOP
\&   153    _\|_PACKAGE_\|_\->main($prompt); 
\&   154  }
.Ve
.PP
This example also illustrates how to modify the default production
naming schema. Follows the result of several executions:
.PP
.Vb 9
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type r = (x+2)*3 ..  y/2 ;
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[r],
\&    RANGE(
\&      expr_is_expr_TIMES_expr(
\&        expr_is_LP_expr_RP(
\&          expr_is_expr_PLUS_expr(
\&            RangeID(
\&              TERMINAL[x]
\&            ),
\&            expr_is_NUM(
\&              TERMINAL[2]
\&            )
\&          )
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[3]
\&        )
\&      ),
\&      TERMINAL[..],
\&      expr_is_expr_DIV_expr(
\&        RangeID(
\&          TERMINAL[y]
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[2]
\&        )
\&      )
\&    )
\&  )
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type e = (x);
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[e],
\&    ENUM(
\&      EnumID(
\&        TERMINAL[x]
\&      )
\&    )
\&  )
.Ve
.SS "\fIPostponed Conflict Resolution\fP: Shift-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Shift-Reduce Conflicts"
The program in \f(CW\*(C`examples/debuggingtut/DynamicallyChangingTheParser2.eyp\*(C'\fR illustrates how the postponed
conflict strategy is used for shift-reduce conflicts.
This is an extension of the grammar in \f(CW\*(C`examples/debuggingtut/Debug.eyp\*(C'\fR.
The generated language is constituted by sequences like:
.PP
.Vb 1
\&    { D; D; S; S; S; } {D; S} { S }
.Ve
.PP
As you remember the conflict was:
.PP
.Vb 2
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq/^St.*13:/,/^St.*14/p\*(Aq DynamicallyChangingTheParser.output  
\&  State 13:
\&
\&      ds \-> D conflict . \*(Aq;\*(Aq ds   (Rule 6)
\&      ds \-> D conflict .  (Rule 7)
\&
\&      \*(Aq;\*(Aq shift, and go to state 16
\&
\&      \*(Aq;\*(Aq [reduce using rule 7 (ds)]
\&
\&  State 14:
.Ve
.PP
The \f(CW\*(C`conflict\*(C'\fR handler below sets the \s-1LR\s0 action
to reduce by the production with name \f(CW\*(C`D1\*(C'\fR
.PP
.Vb 1
\&                 ds \-> D
.Ve
.PP
in the presence of token \f(CW\*(Aq;\*(Aq\fR if indeed is the last \f(CW\*(AqD\*(Aq\fR, that is, if:
.PP
.Vb 1
\&       ${$self\->input()} =~ m{^\es*;\es*S}
.Ve
.PP
Otherwise we set the \f(CW\*(C`shift\*(C'\fR action via a call to the 
\&\f(CW\*(C`YYSetShift\*(C'\fR method.
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq30,$p\*(Aq DynamicallyChangingTheParser.eyp | cat \-n
\&     1  %token D S
\&     2  
\&     3  %tree bypass
\&     4  
\&     5  # Expect just 1 shift\-reduce conflict
\&     6  %expect 1 
\&     7  
\&     8  %%
\&     9  p: %name PROG
\&    10      block +
\&    11  ;
\&    12  
\&    13  block:
\&    14      %name BLOCK_DS
\&    15      \*(Aq{\*(Aq ds \*(Aq;\*(Aq ss \*(Aq}\*(Aq 
\&    16    | %name BLOCK_S
\&    17      \*(Aq{\*(Aq ss \*(Aq}\*(Aq
\&    18  ;
\&    19  
\&    20  ds:
\&    21      %name D2
\&    22      D conflict \*(Aq;\*(Aq ds    
\&    23    | %name D1
\&    24      D conflict        
\&    25  ;
\&    26  
\&    27  ss:
\&    28      %name S2
\&    29      S \*(Aq;\*(Aq ss      
\&    30    | %name S1
\&    31      S       
\&    32  ;
\&    33  
\&    34  conflict:
\&    35        /* empty. This action solves the conflict using dynamic precedence */
\&    36        {
\&    37          my $self = shift;
\&    38  
\&    39          if (${$self\->input()} =~ m{^\es*;\es*S}) {
\&    40            $self\->YYSetReduce(\*(Aq;\*(Aq, \*(AqD1\*(Aq )
\&    41          }
\&    42          else {
\&    43            $self\->YYSetShift(\*(Aq;\*(Aq)
\&    44          }
\&    45  
\&    46          undef; # skip this node in the AST
\&    47        }
\&    48  ;
\&    49  
\&    50  %%
\&    51  
\&    52  my $prompt = \*(AqProvide a statement like "{D; S} {D; D; S}" and press <CR><CTRL\-D>: \*(Aq;
\&    53  _\|_PACKAGE_\|_\->main($prompt) unless caller;
.Ve
.SH "NAMING SCHEMES"
.IX Header "NAMING SCHEMES"
Explicit names can be given to grammar productions
via the \f(CW%name\fR directive. An alternative to explicitly gave 
names to rules is to define a \fInaming scheme\fR via the Eyapp directive
\&\f(CW%namingscheme\fR. This can be helpful when you inherit a large grammar
and want to quickly build a parser. The \s-1ANSI C\s0 parser in 
\&\f(CW\*(C`examples/languages/C/ansic.eyp\*(C'\fR is a good example. Another
example is the Pascal parser in \f(CW\*(C`examples/languages/pascal/pascal.eyp\*(C'\fR.
.PP
The Eyapp directive \f(CW%namingscheme\fR is followed by some Perl code. Such Perl
code must return a reference to a subroutine that will be called each time a new
production right hand side is parsed. The subroutine returns the name for the production.
.PP
The Perl code defining the handler receives a \f(CW\*(C`Parse::Eyapp\*(C'\fR object
that describes the grammar. The code after the \f(CW%namingscheme\fR
directive is evaluated during the early phases of the compilation of the input 
grammar. As an example of how to set a naming scheme, 
see lines 22\-38 below (you can find this example and others in the directory
\&\f(CW\*(C`examples/naming\*(C'\fR of the accompanying distribution):
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ cat \-n GiveNamesToCalc.eyp
\&     1  # GiveNamesToCalc.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6  %right  \*(Aq^\*(Aq
\&     7
\&     8  %tree bypass
\&     9
\&    10  %{
\&    11  use base q{Tail};
\&    12
\&    13  sub exp_is_NUM::info {
\&    14    my $self = shift;
\&    15
\&    16    $self\->{attr}[0];
\&    17  }
\&    18
\&    19  *exp_is_VAR::info = *var_is_VAR::info = \e&exp_is_NUM::info;
\&    20  %}
\&    21
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
\&    39  %%
\&    40
\&    41  line:
\&    42      exp
\&    43  ;
\&    44
\&    45  exp:
\&    46      NUM
\&    47    | VAR
\&    48    | var \*(Aq=\*(Aq exp
\&    49    | exp \*(Aq+\*(Aq exp
\&    50    | exp \*(Aq\-\*(Aq exp
\&    51    | exp \*(Aq*\*(Aq exp
\&    52    | exp \*(Aq/\*(Aq exp
\&    53    | %no bypass exp_is_NEG
\&    54       \*(Aq\-\*(Aq exp %prec NEG
\&    55    | exp \*(Aq^\*(Aq exp
\&    56    | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    57  ;
\&    58
\&    59  var:
\&    60      VAR
\&    61  ;
\&    62  %%
\&    63
\&    64  unless (caller) {
\&    65    my $t = _\|_PACKAGE_\|_\->main(@ARGV);
\&    66    print $t\->str."\en";
\&    67  }
.Ve
.PP
The example uses a naming scheme that is provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR: \f(CW\*(C`Parse::Eyapp::Grammar::give_token_name\*(C'\fR.
The current provided naming schemes handlers are:
.IP "\(bu" 2
\&\f(CW\*(C`give_default_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule
concatenated with an underscore and the index of the production
.IP "\(bu" 2
\&\f(CW\*(C`give_lhs_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule (this
is the naming scheme used by the \f(CW%tree\fR directive when no explicit name was given)
.IP "\(bu" 2
\&\f(CW\*(C`give_token_name\*(C'\fR: The name of the production is the Left Hand Side of the Production Rule followed by the 
word \f(CW\*(C`_is_\*(C'\fR followed by the concatenation of the names of the tokens in the right and side (separated by underscores).
.PP
All of these handlers are implemented inside the class \f(CW\*(C`Parse::Eyapp::Grammar\*(C'\fR. There is no need at line 
37 to explicit the class name prefix since the naming scheme code is evaluated inside such class:
.PP
.Vb 10
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
.Ve
.PP
As it is illustrated in this example, the method \f(CW\*(C`tokennames\*(C'\fR of \f(CW\*(C`Parse::Eyapp\*(C'\fR
objects provide a way to give identifier names to tokens that are defined by strings.
When we execute the former module/program (modulino) with input \f(CW\*(C`a=2*\-3\*(C'\fR we got the following
output:
.PP
.Vb 5
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ eyapp \-b \*(Aq\*(Aq GiveNamesToCalc.eyp
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ ./GiveNamesToCalc.pm
\&  Expressions. Press CTRL\-D (Unix) or CTRL\-Z (Windows) to finish:
\&  a=2*\-3
\&  line_is_exp(var_is_VAR[a],exp_is_TIMES(exp_is_NUM[2],exp_is_NEG(exp_is_NUM[3])))
.Ve
.PP
For each production rule the handler is called with arguments:
.IP "\(bu" 2
the \f(CW\*(C`Parse::Eyapp\*(C'\fR object,
.IP "\(bu" 2
the production index (inside the grammar),
.IP "\(bu" 2
the left hand side
symbol and a reference to a list with the symbols in the right hand side.
.PP
The following code of some version of \f(CW\*(C`give_token_name\*(C'\fR exemplifies how a
naming scheme handler can be written:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp$ sed \-ne \*(Aq101,132p\*(Aq lib/Parse/Eyapp/Grammar.pm | cat \-n
\&     1  sub give_token_name {
\&     2    my ($self, $index, $lhs, $rhs) = @_;
\&     3
\&     4    my @rhs = @$rhs;
\&     5    $rhs = \*(Aq\*(Aq;
\&     6
\&     7    unless (@rhs) { # Empty RHS
\&     8      return $lhs.\*(Aq_is_empty\*(Aq;
\&     9    }
\&    10
\&    11    my $names = $self\->{GRAMMAR}{TOKENNAMES} || {};
\&    12    for (@rhs) {
\&    13      if ($self\->is_token($_)) {
\&    14        s/^\*(Aq(.*)\*(Aq$/$1/;
\&    15        my $name = $names\->{$_} || \*(Aq\*(Aq;
\&    16        unless ($name) {
\&    17          $name = $_ if /^\ew+$/;
\&    18        }
\&    19        $rhs .= "_$name" if $name;
\&    20      }
\&    21    }
\&    22
\&    23    unless ($rhs) { # no \*(Aqword\*(Aq tokens in the RHS
\&    24      for (@rhs) {
\&    25        $rhs .= "_$_" if /^\ew+$/;
\&    26      }
\&    27    }
\&    28
\&    29    # check if another production with such name exists?
\&    30    my $name = $lhs.\*(Aq_is\*(Aq.$rhs;
\&    31    return $name;
\&    32  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at <http://code.google.com/p/parse\-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
<http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 2529:" 4
.IX Item "Around line 2529:"
Non-ASCII character seen before =encoding in 'va\*'lida\en";'. Assuming \s-1ISO8859\-1\s0
