.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Manual::AllTypes 3"
.TH Type::Tiny::Manual::AllTypes 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Tiny::Manual::AllTypes \- alphabetical list of all type constraints bundled with Type::Tiny
.SH "MANUAL"
.IX Header "MANUAL"
The following is a list of type constraints bundled with Type::Tiny,
with very brief descriptions. For more information, see the type
library's documentation, and the test cases in \f(CW\*(C`t/21\-types/\*(C'\fR.
.PP
GitHib link:
<https://github.com/tobyink/p5\-type\-tiny/tree/master/t/21\-types>.
.IP "\(bu" 4
\&\fBAny\fR in Types::Standard
.Sp
Anything. Absolutely anything.
.IP "\(bu" 4
\&\fBArrayLike\fR \fI[parameterizable]\fR in Types::TypeTiny
.Sp
Arrayrefs and objects overloading arrayfication.
.IP "\(bu" 4
\&\fBArrayRef\fR \fI[parameterizable]\fR in Types::Standard
.Sp
Arrayrefs.
.IP "\(bu" 4
\&\fBBool\fR \fI[has coercion]\fR in Types::Standard
.Sp
Booleans; the numbers or strings \*(L"0\*(R" and \*(L"1\*(R", the empty string, or undef.
.IP "\(bu" 4
\&\fBClassName\fR in Types::Standard
.Sp
Any loaded package name.
.IP "\(bu" 4
\&\fBCodeLike\fR in Types::TypeTiny
.Sp
Coderefs and objects overloading coderefification.
.IP "\(bu" 4
\&\fBCodeRef\fR in Types::Standard
.Sp
Coderefs.
.IP "\(bu" 4
\&\fBConsumerOf\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An object that \s-1DOES\s0 a particular role.
.IP "\(bu" 4
\&\fBCycleTuple\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An arrayref with a repeating pattern of constraints on its values.
.IP "\(bu" 4
\&\fBDefined\fR in Types::Standard
.Sp
Any value other than undef.
.IP "\(bu" 4
\&\fBDict\fR \fI[parameterizable]\fR in Types::Standard
.Sp
A hashref with constraints on each of its values.
.IP "\(bu" 4
\&\fBEnum\fR \fI[parameterizable]\fR in Types::Standard
.Sp
A string from an allowed set of strings.
.IP "\(bu" 4
\&\fB_ForeignTypeConstraint\fR in Types::TypeTiny
.Sp
A coderef or an object which Type::Tiny knows how to convert into a Type::Tiny instance. (Yes, the name of this type starts with an underscore.)
.IP "\(bu" 4
\&\fBFileHandle\fR in Types::Standard
.Sp
A reference where Scalar::Util::openhandle returns true, or a blessed object in the IO::Handle class.
.IP "\(bu" 4
\&\fBGlobRef\fR in Types::Standard
.Sp
Globrefs
.IP "\(bu" 4
\&\fBHashLike\fR \fI[parameterizable]\fR in Types::TypeTiny
.Sp
Hashrefs and objects overloading hashrefification.
.IP "\(bu" 4
\&\fBHashRef\fR \fI[parameterizable]\fR in Types::Standard
.Sp
Hashrefs.
.IP "\(bu" 4
\&\fBHasMethods\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An object that can do particular methods.
.IP "\(bu" 4
\&\fBInstanceOf\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An object that isa particular class.
.IP "\(bu" 4
\&\fBInt\fR in Types::Standard
.Sp
A whole number, either positive, negative, or zero.
.IP "\(bu" 4
\&\fBIntRange\fR \fI[parameterizable]\fR in Types::Common::Numeric
.Sp
An integer within a particular numeric range.
.IP "\(bu" 4
\&\fBItem\fR in Types::Standard
.Sp
Any single item; effectively the same as \fBAny\fR.
.IP "\(bu" 4
\&\fBLaxNum\fR in Types::Standard
.Sp
A number; relaxed constraint that allows \*(L"inf\*(R".
.IP "\(bu" 4
\&\fBLowerCaseSimpleStr\fR \fI[has coercion]\fR in Types::Common::String
.Sp
A string less than 256 characters long with no line breaks or uppercase letters.
.IP "\(bu" 4
\&\fBLowerCaseStr\fR \fI[has coercion]\fR in Types::Common::String
.Sp
A string with no uppercase letters.
.IP "\(bu" 4
\&\fBMap\fR \fI[parameterizable]\fR in Types::Standard
.Sp
A hashref with a constraint for the values and keys.
.IP "\(bu" 4
\&\fBMaybe\fR \fI[parameterizable]\fR in Types::Standard
.Sp
When parameterized, the same as its parameter, but also allows undef.
.IP "\(bu" 4
\&\fBNegativeInt\fR in Types::Common::Numeric
.Sp
An integer below 0.
.IP "\(bu" 4
\&\fBNegativeNum\fR in Types::Common::Numeric
.Sp
A number below 0.
.IP "\(bu" 4
\&\fBNegativeOrZeroInt\fR in Types::Common::Numeric
.Sp
An integer below 0, or 0.
.IP "\(bu" 4
\&\fBNegativeOrZeroNum\fR in Types::Common::Numeric
.Sp
A number below 0, or 0.
.IP "\(bu" 4
\&\fBNonEmptySimpleStr\fR in Types::Common::String
.Sp
A string with more than 0 but less than 256 characters with no line breaks.
.IP "\(bu" 4
\&\fBNonEmptyStr\fR in Types::Common::String
.Sp
A string with more than 0 characters.
.IP "\(bu" 4
\&\fBNum\fR in Types::Standard
.Sp
The same as \fBLaxNum\fR or \fBStrictNum\fR depending on environment.
.IP "\(bu" 4
\&\fBNumericCode\fR \fI[has coercion]\fR in Types::Common::String
.Sp
A string containing only digits.
.IP "\(bu" 4
\&\fBNumRange\fR \fI[parameterizable]\fR in Types::Common::Numeric
.Sp
A number within a particular numeric range.
.IP "\(bu" 4
\&\fBObject\fR in Types::Standard
.Sp
A blessed object.
.IP "\(bu" 4
\&\fBOptional\fR \fI[parameterizable]\fR in Types::Standard
.Sp
Used in conjunction with \fBDict\fR, \fBTuple\fR, or \fBCycleTuple\fR.
.IP "\(bu" 4
\&\fBOptList\fR in Types::Standard
.Sp
An arrayref of arrayrefs, where each of the inner arrayrefs are two values, the first value being a string.
.IP "\(bu" 4
\&\fBOverload\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An overloaded object.
.IP "\(bu" 4
\&\fBPassword\fR in Types::Common::String
.Sp
A string at least 4 characters long and less than 256 characters long with no line breaks.
.IP "\(bu" 4
\&\fBPositiveInt\fR in Types::Common::Numeric
.Sp
An integer above 0.
.IP "\(bu" 4
\&\fBPositiveNum\fR in Types::Common::Numeric
.Sp
A number above 0.
.IP "\(bu" 4
\&\fBPositiveOrZeroInt\fR in Types::Common::Numeric
.Sp
An integer above 0, or 0.
.IP "\(bu" 4
\&\fBPositiveOrZeroNum\fR in Types::Common::Numeric
.Sp
An number above 0, or 0.
.IP "\(bu" 4
\&\fBRef\fR \fI[parameterizable]\fR in Types::Standard
.Sp
Any reference.
.IP "\(bu" 4
\&\fBRegexpRef\fR in Types::Standard
.Sp
A regular expression.
.IP "\(bu" 4
\&\fBRoleName\fR in Types::Standard
.Sp
Any loaded package name where there is no `new` method.
.IP "\(bu" 4
\&\fBScalarRef\fR \fI[parameterizable]\fR in Types::Standard
.Sp
Scalarrefs.
.IP "\(bu" 4
\&\fBSimpleStr\fR in Types::Common::String
.Sp
A string with less than 256 characters with no line breaks.
.IP "\(bu" 4
\&\fBSingleDigit\fR in Types::Common::Numeric
.Sp
A single digit number. This includes single digit negative numbers!
.IP "\(bu" 4
\&\fBStr\fR in Types::Standard
.Sp
A string.
.IP "\(bu" 4
\&\fBStrictNum\fR in Types::Standard
.Sp
A number; strict constaint.
.IP "\(bu" 4
\&\fBStringLike\fR in Types::TypeTiny
.Sp
Strings and objects overloading stringification.
.IP "\(bu" 4
\&\fBStrLength\fR \fI[parameterizable]\fR in Types::Common::String
.Sp
A string with length in a particular range.
.IP "\(bu" 4
\&\fBStrMatch\fR \fI[parameterizable]\fR in Types::Standard
.Sp
A string matching a particular regular expression.
.IP "\(bu" 4
\&\fBStrongPassword\fR in Types::Common::String
.Sp
A string at least 4 characters long and less than 256 characters long with no line breaks and at least one non-alphabetic character.
.IP "\(bu" 4
\&\fBTied\fR \fI[parameterizable]\fR in Types::Standard
.Sp
A reference to a tied variable.
.IP "\(bu" 4
\&\fBTuple\fR \fI[parameterizable]\fR in Types::Standard
.Sp
An arrayref with constraints on its values.
.IP "\(bu" 4
\&\fBTypeTiny\fR \fI[has coercion]\fR in Types::TypeTiny
.Sp
Blessed objects in the Type::Tiny class.
.IP "\(bu" 4
\&\fBUndef\fR in Types::Standard
.Sp
undef.
.IP "\(bu" 4
\&\fBUpperCaseSimpleStr\fR \fI[has coercion]\fR in Types::Common::String
.Sp
A string less than 256 characters long with no line breaks or lowercase letters.
.IP "\(bu" 4
\&\fBUpperCaseStr\fR \fI[has coercion]\fR in Types::Common::String
.Sp
A string with no lowercase letters.
.IP "\(bu" 4
\&\fBValue\fR in Types::Standard
.Sp
Any non-reference value, including undef.
.SH "NEXT STEPS"
.IX Header "NEXT STEPS"
Here's your next step:
.IP "\(bu" 4
Type::Tiny::Manual::Policies
.Sp
Policies related to Type::Tiny development.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
