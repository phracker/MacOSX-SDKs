.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::ParseWords 3pm"
.TH Text::ParseWords 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::ParseWords \- parse text into an array of tokens or array of arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Text::ParseWords;
\&  @lists = nested_quotewords($delim, $keep, @lines);
\&  @words = quotewords($delim, $keep, @lines);
\&  @words = shellwords(@lines);
\&  @words = parse_line($delim, $keep, $line);
\&  @words = old_shellwords(@lines); # DEPRECATED!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The &\fInested_quotewords()\fR and &\fIquotewords()\fR functions accept a delimiter 
(which can be a regular expression)
and a list of lines and then breaks those lines up into a list of
words ignoring delimiters that appear inside quotes.  &\fIquotewords()\fR
returns all of the tokens in a single long list, while &\fInested_quotewords()\fR
returns a list of token lists corresponding to the elements of \f(CW@lines\fR.
&\fIparse_line()\fR does tokenizing on a single string.  The &*\fIquotewords()\fR
functions simply call &\fIparse_line()\fR, so if you're only splitting
one line you can call &\fIparse_line()\fR directly and save a function
call.
.PP
The \f(CW$keep\fR argument is a boolean flag.  If true, then the tokens are
split on the specified delimiter, but all other characters (quotes,
backslashes, etc.) are kept in the tokens.  If \f(CW$keep\fR is false then the
&*\fIquotewords()\fR functions remove all quotes and backslashes that are
not themselves backslash-escaped or inside of single quotes (i.e.,
&\fIquotewords()\fR tries to interpret these characters just like the Bourne
shell).  \s-1NB:\s0 these semantics are significantly different from the
original version of this module shipped with Perl 5.000 through 5.004.
As an additional feature, \f(CW$keep\fR may be the keyword \*(L"delimiters\*(R" which
causes the functions to preserve the delimiters in each string as
tokens in the token lists, in addition to preserving quote and
backslash characters.
.PP
&\fIshellwords()\fR is written as a special case of &\fIquotewords()\fR, and it
does token parsing with whitespace as a delimiter\*(-- similar to most
Unix shells.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The sample program:
.PP
.Vb 7
\&  use Text::ParseWords;
\&  @words = quotewords(\*(Aq\es+\*(Aq, 0, q{this   is "a test" of\e quotewords \e"for you});
\&  $i = 0;
\&  foreach (@words) {
\&      print "$i: <$_>\en";
\&      $i++;
\&  }
.Ve
.PP
produces:
.PP
.Vb 6
\&  0: <this>
\&  1: <is>
\&  2: <a test>
\&  3: <of quotewords>
\&  4: <"for>
\&  5: <you>
.Ve
.PP
demonstrating:
.IP "0" 4
a simple word
.IP "1" 4
.IX Item "1"
multiple spaces are skipped because of our \f(CW$delim\fR
.IP "2" 4
.IX Item "2"
use of quotes to include a space in a word
.IP "3" 4
.IX Item "3"
use of a backslash to include a space in a word
.IP "4" 4
.IX Item "4"
use of a backslash to remove the special meaning of a double-quote
.IP "5" 4
.IX Item "5"
another simple word (note the lack of effect of the
backslashed double-quote)
.PP
Replacing \f(CW\*(C`quotewords(\*(Aq\es+\*(Aq, 0, q{this   is...})\*(C'\fR
with \f(CW\*(C`shellwords(q{this   is...})\*(C'\fR
is a simpler way to accomplish the same thing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::CSV \- for parsing \s-1CSV\s0 files
.SH "AUTHORS"
.IX Header "AUTHORS"
Maintainer: Alexandr Ciornii <alexchornyATgmail.com>.
.PP
Previous maintainer: Hal Pomeranz <pomeranz@netcom.com>, 1994\-1997 (Original
author unknown).  Much of the code for &\fIparse_line()\fR (including the
primary regexp) from Joerk Behrends <jbehrends@multimediaproduzenten.de>.
.PP
Examples section another documentation provided by John Heidemann 
<johnh@ISI.EDU>
.PP
Bug reports, patches, and nagging provided by lots of folks\*(-- thanks
everybody!  Special thanks to Michael Schwern <schwern@envirolink.org>
for assuring me that a &\fInested_quotewords()\fR would be useful, and to 
Jeff Friedl <jfriedl@yahoo\-inc.com> for telling me not to worry about
error-checking (sort of\*(-- you had to be there).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 250:" 4
.IX Item "Around line 250:"
Expected text after =item, not a number
.IP "Around line 254:" 4
.IX Item "Around line 254:"
Expected text after =item, not a number
.IP "Around line 258:" 4
.IX Item "Around line 258:"
Expected text after =item, not a number
.IP "Around line 262:" 4
.IX Item "Around line 262:"
Expected text after =item, not a number
.IP "Around line 266:" 4
.IX Item "Around line 266:"
Expected text after =item, not a number
