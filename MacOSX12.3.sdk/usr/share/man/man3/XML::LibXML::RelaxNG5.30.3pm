.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::LibXML::RelaxNG 3"
.TH XML::LibXML::RelaxNG 3 "2014-02-01" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::LibXML::RelaxNG \- RelaxNG Schema Validation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use XML::LibXML;
\&  $doc = XML::LibXML\->new\->parse_file($url);
\&
\&  $rngschema = XML::LibXML::RelaxNG\->new( location => $filename_or_url );
\&  $rngschema = XML::LibXML::RelaxNG\->new( string => $xmlschemastring );
\&  $rngschema = XML::LibXML::RelaxNG\->new( DOM => $doc );
\&  eval { $rngschema\->validate( $doc ); };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The XML::LibXML::RelaxNG class is a tiny frontend to libxml2's RelaxNG
implementation. Currently it supports only schema parsing and document
validation.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
.Vb 3
\&  $rngschema = XML::LibXML::RelaxNG\->new( location => $filename_or_url );
\&  $rngschema = XML::LibXML::RelaxNG\->new( string => $xmlschemastring );
\&  $rngschema = XML::LibXML::RelaxNG\->new( DOM => $doc );
.Ve
.Sp
The constructor of XML::LibXML::RelaxNG may get called with either one of three
parameters. The parameter tells the class from which source it should generate
a validation schema. It is important, that each schema only have a single
source.
.Sp
The location parameter allows one to parse a schema from the filesystem or a
\&\s-1URL.\s0
.Sp
The string parameter will parse the schema from the given \s-1XML\s0 string.
.Sp
The \s-1DOM\s0 parameter allows one to parse the schema from a pre-parsed XML::LibXML::Document.
.Sp
Note that the constructor will \fBdie()\fR if the schema does not meed the
constraints of the RelaxNG specification.
.IP "validate" 4
.IX Item "validate"
.Vb 1
\&  eval { $rngschema\->validate( $doc ); };
.Ve
.Sp
This function allows one to validate a (parsed) document against the given
RelaxNG schema. The argument of this function should be an
XML::LibXML::Document object. If this function succeeds, it will return 0,
otherwise it will \fBdie()\fR and report the errors found. Because of this \fBvalidate()\fR
should be always evaluated.
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant,
Christian Glahn,
Petr Pajas
.SH "VERSION"
.IX Header "VERSION"
2.0110
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd.
.PP
2002\-2006, Christian Glahn.
.PP
2006\-2009, Petr Pajas.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
