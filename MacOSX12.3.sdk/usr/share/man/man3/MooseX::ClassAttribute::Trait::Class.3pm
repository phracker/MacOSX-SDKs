.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::ClassAttribute::Trait::Class 3"
.TH MooseX::ClassAttribute::Trait::Class 3 "2016-05-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::ClassAttribute::Trait::Class \- A trait for classes with class attributes
.SH "VERSION"
.IX Header "VERSION"
version 0.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  for my $attr ( HasClassAttributes\->meta()\->get_all_class_attributes() )
\&  {
\&      print $attr\->name();
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role adds awareness of class attributes to a metaclass object. It
provides a set of introspection methods that largely parallel the
existing attribute methods, except they operate on class attributes.
.SH "METHODS"
.IX Header "METHODS"
Every method provided by this role has an analogous method in
\&\f(CW\*(C`Class::MOP::Class\*(C'\fR or \f(CW\*(C`Moose::Meta::Class\*(C'\fR for regular attributes.
.ie n .SS "$meta\->has_class_attribute($name)"
.el .SS "\f(CW$meta\fP\->has_class_attribute($name)"
.IX Subsection "$meta->has_class_attribute($name)"
.ie n .SS "$meta\->get_class_attribute($name)"
.el .SS "\f(CW$meta\fP\->get_class_attribute($name)"
.IX Subsection "$meta->get_class_attribute($name)"
.ie n .SS "$meta\->\fBget_class_attribute_list()\fP"
.el .SS "\f(CW$meta\fP\->\fBget_class_attribute_list()\fP"
.IX Subsection "$meta->get_class_attribute_list()"
These methods operate on the current metaclass only.
.ie n .SS "$meta\->add_class_attribute(...)"
.el .SS "\f(CW$meta\fP\->add_class_attribute(...)"
.IX Subsection "$meta->add_class_attribute(...)"
This accepts the same options as the Moose::Meta::Attribute
\&\f(CW\*(C`add_attribute()\*(C'\fR method. However, if an attribute is specified as
\&\*(L"required\*(R" an error will be thrown.
.ie n .SS "$meta\->remove_class_attribute($name)"
.el .SS "\f(CW$meta\fP\->remove_class_attribute($name)"
.IX Subsection "$meta->remove_class_attribute($name)"
If the named class attribute exists, it is removed from the class,
along with its accessor methods.
.ie n .SS "$meta\->\fBget_all_class_attributes()\fP"
.el .SS "\f(CW$meta\fP\->\fBget_all_class_attributes()\fP"
.IX Subsection "$meta->get_all_class_attributes()"
This method returns a list of attribute objects for the class and all
its parent classes.
.ie n .SS "$meta\->find_class_attribute_by_name($name)"
.el .SS "\f(CW$meta\fP\->find_class_attribute_by_name($name)"
.IX Subsection "$meta->find_class_attribute_by_name($name)"
This method looks at the class and all its parent classes for the
named class attribute.
.ie n .SS "$meta\->get_class_attribute_value($name)"
.el .SS "\f(CW$meta\fP\->get_class_attribute_value($name)"
.IX Subsection "$meta->get_class_attribute_value($name)"
.ie n .SS "$meta\->set_class_attribute_value($name, $value)"
.el .SS "\f(CW$meta\fP\->set_class_attribute_value($name, \f(CW$value\fP)"
.IX Subsection "$meta->set_class_attribute_value($name, $value)"
.ie n .SS "$meta\->set_class_attribute_value($name)"
.el .SS "\f(CW$meta\fP\->set_class_attribute_value($name)"
.IX Subsection "$meta->set_class_attribute_value($name)"
.ie n .SS "$meta\->clear_class_attribute_value($name)"
.el .SS "\f(CW$meta\fP\->clear_class_attribute_value($name)"
.IX Subsection "$meta->clear_class_attribute_value($name)"
These methods operate on the storage for class attribute values, which
is attached to the metaclass object.
.PP
There's really no good reason for you to call these methods unless
you're doing some deep hacking. They are named as public methods
solely because they are used by other meta roles and classes in this
distribution.
.SH "BUGS"
.IX Header "BUGS"
See MooseX::ClassAttribute for details.
.PP
Bugs may be submitted through the \s-1RT\s0 bug tracker <http://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-ClassAttribute>
(or bug\-moosex\-classattribute@rt.cpan.org <mailto:bug-moosex-classattribute@rt.cpan.org>).
.PP
I am also usually active on \s-1IRC\s0 as 'drolsky' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is Copyright (c) 2016 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
