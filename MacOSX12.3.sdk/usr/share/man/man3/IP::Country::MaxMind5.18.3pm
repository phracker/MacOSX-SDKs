.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IP::Country::MaxMind 3"
.TH IP::Country::MaxMind 3 "2006-04-06" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IP::Country::MaxMind \- Look up country by IP Address
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IP::Country::MaxMind;
\&
\&  my $gi = IP::Country::MaxMind\->new(GEOIP_STANDARD);
\&
\&  # look up IP address \*(Aq65.15.30.247\*(Aq
\&  # returns undef if country is unallocated, or not defined in our database
\&  my $cc1 = $gi\->inet_atocc(\*(Aq65.15.30.247\*(Aq);
\&  my $cc2 = $gi\->inet_atocc(\*(Aqyahoo.com\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module adapts the Geo::IP module to use the same interface as the IP::Country
modules; thus allowing users to easily switch between using the two underlying
databases.
.SH "DATABASE UPDATES"
.IX Header "DATABASE UPDATES"
Free monthly updates to the database are available from
.PP
.Vb 1
\&  http://www.maxmind.com/download/geoip/database/
.Ve
.PP
If you require greater accuracy, MaxMind offers a Premium database on a paid 
subscription basis.
.PP
The author of this module is in no way associated with MaxMind.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .IP "$gi = IP::Country::MaxMind\->new( $flags );" 4
.el .IP "\f(CW$gi\fR = IP::Country::MaxMind\->new( \f(CW$flags\fR );" 4
.IX Item "$gi = IP::Country::MaxMind->new( $flags );"
Constructs a new IP::Country::MaxMind object with the default database located 
inside your system's \fIdatadir\fR, typically \fI/usr/local/share/GeoIP/GeoIP.dat\fR.
.Sp
Flags can be set to either \s-1GEOIP_STANDARD,\s0 or for faster performance
(at a cost of using more memory), \s-1GEOIP_MEMORY_CACHE. \s0 When using memory
cache you can force a reload if the file is updated by setting \s-1GEOIP_CHECK_CACHE.\s0
.ie n .IP "$gi = IP::Country::MaxMind\->open( $database_filename, $flags );" 4
.el .IP "\f(CW$gi\fR = IP::Country::MaxMind\->open( \f(CW$database_filename\fR, \f(CW$flags\fR );" 4
.IX Item "$gi = IP::Country::MaxMind->open( $database_filename, $flags );"
Constructs a new Geo::IP object with the database located at \f(CW$database_filename\fR.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
All object methods are designed to be used in an object-oriented fashion.
.PP
.Vb 1
\&  $result = $object\->foo_method($bar,$baz);
.Ve
.PP
Using the module in a procedural fashion (without the arrow syntax) won't work.
.ie n .IP "$cc = $gi\->inet_atocc(\s-1HOSTNAME\s0)" 4
.el .IP "\f(CW$cc\fR = \f(CW$gi\fR\->inet_atocc(\s-1HOSTNAME\s0)" 4
.IX Item "$cc = $gi->inet_atocc(HOSTNAME)"
Takes a string giving the name of a host, and translates that to an
two-letter country code. Takes arguments of both the 'rtfm.mit.edu' 
type and '18.181.0.24'. If the host name cannot be resolved, returns undef. 
If the resolved \s-1IP\s0 address is not contained within the database, returns undef.
.ie n .IP "$cc = $gi\->inet_ntocc(\s-1IP_ADDRESS\s0)" 4
.el .IP "\f(CW$cc\fR = \f(CW$gi\fR\->inet_ntocc(\s-1IP_ADDRESS\s0)" 4
.IX Item "$cc = $gi->inet_ntocc(IP_ADDRESS)"
Takes a string (an opaque string as returned by \fISocket::inet_aton()\fR) 
and translates it into a two-letter country code. If the \s-1IP\s0 address is 
not contained within the database, returns undef.
.ie n .IP "$cc = $gi\->\fIdb_time()\fR" 4
.el .IP "\f(CW$cc\fR = \f(CW$gi\fR\->\fIdb_time()\fR" 4
.IX Item "$cc = $gi->db_time()"
Returns zero. For compatibility only.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002,2003 Nigel Wetters Gourlay. All Rights Reserved.
.PP
\&\s-1NO WARRANTY.\s0 This module is free software; you can redistribute 
it and/or modify it under the same terms as Perl itself.
