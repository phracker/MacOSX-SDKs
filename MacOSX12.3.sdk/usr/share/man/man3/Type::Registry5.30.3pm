.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Registry 3"
.TH Type::Registry 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Registry \- a glorified hashref for looking up type constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   package Foo::Bar;
\&   
\&   use Type::Registry;
\&   
\&   my $reg = "Type::Registry"\->for_me;  # a registry for Foo::Bar
\&   
\&   # Register all types from Types::Standard
\&   $reg\->add_types(\-Standard);
\&   
\&   # Register just one type from Types::XSD
\&   $reg\->add_types(\-XSD => ["NonNegativeInteger"]);
\&   
\&   # Register all types from MyApp::Types
\&   $reg\->add_types("MyApp::Types");
\&   
\&   # Create a type alias
\&   $reg\->alias_type("NonNegativeInteger" => "Count");
\&   
\&   # Look up a type constraint
\&   my $type = $reg\->lookup("ArrayRef[Count]");
\&   
\&   $type\->check([1, 2, 3.14159]);  # croaks
.Ve
.PP
Alternatively:
.PP
.Vb 1
\&   package Foo::Bar;
\&   
\&   use Type::Registry qw( t );
\&   
\&   # Register all types from Types::Standard
\&   t\->add_types(\-Standard);
\&   
\&   # Register just one type from Types::XSD
\&   t\->add_types(\-XSD => ["NonNegativeInteger"]);
\&   
\&   # Register all types from MyApp::Types
\&   t\->add_types("MyApp::Types");
\&   
\&   # Create a type alias
\&   t\->alias_type("NonNegativeInteger" => "Count");
\&   
\&   # Look up a type constraint
\&   my $type = t("ArrayRef[Count]");
\&   
\&   $type\->check([1, 2, 3.14159]);  # croaks
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A type registry is basically just a hashref mapping type names to type
constraint objects.
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
Create a new glorified hashref.
.ie n .IP """for_class($class)""" 4
.el .IP "\f(CWfor_class($class)\fR" 4
.IX Item "for_class($class)"
Create or return the existing glorified hashref associated with the given
class.
.Sp
Note that any type constraint you have imported from Type::Library\-based
type libraries will be automatically available in your class' registry.
.ie n .IP """for_me""" 4
.el .IP "\f(CWfor_me\fR" 4
.IX Item "for_me"
Create or return the existing glorified hashref associated with the caller.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """add_types(@libraries)""" 4
.el .IP "\f(CWadd_types(@libraries)\fR" 4
.IX Item "add_types(@libraries)"
The libraries list is treated as an \*(L"optlist\*(R" (a la Data::OptList).
.Sp
Strings are the names of type libraries; if the first character is a
hyphen, it is expanded to the \*(L"Types::\*(R" prefix. If followed by an
arrayref, this is the list of types to import from that library.
Otherwise, imports all types from the library.
.Sp
.Vb 1
\&   use Type::Registry qw(t);
\&   
\&   t\->add_types(\-Standard);  # OR: t\->add_types("Types::Standard");
\&   
\&   t\->add_types(
\&      \-TypeTiny => [\*(AqHashLike\*(Aq],
\&      \-Standard => [\*(AqHashRef\*(Aq => { \-as => \*(AqRealHash\*(Aq }],
\&   );
.Ve
.Sp
MooseX::Types (and experimentally, MouseX::Types) libraries can
also be added this way, but \fIcannot be followed by an arrayref of
types to import\fR.
.ie n .IP """add_type($type, $name)""" 4
.el .IP "\f(CWadd_type($type, $name)\fR" 4
.IX Item "add_type($type, $name)"
The long-awaited singular form of \f(CW\*(C`add_types\*(C'\fR. Given a type constraint
object, adds it to the registry with a given name. The name may be
omitted, in which case \f(CW\*(C`$type\->name\*(C'\fR is called, and Type::Registry
will throw an error if \f(CW$type\fR is anonymous. If a name is explicitly
given, Type::Registry cares not one wit whether the type constraint is
anonymous.
.Sp
This method can even add MooseX::Types and MouseX::Types type
constraints; indeed anything that can be handled by Types::TypeTiny's
\&\f(CW\*(C`to_TypeTiny\*(C'\fR function. (Bear in mind that to_TypeTiny \fIalways\fR results
in an anonymous type constraint, so \f(CW$name\fR will be required.)
.ie n .IP """alias_type($oldname, $newname)""" 4
.el .IP "\f(CWalias_type($oldname, $newname)\fR" 4
.IX Item "alias_type($oldname, $newname)"
Create an alias for an existing type.
.ie n .IP """simple_lookup($name)""" 4
.el .IP "\f(CWsimple_lookup($name)\fR" 4
.IX Item "simple_lookup($name)"
Look up a type in the registry by name.
.Sp
Returns undef if not found.
.ie n .IP """foreign_lookup($name)""" 4
.el .IP "\f(CWforeign_lookup($name)\fR" 4
.IX Item "foreign_lookup($name)"
Like \f(CW\*(C`simple_lookup\*(C'\fR, but if the type name contains \*(L"::\*(R", will attempt
to load it from a type library. (And will attempt to load that module.)
.ie n .IP """lookup($name)""" 4
.el .IP "\f(CWlookup($name)\fR" 4
.IX Item "lookup($name)"
Look up by name, with a \s-1DSL.\s0
.Sp
.Vb 1
\&   t\->lookup("Int|ArrayRef[Int]")
.Ve
.Sp
The \s-1DSL\s0 can be summed up as:
.Sp
.Vb 8
\&   X               type from this registry
\&   My::Lib::X      type from a type library
\&   ~X              complementary type
\&   X | Y           union
\&   X & Y           intersection
\&   X[...]          parameterized type
\&   slurpy X        slurpy type
\&   Foo::Bar::      class type
.Ve
.Sp
Croaks if not found.
.ie n .IP """make_union(@constraints)"", ""make_intersection(@constraints)"", ""make_class_type($class)"", ""make_role_type($role)""" 4
.el .IP "\f(CWmake_union(@constraints)\fR, \f(CWmake_intersection(@constraints)\fR, \f(CWmake_class_type($class)\fR, \f(CWmake_role_type($role)\fR" 4
.IX Item "make_union(@constraints), make_intersection(@constraints), make_class_type($class), make_role_type($role)"
Convenience methods for creating certain common type constraints.
.ie n .IP """AUTOLOAD""" 4
.el .IP "\f(CWAUTOLOAD\fR" 4
.IX Item "AUTOLOAD"
Overloaded to call \f(CW\*(C`lookup\*(C'\fR.
.Sp
.Vb 1
\&   $registry\->Str;  # like $registry\->lookup("Str")
.Ve
.ie n .IP """get_parent"", ""set_parent($reg)"", ""clear_parent"", ""has_parent""" 4
.el .IP "\f(CWget_parent\fR, \f(CWset_parent($reg)\fR, \f(CWclear_parent\fR, \f(CWhas_parent\fR" 4
.IX Item "get_parent, set_parent($reg), clear_parent, has_parent"
Advanced stuff. Allows a registry to have a \*(L"parent\*(R" registry which it
inherits type constraints from.
.SS "Functions"
.IX Subsection "Functions"
.ie n .IP """t""" 4
.el .IP "\f(CWt\fR" 4
.IX Item "t"
This class can export a function \f(CW\*(C`t\*(C'\fR which acts like
\&\f(CW\*(C`"Type::Registry"\->for_class($importing_class)\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Type\-Tiny>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Library.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
