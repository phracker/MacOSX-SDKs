.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::TypeTiny 3"
.TH Test::TypeTiny 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::TypeTiny \- useful functions for testing the efficacy of type constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&   use strict;
\&   use warnings;
\&   use Test::More;
\&   use Test::TypeTiny;
\&   
\&   use Types::Mine qw(Integer Number);
\&   
\&   should_pass(1, Integer);
\&   should_pass(\-1, Integer);
\&   should_pass(0, Integer);
\&   should_fail(2.5, Integer);
\&   
\&   ok_subtype(Number, Integer);
\&   
\&   done_testing;
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::TypeTiny provides a few handy functions for testing type constraints.
.SS "Functions"
.IX Subsection "Functions"
.ie n .IP """should_pass($value, $type, $test_name)""" 4
.el .IP "\f(CWshould_pass($value, $type, $test_name)\fR" 4
.IX Item "should_pass($value, $type, $test_name)"
.PD 0
.ie n .IP """should_pass($value, $type)""" 4
.el .IP "\f(CWshould_pass($value, $type)\fR" 4
.IX Item "should_pass($value, $type)"
.PD
Test that passes iff \f(CW$value\fR passes \f(CW\*(C`$type\->check\*(C'\fR.
.ie n .IP """should_fail($value, $type, $test_name)""" 4
.el .IP "\f(CWshould_fail($value, $type, $test_name)\fR" 4
.IX Item "should_fail($value, $type, $test_name)"
.PD 0
.ie n .IP """should_fail($value, $type)""" 4
.el .IP "\f(CWshould_fail($value, $type)\fR" 4
.IX Item "should_fail($value, $type)"
.PD
Test that passes iff \f(CW$value\fR fails \f(CW\*(C`$type\->check\*(C'\fR.
.ie n .IP """ok_subtype($type, @subtypes)""" 4
.el .IP "\f(CWok_subtype($type, @subtypes)\fR" 4
.IX Item "ok_subtype($type, @subtypes)"
Test that passes iff all \f(CW@subtypes\fR are subtypes of \f(CW$type\fR.
.ie n .IP """EXTENDED_TESTING""" 4
.el .IP "\f(CWEXTENDED_TESTING\fR" 4
.IX Item "EXTENDED_TESTING"
Exportable boolean constant.
.ie n .IP """matchfor(@things)""" 4
.el .IP "\f(CWmatchfor(@things)\fR" 4
.IX Item "matchfor(@things)"
Assistant for matching exceptions. Not exported by default.
See also Test::Fatal::matchfor.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
If the \f(CW\*(C`EXTENDED_TESTING\*(C'\fR environment variable is set to true, this
module will promote each \f(CW\*(C`should_pass\*(C'\fR or \f(CW\*(C`should_fail\*(C'\fR test into a
subtest block and test the type constraint in both an inlined and
non-inlined manner.
.PP
This variable must be set at compile time (i.e. before this module is
loaded).
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Type\-Tiny>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Tiny.
.PP
For an alternative to \f(CW\*(C`should_pass\*(C'\fR, see Test::Deep::Type which will
happily accept a Type::Tiny type constraint instead of a MooseX::Types one.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
