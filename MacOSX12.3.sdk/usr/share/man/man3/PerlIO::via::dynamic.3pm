.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dynamic 3"
.TH dynamic 3 "2012-11-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PerlIO::via::dynamic \- dynamic PerlIO layers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& open $fh, $fname;
\& $p = PerlIO::via::dynamic\->new
\&  (translate =>
\&    sub { $_[1] =~ s/\e$Filename[:\ew\es\e\-\e.\e/\e\e]*\e$/\e$Filename: $fname\e$/e},
\&   untranslate =>
\&    sub { $_[1] =~ s/\e$Filename[:\ew\es\e\-\e.\e/\e\e]*\e$/\e$Filename\e$/});
\& $p\->via ($fh);
\& binmode $fh, $p\->via; # deprecated
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`PerlIO::via::dynamic\*(C'\fR is used for creating dynamic PerlIO
layers. It is useful when the behavior or the layer depends on
variables. You should not use this module as via layer directly (ie
:via(dynamic)).
.PP
Use the constructor to create new layers, with two arguments:
translate and untranslate. Then use \f(CW\*(C`$p\-\*(C'\fRvia ($fh)> to wrap the
handle.  Once <$fh> is destroyed, the temporary namespace for the \s-1IO\s0
layer will be removed.
.PP
Note that PerlIO::via::dynamic uses the scalar fields to reference to
the object representing the dynamic namespace.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "translate" 4
.IX Item "translate"
A function that translate buffer upon \fIwrite\fR.
.IP "untranslate" 4
.IX Item "untranslate"
A function that translate buffer upon \fIread\fR.
.IP "use_read" 4
.IX Item "use_read"
Use \f(CW\*(C`READ\*(C'\fR instead of \f(CW\*(C`FILL\*(C'\fR for the layer.  Useful when caller
expect exact amount of data from read, and the \f(CW\*(C`untranslate\*(C'\fR function
might return different length.
.Sp
By default \f(CW\*(C`PerlIO::via::dynamic\*(C'\fR creates line-based layer to make
\&\f(CW\*(C`translate\*(C'\fR implementation easier.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chia-liang Kao <clkao@clkao.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004 by Chia-liang Kao <clkao@clkao.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
