.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::GlobalDestruction 3"
.TH Devel::GlobalDestruction 3 "2016-10-31" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::GlobalDestruction \- Provides function returning the equivalent of
"${^GLOBAL_PHASE} eq \*(AqDESTRUCT\*(Aq" for older perls.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Foo;
\&    use Devel::GlobalDestruction;
\&
\&    use namespace::clean; # to avoid having an "in_global_destruction" method
\&
\&    sub DESTROY {
\&        return if in_global_destruction;
\&
\&        do_something_a_little_tricky();
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl's global destruction is a little tricky to deal with \s-1WRT\s0 finalizers
because it's not ordered and objects can sometimes disappear.
.PP
Writing defensive destructors is hard and annoying, and usually if global
destruction is happening you only need the destructors that free up non
process local resources to actually execute.
.PP
For these constructors you can avoid the mess by simply bailing out if global
destruction is in effect.
.SH "EXPORTS"
.IX Header "EXPORTS"
This module uses Sub::Exporter::Progressive so the exports may be renamed,
aliased, etc. if Sub::Exporter is present.
.IP "in_global_destruction" 4
.IX Item "in_global_destruction"
Returns true if the interpreter is in global destruction. In perl 5.14+, this
returns \f(CW\*(C`${^GLOBAL_PHASE} eq \*(AqDESTRUCT\*(Aq\*(C'\fR, and on earlier perls, detects it using
the value of \f(CW\*(C`PL_main_cv\*(C'\fR or \f(CW\*(C`PL_dirty\*(C'\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Yuval Kogman <nothingmuch@woobling.org>
.PP
Florian Ragwitz <rafl@debian.org>
.PP
Jesse Luehrs <doy@tozt.net>
.PP
Peter Rabbitson <ribasushi@cpan.org>
.PP
Arthur Axel 'fREW' Schmidt <frioux@gmail.com>
.PP
Elizabeth Mattijsen <liz@dijkmat.nl>
.PP
Greham Knop <haarg@haarg.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&    Copyright (c) 2008 Yuval Kogman. All rights reserved
\&    This program is free software; you can redistribute
\&    it and/or modify it under the same terms as Perl itself.
.Ve
