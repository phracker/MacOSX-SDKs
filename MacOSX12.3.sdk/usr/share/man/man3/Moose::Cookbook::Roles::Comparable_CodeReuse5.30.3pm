.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Roles::Comparable_CodeReuse 3"
.TH Moose::Cookbook::Roles::Comparable_CodeReuse 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Roles::Comparable_CodeReuse \- Using roles for code reuse
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Eq;
\&  use Moose::Role;
\&
\&  requires \*(Aqequal_to\*(Aq;
\&
\&  sub not_equal_to {
\&      my ( $self, $other ) = @_;
\&      not $self\->equal_to($other);
\&  }
\&
\&  package Comparable;
\&  use Moose::Role;
\&
\&  with \*(AqEq\*(Aq;
\&
\&  requires \*(Aqcompare\*(Aq;
\&
\&  sub equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == 0;
\&  }
\&
\&  sub greater_than {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == 1;
\&  }
\&
\&  sub less_than {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == \-1;
\&  }
\&
\&  sub greater_than_or_equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->greater_than($other) || $self\->equal_to($other);
\&  }
\&
\&  sub less_than_or_equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->less_than($other) || $self\->equal_to($other);
\&  }
\&
\&  package Printable;
\&  use Moose::Role;
\&
\&  requires \*(Aqto_string\*(Aq;
\&
\&  package US::Currency;
\&  use Moose;
\&
\&  with \*(AqComparable\*(Aq, \*(AqPrintable\*(Aq;
\&
\&  has \*(Aqamount\*(Aq => ( is => \*(Aqrw\*(Aq, isa => \*(AqNum\*(Aq, default => 0 );
\&
\&  sub compare {
\&      my ( $self, $other ) = @_;
\&      $self\->amount <=> $other\->amount;
\&  }
\&
\&  sub to_string {
\&      my $self = shift;
\&      sprintf \*(Aq$%0.2f USD\*(Aq => $self\->amount;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Roles have two primary purposes: as interfaces, and as a means of code
reuse. This recipe demonstrates the latter, with roles that define
comparison and display code for objects.
.PP
Let's start with \f(CW\*(C`Eq\*(C'\fR. First, note that we've replaced \f(CW\*(C`use Moose\*(C'\fR
with \f(CW\*(C`use Moose::Role\*(C'\fR. We also have a new sugar function, \f(CW\*(C`requires\*(C'\fR:
.PP
.Vb 1
\&  requires \*(Aqequal_to\*(Aq;
.Ve
.PP
This says that any class which consumes this role must provide an
\&\f(CW\*(C`equal_to\*(C'\fR method. It can provide this method directly, or by
consuming some other role.
.PP
The \f(CW\*(C`Eq\*(C'\fR role defines its \f(CW\*(C`not_equal_to\*(C'\fR method in terms of the
required \f(CW\*(C`equal_to\*(C'\fR method. This lets us minimize the methods that
consuming classes must provide.
.PP
The next role, \f(CW\*(C`Comparable\*(C'\fR, builds on the \f(CW\*(C`Eq\*(C'\fR role. We include
\&\f(CW\*(C`Eq\*(C'\fR in \f(CW\*(C`Comparable\*(C'\fR using \f(CW\*(C`with\*(C'\fR, another new sugar function:
.PP
.Vb 1
\&  with \*(AqEq\*(Aq;
.Ve
.PP
The \f(CW\*(C`with\*(C'\fR function takes a list of roles to consume. In our example,
the \f(CW\*(C`Comparable\*(C'\fR role provides the \f(CW\*(C`equal_to\*(C'\fR method required by
\&\f(CW\*(C`Eq\*(C'\fR. However, it could opt not to, in which case a class that
consumed \f(CW\*(C`Comparable\*(C'\fR would have to provide its own \f(CW\*(C`equal_to\*(C'\fR. In
other words, a role can consume another role \fIwithout\fR providing any
required methods.
.PP
The \f(CW\*(C`Comparable\*(C'\fR role requires a method,  \f(CW\*(C`compare\*(C'\fR:
.PP
.Vb 1
\&  requires \*(Aqcompare\*(Aq;
.Ve
.PP
The \f(CW\*(C`Comparable\*(C'\fR role also provides a number of other methods, all of
which ultimately rely on \f(CW\*(C`compare\*(C'\fR.
.PP
.Vb 4
\&  sub equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == 0;
\&  }
\&
\&  sub greater_than {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == 1;
\&  }
\&
\&  sub less_than {
\&      my ( $self, $other ) = @_;
\&      $self\->compare($other) == \-1;
\&  }
\&
\&  sub greater_than_or_equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->greater_than($other) || $self\->equal_to($other);
\&  }
\&
\&  sub less_than_or_equal_to {
\&      my ( $self, $other ) = @_;
\&      $self\->less_than($other) || $self\->equal_to($other);
\&  }
.Ve
.PP
Finally, we define the \f(CW\*(C`Printable\*(C'\fR role. This role exists solely to
provide an interface. It has no methods, just a list of required methods.
In this case, it just requires a \f(CW\*(C`to_string\*(C'\fR method.
.PP
An interface role is useful because it defines both a method and a
\&\fIname\fR. We know that any class which does this role has a
\&\f(CW\*(C`to_string\*(C'\fR method, but we can also assume that this method has the
semantics we want. Presumably, in real code we would define those
semantics in the documentation for the \f(CW\*(C`Printable\*(C'\fR role. (1)
.PP
Finally, we have the \f(CW\*(C`US::Currency\*(C'\fR class which consumes both the
\&\f(CW\*(C`Comparable\*(C'\fR and \f(CW\*(C`Printable\*(C'\fR roles.
.PP
.Vb 1
\&  with \*(AqComparable\*(Aq, \*(AqPrintable\*(Aq;
.Ve
.PP
It also defines a regular Moose attribute, \f(CW\*(C`amount\*(C'\fR:
.PP
.Vb 1
\&  has \*(Aqamount\*(Aq => ( is => \*(Aqrw\*(Aq, isa => \*(AqNum\*(Aq, default => 0 );
.Ve
.PP
Finally we see the implementation of the methods required by our
roles. We have a \f(CW\*(C`compare\*(C'\fR method:
.PP
.Vb 4
\&  sub compare {
\&      my ( $self, $other ) = @_;
\&      $self\->amount <=> $other\->amount;
\&  }
.Ve
.PP
By consuming the \f(CW\*(C`Comparable\*(C'\fR role and defining this method, we gain
the following methods for free: \f(CW\*(C`equal_to\*(C'\fR, \f(CW\*(C`greater_than\*(C'\fR,
\&\f(CW\*(C`less_than\*(C'\fR, \f(CW\*(C`greater_than_or_equal_to\*(C'\fR and
\&\f(CW\*(C`less_than_or_equal_to\*(C'\fR.
.PP
Then we have our \f(CW\*(C`to_string\*(C'\fR method:
.PP
.Vb 4
\&  sub to_string {
\&      my $self = shift;
\&      sprintf \*(Aq$%0.2f USD\*(Aq => $self\->amount;
\&  }
.Ve
.SH "CONCLUSION"
.IX Header "CONCLUSION"
Roles can be very powerful. They are a great way of encapsulating
reusable behavior, as well as communicating (semantic and interface)
information about the methods our classes provide.
.SH "FOOTNOTES"
.IX Header "FOOTNOTES"
.IP "(1)" 4
.IX Item "(1)"
Consider two classes, \f(CW\*(C`Runner\*(C'\fR and \f(CW\*(C`Process\*(C'\fR, both of which define a
\&\f(CW\*(C`run\*(C'\fR method. If we just require that an object implements a \f(CW\*(C`run\*(C'\fR
method, we still aren't saying anything about what that method
\&\fIactually does\fR. If we require an object that implements the
\&\f(CW\*(C`Executable\*(C'\fR role, we're saying something about semantics.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
