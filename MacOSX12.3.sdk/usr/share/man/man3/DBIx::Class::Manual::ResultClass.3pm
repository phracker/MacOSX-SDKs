.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Manual::ResultClass 3"
.TH DBIx::Class::Manual::ResultClass 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Manual::ResultClass \- Representing a single result (row) from
a DB query
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package My::Schema::Result::Track;
\&
\&  use parent \*(AqDBIx::Class::Core\*(Aq;
\&
\&  _\|_PACKAGE_\|_\->table(\*(Aqtracks\*(Aq);
\&
\&  _\|_PACKAGE_\|_\->add_columns({
\&    id => {
\&      data_type => \*(Aqint\*(Aq,
\&      is_auto_increment => 1,
\&    },
\&    cd_id => {
\&      data_type => \*(Aqint\*(Aq,
\&    },
\&    title => {
\&      data_type => \*(Aqvarchar\*(Aq,
\&      size => 50,
\&    },
\&    rank => {
\&      data_type => \*(Aqint\*(Aq,
\&      is_nullable => 1,
\&    },
\&  });
\&
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqid\*(Aq);
\&  _\|_PACKAGE_\|_\->add_unique_constraint(u_title => [\*(Aqcd_id\*(Aq, \*(Aqtitle\*(Aq]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In DBIx::Class, a user normally receives query results as instances of a
certain \f(CW\*(C`Result Class\*(C'\fR, depending on the main query source.  Besides being
the primary \*(L"toolset\*(R" for interaction with your data, a \f(CW\*(C`Result Class\*(C'\fR also
serves to establish source metadata, which is then used during initialization
of your DBIx::Class::Schema instance.
.PP
Because of these multiple seemingly conflicting purposes, it is hard to
aggregate the documentation of various methods available on a typical
\&\f(CW\*(C`Result Class\*(C'\fR. This document serves as a general overview of \f(CW\*(C`Result Class\*(C'\fR
declaration best practices, and offers an index of the available methods
(and the Components/Roles which provide them).
.SH "INHERITED METHODS"
.IX Header "INHERITED METHODS"
.IP "DBIx::Class::Relationship" 4
.IX Item "DBIx::Class::Relationship"
has_many, has_one, might_have, belongs_to, many_to_many
.IP "DBIx::Class::Relationship::Base" 4
.IX Item "DBIx::Class::Relationship::Base"
register_relationship, count_related, create_related, delete_related, find_or_create_related, find_or_new_related, find_related, new_related, related_resultset, search_related, search_related_rs, set_from_related, update_from_related, update_or_create_related
.IP "DBIx::Class::InflateColumn" 4
.IX Item "DBIx::Class::InflateColumn"
get_inflated_column, inflate_column, set_inflated_column, store_inflated_column
.IP "DBIx::Class::PK" 4
.IX Item "DBIx::Class::PK"
\&\s-1ID\s0, id, ident_condition
.IP "DBIx::Class::Row" 4
.IX Item "DBIx::Class::Row"
delete, update, copy, discard_changes, get_column, get_columns, get_dirty_columns, get_from_storage, get_inflated_columns, has_column_loaded, in_storage, inflate_result, insert, insert_or_update, is_changed, is_column_changed, make_column_dirty, new, register_column, result_source, set_column, set_columns, set_inflated_columns, store_column, throw_exception, update_or_insert
.IP "DBIx::Class::ResultSourceProxy::Table" 4
.IX Item "DBIx::Class::ResultSourceProxy::Table"
table, table_class
.IP "DBIx::Class::ResultSource" 4
.IX Item "DBIx::Class::ResultSource"
add_column, add_columns, add_relationship, add_unique_constraint, add_unique_constraints, column_info, column_info_from_storage, columns, columns_info, has_column, has_relationship, primary_columns, relationship_info, relationships, remove_column, remove_columns, result_class, resultset_attributes, resultset_class, sequence, set_primary_key, source_info, source_name, unique_constraint_columns, unique_constraint_names, unique_constraints
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
