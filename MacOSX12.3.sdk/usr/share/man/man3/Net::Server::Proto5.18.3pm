.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Proto 3"
.TH Net::Server::Proto 3 "2013-01-09" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Proto \- Net::Server Protocol compatibility layer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, all available socket types will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
\&
\&    # Net::Server::Proto and its accompanying modules are not
\&    # intended to be used outside the scope of Net::Server.
\&
\&    # That being said, here is how you use them.  This is
\&    # only intended for anybody wishing to extend the
\&    # protocols to include some other set (ie maybe a
\&    # database connection protocol)
\&
\&    use Net::Server::Proto;
\&
\&    my @info = Net::Server::Proto\->parse_info(
\&        $port,            # port to connect to
\&        $default_host,    # host to use if none found in port
\&        $default_proto,   # proto to use if none found in port
\&        $default_ipv,     # default of IPv6 or IPv4 if none found in port
\&        $server_obj,      # Net::Server object
\&    );
\&
\&    my @raw_info = Net::Server::Proto\->get_addr_info($host, $port, $proto);
\&    # returns arrayref of resolved ips, ports, and ipv values
\&
\&    my $sock = Net::Server::Proto\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => $ipv, # * (IPv*) if false (default false)
\&    }, $server);
\&
\&    # Net::Server::Proto will attempt to interface with
\&    # sub modules named similar to Net::Server::Proto::TCP
\&    # Individual sub modules will be loaded by
\&    # Net::Server::Proto as they are needed.
\&
\&    use Net::Server::Proto::TCP; # or UDP or UNIX etc
\&
\&    # Return an object which is a sub class of IO::Socket
\&    # At this point the object is not connected.
\&    # The method can gather any other information that it
\&    # needs from the server object.
\&    my $sock = Net::Server::Proto::TCP\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => 6, # IPv6 \- default is * \- can also be \*(Aq4\*(Aq
\&    }, $server);
\&
\&
\&    # Log that a connection is about to occur.
\&    # Use the facilities of the passed Net::Server object.
\&    $sock\->log_connect( $server );
\&
\&    # Actually bind to port or socket file.  This
\&    # is typically done by calling the configure method.
\&    $sock\->connect();
\&
\&    # Allow for rebinding to an already open fileno.
\&    # Typically will just do an fdopen.
\&    $sock\->reconnect();
\&
\&    ### Return a unique identifying string for this sock that
\&    # can be used when reconnecting.
\&    my $str = $sock\->hup_string();
\&
\&    # Return the proto that is being used by this module.
\&    my $proto = $sock\->NS_proto();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Server::Proto is an intermediate module which returns IO::Socket
style objects blessed into its own set of classes (ie
Net::Server::Proto::TCP, Net::Server::Proto::UNIX).
.PP
Only three or four protocols come bundled with Net::Server.  \s-1TCP, UDP,
UNIX, UNIXDGRAM,\s0 and \s-1SSLEAY.  TCP\s0 is an implementation of \s-1SOCK_STREAM\s0
across an \s-1INET\s0 socket.  \s-1UDP\s0 is an implementation of \s-1SOCK_DGRAM\s0 across
an \s-1INET\s0 socket.  \s-1UNIX\s0 uses a unix style socket file with the
\&\s-1SOCK_STREAM\s0 protocol.  \s-1UNIXGRAM\s0 uses a unix style socket file with the
\&\s-1SOCK_DGRAM\s0 protocol.  \s-1SSLEAY\s0 is actually just a layer on top of \s-1TCP\s0
but uses Net::SSLeay to read and write from the stream.
.PP
The protocol that is passed to Net::Server can be the name of another
module which contains the protocol bindings.  If a protocol of
MyServer::MyTCP was passed, the socket would be blessed into that
class.  If Net::Server::Proto::TCP was passed, it would get that
class.  If a bareword, such as tcp, udp, unix, unixdgram or ssleay, is
passed, the word is uppercased, and post pended to
\&\*(L"Net::Server::Proto::\*(R" (ie tcp = Net::Server::Proto::TCP).
.SH "METHODS"
.IX Header "METHODS"
Protocol names used by the Net::Server::Proto should be sub classes of
IO::Socket.  These classes should also contain, as a minimum, the
following methods should be provided:
.IP "object" 4
.IX Item "object"
Return an object which is a sub class of IO::Socket At this point the
object is not connected.  The method can gather any other information
that it needs from the server object.  Arguments are default_host,
port, and a Net::Server style server object.
.IP "log_connect" 4
.IX Item "log_connect"
Log that a connection is about to occur.  Use the facilities of the
passed Net::Server object.  This should be an informative string
explaining which properties are being used.
.IP "connect" 4
.IX Item "connect"
Actually bind to port or socket file.  This is typically done
internally by calling the configure method of the IO::Socket super
class.
.IP "reconnect" 4
.IX Item "reconnect"
Allow for rebinding to an already open fileno.  Typically will just do
an fdopen using the IO::Socket super class.
.IP "hup_string" 4
.IX Item "hup_string"
Return a unique identifying string for this sock that can be used when
reconnecting.  This is done to allow information including the file
descriptor of the open sockets to be passed via \f(CW%ENV\fR during an exec.
This string should always be the same based upon the configuration
parameters.
.IP "NS_port" 4
.IX Item "NS_port"
Net::Server protocol.  Return the port that is being used by this
module.  If the underlying type is \s-1UNIX\s0 then port will actually be
the path to the unix socket file.
.IP "NS_host" 4
.IX Item "NS_host"
Net::Server protocol.  Return the protocol that is being used by this
module.  This does not have to be a registered or known protocol.
.IP "NS_proto" 4
.IX Item "NS_proto"
Net::Server protocol.  Return the protocol that is being used by this
module.  This does not have to be a registered or known protocol.
.IP "show" 4
.IX Item "show"
Similar to log_connect, but simply shows a listing of which
properties were found.  Can be used at any time.
.SH "HOST"
.IX Header "HOST"
The hostname may be either blank, '*', be an IPv4 address, an IPv6 address,
a bare hostname, or a hostname with IPv* specifications.
.PP
.Vb 1
\&    host => "127.0.0.1",  # an IPv4 address
\&
\&    host => "::1",        # an IPv6 address
\&
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (default IPv* \- IPv4 and/or IPv6)
\&
\&    host => \*(Aqlocalhost/IPv*\*(Aq,  # same
\&
\&    ipv  => \*(Aq*\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # same
\&
\&    ipv  => 6,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (IPv6)
\&
\&    ipv  => \*(AqIPv4 IPv6\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (requires IPv6 and IPv4)
\&
\&
\&    host => \*(Aq*\*(Aq,          # any local interfaces (default IPv*)
\&
\&    ipv  => \*(Aq*\*(Aq,
\&    host => \*(Aq*\*(Aq,          # any local interfaces (any IPv6 or IPv4)
\&
\&    host => \*(Aq*/IPv*\*(Aq,     # same
.Ve
.SH "IPV"
.IX Header "IPV"
In addition to being able to specify \s-1IPV\s0 as a separate parameter, ipv may
also be passed as a part of the host, as part of the port, as part of the protocol
or may be specified via \f(CW$ENV\fR{'\s-1IPV\s0'}.  The order of precidence is as follows:
.PP
.Vb 7
\&     1) Explicit IPv4 or IPv6 address \- wins
\&     2) ipv specified in port
\&     3) ipv specified in host
\&     4) ipv specified in proto
\&     5) ipv specified in default settings
\&     6) ipv specified in $ENV{\*(AqIPV\*(Aq}
\&     7) default to IPv*
.Ve
.SH "PORT"
.IX Header "PORT"
The port is the most important argument passed to the sub
module classes and to Net::Server::Proto itself.  For tcp,
udp, and ssleay style ports, the form is generally host:port/protocol,
[host]:port/protocol, host|port|protocol, host/port, or port.
If \fIhost\fR is a numerical IPv6 address it should be enclosed in square
brackets to avoid ambiguity in parsing a port number, e.g.: \*(L"[::1]:80\*(R".
Separating with spaces, commas, or pipes is also allowed, e.g. \*(L"::1, 80\*(R".
For unix sockets the form is generally socket_file|unix or socket_file.
.PP
To help overcome parsing ambiguity, it is also possible to pass port as
a hashref (or as an array of hashrefs) of information such as:
.PP
.Vb 6
\&    port => {
\&        host  => "localhost",
\&        ipv   => 6, # could also pass IPv6 (* is default)
\&        port  => 20203,
\&        proto => \*(Aqtcp\*(Aq,
\&    }
.Ve
.PP
If a hashref does not include host, ipv, or proto \- it will use the default
value supplied by the general configuration.
.PP
A socket protocol family \s-1PF_INET\s0 or \s-1PF_INET6\s0 is derived from a specified
address family of the binding address. A \s-1PF_INET\s0 socket can only accept
IPv4 connections. A \s-1PF_INET6\s0 socket accepts IPv6 connections, but may also
accept IPv4 connections, depending on \s-1OS\s0 and its settings. For example,
on FreeBSD systems setting a sysctl net.inet6.ip6.v6only to 0 will allow
IPv4 connections to a \s-1PF_INET6\s0 socket.  By default on linux, binding to
host [::] will accept IPv4 or IPv6 connections.
.PP
The Net::Server::Proto::object method returns a list of objects corresponding
to created sockets. For Unix and \s-1INET\s0 sockets the list typically contains
just one element, but may return multiple objects when multiple protocol
families are allowed or when a host name resolves to multiple local
binding addresses.  This is particularly true when an ipv value of '*' is
passed in allowing hostname resolution.
.PP
You can see what Net::Server::Proto parsed out by looking at
the logs to see what log_connect said.  You could also include
a post_bind_hook similar to the following to debug what happened:
.PP
.Vb 6
\&    sub post_bind_hook {
\&        my $self = shift;
\&        foreach my $sock ( @{ $self\->{server}\->{sock} } ){
\&            $self\->log(2,$sock\->show);
\&        }
\&    }
.Ve
.PP
Rather than try to explain further, please look at the following
examples:
.PP
.Vb 1
\&    # example 1 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = undef;
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqdefault\-domain.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => *, # IPv*
\&    # };
\&
\&    # example 2 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => *,
\&    # };
\&
\&    # example 3 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/udp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqudp\*(Aq, # will use Net::Server::Proto::UDP
\&    #     ipv   => *,
\&    # };
\&
\&    # example 4 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/Net::Server::Proto::UDP";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "TCP";
\&    $def_ipv   = 4;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(AqNet::Server::Proto::UDP\*(Aq,
\&    #     ipv   => 4,
\&    # };
\&
\&    # example 5 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/MyObject::TCP";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(AqMyObject::TCP\*(Aq,
\&    # };
\&
\&    # example 6 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|unix";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIX
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 7 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|unixdgram";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunixdgram\*(Aq, # will use Net::Server::Proto::UNIXDGRAM
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 8 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|SOCK_STREAM|unix"; # legacy
\&    $def_host  = "";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIX
\&    #     unix_type => \*(AqSOCK_STREAM\*(Aq,
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 9 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|SOCK_DGRAM|unix"; # legacy
\&    $def_host  = "";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIXDGRAM
\&    #     unix_type => \*(AqSOCK_DGRAM\*(Aq,
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 10 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "someother.com:20203/ssleay";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqssleay\*(Aq, # will use Net::Server::Proto::SSLEAY
\&    #     ipv   => *,
\&    # };
\&
\&    # example 11 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[::1]:20203 ipv6 tcp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # };
\&
\&    # example 12 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[::1]:20203 tcp";
\&    $def_host  = "default\-domain.com/IPv6";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # };
\&
\&    # example 13 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[someother.com]:20203 ipv6 ipv4 tcp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4,
\&    # }, {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # });
\&
\&    # example 14 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # }, {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6, # IPv6
\&    # });
\&
\&    # example 15 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com IPv*";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # }, {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6, # IPv6
\&    # });
\&
\&    # example 16 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $ENV{\*(AqIPV\*(Aq} = \*(Aq4\*(Aq;
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # });
.Ve
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
