.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Message 3"
.TH Net::LDAP::Message 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Message \- Message response from LDAP server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::LDAP;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::LDAP::Message\fR is a base class for the objects returned by the
Net::LDAP methods
abandon,
add,
bind,
compare,
delete,
modify,
moddn,
search and
unbind.
.PP
The sub-class Net::LDAP::Search returned by
search also defines many methods.
.PP
If the Net::LDAP object is in async mode then all these methods,
except \f(CW\*(C`done\*(C'\fR and \f(CW\*(C`mesg_id\*(C'\fR, will cause a wait until the request is completed.
.SH "METHODS"
.IX Header "METHODS"
.IP "code ( )" 4
.IX Item "code ( )"
The code value in the result message from the server. Normally for a
success zero will be returned. Constants for the result codes can be
imported from the Net::LDAP or Net::LDAP::Constant module.
.IP "control ( [ \s-1OID, ...\s0 ] )" 4
.IX Item "control ( [ OID, ... ] )"
Return the list of controls that were returned from the server.
If one or more OIDs are given as arguments, return only the controls
of the OIDs given.
.IP "dn ( )" 4
.IX Item "dn ( )"
The \s-1DN\s0 in the result message from the server.
.IP "done ( )" 4
.IX Item "done ( )"
Returns \fItrue\fR if the request has been completed.
.IP "error ( )" 4
.IX Item "error ( )"
Returns the error message in the result message from the server. If
the server did not include an error message, then the result of
ldap_error_desc with the error code
from the result message.
.IP "error_name ( )" 4
.IX Item "error_name ( )"
Returns the name of the error code in the result message from the
server. See ldap_error_name for a
detailed description of the return value.
.IP "error_text ( )" 4
.IX Item "error_text ( )"
Returns the short text description of the error code in the result
message from the server. See
ldap_error_text for a detailed
description of the return value.
.IP "error_desc ( )" 4
.IX Item "error_desc ( )"
Returns a long text description of the error code in the result
message from the server. See
ldap_error_desc for a detailed
description of the return value.
.IP "is_error ( )" 4
.IX Item "is_error ( )"
Returns \fItrue\fR if the result code is considered to be an error for
the operation.
.IP "mesg_id ( )" 4
.IX Item "mesg_id ( )"
The message id of the request message sent to the server.
.IP "referrals ( )" 4
.IX Item "referrals ( )"
Returns a list of referrals from the result message.
.IP "server_error ( )" 4
.IX Item "server_error ( )"
The error message returned by the server, or \f(CW\*(C`undef\*(C'\fR if the server
did not provide a message.
.IP "sync ( )" 4
.IX Item "sync ( )"
Wait for the server to complete the request.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Search,
Net::LDAP::Constant,
Net::LDAP::Util
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This document is based on a document originally written by Russell
Fulton <r.fulton@auckland.ac.nz>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl\-ldap@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2004 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.
