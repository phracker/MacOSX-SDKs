.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spiffy 3"
.TH Spiffy 3 "2014-08-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spiffy \- Spiffy Perl Interface Framework For You
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    package Keen;
\&    use Spiffy \-Base;
\&    field \*(Aqmirth\*(Aq;
\&    const mood => \*(Aq:\-)\*(Aq;
\&
\&    sub happy {
\&        if ($self\->mood eq \*(Aq:\-(\*(Aq) {
\&            $self\->mirth(\-1);
\&            print "Cheer up!";
\&        }
\&        super;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\*(L"Spiffy\*(R" is a framework and methodology for doing object oriented (\s-1OO\s0)
programming in Perl. Spiffy combines the best parts of Exporter.pm, base.pm,
mixin.pm and \s-1SUPER\s0.pm into one magic foundation class. It attempts to fix all
the nits and warts of traditional Perl \s-1OO,\s0 in a clean, straightforward and
(perhaps someday) standard way.
.PP
Spiffy borrows ideas from other \s-1OO\s0 languages like Python, Ruby, Java and Perl
6. It also adds a few tricks of its own.
.PP
If you take a look on \s-1CPAN,\s0 there are a ton of \s-1OO\s0 related modules. When
starting a new project, you need to pick the set of modules that makes most
sense, and then you need to use those modules in each of your classes. Spiffy,
on the other hand, has everything you'll probably need in one module, and you
only need to use it once in one of your classes. If you make Spiffy.pm the
base class of the basest class in your project, Spiffy will automatically pass
all of its magic to all of your subclasses. You may eventually forget that
you're even using it!
.PP
The most striking difference between Spiffy and other Perl object oriented
base classes, is that it has the ability to export things. If you create a
subclass of Spiffy, all the things that Spiffy exports will automatically be
exported by your subclass, in addition to any more things that you want to
export. And if someone creates a subclass of your subclass, all of those
things will be exported automatically, and so on. Think of it as \*(L"Inherited
Exportation\*(R", and it uses the familiar Exporter.pm specification syntax.
.PP
To use Spiffy or any subclass of Spiffy as a base class of your class, you
specify the \f(CW\*(C`\-base\*(C'\fR argument to the \f(CW\*(C`use\*(C'\fR command.
.PP
.Vb 1
\&    use MySpiffyBaseModule \-base;
.Ve
.PP
You can also use the traditional \f(CW\*(C`use base \*(AqMySpiffyBaseModule\*(Aq;\*(C'\fR syntax and
everything will work exactly the same. The only caveat is that Spiffy.pm must
already be loaded. That's because Spiffy rewires base.pm on the fly to do all
the Spiffy magics.
.PP
Spiffy has support for Ruby-like mixins with Perl6\-like roles. Just like
\&\f(CW\*(C`base\*(C'\fR you can use either of the following invocations:
.PP
.Vb 2
\&    use mixin \*(AqMySpiffyBaseModule\*(Aq;
\&    use MySpiffyBaseModule \-mixin;
.Ve
.PP
The second version will only work if the class being mixed in is a subclass of
Spiffy. The first version will work in all cases, as long as Spiffy has
already been loaded.
.PP
To limit the methods that get mixed in, use roles. (Hint: they work just like
an Exporter list):
.PP
.Vb 1
\&    use MySpiffyBaseModule \-mixin => qw(:basics x y !foo);
.Ve
.PP
In object oriented Perl almost every subroutine is a method. Each method gets
the object passed to it as its first argument. That means practically every
subroutine starts with the line:
.PP
.Vb 1
\&    my $self = shift;
.Ve
.PP
Spiffy provides a simple, optional filter mechanism to insert that line for
you, resulting in cleaner code. If you figure an average method has 10 lines
of code, that's 10% of your code! To turn this option on, you just use the \f(CW\*(C`\-
Base\*(C'\fR option instead of the \f(CW\*(C`\-base\*(C'\fR option, or add the \f(CW\*(C`\-selfless\*(C'\fR option.
If source filtering makes you queazy, don't use the feature. I personally find
it addictive in my quest for writing squeaky clean, maintainable code.
.PP
A useful feature of Spiffy is that it exports two functions: \f(CW\*(C`field\*(C'\fR and
\&\f(CW\*(C`const\*(C'\fR that can be used to declare the attributes of your class, and
automatically generate accessor methods for them. The only difference between
the two functions is that \f(CW\*(C`const\*(C'\fR attributes can not be modified; thus the
accessor is much faster.
.PP
One interesting aspect of \s-1OO\s0 programming is when a method calls the same
method from a parent class. This is generally known as calling a super method.
Perl's facility for doing this is butt ugly:
.PP
.Vb 5
\&    sub cleanup {
\&        my $self = shift;
\&        $self\->scrub;
\&        $self\->SUPER::cleanup(@_);
\&    }
.Ve
.PP
Spiffy makes it, er, super easy to call super methods. You just use the
\&\f(CW\*(C`super\*(C'\fR function. You don't need to pass it any arguments because it
automatically passes them on for you. Here's the same function with Spiffy:
.PP
.Vb 4
\&    sub cleanup {
\&        $self\->scrub;
\&        super;
\&    }
.Ve
.PP
Spiffy has a special method for parsing arguments called \f(CW\*(C`parse_arguments\*(C'\fR,
that it also uses for parsing its own arguments. You declare which arguments
are boolean (singletons) and which ones are paired, with two special methods
called \f(CW\*(C`boolean_arguments\*(C'\fR and \f(CW\*(C`paired_arguments\*(C'\fR. Parse arguments pulls out
the booleans and pairs and returns them in an anonymous hash, followed by a
list of the unmatched arguments.
.PP
Finally, Spiffy can export a few debugging functions \f(CW\*(C`WWW\*(C'\fR, \f(CW\*(C`XXX\*(C'\fR, \f(CW\*(C`YYY\*(C'\fR
and \f(CW\*(C`ZZZ\*(C'\fR. Each of them produces a \s-1YAML\s0 dump of its arguments. \s-1WWW\s0 warns the
output, \s-1XXX\s0 dies with the output, \s-1YYY\s0 prints the output, and \s-1ZZZ\s0 confesses the
output. If \s-1YAML\s0 doesn't suit your needs, you can switch all the dumps to
Data::Dumper format with the \f(CW\*(C`\-dumper\*(C'\fR option.
.PP
That's Spiffy!
.SH "EXPORTING"
.IX Header "EXPORTING"
Spiffy implements a completely new idea in Perl. Modules that act both as
object oriented classes and that also export functions. But it takes the
concept of Exporter.pm one step further; it walks the entire \f(CW@ISA\fR path of a
class and honors the export specifications of each module. Since Spiffy calls
on the Exporter module to do this, you can use all the fancy interface
features that Exporter has, including tags and negation.
.PP
Spiffy considers all the arguments that don't begin with a dash to comprise
the export specification.
.PP
.Vb 5
\&    package Vehicle;
\&    use Spiffy \-base;
\&    our $SERIAL_NUMBER = 0;
\&    our @EXPORT = qw($SERIAL_NUMBER);
\&    our @EXPORT_BASE = qw(tire horn);
\&
\&    package Bicycle;
\&    use Vehicle \-base, \*(Aq!field\*(Aq;
\&    $self\->inflate(tire);
.Ve
.PP
In this case, \f(CW\*(C`Bicycle\->isa(\*(AqVehicle\*(Aq)\*(C'\fR and also all the things that
\&\f(CW\*(C`Vehicle\*(C'\fR and \f(CW\*(C`Spiffy\*(C'\fR export, will go into \f(CW\*(C`Bicycle\*(C'\fR, except \f(CW\*(C`field\*(C'\fR.
.PP
Exporting can be very helpful when you've designed a system with hundreds of
classes, and you want them all to have access to some functions or constants
.PP
.Vb 1
\&      or variables. Just export them in your main base class and every subclass
.Ve
.PP
will get the functions they need.
.PP
You can do almost everything that Exporter does because Spiffy delegates the
job to Exporter (after adding some Spiffy magic). Spiffy offers a
\&\f(CW@EXPORT_BASE\fR variable which is like \f(CW@EXPORT\fR, but only for usages that
use \f(CW\*(C`\-base\*(C'\fR.
.SH "MIXINS & ROLES"
.IX Header "MIXINS & ROLES"
If you've done much \s-1OO\s0 programming in Perl you've probably used Multiple
Inheritance (\s-1MI\s0), and if you've done much \s-1MI\s0 you've probably run into weird
problems and headaches. Some languages like Ruby, attempt to resolve \s-1MI\s0
issues using a technique called mixins. Basically, all Ruby classes use only
Single Inheritance (\s-1SI\s0), and then \fImixin\fR functionality from other modules
if they need to.
.PP
Mixins can be thought of at a simplistic level as \fIimporting\fR the methods of
another class into your subclass. But from an implementation standpoint that's
not the best way to do it. Spiffy does what Ruby does. It creates an empty
anonymous class, imports everything into that class, and then chains the new
class into your \s-1SI ISA\s0 path. In other words, if you say:
.PP
.Vb 4
\&    package AAA;
\&    use BBB \-base;
\&    use CCC \-mixin;
\&    use DDD \-mixin;
.Ve
.PP
You end up with a single inheritance chain of classes like this:
.PP
.Vb 1
\&    AAA << AAA\-DDD << AAA\-CCC << BBB;
.Ve
.PP
\&\f(CW\*(C`AAA\-DDD\*(C'\fR and \f(CW\*(C`AAA\-CCC\*(C'\fR are the actual package names of the generated
classes. The nice thing about this style is that mixing in \s-1CCC\s0 doesn't clobber
any methods in \s-1AAA,\s0 and \s-1DDD\s0 doesn't conflict with \s-1AAA\s0 or \s-1CCC\s0 either. If you
mixed in a method in \s-1CCC\s0 that was also in \s-1AAA,\s0 you can still get to it by
using \f(CW\*(C`super\*(C'\fR.
.PP
When Spiffy mixes in \s-1CCC,\s0 it pulls in all the methods in \s-1CCC\s0 that do not begin
with an underscore. Actually it goes farther than that. If \s-1CCC\s0 is a subclass
it will pull in every method that \s-1CCC\s0 \f(CW\*(C`can\*(C'\fR do through inheritance. This is
very powerful, maybe too powerful.
.PP
To limit what you mixin, Spiffy borrows the concept of Roles from Perl6. The
term role is used more loosely in Spiffy though. It's much like an import list
that the Exporter module uses, and you can use groups (tags) and negation. If
the first element of your list uses negation, Spiffy will start with all the
methods that your mixin class can do.
.PP
.Vb 1
\&    use EEE \-mixin => qw(:tools walk !run !:sharp_tools);
.Ve
.PP
In this example, \f(CW\*(C`walk\*(C'\fR and \f(CW\*(C`run\*(C'\fR are methods that \s-1EEE\s0 can do, and \f(CW\*(C`tools\*(C'\fR
and \f(CW\*(C`sharp_tools\*(C'\fR are roles of class \s-1EEE.\s0 How does class \s-1EEE\s0 define these
roles? It very simply defines methods called \f(CW\*(C`_role_tools\*(C'\fR and
\&\f(CW\*(C`_role_sharp_tools\*(C'\fR which return lists of more methods. (And possibly other
roles!) The neat thing here is that since roles are just methods, they too can
be inherited. Take \fBthat\fR Perl6!
.SH "FILTERING"
.IX Header "FILTERING"
By using the \f(CW\*(C`\-Base\*(C'\fR flag instead of \f(CW\*(C`\-base\*(C'\fR you never need to write the
line:
.PP
.Vb 1
\&    my $self = shift;
.Ve
.PP
This statement is added to every subroutine in your class by using a source
filter. The magic is simple and fast, so there is litte performance penalty
for creating clean code on par with Ruby and Python.
.PP
.Vb 2
\&    package Example;
\&    use Spiffy \-Base;
\&
\&    sub crazy {
\&        $self\->nuts;
\&    }
\&    sub wacky { }
\&    sub new() {
\&        bless [], shift;
\&    }
.Ve
.PP
is exactly the same as:
.PP
.Vb 11
\&    package Example;
\&    use Spiffy \-base;
\&    use strict;use warnings;
\&    sub crazy {my $self = shift;
\&        $self\->nuts;
\&    }
\&    sub wacky {my $self = shift; }
\&    sub new {
\&        bless [], shift;
\&    }
\&    ;1;
.Ve
.PP
Note that the empty parens after the subroutine \f(CW\*(C`new\*(C'\fR keep it from having a
\&\f(CW$self\fR added. Also note that the extra code is added to existing lines to
ensure that line numbers are not altered.
.PP
\&\f(CW\*(C`\-Base\*(C'\fR also turns on the strict and warnings pragmas, and adds that annoying
\&'1;' line to your module.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
Spiffy now has support for private methods when you use the '\-Base' filter
mechanism. You just declare the subs with the \f(CW\*(C`my\*(C'\fR keyword, and call them
with a \f(CW\*(Aq$\*(Aq\fR in front. Like this:
.PP
.Vb 2
\&    package Keen;
\&    use SomethingSpiffy \-Base;
\&
\&    # normal public method
\&    sub swell {
\&        $self\->$stinky;
\&    }
\&
\&    # private lexical method. uncallable from outside this file.
\&    my sub stinky {
\&        ...
\&    }
.Ve
.SH "SPIFFY DEBUGGING"
.IX Header "SPIFFY DEBUGGING"
The \s-1XXX\s0 function is very handy for debugging because you can insert it almost
anywhere, and it will dump your data in nice clean \s-1YAML.\s0 Take the following
statement:
.PP
.Vb 1
\&    my @stuff = grep { /keen/ } $self\->find($a, $b);
.Ve
.PP
If you have a problem with this statement, you can debug it in any of the
following ways:
.PP
.Vb 4
\&    XXX my @stuff = grep { /keen/ } $self\->find($a, $b);
\&    my @stuff = XXX grep { /keen/ } $self\->find($a, $b);
\&    my @stuff = grep { /keen/ } XXX $self\->find($a, $b);
\&    my @stuff = grep { /keen/ } $self\->find(XXX $a, $b);
.Ve
.PP
\&\s-1XXX\s0 is easy to insert and remove. It is also a tradition to mark uncertain
areas of code with \s-1XXX.\s0 This will make the debugging dumpers easy to spot if
you forget to take them out.
.PP
\&\s-1WWW\s0 and \s-1YYY\s0 are nice because they dump their arguments and then return the
arguments. This way you can insert them into many places and still have the
code run as before. Use \s-1ZZZ\s0 when you need to die with both a \s-1YAML\s0 dump and a
full stack trace.
.PP
The debugging functions are exported by default if you use the \f(CW\*(C`\-base\*(C'\fR
option, but only if you have previously used the \f(CW\*(C`\-XXX\*(C'\fR option. To export all
4 functions use the export tag:
.PP
.Vb 1
\&    use SomeSpiffyModule \*(Aq:XXX\*(Aq;
.Ve
.PP
To force the debugging functions to use Data::Dumper instead of \s-1YAML:\s0
.PP
.Vb 1
\&    use SomeSpiffyModule \-dumper;
.Ve
.SH "SPIFFY FUNCTIONS"
.IX Header "SPIFFY FUNCTIONS"
This section describes the functions the Spiffy exports. The \f(CW\*(C`field\*(C'\fR,
\&\f(CW\*(C`const\*(C'\fR, \f(CW\*(C`stub\*(C'\fR and \f(CW\*(C`super\*(C'\fR functions are only exported when you use the
\&\f(CW\*(C`\-base\*(C'\fR or \f(CW\*(C`\-Base\*(C'\fR options.
.IP "field" 4
.IX Item "field"
Defines accessor methods for a field of your class:
.Sp
.Vb 2
\&    package Example;
\&    use Spiffy \-Base;
\&
\&    field \*(Aqfoo\*(Aq;
\&    field bar => [];
\&
\&    sub lalala {
\&        $self\->foo(42);
\&        push @{$self\->{bar}}, $self\->foo;
\&    }
.Ve
.Sp
The first parameter passed to \f(CW\*(C`field\*(C'\fR is the name of the attribute being
defined. Accessors can be given an optional default value. This value will be
returned if no value for the field has been set in the object.
.IP "const" 4
.IX Item "const"
.Vb 1
\&    const bar => 42;
.Ve
.Sp
The \f(CW\*(C`const\*(C'\fR function is similar to <field> except that it is immutable.
It also does not store data in the object. You probably always want to
give a \f(CW\*(C`const\*(C'\fR a default value, otherwise the generated method will be
somewhat useless.
.IP "stub" 4
.IX Item "stub"
.Vb 1
\&    stub \*(Aqcigar\*(Aq;
.Ve
.Sp
The \f(CW\*(C`stub\*(C'\fR function generates a method that will die with an appropriate
message. The idea is that subclasses must implement these methods so that the
stub methods don't get called.
.IP "super" 4
.IX Item "super"
If this function is called without any arguments, it will call the same method
that it is in, higher up in the \s-1ISA\s0 tree, passing it all the same arguments.
If it is called with arguments, it will use those arguments with \f(CW$self\fR in
the front. In other words, it just works like you'd expect.
.Sp
.Vb 5
\&    sub foo {
\&        super;             # Same as $self\->SUPER::foo(@_);
\&        super(\*(Aqhello\*(Aq);    # Same as $self\->SUPER::foo(\*(Aqhello\*(Aq);
\&        $self\->bar(42);
\&    }
\&
\&    sub new() {
\&        my $self = super;
\&        $self\->init;
\&        return $self;
\&    }
.Ve
.Sp
\&\f(CW\*(C`super\*(C'\fR will simply do nothing if there is no super method. Finally, \f(CW\*(C`super\*(C'\fR
does the right thing in \s-1AUTOLOAD\s0 subroutines.
.SH "METHODS"
.IX Header "METHODS"
This section lists all of the methods that any subclass of Spiffy
automatically inherits.
.IP "mixin" 4
.IX Item "mixin"
A method to mixin a class at runtime. Takes the same arguments as \f(CW\*(C`use mixin
\&...\*(C'\fR. Makes the target class a mixin of the caller.
.Sp
.Vb 2
\&    $self\->mixin(\*(AqSomeClass\*(Aq);
\&    $object\->mixin(\*(AqSomeOtherClass\*(Aq => \*(Aqsome_method\*(Aq);
.Ve
.IP "parse_arguments" 4
.IX Item "parse_arguments"
This method takes a list of arguments and groups them into pairs. It allows
for boolean arguments which may or may not have a value (defaulting to 1).
The method returns a hash reference of all the pairs as keys and values in
the hash. Any arguments that cannot be paired, are returned as a list. Here
is an example:
.Sp
.Vb 10
\&    sub boolean_arguments { qw(\-has_spots \-is_yummy) }
\&    sub paired_arguments { qw(\-name \-size) }
\&    my ($pairs, @others) = $self\->parse_arguments(
\&        \*(Aqred\*(Aq, \*(Aqwhite\*(Aq,
\&        \-name => \*(AqIngy\*(Aq,
\&        \-has_spots =>
\&        \-size => \*(Aqlarge\*(Aq,
\&        \*(Aqblack\*(Aq,
\&        \-is_yummy => 0,
\&    );
.Ve
.Sp
After this call, \f(CW$pairs\fR will contain:
.Sp
.Vb 6
\&    {
\&        \-name => \*(AqIngy\*(Aq,
\&        \-has_spots => 1,
\&        \-size => \*(Aqlarge\*(Aq,
\&        \-is_yummy => 0,
\&    }
.Ve
.Sp
and \f(CW@others\fR will contain 'red', 'white', and 'black'.
.IP "boolean_arguments" 4
.IX Item "boolean_arguments"
Returns the list of arguments that are recognized as being boolean. Override
this method to define your own list.
.IP "paired_arguments" 4
.IX Item "paired_arguments"
Returns the list of arguments that are recognized as being paired. Override
this method to define your own list.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
When you \f(CW\*(C`use\*(C'\fR the Spiffy module or a subclass of it, you can pass it a list
of arguments. These arguments are parsed using the \f(CW\*(C`parse_arguments\*(C'\fR method
described above. The special argument \f(CW\*(C`\-base\*(C'\fR, is used to make the current
package a subclass of the Spiffy module being used.
.PP
Any non-paired parameters act like a normal import list; just like those used
with the Exporter module.
.SH "USING SPIFFY WITH BASE.PM"
.IX Header "USING SPIFFY WITH BASE.PM"
The proper way to use a Spiffy module as a base class is with the \f(CW\*(C`\-base\*(C'\fR
parameter to the \f(CW\*(C`use\*(C'\fR statement. This differs from typical modules where you
would want to \f(CW\*(C`use base\*(C'\fR.
.PP
.Vb 3
\&    package Something;
\&    use Spiffy::Module \-base;
\&    use base \*(AqNonSpiffy::Module\*(Aq;
.Ve
.PP
Now it may be hard to keep track of what's Spiffy and what is not. Therefore
Spiffy has actually been made to work with base.pm. You can say:
.PP
.Vb 3
\&    package Something;
\&    use base \*(AqSpiffy::Module\*(Aq;
\&    use base \*(AqNonSpiffy::Module\*(Aq;
.Ve
.PP
\&\f(CW\*(C`use base\*(C'\fR is also very useful when your class is not an actual module (a
separate file) but just a package in some file that has already been loaded.
\&\f(CW\*(C`base\*(C'\fR will work whether the class is a module or not, while the \f(CW\*(C`\-base\*(C'\fR
syntax cannot work that way, since \f(CW\*(C`use\*(C'\fR always tries to load a module.
.SS "base.pm Caveats"
.IX Subsection "base.pm Caveats"
To make Spiffy work with base.pm, a dirty trick was played. Spiffy swaps
\&\f(CW\*(C`base::import\*(C'\fR with its own version. If the base modules are not Spiffy,
Spiffy calls the original base::import. If the base modules are Spiffy, then
Spiffy does its own thing.
.PP
There are two caveats.
.IP "Spiffy must be loaded first." 4
.IX Item "Spiffy must be loaded first."
If Spiffy is not loaded and \f(CW\*(C`use base\*(C'\fR is invoked on a Spiffy module, Spiffy
will die with a useful message telling the author to read this documentation.
That's because Spiffy needed to do the import swap beforehand.
.Sp
If you get this error, simply put a statement like this up front in your code:
.Sp
.Vb 1
\&    use Spiffy ();
.Ve
.IP "No Mixing" 4
.IX Item "No Mixing"
\&\f(CW\*(C`base.pm\*(C'\fR can take multiple arguments. And this works with Spiffy as long as
all the base classes are Spiffy, or they are all non-Spiffy. If they are
mixed, Spiffy will die. In this case just use separate \f(CW\*(C`use base\*(C'\fR statements.
.SH "SPIFFY TODO LIST"
.IX Header "SPIFFY TODO LIST"
Spiffy is a wonderful way to do \s-1OO\s0 programming in Perl, but it is still a work
in progress. New things will be added, and things that don't work well, might
be removed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy döt Net <ingy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004\-2014. Ingy döt Net.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
