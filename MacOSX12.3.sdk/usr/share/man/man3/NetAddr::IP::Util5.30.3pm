.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Util 3"
.TH Util 3 "2015-08-17" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
NetAddr::IP::Util \-\- IPv4/6 and 128 bit number utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use NetAddr::IP::Util qw(
\&        inet_aton
\&        inet_ntoa
\&        ipv6_aton
\&        ipv6_ntoa
\&        ipv6_n2x
\&        ipv6_n2d
\&        inet_any2n
\&        hasbits
\&        isIPv4
\&        isNewIPv4
\&        isAnyIPv4
\&        inet_n2dx
\&        inet_n2ad
\&        inet_pton
\&        inet_ntop
\&        inet_4map6
\&        ipv4to6
\&        mask4to6
\&        ipanyto6
\&        maskanyto6
\&        ipv6to4
\&        packzeros
\&        shiftleft
\&        addconst
\&        add128
\&        sub128
\&        notcontiguous
\&        bin2bcd
\&        bcd2bin
\&        mode
\&        AF_INET
\&        AF_INET6
\&        naip_gethostbyname
\&  );
\&
\&  use NetAddr::IP::Util qw(:all :inet :ipv4 :ipv6 :math)
\&
\&  :inet   =>    inet_aton, inet_ntoa, ipv6_aton
\&                ipv6_ntoa, ipv6_n2x, ipv6_n2d, 
\&                inet_any2n, inet_n2dx, inet_n2ad, 
\&                inet_pton, inet_ntop, inet_4map6, 
\&                ipv4to6, mask4to6, ipanyto6, packzeros
\&                maskanyto6, ipv6to4, naip_gethostbyname
\&
\&  :ipv4   =>    inet_aton, inet_ntoa
\&
\&  :ipv6   =>    ipv6_aton, ipv6_ntoa, ipv6_n2x, 
\&                ipv6_n2d, inet_any2n, inet_n2dx, 
\&                inet_n2ad, inet_pton, inet_ntop,
\&                inet_4map6, ipv4to6, mask4to6,
\&                ipanyto6, maskanyto6, ipv6to4,
\&                packzeros, naip_gethostbyname
\&
\&  :math   =>    hasbits, isIPv4, isNewIPv4, isAnyIPv4,
\&                addconst, add128, sub128, notcontiguous,
\&                bin2bcd, bcd2bin, shiftleft
\&
\&  $dotquad = inet_ntoa($netaddr);
\&  $netaddr = inet_aton($dotquad);
\&  $ipv6naddr = ipv6_aton($ipv6_text);
\&  $ipv6_text = ipvt_ntoa($ipv6naddr);
\&  $hex_text = ipv6_n2x($ipv6naddr);
\&  $dec_text = ipv6_n2d($ipv6naddr);
\&  $hex_text = packzeros($hex_text);
\&  $ipv6naddr = inet_any2n($dotquad or $ipv6_text);
\&  $ipv6naddr = inet_4map6($netaddr or $ipv6naddr);
\&  $rv = hasbits($bits128);
\&  $rv = isIPv4($bits128);
\&  $rv = isNewIPv4($bits128);
\&  $rv = isAnyIPv4($bits128);
\&  $dotquad or $hex_text = inet_n2dx($ipv6naddr);
\&  $dotquad or $dec_text = inet_n2ad($ipv6naddr);
\&  $netaddr = inet_pton($AF_family,$hex_text);
\&  $hex_text = inet_ntop($AF_family,$netaddr);
\&  $ipv6naddr = ipv4to6($netaddr);
\&  $ipv6naddr = mask4to6($netaddr);
\&  $ipv6naddr = ipanyto6($netaddr);
\&  $ipv6naddr = maskanyto6($netaddr);
\&  $netaddr = ipv6to4($pv6naddr);
\&  $bitsX2 = shiftleft($bits128,$n);
\&  $carry = addconst($ipv6naddr,$signed_32con);
\&  ($carry,$ipv6naddr)=addconst($ipv6naddr,$signed_32con);
\&  $carry = add128($ipv6naddr1,$ipv6naddr2);
\&  ($carry,$ipv6naddr)=add128($ipv6naddr1,$ipv6naddr2);
\&  $carry = sub128($ipv6naddr1,$ipv6naddr2);
\&  ($carry,$ipv6naddr)=sub128($ipv6naddr1,$ipv6naddr2);
\&  ($spurious,$cidr) = notcontiguous($mask128);
\&  $bcdtext = bin2bcd($bits128);
\&  $bits128 = bcd2bin($bcdtxt);
\&  $modetext = mode;
\&  ($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(NAME);
\&  $trueif = havegethostbyname2();
\&
\&  NetAddr::IP::Util::lower();
\&  NetAddr::IP::Util::upper();
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Un-tar the distribution in an appropriate directory and type:
.PP
.Vb 4
\&        perl Makefile.PL
\&        make
\&        make test
\&        make install
.Ve
.PP
\&\fBNetAddr::IP::Util\fR installs by default with its primary functions compiled
using Perl's \s-1XS\s0 extensions to build a 'C' library. If you do not have a 'C'
complier available or would like the slower Pure Perl version for some other
reason, then type:
.PP
.Vb 4
\&        perl Makefile.PL \-noxs
\&        make
\&        make test
\&        make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNetAddr::IP::Util\fR provides a suite of tools for manipulating and
converting IPv4 and IPv6 addresses into 128 bit string context and back to
text. The strings can be manipulated with Perl's logical operators:
.PP
.Vb 4
\&        and     &
\&        or      |
\&        xor     ^
\&                ~       compliment
.Ve
.PP
in the same manner as 'vec' strings.
.PP
The IPv6 functions support all rfc1884 formats.
.PP
.Vb 5
\&  i.e.  x:x:x:x:x:x:x:x:x
\&        x:x:x:x:x:x:x:d.d.d.d
\&        ::x:x:x
\&        ::x:d.d.d.d
\&  and so on...
.Ve
.IP "\(bu" 4
\&\f(CW$dotquad\fR = inet_ntoa($netaddr);
.Sp
Convert a packed IPv4 network address to a dot-quad \s-1IP\s0 address.
.Sp
.Vb 2
\&  input:        packed network address
\&  returns:      IP address i.e. 10.4.12.123
.Ve
.IP "\(bu" 4
\&\f(CW$netaddr\fR = inet_aton($dotquad);
.Sp
Convert a dot-quad \s-1IP\s0 address into an IPv4 packed network address.
.Sp
.Vb 2
\&  input:        IP address i.e. 192.5.16.32
\&  returns:      packed network address
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6addr\fR = ipv6_aton($ipv6_text);
.Sp
Takes an IPv6 address of the form described in rfc1884
and returns a 128 bit binary \s-1RDATA\s0 string.
.Sp
.Vb 2
\&  input:        ipv6 text
\&  returns:      128 bit RDATA string
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6_text\fR = ipv6_ntoa($ipv6naddr);
.Sp
Convert a 128 bit binary IPv6 address to compressed rfc 1884
text representation.
.Sp
.Vb 2
\&  input:        128 bit RDATA string
\&  returns:      ipv6 text
.Ve
.IP "\(bu" 4
\&\f(CW$hex_text\fR = ipv6_n2x($ipv6addr);
.Sp
Takes an IPv6 \s-1RDATA\s0 string and returns an 8 segment IPv6 hex address
.Sp
.Vb 2
\&  input:        128 bit RDATA string
\&  returns:      x:x:x:x:x:x:x:x
.Ve
.IP "\(bu" 4
\&\f(CW$dec_text\fR = ipv6_n2d($ipv6addr);
.Sp
Takes an IPv6 \s-1RDATA\s0 string and returns a mixed hex \- decimal IPv6 address
with the 6 uppermost chunks in hex and the lower 32 bits in dot-quad
representation.
.Sp
.Vb 2
\&  input:        128 bit RDATA string
\&  returns:      x:x:x:x:x:x:d.d.d.d
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = inet_any2n($dotquad or \f(CW$ipv6_text\fR);
.Sp
This function converts a text IPv4 or IPv6 address in text format in any
standard notation into a 128 bit IPv6 string address. It prefixes any
dot-quad address (if found) with '::' and passes it to \fBipv6_aton\fR.
.Sp
.Vb 2
\&  input:        dot\-quad or rfc1844 address
\&  returns:      128 bit IPv6 string
.Ve
.IP "\(bu" 4
\&\f(CW$rv\fR = hasbits($bits128);
.Sp
This function returns true if there are one's present in the 128 bit string
and false if all the bits are zero.
.Sp
.Vb 3
\&  i.e.  if (hasbits($bits128)) {
\&          &do_something;
\&        }
\&
\&  or    if (hasbits($bits128 & $mask128) {
\&          &do_something;
\&        }
.Ve
.Sp
This allows the implementation of logical functions of the form of:
.Sp
.Vb 2
\&        if ($bits128 & $mask128) {
\&            ...
\&
\&  input:        128 bit IPv6 string
\&  returns:      true if any bits are present
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = inet_4map6($netaddr or \f(CW$ipv6naddr\fR
.Sp
This function returns an ipV6 network address with the first 80 bits
set to zero and the next 16 bits set to one, while the last 32 bits
are filled with the ipV4 address.
.Sp
.Vb 3
\&  input:        ipV4 netaddr
\&            or  ipV6 netaddr
\&  returns:      ipV6 netaddr
\&
\&  returns: undef on error
.Ve
.Sp
An ipV6 network address must be in one of the two compatible ipV4
mapped address spaces. i.e.
.Sp
.Vb 1
\&        ::ffff::d.d.d.d    or    ::d.d.d.d
.Ve
.IP "\(bu" 4
\&\f(CW$rv\fR = isIPv4($bits128);
.Sp
This function returns true if there are no on bits present in the IPv6
portion of the 128 bit string and false otherwise.
.Sp
.Vb 1
\&  i.e.  the address must be of the form \- ::d.d.d.d
.Ve
.Sp
Note: this is an old and deprecated ipV4 compatible ipV6 address
.IP "\(bu" 4
\&\f(CW$rv\fR = isNewIPv4($bits128);
.Sp
This function return true if the IPv6 128 bit string is of the form
.Sp
.Vb 1
\&        ::ffff::d.d.d.d
.Ve
.IP "\(bu" 4
\&\f(CW$rv\fR = isAnyIPv4($bits128);
.Sp
This function return true if the IPv6 bit string is of the form
.Sp
.Vb 1
\&        ::d.d.d.d       or      ::ffff::d.d.d.d
.Ve
.IP "\(bu" 4
\&\f(CW$dotquad\fR or \f(CW$hex_text\fR = inet_n2dx($ipv6naddr);
.Sp
This function \fBdoes the right thing\fR and returns the text for either a
dot-quad IPv4 or a hex notation IPv6 address.
.Sp
.Vb 3
\&  input:        128 bit IPv6 string
\&  returns:      ddd.ddd.ddd.ddd
\&            or  x:x:x:x:x:x:x:x
.Ve
.IP "\(bu" 4
\&\f(CW$dotquad\fR or \f(CW$dec_text\fR = inet_n2ad($ipv6naddr);
.Sp
This function \fBdoes the right thing\fR and returns the text for either a
dot-quad IPv4 or a hex::decimal notation IPv6 address.
.Sp
.Vb 3
\&  input:        128 bit IPv6 string
\&  returns:      ddd.ddd.ddd.ddd
\&            or  x:x:x:x:x:x:ddd.ddd.ddd.dd
.Ve
.IP "\(bu" 4
\&\f(CW$netaddr\fR = inet_pton($AF_family,$hex_text);
.Sp
This function takes an \s-1IP\s0 address in IPv4 or IPv6 text format and converts it into
binary format. The type of \s-1IP\s0 address conversion is controlled by the \s-1FAMILY\s0
argument.
.IP "\(bu" 4
\&\f(CW$hex_text\fR = inet_ntop($AF_family,$netaddr);
.Sp
This function takes and \s-1IP\s0 address in binary format and converts it into
text format. The type of \s-1IP\s0 address conversion is controlled by the \s-1FAMILY\s0 
argument.
.Sp
\&\s-1NOTE:\s0 inet_ntop \s-1ALWAYS\s0 returns lowercase characters.
.IP "\(bu" 4
\&\f(CW$hex_text\fR = packzeros($hex_text);
.Sp
This function optimizes and rfc 1884 IPv6 hex address to reduce the number of
long strings of zero bits as specified in rfc 1884, 2.2 (2) by substituting
\&\fB::\fR for the first occurence of the longest string of zeros in the address.
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = ipv4to6($netaddr);
.Sp
Convert an ipv4 network address into an IPv6 network address.
.Sp
.Vb 2
\&  input:        32 bit network address
\&  returns:      128 bit network address
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = mask4to6($netaddr);
.Sp
Convert an ipv4 network address/mask into an ipv6 network mask.
.Sp
.Vb 2
\&  input:        32 bit network/mask address
\&  returns:      128 bit network/mask address
.Ve
.Sp
\&\s-1NOTE:\s0 returns the high 96 bits as one's
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = ipanyto6($netaddr);
.Sp
Similar to ipv4to6 except that this function takes either an IPv4 or IPv6
input and always returns a 128 bit IPv6 network address.
.Sp
.Vb 2
\&  input:        32 or 128 bit network address
\&  returns:      128 bit network address
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = maskanyto6($netaddr);
.Sp
Similar to mask4to6 except that this function takes either an IPv4 or IPv6
netmask and always returns a 128 bit IPv6 netmask.
.Sp
.Vb 2
\&  input:        32 or 128 bit network mask
\&  returns:      128 bit network mask
.Ve
.IP "\(bu" 4
\&\f(CW$netaddr\fR = ipv6to4($pv6naddr);
.Sp
Truncate the upper 96 bits of a 128 bit address and return the lower
32 bits. Returns an IPv4 address as returned by inet_aton.
.Sp
.Vb 2
\&  input:        128 bit network address
\&  returns:      32 bit inet_aton network address
.Ve
.IP "\(bu" 4
\&\f(CW$bitsXn\fR = shiftleft($bits128,$n);
.Sp
.Vb 3
\&  input:        128 bit string variable,
\&                number of shifts [optional]
\&  returns:      bits X n shifts
\&
\&  NOTE: a single shift is performed
\&        if $n is not specified
.Ve
.IP "\(bu" 4
addconst($ipv6naddr,$signed_32con);
.Sp
Add a signed constant to a 128 bit string variable.
.Sp
.Vb 4
\&  input:        128 bit IPv6 string,
\&                signed 32 bit integer
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.IP "\(bu" 4
add128($ipv6naddr1,$ipv6naddr2);
.Sp
Add two 128 bit string variables.
.Sp
.Vb 4
\&  input:        128 bit string var1,
\&                128 bit string var2
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.IP "\(bu" 4
sub128($ipv6naddr1,$ipv6naddr2);
.Sp
Subtract two 128 bit string variables.
.Sp
.Vb 4
\&  input:        128 bit string var1,
\&                128 bit string var2
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.Sp
Note: The carry from this operation is the result of adding the one's
complement of \s-1ARG2 +1\s0 to the \s-1ARG1.\s0 It is logically
\&\fB\s-1NOT\s0 borrow\fR.
.Sp
.Vb 2
\&        i.e.    if ARG1 >= ARG2 then carry = 1
\&        or      if ARG1  < ARG2 then carry = 0
.Ve
.IP "\(bu" 4
($spurious,$cidr) = notcontiguous($mask128);
.Sp
This function counts the bit positions remaining in the mask when the
rightmost '0's are removed.
.Sp
.Vb 6
\&        input:  128 bit netmask
\&        returns true if there are spurious
\&                    zero bits remaining in the
\&                    mask, false if the mask is
\&                    contiguous one\*(Aqs,
\&                128 bit cidr number
.Ve
.IP "\(bu" 4
\&\f(CW$bcdtext\fR = bin2bcd($bits128);
.Sp
Convert a 128 bit binary string into binary coded decimal text digits.
.Sp
.Vb 2
\&  input:        128 bit string variable
\&  returns:      string of bcd text digits
.Ve
.IP "\(bu" 4
\&\f(CW$bits128\fR = bcd2bin($bcdtxt);
.Sp
Convert a bcd text string to 128 bit string variable
.Sp
.Vb 2
\&  input:        string of bcd text digits
\&  returns:      128 bit string variable
.Ve
.IP "\(bu" 4
\&\f(CW$modetext\fR = mode;
.Sp
Returns the operating mode of this module.
.Sp
.Vb 3
\&        input:          none
\&        returns:        "Pure Perl"
\&                   or   "CC XS"
.Ve
.IP "\(bu" 4
($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(\s-1NAME\s0);
.Sp
Replacement for Perl's gethostbyname if Socket6 is available
.Sp
In \s-1ARRAY\s0 context, returns a list of five elements, the hostname or \s-1NAME,\s0
a space separated list of C_NAMES, \s-1AF\s0 family, length of the address
structure, and an array of one or more netaddr's
.Sp
In \s-1SCALAR\s0 context, returns the first netaddr.
.Sp
This function \s-1ALWAYS\s0 returns an IPv6 address, even on IPv4 only systems.
IPv4 addresses are mapped into IPv6 space in the form:
.Sp
.Vb 1
\&        ::FFFF:FFFF:d.d.d.d
.Ve
.Sp
This is \s-1NOT\s0 the expected result from Perl's gethostbyname2. It is instead equivalent to:
.Sp
.Vb 2
\&  On an IPv4 only system:
\&    $ipv6naddr = ipv4to6 scalar ( gethostbyname( name ));
\&
\&  On a system with Socket6 and a working gethostbyname2:
\&    $ipv6naddr = gethostbyname2( name, AF_INET6 );
\&  and if that fails, the IPv4 conversion above.
.Ve
.Sp
For a gethostbyname2 emulator that behave like Socket6, see:
Net::DNS::Dig
.IP "\(bu" 4
\&\f(CW$trueif\fR = \fBhavegethostbyname2()\fR;
.Sp
This function returns \s-1TRUE\s0 if Socket6 has a functioning \fBgethostbyname2\fR,
otherwise it returns \s-1FALSE.\s0 See the comments above about the behavior of
\&\fBnaip_gethostbyname\fR.
.IP "\(bu" 4
\&\fBNetAddr::IP::Util::lower()\fR;
.Sp
Return IPv6 strings in lowercase.
.IP "\(bu" 4
\&\fBNetAddr::IP::Util::upper()\fR;
.Sp
Return IPv6 strings in uppercase.  This is the default.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 4
\&  # convert any textual IP address into a 128 bit vector
\&  #
\&  sub text2vec {
\&    my($anyIP,$anyMask) = @_;
\&
\&  # not IPv4 bit mask
\&    my $notiv4 = ipv6_aton(\*(AqFFFF:FFFF:FFFF:FFFF:FFFF:FFFF::\*(Aq);
\&
\&    my $vecip   = inet_any2n($anyIP);
\&    my $mask    = inet_any2n($anyMask);
\&
\&  # extend mask bits for IPv4
\&    my $bits = 128;     # default
\&    unless (hasbits($mask & $notiv4)) {
\&      $mask |= $notiv4;
\&      $bits = 32;
\&    }
\&    return ($vecip, $mask, $bits);
\&  }
\&
\&  ... alternate implementation, a little faster
\&
\&  sub text2vec {
\&    my($anyIP,$anyMask) = @_;
\&
\&  # not IPv4 bit mask
\&    my $notiv4 = ipv6_aton(\*(AqFFFF:FFFF:FFFF:FFFF:FFFF:FFFF::\*(Aq);
\&
\&    my $vecip   = inet_any2n($anyIP);
\&    my $mask    = inet_any2n($anyMask);
\&
\&  # extend mask bits for IPv4
\&    my $bits = 128;     # default
\&    if (isIPv4($mask)) {
\&      $mask |= $notiv4;
\&      $bits = 32;
\&    }
\&    return ($vecip, $mask, $bits);
\&  }
\&
\&
\&  ... elsewhere
\&    $nip = {
\&        addr    => $vecip,
\&        mask    => $mask,
\&        bits    => $bits,
\&    };
\&
\&  # return network and broadcast addresses from IP and Mask
\&  #
\&  sub netbroad {
\&    my($nip) = shift;
\&    my $notmask = ~ $nip\->{mask};
\&    my $bcast   = $nip\->{addr} | $notmask;
\&    my $network = $nip\->{addr} & $nip\->{mask};
\&    return ($network, $broadcast);
\&  }
\&
\&  # check if address is within a network
\&  #
\&  sub within {
\&    my($nip,$net) = @_;
\&    my $addr = $nip\->{addr}
\&    my($nw,$bc) = netbroad($net);
\&  # arg1 >= arg2, sub128 returns true
\&    return (sub128($addr,$nw) && sub128($bc,$addr))
\&        ? 1 : 0;
\&  }
\&
\&  # truely hard way to do $ip++
\&  # add a constant, wrapping at netblock boundaries
\&  # to subtract the constant, negate it before calling
\&  # \*(Aqaddwrap\*(Aq since \*(Aqaddconst\*(Aq will extend the sign bits
\&  #
\&  sub addwrap {
\&    my($nip,$const) = @_;
\&    my $addr    = $nip\->{addr};
\&    my $mask    = $nip\->{mask};
\&    my $bits    = $nip\->{bits};
\&    my $notmask = ~ $mask;
\&    my $hibits  = $addr & $mask;
\&    $addr = addconst($addr,$const);
\&    my $wraponly = $addr & $notmask;
\&    my $newip = {
\&        addr    => $hibits | $wraponly,
\&        mask    => $mask,
\&        bits    => $bits,
\&    };
\&    # bless $newip as appropriate
\&    return $newip;
\&  }
\&
\&  # something more useful
\&  # increment a /24 net to the NEXT net at the boundry
\&
\&  my $nextnet = 256;    # for /24
\&  LOOP:
\&  while (...continuing) {
\&    your code....
\&    ...
\&    my $lastip = $ip\-copy();
\&    $ip++;
\&    if ($ip < $lastip) {        # host part wrapped?
\&  # discard carry
\&      (undef, $ip\->{addr} = addconst($ip\->{addr}, $nextnet);
\&    }
\&    next LOOP;
\&  }
.Ve
.SH "EXPORT_OK"
.IX Header "EXPORT_OK"
.Vb 10
\&        inet_aton
\&        inet_ntoa
\&        ipv6_aton
\&        ipv6_ntoa
\&        ipv6_n2x
\&        ipv6_n2d
\&        inet_any2n
\&        hasbits
\&        isIPv4
\&        isNewIPv4
\&        isAnyIPv4
\&        inet_n2dx
\&        inet_n2ad
\&        inet_pton
\&        inet_ntop
\&        inet_4map6
\&        ipv4to6
\&        mask4to6
\&        ipanyto6
\&        maskanyto6
\&        ipv6to4
\&        packzeros
\&        shiftleft
\&        addconst
\&        add128
\&        sub128
\&        notcontiguous
\&        bin2bcd
\&        bcd2bin
\&        mode
\&        naip_gethostbyname
\&        havegethostbyname2
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003 \- 2014, Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.
\&        51 Franklin Street, Fifth Floor
\&        Boston, MA 02110\-1301 USA.
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBNetAddr::IP\fR\|(3), \fBNetAddr::IP::Lite\fR\|(3), \fBNetAddr::IP::InetBase\fR\|(3)
