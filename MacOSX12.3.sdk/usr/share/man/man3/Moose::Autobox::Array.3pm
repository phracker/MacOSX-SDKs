.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Autobox::Array 3pm"
.TH Moose::Autobox::Array 3pm "2016-05-03" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Autobox::Array \- the Array role
.SH "VERSION"
.IX Header "VERSION"
version 0.16
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Moose::Autobox;
\&
\&  [ 1..5 ]\->isa(\*(AqARRAY\*(Aq); # true
\&  [ a..z ]\->does(\*(AqMoose::Autobox::Array\*(Aq); # true
\&  [ 0..2 ]\->does(\*(AqMoose::Autobox::List\*(Aq); # true
\&
\&  print "Squares: " . [ 1 .. 10 ]\->map(sub { $_ * $_ })\->join(\*(Aq, \*(Aq);
\&
\&  print [ 1, \*(Aqnumber\*(Aq ]\->sprintf(\*(Aq%d is the loneliest %s\*(Aq);
\&
\&  print ([ 1 .. 5 ]\->any == 3) ? \*(Aqtrue\*(Aq : \*(Aqfalse\*(Aq; # prints \*(Aqtrue\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a role to describe operations on the Array type.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """pop""" 4
.el .IP "\f(CWpop\fR" 4
.IX Item "pop"
.PD 0
.ie n .IP """push ($value)""" 4
.el .IP "\f(CWpush ($value)\fR" 4
.IX Item "push ($value)"
.ie n .IP """shift""" 4
.el .IP "\f(CWshift\fR" 4
.IX Item "shift"
.ie n .IP """unshift ($value)""" 4
.el .IP "\f(CWunshift ($value)\fR" 4
.IX Item "unshift ($value)"
.ie n .IP """delete ($index)""" 4
.el .IP "\f(CWdelete ($index)\fR" 4
.IX Item "delete ($index)"
.ie n .IP """sprintf ($format_string)""" 4
.el .IP "\f(CWsprintf ($format_string)\fR" 4
.IX Item "sprintf ($format_string)"
.ie n .IP """slice (@indices)""" 4
.el .IP "\f(CWslice (@indices)\fR" 4
.IX Item "slice (@indices)"
.ie n .IP """flatten""" 4
.el .IP "\f(CWflatten\fR" 4
.IX Item "flatten"
.ie n .IP """flatten_deep ($depth)""" 4
.el .IP "\f(CWflatten_deep ($depth)\fR" 4
.IX Item "flatten_deep ($depth)"
.ie n .IP """first""" 4
.el .IP "\f(CWfirst\fR" 4
.IX Item "first"
.ie n .IP """last""" 4
.el .IP "\f(CWlast\fR" 4
.IX Item "last"
.PD
.SS "Indexed implementation"
.IX Subsection "Indexed implementation"
.ie n .IP """at ($index)""" 4
.el .IP "\f(CWat ($index)\fR" 4
.IX Item "at ($index)"
.PD 0
.ie n .IP """put ($index, $value)""" 4
.el .IP "\f(CWput ($index, $value)\fR" 4
.IX Item "put ($index, $value)"
.ie n .IP """exists ($index)""" 4
.el .IP "\f(CWexists ($index)\fR" 4
.IX Item "exists ($index)"
.ie n .IP """keys""" 4
.el .IP "\f(CWkeys\fR" 4
.IX Item "keys"
.ie n .IP """values""" 4
.el .IP "\f(CWvalues\fR" 4
.IX Item "values"
.ie n .IP """kv""" 4
.el .IP "\f(CWkv\fR" 4
.IX Item "kv"
.ie n .IP """each""" 4
.el .IP "\f(CWeach\fR" 4
.IX Item "each"
.ie n .IP """each_key""" 4
.el .IP "\f(CWeach_key\fR" 4
.IX Item "each_key"
.ie n .IP """each_value""" 4
.el .IP "\f(CWeach_value\fR" 4
.IX Item "each_value"
.ie n .IP """each_n_values ($n, $callback)""" 4
.el .IP "\f(CWeach_n_values ($n, $callback)\fR" 4
.IX Item "each_n_values ($n, $callback)"
.PD
.SS "List implementation"
.IX Subsection "List implementation"
.ie n .IP """head""" 4
.el .IP "\f(CWhead\fR" 4
.IX Item "head"
.PD 0
.ie n .IP """tail""" 4
.el .IP "\f(CWtail\fR" 4
.IX Item "tail"
.ie n .IP """join (?$seperator)""" 4
.el .IP "\f(CWjoin (?$seperator)\fR" 4
.IX Item "join (?$seperator)"
.ie n .IP """length""" 4
.el .IP "\f(CWlength\fR" 4
.IX Item "length"
.ie n .IP """map (\e&block)""" 4
.el .IP "\f(CWmap (\e&block)\fR" 4
.IX Item "map (&block)"
.ie n .IP """grep (\e&block)""" 4
.el .IP "\f(CWgrep (\e&block)\fR" 4
.IX Item "grep (&block)"
.PD
Note that, in both the above, \f(CW$_\fR is in scope within the code block, as well as
being passed as \f(CW$_\fR[0]. As per CORE::map and CORE::grep, \f(CW$_\fR is an alias to
the list value, so can be used to modify the list, viz:
.Sp
.Vb 1
\&    use Moose::Autobox;
\&
\&    my $foo = [1, 2, 3];
\&    $foo\->map( sub {$_++} );
\&    print $foo\->dump;
.Ve
.Sp
yields
.Sp
.Vb 5
\&   $VAR1 = [
\&             2,
\&             3,
\&             4
\&           ];
.Ve
.ie n .IP """reverse""" 4
.el .IP "\f(CWreverse\fR" 4
.IX Item "reverse"
.PD 0
.ie n .IP """sort (?\e&block)""" 4
.el .IP "\f(CWsort (?\e&block)\fR" 4
.IX Item "sort (?&block)"
.PD
.SS "Junctions"
.IX Subsection "Junctions"
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
.PD 0
.ie n .IP """any""" 4
.el .IP "\f(CWany\fR" 4
.IX Item "any"
.ie n .IP """none""" 4
.el .IP "\f(CWnone\fR" 4
.IX Item "none"
.ie n .IP """one""" 4
.el .IP "\f(CWone\fR" 4
.IX Item "one"
.ie n .IP """meta""" 4
.el .IP "\f(CWmeta\fR" 4
.IX Item "meta"
.ie n .IP """print""" 4
.el .IP "\f(CWprint\fR" 4
.IX Item "print"
.ie n .IP """say""" 4
.el .IP "\f(CWsay\fR" 4
.IX Item "say"
.PD
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Moose-Autobox>
(or bug\-Moose\-Autobox@rt.cpan.org <mailto:bug-Moose-Autobox@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan.little@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
