.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Digest::CRC 3"
.TH Digest::CRC 3 "2017-02-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Digest::CRC \- Generic CRC functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Functional style
\&
\&  use Digest::CRC qw(crc64 crc32 crc16 crcccitt crc crc8 crcopenpgparmor);
\&  $crc = crc64("123456789");
\&  $crc = crc32("123456789");
\&  $crc = crc16("123456789");
\&  $crc = crcccitt("123456789");
\&  $crc = crc8("123456789");
\&  $crc = crcopenpgparmor("123456789");
\&
\&  $crc = crc($input,$width,$init,$xorout,$refout,$poly,$refin,$cont);
\&
\&
\&  # add data to existing
\&
\&  $crc = crc32("ABCD", $crc);
\&
\&
\&  # OO style
\&  use Digest::CRC;
\&
\&  $ctx = Digest::CRC\->new(type=>"crc16");
\&  $ctx = Digest::CRC\->new(width=>16, init=>0x2345, xorout=>0x0000, 
\&                          refout=>1, poly=>0x8005, refin=>1, cont=>1);
\&
\&  $ctx\->add($data);
\&  $ctx\->addfile(*FILE);
\&
\&  $digest = $ctx\->digest;
\&  $digest = $ctx\->hexdigest;
\&  $digest = $ctx\->b64digest;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBDigest::CRC\fR module calculates \s-1CRC\s0 sums of all sorts.
It contains wrapper functions with the correct parameters for CRC-CCITT,
\&\s-1CRC\-16, CRC\-32\s0 and \s-1CRC\-64,\s0 as well as the \s-1CRC\s0 used in OpenPGP's
ASCII-armored checksum.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
https://tools.ietf.org/html/rfc4880#section\-6
.SH "AUTHOR"
.IX Header "AUTHOR"
Oliver Maul, oli@42.nu
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
\&\s-1CRC\s0 algorithm code taken from \*(L"A \s-1PAINLESS GUIDE TO CRC ERROR DETECTION\s0
 \s-1ALGORITHMS\*(R".\s0
.PP
The author of this package disclaims all copyrights and 
releases it into the public domain.
