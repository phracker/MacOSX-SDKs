.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Regexp::Common::delimited 3"
.TH Regexp::Common::delimited 3 "2017-06-02" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Regexp::Common::delimited \-\- provides a regex for delimited strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Regexp::Common qw /delimited/;
\&
\&    while (<>) {
\&        /$RE{delimited}{\-delim=>\*(Aq"\*(Aq}/  and print \*(Aqa \e" delimited string\*(Aq;
\&        /$RE{delimited}{\-delim=>\*(Aq/\*(Aq}/  and print \*(Aqa \e/ delimited string\*(Aq;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please consult the manual of Regexp::Common for a general description
of the works of this interface.
.PP
Do not use this module directly, but load it via \fIRegexp::Common\fR.
.ie n .SS "$RE{delimited}{\-delim}{\-cdelim}{\-esc}"
.el .SS "\f(CW$RE{delimited}{\-delim}{\-cdelim}{\-esc}\fP"
.IX Subsection "$RE{delimited}{-delim}{-cdelim}{-esc}"
Returns a pattern that matches a single-character-delimited substring,
with optional internal escaping of the delimiter.
.PP
When \f(CW\*(C`\-delim =\*(C'\fR \fIS\fR> is specified, each character in the sequence \fIS\fR is
a possible delimiter. There is no default delimiter, so this flag must always
be specified.
.PP
By default, the closing delimiter is the same character as the opening
delimiter. If this is not wanted, for instance, if you want to match
a string with symmetric delimiters, you can specify the closing delimiter(s)
with \f(CW\*(C`\-cdelim =\*(C'\fR \fIS\fR>. Each character in \fIS\fR is matched with the
corresponding character supplied with the \f(CW\*(C`\-delim\*(C'\fR option. If the \f(CW\*(C`\-cdelim\*(C'\fR
option has less characters than the \f(CW\*(C`\-delim\*(C'\fR option, the last character
is repeated as often as necessary. If the \f(CW\*(C`\-cdelim\*(C'\fR option has more 
characters than the \f(CW\*(C`\-delim\*(C'\fR option, the extra characters are ignored.
.PP
If \f(CW\*(C`\-esc =\*(C'\fR \fIS\fR> is specified, each character in the sequence \fIS\fR is
the delimiter for the corresponding character in the \f(CW\*(C`\-delim=\f(CIS\f(CW\*(C'\fR list.
The default escape is backslash.
.PP
For example:
.PP
.Vb 5
\&   $RE{delimited}{\-delim=>\*(Aq"\*(Aq}               # match "a \e" delimited string"
\&   $RE{delimited}{\-delim=>\*(Aq"\*(Aq}{\-esc=>\*(Aq"\*(Aq}    # match "a "" delimited string"
\&   $RE{delimited}{\-delim=>\*(Aq/\*(Aq}               # match /a \e/ delimited string/
\&   $RE{delimited}{\-delim=>q{\*(Aq"}}             # match "string" or \*(Aqstring\*(Aq
\&   $RE{delimited}{\-delim=>"("}{\-cdelim=>")"} # match (string)
.Ve
.PP
Under \f(CW\*(C`\-keep\*(C'\fR (See Regexp::Common):
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
captures the entire match
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
captures the opening delimiter
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
captures delimited portion of the string
.ie n .IP "$4" 4
.el .IP "\f(CW$4\fR" 4
.IX Item "$4"
captures the closing delimiter
.ie n .SS "$RE{quoted}{\-esc}"
.el .SS "\f(CW$RE\fP{quoted}{\-esc}"
.IX Subsection "$RE{quoted}{-esc}"
A synonym for \f(CW\*(C`$RE {delimited} {\-delim => q {\*(Aq"\`}} {...}\*(C'\fR.
.ie n .SS "$RE {bquoted} {\-esc}"
.el .SS "\f(CW$RE\fP {bquoted} {\-esc}"
.IX Subsection "$RE {bquoted} {-esc}"
This is a pattern which matches delimited strings, where the delimiters
are a set of matching brackets. Currently, this comes 85 pairs. This
includes the 60 pairs of bidirection paired brackets, as listed
in <http://www.unicode.org/Public/UNIDATA/BidiBrackets.txt>.
.PP
The other 25 pairs are the quotation marks, the double quotation
marks, the single and double pointing quoation marks, the heavy
single and double commas, 4 pairs of top-bottom parenthesis and
brackets, 9 pairs of presentation form for vertical brackets,
and the low paraphrase, raised omission, substitution, double
substitution, and transposition brackets.
.PP
In a future update, pairs may be added (or deleted).
.PP
This pattern requires perl 5.14.0 or higher.
.PP
For a full list of bracket pairs, inspect the output of 
\&\f(CW\*(C`Regexp::Common::delimited::bracket_pair ()\*(C'\fR, which returns
a list of two element arrays, each holding the Unicode names of
matching pair of delimiters.
.PP
The \f(CW\*(C`{\-esc => \f(CIS\f(CW }\*(C'\fR works as in the \f(CW\*(C`$RE {delimited}\*(C'\fR pattern.
.PP
If \f(CW\*(C`{\-keep}\*(C'\fR is given, the following things will be captured:
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
captures the entire match
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
captures the opening delimiter
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
captures delimited portion of the string
.ie n .IP "$4" 4
.el .IP "\f(CW$4\fR" 4
.IX Item "$4"
captures the closing delimiter
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Regexp::Common for a general description of how to use this interface.
.SH "AUTHOR"
.IX Header "AUTHOR"
Damian Conway (damian@conway.org)
.SH "MAINTENANCE"
.IX Header "MAINTENANCE"
This package is maintained by Abigail (\fIregexp\-common@abigail.be\fR).
.SH "BUGS AND IRRITATIONS"
.IX Header "BUGS AND IRRITATIONS"
Bound to be plenty.
.PP
For a start, there are many common regexes missing.
Send them in to \fIregexp\-common@abigail.be\fR.
.SH "LICENSE and COPYRIGHT"
.IX Header "LICENSE and COPYRIGHT"
This software is Copyright (c) 2001 \- 2017, Damian Conway and Abigail.
.PP
This module is free software, and maybe used under any of the following
licenses:
.PP
.Vb 4
\& 1) The Perl Artistic License.     See the file COPYRIGHT.AL.
\& 2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
\& 3) The BSD License.               See the file COPYRIGHT.BSD.
\& 4) The MIT License.               See the file COPYRIGHT.MIT.
.Ve
