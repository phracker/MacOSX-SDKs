.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Digest::HMAC 3"
.TH Digest::HMAC 3 "2011-07-25" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Digest::HMAC \- Keyed\-Hashing for Message Authentication
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # Functional style
\& use Digest::HMAC qw(hmac hmac_hex);
\& $digest = hmac($data, $key, \e&myhash);
\& print hmac_hex($data, $key, \e&myhash);
\&
\& # OO style
\& use Digest::HMAC;
\& $hmac = Digest::HMAC\->new($key, "Digest::MyHash");
\&
\& $hmac\->add($data);
\& $hmac\->addfile(*FILE);
\&
\& $digest = $hmac\->digest;
\& $digest = $hmac\->hexdigest;
\& $digest = $hmac\->b64digest;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1HMAC\s0 is used for message integrity checks between two parties that
share a secret key, and works in combination with some other Digest
algorithm, usually \s-1MD5\s0 or \s-1SHA\-1.\s0  The \s-1HMAC\s0 mechanism is described in
\&\s-1RFC 2104.\s0
.PP
\&\s-1HMAC\s0 follow the common \f(CW\*(C`Digest::\*(C'\fR interface, but the constructor
takes the secret key and the name of some other simple \f(CW\*(C`Digest::\*(C'\fR
as argument.
.PP
The \fBhmac()\fR and \fBhmac_hex()\fR functions and the Digest::HMAC\->\fBnew()\fR constructor
takes an optional \f(CW$blocksize\fR argument as well.  The \s-1HMAC\s0 algorithm assumes the
digester to hash by iterating a basic compression function on blocks of data
and the \f(CW$blocksize\fR should match the byte-length of such blocks.
.PP
The default \f(CW$blocksize\fR is 64 which is suitable for the \s-1MD5\s0 and \s-1SHA\-1\s0 digest
functions.  For stronger algorithms the blocksize probably needs to be
increased.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Digest::HMAC_MD5, Digest::HMAC_SHA1
.PP
\&\s-1RFC 2104\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@ti.com>, Gisle Aas <gisle@aas.no>
