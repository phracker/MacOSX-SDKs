.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Manual::FAQ 3"
.TH Moose::Manual::FAQ 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Manual::FAQ \- Frequently asked questions about Moose
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "FREQUENTLY ASKED QUESTIONS"
.IX Header "FREQUENTLY ASKED QUESTIONS"
.SS "Module Stability"
.IX Subsection "Module Stability"
\fIIs Moose \*(L"production ready\*(R"?\fR
.IX Subsection "Is Moose production ready?"
.PP
Yes! Many sites with household names are using Moose to build
high-traffic services. Countless others are using Moose in production.
See <http://moose.iinteractive.com/about.html#organizations> for
a partial list.
.PP
As of this writing, Moose is a dependency of several hundred \s-1CPAN\s0
modules. <https://metacpan.org/requires/module/Moose>
.PP
\fIIs Moose's \s-1API\s0 stable?\fR
.IX Subsection "Is Moose's API stable?"
.PP
Yes. The sugary \s-1API,\s0 the one 95% of users will interact with, is
\&\fBvery stable\fR. Any changes will be \fB100% backwards compatible\fR.
.PP
The meta \s-1API\s0 is less set in stone. We reserve the right to tweak
parts of it to improve efficiency or consistency. This will not be
done lightly. We do perform deprecation cycles. We \fIreally\fR
do not like making ourselves look bad by breaking your code.
Submitting test cases is the best way to ensure that your code is not
inadvertently broken by refactoring.
.PP
\fII heard Moose is slow, is this true?\fR
.IX Subsection "I heard Moose is slow, is this true?"
.PP
Again, this one is tricky, so Yes \fIand\fR No.
.PP
Firstly, \fInothing\fR in life is free, and some Moose features do cost
more than others. It is also the policy of Moose to \fBonly charge you
for the features you use\fR, and to do our absolute best to not place
any extra burdens on the execution of your code for features you are
not using. Of course using Moose itself does involve some overhead,
but it is mostly compile time. At this point we do have some options
available for getting the speed you need.
.PP
Currently we provide the option of making your classes immutable as a
means of boosting speed. This will mean a slightly larger compile time
cost, but the runtime speed increase (especially in object
construction) is pretty significant. This can be done with the
following code:
.PP
.Vb 1
\&  MyClass\->meta\->make_immutable();
.Ve
.SS "Constructors"
.IX Subsection "Constructors"
\fIHow do I write custom constructors with Moose?\fR
.IX Subsection "How do I write custom constructors with Moose?"
.PP
Ideally, you should never write your own \f(CW\*(C`new\*(C'\fR method, and should use
Moose's other features to handle your specific object construction
needs. Here are a few scenarios, and the Moose way to solve them;
.PP
If you need to call initialization code post instance construction,
then use the \f(CW\*(C`BUILD\*(C'\fR method. This feature is taken directly from Perl
6. Every \f(CW\*(C`BUILD\*(C'\fR method in your inheritance chain is called (in the
correct order) immediately after the instance is constructed.  This
allows you to ensure that all your superclasses are initialized
properly as well. This is the best approach to take (when possible)
because it makes subclassing your class much easier.
.PP
If you need to affect the constructor's parameters prior to the
instance actually being constructed, you have a number of options.
.PP
To change the parameter processing as a whole, you can use the
\&\f(CW\*(C`BUILDARGS\*(C'\fR method. The default implementation accepts key/value
pairs or a hash reference. You can override it to take positional
args, or any other format
.PP
To change the handling of individual parameters, there are \fIcoercions\fR (See
the Moose::Cookbook::Basics::HTTP_SubtypesAndCoercion for a complete
example and explanation of coercions). With coercions it is possible to morph
argument values into the correct expected types. This approach is the most
flexible and robust, but does have a slightly higher learning curve.
.PP
\fIHow do I make non-Moose constructors work with Moose?\fR
.IX Subsection "How do I make non-Moose constructors work with Moose?"
.PP
Usually the correct approach to subclassing a non-Moose class is
delegation.  Moose makes this easy using the \f(CW\*(C`handles\*(C'\fR keyword,
coercions, and \f(CW\*(C`lazy_build\*(C'\fR, so subclassing is often not the ideal
route.
.PP
That said, if you really need to inherit from a non-Moose class, see
Moose::Cookbook::Basics::DateTime_ExtendingNonMooseParent for an example of how to do it,
or take a look at \*(L"MooseX::NonMoose\*(R" in Moose::Manual::MooseX.
.SS "Accessors"
.IX Subsection "Accessors"
\fIHow do I tell Moose to use get/set accessors?\fR
.IX Subsection "How do I tell Moose to use get/set accessors?"
.PP
The easiest way to accomplish this is to use the \f(CW\*(C`reader\*(C'\fR and
\&\f(CW\*(C`writer\*(C'\fR attribute options:
.PP
.Vb 5
\&  has \*(Aqbar\*(Aq => (
\&      isa    => \*(AqBaz\*(Aq,
\&      reader => \*(Aqget_bar\*(Aq,
\&      writer => \*(Aqset_bar\*(Aq,
\&  );
.Ve
.PP
Moose will still take advantage of type constraints, triggers, etc.
when creating these methods.
.PP
If you do not like this much typing, and wish it to be a default for
your classes, please see MooseX::FollowPBP. This extension will
allow you to write:
.PP
.Vb 4
\&  has \*(Aqbar\*(Aq => (
\&      isa => \*(AqBaz\*(Aq,
\&      is  => \*(Aqrw\*(Aq,
\&  );
.Ve
.PP
Moose will create separate \f(CW\*(C`get_bar\*(C'\fR and \f(CW\*(C`set_bar\*(C'\fR methods instead
of a single \f(CW\*(C`bar\*(C'\fR method.
.PP
If you like \f(CW\*(C`bar\*(C'\fR and \f(CW\*(C`set_bar\*(C'\fR, see
MooseX::SemiAffordanceAccessor.
.PP
\&\s-1NOTE:\s0 This \fBcannot\fR be set globally in Moose, as that would break
other classes which are built with Moose. You can still save on typing
by defining a new \f(CW\*(C`MyApp::Moose\*(C'\fR that exports Moose's sugar and then
turns on MooseX::FollowPBP. See
Moose::Cookbook::Extending::Mooseish_MooseSugar.
.PP
\fIHow can I inflate/deflate values in accessors?\fR
.IX Subsection "How can I inflate/deflate values in accessors?"
.PP
Well, the first question to ask is if you actually need both inflate
and deflate.
.PP
If you only need to inflate, then we suggest using coercions. Here is
some basic sample code for inflating a DateTime object:
.PP
.Vb 1
\&  class_type \*(AqDateTime\*(Aq;
\&
\&  coerce \*(AqDateTime\*(Aq
\&      => from \*(AqStr\*(Aq
\&      => via { DateTime::Format::MySQL\->parse_datetime($_) };
\&
\&  has \*(Aqtimestamp\*(Aq => (is => \*(Aqrw\*(Aq, isa => \*(AqDateTime\*(Aq, coerce => 1);
.Ve
.PP
This creates a custom type for DateTime objects, then attaches
a coercion to that type. The \f(CW\*(C`timestamp\*(C'\fR attribute is then told
to expect a \f(CW\*(C`DateTime\*(C'\fR type, and to try to coerce it. When a \f(CW\*(C`Str\*(C'\fR
type is given to the \f(CW\*(C`timestamp\*(C'\fR accessor, it will attempt to
coerce the value into a \f(CW\*(C`DateTime\*(C'\fR object using the code in found
in the \f(CW\*(C`via\*(C'\fR block.
.PP
For a more comprehensive example of using coercions, see the
Moose::Cookbook::Basics::HTTP_SubtypesAndCoercion.
.PP
If you need to deflate your attribute's value, the current best
practice is to add an \f(CW\*(C`around\*(C'\fR modifier to your accessor:
.PP
.Vb 3
\&  # a timestamp which stores as
\&  # seconds from the epoch
\&  has \*(Aqtimestamp\*(Aq => (is => \*(Aqrw\*(Aq, isa => \*(AqInt\*(Aq);
\&
\&  around \*(Aqtimestamp\*(Aq => sub {
\&      my $next = shift;
\&      my $self = shift;
\&
\&      return $self\->$next unless @_;
\&
\&      # assume we get a DateTime object ...
\&      my $timestamp = shift;
\&      return $self\->$next( $timestamp\->epoch );
\&  };
.Ve
.PP
It is also possible to do deflation using coercion, but this tends to
get quite complex and require many subtypes. An example of this is
outside the scope of this document, ask on #moose or send a mail to
the list.
.PP
Still another option is to write a custom attribute metaclass, which
is also outside the scope of this document, but we would be happy to
explain it on #moose or the mailing list.
.SS "Method Modifiers"
.IX Subsection "Method Modifiers"
\fIHow can I affect the values in \f(CI@_\fI using \f(CI\*(C`before\*(C'\fI?\fR
.IX Subsection "How can I affect the values in @_ using before?"
.PP
You can't, actually: \f(CW\*(C`before\*(C'\fR only runs before the main method, and
it cannot easily affect the method's execution.
.PP
You similarly can't use \f(CW\*(C`after\*(C'\fR to affect the return value of a
method.
.PP
We limit \f(CW\*(C`before\*(C'\fR and \f(CW\*(C`after\*(C'\fR because this lets you write more
concise code. You do not have to worry about passing \f(CW@_\fR to the
original method, or forwarding its return value (being careful to
preserve context).
.PP
The \f(CW\*(C`around\*(C'\fR method modifier has neither of these limitations, but is
a little more verbose.
.PP
Alternatively, the MooseX::Mangle extension provides the
\&\f(CW\*(C`mangle_args\*(C'\fR function, which does allow you to affect \f(CW@_\fR.
.PP
\fICan I use \f(CI\*(C`before\*(C'\fI to stop execution of a method?\fR
.IX Subsection "Can I use before to stop execution of a method?"
.PP
Yes, but only if you throw an exception. If this is too drastic a
measure then we suggest using \f(CW\*(C`around\*(C'\fR instead. The \f(CW\*(C`around\*(C'\fR method
modifier is the only modifier which can gracefully prevent execution
of the main method. Here is an example:
.PP
.Vb 8
\&    around \*(Aqbaz\*(Aq => sub {
\&        my $next = shift;
\&        my ($self, %options) = @_;
\&        unless ($options\->{bar} eq \*(Aqfoo\*(Aq) {
\&            return \*(Aqbar\*(Aq;
\&        }
\&        $self\->$next(%options);
\&    };
.Ve
.PP
By choosing not to call the \f(CW$next\fR method, you can stop the
execution of the main method.
.PP
Alternatively, the MooseX::Mangle extension provides the
\&\f(CW\*(C`guard\*(C'\fR function, which will conditionally prevent execution
of the original method.
.PP
\fIWhy can't I see return values in an \f(CI\*(C`after\*(C'\fI modifier?\fR
.IX Subsection "Why can't I see return values in an after modifier?"
.PP
As with the \f(CW\*(C`before\*(C'\fR modifier, the \f(CW\*(C`after\*(C'\fR modifier is simply called
\&\fIafter\fR the main method. It is passed the original contents of \f(CW@_\fR
and \fBnot\fR the return values of the main method.
.PP
Again, the arguments are too lengthy as to why this has to be. And as
with \f(CW\*(C`before\*(C'\fR I recommend using an \f(CW\*(C`around\*(C'\fR modifier instead.  Here
is some sample code:
.PP
.Vb 7
\&  around \*(Aqfoo\*(Aq => sub {
\&      my $next = shift;
\&      my ($self, @args) = @_;
\&      my @rv = $next\->($self, @args);
\&      # do something silly with the return values
\&      return reverse @rv;
\&  };
.Ve
.PP
Alternatively, the MooseX::Mangle extension provides the
\&\f(CW\*(C`mangle_return\*(C'\fR function, which allows modifying the return values
of the original method.
.SS "Type Constraints"
.IX Subsection "Type Constraints"
\fIHow can I provide a custom error message for a type constraint?\fR
.IX Subsection "How can I provide a custom error message for a type constraint?"
.PP
Use the \f(CW\*(C`message\*(C'\fR option when building the subtype:
.PP
.Vb 4
\&  subtype \*(AqNaturalLessThanTen\*(Aq
\&      => as \*(AqNatural\*(Aq
\&      => where { $_ < 10 }
\&      => message { "This number ($_) is not less than ten!" };
.Ve
.PP
This \f(CW\*(C`message\*(C'\fR block will be called when a value fails to pass the
\&\f(CW\*(C`NaturalLessThanTen\*(C'\fR constraint check.
.PP
\fICan I turn off type constraint checking?\fR
.IX Subsection "Can I turn off type constraint checking?"
.PP
There's no support for it in the core of Moose yet. This option may
come in a future release.
.PP
Meanwhile there's a MooseX
extension that
allows you to do this on a per-attribute basis, and if it doesn't do
what you it's easy to write one that fits your use case.
.PP
\fIMy coercions stopped working with recent Moose, why did you break it?\fR
.IX Subsection "My coercions stopped working with recent Moose, why did you break it?"
.PP
Moose 0.76 fixed a case where coercions were being applied even if the original
constraint passed. This has caused some edge cases to fail where people were
doing something like
.PP
.Vb 2
\&    subtype \*(AqAddress\*(Aq, as \*(AqStr\*(Aq;
\&    coerce \*(AqAddress\*(Aq, from \*(AqStr\*(Aq, via { get_address($_) };
.Ve
.PP
This is not what they intended, because the type constraint \f(CW\*(C`Address\*(C'\fR is too
loose in this case. It is saying that all strings are Addresses, which is
obviously not the case. The solution is to provide a \f(CW\*(C`where\*(C'\fR clause that
properly restricts the type constraint:
.PP
.Vb 1
\&    subtype \*(AqAddress\*(Aq, as \*(AqStr\*(Aq, where { looks_like_address($_) };
.Ve
.PP
This will allow the coercion to apply only to strings that fail to look like an
Address.
.SS "Roles"
.IX Subsection "Roles"
\fIWhy is \s-1BUILD\s0 not called for my composed roles?\fR
.IX Subsection "Why is BUILD not called for my composed roles?"
.PP
\&\f(CW\*(C`BUILD\*(C'\fR is never called in composed roles. The primary reason is that
roles are \fBnot\fR order sensitive. Roles are composed in such a way
that the order of composition does not matter (for information on the
deeper theory of this read the original traits papers here
<http://www.iam.unibe.ch/~scg/Research/Traits/>).
.PP
Because roles are essentially unordered, it would be impossible to
determine the order in which to execute the \f(CW\*(C`BUILD\*(C'\fR methods.
.PP
As for alternate solutions, there are a couple.
.IP "\(bu" 4
Using a combination of lazy and default in your attributes to defer
initialization (see the Binary Tree example in the cookbook for a good example
of lazy/default usage
Moose::Cookbook::Basics::BinaryTree_AttributeFeatures)
.IP "\(bu" 4
Use attribute triggers, which fire after an attribute is set, to
facilitate initialization. These are described in the Moose docs,
and examples can be found in the test suite.
.PP
In general, roles should not \fIrequire\fR initialization; they should
either provide sane defaults or should be documented as needing
specific initialization. One such way to \*(L"document\*(R" this is to have a
separate attribute initializer which is required for the role. Here is
an example of how to do this:
.PP
.Vb 2
\&  package My::Role;
\&  use Moose::Role;
\&
\&  has \*(Aqheight\*(Aq => (
\&      is      => \*(Aqrw\*(Aq,
\&      isa     => \*(AqInt\*(Aq,
\&      lazy    => 1,
\&      default => sub {
\&          my $self = shift;
\&          $self\->init_height;
\&      }
\&  );
\&
\&  requires \*(Aqinit_height\*(Aq;
.Ve
.PP
In this example, the role will not compose successfully unless the
class provides a \f(CW\*(C`init_height\*(C'\fR method.
.PP
If none of those solutions work, then it is possible that a role is
not the best tool for the job, and you really should be using
classes. Or, at the very least, you should reduce the amount of
functionality in your role so that it does not require initialization.
.PP
\fIWhat are traits, and how are they different from roles?\fR
.IX Subsection "What are traits, and how are they different from roles?"
.PP
In Moose, a trait is almost exactly the same thing as a role, except
that traits typically register themselves, which allows you to refer
to them by a short name (\*(L"Big\*(R" vs \*(L"MyApp::Role::Big\*(R").
.PP
In Moose-speak, a \fIRole\fR is usually composed into a \fIclass\fR at
compile time, whereas a \fITrait\fR is usually composed into an instance
of a class at runtime to add or modify the behavior of \fBjust that
instance\fR.
.PP
Outside the context of Moose, traits and roles generally mean exactly
the same thing. The original paper called them traits, but Perl 6
will call them roles.
.PP
\fICan an attribute-generated method (e.g. an accessor) satisfy requires?\fR
.IX Subsection "Can an attribute-generated method (e.g. an accessor) satisfy requires?"
.PP
Yes, just be sure to consume the role \fIafter\fR declaring your
attribute.  \*(L"Required Attributes\*(R" in Moose::Manual::Roles provides
an example:
.PP
.Vb 3
\&  package Breakable;
\&  use Moose::Role;
\&  requires \*(Aqstress\*(Aq;
\&
\&  package Car;
\&  use Moose;
\&  has \*(Aqstress\*(Aq => ( is  => \*(Aqrw\*(Aq, isa => \*(AqInt\*(Aq );
\&  with \*(AqBreakable\*(Aq;
.Ve
.PP
If you mistakenly consume the \f(CW\*(C`Breakable\*(C'\fR role before declaring your
\&\f(CW\*(C`stress\*(C'\fR attribute, you would see an error like this:
.PP
.Vb 1
\&  \*(AqBreakable\*(Aq requires the method \*(Aqstress\*(Aq to be implemented by \*(AqCar\*(Aq at...
.Ve
.SS "Moose and Subroutine Attributes"
.IX Subsection "Moose and Subroutine Attributes"
\fIWhy don't subroutine attributes I inherited from a superclass work?\fR
.IX Subsection "Why don't subroutine attributes I inherited from a superclass work?"
.PP
Currently when subclassing a module is done at runtime with the
\&\f(CW\*(C`extends\*(C'\fR keyword, but attributes are checked at compile time by
Perl. To make attributes work, you must place \f(CW\*(C`extends\*(C'\fR in a \f(CW\*(C`BEGIN\*(C'\fR
block so that the attribute handlers will be available at compile time,
like this:
.PP
.Vb 1
\&  BEGIN { extends qw/Foo/ }
.Ve
.PP
Note that we're talking about Perl's subroutine attributes here, not
Moose attributes:
.PP
.Vb 1
\&  sub foo : Bar(27) { ... }
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
