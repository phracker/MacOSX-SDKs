.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::DKIM::AuthorDomainPolicy 3"
.TH Mail::DKIM::AuthorDomainPolicy 3 "2012-11-28" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DKIM::AuthorDomainPolicy \- represents an Author Domain Signing Practices (ADSP) record
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Author Domain Signing Policies (\s-1ADSP\s0) record can be published by any
domain to help a receiver know what to do when it encounters an unsigned
message claiming to originate from that domain.
.PP
The record is published as a \s-1DNS TXT\s0 record at _adsp._domainkey.DOMAIN
where \s-1DOMAIN\s0 is the domain of the message's \*(L"From\*(R" address.
.PP
More details about this record can be found by reading the specification
itself at <http://tools.ietf.org/html/rfc5617>.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "\fIfetch()\fP"
.IX Subsection "fetch()"
Lookup an \s-1ADSP\s0 record in \s-1DNS.\s0
.PP
.Vb 4
\&  my $policy = Mail::DKIM::AuthorDomainPolicy\->fetch(
\&            Protocol => "dns",
\&            Author => \*(Aqjsmith@example.org\*(Aq,
\&          );
.Ve
.PP
If the \s-1ADSP\s0 record is found and appears to be valid, an object
containing that record's information will be constructed and returned.
If the \s-1ADSP\s0 record is blank or simply does not exist, an object
representing the default policy will be returned instead.
(See also \*(L"\fIis_implied_default_policy()\fR\*(R".)
If a \s-1DNS\s0 error occurs (e.g. \s-1SERVFAIL\s0 or time-out), this method
will \*(L"die\*(R".
.SS "\fInew()\fP"
.IX Subsection "new()"
Construct a default policy object.
.PP
.Vb 1
\&  my $policy = Mail::DKIM::AuthorDomainPolicy\->new;
.Ve
.SS "\fIparse()\fP"
.IX Subsection "parse()"
Construct an \s-1ADSP\s0 record from a string.
.PP
.Vb 4
\&  my $policy = Mail::DKIM::AuthorDomainPolicy\->parse(
\&          String => "dkim=all",
\&          Domain => "aaa.example",
\&      );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIapply()\fP"
.IX Subsection "apply()"
Apply the policy to the results of a \s-1DKIM\s0 verifier.
.PP
.Vb 1
\&  my $result = $policy\->apply($dkim_verifier);
.Ve
.PP
The caller must provide an instance of Mail::DKIM::Verifier, one which
has already been fed the message being verified.
.PP
Possible results are:
.IP "accept" 4
.IX Item "accept"
The message is approved by the sender signing policy.
.IP "reject" 4
.IX Item "reject"
The message is rejected by the sender signing policy.
It can be considered very suspicious.
.IP "neutral" 4
.IX Item "neutral"
The message is neither approved nor rejected by the sender signing
policy. It can be considered somewhat suspicious.
.PP
Note: in the future, these values may become:
 none \- no \s-1ADSP\s0 record is published
 pass \- a passing signature is present
 fail \- \s-1ADSP\s0 record is \*(L"all\*(R" and no passing signature is found
 discard \- \s-1ADSP\s0 record is \*(L"discardable\*(R" and no passing signature is found
 nxdomain \- the \s-1DNS\s0 domain does not exist
 temperror \- transient error occurred
 permerror \- non-transient error occurred
.SS "\fIis_implied_default_policy()\fP"
.IX Subsection "is_implied_default_policy()"
Tells whether this policy implied.
.PP
.Vb 1
\&  my $is_implied = $policy\->is_implied_default_policy;
.Ve
.PP
If you fetch the policy for a particular domain, but that domain
does not have a policy published, then the \*(L"default policy\*(R" is
in effect. Use this method to detect when that happens.
.SS "\fIlocation()\fP"
.IX Subsection "location()"
Tells where the policy was fetched from.
.PP
If the policy is domain-wide, this will be domain where the policy was
published.
.PP
If the policy is user-specific, \s-1TBD.\s0
.PP
If nothing is published for the domain, and the default policy
was returned instead, the location will be \f(CW\*(C`undef\*(C'\fR.
.SS "\fIpolicy()\fP"
.IX Subsection "policy()"
Get or set the outbound signing policy (dkim=) tag.
.PP
.Vb 1
\&  my $sp = $policy\->policy;
.Ve
.PP
Outbound signing policy for the entity. Possible values are:
.ie n .IP """unknown""" 4
.el .IP "\f(CWunknown\fR" 4
.IX Item "unknown"
The default. The entity may sign some or all email.
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
All mail from the domain is expected to be signed, using a valid Author
signature, but the author does not suggest discarding mail without a
valid signature.
.ie n .IP """discardable""" 4
.el .IP "\f(CWdiscardable\fR" 4
.IX Item "discardable"
All mail from the domain is expected to be signed, using a valid Author
signature, and the author is so confident that non-signed mail claiming
to be from this domain can be automatically discarded by the recipient's
mail server.
.ie n .IP """NXDOMAIN""" 4
.el .IP "\f(CW``NXDOMAIN''\fR" 4
.IX Item """NXDOMAIN"""
The domain is out of scope, i.e., the domain does not exist in the
\&\s-1DNS.\s0
.SS "\fIsignall()\fP"
.IX Subsection "signall()"
True if policy is \*(L"all\*(R".
.SS "\fIsignall_discardable()\fP"
.IX Subsection "signall_discardable()"
True if policy is \*(L"strict\*(R".
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Section 4.3 of the specification says to perform a query on the
domain itself just to see if it exists. This class is not
currently doing that, i.e. it might report \s-1NXDOMAIN\s0 because
_adsp._domainkey.example.org is nonexistent, but it should
not be treated the same as example.org being nonexistent.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Long, <jlong@messiah.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2009 by Messiah College
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
