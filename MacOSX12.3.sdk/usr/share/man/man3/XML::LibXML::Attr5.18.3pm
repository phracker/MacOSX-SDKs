.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::LibXML::Attr 3"
.TH XML::LibXML::Attr 3 "2014-02-01" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::LibXML::Attr \- XML::LibXML Attribute Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use XML::LibXML;
\&  # Only methods specific to Attribute nodes are listed here,
\&  # see XML::LibXML::Node manpage for other methods
\&
\&  $attr = XML::LibXML::Attr\->new($name [,$value]);
\&  $string = $attr\->getValue();
\&  $string = $attr\->value;
\&  $attr\->setValue( $string );
\&  $node = $attr\->getOwnerElement();
\&  $attr\->setNamespace($nsURI, $prefix);
\&  $bool = $attr\->isId;
\&  $string = $attr\->serializeContent;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the interface to handle Attributes like ordinary nodes. The naming of
the class relies on the W3C \s-1DOM\s0 documentation.
.SH "METHODS"
.IX Header "METHODS"
The class inherits from XML::LibXML::Node. The documentation for Inherited methods is not listed here.
.PP
Many functions listed here are extensively documented in the \s-1DOM\s0 Level 3 specification (<http://www.w3.org/TR/DOM\-Level\-3\-Core/>). Please refer to the specification for extensive documentation.
.IP "new" 4
.IX Item "new"
.Vb 1
\&  $attr = XML::LibXML::Attr\->new($name [,$value]);
.Ve
.Sp
Class constructor. If you need to work with \s-1ISO\s0 encoded strings, you should \fIalways\fR use the \f(CW\*(C`createAttribute\*(C'\fR of XML::LibXML::Document.
.IP "getValue" 4
.IX Item "getValue"
.Vb 1
\&  $string = $attr\->getValue();
.Ve
.Sp
Returns the value stored for the attribute. If undef is returned, the attribute
has no value, which is different of being \f(CW\*(C`not specified\*(C'\fR.
.IP "value" 4
.IX Item "value"
.Vb 1
\&  $string = $attr\->value;
.Ve
.Sp
Alias for \fI\fIgetValue()\fI\fR
.IP "setValue" 4
.IX Item "setValue"
.Vb 1
\&  $attr\->setValue( $string );
.Ve
.Sp
This is needed to set a new attribute value. If \s-1ISO\s0 encoded strings are passed
as parameter, the node has to be bound to a document, otherwise the encoding
might be done incorrectly.
.IP "getOwnerElement" 4
.IX Item "getOwnerElement"
.Vb 1
\&  $node = $attr\->getOwnerElement();
.Ve
.Sp
returns the node the attribute belongs to. If the attribute is not bound to a
node, undef will be returned. Overwriting the underlying implementation, the \fIparentNode\fR function will return undef, instead of the owner element.
.IP "setNamespace" 4
.IX Item "setNamespace"
.Vb 1
\&  $attr\->setNamespace($nsURI, $prefix);
.Ve
.Sp
This function tries to bound the attribute to a given namespace. If \f(CW$nsURI\fR is undefined or empty, the function discards any previous association of the
attribute with a namespace. If the namespace was not previously declared in the
context of the attribute, this function will fail. In this case you may wish to
call \fIsetNamespace()\fR on the ownerElement. If the namespace \s-1URI\s0 is non-empty and
declared in the context of the attribute, but only with a different (non-empty)
prefix, then the attribute is still bound to the namespace but gets a different
prefix than \f(CW$prefix\fR. The function also fails if the prefix is empty but the namespace \s-1URI\s0 is not
(because unprefixed attributes should by definition belong to no namespace).
This function returns 1 on success, 0 otherwise.
.IP "isId" 4
.IX Item "isId"
.Vb 1
\&  $bool = $attr\->isId;
.Ve
.Sp
Determine whether an attribute is of type \s-1ID.\s0 For documents with a \s-1DTD,\s0 this
information is only available if \s-1DTD\s0 loading/validation has been requested. For
\&\s-1HTML\s0 documents parsed with the \s-1HTML\s0 parser \s-1ID\s0 detection is done automatically.
In \s-1XML\s0 documents, all \*(L"xml:id\*(R" attributes are considered to be of type \s-1ID.\s0
.IP "serializeContent($docencoding)" 4
.IX Item "serializeContent($docencoding)"
.Vb 1
\&  $string = $attr\->serializeContent;
.Ve
.Sp
This function is not part of \s-1DOM API.\s0 It returns attribute content in the form
in which it serializes into \s-1XML,\s0 that is with all meta-characters properly
quoted and with raw entity references (except for entities expanded during
parse time). Setting the optional \f(CW$docencoding\fR flag to 1 enforces document
encoding for the output string (which is then passed to Perl as a byte string).
Otherwise the string is passed to Perl as (\s-1UTF\-8\s0 encoded) characters.
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant,
Christian Glahn,
Petr Pajas
.SH "VERSION"
.IX Header "VERSION"
2.0110
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd.
.PP
2002\-2006, Christian Glahn.
.PP
2006\-2009, Petr Pajas.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
