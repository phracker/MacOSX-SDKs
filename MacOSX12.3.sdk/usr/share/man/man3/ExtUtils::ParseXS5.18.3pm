.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::ParseXS 3pm"
.TH ExtUtils::ParseXS 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::ParseXS \- converts Perl XS code into C code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::ParseXS qw(process_file);
\&
\&  process_file( filename => \*(Aqfoo.xs\*(Aq );
\&
\&  process_file( filename => \*(Aqfoo.xs\*(Aq,
\&                output => \*(Aqbar.c\*(Aq,
\&                \*(AqC++\*(Aq => 1,
\&                typemap => \*(Aqpath/to/typemap\*(Aq,
\&                hiertype => 1,
\&                except => 1,
\&                prototypes => 1,
\&                versioncheck => 1,
\&                linenumbers => 1,
\&                optimize => 1,
\&                prototypes => 1,
\&              );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ExtUtils::ParseXS\*(C'\fR will compile \s-1XS\s0 code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.  The compiler uses typemaps to
determine how to map C function parameters and variables to Perl values.
.PP
The compiler will search for typemap files called \fItypemap\fR.  It will use
the following search path to find default typemaps, with the rightmost
typemap taking precedence.
.PP
.Vb 1
\&    ../../../typemap:../../typemap:../typemap:typemap
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
None by default.  \f(CW\*(C`process_file()\*(C'\fR may be exported upon request.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fIprocess_file()\fR" 4
.IX Item "process_file()"
This function processes an \s-1XS\s0 file and sends output to a C file.
Named parameters control how the processing is done.  The following
parameters are accepted:
.RS 4
.IP "\fB\*(C+\fR" 4
.IX Item ""
Adds \f(CW\*(C`extern "C"\*(C'\fR to the C code.  Default is false.
.IP "\fBhiertype\fR" 4
.IX Item "hiertype"
Retains \f(CW\*(C`::\*(C'\fR in type names so that \*(C+ hierarchical types can be
mapped.  Default is false.
.IP "\fBexcept\fR" 4
.IX Item "except"
Adds exception handling stubs to the C code.  Default is false.
.IP "\fBtypemap\fR" 4
.IX Item "typemap"
Indicates that a user-supplied typemap should take precedence over the
default typemaps.  A single typemap may be specified as a string, or
multiple typemaps can be specified in an array reference, with the
last typemap having the highest precedence.
.IP "\fBprototypes\fR" 4
.IX Item "prototypes"
Generates prototype code for all xsubs.  Default is false.
.IP "\fBversioncheck\fR" 4
.IX Item "versioncheck"
Makes sure at run time that the object file (derived from the \f(CW\*(C`.xs\*(C'\fR
file) and the \f(CW\*(C`.pm\*(C'\fR files have the same version number.  Default is
true.
.IP "\fBlinenumbers\fR" 4
.IX Item "linenumbers"
Adds \f(CW\*(C`#line\*(C'\fR directives to the C output so error messages will look
like they came from the original \s-1XS\s0 file.  Default is true.
.IP "\fBoptimize\fR" 4
.IX Item "optimize"
Enables certain optimizations.  The only optimization that is currently
affected is the use of \fItarget\fRs by the output C code (see perlguts).
Not optimizing may significantly slow down the generated code, but this is the way
\&\fBxsubpp\fR of 5.005 and earlier operated.  Default is to optimize.
.IP "\fBinout\fR" 4
.IX Item "inout"
Enable recognition of \f(CW\*(C`IN\*(C'\fR, \f(CW\*(C`OUT_LIST\*(C'\fR and \f(CW\*(C`INOUT_LIST\*(C'\fR
declarations.  Default is true.
.IP "\fBargtypes\fR" 4
.IX Item "argtypes"
Enable recognition of ANSI-like descriptions of function signature.
Default is true.
.IP "\fBs\fR" 4
.IX Item "s"
\&\fIMaintainer note:\fR I have no clue what this does.  Strips function prefixes?
.RE
.RS 4
.RE
.IP "\fIerrors()\fR" 4
.IX Item "errors()"
This function returns the number of [a certain kind of] errors
encountered during processing of the \s-1XS\s0 file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Based on xsubpp code, written by Larry Wall.
.PP
Maintained by:
.IP "\(bu" 4
Ken Williams, <ken@mathforum.org>
.IP "\(bu" 4
David Golden, <dagolden@cpan.org>
.IP "\(bu" 4
James Keenan, <jkeenan@cpan.org>
.IP "\(bu" 4
Steffen Mueller, <smueller@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2012 by Ken Williams, David Golden and other contributors.  All
rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
Based on the \f(CW\*(C`ExtUtils::xsubpp\*(C'\fR code by Larry Wall and the Perl 5
Porters, which was released under the same license terms.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, ExtUtils::xsubpp, ExtUtils::MakeMaker, perlxs, perlxstut.
