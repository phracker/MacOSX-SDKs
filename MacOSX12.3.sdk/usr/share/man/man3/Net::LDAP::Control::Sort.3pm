.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control::Sort 3"
.TH Net::LDAP::Control::Sort 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control::Sort \- Server Side Sort (SSS) control object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Net::LDAP::Control::Sort;
\& use Net::LDAP::Constant qw(LDAP_CONTROL_SORTRESULT);
\&
\& $sort = Net::LDAP::Control::Sort\->new(
\&   order => "cn \-phone"
\& );
\&
\& $mesg = $ldap\->search( @args, control => [ $sort ]);
\&
\& ($resp) = $mesg\->control( LDAP_CONTROL_SORTRESULT );
\&
\& print "Results are sorted\en"  if $resp and !$resp\->result;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control::Sort\*(C'\fR is a sub-class of
Net::LDAP::Control.  It provides a class
for manipulating the \s-1LDAP\s0 Server Side Sort (\s-1SSS\s0) request control
\&\f(CW1.2.840.113556.1.4.473\fR as defined in \s-1RFC\-2891\s0
.PP
If the server supports sorting, then the response from a search
operation will include a sort result control. This control is handled
by Net::LDAP::Control::SortResult.
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
.IP "order" 4
.IX Item "order"
A string which defines how entries may be sorted. It consists of
multiple directives, separated by whitespace. Each directive describes how
to sort entries using a single attribute. If two entries have identical
attributes, then the next directive in the list is used.
.Sp
Each directive specifies a sorting order as follows
.Sp
.Vb 1
\&  \-attributeType:orderingRule
.Ve
.Sp
The leading \f(CW\*(C`\-\*(C'\fR is optional, and if present indicates that the sorting order should
be reversed. \f(CW\*(C`attributeType\*(C'\fR is the attribute name to sort by. \f(CW\*(C`orderingRule\*(C'\fR is optional and
indicates the rule to use for the sort and should be valid for the given \f(CW\*(C`attributeType\*(C'\fR.
.Sp
Any one attributeType should only appear once in the sorting list.
.Sp
\&\fBExamples\fR
.Sp
.Vb 4
\&  "cn"         sort by cn using the default ordering rule for the cn attribute
\&  "\-cn"        sort by cn using the reverse of the default ordering rule
\&  "age cn"     sort by age first, then by cn using the default ordering rules
\&  "cn:1.2.3.4" sort by cn using the ordering rule defined as 1.2.3.4
.Ve
.SH "METHODS"
.IX Header "METHODS"
As with Net::LDAP::Control each constructor argument
described above is also available as a method on the object which will
return the current value for the attribute if called without an argument,
and set a new value for the attribute if called with an argument.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Control::SortResult,
Net::LDAP::Control,
http://www.ietf.org/rfc/rfc2891.txt
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
