.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Parse::Method::Signatures::TypeConstraint 3"
.TH Parse::Method::Signatures::TypeConstraint 3 "2017-04-01" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Method::Signatures::TypeConstraint \- turn parsed TC data into Moose TC object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class used to turn \s-1PPI\s0 elements into Moose::Meta::TypeConstraint objects.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "tc"
.IX Subsection "tc"
.RS 4
\&\fBLazy Build.\fR
.RE
.PP
The Moose::Meta::TypeConstraint object for this type constraint, built when
requested. \*(L"tc_callback\*(R" will be called for each individual component type in
turn.
.SS "tc_callback"
.IX Subsection "tc_callback"
.RS 4
\&\fBType:\fR CodeRef
.Sp
\&\fBDefault:\fR \*(L"find_registered_constraint\*(R"
.RE
.PP
Callback used to turn type names into type objects. See
\&\*(L"type_constraint_callback\*(R" in Parse::Method::Signatures for more details and an
example.
.SS "from_namespace"
.IX Subsection "from_namespace"
.RS 4
\&\fBType:\fR ClassName
.RE
.PP
If provided, then the default \f(CW\*(C`tc_callback\*(C'\fR will search for MooseX::Types
in this package.
.SH "METHODS"
.IX Header "METHODS"
.SS "find_registered_constraint"
.IX Subsection "find_registered_constraint"
Will search for an imported MooseX::Types in \*(L"from_namespace\*(R" (if
provided). Failing that it will ask the Moose::Meta::TypeConstraint::Registry
for a type with the given name.
.PP
If all else fails, it will simple return the type as a string, so that Moose's
auto-vivification of classnames to type will work.
.SS "to_string"
.IX Subsection "to_string"
String representation of the type constraint, approximately as parsed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Parse::Method::Signatures, MooseX::Types, MooseX::Types::Util.
.SH "AUTHORS"
.IX Header "AUTHORS"
Florian Ragwitz <rafl@debian.org>.
.PP
Ash Berlin <ash@cpan.org>.
.SH "LICENSE"
.IX Header "LICENSE"
Licensed under the same terms as Perl itself.
