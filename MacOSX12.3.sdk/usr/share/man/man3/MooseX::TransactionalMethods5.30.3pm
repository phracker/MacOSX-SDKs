.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::TransactionalMethods 3"
.TH MooseX::TransactionalMethods 3 "2015-03-26" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::TransactionalMethods \- Syntax sugar for transactional methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Foo::Bar;
\&  use MooseX::TransactionalMethods; # includes Moose
\&  
\&  has schema => (is => \*(Aqro\*(Aq);
\&  
\&  transactional foo => sub {
\&     # this is going to happen inside a transaction
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This method exports the \*(L"transactional\*(R" declarator that will enclose
the method in a txn_do call.
.SH "DECLARATOR"
.IX Header "DECLARATOR"
.ie n .IP "transactional $name => $code" 4
.el .IP "transactional \f(CW$name\fR => \f(CW$code\fR" 4
.IX Item "transactional $name => $code"
When you declare with only the name and the coderef, the wrapper will
call 'schema' on your class to fetch the schema object on which it
will call txn_do to enclose your coderef.
.ie n .IP "transactional $name => $schema, $code" 4
.el .IP "transactional \f(CW$name\fR => \f(CW$schema\fR, \f(CW$code\fR" 4
.IX Item "transactional $name => $schema, $code"
When you declare sending the schema object, it will store it in the
method metaclass and use it directly without any calls to this object.
.Sp
\&\s-1NOTE THAT MIXING DECLARTIONS WITH SCHEMA AND WITHOUT SCHEMA WILL LEAD
TO PAINFULL CONFUSION SINCE THE WRAPPING IS SPECIFIC TO THAT CLASS AND
THE BEHAVIOR IS NOT MODIFIED WHEN YOU OVERRIDE THE METHOD. PREFER
USING THE DYNAMIC DECLARATOR WHEN POSSIBLE.\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel Ruoso <daniel@ruoso.com>
.PP
With help from rafl and doy from #moose.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2010 by Daniel Ruoso et al
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
