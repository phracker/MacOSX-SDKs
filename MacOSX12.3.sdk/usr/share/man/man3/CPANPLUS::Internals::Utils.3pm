.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Internals::Utils 3pm"
.TH CPANPLUS::Internals::Utils 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Internals::Utils \- convenience functions for CPANPLUS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $bool = $cb\->_mkdir( dir => \*(Aqblah\*(Aq );
\&    my $bool = $cb\->_chdir( dir => \*(Aqblah\*(Aq );
\&    my $bool = $cb\->_rmdir( dir => \*(Aqblah\*(Aq );
\&
\&    my $bool = $cb\->_move( from => \*(Aq/some/file\*(Aq, to => \*(Aq/other/file\*(Aq );
\&    my $bool = $cb\->_move( from => \*(Aq/some/dir\*(Aq,  to => \*(Aq/other/dir\*(Aq );
\&
\&    my $cont = $cb\->_get_file_contents( file => \*(Aq/path/to/file\*(Aq );
\&
\&
\&    my $version = $cb\->_perl_version( perl => $^X );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`CPANPLUS::Internals::Utils\*(C'\fR holds a few convenience functions for
\&\s-1CPANPLUS\s0 libraries.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$cb\->_mkdir( dir => '/some/dir' )"
.el .SS "\f(CW$cb\fP\->_mkdir( dir => '/some/dir' )"
.IX Subsection "$cb->_mkdir( dir => '/some/dir' )"
\&\f(CW\*(C`_mkdir\*(C'\fR creates a full path to a directory.
.PP
Returns true on success, false on failure.
.ie n .SS "$cb\->_chdir( dir => '/some/dir' )"
.el .SS "\f(CW$cb\fP\->_chdir( dir => '/some/dir' )"
.IX Subsection "$cb->_chdir( dir => '/some/dir' )"
\&\f(CW\*(C`_chdir\*(C'\fR changes directory to a dir.
.PP
Returns true on success, false on failure.
.ie n .SS "$cb\->_rmdir( dir => '/some/dir' );"
.el .SS "\f(CW$cb\fP\->_rmdir( dir => '/some/dir' );"
.IX Subsection "$cb->_rmdir( dir => '/some/dir' );"
Removes a directory completely, even if it is non-empty.
.PP
Returns true on success, false on failure.
.ie n .SS "$cb\->_perl_version ( perl => 'some/perl/binary' );"
.el .SS "\f(CW$cb\fP\->_perl_version ( perl => 'some/perl/binary' );"
.IX Subsection "$cb->_perl_version ( perl => 'some/perl/binary' );"
\&\f(CW\*(C`_perl_version\*(C'\fR returns the version of a certain perl binary.
It does this by actually running a command.
.PP
Returns the perl version on success and false on failure.
.ie n .SS "$cb\->_version_to_number( version => $version );"
.el .SS "\f(CW$cb\fP\->_version_to_number( version => \f(CW$version\fP );"
.IX Subsection "$cb->_version_to_number( version => $version );"
Returns a proper module version, or '0.0' if none was available.
.ie n .SS "$cb\->_whoami"
.el .SS "\f(CW$cb\fP\->_whoami"
.IX Subsection "$cb->_whoami"
Returns the name of the subroutine you're currently in.
.ie n .SS "_get_file_contents( file => $file );"
.el .SS "_get_file_contents( file => \f(CW$file\fP );"
.IX Subsection "_get_file_contents( file => $file );"
Returns the contents of a file
.ie n .SS "$cb\->_move( from => $file|$dir, to => $target );"
.el .SS "\f(CW$cb\fP\->_move( from => \f(CW$file\fP|$dir, to => \f(CW$target\fP );"
.IX Subsection "$cb->_move( from => $file|$dir, to => $target );"
Moves a file or directory to the target.
.PP
Returns true on success, false on failure.
.ie n .SS "$cb\->_copy( from => $file|$dir, to => $target );"
.el .SS "\f(CW$cb\fP\->_copy( from => \f(CW$file\fP|$dir, to => \f(CW$target\fP );"
.IX Subsection "$cb->_copy( from => $file|$dir, to => $target );"
Moves a file or directory to the target.
.PP
Returns true on success, false on failure.
.ie n .SS "$cb\->_mode_plus_w( file => '/path/to/file' );"
.el .SS "\f(CW$cb\fP\->_mode_plus_w( file => '/path/to/file' );"
.IX Subsection "$cb->_mode_plus_w( file => '/path/to/file' );"
Sets the +w bit for the file.
.PP
Returns true on success, false on failure.
.ie n .SS "$uri = $cb\->_host_to_uri( scheme => \s-1SCHEME,\s0 host => \s-1HOST,\s0 path => \s-1PATH \s0);"
.el .SS "\f(CW$uri\fP = \f(CW$cb\fP\->_host_to_uri( scheme => \s-1SCHEME,\s0 host => \s-1HOST,\s0 path => \s-1PATH \s0);"
.IX Subsection "$uri = $cb->_host_to_uri( scheme => SCHEME, host => HOST, path => PATH );"
Turns a CPANPLUS::Config style \f(CW\*(C`host\*(C'\fR entry into an \s-1URI\s0 string.
.PP
Returns the uri on success, and false on failure
.ie n .SS "$cb\->_vcmp( \s-1VERSION, VERSION \s0);"
.el .SS "\f(CW$cb\fP\->_vcmp( \s-1VERSION, VERSION \s0);"
.IX Subsection "$cb->_vcmp( VERSION, VERSION );"
Normalizes the versions passed and does a '<=>' on them, returning the result.
.ie n .SS "$cb\->_home_dir"
.el .SS "\f(CW$cb\fP\->_home_dir"
.IX Subsection "$cb->_home_dir"
Returns the user's homedir, or \f(CW\*(C`cwd\*(C'\fR if it could not be found
.ie n .SS "$path = $cb\->_safe_path( path => $path );"
.el .SS "\f(CW$path\fP = \f(CW$cb\fP\->_safe_path( path => \f(CW$path\fP );"
.IX Subsection "$path = $cb->_safe_path( path => $path );"
Returns a path that's safe to us on Win32 and \s-1VMS.\s0
.PP
Only cleans up the path on Win32 if the path exists.
.PP
On \s-1VMS,\s0 it encodes dots to _ using \f(CW\*(C`VMS::Filespec::vmsify\*(C'\fR
.ie n .SS "($pkg, $version, $ext) = $cb\->_split_package_string( package => \s-1PACKAGE_STRING \s0);"
.el .SS "($pkg, \f(CW$version\fP, \f(CW$ext\fP) = \f(CW$cb\fP\->_split_package_string( package => \s-1PACKAGE_STRING \s0);"
.IX Subsection "($pkg, $version, $ext) = $cb->_split_package_string( package => PACKAGE_STRING );"
Splits the name of a \s-1CPAN\s0 package string up into its package, version
and extension parts.
.PP
For example, \f(CW\*(C`Foo\-Bar\-1.2.tar.gz\*(C'\fR would return the following parts:
.PP
.Vb 3
\&    Package:    Foo\-Bar
\&    Version:    1.2
\&    Extension:  tar.gz
.Ve
