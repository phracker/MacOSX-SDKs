.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Manual::Tooling::Plugin::TestingDone 3"
.TH Test2::Manual::Tooling::Plugin::TestingDone 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Manual::Tooling::Plugin::TestingDone \- Run code when the test file is
finished, or when done_testing is called.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a way to add behavior to the end of a test file. This code is run
either when \fBdone_testing()\fR is called, or when the test file has no more
run-time code to run.
.PP
When triggered by \fBdone_testing()\fR this will be run \s-1BEFORE\s0 the plan is calculated
and sent. This means it \s-1IS\s0 safe to make test assertions in this callback.
.SH "COMPLETE CODE UP FRONT"
.IX Header "COMPLETE CODE UP FRONT"
.Vb 1
\&    package Test2::Plugin::MyPlugin;
\&
\&    use Test2::API qw{test2_add_callback_testing_done};
\&
\&    sub import {
\&        my $class = shift;
\&
\&        test2_add_callback_testing_done(sub {
\&            ok(!$some_global, \*(Aq$some_global was not set\*(Aq);
\&            print "The test file is done, or done_testing was just called\en"
\&        });
\&    }
\&
\&    1;
.Ve
.SH "LINE BY LINE"
.IX Header "LINE BY LINE"
.IP "use Test2::API qw{test2_add_callback_testing_done};" 4
.IX Item "use Test2::API qw{test2_add_callback_testing_done};"
This imports the \f(CW\*(C`test2_add_callback_testing_done()\*(C'\fR callback.
.IP "test2_add_callback_testing_done(sub { ... });" 4
.IX Item "test2_add_callback_testing_done(sub { ... });"
This adds our callback to be called when testing is done.
.IP "ok(!$some_global, '$some_global was not set')" 4
.IX Item "ok(!$some_global, '$some_global was not set')"
It is safe to make assertions in this type of callback. This code simply
asserts that some global was never set over the course of the test.
.ie n .IP "print ""The test file is done, or done_testing was just called\en""" 4
.el .IP "print ``The test file is done, or done_testing was just called\en''" 4
.IX Item "print The test file is done, or done_testing was just calledn"
This prints a message when the callback is run.
.SH "UNDER THE HOOD"
.IX Header "UNDER THE HOOD"
Before \fBtest2_add_callback_testing_done()\fR this kind of thing was still possible,
but it was hard to get right, here is the code to do it:
.PP
.Vb 2
\&    test2_add_callback_post_load(sub {
\&        my $stack = test2_stack();
\&
\&        # Insure we have at least one hub, but we do not necessarily want the
\&        # one this returns.
\&        $stack\->top;
\&
\&        # We want the root hub, not the top one.
\&        my ($root) = Test2::API::test2_stack\->all;
\&
\&        # Make sure the hub does not believe nothing has happened.
\&        $root\->set_active(1);
\&
\&        # Now we can add our follow\-up code
\&        $root\->follow_up(sub {
\&            # Your callback code here
\&        });
\&    });
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test2::Manual \- Primary index of the manual.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Manual can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
