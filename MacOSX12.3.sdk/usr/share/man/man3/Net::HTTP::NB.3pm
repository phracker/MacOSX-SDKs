.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::HTTP::NB 3"
.TH Net::HTTP::NB 3 "2019-05-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::HTTP::NB \- Non\-blocking HTTP client
.SH "VERSION"
.IX Header "VERSION"
version 6.19
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::HTTP::NB;
\& my $s = Net::HTTP::NB\->new(Host => "www.perl.com") || die $@;
\& $s\->write_request(GET => "/");
\&
\& use IO::Select;
\& my $sel = IO::Select\->new($s);
\&
\& READ_HEADER: {
\&    die "Header timeout" unless $sel\->can_read(10);
\&    my($code, $mess, %h) = $s\->read_response_headers;
\&    redo READ_HEADER unless $code;
\& }
\&
\& while (1) {
\&    die "Body timeout" unless $sel\->can_read(10);
\&    my $buf;
\&    my $n = $s\->read_entity_body($buf, 1024);
\&    last unless $n;
\&    print $buf;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Same interface as \f(CW\*(C`Net::HTTP\*(C'\fR but it will never try multiple reads
when the \fBread_response_headers()\fR or \fBread_entity_body()\fR methods are
invoked.  This make it possible to multiplex multiple Net::HTTP::NB
using select without risk blocking.
.PP
If \fBread_response_headers()\fR did not see enough data to complete the
headers an empty list is returned.
.PP
If \fBread_entity_body()\fR did not see new entity data in its read
the value \-1 is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::HTTP
.SH "AUTHOR"
.IX Header "AUTHOR"
Gisle Aas <gisle@activestate.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2001\-2017 by Gisle Aas.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
