.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::PublicSuffix 3"
.TH IO::Socket::SSL::PublicSuffix 3 "2019-02-26" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::PublicSuffix \- provide access to Mozilla's list of effective TLD names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # use builtin default
\&    use IO::Socket::SSL::PublicSuffix;
\&    $ps = IO::Socket::SSL::PublicSuffix\->default;
\&
\&    # load from string
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_string("*.uk\en*");
\&
\&    # load from file or file handle
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_file($filename);
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_file(\e*STDIN);
\&
\&
\&    # \-\-\- string in \-> string out
\&    # $rest \-> whatever.host
\&    # $tld  \-> co.uk
\&    my ($rest,$tld) = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq);
\&    my $tld = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq);
\&
\&    # $root_domain \-> host.co.uk
\&    my $root_domain = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq, 1);
\&
\&    # \-\-\- array in \-> array out
\&    # $rest \-> [qw(whatever host)]
\&    # $tld  \-> [qw(co uk)]
\&    my ($rest,$tld) = $ps\->public_suffix([qw(whatever host co uk)]);
\&
\& \-\-\-\-
\&
\&    # To update this file with the current list:
\&    perl \-MIO::Socket::SSL::PublicSuffix \-e \*(AqIO::Socket::SSL::PublicSuffix::update_self_from_url()\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module uses the list of effective top level domain names from the mozilla
project to determine the public top level domain for a given hostname.
.SS "Method"
.IX Subsection "Method"
.IP "class\->default(%args)" 4
.IX Item "class->default(%args)"
Returns object with builtin default.
\&\f(CW\*(C`min_suffix\*(C'\fR can be given in \f(CW%args\fR to specify the minimal suffix, default
is 1.
.IP "class\->from_string(string,%args)" 4
.IX Item "class->from_string(string,%args)"
Returns object with configuration from string.
See method \f(CW\*(C`default\*(C'\fR for \f(CW%args\fR.
.ie n .IP "class\->from_file( file name| file handle, %args )" 4
.el .IP "class\->from_file( file name| file handle, \f(CW%args\fR )" 4
.IX Item "class->from_file( file name| file handle, %args )"
Returns object with configuration from file or file handle.
See method \f(CW\*(C`default\*(C'\fR for \f(CW%args\fR.
.ie n .IP "$self\->public_suffix( $host|\e@host, [ $add ] )" 4
.el .IP "\f(CW$self\fR\->public_suffix( \f(CW$host\fR|\e@host, [ \f(CW$add\fR ] )" 4
.IX Item "$self->public_suffix( $host|@host, [ $add ] )"
In array context the function returns the non-tld part and the tld part of the
given hostname, in scalar context only the tld part.
It adds \f(CW$add\fR parts of the non-tld part to the tld, e.g. with \f(CW\*(C`$add=1\*(C'\fR it
will return the root domain.
.Sp
If there were no explicit matches against the public suffix configuration it
will fall back to a suffix of length 1.
.Sp
The function accepts a string or an array-ref (e.g. host split by \f(CW\*(C`.\*(C'\fR). In the
first case it will return string(s), in the latter case array\-ref(s).
.Sp
International hostnames or labels can be in \s-1ASCII \s0(\s-1IDNA\s0 form starting with
\&\f(CW\*(C`xn\-\-\*(C'\fR) or unicode. In the latter case an \s-1IDNA\s0 handling library like
Net::IDN:::Encode, Net::LibIDN or recent versions of \s-1URI\s0 need to be
installed.
.IP "($self|class)\->can_idn" 4
.IX Item "($self|class)->can_idn"
Returns true if \s-1IDN\s0 support is available.
.SH "FILES"
.IX Header "FILES"
http://publicsuffix.org/list/effective_tld_names.dat
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Domain::PublicSuffix, Mozilla::PublicSuffix
.SH "BUGS"
.IX Header "BUGS"
.Vb 5
\& Q: Why yet another module, we already have L<Domain::PublicSuffix> and
\&    L<Mozilla::PublicSuffix>.
\& A: Because the public suffix data change more often than these modules do,
\&    IO::Socket::SSL needs this list and it is more easy this way to keep it
\&    up\-to\-date.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
