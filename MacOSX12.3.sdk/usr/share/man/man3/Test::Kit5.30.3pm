.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Kit 3"
.TH Test::Kit 3 "2016-06-05" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Kit \- Build custom test packages with only the features you want
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Kit allows you to create a single module in your project which gives you
access to all of the testing functions you want.
.PP
Its primary goal is to reduce boilerplate code that is currently littering the
top of all your test files.
.PP
It also allows your testing to be more consistent; for example it becomes a
trivial change to include Test::FailWarnings in all of your tests, and there is
no danger that you forget to include it in a new test.
.SH "VERSION"
.IX Header "VERSION"
Test::Kit 2.0 is a complete rewrite of Test::Kit by a new author.
.PP
It serves much the same purpose as the original Test::Kit, but comes with a
completely new interface and some serious bugs ironed out.
.PP
The 'features' such as '+explain' and '+on_fail' have been removed. If you were
using these please contact me via rt.cpan.org.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Somewhere in your project...
.PP
.Vb 1
\&    package MyProject::Test;
\&
\&    use Test::Kit;
\&
\&    # Combine multiple modules\*(Aq behaviour into one
\&
\&    include \*(AqTest::More\*(Aq;
\&    include \*(AqTest::LongString\*(Aq;
\&
\&    # Exclude or rename exported subs
\&
\&    include \*(AqTest::Warn\*(Aq => {
\&        exclude => [ \*(Aqwarning_is\*(Aq ],
\&        renamed => {
\&            \*(Aqwarning_like\*(Aq => \*(Aqtest_warn_warning_like\*(Aq
\&        },
\&    };
\&
\&    # Pass parameters through to import() directly
\&
\&    include \*(AqList::Util\*(Aq => {
\&        import => [ \*(Aqmin\*(Aq, \*(Aqmax\*(Aq, \*(Aqshuffle\*(Aq ],
\&    };
\&
\&    # Include pragmata in your kit
\&
\&    include \*(Aqstrict\*(Aq, \*(Aqwarnings\*(Aq;
.Ve
.PP
And then in your test files...
.PP
.Vb 1
\&    use MyProject::Test tests => 4;
\&
\&    ok 1, "1 is true";
\&
\&    like_string(
\&        \`cat /usr/share/dict/words\`,
\&        qr/^ kit $/imsx,
\&        "kit is a word"
\&    );
\&
\&    test_warn_warning_like {
\&        warn "foo";
\&    }
\&    qr/FOO/i,
\&    "warned foo";
\&
\&    is max(qw(1 2 3 4 5)), 5, \*(Aqmaximum is 5\*(Aq;
.Ve
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
.SS "Unable to find package to import into"
.IX Subsection "Unable to find package to import into"
This means that Test::Kit was unable to determine which module \fBinclude()\fR was
called from. It probably means you're doing something weird!
.PP
If this is happening under any normal circumstances please file a bug report!
.ie n .SS "Subroutine %s() already supplied to %s by %s"
.el .SS "Subroutine %s() already supplied to \f(CW%s\fP by \f(CW%s\fP"
.IX Subsection "Subroutine %s() already supplied to %s by %s"
This happens when there is a subroutine name collision. For example if you try
to include both Test::Simple and Test::More in your Kit it will complain that
\&\fBok()\fR has been defined twice.
.PP
You should be able to use the exclude or rename options to solve these
collisions.
.ie n .SS "Package %s already has an \fBimport()\fP sub"
.el .SS "Package \f(CW%s\fP already has an \fBimport()\fP sub"
.IX Subsection "Package %s already has an import() sub"
This happens when your module has an import subroutine before the first
\&\fBinclude()\fR call. This could be because you have defined one, or because your
module has inherited an \fBimport()\fR subroutine through an \s-1ISA\s0 relationship.
.PP
Test::Kit intends to install its own import method into your module,
specifically it is going to install Test::Builder::Module's \fBimport()\fR method.
Test::Builder::Module is an Exporter, so if you want to define your own
subroutines and export those you can push onto \f(CW@EXPORT\fR after all the calls to
\&\fBinclude()\fR.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Test::Kit 2.15 and above should work with Test-Simple 1.0 and 1.3 releases.
Huge thanks to Chad Granum and Karen Etheridge for all their help with 1.3
support. I highly recommend upgrading to Test-Simple 1.3.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
A couple of other modules try to generalize this problem beyond the scope of testing:
.PP
ToolSet \- Load your commonly-used modules in a single import
.PP
Import::Base \- Import a set of modules into the calling module
.PP
Test::Kit largely differs from these in that it always makes your module behave
like Test::More.
.SH "AUTHOR"
.IX Header "AUTHOR"
Test::Kit 2.0 was written by Alex Balhatchet, \f(CW\*(C`<kaoru at slackwise.net>\*(C'\fR
.PP
Test::Kit 0.101 and before were authored by Curtis \*(L"Ovid\*(R" Poe, \f(CW\*(C`<ovid at cpan.org>\*(C'\fR
