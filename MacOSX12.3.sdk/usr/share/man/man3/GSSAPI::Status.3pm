.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GSSAPI::Status 3"
.TH GSSAPI::Status 3 "2008-02-02" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GSSAPI::Status \- methods for handlings GSSAPI statuses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use GSSAPI;
\&  
\&  $status = GSSAPI::Status\->new(GSS_S_COMPLETE, 0);
\&
\&  if (GSS_ERROR($status\->major)) {
\&    die "a horrible death";
\&  }
\&  if (! $status) {                      # another way of writing the above
\&    die "a horrible death";
\&  }
\&
\&  $status = $some_GSSAPI\->someop($args1, etc);
\&  if ($status) {
\&    foreach ($status\->generic_message, $status\->specific_message) {
\&      print "GSSAPI error: $_\en";
\&    }
\&    die "help me";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`GSSAPI::Status\*(C'\fR objects are returned by most other \s-1GSSAPI\s0 operations.
Such statuses consist of a \s-1GSSAPI\s0 generic code and, for most
operations, a mechanism specific code.  These numeric codes can be
accessed via the methods \f(CW\*(C`major\*(C'\fR and \f(CW\*(C`minor\*(C'\fR.  The standard textual
messages that go with the current status can be obtained via the
\&\f(CW\*(C`generic_message\*(C'\fR and \f(CW\*(C`specific_message\*(C'\fR methods.  Each of these
returns a list of text which should presumably be displayed in
order.
.PP
The generic code part of a GSSAPI::Status is composed of three
subfields that can be accessed with the \f(CW\*(C`GSS_CALLING_ERROR\*(C'\fR,
\&\f(CW\*(C`GSS_ROUTINE_ERROR\*(C'\fR, and \f(CW\*(C`GSS_SUPPLEMENTARY_INFO\*(C'\fR functions.  The
returned values can be compared against the constants whose names
start with \f(CW\*(C`GSS_S_\*(C'\fR if your code wants to handle particular errors
itself.  The \f(CW\*(C`GSS_ERROR\*(C'\fR function returns true if and only if the
given generic code contains neither a calling error nor a routine
error.
.PP
When evaluated in a boolean context, a \f(CW\*(C`GSSAPI::Status\*(C'\fR object
will be true if and only if the major status code is \f(CW\*(C`GSS_S_COMPLETE\*(C'\fR.
.PP
When evaluated in a string contect, a \f(CW\*(C`GSSAPI::Status\*(C'\fR object will
return the generic and specific messages all joined together with
newlines.  This may or may not make \f(CW\*(C`die $status\*(C'\fR work usefully.
.SH "BUGS"
.IX Header "BUGS"
The base objects are currently implmented as a blessed C structure
containing the major and minor status codes.  It should probably
be a blessed array or hash instead, thereby cutting down on the
amount of C code involved and making it more flexible.
.SH "AUTHOR"
.IX Header "AUTHOR"
Philip Guenther <pguen@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1)
\&\s-1RFC2743\s0
