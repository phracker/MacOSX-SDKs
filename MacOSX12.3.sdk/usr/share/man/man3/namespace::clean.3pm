.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "namespace::clean 3"
.TH namespace::clean 3 "2016-05-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
namespace::clean \- Keep imports and functions out of your namespace
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package Foo;
\&  use warnings;
\&  use strict;
\&
\&  use Carp qw(croak);   # \*(Aqcroak\*(Aq will be removed
\&
\&  sub bar { 23 }        # \*(Aqbar\*(Aq will be removed
\&
\&  # remove all previously defined functions
\&  use namespace::clean;
\&
\&  sub baz { bar() }     # \*(Aqbaz\*(Aq still defined, \*(Aqbar\*(Aq still bound
\&
\&  # begin to collection function names from here again
\&  no namespace::clean;
\&
\&  sub quux { baz() }    # \*(Aqquux\*(Aq will be removed
\&
\&  # remove all functions defined after the \*(Aqno\*(Aq unimport
\&  use namespace::clean;
\&
\&  # Will print: \*(AqNo\*(Aq, \*(AqNo\*(Aq, \*(AqYes\*(Aq and \*(AqNo\*(Aq
\&  print +(_\|_PACKAGE_\|_\->can(\*(Aqcroak\*(Aq) ? \*(AqYes\*(Aq : \*(AqNo\*(Aq), "\en";
\&  print +(_\|_PACKAGE_\|_\->can(\*(Aqbar\*(Aq)   ? \*(AqYes\*(Aq : \*(AqNo\*(Aq), "\en";
\&  print +(_\|_PACKAGE_\|_\->can(\*(Aqbaz\*(Aq)   ? \*(AqYes\*(Aq : \*(AqNo\*(Aq), "\en";
\&  print +(_\|_PACKAGE_\|_\->can(\*(Aqquux\*(Aq)  ? \*(AqYes\*(Aq : \*(AqNo\*(Aq), "\en";
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Keeping packages clean"
.IX Subsection "Keeping packages clean"
When you define a function, or import one, into a Perl package, it will
naturally also be available as a method. This does not per se cause
problems, but it can complicate subclassing and, for example, plugin
classes that are included via multiple inheritance by loading them as
base classes.
.PP
The \f(CW\*(C`namespace::clean\*(C'\fR pragma will remove all previously declared or
imported symbols at the end of the current package's compile cycle.
Functions called in the package itself will still be bound by their
name, but they won't show up as methods on your class or instances.
.PP
By unimporting via \f(CW\*(C`no\*(C'\fR you can tell \f(CW\*(C`namespace::clean\*(C'\fR to start
collecting functions for the next \f(CW\*(C`use namespace::clean;\*(C'\fR specification.
.PP
You can use the \f(CW\*(C`\-except\*(C'\fR flag to tell \f(CW\*(C`namespace::clean\*(C'\fR that you
don't want it to remove a certain function or method. A common use would
be a module exporting an \f(CW\*(C`import\*(C'\fR method along with some functions:
.PP
.Vb 2
\&  use ModuleExportingImport;
\&  use namespace::clean \-except => [qw( import )];
.Ve
.PP
If you just want to \f(CW\*(C`\-except\*(C'\fR a single sub, you can pass it directly.
For more than one value you have to use an array reference.
.PP
\fILate binding caveat\fR
.IX Subsection "Late binding caveat"
.PP
Note that the technique used by this module relies
on perl having resolved all names to actual code references during the
compilation of a scope. While this is almost always what the interpreter does,
there are some exceptions, notably the sort \s-1SUBNAME\s0 style of
the \f(CW\*(C`sort\*(C'\fR built-in invocation. The following example will not work, because
\&\f(CW\*(C`sort\*(C'\fR does not try to resolve the function name to an actual code reference
until \fBruntime\fR.
.PP
.Vb 2
\& use MyApp::Utils \*(Aqmy_sorter\*(Aq;
\& use namespace::clean;
\&
\& my @sorted = sort my_sorter @list;
.Ve
.PP
You need to work around this by forcing a compile-time resolution like so:
.PP
.Vb 2
\& use MyApp::Utils \*(Aqmy_sorter\*(Aq;
\& use namespace::clean;
\&
\& my $my_sorter_cref = \e&my_sorter;
\&
\& my @sorted = sort $my_sorter_cref @list;
.Ve
.SS "Explicitly removing functions when your scope is compiled"
.IX Subsection "Explicitly removing functions when your scope is compiled"
It is also possible to explicitly tell \f(CW\*(C`namespace::clean\*(C'\fR what packages
to remove when the surrounding scope has finished compiling. Here is an
example:
.PP
.Vb 2
\&  package Foo;
\&  use strict;
\&
\&  # blessed NOT available
\&
\&  sub my_class {
\&      use Scalar::Util qw( blessed );
\&      use namespace::clean qw( blessed );
\&
\&      # blessed available
\&      return blessed shift;
\&  }
\&
\&  # blessed NOT available
.Ve
.SS "Moose"
.IX Subsection "Moose"
When using \f(CW\*(C`namespace::clean\*(C'\fR together with Moose you want to keep
the installed \f(CW\*(C`meta\*(C'\fR method. So your classes should look like:
.PP
.Vb 4
\&  package Foo;
\&  use Moose;
\&  use namespace::clean \-except => \*(Aqmeta\*(Aq;
\&  ...
.Ve
.PP
Same goes for Moose::Role.
.SS "Cleaning other packages"
.IX Subsection "Cleaning other packages"
You can tell \f(CW\*(C`namespace::clean\*(C'\fR that you want to clean up another package
instead of the one importing. To do this you have to pass in the \f(CW\*(C`\-cleanee\*(C'\fR
option like this:
.PP
.Vb 2
\&  package My::MooseX::namespace::clean;
\&  use strict;
\&
\&  use namespace::clean (); # no cleanup, just load
\&
\&  sub import {
\&      namespace::clean\->import(
\&        \-cleanee => scalar(caller),
\&        \-except  => \*(Aqmeta\*(Aq,
\&      );
\&  }
.Ve
.PP
If you don't care about \f(CW\*(C`namespace::clean\*(C'\fRs discover\-and\-\f(CW\*(C`\-except\*(C'\fR logic, and
just want to remove subroutines, try \*(L"clean_subroutines\*(R".
.SH "METHODS"
.IX Header "METHODS"
.SS "clean_subroutines"
.IX Subsection "clean_subroutines"
This exposes the actual subroutine-removal logic.
.PP
.Vb 1
\&  namespace::clean\->clean_subroutines($cleanee, qw( subA subB ));
.Ve
.PP
will remove \f(CW\*(C`subA\*(C'\fR and \f(CW\*(C`subB\*(C'\fR from \f(CW$cleanee\fR. Note that this will remove the
subroutines \fBimmediately\fR and not wait for scope end. If you want to have this
effect at a specific time (e.g. \f(CW\*(C`namespace::clean\*(C'\fR acts on scope compile end)
it is your responsibility to make sure it runs at that time.
.SS "import"
.IX Subsection "import"
Makes a snapshot of the current defined functions and installs a
B::Hooks::EndOfScope hook in the current scope to invoke the cleanups.
.SS "unimport"
.IX Subsection "unimport"
This method will be called when you do a
.PP
.Vb 1
\&  no namespace::clean;
.Ve
.PP
It will start a new section of code that defines functions to clean up.
.SS "get_class_store"
.IX Subsection "get_class_store"
This returns a reference to a hash in a passed package containing
information about function names included and excluded from removal.
.SS "get_functions"
.IX Subsection "get_functions"
Takes a class as argument and returns all currently defined functions
in it as a hash reference with the function name as key and a typeglob
reference to the symbol as value.
.SH "IMPLEMENTATION DETAILS"
.IX Header "IMPLEMENTATION DETAILS"
This module works through the effect that a
.PP
.Vb 1
\&  delete $SomePackage::{foo};
.Ve
.PP
will remove the \f(CW\*(C`foo\*(C'\fR symbol from \f(CW$SomePackage\fR for run time lookups
(e.g., method calls) but will leave the entry alive to be called by
already resolved names in the package itself. \f(CW\*(C`namespace::clean\*(C'\fR will
restore and therefor in effect keep all glob slots that aren't \f(CW\*(C`CODE\*(C'\fR.
.PP
A test file has been added to the perl core to ensure that this behaviour
will be stable in future releases.
.PP
Just for completeness sake, if you want to remove the symbol completely,
use \f(CW\*(C`undef\*(C'\fR instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
B::Hooks::EndOfScope
.SH "THANKS"
.IX Header "THANKS"
Many thanks to Matt S Trout for the inspiration on the whole idea.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Robert 'phaylon' Sedlacek <rs@474.at>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Peter Rabbitson <ribasushi@cpan.org>
.IP "\(bu" 4
Father Chrysostomos <sprout@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by \*(L"\s-1AUTHORS\*(R"\s0
.PP
This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.
