.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::TokenGen 3"
.TH Parse::Eyapp::TokenGen 3 "2012-03-23" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::TokenGen \- Support for Using Parse::Eyapp as a Data Generator
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
For a introduction to data generation using Parse::Eyapp see
Parse::Eyapp::datagenerationtut.
.SH "METHODS"
.IX Header "METHODS"
.SS "set_tokengens"
.IX Subsection "set_tokengens"
Receives the parser object and the pairs
.PP
.Vb 1
\&    token => generator
.Ve
.PP
Sets the generator attribute of the tokens.
Though not strictly necessary, the generator is
a Test::LectroTest::Generator object.
.SS "set_weights"
.IX Subsection "set_weights"
Receives the parser object and the pairs
.PP
.Vb 1
\&    token => weight
.Ve
.PP
Sets the weight attribute of the tokens.
The weight is a floating number.
.SS "set_tokenweightsandgenerators"
.IX Subsection "set_tokenweightsandgenerators"
Receives the parser object and the pairs
.PP
.Vb 1
\&    token => [weight, generator]
.Ve
.PP
or
.PP
.Vb 1
\&    token => weight
.Ve
.PP
and sets the weight and generator attributes of the tokens.
An example can be found in \f(CW\*(C`examples/generator/GenSupport.pm\*(C'\fR:
.PP
.Vb 10
\&  $parser\->set_tokenweightsandgenerators(
\&    NUM => [ 2, Int(range=>[0, 9], sized=>0)],
\&    VAR => [
\&              0,  # At the beginning, no variables are defined
\&              Gen {
\&                return  Elements(keys %st)\->generate if keys %st;
\&                return Int(range=>[0, 9], sized=>0)\->generate;
\&              },
\&            ],
\&    VARDEF => [ 
\&                2,  
\&                String( length=>[1,2], charset=>"A\-NP\-Z", size => 100 )
\&              ],
\&    \*(Aq=\*(Aq => 2, \*(Aq\-\*(Aq => 1, \*(Aq+\*(Aq => 2, 
\&    \*(Aq*\*(Aq => 4, \*(Aq/\*(Aq => 2, \*(Aq^\*(Aq => 0.5, 
\&    \*(Aq;\*(Aq => 1, \*(Aq(\*(Aq => 1, \*(Aq)\*(Aq => 2, 
\&    \*(Aq\*(Aq  => 2, \*(Aqerror\*(Aq => 0,
\&  );
.Ve
.SS "token_weight"
.IX Subsection "token_weight"
Receives the parser object and the token and returns the weight.
If an additional weight is provided the weight for the token is set.
.SS "token_generator"
.IX Subsection "token_generator"
Receives the parser object and the token and returns the generator.
If an additional generator is provided the generator for the token is set.
.SS "deltaweight"
.IX Subsection "deltaweight"
Has the syntax:
.PP
.Vb 1
\&  $parser\->deltaweight(TOKEN1 => deltaweight1, TOKEN2 => deltaweight2, ...)
.Ve
.PP
increases the weight of the respective token by the associated amount.
.SS "pushdeltaweight"
.IX Subsection "pushdeltaweight"
As \f(CW\*(C`deltaweight\*(C'\fR but the current weights of the involved tokens
are saved in a stack
.SS "popweight"
.IX Subsection "popweight"
Restores the weights of the tokens that were previously saved
with \f(CW\*(C`pushdeltaweight\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
Test::LectroTest::Generator by Tom Moertel
.IP "\(bu" 4
The Design and Implementation of a Grammar-based Data Generator (1992) 
by Peter M. Maurer, Software Practice and Experience 
<http://www.cs.ubc.ca/local/reading/proceedings/spe91\-95/spe/./vol22/issue3/spe756pm.pdf>
.IP "\(bu" 4
yagg: an easy-to-use generator for structured test inputs
by David Coppit and Jiexin Lian.
\&\s-1ASE \s0'05: Proceedings of the 20th \s-1IEEE/ACM\s0 international Conference on Automated software engineering.
2005, pages 356\-359.
.RS 4
.IP "\(bu" 2
<http://search.cpan.org/perldoc?yagg::Tutorial>,
.IP "\(bu" 2
<http://www.cs.wm.edu/~coppit/wiki/images/4/4e/yagg_short.pdf>,
.IP "\(bu" 2
<http://www.cs.wm.edu/~coppit/wiki/images/6/69/wm\-cs\-2005\-13.pdf>
.RE
.RS 4
.RE
.IP "\(bu" 4
Writing Randomly by Randall Schwartz. 
Linux Magazine Column 04 (Sep 1999). 
<http://www.stonehenge.com/merlyn/LinuxMag/col04.html>
.IP "\(bu" 4
Generating Test Data with Enhanced Context Free Grammars by Peter M. Maurer
<http://cs.baylor.edu/~maurer/aida/dgl\-source/documentation/gen_tst.pdf>
.IP "\(bu" 4
Modules as Programs by Brian d Foy 
<http://www252.pair.com/comdog/mastering_perl/Chapters/18.modulinos.html>
.IP "\(bu" 4
How a Script Becomes a Module by Brian d Foy. On Perlmonks: 
<http://www.perlmonks.org/index.pl?node_id=396759>.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
