.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Probe::Perl 3"
.TH Probe::Perl 3 "2013-08-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Probe::Perl \- Information about the currently running perl
.SH "VERSION"
.IX Header "VERSION"
version 0.03
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Probe::Perl;
\& $p = Probe::Perl\->new();
\& 
\& # Version of this perl as a floating point number
\& $ver = $p\->perl_version();
\& $ver = Probe::Perl\->perl_version();
\& 
\& # Convert a multi\-dotted string to a floating point number
\& $ver = $p\->perl_version_to_float($ver);
\& $ver = Probe::Perl\->perl_version_to_float($ver);
\& 
\& # Check if the given perl is the same as the one currently running
\& $bool = $p\->perl_is_same($perl_path);
\& $bool = Probe::Perl\->perl_is_same($perl_path);
\& 
\& # Find a path to the currently\-running perl
\& $path = $p\->find_perl_interpreter();
\& $path = Probe::Perl\->find_perl_interpreter();
\& 
\& # Get @INC before run\-time additions
\& @paths = $p\->perl_inc();
\& @paths = Probe::Perl\->perl_inc();
\& 
\& # Get the general type of operating system
\& $type = $p\->os_type();
\& $type = Probe::Perl\->os_type();
\& 
\& # Access Config.pm values
\& $val = $p\->config(\*(Aqfoo\*(Aq);
\& $val = Probe::Perl\->config(\*(Aqfoo\*(Aq);
\& $p\->config(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq);  # Set locally
\& $p\->config_revert(\*(Aqfoo\*(Aq);  # Revert
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for obtaining information about the
currently running perl interpreter.  It originally began life as code
in the \f(CW\*(C`Module::Build\*(C'\fR project, but has been externalized here for
general use.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew()\fR" 4
.IX Item "new()"
Creates a new Probe::Perl object and returns it.  Most methods in
the Probe::Perl packages are available as class methods, so you
don't always need to create a new object.  But if you want to create a
mutable view of the \f(CW\*(C`Config.pm\*(C'\fR data, it's necessary to create an
object to store the values in.
.ie n .IP "config( $key [, $value] )" 4
.el .IP "config( \f(CW$key\fR [, \f(CW$value\fR] )" 4
.IX Item "config( $key [, $value] )"
Returns the \f(CW\*(C`Config.pm\*(C'\fR value associated with \f(CW$key\fR.  If \f(CW$value\fR
is also specified, then the value is set to \f(CW$value\fR for this view of
the data.  In this case, \f(CW\*(C`config()\*(C'\fR must be called as an object
method, not a class method.
.ie n .IP "config_revert( $key )" 4
.el .IP "config_revert( \f(CW$key\fR )" 4
.IX Item "config_revert( $key )"
Removes any user-assigned value in this view of the \f(CW\*(C`Config.pm\*(C'\fR data.
.IP "find_perl_interpreter( )" 4
.IX Item "find_perl_interpreter( )"
Returns the absolute path of this perl interpreter.  This is actually
sort of a tricky thing to discover sometimes \- in these cases we use
\&\f(CW\*(C`perl_is_same()\*(C'\fR to verify.
.IP "perl_version( )" 4
.IX Item "perl_version( )"
Returns the version of this perl interpreter as a perl-styled version
number using \f(CW\*(C`perl_version_to_float()\*(C'\fR.  Uses \f(CW$^V\fR if your perl is
recent enough, otherwise uses \f(CW$]\fR.
.ie n .IP "perl_version_to_float( $version )" 4
.el .IP "perl_version_to_float( \f(CW$version\fR )" 4
.IX Item "perl_version_to_float( $version )"
Formats \f(CW$version\fR as a perl-styled version number like \f(CW5.008001\fR.
.ie n .IP "perl_is_same( $perl )" 4
.el .IP "perl_is_same( \f(CW$perl\fR )" 4
.IX Item "perl_is_same( $perl )"
Given the name of a perl interpreter, this method determines if it has
the same configuration as the one represented by the current perl
instance.  Usually this means it's exactly the same
.IP "perl_inc( )" 4
.IX Item "perl_inc( )"
Returns a list of directories in this perl's \f(CW@INC\fR path, \fIbefore\fR
any entries from \f(CW\*(C`use lib\*(C'\fR, \f(CW$ENV{PERL5LIB}\fR, or \f(CW\*(C`\-I\*(C'\fR switches are
added.
.IP "os_type( [$osname] )" 4
.IX Item "os_type( [$osname] )"
Returns a generic \s-1OS\s0 type (e.g. \*(L"Unix\*(R", \*(L"Windows\*(R", \*(L"MacOS\*(R") for the
given \s-1OS\s0 name. If no \s-1OS\s0 name is given it uses the value in $^O, which
is the same as \f(CW$Config\fR{osname}.
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy W. Sims <randys@thepierianspring.org>
.PP
Based partly on code from the Module::Build project, by Ken Williams
<kwilliams@cpan.org> and others.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 Ken Williams and Randy Sims.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
