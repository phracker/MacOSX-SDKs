.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XXX 3"
.TH XXX 3 "2020-01-20" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XXX \- See Your Data in the Nude
.SH "VERSION"
.IX Header "VERSION"
This document describes \s-1XXX\s0 version \fB0.35\fR.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use XXX;
\&    XXX my $dog = Dog\->new({has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = XXX Dog\->new({has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new(XXX {has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({XXX has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({has => XXX [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({has => [XXX \*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XXX\s0.pm exports a function called \s-1XXX\s0 that you can put just about anywhere
    in your Perl code to make it die with a \s-1YAML\s0 dump of the arguments to
    its right.
.PP
The charm of XXX-debugging is that it is easy to type, rarely requires parens
and stands out visually so that you remember to remove it.
.PP
\&\s-1XXX\s0.pm also exports \s-1WWW, YYY\s0 and \s-1ZZZ\s0 which do similar debugging things.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\s-1WWW\s0" 4
.IX Item "WWW"
\&\s-1WWW\s0 will warn a dump of its arguments, and then return the original arguments.
This means you can stick it in the middle of expressions.
.Sp
\&\s-1NOTE:\s0 If you use \s-1WWW\s0 with Test::More, it will \f(CW\*(C`diag()\*(C'\fR rather than \f(CW\*(C`warn()\*(C'\fR.
.Sp
mnemonic: W for warn
.IP "\s-1XXX\s0" 4
.IX Item "XXX"
\&\s-1XXX\s0 will die with a dump of its arguments.
.Sp
mnemonic: \s-1XXX\s0 == Death, Nudity
.IP "\s-1YYY\s0" 4
.IX Item "YYY"
\&\s-1YYY\s0 will print a dump of its arguments, and then return the original
arguments. This means you can stick it in the middle of expressions.
.Sp
\&\s-1NOTE:\s0 If you use \s-1YYY\s0 with Test::More, it will \f(CW\*(C`note()\*(C'\fR rather than
      \f(CW\*(C`print()\*(C'\fR.
.Sp
mnemonic: \s-1YYY\s0 == Why Why Why??? or \s-1YAML YAML YAML\s0
.IP "\s-1ZZZ\s0" 4
.IX Item "ZZZ"
\&\s-1ZZZ\s0 will Carp::confess a dump of its arguments.
.Sp
mnemonic: You should confess all your sins before you sleep. zzzzzzzz
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
By default, \s-1XXX\s0 uses \s-1YAML::PP\s0 to dump your data. You can change this like so:
.PP
.Vb 8
\&    use XXX \-with => \*(AqData::Dumper\*(Aq;
\&    use XXX \-with => \*(AqData::Dump\*(Aq;
\&    use XXX \-with => \*(AqData::Dump::Color\*(Aq;
\&    use XXX \-with => \*(AqYAML\*(Aq;
\&    use XXX \-with => \*(AqYAML::XS\*(Aq;
\&    use XXX \-with => \*(AqYAML::SomeOtherYamlModule\*(Aq;
\&    use XXX \-with => \*(AqJSON::Color\*(Aq;
\&    use XXX \-with => \*(AqJSON::SomeOtherJsonModule\*(Aq;
.Ve
.PP
You can also use the environment variable \f(CW\*(C`PERL_XXX_DUMPER\*(C'\fR to set the
module, for example;
.PP
.Vb 2
\&    PERL_XXX_DUMPER=JSON::Color perl script.pl
\&    PERL_XXX_DUMPER=YAML::PP::Highlight perl script.pl
.Ve
.PP
Only modules with names beginning with '\s-1YAML\s0' or '\s-1JSON\s0', and the Data::Dumper,
Data::Dump, and Data::Dump::Color modules are supported.
.PP
If you need to load \s-1XXX\s0 with \f(CW\*(C`require\*(C'\fR, you can set the dumper module with
the \f(CW$XXX::DumpModule\fR global variable.
.PP
.Vb 2
\&    require XXX;
\&    $XXX::DumpModule = \*(AqYAML::Syck\*(Aq;
\&
\&    XXX::XXX($variable);
.Ve
.SH "STACK TRACE LEVEL"
.IX Header "STACK TRACE LEVEL"
If you call a debugging function that calls \s-1XXX\s0 for you, \s-1XXX\s0 will print the
wrong file and line number. To force \s-1XXX\s0 to skip a package in the call stack,
just define the \f(CW\*(C`XXX_skip\*(C'\fR constant like this:
.PP
.Vb 6
\&    package MyDebugger;
\&    use constant XXX_skip => 1;
\&    sub debug {
\&        require XXX;
\&        XXX::XXX(@_);
\&    }
.Ve
.PP
Now calls to MyDebugger::debug will print the file name you called it from,
not from MyDebugger itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy döt Net <ingy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2006\-2020. Ingy döt Net.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
