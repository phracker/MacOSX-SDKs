.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Search 3"
.TH Net::LDAP::Search 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Search \- Object returned by Net::LDAP search method
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::LDAP;
\&
\& $mesg = $ldap\->search( @search_args );
\&
\& @entries = $mesg\->entries;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \fBNet::LDAP::Search\fR object is returned from the
search method of a Net::LDAP object. It is
a container object which holds the results of the search.
.SH "METHODS"
.IX Header "METHODS"
\&\fBNet::LDAP::Search\fR inherits from Net::LDAP::Message, and so
supports all methods defined in Net::LDAP::Message.
.IP "as_struct ( )" 4
.IX Item "as_struct ( )"
Returns a reference to a \s-1HASH,\s0 where the keys are the DNs of the
results and the values are \s-1HASH\s0 references. These second level HASHes
hold the attributes such that the keys are the attribute names, in
lowercase, and the values are references to an \s-1ARRAY\s0 holding the
values.
.Sp
This method will block until the whole search request has finished.
.IP "count ( )" 4
.IX Item "count ( )"
Returns the number of entries returned by the server.
.Sp
This method will block until the whole search request has finished.
.IP "entry ( \s-1INDEX\s0 )" 4
.IX Item "entry ( INDEX )"
Return the N'th entry (zero-based), which will be a Net::LDAP::Entry object.
If \s-1INDEX\s0 is greater or equal than the total number of entries returned then
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
This method will block until the search request has returned enough
entries.
.IP "entries ( )" 4
.IX Item "entries ( )"
Return an array of Net::LDAP::Entry objects that were returned from
the server.
.Sp
This method will block until the whole search request has finished.
.IP "pop_entry ( )" 4
.IX Item "pop_entry ( )"
Pop an entry from the internal list of Net::LDAP::Entry objects for
this search. If there are no more entries then \f(CW\*(C`undef\*(C'\fR is returned.
.Sp
This call will block if the list is empty, until the server returns
another entry.
.IP "references ( )" 4
.IX Item "references ( )"
Return a list of references that the server returned. This will be a
list of Net::LDAP::Reference objects.
.IP "sorted ( )" 4
.IX Item "sorted ( )"
Return a list Net::LDAP::Entry objects, sorted by their DNs.
.Sp
The sorting is done on the client side using Perl's alphanumerical
sort operator \f(CW\*(C`cmp\*(C'\fR.
.IP "sorted ( \s-1ATTR, ...\s0 )" 4
.IX Item "sorted ( ATTR, ... )"
Return a list of Net::LDAP::Entry objects, sorted by the specified
attributes. The attributes are compared in the order specified, each
only being compared if all the prior attributes compare equal.
.Sp
The sorting is done on the client side using Perl's alphanumerical
sort operator \f(CW\*(C`cmp\*(C'\fR.
.IP "shift_entry ( )" 4
.IX Item "shift_entry ( )"
Shift an entry from the internal list of Net::LDAP::Entry objects
for this search. If there are no more entries then \f(CW\*(C`undef\*(C'\fR is
returned.
.Sp
This call will block if the list is empty, until the server returns
another entry.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Message,
Net::LDAP::Entry,
Net::LDAP::Reference
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This document is based on a document originally written by Russell
Fulton <r.fulton@auckland.ac.nz>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl\-ldap@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2004 Graham Barr. All rights reserved. This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.
