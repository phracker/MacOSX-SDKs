.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::AuthenticationResults::Token 3"
.TH Mail::AuthenticationResults::Token 3 "2020-08-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::AuthenticationResults::Token \- Base class for modelling AuthenticationResults Header parts
.SH "VERSION"
.IX Header "VERSION"
version 1.20200824.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Classes representing a tokenised Authentication Results Header, used in parsing
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( $header, $args )"
.el .SS "new( \f(CW$header\fP, \f(CW$args\fP )"
.IX Subsection "new( $header, $args )"
Return a new Token object parsed from the given \f(CW$header\fR string using \f(CW$args\fR
.PP
\&\f(CW$args\fR value depend on the subclass of Token used, possible types are
.PP
Mail::AuthenticationResults::Token::Assignment an assignment operator
Mail::AuthenticationResults::Token::Comment a comment
Mail::AuthenticationResults::Token::QuotedString a quoted string
Mail::AuthenticationResults::Token::Separator a separator
Mail::AuthenticationResults::Token::String a string
.ie n .SS "new_from_value( $value )"
.el .SS "new_from_value( \f(CW$value\fP )"
.IX Subsection "new_from_value( $value )"
Create a new token from the given value
.SS "\fBvalue()\fP"
.IX Subsection "value()"
Return the value of the current Token instance.
.SS "\fBremainder()\fP"
.IX Subsection "remainder()"
Return the remainder of the header string after parsing the current token out.
.SS "\fBparse()\fP"
.IX Subsection "parse()"
Run the parser on the current \f(CW$header\fR and set up \fBvalue()\fR and \fBremainder()\fR.
.SS "\fBis()\fP"
.IX Subsection "is()"
Return the type of token we are.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
