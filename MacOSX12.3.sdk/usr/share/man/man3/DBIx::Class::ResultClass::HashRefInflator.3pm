.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::ResultClass::HashRefInflator 3"
.TH DBIx::Class::ResultClass::HashRefInflator 3 "2017-12-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::ResultClass::HashRefInflator \- Get raw hashrefs from a resultset
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use DBIx::Class::ResultClass::HashRefInflator;
\&
\& my $rs = $schema\->resultset(\*(AqCD\*(Aq);
\& $rs\->result_class(\*(AqDBIx::Class::ResultClass::HashRefInflator\*(Aq);
\& while (my $hashref = $rs\->next) {
\&   ...
\& }
\&
\&  OR as an attribute:
\&
\& my $rs = $schema\->resultset(\*(AqCD\*(Aq)\->search({}, {
\&   result_class => \*(AqDBIx::Class::ResultClass::HashRefInflator\*(Aq,
\& });
\& while (my $hashref = $rs\->next) {
\&   ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Class is faster than older ORMs like Class::DBI but it still isn't
designed primarily for speed. Sometimes you need to quickly retrieve the data
from a massive resultset, while skipping the creation of fancy result objects.
Specifying this class as a \f(CW\*(C`result_class\*(C'\fR for a resultset will change \f(CW\*(C`$rs\->next\*(C'\fR
to return a plain data hash-ref (or a list of such hash-refs if \f(CW\*(C`$rs\->all\*(C'\fR is used).
.PP
There are two ways of applying this class to a resultset:
.IP "\(bu" 4
Specify \f(CW\*(C`$rs\->result_class\*(C'\fR on a specific resultset to affect only that
resultset (and any chained off of it); or
.IP "\(bu" 4
Specify \f(CW\*(C`_\|_PACKAGE_\|_\->result_class\*(C'\fR on your source object to force all
uses of that result source to be inflated to hash-refs \- this approach is not
recommended.
.SH "METHODS"
.IX Header "METHODS"
.SS "inflate_result"
.IX Subsection "inflate_result"
Inflates the result and prefetched data into a hash-ref (invoked by DBIx::Class::ResultSet)
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
This will not work for relationships that have been prefetched. Consider the
following:
.Sp
.Vb 1
\& my $artist = $artitsts_rs\->search({}, {prefetch => \*(Aqcds\*(Aq })\->first;
\&
\& my $cds = $artist\->cds;
\& $cds\->result_class(\*(AqDBIx::Class::ResultClass::HashRefInflator\*(Aq);
\& my $first = $cds\->first;
.Ve
.Sp
\&\f(CW$first\fR will \fBnot\fR be a hashref, it will be a normal \s-1CD\s0 row since
HashRefInflator only affects resultsets at inflation time, and prefetch causes
relations to be inflated when the master \f(CW$artist\fR row is inflated.
.IP "\(bu" 4
Column value inflation, e.g., using modules like
DBIx::Class::InflateColumn::DateTime, is not performed.
The returned hash contains the raw database values.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
