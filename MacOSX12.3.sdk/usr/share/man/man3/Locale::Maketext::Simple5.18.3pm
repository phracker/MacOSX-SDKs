.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::Maketext::Simple 3pm"
.TH Locale::Maketext::Simple 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Maketext::Simple \- Simple interface to Locale::Maketext::Lexicon
.SH "VERSION"
.IX Header "VERSION"
This document describes version 0.18 of Locale::Maketext::Simple,
released Septermber 8, 2006.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Minimal setup (looks for \fIauto/Foo/*.po\fR and \fIauto/Foo/*.mo\fR):
.PP
.Vb 6
\&    package Foo;
\&    use Locale::Maketext::Simple;       # exports \*(Aqloc\*(Aq
\&    loc_lang(\*(Aqfr\*(Aq);                     # set language to French
\&    sub hello {
\&        print loc("Hello, [_1]!", "World");
\&    }
.Ve
.PP
More sophisticated example:
.PP
.Vb 10
\&    package Foo::Bar;
\&    use Locale::Maketext::Simple (
\&        Class       => \*(AqFoo\*(Aq,       # search in auto/Foo/
\&        Style       => \*(Aqgettext\*(Aq,   # %1 instead of [_1]
\&        Export      => \*(Aqmaketext\*(Aq,  # maketext() instead of loc()
\&        Subclass    => \*(AqL10N\*(Aq,      # Foo::L10N instead of Foo::I18N
\&        Decode      => 1,           # decode entries to unicode\-strings
\&        Encoding    => \*(Aqlocale\*(Aq,    # but encode lexicons in current locale
\&                                    # (needs Locale::Maketext::Lexicon 0.36)
\&    );
\&    sub japh {
\&        print maketext("Just another %1 hacker", "Perl");
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a simple wrapper around \fBLocale::Maketext::Lexicon\fR,
designed to alleviate the need of creating \fILanguage Classes\fR for
module authors.
.PP
The language used is chosen from the loc_lang call. If a lookup is not
possible, the i\-default language will be used. If the lookup is not in the
i\-default language, then the key will be returned.
.PP
If \fBLocale::Maketext::Lexicon\fR is not present, it implements a
minimal localization function by simply interpolating \f(CW\*(C`[_1]\*(C'\fR with
the first argument, \f(CW\*(C`[_2]\*(C'\fR with the second, etc.  Interpolated
function like \f(CW\*(C`[quant,_1]\*(C'\fR are treated as \f(CW\*(C`[_1]\*(C'\fR, with the sole
exception of \f(CW\*(C`[tense,_1,X]\*(C'\fR, which will append \f(CW\*(C`ing\*(C'\fR to \f(CW\*(C`_1\*(C'\fR when
X is \f(CW\*(C`present\*(C'\fR, or appending \f(CW\*(C`ed\*(C'\fR to <_1> otherwise.
.SH "OPTIONS"
.IX Header "OPTIONS"
All options are passed either via the \f(CW\*(C`use\*(C'\fR statement, or via an
explicit \f(CW\*(C`import\*(C'\fR.
.SS "Class"
.IX Subsection "Class"
By default, \fBLocale::Maketext::Simple\fR draws its source from the
calling package's \fIauto/\fR directory; you can override this behaviour
by explicitly specifying another package as \f(CW\*(C`Class\*(C'\fR.
.SS "Path"
.IX Subsection "Path"
If your \s-1PO\s0 and \s-1MO\s0 files are under a path elsewhere than \f(CW\*(C`auto/\*(C'\fR,
you may specify it using the \f(CW\*(C`Path\*(C'\fR option.
.SS "Style"
.IX Subsection "Style"
By default, this module uses the \f(CW\*(C`maketext\*(C'\fR style of \f(CW\*(C`[_1]\*(C'\fR and
\&\f(CW\*(C`[quant,_1]\*(C'\fR for interpolation.  Alternatively, you can specify the
\&\f(CW\*(C`gettext\*(C'\fR style, which uses \f(CW%1\fR and \f(CW\*(C`%quant(%1)\*(C'\fR for interpolation.
.PP
This option is case-insensitive.
.SS "Export"
.IX Subsection "Export"
By default, this module exports a single function, \f(CW\*(C`loc\*(C'\fR, into its
caller's namespace.  You can set it to another name, or set it to
an empty string to disable exporting.
.SS "Subclass"
.IX Subsection "Subclass"
By default, this module creates an \f(CW\*(C`::I18N\*(C'\fR subclass under the
caller's package (or the package specified by \f(CW\*(C`Class\*(C'\fR), and stores
lexicon data in its subclasses.  You can assign a name other than
\&\f(CW\*(C`I18N\*(C'\fR via this option.
.SS "Decode"
.IX Subsection "Decode"
If set to a true value, source entries will be converted into
utf8\-strings (available in Perl 5.6.1 or later).  This feature
needs the \fBEncode\fR or \fBEncode::compat\fR module.
.SS "Encoding"
.IX Subsection "Encoding"
Specifies an encoding to store lexicon entries, instead of
utf8\-strings.  If set to \f(CW\*(C`locale\*(C'\fR, the encoding from the current
locale setting is used.  Implies a true value for \f(CW\*(C`Decode\*(C'\fR.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Thanks to Jos I. Boumans for suggesting this module to be written.
.PP
Thanks to Chia-Liang Kao for suggesting \f(CW\*(C`Path\*(C'\fR and \f(CW\*(C`loc_lang\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Locale::Maketext, Locale::Maketext::Lexicon
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003, 2004, 2005, 2006 by Audrey Tang <cpan@audreyt.org>.
.PP
This software is released under the \s-1MIT\s0 license cited below.  Additionally,
when this software is distributed with \fBPerl Kit, Version 5\fR, you may also
redistribute it and/or modify it under the same terms as Perl itself.
.ie n .SS "The ""\s-1MIT""\s0 License"
.el .SS "The ``\s-1MIT''\s0 License"
.IX Subsection "The MIT License"
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
