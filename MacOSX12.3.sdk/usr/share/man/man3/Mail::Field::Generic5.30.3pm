.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Field::Generic 3"
.TH Mail::Field::Generic 3 "2019-05-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Field::Generic \- implementation for inspecific fields
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Field::Generic
\&   is a Mail::Field
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Mail::Field;
\& my $field = Mail::Field\->new(\*(AqSubject\*(Aq, \*(Aqsome subject text\*(Aq);
\& my $field = Mail::Field\->new(subject => \*(Aqsome subject text\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A generic implementation for header fields without own
implementation. This is fine for fields like \f(CW\*(C`Subject\*(C'\fR, \f(CW\*(C`X\-Mailer\*(C'\fR,
etc., where the field holds only a string of no particular
importance/format.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Field.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Field.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Field.
.IP "Mail::Field::Generic\->\fBcombine\fR($fields)" 4
.IX Item "Mail::Field::Generic->combine($fields)"
Inherited, see \*(L"Constructors\*(R" in Mail::Field
.ie n .IP "Mail::Field::Generic\->\fBextract\fR( $tag, $head [, $index ] )" 4
.el .IP "Mail::Field::Generic\->\fBextract\fR( \f(CW$tag\fR, \f(CW$head\fR [, \f(CW$index\fR ] )" 4
.IX Item "Mail::Field::Generic->extract( $tag, $head [, $index ] )"
Inherited, see \*(L"Constructors\*(R" in Mail::Field
.ie n .IP "Mail::Field::Generic\->\fBnew\fR( $tag [, \s-1STRING\s0 | %options] )" 4
.el .IP "Mail::Field::Generic\->\fBnew\fR( \f(CW$tag\fR [, \s-1STRING\s0 | \f(CW%options\fR] )" 4
.IX Item "Mail::Field::Generic->new( $tag [, STRING | %options] )"
Inherited, see \*(L"Constructors\*(R" in Mail::Field
.ie n .SS """Fake"" constructors"
.el .SS "``Fake'' constructors"
.IX Subsection "Fake constructors"
Extends "\*(L"Fake\*(R" constructors" in Mail::Field.
.ie n .IP "$obj\->\fBcreate\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(%options)" 4
.IX Item "$obj->create(%options)"
.Vb 2
\& \-Option\-\-Default
\&  Text    \*(Aq\*(Aq
.Ve
.RS 4
.IP "Text => \s-1STRING\s0" 2
.IX Item "Text => STRING"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBparse\fR( [\s-1STRING\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR( [\s-1STRING\s0] )" 4
.IX Item "$obj->parse( [STRING] )"
.PD
Set the new text, which is empty when no \s-1STRING\s0 is provided.
.SS "Accessors"
.IX Subsection "Accessors"
Extends \*(L"Accessors\*(R" in Mail::Field.
.ie n .IP "$obj\->\fBset\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR(%options)" 4
.IX Item "$obj->set(%options)"
Inherited, see \*(L"Accessors\*(R" in Mail::Field
.ie n .IP "$obj\->\fBstringify\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstringify\fR()" 4
.IX Item "$obj->stringify()"
Inherited, see \*(L"Accessors\*(R" in Mail::Field
.ie n .IP "$obj\->\fBtag\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtag\fR()" 4
.IX Item "$obj->tag()"
.PD 0
.IP "Mail::Field::Generic\->\fBtag\fR()" 4
.IX Item "Mail::Field::Generic->tag()"
.PD
Inherited, see \*(L"Accessors\*(R" in Mail::Field
.SS "Smart accessors"
.IX Subsection "Smart accessors"
Extends \*(L"Smart accessors\*(R" in Mail::Field.
.ie n .IP "$obj\->\fBtext\fR( [\s-1STRING\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBtext\fR( [\s-1STRING\s0] )" 4
.IX Item "$obj->text( [STRING] )"
Inherited, see \*(L"Smart accessors\*(R" in Mail::Field
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\*(R"\s0 in Mail::Field.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Undefined subroutine <method> called" 4
.IX Item "Error: Undefined subroutine <method> called"
Mail::Field objects use autoloading to compile new functionality.
Apparently, the method called is not implemented for the specific
class of the field object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2017 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
