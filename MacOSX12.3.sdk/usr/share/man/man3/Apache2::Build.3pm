.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Apache2::Build 3"
.TH Apache2::Build 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache2::Build \- Methods for locating and parsing bits of Apache source code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Apache2::Build ();
\& my $build = Apache2::Build\->new;
\&
\& # rebuild mod_perl with build opts from the previous build
\& % cd modperl\-2.0
\& % perl \-MApache2::Build \-e rebuild
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for locating and parsing bits of Apache
source code.
.PP
Since mod_perl remembers what build options were used to build it, you
can use this knowledge to rebuild it using the same options. Simply
chdir to the mod_perl source directory and run:
.PP
.Vb 2
\&  % cd modperl\-2.0
\&  % perl \-MApache2::Build \-e rebuild
.Ve
.PP
If you want to rebuild not yet installed, but already built mod_perl,
run from its root directory:
.PP
.Vb 1
\&  % perl \-Ilib \-MApache2::Build \-e rebuild
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Create an object blessed into the \fBApache2::Build\fR class.
.Sp
.Vb 1
\& my $build = Apache2::Build\->new;
.Ve
.IP "dir" 4
.IX Item "dir"
Top level directory where source files are located.
.Sp
.Vb 2
\& my $dir = $build\->dir;
\& \-d $dir or die "can\*(Aqt stat $dir $!\en";
.Ve
.IP "find" 4
.IX Item "find"
Searches for apache source directories, return a list of those found.
.Sp
Example:
.Sp
.Vb 4
\& for my $dir ($build\->find) {
\&    my $yn = prompt "Configure with $dir ?", "y";
\&    ...
\& }
.Ve
.IP "inc" 4
.IX Item "inc"
Print include paths for MakeMaker's \fB\s-1INC\s0\fR argument to
\&\f(CW\*(C`WriteMakefile\*(C'\fR.
.Sp
Example:
.Sp
.Vb 1
\& use ExtUtils::MakeMaker;
\&
\& use Apache2::Build ();
\&
\& WriteMakefile(
\&     \*(AqNAME\*(Aq    => \*(AqApache2::Module\*(Aq,
\&     \*(AqVERSION\*(Aq => \*(Aq0.01\*(Aq,
\&     \*(AqINC\*(Aq     => Apache2::Build\->new\->inc,
\& );
.Ve
.IP "module_magic_number" 4
.IX Item "module_magic_number"
Return the \fB\s-1MODULE_MAGIC_NUMBER\s0\fR defined in the apache source.
.Sp
Example:
.Sp
.Vb 1
\& my $mmn = $build\->module_magic_number;
.Ve
.IP "httpd_version" 4
.IX Item "httpd_version"
Return the server version.
.Sp
Example:
.Sp
.Vb 1
\& my $v = $build\->httpd_version;
.Ve
.IP "otherldflags" 4
.IX Item "otherldflags"
Return other ld flags for MakeMaker's \fBdynamic_lib\fR argument to
\&\f(CW\*(C`WriteMakefile\*(C'\fR. This might be needed on systems like \s-1AIX\s0 that need
special flags to the linker to be able to reference mod_perl or httpd
symbols.
.Sp
Example:
.Sp
.Vb 1
\& use ExtUtils::MakeMaker;
\&
\& use Apache2::Build ();
\&
\& WriteMakefile(
\&     \*(AqNAME\*(Aq        => \*(AqApache2::Module\*(Aq,
\&     \*(AqVERSION\*(Aq     => \*(Aq0.01\*(Aq, 
\&     \*(AqINC\*(Aq         => Apache2::Build\->new\->inc,
\&     \*(Aqdynamic_lib\*(Aq => {
\&         \*(AqOTHERLDFLAGS\*(Aq => Apache2::Build\->new\->otherldflags,
\&     },
\& );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug MacEachern
