.TH "MPSImageDescriptor" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSImageDescriptor
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSImage\&.h>\fP
.PP
Inherits NSObject, and <NSCopying>\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBcopyWithZone:\fP"
.br
.in -1c
.SS "Class Methods"

.in +1c
.ti -1c
.RI "(__nonnull instancetype) + \fBimageDescriptorWithChannelFormat:width:height:featureChannels:\fP"
.br
.ti -1c
.RI "(__nonnull instancetype) + \fBimageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBwidth\fP"
.br
.ti -1c
.RI "NSUInteger \fBheight\fP"
.br
.ti -1c
.RI "NSUInteger \fBfeatureChannels\fP"
.br
.ti -1c
.RI "NSUInteger \fBnumberOfImages\fP"
.br
.ti -1c
.RI "MTLPixelFormat \fBpixelFormat\fP"
.br
.ti -1c
.RI "\fBMPSImageFeatureChannelFormat\fP \fBchannelFormat\fP"
.br
.ti -1c
.RI "MTLCPUCacheMode \fBcpuCacheMode\fP"
.br
.ti -1c
.RI "MTLStorageMode \fBstorageMode\fP"
.br
.ti -1c
.RI "MTLTextureUsage \fBusage\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
MPSImage\&.h  MPSCore\&.framework
.PP
\fBCopyright:\fP
.RS 4
Copyright (c) 2015-2017 Apple Inc\&. All rights reserved\&.  \fBA\fP \fBMPSImage\fP is a MTLTexture abstraction that allows for more than 4 channels, and for temporary images\&.
.RE
.PP
This depends on Metal\&.framework  \fBA\fP \fBMPSImageDescriptor\fP object describes a attributes of \fBMPSImage\fP and is used to create one (see \fBMPSImage\fP discussion below) 
.SH "Method Documentation"
.PP 
.SS "\- (nonnull instancetype) copyWithZone: (NSZone *__nullable) zone"

.SS "+ (__nonnull instancetype) imageDescriptorWithChannelFormat: (\fBMPSImageFeatureChannelFormat\fP) channelFormat(NSUInteger) width(NSUInteger) height(NSUInteger) featureChannels"
Create a \fBMPSImageDescriptor\fP for a single read/write cnn image\&. 
.SS "+ (__nonnull instancetype) imageDescriptorWithChannelFormat: (\fBMPSImageFeatureChannelFormat\fP) channelFormat(NSUInteger) width(NSUInteger) height(NSUInteger) featureChannels(NSUInteger) numberOfImages(MTLTextureUsage) usage"
Create a \fBMPSImageDescriptor\fP for a read/write cnn image with option to set usage and batch size (numberOfImages)\&. 
.SH "Property Documentation"
.PP 
.SS "\- channelFormat\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The storage format to use for each channel in the image\&. 
.SS "\- cpuCacheMode\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Options to specify CPU cache mode of texture resource\&. Default = MTLCPUCacheModeDefaultCache 
.SS "\- featureChannels\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of feature channels per pixel\&. Default = 1\&. 
.SS "\- height\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The height of the CNN image\&.  The formal height of the CNN image in pixels\&. Default = 1\&. 
.SS "\- numberOfImages\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of images for batch processing\&. Default = 1\&. 
.SS "\- pixelFormat\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The MTLPixelFormat expected for the underlying texture\&. 
.SS "\- storageMode\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
To specify storage mode of texture resource\&.  Storage mode options: 
.PP
.nf
Default =   MTLStorageModeShared on iOS
            MTLStorageModeManaged on Mac OSX
MTLStorageModeShared not supported on Mac OSX\&.
See Metal headers for synchronization requirements when using StorageModeManaged

.fi
.PP
 
.SS "\- usage\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Description of texture usage\&. Default = MTLTextureUsageShaderRead/Write 
.SS "\- width\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The width of the CNN image\&.  The formal width of the CNN image in pixels\&. Default = 1\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
