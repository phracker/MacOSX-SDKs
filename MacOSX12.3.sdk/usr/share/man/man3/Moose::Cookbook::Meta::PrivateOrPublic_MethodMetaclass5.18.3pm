.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Meta::PrivateOrPublic_MethodMetaclass 3"
.TH Moose::Cookbook::Meta::PrivateOrPublic_MethodMetaclass 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Meta::PrivateOrPublic_MethodMetaclass \- A method metaclass for marking methods public or private
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyApp::Meta::Method::PrivateOrPublic;
\&
\&  use Moose;
\&  use Moose::Util::TypeConstraints;
\&
\&  extends \*(AqMoose::Meta::Method\*(Aq;
\&
\&  has \*(Aq_policy\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => enum( [ qw( public private ) ] ),
\&      default  => \*(Aqpublic\*(Aq,
\&      init_arg => \*(Aqpolicy\*(Aq,
\&  );
\&
\&  sub new {
\&      my $class   = shift;
\&      my %options = @_;
\&
\&      my $self = $class\->SUPER::wrap(%options);
\&
\&      $self\->{_policy} = $options{policy};
\&
\&      $self\->_add_policy_wrapper;
\&
\&      return $self;
\&  }
\&
\&  sub _add_policy_wrapper {
\&      my $self = shift;
\&
\&      return if $self\->is_public;
\&
\&      my $name      = $self\->name;
\&      my $package   = $self\->package_name;
\&      my $real_body = $self\->body;
\&
\&      my $body = sub {
\&          die "The $package\e::$name method is private"
\&              unless ( scalar caller() ) eq $package;
\&
\&          goto &{$real_body};
\&      };
\&
\&      $self\->{body} = $body;
\&  }
\&
\&  sub is_public  { $_[0]\->_policy eq \*(Aqpublic\*(Aq }
\&  sub is_private { $_[0]\->_policy eq \*(Aqprivate\*(Aq }
\&
\&  package MyApp::User;
\&
\&  use Moose;
\&
\&  has \*(Aqpassword\*(Aq => ( is => \*(Aqrw\*(Aq );
\&
\&  _\|_PACKAGE_\|_\->meta()\->add_method(
\&      \*(Aq_reset_password\*(Aq,
\&      MyApp::Meta::Method::PrivateOrPublic\->new(
\&          name         => \*(Aq_reset_password\*(Aq,
\&          package_name => _\|_PACKAGE_\|_,
\&          body         => sub { $_[0]\->password(\*(Aqreset\*(Aq) },
\&          policy       => \*(Aqprivate\*(Aq,
\&      )
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This example shows a custom method metaclass that models public versus
private methods. If a method is defined as private, it adds a wrapper
around the method which dies unless it is called from the class where
it was defined.
.PP
The way the method is added to the class is rather ugly. If we wanted
to make this a real feature, we'd probably want to add some sort of
sugar to allow us to declare private methods, but that is beyond the
scope of this recipe. See the Extending recipes for more on this
topic.
.PP
The core of our custom class is the \f(CW\*(C`policy\*(C'\fR attribute, and
\&\f(CW\*(C`_add_policy_wrapper\*(C'\fR method.
.PP
You'll note that we have to explicitly set the \f(CW\*(C`policy\*(C'\fR attribute in
our constructor:
.PP
.Vb 1
\&      $self\->{_policy} = $options{policy};
.Ve
.PP
That is necessary because Moose metaclasses do not use the meta \s-1API\s0 to
create objects. Most Moose classes have a custom \*(L"inlined\*(R" constructor
for speed.
.PP
In this particular case, our parent class's constructor is the \f(CW\*(C`wrap\*(C'\fR
method. We call that to build our object, but it does not include
subclass-specific attributes.
.PP
The \f(CW\*(C`_add_policy_wrapper\*(C'\fR method is where the real work is done. If
the method is private, we construct a wrapper around the real
subroutine which checks that the caller matches the package in which
the subroutine was created.
.PP
If they don't match, it dies. If they do match, the real method is
called. We use \f(CW\*(C`goto\*(C'\fR so that the wrapper does not show up in the
call stack.
.PP
Finally, we replace the value of \f(CW\*(C`$self\->{body}\*(C'\fR. This is another
case where we have to do something a bit gross because Moose does not
use Moose for its own implementation.
.PP
When we pass this method object to the metaclass's \f(CW\*(C`add_method\*(C'\fR
method, it will take the method body and make it available in the
class.
.PP
Finally, when we retrieve these methods via the introspection \s-1API,\s0 we
can call the \f(CW\*(C`is_public\*(C'\fR and \f(CW\*(C`is_private\*(C'\fR methods on them to get
more information about the method.
.SH "SUMMARY"
.IX Header "SUMMARY"
A custom method metaclass lets us add both behavior and
meta-information to methods. Unfortunately, because the Perl
interpreter does not provide easy hooks into method declaration, the
\&\s-1API\s0 we have for adding these methods is not very pretty.
.PP
That can be improved with custom Moose-like sugar, or even by using a
tool like Devel::Declare to create full-blown new keywords in Perl.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
