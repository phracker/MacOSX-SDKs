.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Role::Parameterized 3pm"
.TH MooseX::Role::Parameterized 3pm "2019-07-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Role::Parameterized \- Moose roles with composition parameters
.SH "VERSION"
.IX Header "VERSION"
version 1.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Counter;
\&    use MooseX::Role::Parameterized;
\&
\&    parameter name => (
\&        isa      => \*(AqStr\*(Aq,
\&        required => 1,
\&    );
\&
\&    role {
\&        my $p = shift;
\&
\&        my $name = $p\->name;
\&
\&        has $name => (
\&            is      => \*(Aqrw\*(Aq,
\&            isa     => \*(AqInt\*(Aq,
\&            default => 0,
\&        );
\&
\&        method "increment_$name" => sub {
\&            my $self = shift;
\&            $self\->$name($self\->$name + 1);
\&        };
\&
\&        method "reset_$name" => sub {
\&            my $self = shift;
\&            $self\->$name(0);
\&        };
\&    };
\&
\&    package MyGame::Weapon;
\&    use Moose;
\&
\&    with Counter => { name => \*(Aqenchantment\*(Aq };
\&
\&    package MyGame::Wand;
\&    use Moose;
\&
\&    with Counter => { name => \*(Aqzapped\*(Aq };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Your parameterized role consists of two new things: parameter declarations
and a \f(CW\*(C`role\*(C'\fR block.
.PP
Parameters are declared using the \*(L"parameter\*(R" keyword which very much
resembles \*(L"has\*(R" in Moose. You can use any option that \*(L"has\*(R" in Moose accepts. The
default value for the \f(CW\*(C`is\*(C'\fR option is \f(CW\*(C`ro\*(C'\fR as that's a very common case. Use
\&\f(CW\*(C`is => \*(Aqbare\*(Aq\*(C'\fR if you want no accessor. These parameters will get their
values when the consuming class (or role) uses \*(L"with\*(R" in Moose. A parameter
object will be constructed with these values, and passed to the \f(CW\*(C`role\*(C'\fR block.
.PP
The \f(CW\*(C`role\*(C'\fR block then uses the usual Moose::Role keywords to build up a
role. You can shift off the parameter object to inspect what the consuming
class provided as parameters. You use the parameters to customize your
role however you wish.
.PP
There are many possible implementations for parameterized roles (hopefully with
a consistent enough \s-1API\s0); I believe this to be the easiest and most flexible
design. Coincidentally, Pugs originally had an eerily similar design.
.PP
See MooseX::Role::Parameterized::Extending for some tips on how to extend
this module.
.SS "Why a parameters object?"
.IX Subsection "Why a parameters object?"
I've been asked several times "Why use a parameter \fIobject\fR and not just a
parameter \fIhashref\fR? That would eliminate the need to explicitly declare your
parameters."
.PP
The benefits of using an object are similar to the benefits of using Moose. You
get an easy way to specify lazy defaults, type constraint, delegation, and so
on. You get to use MooseX modules.
.SH "MooseX::Role::Parameterized::Tutorial"
.IX Header "MooseX::Role::Parameterized::Tutorial"
\&\fBStop!\fR If you're new here, please read
MooseX::Role::Parameterized::Tutorial for a much gentler introduction.
.PP
You also get the usual introspective and intercessory abilities that come
standard with the metaobject protocol. Ambitious users should be able to add
traits to the parameters metaclass to further customize behavior. Please let
me know if you're doing anything viciously complicated with this extension. :)
.SH "CAVEATS"
.IX Header "CAVEATS"
You must use this syntax to declare methods in the role block:
\&\f(CW\*(C`method NAME => sub { ... };\*(C'\fR. This is due to a limitation in Perl. In
return though you can use parameters \fIin your methods\fR!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://sartak.org/2009/01/parametric\-roles\-in\-perl\-5.html>
.PP
<http://sartak.org/2009/05/the\-design\-of\-parameterized\-roles.html>
.PP
<http://stevan\-little.blogspot.com/2009/07/thoughts\-on\-parameterized\-roles.html>
.PP
<http://perldition.org/articles/Parameterized%20Roles%20with%20MooseX::Declare.pod>
.PP
<http://www.modernperlbooks.com/mt/2011/01/the\-parametric\-role\-of\-my\-mvc\-plugin\-system.html>
.PP
<http://jjnapiorkowski.typepad.com/modern\-perl/2010/08/parameterized\-roles\-and\-method\-traits\-redo.html>
.PP
<http://sartak.org/talks/yapc\-asia\-2009/(parameterized)\-roles/>
.PP
<https://github.com/SamuraiJack/JooseX\-Role\-Parameterized> \- this extension ported to JavaScript's Joose
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Role-Parameterized>
(or bug\-MooseX\-Role\-Parameterized@rt.cpan.org <mailto:bug-MooseX-Role-Parameterized@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shawn M Moore <code@sartak.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Oliver Charles <oliver.g.charles@googlemail.com>
.IP "\(bu" 4
Yuval Kogman <nothingmuch@woobling.org>
.IP "\(bu" 4
Robert 'phaylon' Sedlacek <rs@474.at>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Mark Fowler <mark@twoshortplanks.com>
.IP "\(bu" 4
Chris Weyl <cweyl@alumni.drew.edu>
.IP "\(bu" 4
Csson <erik.carlsson@live.com>
.IP "\(bu" 4
Andy Jack <github@veracity.ca>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.IP "\(bu" 4
Todd Hepler <thepler@employees.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Shawn M Moore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
