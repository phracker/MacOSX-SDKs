.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Perl::Collection::Hash::MooseLike 3"
.TH Data::Perl::Collection::Hash::MooseLike 3 "2020-10-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Perl::Collection::Hash::MooseLike \- Collection::Hash subclass that simulates Moose's native traits.
.SH "VERSION"
.IX Header "VERSION"
version 0.001009
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::Perl::Collection::Hash::MooseLike;
\&
\&  my $hash = Data::Perl::Collection::Hash::MooseLike\->new(a => 1, b => 2);
\&
\&  $hash\->values; # (1, 2)
\&
\&  $hash\->set(\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq); # (a => 1, b => 2, foo => \*(Aqbar\*(Aq)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a wrapper and methods for interacting with a hash.  All
methods are written to emulate/match existing behavior that exists with Moose's
native traits.
.SH "DIFFERENCES IN FUNCTIONALITY"
.IX Header "DIFFERENCES IN FUNCTIONALITY"
.IP "\fBget($key, \f(CB$key\fB, ...)\fR" 4
.IX Item "get($key, $key, ...)"
Returns values from the hash.
.Sp
In list context it returns a list of values in the hash for the given keys. In
scalar context it returns the value for the last key specified.
.IP "\fBset($key, \f(CB$value\fB, ...)\fR" 4
.IX Item "set($key, $value, ...)"
Sets the elements in the hash to the given values. It returns the new values
set for each key, in the same order as the keys passed to the method.
.Sp
This method requires at least two arguments, and expects an even number of
arguments.
.IP "\fBdelete($key, \f(CB$key\fB, ...)\fR" 4
.IX Item "delete($key, $key, ...)"
Removes the elements with the given keys.
.Sp
In list context it returns a list of values in the hash for the deleted keys.
In scalar context it returns the value for the last key specified.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::Perl
.IP "\(bu" 4
Data::Perl::Role::Collection::Hash
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Matthew Phillips <mattp@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
