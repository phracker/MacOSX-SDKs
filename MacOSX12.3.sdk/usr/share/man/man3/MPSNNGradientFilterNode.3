.TH "MPSNNGradientFilterNode" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSNNGradientFilterNode
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSNNGraphNodes\&.h>\fP
.PP
Inherits \fBMPSNNFilterNode\fP\&.
.PP
Inherited by \fBMPSCNNBatchNormalizationGradientNode\fP, \fBMPSCNNConvolutionGradientNode\fP, \fBMPSCNNCrossChannelNormalizationGradientNode\fP, \fBMPSCNNDropoutGradientNode\fP, \fBMPSCNNInstanceNormalizationGradientNode\fP, \fBMPSCNNLocalContrastNormalizationGradientNode\fP, \fBMPSCNNLogSoftMaxGradientNode\fP, \fBMPSCNNNeuronGradientNode\fP, \fBMPSCNNPoolingGradientNode\fP, \fBMPSCNNSoftMaxGradientNode\fP, \fBMPSCNNSpatialNormalizationGradientNode\fP, \fBMPSCNNUpsamplingBilinearGradientNode\fP, \fBMPSCNNUpsamplingNearestGradientNode\fP, \fBMPSNNArithmeticGradientNode\fP, and \fBMPSNNConcatenationGradientNode\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(\fBMPSNNGradientFilterNode\fP *__nonnull) \- \fBgradientFilterWithSources:\fP"
.br
.ti -1c
.RI "(NSArray< \fBMPSNNGradientFilterNode\fP * > *__nonnull) \- \fBgradientFiltersWithSources:\fP"
.br
.ti -1c
.RI "(\fBMPSNNGradientFilterNode\fP *__nonnull) \- \fBgradientFilterWithSource:\fP"
.br
.ti -1c
.RI "(NSArray< \fBMPSNNGradientFilterNode\fP * > *__nonnull) \- \fBgradientFiltersWithSource:\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
For each \fBMPSNNFilterNode\fP, there is a corresponding \fBMPSNNGradientFilterNode\fP used for training that back propagates image gradients to refine the various parameters in each node\&. Generally, it takes as input a gradient corresponding to the result image from the \fBMPSNNFilterNode\fP and returns a gradient image corresponding to the source image of the \fBMPSNNFilterNode\fP\&. In addition, there is generally a MPSNNState produced by the \fBMPSNNFilterNode\fP that is consumed by the MPSNNGradientNode and the MPSNNGradientNode generally needs to look at the \fBMPSNNFilterNode\fP source image\&.
.PP
If you have a simple method to traverse your inference graph backwards, then -[\fBMPSNNFilterNode\fP gradientFilterWithSource:] is a simple way to construct these\&. 
.SH "Method Documentation"
.PP 
.SS "\- (NSArray <\fBMPSNNGradientFilterNode\fP*> * __nonnull) gradientFiltersWithSource: (\fBMPSNNImageNode\fP *__nonnull) gradientImage"
Return multiple gradient versions of the filter  MPSNNFilters that consume multiple inputs generally result in multiple conjugate filters for the gradient computation at the end of training\&. For example, a single concatenation operation that concatenates multple images will result in an array of slice operators that carve out subsections of the input gradient image\&. 
.PP
Reimplemented from \fBMPSNNFilterNode\fP\&.
.SS "\- (NSArray <\fBMPSNNGradientFilterNode\fP*> * __nonnull) gradientFiltersWithSources: (NSArray< \fBMPSNNImageNode\fP * > *__nonnull) gradientImages"
Return multiple gradient versions of the filter  MPSNNFilters that consume multiple inputs generally result in multiple conjugate filters for the gradient computation at the end of training\&. For example, a single concatenation operation that concatenates multple images will result in an array of slice operators that carve out subsections of the input gradient image\&. 
.PP
Reimplemented from \fBMPSNNFilterNode\fP\&.
.SS "\- (\fBMPSNNGradientFilterNode\fP*__nonnull) gradientFilterWithSource: (\fBMPSNNImageNode\fP *__nonnull) gradientImage"
Return the gradient (backwards) version of this filter\&.  The backwards training version of the filter will be returned\&. The non-gradient image and state arguments for the filter are automatically obtained from the target\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgradientImage\fP The gradient images corresponding with the resultImage of the target 
.RE
.PP

.PP
Reimplemented from \fBMPSNNFilterNode\fP\&.
.SS "\- (\fBMPSNNGradientFilterNode\fP*__nonnull) gradientFilterWithSources: (NSArray< \fBMPSNNImageNode\fP * > *__nonnull) gradientImages"
Return the gradient (backwards) version of this filter\&.  The backwards training version of the filter will be returned\&. The non-gradient image and state arguments for the filter are automatically obtained from the target\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgradientImages\fP The gradient images corresponding with the resultImage of the target 
.RE
.PP

.PP
Reimplemented from \fBMPSNNFilterNode\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
