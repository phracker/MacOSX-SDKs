.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Schema 3"
.TH Net::LDAP::Schema 3 "2017-01-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Schema \- Load and manipulate an LDAP v3 Schema
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Net::LDAP;
\& use Net::LDAP::Schema;
\&
\& #
\& # Read schema from server
\& #
\& $ldap = Net::LDAP\->new ( $server );
\& $ldap\->bind ( );
\& $schema = $ldap\->schema ( );
\&
\& #
\& # Load from LDIF
\& #
\& $schema = Net::LDAP::Schema\->new;
\& $schema\->parse ( "schema.ldif" ) or die $schema\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Schema\*(C'\fR provides a means to load an \s-1LDAP\s0 schema and query it
for information regarding supported objectclasses, attributes and syntaxes.
.SH "METHODS"
.IX Header "METHODS"
Where a method is stated as taking the 'name or \s-1OID\s0' of a schema item (which
may be an object class, attribute or syntax) then a case-insensitive name
or raw \s-1OID\s0 (object identifier, in dotted numeric string form, e.g. 2.5.4.0)
may be supplied.
.PP
Each returned item of schema (e.g. an attribute definition) is returned
in a \s-1HASH.\s0 The keys in the returned \s-1HASH\s0 are lowercase versions of
the keys read from the server. Here's a partial list (not all HASHes
define all keys) although note that \s-1RFC 4512\s0 permits other keys as
well:
.PP
.Vb 10
\& name
\& desc
\& obsolete
\& sup
\& equality
\& ordering
\& substr
\& syntax
\& single\-value
\& collective
\& no\-user\-modification
\& usage
\& abstract
\& structural
\& auxiliary
\& must
\& may
\& applies
\& aux
\& not
\& oc
\& form
.Ve
.IP "all_attributes ( )" 4
.IX Item "all_attributes ( )"
.PD 0
.IP "all_ditcontentrules ( )" 4
.IX Item "all_ditcontentrules ( )"
.IP "all_ditstructurerules ( )" 4
.IX Item "all_ditstructurerules ( )"
.IP "all_matchingrules ( )" 4
.IX Item "all_matchingrules ( )"
.IP "all_matchingruleuses ( )" 4
.IX Item "all_matchingruleuses ( )"
.IP "all_nameforms ( )" 4
.IX Item "all_nameforms ( )"
.IP "all_objectclasses ( )" 4
.IX Item "all_objectclasses ( )"
.IP "all_syntaxes ( )" 4
.IX Item "all_syntaxes ( )"
.PD
Returns a list of all the requested types in the schema.
.IP "attribute ( \s-1NAME\s0 )" 4
.IX Item "attribute ( NAME )"
.PD 0
.IP "ditcontentrule ( \s-1NAME\s0 )" 4
.IX Item "ditcontentrule ( NAME )"
.IP "ditstructurerule ( \s-1NAME\s0 )" 4
.IX Item "ditstructurerule ( NAME )"
.IP "matchingrule ( \s-1NAME\s0 )" 4
.IX Item "matchingrule ( NAME )"
.IP "matchingruleuse ( \s-1NAME\s0 )" 4
.IX Item "matchingruleuse ( NAME )"
.IP "nameform ( \s-1NAME\s0 )" 4
.IX Item "nameform ( NAME )"
.IP "objectclass ( \s-1NAME\s0 )" 4
.IX Item "objectclass ( NAME )"
.IP "syntax ( \s-1NAME\s0 )" 4
.IX Item "syntax ( NAME )"
.PD
Returns a reference to a hash, or \f(CW\*(C`undef\*(C'\fR if the schema item does not
exist. \f(CW\*(C`NAME\*(C'\fR can be a name or an \s-1OID.\s0
.Sp
.Vb 1
\& $attr_href = $schema\->attribute( "attrname" );
.Ve
.IP "dump ( )" 4
.IX Item "dump ( )"
Dump the raw schema information to standard out.
.IP "dump ( \s-1FILENAME\s0 )" 4
.IX Item "dump ( FILENAME )"
Dump the raw schema information to a file.
.Sp
.Vb 1
\& $result = $schema\->dump ( "./schema.dump" );
.Ve
.Sp
If no schema data is returned from directory server, the method will
return undefined.  Otherwise a value of 1 is always returned.
.IP "error ( )" 4
.IX Item "error ( )"
Returns the last error encountered when parsing the schema.
.IP "may ( \s-1OBJECTCLASS\s0 )" 4
.IX Item "may ( OBJECTCLASS )"
Given an argument which is the name or \s-1OID\s0 of a known object class,
returns a list of HASHes describing the attributes which are optional
in the class.
.Sp
.Vb 2
\&  @may = $schema\->may ( $oc );
\&  # First optional attr has the name \*(Aq$may[0]\->{name}\*(Aq
.Ve
.IP "must ( \s-1OBJECTCLASS\s0 )" 4
.IX Item "must ( OBJECTCLASS )"
Given an argument which is the name or \s-1OID\s0 of a known object class,
returns a list of HASHes describing the attributes which are mandatory
in the class.
.Sp
.Vb 1
\&  @must = $schema\->must ( $oc );
.Ve
.IP "parse ( \s-1MESG\s0 )" 4
.IX Item "parse ( MESG )"
.PD 0
.IP "parse ( \s-1ENTRY\s0 )" 4
.IX Item "parse ( ENTRY )"
.IP "parse ( \s-1FILENAME\s0 )" 4
.IX Item "parse ( FILENAME )"
.PD
Takes a single argument which can be any of, a message object returned
from an \s-1LDAP\s0 search, a \f(CW\*(C`Net::LDAP::Entry\*(C'\fR object or the name of a
file containing an \s-1LDIF\s0 form of the schema.
.Sp
If the argument is a message result from a search,
\&\f(CW\*(C`Net::LDAP::Schema\*(C'\fR will parse the schema from the first entry
returned.
.Sp
Returns true on success and \f(CW\*(C`undef\*(C'\fR on error.
.IP "superclass ( \s-1NAME\s0 )" 4
.IX Item "superclass ( NAME )"
Given an argument which is the name or \s-1OID\s0 of a known objectclass,
returns the list of names of the immediate superclasses.
.IP "attribute_syntax ( \s-1NAME\s0 )" 4
.IX Item "attribute_syntax ( NAME )"
Given an attribute name, return the actual syntax taking into account
attribute supertypes.
.IP "matchingrule_for_attribute ( \s-1NAME, RULE\s0 )" 4
.IX Item "matchingrule_for_attribute ( NAME, RULE )"
Given an attribute name and a matching rule (\f(CW\*(C`equality\*(C'\fR,
\&\f(CW\*(C`substr\*(C'\fR, etc), return the actual rule taking into account attribute
supertypes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::RFC
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>
John Berthels <jjb@nexor.co.uk>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
