.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Regexp::Common::number 3"
.TH Regexp::Common::number 3 "2013-03-11" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Regexp::Common::number \-\- provide regexes for numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Regexp::Common qw /number/;
\&
\&    while (<>) {
\&        /^$RE{num}{int}$/                and  print "Integer\en";
\&        /^$RE{num}{real}$/               and  print "Real\en";
\&        /^$RE{num}{real}{\-base => 16}$/  and  print "Hexadecimal real\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please consult the manual of Regexp::Common for a general description
of the works of this interface.
.PP
Do not use this module directly, but load it via \fIRegexp::Common\fR.
.ie n .SS "$RE{num}{int}{\-base}{\-sep}{\-group}{\-places}{\-sign}"
.el .SS "\f(CW$RE{num}{int}{\-base}{\-sep}{\-group}{\-places}{\-sign}\fP"
.IX Subsection "$RE{num}{int}{-base}{-sep}{-group}{-places}{-sign}"
Returns a pattern that matches an integer.
.PP
If \f(CW\*(C`\-base => \f(CIB\f(CW\*(C'\fR is specified, the integer is in base \fIB\fR, with
\&\f(CW\*(C`2 <= \f(CIB\f(CW <= 36\*(C'\fR. For bases larger than 10, upper case letters
are used. The default base is 10.
.PP
If \f(CW\*(C`\-sep => \f(CIP\f(CW\*(C'\fR is specified, the pattern \fIP\fR is required as a
grouping marker within the number. If this option is not given, no
grouping marker is used.
.PP
If \f(CW\*(C`\-group => \f(CIN\f(CW\*(C'\fR is specified, digits between grouping markers
must be grouped in sequences of exactly \fIN\fR digits. The default value
of \fIN\fR is 3.  If \f(CW\*(C`\-group => \f(CIN,M\f(CW\*(C'\fR is specified, digits between
grouping markers must be grouped in sequences of at least \fIN\fR digits,
and at most \fIM\fR digits. This option is ignored unless the \f(CW\*(C`\-sep\*(C'\fR
option is used.
.PP
If \f(CW\*(C`\-places => \f(CIN\f(CW\*(C'\fR is specified, the integer recognized must be
exactly \fIN\fR digits wide. If \f(CW\*(C`\-places => \f(CIN,M\f(CW\*(C'\fR is specified, the
integer must be at least \fIN\fR wide, and at most \fIM\fR characters. There
is no default, which means that integers are unlimited in size. This
option is ignored if the \f(CW\*(C`\-sep\*(C'\fR option is used.
.PP
If \f(CW\*(C`\-sign => \f(CIP\f(CW\*(C'\fR is used, it's a pattern the leading sign has to
match. This defaults to \f(CW\*(C`[\-+]?\*(C'\fR, which means the number is optionally
preceded by a minus or a plus. If you want to match unsigned integers,
use \f(CW$RE{num}{int}{\-sign => \*(Aq\*(Aq}\fR.
.PP
For example:
.PP
.Vb 4
\& $RE{num}{int}                          # match 1234567
\& $RE{num}{int}{\-sep=>\*(Aq,\*(Aq}               # match 1,234,567
\& $RE{num}{int}{\-sep=>\*(Aq,?\*(Aq}              # match 1234567 or 1,234,567
\& $RE{num}{int}{\-sep=>\*(Aq.\*(Aq}{\-group=>4}    # match 1.2345.6789
.Ve
.PP
Under \f(CW\*(C`\-keep\*(C'\fR (see Regexp::Common):
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
captures the entire number
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
captures the optional sign of the number
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
captures the complete set of digits
.ie n .SS "$RE{num}{real}{\-base}{\-radix}{\-places}{\-sep}{\-group}{\-expon}"
.el .SS "\f(CW$RE{num}{real}{\-base}{\-radix}{\-places}{\-sep}{\-group}{\-expon}\fP"
.IX Subsection "$RE{num}{real}{-base}{-radix}{-places}{-sep}{-group}{-expon}"
Returns a pattern that matches a floating-point number.
.PP
If \f(CW\*(C`\-base=\f(CIN\f(CW\*(C'\fR is specified, the number is assumed to be in that base
(with A..Z representing the digits for 11..36). By default, the base is 10.
.PP
If \f(CW\*(C`\-radix=\f(CIP\f(CW\*(C'\fR is specified, the pattern \fIP\fR is used as the radix point for
the number (i.e. the \*(L"decimal point\*(R" in base 10). The default is \f(CW\*(C`qr/[.]/\*(C'\fR.
.PP
If \f(CW\*(C`\-places=\f(CIN\f(CW\*(C'\fR is specified, the number is assumed to have exactly
\&\fIN\fR places after the radix point.
If \f(CW\*(C`\-places=\f(CIM,N\f(CW\*(C'\fR is specified, the number is assumed to have between
\&\fIM\fR and \fIN\fR places after the radix point.
By default, the number of places is unrestricted.
.PP
If \f(CW\*(C`\-sep=\f(CIP\f(CW\*(C'\fR specified, the pattern \fIP\fR is required as a grouping marker
within the pre-radix section of the number. By default, no separator is
allowed.
.PP
If \f(CW\*(C`\-group=\f(CIN\f(CW\*(C'\fR is specified, digits between grouping separators
must be grouped in sequences of exactly \fIN\fR characters. The default value of
\&\fIN\fR is 3.
.PP
If \f(CW\*(C`\-expon=\f(CIP\f(CW\*(C'\fR is specified, the pattern \fIP\fR is used as the exponential
marker.  The default value of \fIP\fR is \f(CW\*(C`qr/[Ee]/\*(C'\fR.
.PP
If \f(CW\*(C`\-sign=\f(CIP\f(CW\*(C'\fR is specified, the pattern \fIP\fR is used to match the 
leading sign (and the sign of the exponent). This defaults to \f(CW\*(C`[\-+]?\*(C'\fR,
means means that an optional plus or minus sign can be used.
.PP
For example:
.PP
.Vb 5
\& $RE{num}{real}                  # matches 123.456 or \-0.1234567
\& $RE{num}{real}{\-places=>2}      # matches 123.45 or \-0.12
\& $RE{num}{real}{\-places=>\*(Aq0,3\*(Aq}  # matches 123.456 or 0 or 9.8
\& $RE{num}{real}{\-sep=>\*(Aq[,.]?\*(Aq}   # matches 123,456 or 123.456
\& $RE{num}{real}{\-base=>3\*(Aq}       # matches 121.102
.Ve
.PP
Under \f(CW\*(C`\-keep\*(C'\fR:
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
captures the entire match
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
captures the optional sign of the number
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
captures the complete mantissa
.ie n .IP "$4" 4
.el .IP "\f(CW$4\fR" 4
.IX Item "$4"
captures the whole number portion of the mantissa
.ie n .IP "$5" 4
.el .IP "\f(CW$5\fR" 4
.IX Item "$5"
captures the radix point
.ie n .IP "$6" 4
.el .IP "\f(CW$6\fR" 4
.IX Item "$6"
captures the fractional portion of the mantissa
.ie n .IP "$7" 4
.el .IP "\f(CW$7\fR" 4
.IX Item "$7"
captures the optional exponent marker
.ie n .IP "$8" 4
.el .IP "\f(CW$8\fR" 4
.IX Item "$8"
captures the entire exponent value
.ie n .IP "$9" 4
.el .IP "\f(CW$9\fR" 4
.IX Item "$9"
captures the optional sign of the exponent
.ie n .IP "$10" 4
.el .IP "\f(CW$10\fR" 4
.IX Item "$10"
captures the digits of the exponent
.ie n .SS "$RE{num}{dec}{\-radix}{\-places}{\-sep}{\-group}{\-expon}"
.el .SS "\f(CW$RE{num}{dec}{\-radix}{\-places}{\-sep}{\-group}{\-expon}\fP"
.IX Subsection "$RE{num}{dec}{-radix}{-places}{-sep}{-group}{-expon}"
A synonym for \f(CW$RE{num}{real}{\-base=>10}{...}\fR
.ie n .SS "$RE{num}{oct}{\-radix}{\-places}{\-sep}{\-group}{\-expon}"
.el .SS "\f(CW$RE{num}{oct}{\-radix}{\-places}{\-sep}{\-group}{\-expon}\fP"
.IX Subsection "$RE{num}{oct}{-radix}{-places}{-sep}{-group}{-expon}"
A synonym for \f(CW$RE{num}{real}{\-base=>8}{...}\fR
.ie n .SS "$RE{num}{bin}{\-radix}{\-places}{\-sep}{\-group}{\-expon}"
.el .SS "\f(CW$RE{num}{bin}{\-radix}{\-places}{\-sep}{\-group}{\-expon}\fP"
.IX Subsection "$RE{num}{bin}{-radix}{-places}{-sep}{-group}{-expon}"
A synonym for \f(CW$RE{num}{real}{\-base=>2}{...}\fR
.ie n .SS "$RE{num}{hex}{\-radix}{\-places}{\-sep}{\-group}{\-expon}"
.el .SS "\f(CW$RE{num}{hex}{\-radix}{\-places}{\-sep}{\-group}{\-expon}\fP"
.IX Subsection "$RE{num}{hex}{-radix}{-places}{-sep}{-group}{-expon}"
A synonym for \f(CW$RE{num}{real}{\-base=>16}{...}\fR
.ie n .SS "$RE{num}{decimal}{\-base}{\-radix}{\-places}{\-sep}{\-group}"
.el .SS "\f(CW$RE{num}{decimal}{\-base}{\-radix}{\-places}{\-sep}{\-group}\fP"
.IX Subsection "$RE{num}{decimal}{-base}{-radix}{-places}{-sep}{-group}"
The same as \f(CW$RE{num}{real}\fR, except that an exponent isn't allowed.
Hence, this returns a pattern matching \fIdecimal\fR numbers.
.PP
If \f(CW\*(C`\-base=\f(CIN\f(CW\*(C'\fR is specified, the number is assumed to be in that base
(with A..Z representing the digits for 11..36). By default, the base is 10.
.PP
If \f(CW\*(C`\-radix=\f(CIP\f(CW\*(C'\fR is specified, the pattern \fIP\fR is used as the radix point for
the number (i.e. the \*(L"decimal point\*(R" in base 10). The default is \f(CW\*(C`qr/[.]/\*(C'\fR.
.PP
If \f(CW\*(C`\-places=\f(CIN\f(CW\*(C'\fR is specified, the number is assumed to have exactly
\&\fIN\fR places after the radix point.
If \f(CW\*(C`\-places=\f(CIM,N\f(CW\*(C'\fR is specified, the number is assumed to have between
\&\fIM\fR and \fIN\fR places after the radix point.
By default, the number of places is unrestricted.
.PP
If \f(CW\*(C`\-sep=\f(CIP\f(CW\*(C'\fR specified, the pattern \fIP\fR is required as a grouping marker
within the pre-radix section of the number. By default, no separator is
allowed.
.PP
If \f(CW\*(C`\-group=\f(CIN\f(CW\*(C'\fR is specified, digits between grouping separators
must be grouped in sequences of exactly \fIN\fR characters. The default value of
\&\fIN\fR is 3.
.PP
For example:
.PP
.Vb 5
\& $RE{num}{decimal}                  # matches 123.456 or \-0.1234567
\& $RE{num}{decimal}{\-places=>2}      # matches 123.45 or \-0.12
\& $RE{num}{decimal}{\-places=>\*(Aq0,3\*(Aq}  # matches 123.456 or 0 or 9.8
\& $RE{num}{decimal}{\-sep=>\*(Aq[,.]?\*(Aq}   # matches 123,456 or 123.456
\& $RE{num}{decimal}{\-base=>3\*(Aq}       # matches 121.102
.Ve
.PP
Under \f(CW\*(C`\-keep\*(C'\fR:
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
captures the entire match
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
captures the optional sign of the number
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
captures the complete mantissa
.ie n .IP "$4" 4
.el .IP "\f(CW$4\fR" 4
.IX Item "$4"
captures the whole number portion of the mantissa
.ie n .IP "$5" 4
.el .IP "\f(CW$5\fR" 4
.IX Item "$5"
captures the radix point
.ie n .IP "$6" 4
.el .IP "\f(CW$6\fR" 4
.IX Item "$6"
captures the fractional portion of the mantissa
.ie n .SS "$RE{num}{square}"
.el .SS "\f(CW$RE{num}{square}\fP"
.IX Subsection "$RE{num}{square}"
Returns a pattern that matches a (decimal) square. Because Perl's
arithmetic is lossy when using integers over about 53 bits, this pattern
only recognizes numbers less than 9000000000000000, if one uses a
Perl that is configured to use 64 bit integers. Otherwise, the limit
is 2147483647. These restrictions were introduced in versions 2.116
and 2.117 of Regexp::Common. Regardless whether \f(CW\*(C`\-keep\*(C'\fR was set,
the matched number will be returned in \f(CW$1\fR.
.PP
This pattern is available for version 5.008 and up.
.ie n .SS "$RE{num}{roman}"
.el .SS "\f(CW$RE{num}{roman}\fP"
.IX Subsection "$RE{num}{roman}"
Returns a pattern that matches an integer written in Roman numbers.
Case doesn't matter. Only the more modern style, that is, no more
than three repetitions of a letter, is recognized. The largest number
matched is \fI\s-1MMMCMXCIX\s0\fR, or 3999. Larger numbers cannot be expressed
using \s-1ASCII\s0 characters. A future version will be able to deal with 
the Unicode symbols to match larger Roman numbers.
.PP
Under \f(CW\*(C`\-keep\*(C'\fR, the number will be captured in \f(CW$1\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Regexp::Common for a general description of how to use this interface.
.SH "AUTHOR"
.IX Header "AUTHOR"
Damian Conway (damian@conway.org)
.SH "MAINTAINANCE"
.IX Header "MAINTAINANCE"
This package is maintained by Abigail (\fIregexp\-common@abigail.be\fR).
.SH "BUGS AND IRRITATIONS"
.IX Header "BUGS AND IRRITATIONS"
Bound to be plenty.
.PP
For a start, there are many common regexes missing.
Send them in to \fIregexp\-common@abigail.be\fR.
.SH "LICENSE and COPYRIGHT"
.IX Header "LICENSE and COPYRIGHT"
This software is Copyright (c) 2001 \- 2013, Damian Conway and Abigail.
.PP
This module is free software, and maybe used under any of the following
licenses:
.PP
.Vb 4
\& 1) The Perl Artistic License.     See the file COPYRIGHT.AL.
\& 2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
\& 3) The BSD Licence.               See the file COPYRIGHT.BSD.
\& 4) The MIT Licence.               See the file COPYRIGHT.MIT.
.Ve
