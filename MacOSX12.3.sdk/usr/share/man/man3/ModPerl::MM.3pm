.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::ModPerl::MM 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::ModPerl::MM 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ModPerl::MM \-\- A "subclass" of ExtUtils::MakeMaker for mod_perl 2.0
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  use ModPerl::MM;
\&  
\&  # ModPerl::MM takes care of doing all the dirty job of overriding 
\&  ModPerl::MM::WriteMakefile(...);
\&
\&  # if there is a need to extend the default methods 
\&  sub MY::constants {
\&      my $self = shift;
\&      $self\->ModPerl::MM::MY::constants;
\&      # do something else;
\&  }
\&
\&  # or prevent overriding completely
\&  sub MY::constants { shift\->MM::constants(@_); }";
\&
\&  # override the default value of WriteMakefile\*(Aqs attribute
\&  my $extra_inc = "/foo/include";
\&  ModPerl::MM::WriteMakefile(
\&      ...
\&      INC => $extra_inc,
\&      ...
\&  );
\&
\&  # extend the default value of WriteMakefile\*(Aqs attribute
\&  my $extra_inc = "/foo/include";
\&  ModPerl::MM::WriteMakefile(
\&      ...
\&      INC => join " ", $extra_inc, ModPerl::MM::get_def_opt(\*(AqINC\*(Aq),
\&      ...
\&  );
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`ModPerl::MM\*(C'\fR is a \*(L"subclass\*(R" of \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR for mod_perl
2.0, to a degree of sub-classability of \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.
.PP
When \f(CW\*(C`ModPerl::MM::WriteMakefile()\*(C'\fR is used instead of
\&\f(CW\*(C`ExtUtils::MakeMaker::WriteMakefile()\*(C'\fR, \f(CW\*(C`ModPerl::MM\*(C'\fR overrides
several \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR methods behind the scenes and supplies
default \f(CW\*(C`WriteMakefile()\*(C'\fR arguments adjusted for mod_perl 2.0
build. It's written in such a way so that normally 3rd party module
developers for mod_perl 2.0, don't need to mess with \fIMakefile.PL\fR at
all.
.ie n .SH """MY::"" Default Methods"
.el .SH "\f(CWMY::\fP Default Methods"
.IX Header "MY:: Default Methods"
\&\f(CW\*(C`ModPerl::MM\*(C'\fR overrides method \fIfoo\fR as long as \fIMakefile.PL\fR
hasn't already specified a method \fIMY::foo\fR. If the latter happens,
\&\f(CW\*(C`ModPerl::MM\*(C'\fR will \s-1DWIM\s0 and do nothing.
.PP
In case the functionality of \f(CW\*(C`ModPerl::MM\*(C'\fR methods needs to be
extended, rather than completely overriden, the \f(CW\*(C`ModPerl::MM\*(C'\fR methods
can be called internally. For example if you need to modify constants
in addition to the modifications applied by
\&\f(CW\*(C`ModPerl::MM::MY::constants\*(C'\fR, call the \f(CW\*(C`ModPerl::MM::MY::constants\*(C'\fR
method (notice that it resides in the package \f(CW\*(C`ModPerl::MM::MY\*(C'\fR and
not \f(CW\*(C`ModPerl::MM\*(C'\fR), then do your extra manipulations on constants:
.PP
.Vb 6
\&  # if there is a need to extend the methods 
\&  sub MY::constants {
\&      my $self = shift;
\&      $self\->ModPerl::MM::MY::constants;
\&      # do something else;
\&  }
.Ve
.PP
In certain cases a developers may want to prevent from \f(CW\*(C`ModPerl::MM\*(C'\fR
to override certain methods. In that case an explicit override in
\&\fIMakefile.PL\fR will do the job. For example if you don't want the
\&\f(CW\*(C`constants()\*(C'\fR method to be overriden by \f(CW\*(C`ModPerl::MM\*(C'\fR, add to your
\&\fIMakefile.PL\fR:
.PP
.Vb 1
\&  sub MY::constants { shift\->MM::constants(@_); }";
.Ve
.PP
\&\f(CW\*(C`ModPerl::MM\*(C'\fR overrides the following methods:
.ie n .SS """ModPerl::MM::MY::post_initialize"""
.el .SS "\f(CWModPerl::MM::MY::post_initialize\fP"
.IX Subsection "ModPerl::MM::MY::post_initialize"
This method is deprecated.
.ie n .SH """WriteMakefile()"" Default Arguments"
.el .SH "\f(CWWriteMakefile()\fP Default Arguments"
.IX Header "WriteMakefile() Default Arguments"
\&\f(CW\*(C`ModPerl::MM::WriteMakefile\*(C'\fR supplies default arguments such as
\&\f(CW\*(C`INC\*(C'\fR and \f(CW\*(C`TYPEMAPS\*(C'\fR unless they weren't passed to
\&\f(CW\*(C`ModPerl::MM::WriteMakefile\*(C'\fR from \fIMakefile.PL\fR.
.PP
If the default values aren't satisfying these should be overriden in
\&\fIMakefile.PL\fR. For example to supply an empty \s-1INC,\s0 explicitly set the
argument in \fIMakefile.PL\fR.
.PP
.Vb 5
\&  ModPerl::MM::WriteMakefile(
\&      ...
\&      INC => \*(Aq\*(Aq,
\&      ...
\&  );
.Ve
.PP
If instead of fully overriding the default arguments, you want to
extend or modify them, they can be retrieved using the
\&\f(CW\*(C`ModPerl::MM::get_def_opt()\*(C'\fR function. The following example appends
an extra value to the default \f(CW\*(C`INC\*(C'\fR attribute:
.PP
.Vb 6
\&  my $extra_inc = "/foo/include";
\&  ModPerl::MM::WriteMakefile(
\&      ...
\&      INC => join " ", $extra_inc, ModPerl::MM::get_def_opt(\*(AqINC\*(Aq),
\&      ...
\&  );
.Ve
.PP
\&\f(CW\*(C`ModPerl::MM\*(C'\fR supplies default values for the following
\&\f(CW\*(C`ModPerl::MM::WriteMakefile\*(C'\fR attributes:
.ie n .SS """CCFLAGS"""
.el .SS "\f(CWCCFLAGS\fP"
.IX Subsection "CCFLAGS"
.ie n .SS """LIBS"""
.el .SS "\f(CWLIBS\fP"
.IX Subsection "LIBS"
.ie n .SS """INC"""
.el .SS "\f(CWINC\fP"
.IX Subsection "INC"
.ie n .SS """OPTIMIZE"""
.el .SS "\f(CWOPTIMIZE\fP"
.IX Subsection "OPTIMIZE"
.ie n .SS """LDDLFLAGS"""
.el .SS "\f(CWLDDLFLAGS\fP"
.IX Subsection "LDDLFLAGS"
.ie n .SS """TYPEMAPS"""
.el .SS "\f(CWTYPEMAPS\fP"
.IX Subsection "TYPEMAPS"
.ie n .SS """dynamic_lib"""
.el .SS "\f(CWdynamic_lib\fP"
.IX Subsection "dynamic_lib"
\fI\f(CI\*(C`OTHERLDFLAGS\*(C'\fI\fR
.IX Subsection "OTHERLDFLAGS"
.PP
.Vb 1
\&  dynamic_lib => { OTHERLDFLAGS => ... }
.Ve
.ie n .SS """macro"""
.el .SS "\f(CWmacro\fP"
.IX Subsection "macro"
\fI\f(CI\*(C`MOD_INSTALL\*(C'\fI\fR
.IX Subsection "MOD_INSTALL"
.PP
.Vb 1
\&  macro => { MOD_INSTALL => ... }
.Ve
.PP
makes sure that Apache\-Test/ is added to \f(CW@INC\fR.
.SH "Public API"
.IX Header "Public API"
The following functions are a part of the public \s-1API.\s0 They are
described elsewhere in this document.
.ie n .SS """WriteMakefile()"""
.el .SS "\f(CWWriteMakefile()\fP"
.IX Subsection "WriteMakefile()"
.Vb 1
\&  ModPerl::MM::WriteMakefile(...);
.Ve
.ie n .SS """get_def_opt()"""
.el .SS "\f(CWget_def_opt()\fP"
.IX Subsection "get_def_opt()"
.Vb 1
\&  my $def_val = ModPerl::MM::get_def_opt($key);
.Ve
