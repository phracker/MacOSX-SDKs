.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::Status 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::Status 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache2::Status \- Embedded interpreter status information
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  <Location /perl\-status>
\&
\&      # disallow public access
\&      Order Deny, Allow
\&      Deny from all
\&      Allow from 127.0.0.1
\&
\&      SetHandler modperl
\&      PerlOptions +GlobalRequest
\&      PerlResponseHandler Apache2::Status
\&  </Location>
\&
\&  or
\&
\&  <Location /perl\-status>
\&
\&      # disallow public access
\&      Order Deny, Allow
\&      Deny from all
\&      Allow from 127.0.0.1
\&
\&      SetHandler perl\-script
\&      PerlResponseHandler Apache2::Status
\&  </Location>
.Ve
.SH "Description"
.IX Header "Description"
The \f(CW\*(C`Apache2::Status\*(C'\fR module provides some information
about the status of the Perl interpreter embedded in the server.
.PP
Configure like so:
.PP
.Vb 1
\&  <Location /perl\-status>
\&
\&      # disallow public access
\&      Order Deny, Allow
\&      Deny from all
\&      Allow from 127.0.0.1
\&
\&      SetHandler modperl
\&      PerlOptions +GlobalRequest
\&      PerlResponseHandler Apache2::Status
\&  </Location>
.Ve
.PP
Notice that under the
\&\f(CW"modperl"\fR core
handler the \fIEnvironment\fR menu option will show only the environment
under that handler. To see the environment seen by handlers running
under the
\&\f(CW"perl\-script"\fR
core handler, configure \f(CW\*(C`Apache2::Status\*(C'\fR as:
.PP
.Vb 1
\&  <Location /perl\-status>
\&
\&      # disallow public access
\&      Order Deny, Allow
\&      Deny from all
\&      Allow from 127.0.0.1
\&
\&      SetHandler perl\-script
\&      PerlResponseHandler Apache2::Status
\&  </Location>
.Ve
.PP
Other modules can \*(L"plugin\*(R" a menu item like so:
.PP
.Vb 10
\&  require Apache2::Module;
\&  Apache2::Status\->menu_item(
\&      \*(AqDBI\*(Aq => "DBI connections", #item for Apache::DBI module
\&      sub {
\&          my ($r, $q) = @_; #request and CGI objects
\&          my (@strings);
\&          push @strings,  "blobs of html";
\&          return \e@strings;     #return an array ref
\&      }
\&  ) if Apache2::Module::loaded(\*(AqApache2::Status\*(Aq);
.Ve
.PP
\&\fB\s-1WARNING\s0\fR: \f(CW\*(C`Apache2::Status\*(C'\fR must be loaded before these modules via
the \f(CW\*(C`PerlModule\*(C'\fR or \f(CW\*(C`PerlRequire\*(C'\fR directives (or from
\&\fIstartup.pl\fR).
.PP
A very common setup might be:
  Perl Module B::TerseSize
.PP
.Vb 6
\&  <Location /perl\-status>
\&      SetHandler perl\-script
\&      PerlResponseHandler Apache2::Status
\&      PerlSetVar StatusOptionsAll On
\&      PerlSetVar StatusDeparseOptions "\-p \-sC"
\&  </Location>
.Ve
.PP
due to the implementation of Apache2::Status::noh_fileline in B::TerseSize,
you must load B::TerseSize first.
.SH "Options"
.IX Header "Options"
.ie n .SS """StatusOptionsAll"""
.el .SS "\f(CWStatusOptionsAll\fP"
.IX Subsection "StatusOptionsAll"
This single directive will enable all of the options described below.
.PP
.Vb 1
\&  PerlSetVar StatusOptionsAll On
.Ve
.ie n .SS """StatusDumper"""
.el .SS "\f(CWStatusDumper\fP"
.IX Subsection "StatusDumper"
When browsing symbol tables, the values of arrays, hashes and scalars
can be viewed via \f(CW\*(C`Data::Dumper\*(C'\fR if this configuration variable is
set to \f(CW\*(C`On\*(C'\fR:
.PP
.Vb 1
\&  PerlSetVar StatusDumper On
.Ve
.ie n .SS """StatusPeek"""
.el .SS "\f(CWStatusPeek\fP"
.IX Subsection "StatusPeek"
With this option \f(CW\*(C`On\*(C'\fR and the \f(CW\*(C`Apache::Peek\*(C'\fR module installed,
functions and variables can be viewed ala \f(CW\*(C`Devel::Peek\*(C'\fR style:
.PP
.Vb 1
\&  PerlSetVar StatusPeek On
.Ve
.ie n .SS """StatusLexInfo"""
.el .SS "\f(CWStatusLexInfo\fP"
.IX Subsection "StatusLexInfo"
With this option \f(CW\*(C`On\*(C'\fR and the \f(CW\*(C`B::LexInfo\*(C'\fR module installed,
subroutine lexical variable information can be viewed.
.PP
.Vb 1
\&  PerlSetVar StatusLexInfo On
.Ve
.ie n .SS """StatusDeparse"""
.el .SS "\f(CWStatusDeparse\fP"
.IX Subsection "StatusDeparse"
With this option \f(CW\*(C`On\*(C'\fR subroutines can be \*(L"deparsed\*(R".
.PP
.Vb 1
\&  PerlSetVar StatusDeparse On
.Ve
.PP
Options can be passed to \f(CW\*(C`B::Deparse::new\*(C'\fR like so:
.PP
.Vb 1
\&  PerlSetVar StatusDeparseOptions "\-p \-sC"
.Ve
.PP
See the \f(CW\*(C`B::Deparse\*(C'\fR manpage for details.
.ie n .SS """StatusTerse"""
.el .SS "\f(CWStatusTerse\fP"
.IX Subsection "StatusTerse"
With this option \f(CW\*(C`On\*(C'\fR, text-based op tree graphs of subroutines can
be displayed, thanks to \f(CW\*(C`B::Terse\*(C'\fR.
.PP
.Vb 1
\&  PerlSetVar StatusTerse On
.Ve
.ie n .SS """StatusTerseSize"""
.el .SS "\f(CWStatusTerseSize\fP"
.IX Subsection "StatusTerseSize"
With this option \f(CW\*(C`On\*(C'\fR and the \f(CW\*(C`B::TerseSize\*(C'\fR module installed,
text-based op tree graphs of subroutines and their size can be
displayed.  See the \f(CW\*(C`B::TerseSize\*(C'\fR docs for more info.
.PP
.Vb 1
\&  PerlSetVar StatusTerseSize On
.Ve
.ie n .SS """StatusTerseSizeMainSummary"""
.el .SS "\f(CWStatusTerseSizeMainSummary\fP"
.IX Subsection "StatusTerseSizeMainSummary"
With this option \f(CW\*(C`On\*(C'\fR and the \f(CW\*(C`B::TerseSize\*(C'\fR module installed, a
\&\fI\*(L"Memory Usage\*(R"\fR will be added to the \f(CW\*(C`Apache2::Status\*(C'\fR main menu.
This option is disabled by default, as it can be rather cpu intensive
to summarize memory usage for the entire server.  It is strongly
suggested that this option only be used with a development server
running in \f(CW\*(C`\-X\*(C'\fR mode, as the results will be cached.
.PP
.Vb 1
\&  PerlSetVar StatusTerseSizeMainSummary On
.Ve
.ie n .SS """StatusGraph"""
.el .SS "\f(CWStatusGraph\fP"
.IX Subsection "StatusGraph"
When \f(CW\*(C`StatusDumper\*(C'\fR is enabled, another link \fI\*(L"\s-1OP\s0 Tree Graph\*(R"\fR will
be present with the dump if this configuration variable is set to
\&\f(CW\*(C`On\*(C'\fR:
.PP
.Vb 1
\&  PerlSetVar StatusGraph
.Ve
.PP
This requires the B module (part of the Perl compiler kit) and
\&\f(CW\*(C`B::Graph\*(C'\fR (version 0.03 or higher) module to be installed along with
the \f(CW\*(C`dot\*(C'\fR program.
.PP
Dot is part of the graph visualization toolkit from \s-1AT&T:\s0
http://www.graphviz.org/.
.PP
\&\fB\s-1WARNING\s0\fR: Some graphs may produce very large images, some graphs may
produce no image if \f(CW\*(C`B::Graph\*(C'\fR's output is incorrect.
.ie n .SS """Dot"""
.el .SS "\f(CWDot\fP"
.IX Subsection "Dot"
Location of the dot program for \f(CW\*(C`StatusGraph\*(C'\fR,
if other than \fI/usr/bin\fR or \fI/usr/local/bin\fR
.ie n .SS """GraphDir"""
.el .SS "\f(CWGraphDir\fP"
.IX Subsection "GraphDir"
Directory where \f(CW\*(C`StatusGraph\*(C'\fR should write it's temporary image
files.  Default is \f(CW\*(C`$ServerRoot/logs/b_graphs\*(C'\fR.
.SH "Prerequisites"
.IX Header "Prerequisites"
The \f(CW\*(C`Devel::Symdump\*(C'\fR module, version \f(CW2.00\fR or higher.
.PP
Other optional functionality requirements: \f(CW\*(C`B::Deparse\*(C'\fR \- 0.59,
\&\f(CW\*(C`B::Fathom\*(C'\fR \- 0.05, \f(CW\*(C`\f(CW\*(C`B::Graph\*(C'\f(CW\*(C'\fR \- 0.03.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "See Also"
.IX Header "See Also"
\&\fBperl\fR\|(1), \fBApache\fR\|(3), \fBDevel::Symdump\fR\|(3), \fBData::Dumper\fR\|(3), B(3),
\&\f(CW\*(C`B::Graph\*(C'\fR(3), mod_perl 2.0 documentation.
.SH "Authors"
.IX Header "Authors"
Doug MacEachern with contributions from Stas Bekman
