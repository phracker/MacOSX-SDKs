.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::Exception 3"
.TH Test2::Tools::Exception 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::Exception \- Test2 based tools for checking exceptions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Test2 implementation of code used to test exceptions. This is
similar to Test::Fatal, but it intentionally does much less.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Tools::Exception qw/dies lives/;
\&
\&    like(
\&        dies { die \*(Aqxxx\*(Aq },
\&        qr/xxx/,
\&        "Got exception"
\&    );
\&
\&    ok(lives { ... }, "did not die") or note($@);
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
All subs are exported by default.
.ie n .IP "$e = dies { ... }" 4
.el .IP "\f(CW$e\fR = dies { ... }" 4
.IX Item "$e = dies { ... }"
This will trap any exception the codeblock throws. If no exception is thrown
the sub will return undef. If an exception is thrown it will be returned. This
function preserves \f(CW$@\fR, it will not be altered from its value before the sub
is called.
.ie n .IP "$bool = lives { ... }" 4
.el .IP "\f(CW$bool\fR = lives { ... }" 4
.IX Item "$bool = lives { ... }"
This will trap any exception thrown in the codeblock. It will return true when
there is no exception, and false when there is. \f(CW$@\fR is preserved from before
the sub is called when there is no exception. When an exception is trapped
\&\f(CW$@\fR will have the exception so that you can look at it.
.ie n .IP "$bool = try_ok { ... }" 4
.el .IP "\f(CW$bool\fR = try_ok { ... }" 4
.IX Item "$bool = try_ok { ... }"
.PD 0
.ie n .IP "$bool = try_ok { ... } ""Test Description""" 4
.el .IP "\f(CW$bool\fR = try_ok { ... } ``Test Description''" 4
.IX Item "$bool = try_ok { ... } Test Description"
.PD
This will run the code block trapping any exception. If there is no exception a
passing event will be issued. If the test fails a failing event will be issued,
and the exception will be reported as diagnostics.
.Sp
\&\fBNote:\fR This function does not preserve \f(CW$@\fR on failure, it will be set to
the exception the codeblock throws, this is by design so that you can obtain
the exception if desired.
.SH "DIFFERENCES FROM TEST::FATAL"
.IX Header "DIFFERENCES FROM TEST::FATAL"
Test::Fatal sets \f(CW$Test::Builder::Level\fR such that failing tests inside the
exception block will report to the line where \f(CW\*(C`exception()\*(C'\fR is called. I
disagree with this, and think the actual line of the failing test is
more important. Ultimately, though Test::Fatal cannot be changed, people
probably already depend on that behavior.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
