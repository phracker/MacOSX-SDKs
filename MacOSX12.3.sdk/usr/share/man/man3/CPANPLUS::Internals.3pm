.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Internals 3pm"
.TH CPANPLUS::Internals 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Internals \- CPANPLUS internals
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    my $internals   = CPANPLUS::Internals\->_init( _conf => $conf );
\&    my $backend     = CPANPLUS::Internals\->_retrieve_id( $ID );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is the guts of \s-1CPANPLUS\s0 \*(-- it inherits from all other
modules in the CPANPLUS::Internals::* namespace, thus defying normal
rules of \s-1OO\s0 programming \*(-- but if you're reading this, you already
know what's going on ;)
.PP
Please read the \f(CW\*(C`CPANPLUS::Backend\*(C'\fR documentation for the normal \s-1API.\s0
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.IP "_conf" 4
.IX Item "_conf"
Get/set the configure object
.IP "_id" 4
.IX Item "_id"
Get/set the id
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$internals = CPANPLUS::Internals\->_init( _conf => \s-1CONFIG_OBJ \s0)"
.el .SS "\f(CW$internals\fP = CPANPLUS::Internals\->_init( _conf => \s-1CONFIG_OBJ \s0)"
.IX Subsection "$internals = CPANPLUS::Internals->_init( _conf => CONFIG_OBJ )"
\&\f(CW\*(C`_init\*(C'\fR creates a new CPANPLUS::Internals object.
.PP
You have to pass it a valid \f(CW\*(C`CPANPLUS::Configure\*(C'\fR object.
.PP
Returns the object on success, or dies on failure.
.ie n .SS "$bool = $internals\->_flush( list => \e@caches )"
.el .SS "\f(CW$bool\fP = \f(CW$internals\fP\->_flush( list => \e@caches )"
.IX Subsection "$bool = $internals->_flush( list => @caches )"
Flushes the designated caches from the \f(CW\*(C`CPANPLUS\*(C'\fR object.
.PP
Returns true on success, false if one or more caches could not be
be flushed.
.ie n .SS "$bool = $internals\->_register_callback( name => \s-1CALLBACK_NAME,\s0 code => \s-1CODEREF \s0);"
.el .SS "\f(CW$bool\fP = \f(CW$internals\fP\->_register_callback( name => \s-1CALLBACK_NAME,\s0 code => \s-1CODEREF \s0);"
.IX Subsection "$bool = $internals->_register_callback( name => CALLBACK_NAME, code => CODEREF );"
Registers a callback for later use by the internal libraries.
.PP
Here is a list of the currently used callbacks:
.IP "install_prerequisite" 4
.IX Item "install_prerequisite"
Is called when the user wants to be \f(CW\*(C`asked\*(C'\fR about what to do with
prerequisites. Should return a boolean indicating true to install
the prerequisite and false to skip it.
.IP "send_test_report" 4
.IX Item "send_test_report"
Is called when the user should be prompted if he wishes to send the
test report. Should return a boolean indicating true to send the
test report and false to skip it.
.IP "munge_test_report" 4
.IX Item "munge_test_report"
Is called when the test report message has been composed, giving
the user a chance to programatically alter it. Should return the
(munged) message to be sent.
.IP "edit_test_report" 4
.IX Item "edit_test_report"
Is called when the user should be prompted to edit test reports
about to be sent out by Test::Reporter. Should return a boolean
indicating true to edit the test report in an editor and false
to skip it.
.IP "proceed_on_test_failure" 4
.IX Item "proceed_on_test_failure"
Is called when 'make test' or 'Build test' fails. Should return
a boolean indicating whether the install should continue even if
the test failed.
.IP "munge_dist_metafile" 4
.IX Item "munge_dist_metafile"
Is called when the \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR metafile is created, like
\&\f(CW\*(C`control\*(C'\fR for \f(CW\*(C`CPANPLUS::Dist::Deb\*(C'\fR, giving the user a chance to
programatically alter it. Should return the (munged) text to be
written to the metafile.
.ie n .SS "$bool = $internals\->_add_to_includepath( directories => \e@dirs )"
.el .SS "\f(CW$bool\fP = \f(CW$internals\fP\->_add_to_includepath( directories => \e@dirs )"
.IX Subsection "$bool = $internals->_add_to_includepath( directories => @dirs )"
Adds a list of directories to the include path.
This means they get added to \f(CW@INC\fR as well as \f(CW$ENV{PERL5LIB}\fR.
.PP
Returns true on success, false on failure.
.ie n .SS "$bool = $internals\->_add_to_path( directories => \e@dirs )"
.el .SS "\f(CW$bool\fP = \f(CW$internals\fP\->_add_to_path( directories => \e@dirs )"
.IX Subsection "$bool = $internals->_add_to_path( directories => @dirs )"
Adds a list of directories to the \s-1PATH,\s0 but only if they actually
contain anything.
.PP
Returns true on success, false on failure.
.ie n .SS "$id = CPANPLUS::Internals\->_last_id"
.el .SS "\f(CW$id\fP = CPANPLUS::Internals\->_last_id"
.IX Subsection "$id = CPANPLUS::Internals->_last_id"
Return the id of the last object stored.
.ie n .SS "$id = CPANPLUS::Internals\->_store_id( $internals )"
.el .SS "\f(CW$id\fP = CPANPLUS::Internals\->_store_id( \f(CW$internals\fP )"
.IX Subsection "$id = CPANPLUS::Internals->_store_id( $internals )"
Store this object; return its id.
.ie n .SS "$obj = CPANPLUS::Internals\->_retrieve_id( $ID )"
.el .SS "\f(CW$obj\fP = CPANPLUS::Internals\->_retrieve_id( \f(CW$ID\fP )"
.IX Subsection "$obj = CPANPLUS::Internals->_retrieve_id( $ID )"
Retrieve an object based on its \s-1ID\s0 \*(-- return false on error.
.ie n .SS "CPANPLUS::Internals\->_remove_id( $ID )"
.el .SS "CPANPLUS::Internals\->_remove_id( \f(CW$ID\fP )"
.IX Subsection "CPANPLUS::Internals->_remove_id( $ID )"
Remove the object marked by \f(CW$ID\fR from storage.
.ie n .SS "@objs = CPANPLUS::Internals\->_return_all_objects"
.el .SS "\f(CW@objs\fP = CPANPLUS::Internals\->_return_all_objects"
.IX Subsection "@objs = CPANPLUS::Internals->_return_all_objects"
Return all stored objects.
