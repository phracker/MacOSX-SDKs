.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::StackTrace::Frame 3"
.TH Devel::StackTrace::Frame 3 "2019-05-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::StackTrace::Frame \- A single frame in a stack trace
.SH "VERSION"
.IX Header "VERSION"
version 2.04
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Devel::StackTrace for details.
.SH "METHODS"
.IX Header "METHODS"
See Perl's \f(CW\*(C`caller\*(C'\fR documentation for more information on what these
methods return.
.ie n .SS "$frame\->package"
.el .SS "\f(CW$frame\fP\->package"
.IX Subsection "$frame->package"
.ie n .SS "$frame\->filename"
.el .SS "\f(CW$frame\fP\->filename"
.IX Subsection "$frame->filename"
.ie n .SS "$frame\->line"
.el .SS "\f(CW$frame\fP\->line"
.IX Subsection "$frame->line"
.ie n .SS "$frame\->subroutine"
.el .SS "\f(CW$frame\fP\->subroutine"
.IX Subsection "$frame->subroutine"
.ie n .SS "$frame\->hasargs"
.el .SS "\f(CW$frame\fP\->hasargs"
.IX Subsection "$frame->hasargs"
.ie n .SS "$frame\->wantarray"
.el .SS "\f(CW$frame\fP\->wantarray"
.IX Subsection "$frame->wantarray"
.ie n .SS "$frame\->evaltext"
.el .SS "\f(CW$frame\fP\->evaltext"
.IX Subsection "$frame->evaltext"
Returns undef if the frame was not part of an eval.
.ie n .SS "$frame\->is_require"
.el .SS "\f(CW$frame\fP\->is_require"
.IX Subsection "$frame->is_require"
Returns undef if the frame was not part of a require.
.ie n .SS "$frame\->args"
.el .SS "\f(CW$frame\fP\->args"
.IX Subsection "$frame->args"
Returns the arguments passed to the frame. Note that any arguments that are
references are returned as references, not copies.
.ie n .SS "$frame\->hints"
.el .SS "\f(CW$frame\fP\->hints"
.IX Subsection "$frame->hints"
.ie n .SS "$frame\->bitmask"
.el .SS "\f(CW$frame\fP\->bitmask"
.IX Subsection "$frame->bitmask"
.ie n .SS "$frame\->as_string"
.el .SS "\f(CW$frame\fP\->as_string"
.IX Subsection "$frame->as_string"
Returns a string containing a description of the frame.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Devel\-StackTrace/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Devel-StackTrace can be found at <https://github.com/houseabsolute/Devel\-StackTrace>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2000 \- 2019 by David Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
