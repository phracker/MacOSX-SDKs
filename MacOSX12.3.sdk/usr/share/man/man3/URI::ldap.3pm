.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "URI::ldap 3"
.TH URI::ldap 3 "2019-01-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::ldap \- LDAP Uniform Resource Locators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use URI;
\&
\&  $uri = URI\->new("ldap:$uri_string");
\&  $dn     = $uri\->dn;
\&  $filter = $uri\->filter;
\&  @attr   = $uri\->attributes;
\&  $scope  = $uri\->scope;
\&  %extn   = $uri\->extensions;
\&  
\&  $uri = URI\->new("ldap:");  # start empty
\&  $uri\->host("ldap.itd.umich.edu");
\&  $uri\->dn("o=University of Michigan,c=US");
\&  $uri\->attributes(qw(postalAddress));
\&  $uri\->scope(\*(Aqsub\*(Aq);
\&  $uri\->filter(\*(Aq(cn=Babs Jensen)\*(Aq);
\&  print $uri\->as_string,"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`URI::ldap\*(C'\fR provides an interface to parse an \s-1LDAP URI\s0 into its
constituent parts and also to build a \s-1URI\s0 as described in
\&\s-1RFC 2255.\s0
.SH "METHODS"
.IX Header "METHODS"
\&\f(CW\*(C`URI::ldap\*(C'\fR supports all the generic and server methods defined by
\&\s-1URI\s0, plus the following.
.PP
Each of the following methods can be used to set or get the value in
the \s-1URI.\s0 The values are passed in unescaped form.  None of these
return undefined values, but elements without a default can be empty.
If arguments are given, then a new value is set for the given part
of the \s-1URI.\s0
.ie n .IP "$uri\->dn( [$new_dn] )" 4
.el .IP "\f(CW$uri\fR\->dn( [$new_dn] )" 4
.IX Item "$uri->dn( [$new_dn] )"
Sets or gets the \fIDistinguished Name\fR part of the \s-1URI.\s0  The \s-1DN\s0
identifies the base object of the \s-1LDAP\s0 search.
.ie n .IP "$uri\->attributes( [@new_attrs] )" 4
.el .IP "\f(CW$uri\fR\->attributes( [@new_attrs] )" 4
.IX Item "$uri->attributes( [@new_attrs] )"
Sets or gets the list of attribute names which are
returned by the search.
.ie n .IP "$uri\->scope( [$new_scope] )" 4
.el .IP "\f(CW$uri\fR\->scope( [$new_scope] )" 4
.IX Item "$uri->scope( [$new_scope] )"
Sets or gets the scope to be used by the search. The value can be one of
\&\f(CW"base"\fR, \f(CW"one"\fR or \f(CW"sub"\fR. If none is given in the \s-1URI\s0 then the
return value defaults to \f(CW"base"\fR.
.ie n .IP "$uri\->_scope( [$new_scope] )" 4
.el .IP "\f(CW$uri\fR\->_scope( [$new_scope] )" 4
.IX Item "$uri->_scope( [$new_scope] )"
Same as \fBscope()\fR, but does not default to anything.
.ie n .IP "$uri\->filter( [$new_filter] )" 4
.el .IP "\f(CW$uri\fR\->filter( [$new_filter] )" 4
.IX Item "$uri->filter( [$new_filter] )"
Sets or gets the filter to be used by the search. If none is given in
the \s-1URI\s0 then the return value defaults to \f(CW"(objectClass=*)"\fR.
.ie n .IP "$uri\->_filter( [$new_filter] )" 4
.el .IP "\f(CW$uri\fR\->_filter( [$new_filter] )" 4
.IX Item "$uri->_filter( [$new_filter] )"
Same as \fBfilter()\fR, but does not default to anything.
.ie n .IP "$uri\->extensions( [$etype => $evalue,...] )" 4
.el .IP "\f(CW$uri\fR\->extensions( [$etype => \f(CW$evalue\fR,...] )" 4
.IX Item "$uri->extensions( [$etype => $evalue,...] )"
Sets or gets the extensions used for the search. The list passed should
be in the form etype1 => evalue1, etype2 => evalue2,... This is also
the form of list that is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://tools.ietf.org/html/rfc2255>
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <\fIgbarr@pobox.com\fR>
.PP
Slightly modified by Gisle Aas to fit into the \s-1URI\s0 distribution.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
