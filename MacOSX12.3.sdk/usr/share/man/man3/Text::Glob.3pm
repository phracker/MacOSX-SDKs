.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Glob 3"
.TH Text::Glob 3 "2017-03-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Glob \- match globbing patterns against text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Text::Glob qw( match_glob glob_to_regex );
\&
\& print "matched\en" if match_glob( "foo.*", "foo.bar" );
\&
\& # prints foo.bar and foo.baz
\& my $regex = glob_to_regex( "foo.*" );
\& for ( qw( foo.bar foo.baz foo bar ) ) {
\&     print "matched: $_\en" if /$regex/;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Glob implements \fBglob\fR\|(3) style matching that can be used to match
against text, rather than fetching names from a filesystem.  If you
want to do full file globbing use the File::Glob module instead.
.SS "Routines"
.IX Subsection "Routines"
.ie n .IP "match_glob( $glob, @things_to_test )" 4
.el .IP "match_glob( \f(CW$glob\fR, \f(CW@things_to_test\fR )" 4
.IX Item "match_glob( $glob, @things_to_test )"
Returns the list of things which match the glob from the source list.
.ie n .IP "glob_to_regex( $glob )" 4
.el .IP "glob_to_regex( \f(CW$glob\fR )" 4
.IX Item "glob_to_regex( $glob )"
Returns a compiled regex which is the equivalent of the globbing
pattern.
.ie n .IP "glob_to_regex_string( $glob )" 4
.el .IP "glob_to_regex_string( \f(CW$glob\fR )" 4
.IX Item "glob_to_regex_string( $glob )"
Returns a regex string which is the equivalent of the globbing
pattern.
.SH "SYNTAX"
.IX Header "SYNTAX"
The following metacharacters and rules are respected.
.ie n .IP """*"" \- match zero or more characters" 4
.el .IP "\f(CW*\fR \- match zero or more characters" 4
.IX Item "* - match zero or more characters"
\&\f(CW\*(C`a*\*(C'\fR matches \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`aa\*(C'\fR, \f(CW\*(C`aaaa\*(C'\fR and many many more.
.ie n .IP """?"" \- match exactly one character" 4
.el .IP "\f(CW?\fR \- match exactly one character" 4
.IX Item "? - match exactly one character"
\&\f(CW\*(C`a?\*(C'\fR matches \f(CW\*(C`aa\*(C'\fR, but not \f(CW\*(C`a\*(C'\fR, or \f(CW\*(C`aaa\*(C'\fR
.IP "Character sets/ranges" 4
.IX Item "Character sets/ranges"
\&\f(CW\*(C`example.[ch]\*(C'\fR matches \f(CW\*(C`example.c\*(C'\fR and \f(CW\*(C`example.h\*(C'\fR
.Sp
\&\f(CW\*(C`demo.[a\-c]\*(C'\fR matches \f(CW\*(C`demo.a\*(C'\fR, \f(CW\*(C`demo.b\*(C'\fR, and \f(CW\*(C`demo.c\*(C'\fR
.IP "alternation" 4
.IX Item "alternation"
\&\f(CW\*(C`example.{foo,bar,baz}\*(C'\fR matches \f(CW\*(C`example.foo\*(C'\fR, \f(CW\*(C`example.bar\*(C'\fR, and
\&\f(CW\*(C`example.baz\*(C'\fR
.IP "leading . must be explicitly matched" 4
.IX Item "leading . must be explicitly matched"
\&\f(CW\*(C`*.foo\*(C'\fR does not match \f(CW\*(C`.bar.foo\*(C'\fR.  For this you must either specify
the leading . in the glob pattern (\f(CW\*(C`.*.foo\*(C'\fR), or set
\&\f(CW$Text::Glob::strict_leading_dot\fR to a false value while compiling
the regex.
.ie n .IP """*"" and ""?"" do not match the seperator (i.e. do not match ""/"")" 4
.el .IP "\f(CW*\fR and \f(CW?\fR do not match the seperator (i.e. do not match \f(CW/\fR)" 4
.IX Item "* and ? do not match the seperator (i.e. do not match /)"
\&\f(CW\*(C`*.foo\*(C'\fR does not match \f(CW\*(C`bar/baz.foo\*(C'\fR.  For this you must either
explicitly match the / in the glob (\f(CW\*(C`*/*.foo\*(C'\fR), or set
\&\f(CW$Text::Glob::strict_wildcard_slash\fR to a false value while compiling
the regex, or change the seperator that Text::Glob uses by setting
\&\f(CW$Text::Glob::seperator\fR to an alternative value while compiling the
the regex.
.SH "BUGS"
.IX Header "BUGS"
The code uses qr// to produce compiled regexes, therefore this module
requires perl version 5.005_03 or newer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Clamp <richardc@unixbeard.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002, 2003, 2006, 2007 Richard Clamp.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Glob, \fBglob\fR\|(3)
