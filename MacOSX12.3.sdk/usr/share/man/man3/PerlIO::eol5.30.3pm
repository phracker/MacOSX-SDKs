.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PerlIO::eol 3"
.TH PerlIO::eol 3 "2017-12-26" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PerlIO::eol \- PerlIO layer for normalizing line endings
.SH "VERSION"
.IX Header "VERSION"
This document describes version 0.15 of PerlIO::eol, released
December 18, 2006.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    binmode STDIN, ":raw:eol(LF)";
\&    binmode STDOUT, ":raw:eol(CRLF)";
\&    open FH, "+<:raw:eol(LF\-Native)", "file";
\&
\&    binmode STDOUT, ":raw:eol(CRLF?)"; # warns on mixed newlines
\&    binmode STDOUT, ":raw:eol(CRLF!)"; # dies on mixed newlines
\&
\&    use PerlIO::eol qw( eol_is_mixed );
\&    my $pos = eol_is_mixed( "mixed\enstring\er" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This layer normalizes any of \f(CW\*(C`CR\*(C'\fR, \f(CW\*(C`LF\*(C'\fR, \f(CW\*(C`CRLF\*(C'\fR and \f(CW\*(C`Native\*(C'\fR into the
designated line ending.  It works for both input and output handles.
.PP
If you specify two different line endings joined by a \f(CW\*(C`\-\*(C'\fR, it will use the
first one for reading and the second one for writing.  For example, the
\&\f(CW\*(C`LF\-CRLF\*(C'\fR encoding means that all input should be normalized to \f(CW\*(C`LF\*(C'\fR, and
all output should be normalized to \f(CW\*(C`CRLF\*(C'\fR.
.PP
By default, data with mixed newlines are normalized silently.  Append a \f(CW\*(C`!\*(C'\fR
to the line ending will raise a fatal exception when mixed newlines are
spotted.  Append a \f(CW\*(C`?\*(C'\fR will raise a warning instead.
.PP
It is advised to pop any potential \f(CW\*(C`:crlf\*(C'\fR or encoding layers before this
layer; this is usually done using a \f(CW\*(C`:raw\*(C'\fR prefix.
.PP
This module also optionally exports a \f(CW\*(C`eol_is_mixed\*(C'\fR function; it takes a
string and returns the position of the first inconsistent line ending found
in that string, or \f(CW0\fR if the line endings are consistent.
.PP
The \f(CW\*(C`CR\*(C'\fR, \f(CW\*(C`LF\*(C'\fR, \f(CW\*(C`CRLF\*(C'\fR and \f(CW\*(C`NATIVE\*(C'\fR constants are also exported at request.
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "\s-1CR\s0"
.IX Subsection "CR"
A carriage return constant.
.SS "\s-1CRLF\s0"
.IX Subsection "CRLF"
A carriage return/line feed constant.
.SS "\s-1LF\s0"
.IX Subsection "LF"
A line feed constant.
.SS "\s-1NATIVE\s0"
.IX Subsection "NATIVE"
The native line ending.
.SS "eol_is_mixed"
.IX Subsection "eol_is_mixed"
This module also optionally exports a \f(CW\*(C`eol_is_mixed\*(C'\fR function; it takes a
string and returns the position of the first inconsistent line ending found
in that string, or \f(CW0\fR if the line endings are consistent.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <autrijus@autrijus.org>.
.PP
Janitorial help by Gaal Yahas <gaal@forum2.org>.
.PP
Inspired by PerlIO::nline by Ben Morrow, <PerlIO\-eol@morrow.me.uk>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004\-2006 by Audrey Tang <audreyt@audreyt.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
