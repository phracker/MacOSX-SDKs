.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Inline-Support 3"
.TH Inline-Support 3 "2012-11-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Inline\-Support \- Support Information for Inline.pm and related modules.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document contains all of the latest support information for
\&\f(CW\*(C`Inline.pm\*(C'\fR and the recognized Inline Language Support Modules (ILSMs)
available on \s-1CPAN.\s0
.SH "SUPPORTED LANGUAGES"
.IX Header "SUPPORTED LANGUAGES"
The most important language that Inline supports is \f(CW\*(C`C\*(C'\fR. That is
because Perl itself is written in \f(CW\*(C`C\*(C'\fR. By giving a your Perl scripts
access to \f(CW\*(C`C\*(C'\fR, you in effect give them access to the entire glorious
internals of Perl. (Caveat scriptor :\-)
.PP
As of this writing, Inline also supports:
.PP
.Vb 7
\& \- C++
\& \- Java
\& \- Python
\& \- Tcl
\& \- Assembly
\& \- CPR
\& \- And even Inline::Foo! :)
.Ve
.PP
Projects that I would most like to see happen in the year 2001 are:
.PP
.Vb 6
\& \- Fortran
\& \- Ruby
\& \- Lisp
\& \- Guile
\& \- Bash
\& \- Perl4
.Ve
.SH "SUPPORTED PLATFORMS"
.IX Header "SUPPORTED PLATFORMS"
\&\f(CW\*(C`Inline::C\*(C'\fR should work anywhere that \s-1CPAN\s0 extension modules (those
that use \s-1XS\s0) can be installed, using the typical install format of:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
It has been tested on many Unix and Windows variants.
.PP
\&\fB\s-1NOTE\s0\fR: \f(CW\*(C`Inline::C\*(C'\fR requires Perl 5.005 or higher because
\&\f(CW\*(C`Parse::RecDescent\*(C'\fR requires it. (Something to do with the \f(CW\*(C`qr\*(C'\fR
operator)
.PP
Inline has been successfully tested at one time or another on the
following platforms:
.PP
.Vb 10
\&    Linux
\&    Solaris
\&    SunOS
\&    HPUX
\&    AIX
\&    FreeBSD
\&    OpenBSD
\&    BeOS
\&    OS X
\&    WinNT
\&    Win2K
\&    WinME
\&    Win98
\&    Cygwin
.Ve
.PP
The Microsoft tests deserve a little more explanation. I used the following:
.PP
.Vb 4
\& Windows NT 4.0 (service pack 6)
\& Perl 5.005_03 (ActiveState build 522)
\& MS Visual C++ 6.0
\& The "nmake" make utility (distributed w/ Visual C++)
.Ve
.PP
\&\f(CW\*(C`Inline::C\*(C'\fR pulls all of its base configuration (including which
\&\f(CW\*(C`make\*(C'\fR utility to use) from \f(CW\*(C`Config.pm\*(C'\fR. Since your MSWin32 version of
Perl probably came from ActiveState (as a binary distribution) the
\&\f(CW\*(C`Config.pm\*(C'\fR will indicate that \f(CW\*(C`nmake\*(C'\fR is the system's \f(CW\*(C`make\*(C'\fR
utility. That is because ActiveState uses Visual \*(C+ to compile Perl.
.PP
To install \f(CW\*(C`Inline.pm\*(C'\fR (or any other \s-1CPAN\s0 module) on MSWin32 w/ Visual
\&\*(C+, use these:
.PP
.Vb 4
\&    perl Makefile.PL
\&    nmake
\&    nmake test
\&    nmake install
.Ve
.PP
Inline has also been made to work with Mingw32/gcc on all Windows
platforms. This is a free compiler for Windows. You must also use a perl
built with that compiler.
.PP
The \*(L"Cygwin\*(R" test was done on a Windows 98 machine using the Cygwin
Unix/Win32 porting layer software from Cygnus. The \f(CW\*(C`perl\*(C'\fR binary on
this machine was also compiled using the Cygwin tool set (\f(CW\*(C`gcc\*(C'\fR). This
software is freely available from http://sources.redhat.com/cygwin/
.PP
If you get Inline to work on a new platform, please send me email email.
If it doesn't work, let me know as well and I'll see what can be done.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For general information about Inline see Inline.
.PP
For information about using Inline with C see Inline::C.
.PP
For sample programs using Inline with C see Inline::C\-Cookbook.
.PP
For information on writing your own Inline Language Support Module, see
Inline-API.
.PP
Inline's mailing list is inline@perl.org
.PP
To subscribe, send email to inline\-subscribe@perl.org
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Ingerson <INGY@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2002. Brian Ingerson.
.PP
Copyright (c) 2008, 2010, 2011. Sisyphus.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
