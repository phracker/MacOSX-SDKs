.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sigtrap 3pm"
.TH sigtrap 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sigtrap \- Perl pragma to enable simple signal handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    use sigtrap;
\&    use sigtrap qw(stack\-trace old\-interface\-signals);  # equivalent
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
\&    use sigtrap qw(die INT QUIT);
\&    use sigtrap qw(die normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
\&    use sigtrap \*(Aqhandler\*(Aq => \e&my_handler, \*(Aqnormal\-signals\*(Aq;
\&    use sigtrap qw(handler my_handler normal\-signals
\&                    stack\-trace error\-signals);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBsigtrap\fR pragma is a simple interface to installing signal
handlers.  You can have it install one of two handlers supplied by
\&\fBsigtrap\fR itself (one which provides a Perl stack trace and one which
simply \f(CW\*(C`die()\*(C'\fRs), or alternately you can supply your own handler for it
to install.  It can be told only to install a handler for signals which
are either untrapped or ignored.  It has a couple of lists of signals to
trap, plus you can supply your own list of signals.
.PP
The arguments passed to the \f(CW\*(C`use\*(C'\fR statement which invokes \fBsigtrap\fR
are processed in order.  When a signal name or the name of one of
\&\fBsigtrap\fR's signal lists is encountered a handler is immediately
installed, when an option is encountered it affects subsequently
installed handlers.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "\s-1SIGNAL HANDLERS\s0"
.IX Subsection "SIGNAL HANDLERS"
These options affect which handler will be used for subsequently
installed signals.
.IP "\fBstack-trace\fR" 4
.IX Item "stack-trace"
The handler used for subsequently installed signals outputs a Perl stack
trace to \s-1STDERR\s0 and then tries to dump core.  This is the default signal
handler.
.IP "\fBdie\fR" 4
.IX Item "die"
The handler used for subsequently installed signals calls \f(CW\*(C`die\*(C'\fR
(actually \f(CW\*(C`croak\*(C'\fR) with a message indicating which signal was caught.
.IP "\fBhandler\fR \fIyour-handler\fR" 4
.IX Item "handler your-handler"
\&\fIyour-handler\fR will be used as the handler for subsequently installed
signals.  \fIyour-handler\fR can be any value which is valid as an
assignment to an element of \f(CW%SIG\fR. See perlvar for examples of
handler functions.
.SS "\s-1SIGNAL LISTS\s0"
.IX Subsection "SIGNAL LISTS"
\&\fBsigtrap\fR has a few built-in lists of signals to trap.  They are:
.IP "\fBnormal-signals\fR" 4
.IX Item "normal-signals"
These are the signals which a program might normally expect to encounter
and which by default cause it to terminate.  They are \s-1HUP, INT, PIPE\s0 and
\&\s-1TERM.\s0
.IP "\fBerror-signals\fR" 4
.IX Item "error-signals"
These signals usually indicate a serious problem with the Perl
interpreter or with your script.  They are \s-1ABRT, BUS, EMT, FPE, ILL,
QUIT, SEGV, SYS\s0 and \s-1TRAP.\s0
.IP "\fBold-interface-signals\fR" 4
.IX Item "old-interface-signals"
These are the signals which were trapped by default by the old
\&\fBsigtrap\fR interface, they are \s-1ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT,
SEGV, SYS, TERM,\s0 and \s-1TRAP. \s0 If no signals or signals lists are passed to
\&\fBsigtrap\fR, this list is used.
.PP
For each of these three lists, the collection of signals set to be
trapped is checked before trapping; if your architecture does not
implement a particular signal, it will not be trapped but rather
silently ignored.
.SS "\s-1OTHER\s0"
.IX Subsection "OTHER"
.IP "\fBuntrapped\fR" 4
.IX Item "untrapped"
This token tells \fBsigtrap\fR to install handlers only for subsequently
listed signals which aren't already trapped or ignored.
.IP "\fBany\fR" 4
.IX Item "any"
This token tells \fBsigtrap\fR to install handlers for all subsequently
listed signals.  This is the default behavior.
.IP "\fIsignal\fR" 4
.IX Item "signal"
Any argument which looks like a signal name (that is,
\&\f(CW\*(C`/^[A\-Z][A\-Z0\-9]*$/\*(C'\fR) indicates that \fBsigtrap\fR should install a
handler for that name.
.IP "\fInumber\fR" 4
.IX Item "number"
Require that at least version \fInumber\fR of \fBsigtrap\fR is being used.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Provide a stack trace for the old-interface-signals:
.PP
.Vb 1
\&    use sigtrap;
.Ve
.PP
Ditto:
.PP
.Vb 1
\&    use sigtrap qw(stack\-trace old\-interface\-signals);
.Ve
.PP
Provide a stack trace on the 4 listed signals only:
.PP
.Vb 1
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
.Ve
.PP
Die on \s-1INT\s0 or \s-1QUIT:\s0
.PP
.Vb 1
\&    use sigtrap qw(die INT QUIT);
.Ve
.PP
Die on \s-1HUP, INT, PIPE\s0 or \s-1TERM:\s0
.PP
.Vb 1
\&    use sigtrap qw(die normal\-signals);
.Ve
.PP
Die on \s-1HUP, INT, PIPE\s0 or \s-1TERM,\s0 except don't change the behavior for
signals which are already trapped or ignored:
.PP
.Vb 1
\&    use sigtrap qw(die untrapped normal\-signals);
.Ve
.PP
Die on receipt one of an of the \fBnormal-signals\fR which is currently
\&\fBuntrapped\fR, provide a stack trace on receipt of \fBany\fR of the
\&\fBerror-signals\fR:
.PP
.Vb 2
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
.Ve
.PP
Install \fImy_handler()\fR as the handler for the \fBnormal-signals\fR:
.PP
.Vb 1
\&    use sigtrap \*(Aqhandler\*(Aq, \e&my_handler, \*(Aqnormal\-signals\*(Aq;
.Ve
.PP
Install \fImy_handler()\fR as the handler for the normal-signals, provide a
Perl stack trace on receipt of one of the error-signals:
.PP
.Vb 2
\&    use sigtrap qw(handler my_handler normal\-signals
\&                    stack\-trace error\-signals);
.Ve
