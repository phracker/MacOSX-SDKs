.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Meta::TypeConstraint::Registry 3"
.TH Moose::Meta::TypeConstraint::Registry 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Meta::TypeConstraint::Registry \- registry for type constraints
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a registry that maps type constraint names to
Moose::Meta::TypeConstraint objects.
.PP
Currently, it is only used internally by
Moose::Util::TypeConstraints, which creates a single global
registry.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`Moose::Meta::TypeConstraint::Registry\*(C'\fR is a subclass of
Class::MOP::Object.
.SH "METHODS"
.IX Header "METHODS"
.SS "Moose::Meta::TypeConstraint::Registry\->new(%options)"
.IX Subsection "Moose::Meta::TypeConstraint::Registry->new(%options)"
This creates a new registry object based on the provided \f(CW%options\fR:
.IP "\(bu" 4
parent_registry
.Sp
This is an optional Moose::Meta::TypeConstraint::Registry
object.
.IP "\(bu" 4
type_constraints
.Sp
This is hash reference of type names to type objects. This is
optional. Constraints can be added to the registry after it is
created.
.ie n .SS "$registry\->get_parent_registry"
.el .SS "\f(CW$registry\fP\->get_parent_registry"
.IX Subsection "$registry->get_parent_registry"
Returns the registry's parent registry, if it has one.
.ie n .SS "$registry\->has_parent_registry"
.el .SS "\f(CW$registry\fP\->has_parent_registry"
.IX Subsection "$registry->has_parent_registry"
Returns true if the registry has a parent.
.ie n .SS "$registry\->set_parent_registry($registry)"
.el .SS "\f(CW$registry\fP\->set_parent_registry($registry)"
.IX Subsection "$registry->set_parent_registry($registry)"
Sets the parent registry.
.ie n .SS "$registry\->get_type_constraint($type_name)"
.el .SS "\f(CW$registry\fP\->get_type_constraint($type_name)"
.IX Subsection "$registry->get_type_constraint($type_name)"
This returns the Moose::Meta::TypeConstraint object from the
registry for the given name, if one exists.
.ie n .SS "$registry\->has_type_constraint($type_name)"
.el .SS "\f(CW$registry\fP\->has_type_constraint($type_name)"
.IX Subsection "$registry->has_type_constraint($type_name)"
Returns true if the registry has a type of the given name.
.ie n .SS "$registry\->add_type_constraint($type)"
.el .SS "\f(CW$registry\fP\->add_type_constraint($type)"
.IX Subsection "$registry->add_type_constraint($type)"
Adds a new Moose::Meta::TypeConstraint object to the registry.
.ie n .SS "$registry\->find_type_constraint($type_name)"
.el .SS "\f(CW$registry\fP\->find_type_constraint($type_name)"
.IX Subsection "$registry->find_type_constraint($type_name)"
This method looks in the current registry for the named type. If the
type is not found, then this method will look in the registry's
parent, if it has one.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
