.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::DeclaredAt 3"
.TH Specio::DeclaredAt 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::DeclaredAt \- A class to represent where a type or coercion was declared
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $declared = Specio::DeclaredAt\->new_from_caller(1);
\&
\&    print $declared\->description;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a thin wrapper around some of the return values from
Perl's \f(CW\*(C`caller\*(C'\fR built-in. It's used internally to identify where types and
coercions are being declared, which is useful when generating error messages.
.SH "API"
.IX Header "API"
This class provides the following methods.
.SS "Specio::DeclaredAt\->new_from_caller($depth)"
.IX Subsection "Specio::DeclaredAt->new_from_caller($depth)"
Given a call stack depth, this method returns a new \f(CW\*(C`Specio::DeclaredAt\*(C'\fR
object.
.ie n .SS "$declared_at\->package, $declared_at\->filename, $declared_at\->line"
.el .SS "\f(CW$declared_at\fP\->package, \f(CW$declared_at\fP\->filename, \f(CW$declared_at\fP\->line"
.IX Subsection "$declared_at->package, $declared_at->filename, $declared_at->line"
Returns the call stack information recorded when the object was created. These
values are always populated.
.ie n .SS "$declared_at\->subroutine"
.el .SS "\f(CW$declared_at\fP\->subroutine"
.IX Subsection "$declared_at->subroutine"
Returns the subroutine from the call stack. This may be an \f(CW\*(C`udnef\*(C'\fR
.ie n .SS "$declared_at\->has_subroutine"
.el .SS "\f(CW$declared_at\fP\->has_subroutine"
.IX Subsection "$declared_at->has_subroutine"
Returns true if there is a subroutine name associated with this object.
.ie n .SS "$declared_at\->description"
.el .SS "\f(CW$declared_at\fP\->description"
.IX Subsection "$declared_at->description"
Puts all the information together into a single string like \*(L"declared in
package Foo::Bar (.../Foo/Bar.pm) at line 42 in sub named blah\*(R".
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
