.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::Update 3"
.TH Net::DNS::Update 3 "2014-01-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Update \- Create a DNS update packet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DNS;
\&
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq, \*(AqIN\*(Aq );
\&
\&    $update\->push( prereq => nxrrset(\*(Aqfoo.example.com. A\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq) );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::DNS::Update is a subclass of Net::DNS::Packet, to be used for
making \s-1DNS\s0 dynamic updates.
.PP
Programmers should refer to \s-1RFC2136\s0 for dynamic update semantics.
.PP
\&\s-1WARNING:\s0  This code is still under development.	 Please use with
caution on production nameservers.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&    $update = new Net::DNS::Update;
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq );
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq, \*(AqHS\*(Aq );
.Ve
.PP
Returns a Net::DNS::Update object suitable for performing a \s-1DNS\s0
dynamic update.	 Specifically, it creates a packet with the header
opcode set to \s-1UPDATE\s0 and the zone record type to \s-1SOA\s0 (per \s-1RFC 2136,\s0
Section 2.3).
.PP
Programs must use the \fBpush()\fR method to add RRs to the prerequisite,
update, and additional sections before performing the update.
.PP
Arguments are the zone name and the class.  If the zone is omitted,
the default domain will be taken from the resolver configuration.
If the class is omitted, it defaults to \s-1IN.\s0
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The first example below shows a complete program;
subsequent examples show only the creation of the update packet .
.SS "Add a new host"
.IX Subsection "Add a new host"
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use Net::DNS;
\&
\&    # Create the update packet.
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&
\&    # Prerequisite is that no A records exist for the name.
\&    $update\->push( pre => nxrrset(\*(Aqfoo.example.com. A\*(Aq) );
\&
\&    # Add two A records for the name.
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 172.16.3.4\*(Aq) );
\&
\&    # Send the update to the zone\*(Aqs primary master.
\&    my $resolver = new Net::DNS::Resolver;
\&    $resolver\->nameservers(\*(Aqprimary\-master.example.com\*(Aq);
\&
\&    my $reply = $resolver\->send($update);
\&
\&    # Did it work?
\&    if ($reply) {
\&            if ( $reply\->header\->rcode eq \*(AqNOERROR\*(Aq ) {
\&                    print "Update succeeded\en";
\&            } else {
\&                    print \*(AqUpdate failed: \*(Aq, $reply\->header\->rcode, "\en";
\&            }
\&    } else {
\&            print \*(AqUpdate failed: \*(Aq, $resolver\->errorstring, "\en";
\&    }
.Ve
.SS "Add an \s-1MX\s0 record for a name that already exists"
.IX Subsection "Add an MX record for a name that already exists"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxdomain(\*(Aqexample.com\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqexample.com MX 10 mailhost.example.com\*(Aq) );
.Ve
.SS "Add a \s-1TXT\s0 record for a name that doesn't exist"
.IX Subsection "Add a TXT record for a name that doesn't exist"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => nxdomain(\*(Aqinfo.example.com\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqinfo.example.com TXT "yabba dabba doo"\*(Aq) );
.Ve
.SS "Delete all A records for a name"
.IX Subsection "Delete all A records for a name"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxrrset(\*(Aqfoo.example.com A\*(Aq) );
\&    $update\->push( update => rr_del(\*(Aqfoo.example.com A\*(Aq) );
.Ve
.SS "Delete all RRs for a name"
.IX Subsection "Delete all RRs for a name"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxdomain(\*(Aqbyebye.example.com\*(Aq) );
\&    $update\->push( update => rr_del(\*(Aqbyebye.example.com\*(Aq) );
.Ve
.SS "Perform a \s-1DNS\s0 update signed using a \s-1BIND\s0 key file"
.IX Subsection "Perform a DNS update signed using a BIND key file"
.Vb 4
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq) );
\&    $update\->sign_tsig( "$dir/Khmac\-sha512.example.com.+165+01018.private" );
.Ve
.PP
The corresponding public key file may also be used:
.PP
.Vb 1
\&    $update\->sign_tsig( "$dir/Khmac\-sha512.example.com.+165+01018.key" );
.Ve
.SS "Another way to perform a signed update"
.IX Subsection "Another way to perform a signed update"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key      = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq) );
\&    $update\->sign_tsig( $key_name, $key );
.Ve
.SS "Perform a signed update with a customized \s-1TSIG\s0 record"
.IX Subsection "Perform a signed update with a customized TSIG record"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key      = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $tsig = new Net::DNS::RR("$key_name TSIG $key");
\&    $tsig\->fudge(60);
\&
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( update     => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq) );
\&    $update\->push( update     => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq) );
\&    $update\->push( additional => $tsig );
.Ve
.SH "BUGS"
.IX Header "BUGS"
This code is still under development.  Please use with caution on
production nameservers.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2002 Michael Fuhr.
.PP
Portions Copyright (c) 2002\-2004 Chris Reinhardt.
.PP
All rights reserved.  This program is free software; you may redistribute
it and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::Packet, Net::DNS::Header,
Net::DNS::RR, Net::DNS::Resolver, \s-1RFC 2136, RFC 2845\s0
