.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAPS 3"
.TH Net::LDAPS 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAPS \- use LDAP over an SSL connection
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::LDAPS;
\&
\& $ldaps = Net::LDAPS\->new(\*(Aqmyhost.example.com\*(Aq,
\&                          port => \*(Aq10000\*(Aq,
\&                          verify => \*(Aqrequire\*(Aq,
\&                          capath => \*(Aq/usr/local/cacerts/\*(Aq);
\&
\& # alternate way
\& use Net::LDAP;
\&
\& $ldaps = Net::LDAP\->new(\*(Aqldaps://myhost.example.com:10000\*(Aq,
\&                         verify => \*(Aqrequire\*(Aq,
\&                         capath => \*(Aq/usr/local/cacerts/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Communicate using the \s-1LDAP\s0 protocol to a directory server using an
encrypted (\s-1SSL\s0) network connection. This mechanism is non-standard but
widely supported; consider using LDAPv3 with the standard \s-1TLS\s0
extension if possible (many servers do not support it yet.) See
\&\*(L"start_tls\*(R" in Net::LDAP.
.PP
All the normal \f(CW\*(C`Net::LDAP\*(C'\fR methods can be used with a \f(CW\*(C`Net::LDAPS\*(C'\fR
object; see Net::LDAP for details.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( \s-1HOST\s0 [, \s-1OPTIONS\s0 ] )" 4
.IX Item "new ( HOST [, OPTIONS ] )"
Create a new connection. \s-1HOST\s0 is the hostname to contact. \s-1OPTIONS\s0 is a
number of key/value pairs. See \*(L"new\*(R" in Net::LDAP for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
IO::Socket::SSL
.SH "BUGS"
.IX Header "BUGS"
You cannot have more than one \s-1LDAPS\s0 connection at any one time, due to
restrictions in the underlying Net::SSLeay code.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Ridd <chris.ridd@isode.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2004, Chris Ridd and Graham Barr. All rights reserved. This
library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
