.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Apache::TestMM 3"
.TH Apache::TestMM 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache::TestMM \- Provide MakeMaker Wrapper Methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require Apache::TestMM;
\&  
\&  # import MY::test and MY::clean overrides for MM
\&  Apache::TestMM\->import(qw(test clean));
\&  
\&  # parse command line args
\&  Apache::TestMM::filter_args();
\&  
\&  # autogenerate the script
\&  Apache::TestMM::generate_script(\*(Aqt/TEST\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Apache::TestMM\*(C'\fR provides wrappers for the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR
craft, making it easier to extend the autogenerated \fIMakefile\fR with
\&\f(CW\*(C`Apache::Test\*(C'\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """import"""
.el .SS "\f(CWimport\fP"
.IX Subsection "import"
.Vb 1
\&  use Apache::TestMM qw(test clean);
.Ve
.PP
or:
.PP
.Vb 1
\&  Apache::TestMM\->import(qw(test clean));
.Ve
.PP
Imports \f(CW\*(C`MY::\*(C'\fR overrides for the default \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR
\&\fItest\fR and \fIclean\fR targets, as if you have defined:
.PP
.Vb 2
\&  sub MY::test {...}
\&  sub MY::clean {...}
.Ve
.PP
in \fIMakefile.PL\fR. \f(CW\*(C`Apache::TestMM\*(C'\fR does this for you so that these Makefile
targets will run the Apache server and the tests for it, and clean up after
its mess.
.ie n .SS """filter_args"""
.el .SS "\f(CWfilter_args\fP"
.IX Subsection "filter_args"
.Vb 3
\&  push @ARGV, \*(Aq\-apxs\*(Aq, $apxs_path;
\&  Apache::TestMM::filter_args();
\&  WriteMakefile(...);
.Ve
.PP
When \f(CW\*(C`WriteMakefile()\*(C'\fR is called it parses \f(CW@ARGV\fR, hoping to find
special options like \f(CW\*(C`PREFIX=/home/stas/perl\*(C'\fR. \f(CW\*(C`Apache::Test\*(C'\fR
accepts a lot of configuration options of its own. When
\&\f(CW\*(C`Apache::TestMM::filter_args()\*(C'\fR is called, it removes any
\&\f(CW\*(C`Apache::Test\*(C'\fR\-specific options from \f(CW@ARGV\fR and stores them
internally, so when \f(CW\*(C`WriteMakefile()\*(C'\fR is called they aren't in
\&\f(CW@ARGV\fR and thus won't be processed by \f(CW\*(C`WriteMakefile()\*(C'\fR.
.PP
The options can be set when \fIMakefile.PL\fR is called:
.PP
.Vb 1
\&  % perl Makefile.PL \-apxs /path/to/apxs
.Ve
.PP
Or you can push them manually to \f(CW@ARGV\fR from the code:
.PP
.Vb 1
\&  push @ARGV, \*(Aq\-apxs\*(Aq, $apxs_path;
.Ve
.PP
When:
.PP
.Vb 1
\&  Apache::TestMM::generate_script(\*(Aqt/TEST\*(Aq);
.Ve
.PP
is called, \f(CW\*(C`Apache::Test\*(C'\fR\-specific options extracted by
\&\f(CW\*(C`Apache::TestMM::filter_args()\*(C'\fR are written to the autogenerated
file. In our example, the autogenerated \fIt/TEST\fR will include:
.PP
.Vb 1
\&  %Apache::TestConfig::Argv = qw(apxs /path/to/apxs);
.Ve
.PP
which is going to be used by the \f(CW\*(C`Apache::Test\*(C'\fR runtime.
.PP
The other frequently used options are: \f(CW\*(C`\-httpd\*(C'\fR, telling where to
find the httpd (usually when the \f(CW\*(C`\-apxs\*(C'\fR option is not used),
\&\f(CW\*(C`\-libmodperl\*(C'\fR to use a specific mod_perl shared object (if your
mod_perl is built as \s-1DSO\s0), \f(CW\*(C`\-maxclients\*(C'\fR to change the default number
of the configured \f(CW\*(C`MaxClients\*(C'\fR directive, \f(CW\*(C`\-port\*(C'\fR to start the
server on a specific port, etc. To get the complete list of available
configuration options and their purpose and syntax, run:
.PP
.Vb 1
\&  % perl \-MApache::TestConfig \-le \*(AqApache::TestConfig::usage()\*(Aq
.Ve
.PP
You may wish to document some of these in your application's \fI\s-1README\s0\fR
file, especially the \f(CW\*(C`\-apxs\*(C'\fR and \f(CW\*(C`\-httpd\*(C'\fR options.
.ie n .SS """generate_script"""
.el .SS "\f(CWgenerate_script\fP"
.IX Subsection "generate_script"
.Vb 1
\&  Apache::TestMM::generate_script(\*(Aqt/TEST\*(Aq);
.Ve
.PP
\&\f(CW\*(C`generate_script()\*(C'\fR accepts the name of the script to generate and
will look for a template with the same name and suffix \fI.PL\fR. So in
our example it'll look for \fIt/TEST.PL\fR. The autogenerated script
\&\fIt/TEST\fR will include the contents of \fIt/TEST.PL\fR, and special
directives, including any configuration options passed via
\&\f(CW\*(C`filter_args()\*(C'\fR called from \fIMakefile.PL\fR, special
fixup code, etc.
