.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::Class 3"
.TH Test2::Tools::Class 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::Class \- Test2 implementation of the tools for testing classes.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test2 based tools for validating classes and objects. These are similar to
some tools from Test::More, but they have a more consistent interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Tools::Class;
\&
\&    isa_ok($CLASS_OR_INSTANCE, $PARENT_CLASS1, $PARENT_CLASS2, ...);
\&    isa_ok($CLASS_OR_INSTANCE, [$PARENT_CLASS1, $PARENT_CLASS2, ...], "Test Name");
\&
\&    can_ok($CLASS_OR_INSTANCE, $METHOD1, $METHOD2, ...);
\&    can_ok($CLASS_OR_INSTANCE, [$METHOD1, $METHOD2, ...], "Test Name");
\&
\&    DOES_ok($CLASS_OR_INSTANCE, $ROLE1, $ROLE2, ...);
\&    DOES_ok($CLASS_OR_INSTANCE, [$ROLE1, $ROLE2, ...], "Test Name");
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
All subs are exported by default.
.ie n .IP "can_ok($thing, @methods)" 4
.el .IP "can_ok($thing, \f(CW@methods\fR)" 4
.IX Item "can_ok($thing, @methods)"
.PD 0
.ie n .IP "can_ok($thing, \e@methods, $test_name)" 4
.el .IP "can_ok($thing, \e@methods, \f(CW$test_name\fR)" 4
.IX Item "can_ok($thing, @methods, $test_name)"
.PD
This checks that \f(CW$thing\fR (either a class name, or a blessed instance) has the
specified methods.
.Sp
If the second argument is an arrayref then it will be used as the list of
methods leaving the third argument to be the test name.
.ie n .IP "isa_ok($thing, @classes)" 4
.el .IP "isa_ok($thing, \f(CW@classes\fR)" 4
.IX Item "isa_ok($thing, @classes)"
.PD 0
.ie n .IP "isa_ok($thing, \e@classes, $test_name)" 4
.el .IP "isa_ok($thing, \e@classes, \f(CW$test_name\fR)" 4
.IX Item "isa_ok($thing, @classes, $test_name)"
.PD
This checks that \f(CW$thing\fR (either a class name, or a blessed instance) is or
subclasses the specified classes.
.Sp
If the second argument is an arrayref then it will be used as the list of
classes leaving the third argument to be the test name.
.ie n .IP "DOES_ok($thing, @roles)" 4
.el .IP "DOES_ok($thing, \f(CW@roles\fR)" 4
.IX Item "DOES_ok($thing, @roles)"
.PD 0
.ie n .IP "DOES_ok($thing, \e@roles, $test_name)" 4
.el .IP "DOES_ok($thing, \e@roles, \f(CW$test_name\fR)" 4
.IX Item "DOES_ok($thing, @roles, $test_name)"
.PD
This checks that \f(CW$thing\fR (either a class name, or a blessed instance) does
the specified roles.
.Sp
If the second argument is an arrayref then it will be used as the list of
roles leaving the third argument to be the test name.
.Sp
\&\fBNote 1:\fR This uses the \f(CW\*(C`$class\->DOES(...)\*(C'\fR method, not the \f(CW\*(C`does()\*(C'\fR
method Moose provides.
.Sp
\&\fBNote 2:\fR Not all perls have the \f(CW\*(C`DOES()\*(C'\fR method, if you use this on those
perls the test will be skipped.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
