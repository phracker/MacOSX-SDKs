.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Util 3"
.TH Params::Util 3 "2012-03-10" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Util \- Simple, compact and correct param\-checking functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Import some functions
\&  use Params::Util qw{_SCALAR _HASH _INSTANCE};
\&  
\&  # If you are lazy, or need a lot of them...
\&  use Params::Util \*(Aq:ALL\*(Aq;
\&  
\&  sub foo {
\&      my $object  = _INSTANCE(shift, \*(AqFoo\*(Aq) or return undef;
\&      my $image   = _SCALAR(shift)          or return undef;
\&      my $options = _HASH(shift)            or return undef;
\&      # etc...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Params::Util\*(C'\fR provides a basic set of importable functions that makes
checking parameters a hell of a lot easier
.PP
While they can be (and are) used in other contexts, the main point
behind this module is that the functions \fBboth\fR Do What You Mean,
and Do The Right Thing, so they are most useful when you are getting
params passed into your code from someone and/or somewhere else
and you can't really trust the quality.
.PP
Thus, \f(CW\*(C`Params::Util\*(C'\fR is of most use at the edges of your \s-1API,\s0 where
params and data are coming in from outside your code.
.PP
The functions provided by \f(CW\*(C`Params::Util\*(C'\fR check in the most strictly
correct manner known, are documented as thoroughly as possible so their
exact behaviour is clear, and heavily tested so make sure they are not
fooled by weird data and Really Bad Things.
.PP
To use, simply load the module providing the functions you want to use
as arguments (as shown in the \s-1SYNOPSIS\s0).
.PP
To aid in maintainability, \f(CW\*(C`Params::Util\*(C'\fR will \fBnever\fR export by
default.
.PP
You must explicitly name the functions you want to export, or use the
\&\f(CW\*(C`:ALL\*(C'\fR param to just have it export everything (although this is not
recommended if you have any _FOO functions yourself with which future
additions to \f(CW\*(C`Params::Util\*(C'\fR may clash)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "_STRING $string"
.el .SS "_STRING \f(CW$string\fP"
.IX Subsection "_STRING $string"
The \f(CW\*(C`_STRING\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a normal non-false string of non-zero length.
.PP
Note that this will \s-1NOT\s0 do anything magic to deal with the special
\&\f(CW\*(Aq0\*(Aq\fR false negative case, but will return it.
.PP
.Vb 2
\&  # \*(Aq0\*(Aq not considered valid data
\&  my $name = _STRING(shift) or die "Bad name";
\&  
\&  # \*(Aq0\*(Aq is considered valid data
\&  my $string = _STRING($_[0]) ? shift : die "Bad string";
.Ve
.PP
Please also note that this function expects a normal string. It does
not support overloading or other magic techniques to get a string.
.PP
Returns the string as a conveince if it is a valid string, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_IDENTIFIER $string"
.el .SS "_IDENTIFIER \f(CW$string\fP"
.IX Subsection "_IDENTIFIER $string"
The \f(CW\*(C`_IDENTIFIER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a valid Perl identifier.
.PP
Returns the string as a convenience if it is a valid identifier, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASS $string"
.el .SS "_CLASS \f(CW$string\fP"
.IX Subsection "_CLASS $string"
The \f(CW\*(C`_CLASS\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a valid Perl class.
.PP
This function only checks that the format is valid, not that the
class is actually loaded. It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASSISA $string, $class"
.el .SS "_CLASSISA \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_CLASSISA $string, $class"
The \f(CW\*(C`_CLASSISA\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a particularly class, or a subclass of it.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASSDOES $string, $role"
.el .SS "_CLASSDOES \f(CW$string\fP, \f(CW$role\fP"
.IX Subsection "_CLASSDOES $string, $role"
This routine behaves exactly like \f(CW"_CLASSISA"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_SUBCLASS $string, $class"
.el .SS "_SUBCLASS \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_SUBCLASS $string, $class"
The \f(CW\*(C`_SUBCLASS\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a subclass of a specified class.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_NUMBER $scalar"
.el .SS "_NUMBER \f(CW$scalar\fP"
.IX Subsection "_NUMBER $scalar"
The \f(CW\*(C`_NUMBER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a number. That is, it is defined and perl thinks it's a number.
.PP
This function is basically a Params::Util\-style wrapper around the
Scalar::Util \f(CW\*(C`looks_like_number\*(C'\fR function.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
number.
.ie n .SS "_POSINT $integer"
.el .SS "_POSINT \f(CW$integer\fP"
.IX Subsection "_POSINT $integer"
The \f(CW\*(C`_POSINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a positive integer (of any length).
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
positive integer.
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.ie n .SS "_NONNEGINT $integer"
.el .SS "_NONNEGINT \f(CW$integer\fP"
.IX Subsection "_NONNEGINT $integer"
The \f(CW\*(C`_NONNEGINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a non-negative integer (of any length). That is, a positive integer,
or zero.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
non-negative integer.
.PP
As with other tests that may return false values, care should be taken
to test via \*(L"defined\*(R" in boolean validy contexts.
.PP
.Vb 3
\&  unless ( defined _NONNEGINT($value) ) {
\&     die "Invalid value";
\&  }
.Ve
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.SS "_SCALAR \e$scalar"
.IX Subsection "_SCALAR $scalar"
The \f(CW\*(C`_SCALAR\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR\*(C'\fR reference, with content of non-zero length.
.PP
For a version that allows zero length \f(CW\*(C`SCALAR\*(C'\fR references, see
the \f(CW\*(C`_SCALAR0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.SS "_SCALAR0 \e$scalar"
.IX Subsection "_SCALAR0 $scalar"
The \f(CW\*(C`_SCALAR0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR0\*(C'\fR reference, allowing content of zero-length.
.PP
For a simpler \*(L"give me some content\*(R" version that requires non-zero
length, \f(CW\*(C`_SCALAR\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.ie n .SS "_ARRAY $value"
.el .SS "_ARRAY \f(CW$value\fP"
.IX Subsection "_ARRAY $value"
The \f(CW\*(C`_ARRAY\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference containing \fBat least\fR one element of any kind.
.PP
For a more basic form that allows zero length \s-1ARRAY\s0 references, see
the \f(CW\*(C`_ARRAY0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAY0 $value"
.el .SS "_ARRAY0 \f(CW$value\fP"
.IX Subsection "_ARRAY0 $value"
The \f(CW\*(C`_ARRAY0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference, allowing \f(CW\*(C`ARRAY\*(C'\fR references that contain no
elements.
.PP
For a more basic \*(L"An array of something\*(R" form that also requires at
least one element, see the \f(CW\*(C`_ARRAY\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAYLIKE $value"
.el .SS "_ARRAYLIKE \f(CW$value\fP"
.IX Subsection "_ARRAYLIKE $value"
The \f(CW\*(C`_ARRAYLIKE\*(C'\fR function tests whether a given scalar value can respond to
array dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_ARRAYLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_HASH $value"
.el .SS "_HASH \f(CW$value\fP"
.IX Subsection "_HASH $value"
The \f(CW\*(C`_HASH\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference with at least one entry.
.PP
For a version of this function that allows the \f(CW\*(C`HASH\*(C'\fR to be empty,
see the \f(CW\*(C`_HASH0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASH0 $value"
.el .SS "_HASH0 \f(CW$value\fP"
.IX Subsection "_HASH0 $value"
The \f(CW\*(C`_HASH0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference, regardless of the \f(CW\*(C`HASH\*(C'\fR content.
.PP
For a simpler \*(L"A hash of something\*(R" version that requires at least one
element, see the \f(CW\*(C`_HASH\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASHLIKE $value"
.el .SS "_HASHLIKE \f(CW$value\fP"
.IX Subsection "_HASHLIKE $value"
The \f(CW\*(C`_HASHLIKE\*(C'\fR function tests whether a given scalar value can respond to
hash dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_HASHLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_CODE $value"
.el .SS "_CODE \f(CW$value\fP"
.IX Subsection "_CODE $value"
The \f(CW\*(C`_CODE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`CODE\*(C'\fR reference.
.PP
Returns the \f(CW\*(C`CODE\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`CODE\*(C'\fR reference.
.ie n .SS "_CODELIKE $value"
.el .SS "_CODELIKE \f(CW$value\fP"
.IX Subsection "_CODELIKE $value"
The \f(CW\*(C`_CODELIKE\*(C'\fR is the more generic version of \f(CW\*(C`_CODE\*(C'\fR. Unlike \f(CW\*(C`_CODE\*(C'\fR,
which checks for an explicit \f(CW\*(C`CODE\*(C'\fR reference, the \f(CW\*(C`_CODELIKE\*(C'\fR function
also includes things that act like them, such as blessed objects that
overload \f(CW\*(Aq&{}\*(Aq\fR.
.PP
Please note that in the case of objects overloaded with '&{}', you will
almost always end up also testing it in 'bool' context at some stage.
.PP
For example:
.PP
.Vb 7
\&  sub foo {
\&      my $code1 = _CODELIKE(shift) or die "No code param provided";
\&      my $code2 = _CODELIKE(shift);
\&      if ( $code2 ) {
\&           print "Got optional second code param";
\&      }
\&  }
.Ve
.PP
As such, you will most likely always want to make sure your class has
at least the following to allow it to evaluate to true in boolean
context.
.PP
.Vb 2
\&  # Always evaluate to true in boolean context
\&  use overload \*(Aqbool\*(Aq => sub () { 1 };
.Ve
.PP
Returns the callable value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the
value provided is not callable.
.PP
Note \- This function was formerly known as _CALLABLE but has been renamed
for greater symmetry with the other _XXXXLIKE functions.
.PP
The use of _CALLABLE has been deprecated. It will continue to work, but
with a warning, until end\-2006, then will be removed.
.PP
I apologise for any inconvenience caused.
.ie n .SS "_INVOCANT $value"
.el .SS "_INVOCANT \f(CW$value\fP"
.IX Subsection "_INVOCANT $value"
This routine tests whether the given value is a valid method invocant.
This can be either an instance of an object, or a class name.
.PP
If so, the value itself is returned.  Otherwise, \f(CW\*(C`_INVOCANT\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_INSTANCE $object, $class"
.el .SS "_INSTANCE \f(CW$object\fP, \f(CW$class\fP"
.IX Subsection "_INSTANCE $object, $class"
The \f(CW\*(C`_INSTANCE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for an object of a particular class
in a strictly correct manner.
.PP
Returns the object itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not an object of that type.
.ie n .SS "_INSTANCEDOES $object, $role"
.el .SS "_INSTANCEDOES \f(CW$object\fP, \f(CW$role\fP"
.IX Subsection "_INSTANCEDOES $object, $role"
This routine behaves exactly like \f(CW"_INSTANCE"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_REGEX $value"
.el .SS "_REGEX \f(CW$value\fP"
.IX Subsection "_REGEX $value"
The \f(CW\*(C`_REGEX\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a regular expression.
.PP
Returns the value itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not a regular expression.
.ie n .SS "_SET \e@array, $class"
.el .SS "_SET \e@array, \f(CW$class\fP"
.IX Subsection "_SET @array, $class"
The \f(CW\*(C`_SET\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for set of at least one object of
a particular class in a strictly correct manner.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that allows zero-length sets, see the
\&\f(CW\*(C`_SET0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.ie n .SS "_SET0 \e@array, $class"
.el .SS "_SET0 \e@array, \f(CW$class\fP"
.IX Subsection "_SET0 @array, $class"
The \f(CW\*(C`_SET0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a set of objects of a
particular class in a strictly correct manner, allowing for zero objects.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that requires at least one object, see the
\&\f(CW\*(C`_SET\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.SS "_HANDLE"
.IX Subsection "_HANDLE"
The \f(CW\*(C`_HANDLE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test whether or not a single scalar
value is a file handle.
.PP
Unfortunately, in Perl the definition of a file handle can be a little
bit fuzzy, so this function is likely to be somewhat imperfect (at first
anyway).
.PP
That said, it is implement as well or better than the other file handle
detectors in existance (and we stole from the best of them).
.ie n .SS "_DRIVER $string"
.el .SS "_DRIVER \f(CW$string\fP"
.IX Subsection "_DRIVER $string"
.Vb 4
\&  sub foo {
\&    my $class = _DRIVER(shift, \*(AqMy::Driver::Base\*(Aq) or die "Bad driver";
\&    ...
\&  }
.Ve
.PP
The \f(CW\*(C`_DRIVER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to load and validate
a driver class.
.PP
The most common pattern when taking a driver class as a parameter
is to check that the name is a class (i.e. check against _CLASS)
and then to load the class (if it exists) and then ensure that
the class returns true for the isa method on some base driver name.
.PP
Return the value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value is not
a class name, the module does not exist, the module does not load,
or the class fails the isa test.
.SH "TO DO"
.IX Header "TO DO"
\&\- Add _CAN to help resolve the UNIVERSAL::can debacle
.PP
\&\- Would be even nicer if someone would demonstrate how the hell to
build a Module::Install dist of the ::Util dual Perl/XS type. :/
.PP
\&\- Implement an assertion-like version of this module, that dies on
error.
.PP
\&\- Implement a Test:: version of this module, for use in testing
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params\-Util>
.PP
For other issues, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Params::Validate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2012 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
