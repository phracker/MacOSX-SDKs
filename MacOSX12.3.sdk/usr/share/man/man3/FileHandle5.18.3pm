.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FileHandle 3pm"
.TH FileHandle 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FileHandle \- supply object methods for filehandles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use FileHandle;
\&
\&    $fh = FileHandle\->new;
\&    if ($fh\->open("< file")) {
\&        print <$fh>;
\&        $fh\->close;
\&    }
\&
\&    $fh = FileHandle\->new("> FOO");
\&    if (defined $fh) {
\&        print $fh "bar\en";
\&        $fh\->close;
\&    }
\&
\&    $fh = FileHandle\->new("file", "r");
\&    if (defined $fh) {
\&        print <$fh>;
\&        undef $fh;       # automatically closes the file
\&    }
\&
\&    $fh = FileHandle\->new("file", O_WRONLY|O_APPEND);
\&    if (defined $fh) {
\&        print $fh "corge\en";
\&        undef $fh;       # automatically closes the file
\&    }
\&
\&    $pos = $fh\->getpos;
\&    $fh\->setpos($pos);
\&
\&    $fh\->setvbuf($buffer_var, _IOLBF, 1024);
\&
\&    ($readfh, $writefh) = FileHandle::pipe;
\&
\&    autoflush STDOUT 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1NOTE:\s0 This class is now a front-end to the IO::* classes.
.PP
\&\f(CW\*(C`FileHandle::new\*(C'\fR creates a \f(CW\*(C`FileHandle\*(C'\fR, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package).  If it receives any
parameters, they are passed to \f(CW\*(C`FileHandle::open\*(C'\fR; if the open fails,
the \f(CW\*(C`FileHandle\*(C'\fR object is destroyed.  Otherwise, it is returned to
the caller.
.PP
\&\f(CW\*(C`FileHandle::new_from_fd\*(C'\fR creates a \f(CW\*(C`FileHandle\*(C'\fR like \f(CW\*(C`new\*(C'\fR does.
It requires two parameters, which are passed to \f(CW\*(C`FileHandle::fdopen\*(C'\fR;
if the fdopen fails, the \f(CW\*(C`FileHandle\*(C'\fR object is destroyed.
Otherwise, it is returned to the caller.
.PP
\&\f(CW\*(C`FileHandle::open\*(C'\fR accepts one parameter or two.  With one parameter,
it is just a front end for the built-in \f(CW\*(C`open\*(C'\fR function.  With two
parameters, the first parameter is a filename that may include
whitespace or other special characters, and the second parameter is
the open mode, optionally followed by a file permission value.
.PP
If \f(CW\*(C`FileHandle::open\*(C'\fR receives a Perl mode string (\*(L">\*(R", \*(L"+<\*(R", etc.)
or a \s-1POSIX\s0 \fIfopen()\fR mode string (\*(L"w\*(R", \*(L"r+\*(R", etc.), it uses the basic
Perl \f(CW\*(C`open\*(C'\fR operator.
.PP
If \f(CW\*(C`FileHandle::open\*(C'\fR is given a numeric mode, it passes that mode
and the optional permissions value to the Perl \f(CW\*(C`sysopen\*(C'\fR operator.
For convenience, \f(CW\*(C`FileHandle::import\*(C'\fR tries to import the O_XXX
constants from the Fcntl module.  If dynamic loading is not available,
this may fail, but the rest of FileHandle will still work.
.PP
\&\f(CW\*(C`FileHandle::fdopen\*(C'\fR is like \f(CW\*(C`open\*(C'\fR except that its first parameter
is not a filename but rather a file handle name, a FileHandle object,
or a file descriptor number.
.PP
If the C functions \fIfgetpos()\fR and \fIfsetpos()\fR are available, then
\&\f(CW\*(C`FileHandle::getpos\*(C'\fR returns an opaque value that represents the
current position of the FileHandle, and \f(CW\*(C`FileHandle::setpos\*(C'\fR uses
that value to return to a previously visited position.
.PP
If the C function \fIsetvbuf()\fR is available, then \f(CW\*(C`FileHandle::setvbuf\*(C'\fR
sets the buffering policy for the FileHandle.  The calling sequence
for the Perl function is the same as its C counterpart, including the
macros \f(CW\*(C`_IOFBF\*(C'\fR, \f(CW\*(C`_IOLBF\*(C'\fR, and \f(CW\*(C`_IONBF\*(C'\fR, except that the buffer
parameter specifies a scalar variable to use as a buffer.  \s-1WARNING: A\s0
variable used as a buffer by \f(CW\*(C`FileHandle::setvbuf\*(C'\fR must not be
modified in any way until the FileHandle is closed or until
\&\f(CW\*(C`FileHandle::setvbuf\*(C'\fR is called again, or memory corruption may
result!
.PP
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`FileHandle\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 8
\&    close
\&    fileno
\&    getc
\&    gets
\&    eof
\&    clearerr
\&    seek
\&    tell
.Ve
.PP
See perlvar for complete descriptions of each of the following
supported \f(CW\*(C`FileHandle\*(C'\fR methods:
.PP
.Vb 12
\&    autoflush
\&    output_field_separator
\&    output_record_separator
\&    input_record_separator
\&    input_line_number
\&    format_page_number
\&    format_lines_per_page
\&    format_lines_left
\&    format_name
\&    format_top_name
\&    format_line_break_characters
\&    format_formfeed
.Ve
.PP
Furthermore, for doing normal I/O you might need these:
.ie n .IP "$fh\->print" 4
.el .IP "\f(CW$fh\fR\->print" 4
.IX Item "$fh->print"
See \*(L"print\*(R" in perlfunc.
.ie n .IP "$fh\->printf" 4
.el .IP "\f(CW$fh\fR\->printf" 4
.IX Item "$fh->printf"
See \*(L"printf\*(R" in perlfunc.
.ie n .IP "$fh\->getline" 4
.el .IP "\f(CW$fh\fR\->getline" 4
.IX Item "$fh->getline"
This works like <$fh> described in \*(L"I/O Operators\*(R" in perlop
except that it's more readable and can be safely called in a
list context but still returns just one line.
.ie n .IP "$fh\->getlines" 4
.el .IP "\f(CW$fh\fR\->getlines" 4
.IX Item "$fh->getlines"
This works like <$fh> when called in a list context to
read all the remaining lines in a file, except that it's more readable.
It will also \fIcroak()\fR if accidentally called in a scalar context.
.PP
There are many other functions available since FileHandle is descended
from IO::File, IO::Seekable, and IO::Handle.  Please see those
respective pages for documentation on more functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fB\s-1IO\s0\fR extension,
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop.
