.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Locale::Maketext::Extract::Plugin::Base 3"
.TH Locale::Maketext::Extract::Plugin::Base 3 "2014-03-06" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Maketext::Extract::Plugin::Base \- Base module for format parser plugins
.SH "VERSION"
.IX Header "VERSION"
version 1.00
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package My::Parser::Plugin;
\&    use base qw(Locale::Maketext::Extract::Plugin::Base);
\&
\&    sub file_types {
\&        return [qw( ext ext2 )]
\&    }
\&
\&    sub extract {
\&        my $self = shift;
\&        local $_ = shift;
\&
\&        my $line = 1;
\&
\&        while (my $found = $self\->routine_to_extract_strings) {
\&            $self\->add_entry($str,[$filename,$line,$vars])
\&        }
\&
\&        return;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All format parser plugins in Locale::Maketext::Extract inherit from
Locale::Maketext::Extract::Plugin::Base.
.PP
If you want to write your own custom parser plugin, you will need to inherit
from this module, and provide \f(CW\*(C`file_types()\*(C'\fR and \f(CW\*(C`extract()\*(C'\fR methods,
as shown above.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew()\fR" 4
.IX Item "new()"
.Vb 3
\&    $plugin = My::Parser\->new(
\&        @file_types         # Optionally specify a list of recognised file types
\&    )
.Ve
.IP "\fBadd_entry()\fR" 4
.IX Item "add_entry()"
.Vb 1
\&    $plugin\->add_entry($str,$line,$vars)
.Ve
.ie n .IP """entries()""" 4
.el .IP "\f(CWentries()\fR" 4
.IX Item "entries()"
.Vb 1
\&    $entries = $plugin\->entries;
.Ve
.ie n .IP """clear()""" 4
.el .IP "\f(CWclear()\fR" 4
.IX Item "clear()"
.Vb 1
\&    $plugin\->clear
.Ve
.Sp
Clears all stored entries.
.IP "\fBfile_types()\fR" 4
.IX Item "file_types()"
.Vb 1
\&    @default_file_types = $plugin\->file_types
.Ve
.Sp
Returns a list of recognised file types that your module knows how to parse.
.Sp
Each file type can be one of:
.RS 4
.IP "\(bu" 4
A plain string
.Sp
.Vb 2
\&   \*(Aqpl\*(Aq  => base filename is matched against qr/\e.pl$/
\&   \*(Aq*\*(Aq   => all files are accepted
.Ve
.IP "\(bu" 4
A regex
.Sp
.Vb 1
\&   qr/\e.tt2?\e./ => base filename is matched against this regex
.Ve
.IP "\(bu" 4
A codref
.Sp
.Vb 2
\&    sub {}  => this codref is called as $coderef\->($base_filename,$path_to_file)
\&               It should return true or false
.Ve
.RE
.RS 4
.RE
.IP "\fBextract()\fR" 4
.IX Item "extract()"
.Vb 1
\&    $plugin\->extract($filecontents);
.Ve
.Sp
\&\fBextract()\fR is the method that will be called to process the contents of the
current file.
.Sp
When it finds a string that should be extracted, it should call
.Sp
.Vb 1
\&   $self\->add_entry($string,$line,$vars])
.Ve
.Sp
where \f(CW$vars\fR refers to any arguments that are being passed to the localise
function. For instance:
.Sp
.Vb 1
\&   l("You found [quant,_1,file,files]",files_found)
\&
\&     string: "You found [quant,_1,file,files]"
\&     vars  : (files_found)
.Ve
.Sp
\&\s-1IMPORTANT:\s0 a single plugin instance is used for all files, so if you plan
on storing state information in the \f(CW$plugin\fR object, this should be cleared
out at the beginning of \f(CW\*(C`extract()\*(C'\fR
.IP "\fBknown_file_type()\fR" 4
.IX Item "known_file_type()"
.Vb 3
\&    if ($plugin\->known_file_type($filename_with_path)) {
\&        ....
\&    }
.Ve
.Sp
Determines whether the current file should be handled by this parser, based
either on the list of file_types specified when this object was created,
or the default file_types specified in the module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "xgettext.pl" 4
.IX Item "xgettext.pl"
for extracting translatable strings from common template
systems and perl source files.
.IP "Locale::Maketext::Lexicon" 4
.IX Item "Locale::Maketext::Lexicon"
.PD 0
.IP "Locale::Maketext::Extract::Plugin::Perl" 4
.IX Item "Locale::Maketext::Extract::Plugin::Perl"
.IP "Locale::Maketext::Extract::Plugin::PPI" 4
.IX Item "Locale::Maketext::Extract::Plugin::PPI"
.IP "Locale::Maketext::Extract::Plugin::TT2" 4
.IX Item "Locale::Maketext::Extract::Plugin::TT2"
.IP "Locale::Maketext::Extract::Plugin::YAML" 4
.IX Item "Locale::Maketext::Extract::Plugin::YAML"
.IP "Locale::Maketext::Extract::Plugin::FormFu" 4
.IX Item "Locale::Maketext::Extract::Plugin::FormFu"
.IP "Locale::Maketext::Extract::Plugin::Mason" 4
.IX Item "Locale::Maketext::Extract::Plugin::Mason"
.IP "Locale::Maketext::Extract::Plugin::TextTemplate" 4
.IX Item "Locale::Maketext::Extract::Plugin::TextTemplate"
.IP "Locale::Maketext::Extract::Plugin::Generic" 4
.IX Item "Locale::Maketext::Extract::Plugin::Generic"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
Clinton Gormley [\s-1DRTECH\s0] <clinton@traveljury.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2013 by Audrey Tang <cpan@audreyt.org>.
.PP
This software is released under the \s-1MIT\s0 license cited below.
.ie n .SS "The ""\s-1MIT""\s0 License"
.el .SS "The ``\s-1MIT''\s0 License"
.IX Subsection "The MIT License"
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Clinton Gormley <drtech@cpan.org>
.IP "\(bu" 4
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014 by Audrey Tang.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
