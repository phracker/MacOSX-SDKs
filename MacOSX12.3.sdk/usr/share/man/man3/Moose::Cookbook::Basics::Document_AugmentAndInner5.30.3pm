.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Basics::Document_AugmentAndInner 3"
.TH Moose::Cookbook::Basics::Document_AugmentAndInner 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Basics::Document_AugmentAndInner \- The augment modifier, which turns normal method overriding "inside\-out"
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Document::Page;
\&  use Moose;
\&
\&  has \*(Aqbody\*(Aq => ( is => \*(Aqrw\*(Aq, isa => \*(AqStr\*(Aq, default => sub {\*(Aq\*(Aq} );
\&
\&  sub create {
\&      my $self = shift;
\&      $self\->open_page;
\&      inner();
\&      $self\->close_page;
\&  }
\&
\&  sub append_body {
\&      my ( $self, $appendage ) = @_;
\&      $self\->body( $self\->body . $appendage );
\&  }
\&
\&  sub open_page  { (shift)\->append_body(\*(Aq<page>\*(Aq) }
\&  sub close_page { (shift)\->append_body(\*(Aq</page>\*(Aq) }
\&
\&  package Document::PageWithHeadersAndFooters;
\&  use Moose;
\&
\&  extends \*(AqDocument::Page\*(Aq;
\&
\&  augment \*(Aqcreate\*(Aq => sub {
\&      my $self = shift;
\&      $self\->create_header;
\&      inner();
\&      $self\->create_footer;
\&  };
\&
\&  sub create_header { (shift)\->append_body(\*(Aq<header/>\*(Aq) }
\&  sub create_footer { (shift)\->append_body(\*(Aq<footer/>\*(Aq) }
\&
\&  package TPSReport;
\&  use Moose;
\&
\&  extends \*(AqDocument::PageWithHeadersAndFooters\*(Aq;
\&
\&  augment \*(Aqcreate\*(Aq => sub {
\&      my $self = shift;
\&      $self\->create_tps_report;
\&      inner();
\&  };
\&
\&  sub create_tps_report {
\&      (shift)\->append_body(\*(Aq<report type="tps"/>\*(Aq);
\&  }
\&
\&  # <page><header/><report type="tps"/><footer/></page>
\&  my $report_xml = TPSReport\->new\->create;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This recipe shows how the \f(CW\*(C`augment\*(C'\fR method modifier works. This
modifier reverses the normal subclass to parent method resolution
order. With an \f(CW\*(C`augment\*(C'\fR modifier the \fIleast\fR specific method is
called first. Each successive call to \f(CW\*(C`inner\*(C'\fR descends the
inheritance tree, ending at the most specific subclass.
.PP
The \f(CW\*(C`augment\*(C'\fR modifier lets you design a parent class that can be
extended in a specific way. The parent provides generic wrapper
functionality, and the subclasses fill in the details.
.PP
In the example above, we've created a set of document classes, with
the most specific being the \f(CW\*(C`TPSReport\*(C'\fR class.
.PP
We start with the least specific class, \f(CW\*(C`Document::Page\*(C'\fR. Its create
method contains a call to \f(CW\*(C`inner()\*(C'\fR:
.PP
.Vb 6
\&  sub create {
\&      my $self = shift;
\&      $self\->open_page;
\&      inner();
\&      $self\->close_page;
\&  }
.Ve
.PP
The \f(CW\*(C`inner\*(C'\fR function is exported by \f(CW\*(C`Moose\*(C'\fR, and is like \f(CW\*(C`super\*(C'\fR
for augmented methods. When \f(CW\*(C`inner\*(C'\fR is called, Moose finds the next
method in the chain, which is the \f(CW\*(C`augment\*(C'\fR modifier in
\&\f(CW\*(C`Document::PageWithHeadersAndFooters\*(C'\fR. You'll note that we can call
\&\f(CW\*(C`inner\*(C'\fR in our modifier:
.PP
.Vb 6
\&  augment \*(Aqcreate\*(Aq => sub {
\&      my $self = shift;
\&      $self\->create_header;
\&      inner();
\&      $self\->create_footer;
\&  };
.Ve
.PP
This finds the next most specific modifier, in the \f(CW\*(C`TPSReport\*(C'\fR class.
.PP
Finally, in the \f(CW\*(C`TPSReport\*(C'\fR class, the chain comes to an end:
.PP
.Vb 5
\&  augment \*(Aqcreate\*(Aq => sub {
\&      my $self = shift;
\&      $self\->create_tps_report;
\&      inner();
\&  };
.Ve
.PP
We do call the \f(CW\*(C`inner\*(C'\fR function one more time, but since there is no
more specific subclass, this is a no-op. Making this call means we can
easily subclass \f(CW\*(C`TPSReport\*(C'\fR in the future.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
The \f(CW\*(C`augment\*(C'\fR modifier is a powerful tool for creating a set of
nested wrappers. It's not something you will need often, but when you
do, it is very handy.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
