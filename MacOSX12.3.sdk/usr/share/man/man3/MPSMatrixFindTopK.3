.TH "MPSMatrixFindTopK" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixFindTopK
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixFindTopK\&.h>\fP
.PP
Inherits \fBMPSMatrixUnaryKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:numberOfTopKValues:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBcopyWithZone:device:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBsourceRows\fP"
.br
.ti -1c
.RI "NSUInteger \fBsourceColumns\fP"
.br
.ti -1c
.RI "NSUInteger \fBindexOffset\fP"
.br
.ti -1c
.RI "NSUInteger \fBnumberOfTopKValues\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework\&.
.PP
\fBA\fP kernel that find top-K values and their corresponding indices withing a row of a matrix
.PP
\fBA\fP \fBMPSMatrixFindTopK\fP object computes finds the 'k' largest values within a row of a matrix and returns the value found and the index of the entry in the source matrix\&. This operation is performed independently on the rows and matrices in batch of the source matrix\&. 
.SH "Method Documentation"
.PP 
.SS "\- (nonnull instancetype) copyWithZone: (nullable NSZone *) zone(nullable id< MTLDevice >) device"
Make a copy of this kernel for a new device - 
.PP
\fBSee also:\fP
.RS 4
\fBMPSKernel\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP The NSZone in which to allocate the object 
.br
\fIdevice\fP The device for the new \fBMPSKernel\fP\&. If nil, then use self\&.device\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a copy of this \fBMPSKernel\fP\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSMatrix\fP *__nonnull) inputMatrix(\fBMPSMatrix\fP *__nonnull) resultIndexMatrix(\fBMPSMatrix\fP *__nonnull) resultValueMatrix"
Encode a \fBMPSMatrixFindTopK\fP object to a command buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded kernel\&.
.br
\fIinputMatrix\fP \fBA\fP valid \fBMPSMatrix\fP object which specifies the input matrix\&.
.br
\fIresultIndexMatrix\fP \fBA\fP valid \fBMPSMatrix\fP object which specifies the matrix which will be overwritten by the result indices\&. This matrix must have datatype MPSDataTypeUInt32\&. 
.br
\fIresultValueMatrix\fP \fBA\fP valid \fBMPSMatrix\fP object which specifies the matrix which will be overwritten by the result values\&.
.RE
.PP
Certain constraints apply to the sizes of the matrices depending on the sizes requested at initialization time as well as the origins at the time this routine is called:
.PP
Both result matrices must be large enough to hold a two dimensional array of 'sourceRows' rows and 'numberOfTopKValues' columns beginning at resultMatrixOrigin\&.
.PP
The source matrix must be large enough to contain at least 'numberOfTopKValues' values starting from sourceMatrixOrigin\&.y\&.
.PP
Each matrix within the range specified by batchStart and batchSize, which also specifies a valid set of matrices within inputMatrix, resultIndexMatrix and resultValueMatrix, will be processed\&.
.PP
The datatypes of the matrices inputMatrix and resultValueMatrix must match and be either MPSDataTypeFloat32 or MPSDataTypeFloat16\&. 
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  See \fBMPSKernel::initWithCoder\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSMatrixFindTopK\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSMatrixFindTopK\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSMatrixFindTopK\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Use the above initialization method instead\&. 
.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(NSUInteger) numberOfTopKValues"
Initialize an \fBMPSMatrixFindTopK\fP object on a device for a given size\&.
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device on which the kernel will execute\&. 
.br
\fInumberOfTopKValues\fP The number of largest values to find from each row, must be less or equal to 16\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSMatrixFindTopK\fP object or nil, if failure\&. 
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\- indexOffset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Specifies a number that will be added to all the indices written to resultIndexMatrix in encodeToCommandBuffer\&. This value can be used to offset later computations for example by adding the value for the source matrix column offset sourceMatrixOrigin\&.y\&. Example: Let numberOfTopKValues be 3, let the source be the following: 
.PP
.nf
source = [ 6.0, 3.0, 8.0, 1.0, 9.0, 4.0, 5.0 ]

.fi
.PP
.PP
and let the sourceMatrixOrigin\&.y = 2\&.
.PP
Then if indexOffset = 2 then the result value and result index matrices will be: 
.PP
.nf
result values  = [ 9.0, 8.0, 5.0 ]
result indices = [  4 ,  2 ,  6  ],

.fi
.PP
.PP
which gives the user indices into the original source matrix\&.
.PP
On the other hand if the indexOffset = 0 then the results are as follows: 
.PP
.nf
result values  = [ 9.0, 8.0, 5.0 ]
result indices = [  2 ,  0 ,  4  ],

.fi
.PP
.PP
which on the other hand gives the user indices into the submatrix starting from sourceMatrixOrigin\&.y == 2\&.
.PP
This property is modifiable and defaults to 0\&. If a different behavior is desired then this should be modified prior to encoding the kernel\&. 
.SS "\- numberOfTopKValues\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of highest values (and their indices) to be found in each row by the kernel\&. This property is initialized in the kernel initialization call initWithDevice, but can be modified before encoding the kernel\&. Must be less or equal to 16 and requesting more values results in undefined behavior\&. It is the user's responsibility to ensure that the resultIndexMatrix and resultValueMatrix parameters in encodeToCommandBuffer are large enough to accommodate the results of this operation, otherwise the results of the encode call are undefined\&. 
.SS "\- sourceColumns\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of columns to consider from the source in the operation\&. This property is modifiable and defaults to NSUIntegerMax and the number is adjusted dynamically at kernel encode time (see encodeToCommandBuffer) to fit into the source matrix available starting from sourceMatrixOrigin\&.y, indicating that by default the whole source matrix is used\&. If a different size is desired then this should be modified prior to encoding the kernel\&. It is the user's responsibility to ensure that the resultIndexMatrix and resultValueMatrix parameters in encodeToCommandBuffer are large enough to accommodate the results of this operation, otherwise the results of the encode call are undefined\&. NOTE: sourceMatrixOrigin and resultMatrixOrigin from \fBMPSMatrixUnaryKernel\fP can be used to control the starting points in the source and destination at kernel encode time (see encodeToCommandBuffer)\&. 
.SS "\- sourceRows\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of rows to consider from the source in the operation\&. This property is modifiable and defaults to NSUIntegerMax and the number is adjusted dynamically at kernel encode time (see encodeToCommandBuffer) to fit into the source matrix available starting from sourceMatrixOrigin\&.x, indicating that by default the whole source matrix is used\&. If a different size is desired then this should be modified prior to encoding the kernel\&. It is the user's responsibility to ensure that the resultIndexMatrix and resultValueMatrix parameters in encodeToCommandBuffer are large enough to accommodate the results of this operation, otherwise the results of the encode call are undefined\&. NOTE: sourceMatrixOrigin and resultMatrixOrigin from \fBMPSMatrixUnaryKernel\fP can be used to control the starting points in the source and destination at kernel encode time (see encodeToCommandBuffer)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
