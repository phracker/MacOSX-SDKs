.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::External 3"
.TH Module::Install::External 3 "2017-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Install::External \- Specify dependencies on external non\-Perl things
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Install::External\*(C'\fR provides command that allow you to
declaratively specify a dependency on a program or system that is not
Perl.
.PP
The commands it provides are similar to those in Module::Install::Can,
except that they implement an explicit dependency, in addition to just
working out if the particular thing is available.
.SH "COMMANDS"
.IX Header "COMMANDS"
.SS "requires_xs"
.IX Subsection "requires_xs"
.Vb 1
\&  requires_xs;
.Ve
.PP
The \f(CW\*(C`requires_xs\*(C'\fR command explicitly specifies that a C compiler and the
perl header files are required in order to build (at \fImake\fR\-time) the
distribution (specifically \s-1XS\s0 files).
.PP
It does not take any params, and aborts the \fIMakefile.PL\fR execution in a
way that an automated installation or testing system will interpret as a
\&\f(CW\*(C`NA\*(C'\fR (\*(L"not applicable to this platform\*(R") result.
.PP
This may be changed to an alternative abort result at a later time.
.PP
Returns true as a convenience.
.SS "requires_external_cc"
.IX Subsection "requires_external_cc"
.Vb 1
\&  requires_external_cc;
.Ve
.PP
The \f(CW\*(C`requires_external_cc\*(C'\fR command explicitly specifies that a C compiler
is required in order to build (at \fImake\fR\-time) the distribution.
.PP
It does not take any params, and aborts the \fIMakefile.PL\fR execution
in a way that an automated installation or testing system will interpret
as a \f(CW\*(C`NA\*(C'\fR (\*(L"not applicable to this platform\*(R") result.
.PP
This may be changed to an alternative abort result at a later time.
.PP
Returns true as a convenience.
.SS "requires_external_bin"
.IX Subsection "requires_external_bin"
.Vb 1
\&  requires_external_bin \*(Aqcvs\*(Aq;
.Ve
.PP
The \f(CW\*(C`requires_external_bin\*(C'\fR command takes the name of a system command
or program, similar to the \f(CW\*(C`can_run\*(C'\fR command, except that
\&\f(CW\*(C`requires_external_bin\*(C'\fR checks in a way that is a declarative explicit
dependency.
.PP
The takes a single param of the command/program name, and aborts the
\&\f(CW\*(C`Makefile.PL\*(C'\fR execution in a way that an automated installation or
testing system will interpret as a \f(CW\*(C`NA\*(C'\fR (\*(L"not applicable to this
platform\*(R") result.
.PP
Returns true as a convenience.
.SH "TO DO"
.IX Header "TO DO"
Work out how to save the external dependency metadata, in agreement with
the larger Perl community.
.PP
Implement the agreed external dependency metadata solution.
.SH "AUTHORS"
.IX Header "AUTHORS"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Install
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 Adam Kennedy.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
