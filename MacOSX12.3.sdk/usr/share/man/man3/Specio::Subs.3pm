.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Subs 3"
.TH Specio::Subs 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Subs \- Make validation and coercion subs from Specio types
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Specio::Subs qw( Specio::Library::Builtins Specio::Library::Perl My::Lib );
\&
\&  if ( is_PackageName($var) ) { ... }
\&
\&  assert_Str($var);
\&
\&  my $person1 = to_Person($var);
\&  my $person2 = force_Person($var);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module generates a set of helpful validation and coercion subroutines for
all of the types defined in one or more libraries.
.PP
To use it, simply import \f(CW\*(C`Specio::Subs\*(C'\fR passing a list of one or more library
names. This module will load those libraries as needed.
.PP
If any of the types in any libraries have names that do not work as part of a
Perl subroutine name, this module will throw an exception.
.PP
If you have Sub::Util or Sub::Name installed, one of those will be used
to name the generated subroutines.
.ie n .SH """EXPORTS"""
.el .SH "``EXPORTS''"
.IX Header "EXPORTS"
The following subs are created in the importing package:
.SS "is_$type($value)"
.IX Subsection "is_$type($value)"
This subroutine returns a boolean indicating whether or not the \f(CW$value\fR is
valid for the type.
.SS "assert_$type($value)"
.IX Subsection "assert_$type($value)"
This subroutine dies if the \f(CW$value\fR is not valid for the type.
.SS "to_$type($value)"
.IX Subsection "to_$type($value)"
This subroutine attempts to coerce \f(CW$value\fR into the given type. If it cannot
be coerced it returns the original \f(CW$value\fR.
.PP
This is only created if the type has coercions.
.SS "force_$type($value)"
.IX Subsection "force_$type($value)"
This subroutine attempts to coerce \f(CW$value\fR into the given type, and dies if
it cannot do so.
.PP
This is only created if the type has coercions.
.SH "ADDITIONAL API"
.IX Header "ADDITIONAL API"
This module has a subroutine named \f(CW\*(C`subs_installed_into\*(C'\fR. It is not exported
but it can be called by its fully qualified name. It accepts a single
argument, a package name. It returns a list of subs that it generated and
installed in the given package, if any.
.PP
This exists to make it easy to write a type library that combines other
library and generates helper subs for export all at once.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
