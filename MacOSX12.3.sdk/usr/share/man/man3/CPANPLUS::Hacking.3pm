.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Hacking 3pm"
.TH CPANPLUS::Hacking 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Hacking \- developing CPANPLUS
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document attempts to describe how to develop with the
\&\s-1CPANPLUS\s0 environment most easily, how certain things work and why.
.PP
This is basically a quick-start guide to people who want to add
features or patches to \s-1CPANPLUS.\s0
.SH "OBTAINING CPANPLUS"
.IX Header "OBTAINING CPANPLUS"
Checkout \s-1CPANPLUS\s0 from its \s-1GIT\s0 repository at
<https://github.com/jib/cpanplus\-devel> .
.SH "INSTALLING CPANPLUS"
.IX Header "INSTALLING CPANPLUS"
\&\s-1CPANPLUS\s0 follows the standard perl module installation process:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "CONFIGURING CPANPLUS"
.IX Header "CONFIGURING CPANPLUS"
When running \f(CW\*(C`perl Makefile.PL\*(C'\fR you will be prompted to configure.
If you have already done so, and merely wish to update the \f(CW\*(C`Makefile\*(C'\fR,
simply run:
.PP
.Vb 1
\&    perl Makefile.PL JFDI=1
.Ve
.PP
This will keep your configuration intact. Note however, if there are
changes to the default configuration file \f(CW\*(C`Config.pm\-orig\*(C'\fR, you should
either delete your current config file and reconfigure, or patch your
config file from the new entries in \f(CW\*(C`Config.pm\-orig\*(C'\fR.
.SH "RUNNING CPANPLUS FROM DEVELOPMENT ENVIRONMENT"
.IX Header "RUNNING CPANPLUS FROM DEVELOPMENT ENVIRONMENT"
If you'd rather not install the development version to your
\&\f(CW\*(C`site_perl\*(C'\fR directory, that's no problem. You can set your \f(CW\*(C`PERL5LIB\*(C'\fR
environment variable to \s-1CPANPLUS\s0' \f(CW\*(C`lib\*(C'\fR directory, and you can run it
from there.
.SH "RUNNING CPANPLUS TESTS"
.IX Header "RUNNING CPANPLUS TESTS"
Tests are what tells us if \s-1CPANPLUS\s0 is working. If a test is not working,
try to run it explicitly like this:
.PP
.Vb 1
\&    perl \-I/path/to/cpanplus/lib t/XX_name_of_test.t 1
.Ve
.PP
The extra '1' makes sure that all the messages and errors (they might
be errors we're testing for!) are being printed rather than kept quiet.
This is a great way to find out the context of any failures that may
occur.
.PP
If you believe this test failure proves a bug in \s-1CPANPLUS,\s0 the long
output of the test file is something we'd like to see alongside your
bug report.
.SH "FINDING BUGS"
.IX Header "FINDING BUGS"
Sometimes you might find bugs in \s-1CPANPLUS\s0' behaviour. If you encounter
these in a development snapshot, we'd appreciate a complete patch (as
described below in the \*(L"\s-1SENDING PATCHES\*(R"\s0 section.
.PP
If it's way over your head, then of course reporting the bug is always
better than not reporting it at all. Before you do so though, make
sure you have the \fBlatest\fR development snapshot, and the bug still
persists there. If so, report the bug to this address:
.PP
.Vb 1
\&    bug\-cpanplus@rt.cpan.org
.Ve
.PP
A good \f(CW\*(C`patch\*(C'\fR would have the following characteristics:
.IP "Problem description" 4
.IX Item "Problem description"
Describe clearly what the bug is you found, and what it should have
done instead.
.IP "Program demonstrating the bug" 4
.IX Item "Program demonstrating the bug"
Show us how to reproduce the bug, in a simple of a program as possible
.IP "[\s-1OPTIONAL\s0] A patch to the test suite to test for the bug" 4
.IX Item "[OPTIONAL] A patch to the test suite to test for the bug"
Amend our test suite by making sure this bug will be found in this, and
future versions of \s-1CPANPLUS \s0(see \*(L"\s-1SUPPLYING PATCHES\*(R"\s0)
.IP "[\s-1OPTIONAL\s0] A patch to the code + tests + documentation" 4
.IX Item "[OPTIONAL] A patch to the code + tests + documentation"
Fix the bug, update the docs & tests. That way your bug will be gone
forever :)
.SH "SUPPLYING PATCHES"
.IX Header "SUPPLYING PATCHES"
Patches are a good thing, and they are welcome. Especially if they fix
bugs you've found along the way, or that others have reported.
.PP
We prefer patches in the following format:
.IP "\(bu" 4
In \f(CW\*(C`diff \-u\*(C'\fR or \f(CW\*(C`diff \-c\*(C'\fR format
.IP "\(bu" 4
From the root of the snapshot
.IP "\(bu" 4
Including patches for code + tests + docs
.IP "\(bu" 4
Sent per mail to bug\-cpanplus@rt.cpan.org
.IP "\(bu" 4
With subject containing \f(CW\*(C`[PATCH]\*(C'\fR + description of the patch
.PP
You will always be informed if a patch is applied or rejected, and in
case of rejection why that is (perhaps you can tweak the patch to have
it accepted after all).
