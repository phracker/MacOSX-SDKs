.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Meta::Attribute::Native::Trait::Hash 3"
.TH Moose::Meta::Attribute::Native::Trait::Hash 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Meta::Attribute::Native::Trait::Hash \- Helper trait for HashRef attributes
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Stuff;
\&  use Moose;
\&
\&  has \*(Aqoptions\*(Aq => (
\&      traits    => [\*(AqHash\*(Aq],
\&      is        => \*(Aqro\*(Aq,
\&      isa       => \*(AqHashRef[Str]\*(Aq,
\&      default   => sub { {} },
\&      handles   => {
\&          set_option     => \*(Aqset\*(Aq,
\&          get_option     => \*(Aqget\*(Aq,
\&          has_no_options => \*(Aqis_empty\*(Aq,
\&          num_options    => \*(Aqcount\*(Aq,
\&          delete_option  => \*(Aqdelete\*(Aq,
\&          option_pairs   => \*(Aqkv\*(Aq,
\&      },
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This trait provides native delegation methods for hash references.
.SH "PROVIDED METHODS"
.IX Header "PROVIDED METHODS"
.ie n .IP "\fBget($key, \fB$key2\fB, \f(BI$key3\fB...)\fR" 4
.el .IP "\fBget($key, \f(CB$key2\fB, \f(CB$key3\fB...)\fR" 4
.IX Item "get($key, $key2, $key3...)"
Returns values from the hash.
.Sp
In list context it returns a list of values in the hash for the given keys. In
scalar context it returns the value for the last key specified.
.Sp
This method requires at least one argument.
.ie n .IP "\fBset($key => \fB$value\fB, \f(BI$key2\fB => \f(CB$value2\fB...)\fR" 4
.el .IP "\fBset($key => \f(CB$value\fB, \f(CB$key2\fB => \f(CB$value2\fB...)\fR" 4
.IX Item "set($key => $value, $key2 => $value2...)"
Sets the elements in the hash to the given values. It returns the new values
set for each key, in the same order as the keys passed to the method.
.Sp
This method requires at least two arguments, and expects an even number of
arguments.
.ie n .IP "\fBdelete($key, \fB$key2\fB, \f(BI$key3\fB...)\fR" 4
.el .IP "\fBdelete($key, \f(CB$key2\fB, \f(CB$key3\fB...)\fR" 4
.IX Item "delete($key, $key2, $key3...)"
Removes the elements with the given keys.
.Sp
In list context it returns a list of values in the hash for the deleted
keys. In scalar context it returns the value for the last key specified.
.IP "\fBkeys\fR" 4
.IX Item "keys"
Returns the list of keys in the hash.
.Sp
This method does not accept any arguments.
.IP "\fBexists($key)\fR" 4
.IX Item "exists($key)"
Returns true if the given key is present in the hash.
.Sp
This method requires a single argument.
.IP "\fBdefined($key)\fR" 4
.IX Item "defined($key)"
Returns true if the value of a given key is defined.
.Sp
This method requires a single argument.
.IP "\fBvalues\fR" 4
.IX Item "values"
Returns the list of values in the hash.
.Sp
This method does not accept any arguments.
.IP "\fBkv\fR" 4
.IX Item "kv"
Returns the key/value pairs in the hash as an array of array references.
.Sp
.Vb 3
\&  for my $pair ( $object\->option_pairs ) {
\&      print "$pair\->[0] = $pair\->[1]\en";
\&  }
.Ve
.Sp
This method does not accept any arguments.
.IP "\fBelements\fR" 4
.IX Item "elements"
Returns the key/value pairs in the hash as a flattened list..
.Sp
This method does not accept any arguments.
.IP "\fBclear\fR" 4
.IX Item "clear"
Resets the hash to an empty value, like \f(CW\*(C`%hash = ()\*(C'\fR.
.Sp
This method does not accept any arguments.
.IP "\fBcount\fR" 4
.IX Item "count"
Returns the number of elements in the hash. Also useful for not empty:
\&\f(CW\*(C`has_options => \*(Aqcount\*(Aq\*(C'\fR.
.Sp
This method does not accept any arguments.
.IP "\fBis_empty\fR" 4
.IX Item "is_empty"
If the hash is populated, returns false. Otherwise, returns true.
.Sp
This method does not accept any arguments.
.IP "\fBaccessor($key)\fR" 4
.IX Item "accessor($key)"
.PD 0
.ie n .IP "\fBaccessor($key, \fB$value\fB)\fR" 4
.el .IP "\fBaccessor($key, \f(CB$value\fB)\fR" 4
.IX Item "accessor($key, $value)"
.PD
If passed one argument, returns the value of the specified key. If passed two
arguments, sets the value of the specified key.
.Sp
When called as a setter, this method returns the value that was set.
.IP "\fBshallow_clone\fR" 4
.IX Item "shallow_clone"
This method returns a shallow clone of the hash reference.  The return value
is a reference to a new hash with the same keys and values.  It is \fIshallow\fR
because any values that were references in the original will be the \fIsame\fR
references in the clone.
.PP
Note that \f(CW\*(C`each\*(C'\fR is deliberately omitted, due to its stateful interaction
with the hash iterator. \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`kv\*(C'\fR are much safer.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBmeta\fR" 4
.IX Item "meta"
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
