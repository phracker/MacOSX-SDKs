.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::XPath::NodeSet 3"
.TH XML::XPath::NodeSet 3 "2018-10-11" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::XPath::NodeSet \- a list of XML document nodes
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An XML::XPath::NodeSet object contains an ordered list of nodes. The nodes
each take the same format as described in XML::XPath::XMLParser.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&        my $results = $xp\->find(\*(Aq//someelement\*(Aq);
\&        if (!$results\->isa(\*(AqXML::XPath::NodeSet\*(Aq)) {
\&                print "Found $results\en";
\&                exit;
\&        }
\&        foreach my $context ($results\->get_nodelist) {
\&                my $newresults = $xp\->find(\*(Aq./other/element\*(Aq, $context);
\&                ...
\&        }
.Ve
.SH "API"
.IX Header "API"
.SS "\fBnew()\fP"
.IX Subsection "new()"
You will almost never have to create a new NodeSet object, as it is all
done for you by XPath.
.SS "\fBget_nodelist()\fP"
.IX Subsection "get_nodelist()"
Returns a list of nodes. See XML::XPath::XMLParser for the format of
the nodes.
.SS "\fBstring_value()\fP"
.IX Subsection "string_value()"
Returns the string-value of the first node in the list.
See the XPath specification for what \*(L"string-value\*(R" means.
.SS "\fBto_literal()\fP"
.IX Subsection "to_literal()"
Returns the concatenation of all the string-values of all
the nodes in the list.
.SS "get_node($pos)"
.IX Subsection "get_node($pos)"
Returns the node at \f(CW$pos\fR. The node position in XPath is based at 1, not 0.
.SS "\fBsize()\fP"
.IX Subsection "size()"
Returns the number of nodes in the NodeSet.
.SS "\fBpop()\fP"
.IX Subsection "pop()"
Equivalent to perl's pop function.
.SS "push(@nodes)"
.IX Subsection "push(@nodes)"
Equivalent to perl's push function.
.SS "append($nodeset)"
.IX Subsection "append($nodeset)"
Given a nodeset, appends the list of nodes in \f(CW$nodeset\fR to the end of the
current list.
.SS "\fBshift()\fP"
.IX Subsection "shift()"
Equivalent to perl's shift function.
.SS "unshift(@nodes)"
.IX Subsection "unshift(@nodes)"
Equivalent to perl's unshift function.
.SS "prepend($nodeset)"
.IX Subsection "prepend($nodeset)"
Given a nodeset, prepends the list of nodes in \f(CW$nodeset\fR to the front of
the current list.
