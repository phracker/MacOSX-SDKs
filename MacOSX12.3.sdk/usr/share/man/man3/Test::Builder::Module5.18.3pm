.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Builder::Module 3pm"
.TH Test::Builder::Module 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Builder::Module \- Base class for test modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Emulates Test::Simple
\&  package Your::Module;
\&
\&  my $CLASS = _\|_PACKAGE_\|_;
\&
\&  use base \*(AqTest::Builder::Module\*(Aq;
\&  @EXPORT = qw(ok);
\&
\&  sub ok ($;$) {
\&      my $tb = $CLASS\->builder;
\&      return $tb\->ok(@_);
\&  }
\&  
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a superclass for Test::Builder\-based modules.  It provides a
handful of common functionality and a method of getting at the underlying
Test::Builder object.
.SS "Importing"
.IX Subsection "Importing"
Test::Builder::Module is a subclass of Exporter which means your
module is also a subclass of Exporter.  \f(CW@EXPORT\fR, \f(CW@EXPORT_OK\fR, etc...
all act normally.
.PP
A few methods are provided to do the \f(CW\*(C`use Your::Module tests =\*(C'\fR 23> part
for you.
.PP
\fIimport\fR
.IX Subsection "import"
.PP
Test::Builder::Module provides an \fIimport()\fR method which acts in the
same basic way as Test::More's, setting the plan and controlling
exporting of functions and variables.  This allows your module to set
the plan independent of Test::More.
.PP
All arguments passed to \fIimport()\fR are passed onto 
\&\f(CW\*(C`Your::Module\->builder\->plan()\*(C'\fR with the exception of 
\&\f(CW\*(C`import =>[qw(things to import)]\*(C'\fR.
.PP
.Vb 1
\&    use Your::Module import => [qw(this that)], tests => 23;
.Ve
.PP
says to import the functions \fIthis()\fR and \fIthat()\fR as well as set the plan
to be 23 tests.
.PP
\&\fIimport()\fR also sets the \fIexported_to()\fR attribute of your builder to be
the caller of the \fIimport()\fR function.
.PP
Additional behaviors can be added to your \fIimport()\fR method by overriding
\&\fIimport_extra()\fR.
.PP
\fIimport_extra\fR
.IX Subsection "import_extra"
.PP
.Vb 1
\&    Your::Module\->import_extra(\e@import_args);
.Ve
.PP
\&\fIimport_extra()\fR is called by \fIimport()\fR.  It provides an opportunity for you
to add behaviors to your module based on its import list.
.PP
Any extra arguments which shouldn't be passed on to \fIplan()\fR should be 
stripped off by this method.
.PP
See Test::More for an example of its use.
.PP
\&\fB\s-1NOTE\s0\fR This mechanism is \fI\s-1VERY ALPHA AND LIKELY TO CHANGE\s0\fR as it
feels like a bit of an ugly hack in its current form.
.SS "Builder"
.IX Subsection "Builder"
Test::Builder::Module provides some methods of getting at the underlying
Test::Builder object.
.PP
\fIbuilder\fR
.IX Subsection "builder"
.PP
.Vb 1
\&  my $builder = Your::Class\->builder;
.Ve
.PP
This method returns the Test::Builder object associated with Your::Class.
It is not a constructor so you can call it as often as you like.
.PP
This is the preferred way to get the Test::Builder object.  You should
\&\fInot\fR get it via \f(CW\*(C`Test::Builder\->new\*(C'\fR as was previously
recommended.
.PP
The object returned by \fIbuilder()\fR may change at runtime so you should
call \fIbuilder()\fR inside each function rather than store it in a global.
.PP
.Vb 2
\&  sub ok {
\&      my $builder = Your::Class\->builder;
\&
\&      return $builder\->ok(@_);
\&  }
.Ve
