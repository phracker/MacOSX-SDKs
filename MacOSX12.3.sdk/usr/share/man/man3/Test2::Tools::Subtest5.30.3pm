.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::Subtest 3"
.TH Test2::Tools::Subtest 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::Subtest \- Tools for writing subtests
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package exports subs that let you write subtests.
.PP
There are two types of subtests, buffered and streamed. Streamed subtests mimic
subtests from Test::More in that they render all events as soon as they are
produced. Buffered subtests wait until the subtest completes before rendering
any results.
.PP
The main difference is that streamed subtests are unreadable when combined with
concurrency. Buffered subtests look fine with any number of concurrent threads
and processes.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "\s-1BUFFERED\s0"
.IX Subsection "BUFFERED"
.Vb 1
\&    use Test2::Tools::Subtest qw/subtest_buffered/;
\&
\&    subtest_buffered my_test => sub {
\&        ok(1, "subtest event A");
\&        ok(1, "subtest event B");
\&    };
.Ve
.PP
This will produce output like this:
.PP
.Vb 5
\&    ok 1 \- my_test {
\&        ok 1 \- subtest event A
\&        ok 2 \- subtest event B
\&        1..2
\&    }
.Ve
.SS "\s-1STREAMED\s0"
.IX Subsection "STREAMED"
The default option is 'buffered'. If you want streamed subtests,
the way Test::Builder does it, use this:
.PP
.Vb 1
\&    use Test2::Tools::Subtest qw/subtest_streamed/;
\&
\&    subtest_streamed my_test => sub {
\&        ok(1, "subtest event A");
\&        ok(1, "subtest event B");
\&    };
.Ve
.PP
This will produce output like this:
.PP
.Vb 5
\&    # Subtest: my_test
\&        ok 1 \- subtest event A
\&        ok 2 \- subtest event B
\&        1..2
\&    ok 1 \- Subtest: my_test
.Ve
.SH "IMPORTANT NOTE"
.IX Header "IMPORTANT NOTE"
You can use \f(CW\*(C`bail_out\*(C'\fR or \f(CW\*(C`skip_all\*(C'\fR in a subtest, but not in a \s-1BEGIN\s0 block
or \f(CW\*(C`use\*(C'\fR statement. This is due to the way flow control works within a \s-1BEGIN\s0
block. This is not normally an issue, but can happen in rare conditions using
eval, or script files as subtests.
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "subtest_streamed $name => $sub" 4
.el .IP "subtest_streamed \f(CW$name\fR => \f(CW$sub\fR" 4
.IX Item "subtest_streamed $name => $sub"
.PD 0
.ie n .IP "subtest_streamed($name, $sub, @args)" 4
.el .IP "subtest_streamed($name, \f(CW$sub\fR, \f(CW@args\fR)" 4
.IX Item "subtest_streamed($name, $sub, @args)"
.ie n .IP "subtest_streamed $name => \e%params, $sub" 4
.el .IP "subtest_streamed \f(CW$name\fR => \e%params, \f(CW$sub\fR" 4
.IX Item "subtest_streamed $name => %params, $sub"
.ie n .IP "subtest_streamed($name, \e%params, $sub, @args)" 4
.el .IP "subtest_streamed($name, \e%params, \f(CW$sub\fR, \f(CW@args\fR)" 4
.IX Item "subtest_streamed($name, %params, $sub, @args)"
.PD
Run subtest coderef, stream events as they happen.
.Sp
\&\f(CW\*(C`\e%params\*(C'\fR is a hashref with any arguments you wish to pass into hub
construction.
.ie n .IP "subtest_buffered $name => $sub" 4
.el .IP "subtest_buffered \f(CW$name\fR => \f(CW$sub\fR" 4
.IX Item "subtest_buffered $name => $sub"
.PD 0
.ie n .IP "subtest_buffered($name, $sub, @args)" 4
.el .IP "subtest_buffered($name, \f(CW$sub\fR, \f(CW@args\fR)" 4
.IX Item "subtest_buffered($name, $sub, @args)"
.ie n .IP "subtest_buffered $name => \e%params, $sub" 4
.el .IP "subtest_buffered \f(CW$name\fR => \e%params, \f(CW$sub\fR" 4
.IX Item "subtest_buffered $name => %params, $sub"
.ie n .IP "subtest_buffered($name, \e%params, $sub, @args)" 4
.el .IP "subtest_buffered($name, \e%params, \f(CW$sub\fR, \f(CW@args\fR)" 4
.IX Item "subtest_buffered($name, %params, $sub, @args)"
.PD
Run subtest coderef, render events all at once when subtest is complete.
.Sp
\&\f(CW\*(C`\e%params\*(C'\fR is a hashref with any arguments you wish to pass into hub
construction.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
