.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PadWalker 3"
.TH PadWalker 3 "2017-11-10" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PadWalker \- play with other peoples' lexical variables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use PadWalker qw(peek_my peek_our peek_sub closed_over);
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
PadWalker is a module which allows you to inspect (and even change!)
lexical variables in any subroutine which called you. It will only
show those variables which are in scope at the point of the call.
.PP
PadWalker is particularly useful for debugging. It's even
used by Perl's built-in debugger. (It can also be used
for evil, of course.)
.PP
I wouldn't recommend using PadWalker directly in production
code, but it's your call. Some of the modules that use
PadWalker internally are certainly safe for and useful
in production.
.IP "peek_my \s-1LEVEL\s0" 4
.IX Item "peek_my LEVEL"
.PD 0
.IP "peek_our \s-1LEVEL\s0" 4
.IX Item "peek_our LEVEL"
.PD
The \s-1LEVEL\s0 argument is interpreted just like the argument to \f(CW\*(C`caller\*(C'\fR.
So \f(CWpeek_my(0)\fR returns a reference to a hash of all the \f(CW\*(C`my\*(C'\fR
variables that are currently in scope;
\&\f(CWpeek_my(1)\fR returns a reference to a hash of all the \f(CW\*(C`my\*(C'\fR
variables that are in scope at the point where the current
sub was called, and so on.
.Sp
\&\f(CW\*(C`peek_our\*(C'\fR works in the same way, except that it lists
the \f(CW\*(C`our\*(C'\fR variables rather than the \f(CW\*(C`my\*(C'\fR variables.
.Sp
The hash associates each variable name with a reference
to its value. The variable names include the sigil, so
the variable \f(CW$x\fR is represented by the string '$x'.
.Sp
For example:
.Sp
.Vb 3
\&  my $x = 12;
\&  my $h = peek_my (0);
\&  ${$h\->{\*(Aq$x\*(Aq}}++;
\&
\&  print $x;  # prints 13
.Ve
.Sp
Or a more complex example:
.Sp
.Vb 4
\&  sub increment_my_x {
\&    my $h = peek_my (1);
\&    ${$h\->{\*(Aq$x\*(Aq}}++;
\&  }
\&
\&  my $x=5;
\&  increment_my_x;
\&  print $x;  # prints 6
.Ve
.IP "peek_sub \s-1SUB\s0" 4
.IX Item "peek_sub SUB"
The \f(CW\*(C`peek_sub\*(C'\fR routine takes a coderef as its argument, and returns a hash
of the \f(CW\*(C`my\*(C'\fR variables used in that sub. The values will usually be undefined
unless the sub is in use (i.e. in the call-chain) at the time. On the other
hand:
.Sp
.Vb 3
\&  my $x = "Hello!";
\&  my $r = peek_sub(sub {$x})\->{\*(Aq$x\*(Aq};
\&  print "$$r\en";        # prints \*(AqHello!\*(Aq
.Ve
.Sp
If the sub defines several \f(CW\*(C`my\*(C'\fR variables with the same name, you'll get the
last one. I don't know of any use for \f(CW\*(C`peek_sub\*(C'\fR that isn't broken as a result
of this, and it will probably be deprecated in a future version in favour of
some alternative interface.
.IP "closed_over \s-1SUB\s0" 4
.IX Item "closed_over SUB"
\&\f(CW\*(C`closed_over\*(C'\fR is similar to \f(CW\*(C`peek_sub\*(C'\fR, except that it only lists
the \f(CW\*(C`my\*(C'\fR variables which are used in the subroutine but defined outside:
in other words, the variables which it closes over. This \fIdoes\fR have
reasonable uses: see Data::Dump::Streamer, for example (a future version
of which may in fact use \f(CW\*(C`closed_over\*(C'\fR).
.IP "set_closed_over \s-1SUB, HASH_REF\s0" 4
.IX Item "set_closed_over SUB, HASH_REF"
\&\f(CW\*(C`set_closed_over\*(C'\fR reassigns the pad variables that are closed over by the subroutine.
.Sp
The second argument is a hash of references, much like the one returned from \f(CW\*(C`closed_over\*(C'\fR.
.IP "var_name \s-1LEVEL, VAR_REF\s0" 4
.IX Item "var_name LEVEL, VAR_REF"
.PD 0
.IP "var_name \s-1SUB,\s0   \s-1VAR_REF\s0" 4
.IX Item "var_name SUB, VAR_REF"
.PD
\&\f(CW\*(C`var_name(sub, var_ref)\*(C'\fR returns the name of the variable referred to
by \f(CW\*(C`var_ref\*(C'\fR, provided it is a \f(CW\*(C`my\*(C'\fR variable used in the sub. The \f(CW\*(C`sub\*(C'\fR
parameter can be either a \s-1CODE\s0 reference or a number. If it's a number,
it's treated the same way as the argument to \f(CW\*(C`peek_my\*(C'\fR.
.Sp
For example,
.Sp
.Vb 2
\&  my $foo;
\&  print var_name(0, \e$foo);    # prints \*(Aq$foo\*(Aq
\&  
\&  sub my_name {
\&    return var_name(1, shift);
\&  }
\&  print my_name(\e$foo);        # ditto
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Robin Houston <robin@cpan.org>
.PP
With contributions from Richard Soberberg, Jesse Luehrs and
Yuval Kogman, bug-spotting from Peter Scott, Dave Mitchell and
Goro Fuji, and suggestions from demerphq.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::LexAlias, Devel::Caller, Sub::Parameters
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2009, Robin Houston. All Rights Reserved.
This module is free software. It may be used, redistributed
and/or modified under the same terms as Perl itself.
