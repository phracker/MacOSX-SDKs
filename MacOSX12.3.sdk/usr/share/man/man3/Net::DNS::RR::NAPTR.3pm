.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::RR::NAPTR 3"
.TH Net::DNS::RR::NAPTR 3 "2014-01-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::RR::NAPTR \- DNS NAPTR resource record
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::DNS;
\&    $rr = new Net::DNS::RR(\*(Aqname NAPTR order preference flags service regexp replacement\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DNS\s0 Naming Authority Pointer (\s-1NAPTR\s0) resource records.
.SH "METHODS"
.IX Header "METHODS"
The available methods are those inherited from the base class augmented
by the type-specific methods defined in this package.
.PP
Use of undocumented package features or direct access to internal data
structures is discouraged and could result in program termination or
other unpredictable behaviour.
.SS "order"
.IX Subsection "order"
.Vb 1
\&    $order = $rr\->order;
.Ve
.PP
A 16\-bit unsigned integer specifying the order in which the \s-1NAPTR\s0
records must be processed to ensure the correct ordering of rules.
Low numbers are processed before high numbers.
.SS "preference"
.IX Subsection "preference"
.Vb 1
\&    $preference = $rr\->preference;
.Ve
.PP
A 16\-bit unsigned integer that specifies the order in which \s-1NAPTR\s0
records with equal \*(L"order\*(R" values should be processed, low numbers
being processed before high numbers.
.SS "flags"
.IX Subsection "flags"
.Vb 1
\&    $flags = $rr\->flags;
.Ve
.PP
A string containing flags to control aspects of the rewriting and
interpretation of the fields in the record.  Flags are single
characters from the set [A\-Z0\-9].
.SS "service"
.IX Subsection "service"
.Vb 1
\&    $service = $rr\->service;
.Ve
.PP
Specifies the service(s) available down this rewrite path. It may
also specify the protocol used to communicate with the service.
.SS "regexp"
.IX Subsection "regexp"
.Vb 1
\&    $regexp = $rr\->regexp;
.Ve
.PP
A string containing a substitution expression that is applied to
the original string held by the client in order to construct the
next domain name to lookup.
.SS "replacement"
.IX Subsection "replacement"
.Vb 1
\&    $replacement = $rr\->replacement;
.Ve
.PP
The next \s-1NAME\s0 to query for \s-1NAPTR, SRV,\s0 or address records
depending on the value of the flags field.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2005 Olaf Kolkman, NLnet Labs.
.PP
Based on code contributed by Ryan Moats.
.PP
Package template (c)2009,2012 O.M.Kolkman and R.W.Franks.
.PP
All rights reserved.
.PP
This program is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::RR, \s-1RFC2915, RFC2168, RFC3403\s0
