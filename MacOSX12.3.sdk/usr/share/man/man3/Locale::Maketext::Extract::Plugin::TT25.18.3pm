.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::Maketext::Extract::Plugin::TT2 3"
.TH Locale::Maketext::Extract::Plugin::TT2 3 "2014-02-03" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Maketext::Extract::Plugin::TT2 \- Template Toolkit format parser
.SH "VERSION"
.IX Header "VERSION"
version 0.99
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    $plugin = Locale::Maketext::Extract::Plugin::TT2\->new(
\&        $lexicon            # A Locale::Maketext::Extract object
\&        @file_types         # Optionally specify a list of recognised file types
\&    )
\&
\&    $plugin\->extract($filename,$filecontents);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Extracts strings to localise from Template Toolkit templates.
.SH "SHORT PLUGIN NAME"
.IX Header "SHORT PLUGIN NAME"
.Vb 1
\&    tt2
.Ve
.SH "VALID FORMATS"
.IX Header "VALID FORMATS"
Valid formats are:
.IP "[% |l(args) %]string[% \s-1END\s0 %]" 4
.IX Item "[% |l(args) %]string[% END %]"
.PD 0
.IP "[% 'string' | l(args) %]" 4
.IX Item "[% 'string' | l(args) %]"
.IP "[% l('string',args) %]" 4
.IX Item "[% l('string',args) %]"
.IP "[% c.l('string') %]" 4
.IX Item "[% c.l('string') %]"
.PD
Also all the above combinations with \f(CW\*(C`c.\*(C'\fR prepended should work
correctly. This is the default syntax when using \s-1TT\s0 templates
with Mojolicious.
.PP
l and loc are interchangeable.
.PP
| and \s-1FILTER\s0 are interchangeable.
.SH "KNOWN FILE TYPES"
.IX Header "KNOWN FILE TYPES"
.IP ".tt" 4
.IX Item ".tt"
.PD 0
.IP ".tt2" 4
.IX Item ".tt2"
.IP ".html" 4
.IX Item ".html"
.IP ".tt.*" 4
.IX Item ".tt.*"
.IP ".tt2.*" 4
.IX Item ".tt2.*"
.PD
.SH "REQUIRES"
.IX Header "REQUIRES"
Template
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
\&\fB\s-1BEWARE\s0\fR Using the \f(CW\*(C`loc\*(C'\fR form can give false positives if you use the Perl parser
plugin on \s-1TT\s0 files.  If you want to use the \f(CW\*(C`loc\*(C'\fR form, then you should
specify the file types that you want to the Perl plugin to parse, or enable
the default file types, eg:
.Sp
.Vb 2
\&   xgetext.pl \-P perl ....        # default file types
\&   xgettext.pl \-P perl=pl,pm  ... # specified file types
.Ve
.IP "\(bu" 4
The string-to-be-localised must be a string, not a variable. We try not
to extract calls to your localise function which contain variables eg:
.Sp
.Vb 2
\&    l(\*(Aqstring\*(Aq,arg)  # extracted
\&    l(var,arg)       # not extracted
.Ve
.Sp
This doesn't work for block filters, so don't do that. Eg:
.Sp
.Vb 3
\&    [%  FILTER l %]
\&       string [% var %]      # BAD!
\&    [% END %]
.Ve
.IP "\(bu" 4
Getting the right line number is difficult in \s-1TT.\s0 Often it'll be a range
of lines, or it may be thrown out by the use of \s-1PRE_CHOMP\s0 or \s-1POST_CHOMP. \s0 It will
always be within a few lines of the correct location.
.IP "\(bu" 4
If you have \s-1PRE/POST_CHOMP\s0 enabled by default in your templates, then you should
extract the strings using the same values.  In order to set them, you can
use the following wrapper script:
.Sp
.Vb 1
\&   #!/usr/bin/perl
\&
\&   use Locale::Maketext::Extract::Run qw(xgettext);
\&   use Locale::Maketext::Extract::Plugin::TT2();
\&
\&   %Locale::Maketext::Extract::Plugin::TT2::PARSER_OPTIONS = (
\&        PRE_CHOMP  => 1, # or 2
\&        POST_CHOMP => 1, # or 2
\&
\&        # Also START/END_TAG, ANYCASE, INTERPOLATE, V1DOLLAR, EVAL_PERL
\&   );
\&
\&   xgettext(@ARGV);
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Andy Wardley for writing the Template::Directive subclass which
made this possible.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "xgettext.pl" 4
.IX Item "xgettext.pl"
for extracting translatable strings from common template
systems and perl source files.
.IP "Locale::Maketext::Lexicon" 4
.IX Item "Locale::Maketext::Lexicon"
.PD 0
.IP "Locale::Maketext::Extract::Plugin::Base" 4
.IX Item "Locale::Maketext::Extract::Plugin::Base"
.IP "Locale::Maketext::Extract::Plugin::FormFu" 4
.IX Item "Locale::Maketext::Extract::Plugin::FormFu"
.IP "Locale::Maketext::Extract::Plugin::Perl" 4
.IX Item "Locale::Maketext::Extract::Plugin::Perl"
.IP "Locale::Maketext::Extract::Plugin::YAML" 4
.IX Item "Locale::Maketext::Extract::Plugin::YAML"
.IP "Locale::Maketext::Extract::Plugin::Mason" 4
.IX Item "Locale::Maketext::Extract::Plugin::Mason"
.IP "Locale::Maketext::Extract::Plugin::TextTemplate" 4
.IX Item "Locale::Maketext::Extract::Plugin::TextTemplate"
.IP "Locale::Maketext::Extract::Plugin::Generic" 4
.IX Item "Locale::Maketext::Extract::Plugin::Generic"
.IP "Template::Toolkit" 4
.IX Item "Template::Toolkit"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
Clinton Gormley <clint@traveljury.com>
.PP
Andy Wardley http://wardley.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2013 by Audrey Tang <cpan@audreyt.org>.
.PP
This software is released under the \s-1MIT\s0 license cited below.
.ie n .SS "The ""\s-1MIT""\s0 License"
.el .SS "The ``\s-1MIT''\s0 License"
.IX Subsection "The MIT License"
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Clinton Gormley <drtech@cpan.org>
.IP "\(bu" 4
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014 by Audrey Tang.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
