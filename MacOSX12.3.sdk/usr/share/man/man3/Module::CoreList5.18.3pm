.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::CoreList 3pm"
.TH Module::CoreList 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::CoreList \- what modules shipped with versions of perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Module::CoreList;
\&
\& print $Module::CoreList::version{5.00503}{CPAN}; # prints 1.48
\&
\& print Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq);         # prints 5.00405
\& print Module::CoreList\->first_release_by_date(\*(AqFile::Spec\*(Aq); # prints 5.005
\& print Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq, 0.82);   # prints 5.006001
\&
\& if (Module::CoreList::is_core(\*(AqFile::Spec\*(Aq)) {
\&   print "File::Spec is a core module\en";
\& }
\&
\& print join \*(Aq, \*(Aq, Module::CoreList\->find_modules(qr/Data/);
\&    # prints \*(AqData::Dumper\*(Aq
\& print join \*(Aq, \*(Aq, Module::CoreList\->find_modules(qr/test::h.*::.*s/i, 5.008008);
\&    # prints \*(AqTest::Harness::Assert, Test::Harness::Straps\*(Aq
\&
\& print join ", ", @{ $Module::CoreList::families{5.005} };
\&    # prints "5.005, 5.00503, 5.00504"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::CoreList provides information on which core and dual-life modules shipped
with each version of perl.
.PP
It provides a number of mechanisms for querying this information.
.PP
There is a utility called corelist provided with this module
which is a convenient way of querying from the command-line.
.PP
There is a functional programming \s-1API\s0 available for programmers to query
information.
.PP
Programmers may also query the contained hash structures to find relevant
information.
.SH "FUNCTIONS API"
.IX Header "FUNCTIONS API"
These are the functions that are available, they may either be called as functions or class methods:
.PP
.Vb 1
\&  Module::CoreList::first_release(\*(AqFile::Spec\*(Aq); # as a function
\&
\&  Module::CoreList\->first_release(\*(AqFile::Spec\*(Aq); # class method
.Ve
.ie n .IP """first_release( MODULE )""" 4
.el .IP "\f(CWfirst_release( MODULE )\fR" 4
.IX Item "first_release( MODULE )"
Behaviour since version 2.11
.Sp
Requires a \s-1MODULE\s0 name as an argument, returns the perl version when that module first
appeared in core as ordered by perl version number or undef ( in scalar context )
or an empty list ( in list context ) if that module is not in core.
.ie n .IP """first_release_by_date( MODULE )""" 4
.el .IP "\f(CWfirst_release_by_date( MODULE )\fR" 4
.IX Item "first_release_by_date( MODULE )"
Requires a \s-1MODULE\s0 name as an argument, returns the perl version when that module first
appeared in core as ordered by release date or undef ( in scalar context )
or an empty list ( in list context ) if that module is not in core.
.ie n .IP """find_modules( REGEX, [ LIST OF PERLS ] )""" 4
.el .IP "\f(CWfind_modules( REGEX, [ LIST OF PERLS ] )\fR" 4
.IX Item "find_modules( REGEX, [ LIST OF PERLS ] )"
Takes a regex as an argument, returns a list of modules that match the regex given.
If only a regex is provided applies to all modules in all perl versions. Optionally
you may provide a list of perl versions to limit the regex search.
.ie n .IP """find_version( PERL_VERSION )""" 4
.el .IP "\f(CWfind_version( PERL_VERSION )\fR" 4
.IX Item "find_version( PERL_VERSION )"
Takes a perl version as an argument. Returns that perl version if it exists or \f(CW\*(C`undef\*(C'\fR
otherwise.
.ie n .IP """is_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )""" 4
.el .IP "\f(CWis_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )\fR" 4
.IX Item "is_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )"
Available in version 2.99 and above.
.Sp
Returns true if \s-1MODULE\s0 was bundled with the specified version of Perl.
You can optionally specify a minimum version of the module,
and can also specify a version of Perl.
If a version of Perl isn't specified,
\&\f(CW\*(C`is_core()\*(C'\fR will use the version of Perl that is running (ie \f(CW$^V\fR).
.Sp
If you want to specify the version of Perl, but don't care about
the version of the module, pass \f(CW\*(C`undef\*(C'\fR for the module version:
.ie n .IP """is_deprecated( MODULE, PERL_VERSION )""" 4
.el .IP "\f(CWis_deprecated( MODULE, PERL_VERSION )\fR" 4
.IX Item "is_deprecated( MODULE, PERL_VERSION )"
Available in version 2.22 and above.
.Sp
Returns true if \s-1MODULE\s0 is marked as deprecated in \s-1PERL_VERSION. \s0 If \s-1PERL_VERSION\s0 is
omitted, it defaults to the current version of Perl.
.ie n .IP """deprecated_in( MODULE )""" 4
.el .IP "\f(CWdeprecated_in( MODULE )\fR" 4
.IX Item "deprecated_in( MODULE )"
Available in version 2.77 and above.
.Sp
Returns the first \s-1PERL_VERSION\s0 where the \s-1MODULE\s0 was marked as deprecated. Returns \f(CW\*(C`undef\*(C'\fR
if the \s-1MODULE\s0 has not been marked as deprecated.
.ie n .IP """removed_from( MODULE )""" 4
.el .IP "\f(CWremoved_from( MODULE )\fR" 4
.IX Item "removed_from( MODULE )"
Available in version 2.32 and above
.Sp
Takes a module name as an argument, returns the first perl version where that module
was removed from core. Returns undef if the given module was never in core or remains
in core.
.ie n .IP """removed_from_by_date( MODULE )""" 4
.el .IP "\f(CWremoved_from_by_date( MODULE )\fR" 4
.IX Item "removed_from_by_date( MODULE )"
Available in version 2.32 and above
.Sp
Takes a module name as an argument, returns the first perl version by release date where that module
was removed from core. Returns undef if the given module was never in core or remains
in core.
.ie n .IP """changes_between( PERL_VERSION, PERL_VERSION )""" 4
.el .IP "\f(CWchanges_between( PERL_VERSION, PERL_VERSION )\fR" 4
.IX Item "changes_between( PERL_VERSION, PERL_VERSION )"
Available in version 2.66 and above.
.Sp
Given two perl versions, this returns a list of pairs describing the changes in
core module content between them.  The list is suitable for storing in a hash.
The keys are library names and the values are hashrefs.  Each hashref has an
entry for one or both of \f(CW\*(C`left\*(C'\fR and \f(CW\*(C`right\*(C'\fR, giving the versions of the
library in each of the left and right perl distributions.
.Sp
For example, it might return these data (among others) for the difference
between 5.008000 and 5.008001:
.Sp
.Vb 4
\&  \*(AqPod::ParseLink\*(Aq  => { left => \*(Aq1.05\*(Aq, right => \*(Aq1.06\*(Aq },
\&  \*(AqPod::ParseUtils\*(Aq => { left => \*(Aq0.22\*(Aq, right => \*(Aq0.3\*(Aq  },
\&  \*(AqPod::Perldoc\*(Aq    => {                 right => \*(Aq3.10\*(Aq },
\&  \*(AqPod::Perldoc::BaseTo\*(Aq => {            right => undef  },
.Ve
.Sp
This shows us two libraries being updated and two being added, one of which has
an undefined version in the right-hand side version.
.SH "DATA STRUCTURES"
.IX Header "DATA STRUCTURES"
These are the hash data structures that are available:
.ie n .IP "%Module::CoreList::version" 4
.el .IP "\f(CW%Module::CoreList::version\fR" 4
.IX Item "%Module::CoreList::version"
A hash of hashes that is keyed on perl version as indicated
in $].  The second level hash is module => version pairs.
.Sp
Note, it is possible for the version of a module to be unspecified,
whereby the value is \f(CW\*(C`undef\*(C'\fR, so use \f(CW\*(C`exists $version{$foo}{$bar}\*(C'\fR if
that's what you're testing for.
.Sp
Starting with 2.10, the special module name \f(CW\*(C`Unicode\*(C'\fR refers to the version of
the Unicode Character Database bundled with Perl.
.ie n .IP "%Module::CoreList::delta" 4
.el .IP "\f(CW%Module::CoreList::delta\fR" 4
.IX Item "%Module::CoreList::delta"
Available in version 3.00 and above.
.Sp
\&\f(CW%Module::CoreList::version\fR is implemented via \f(CW\*(C`Module::CoreList::TieHashDelta\*(C'\fR
using this hash of delta changes.
.Sp
It is a hash of hashes that is keyed on perl version. Each keyed hash will have the
following keys:
.Sp
.Vb 3
\&  delta_from \- a previous perl version that the changes are based on
\&  changed    \- a hash of module/versions that have changed
\&  removed    \- a hash of modules that have been removed
.Ve
.ie n .IP "%Module::CoreList::released" 4
.el .IP "\f(CW%Module::CoreList::released\fR" 4
.IX Item "%Module::CoreList::released"
Keyed on perl version this contains \s-1ISO\s0
formatted versions of the release dates, as gleaned from perlhist.
.ie n .IP "%Module::CoreList::families" 4
.el .IP "\f(CW%Module::CoreList::families\fR" 4
.IX Item "%Module::CoreList::families"
New, in 1.96, a hash that
clusters known perl releases by their major versions.
.ie n .IP "%Module::CoreList::deprecated" 4
.el .IP "\f(CW%Module::CoreList::deprecated\fR" 4
.IX Item "%Module::CoreList::deprecated"
A hash of hashes keyed on perl version and on module name.
If a module is defined it indicates that that module is
deprecated in that perl version and is scheduled for removal
from core at some future point.
.ie n .IP "%Module::CoreList::upstream" 4
.el .IP "\f(CW%Module::CoreList::upstream\fR" 4
.IX Item "%Module::CoreList::upstream"
A hash that contains information on where patches should be directed
for each core module.
.Sp
\&\s-1UPSTREAM\s0 indicates where patches should go. \f(CW\*(C`undef\*(C'\fR implies
that this hasn't been discussed for the module at hand.
\&\f(CW\*(C`blead\*(C'\fR indicates that the copy of the module in the blead
sources is to be considered canonical, \f(CW\*(C`cpan\*(C'\fR means that the
module on \s-1CPAN\s0 is to be patched first. \f(CW\*(C`first\-come\*(C'\fR means
that blead can be patched freely if it is in sync with the
latest release on \s-1CPAN.\s0
.ie n .IP "%Module::CoreList::bug_tracker" 4
.el .IP "\f(CW%Module::CoreList::bug_tracker\fR" 4
.IX Item "%Module::CoreList::bug_tracker"
A hash that contains information on the appropriate bug tracker
for each core module.
.Sp
\&\s-1BUGS\s0 is an email or url to post bug reports.  For modules with
\&\s-1UPSTREAM\s0 => 'blead', use perl5\-porters@perl.org.  rt.cpan.org
appears to automatically provide a \s-1URL\s0 for \s-1CPAN\s0 modules; any value
given here overrides the default:
http://rt.cpan.org/Public/Dist/Display.html?Name=$ModuleName
.SH "CAVEATS"
.IX Header "CAVEATS"
Module::CoreList currently covers the 5.000, 5.001, 5.002, 5.003_07,
5.004, 5.004_05, 5.005, 5.005_03, 5.005_04, 5.6.0, 5.6.1, 5.6.2, 5.7.3,
5.8.0, 5.8.1, 5.8.2, 5.8.3, 5.8.4, 5.8.5, 5.8.6, 5.8.7, 5.8.8, 5.8.9,
5.9.0, 5.9.1, 5.9.2, 5.9.3, 5.9.4, 5.9.5, 5.10.0, 5.10.1, 5.11.0, 5.11.1,
5.11.2, 5.11.3, 5.11.4, 5.11.5, 5.12.0, 5.12.1, 5.12.2, 5.12.3, 5.12.4,
5.12.5, 5.13.0, 5.13.1, 5.13.2, 5.13.3, 5.13.4, 5.13.5, 5.13.6, 5.13.7,
5.13.8, 5.13.9, 5.13.10, 5.13.11, 5.14.0, 5.14.1, 5.14.2 5.14.3, 5.14.4,
5.15.0, 5.15.1, 5.15.2, 5.15.3, 5.15.4, 5.15.5, 5.15.6, 5.15.7, 5.15.8,
5.15.9, 5.16.0, 5.16.1, 5.16.2, 5.16.3, 5.17.0, 5.17.1, 5.17.2, 5.17.3,
5.17.4, 5.17.5, 5.17.6, 5.17.7, 5.17.8, 5.17.9, 5.17.10, 5.17.11, 5.18.0,
5.19.0, 5.19.1, 5.19.2, 5.19.3, 5.19.4, 5.19.5, 5.19.6 and 5.19.7 releases of perl.
.SH "HISTORY"
.IX Header "HISTORY"
Moved to Changes file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Clamp <richardc@unixbeard.net>
.PP
Currently maintained by the perl 5 porters <perl5\-porters@perl.org>.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2002\-2009 Richard Clamp.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
corelist, Module::Info, perl, <http://perlpunks.de/corelist>
