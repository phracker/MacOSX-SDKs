.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Socket 3pm"
.TH Socket 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Socket" \- networking constants and support functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`Socket\*(C'\fR a low-level module used by, among other things, the IO::Socket
family of modules. The following examples demonstrate some low-level uses but
a practical program would likely use the higher-level \s-1API\s0 provided by
\&\f(CW\*(C`IO::Socket\*(C'\fR or similar instead.
.PP
.Vb 1
\& use Socket qw(PF_INET SOCK_STREAM pack_sockaddr_in inet_aton);
\&
\& socket(my $socket, PF_INET, SOCK_STREAM, 0)
\&     or die "socket: $!";
\&
\& my $port = getservbyname "echo", "tcp";
\& connect($socket, pack_sockaddr_in($port, inet_aton("localhost")))
\&     or die "connect: $!";
\&
\& print $socket "Hello, world!\en";
\& print <$socket>;
.Ve
.PP
See also the \*(L"\s-1EXAMPLES\*(R"\s0 section.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a variety of constants, structure manipulators and other
functions related to socket-based networking. The values and functions
provided are useful when used in conjunction with Perl core functions such as
\&\fIsocket()\fR, \fIsetsockopt()\fR and \fIbind()\fR. It also provides several other support
functions, mostly for dealing with conversions of network addresses between
human-readable and native binary forms, and for hostname resolver operations.
.PP
Some constants and functions are exported by default by this module; but for
backward-compatibility any recently-added symbols are not exported by default
and must be requested explicitly. When an import list is provided to the
\&\f(CW\*(C`use Socket\*(C'\fR line, the default exports are not automatically imported. It is
therefore best practice to always to explicitly list all the symbols required.
.PP
Also, some common socket \*(L"newline\*(R" constants are provided: the constants
\&\f(CW\*(C`CR\*(C'\fR, \f(CW\*(C`LF\*(C'\fR, and \f(CW\*(C`CRLF\*(C'\fR, as well as \f(CW$CR\fR, \f(CW$LF\fR, and \f(CW$CRLF\fR, which map
to \f(CW\*(C`\e015\*(C'\fR, \f(CW\*(C`\e012\*(C'\fR, and \f(CW\*(C`\e015\e012\*(C'\fR. If you do not want to use the literal
characters in your programs, then use the constants provided here. They are
not exported by default, but can be imported individually, and with the
\&\f(CW\*(C`:crlf\*(C'\fR export tag:
.PP
.Vb 1
\& use Socket qw(:DEFAULT :crlf);
\&
\& $sock\->print("GET / HTTP/1.0$CRLF");
.Ve
.PP
The entire \fIgetaddrinfo()\fR subsystem can be exported using the tag \f(CW\*(C`:addrinfo\*(C'\fR;
this exports the \fIgetaddrinfo()\fR and \fIgetnameinfo()\fR functions, and all the
\&\f(CW\*(C`AI_*\*(C'\fR, \f(CW\*(C`NI_*\*(C'\fR, \f(CW\*(C`NIx_*\*(C'\fR and \f(CW\*(C`EAI_*\*(C'\fR constants.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
In each of the following groups, there may be many more constants provided
than just the ones given as examples in the section heading. If the heading
ends \f(CW\*(C`...\*(C'\fR then this means there are likely more; the exact constants
provided will depend on the \s-1OS\s0 and headers found at compile-time.
.SS "\s-1PF_INET, PF_INET6, PF_UNIX, ...\s0"
.IX Subsection "PF_INET, PF_INET6, PF_UNIX, ..."
Protocol family constants to use as the first argument to \fIsocket()\fR or the
value of the \f(CW\*(C`SO_DOMAIN\*(C'\fR or \f(CW\*(C`SO_FAMILY\*(C'\fR socket option.
.SS "\s-1AF_INET, AF_INET6, AF_UNIX, ...\s0"
.IX Subsection "AF_INET, AF_INET6, AF_UNIX, ..."
Address family constants used by the socket address structures, to pass to
such functions as \fIinet_pton()\fR or \fIgetaddrinfo()\fR, or are returned by such
functions as \fIsockaddr_family()\fR.
.SS "\s-1SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, ...\s0"
.IX Subsection "SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, ..."
Socket type constants to use as the second argument to \fIsocket()\fR, or the value
of the \f(CW\*(C`SO_TYPE\*(C'\fR socket option.
.SS "\s-1SOCK_NONBLOCK. SOCK_CLOEXEC\s0"
.IX Subsection "SOCK_NONBLOCK. SOCK_CLOEXEC"
Linux-specific shortcuts to specify the \f(CW\*(C`O_NONBLOCK\*(C'\fR and \f(CW\*(C`FD_CLOEXEC\*(C'\fR flags
during a \f(CWsocket(2)\fR call.
.PP
.Vb 1
\& socket( my $sockh, PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, 0 )
.Ve
.SS "\s-1SOL_SOCKET\s0"
.IX Subsection "SOL_SOCKET"
Socket option level constant for \fIsetsockopt()\fR and \fIgetsockopt()\fR.
.SS "\s-1SO_ACCEPTCONN, SO_BROADCAST, SO_ERROR, ...\s0"
.IX Subsection "SO_ACCEPTCONN, SO_BROADCAST, SO_ERROR, ..."
Socket option name constants for \fIsetsockopt()\fR and \fIgetsockopt()\fR at the
\&\f(CW\*(C`SOL_SOCKET\*(C'\fR level.
.SS "\s-1IP_OPTIONS, IP_TOS, IP_TTL, ...\s0"
.IX Subsection "IP_OPTIONS, IP_TOS, IP_TTL, ..."
Socket option name constants for IPv4 socket options at the \f(CW\*(C`IPPROTO_IP\*(C'\fR
level.
.SS "\s-1MSG_BCAST, MSG_OOB, MSG_TRUNC, ...\s0"
.IX Subsection "MSG_BCAST, MSG_OOB, MSG_TRUNC, ..."
Message flag constants for \fIsend()\fR and \fIrecv()\fR.
.SS "\s-1SHUT_RD, SHUT_RDWR, SHUT_WR\s0"
.IX Subsection "SHUT_RD, SHUT_RDWR, SHUT_WR"
Direction constants for \fIshutdown()\fR.
.SS "\s-1INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE\s0"
.IX Subsection "INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE"
Constants giving the special \f(CW\*(C`AF_INET\*(C'\fR addresses for wildcard, broadcast,
local loopback, and invalid addresses.
.PP
Normally equivalent to inet_aton('0.0.0.0'), inet_aton('255.255.255.255'),
inet_aton('localhost') and inet_aton('255.255.255.255') respectively.
.SS "\s-1IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ...\s0"
.IX Subsection "IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ..."
\&\s-1IP\s0 protocol constants to use as the third argument to \fIsocket()\fR, the level
argument to \fIgetsockopt()\fR or \fIsetsockopt()\fR, or the value of the \f(CW\*(C`SO_PROTOCOL\*(C'\fR
socket option.
.SS "\s-1TCP_CORK, TCP_KEEPALIVE, TCP_NODELAY, ...\s0"
.IX Subsection "TCP_CORK, TCP_KEEPALIVE, TCP_NODELAY, ..."
Socket option name constants for \s-1TCP\s0 socket options at the \f(CW\*(C`IPPROTO_TCP\*(C'\fR
level.
.SS "\s-1IN6ADDR_ANY, IN6ADDR_LOOPBACK\s0"
.IX Subsection "IN6ADDR_ANY, IN6ADDR_LOOPBACK"
Constants giving the special \f(CW\*(C`AF_INET6\*(C'\fR addresses for wildcard and local
loopback.
.PP
Normally equivalent to inet_pton(\s-1AF_INET6, \*(L"::\*(R"\s0) and
inet_pton(\s-1AF_INET6, \*(L"::1\*(R"\s0) respectively.
.SS "\s-1IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ...\s0"
.IX Subsection "IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ..."
Socket option name constants for IPv6 socket options at the \f(CW\*(C`IPPROTO_IPV6\*(C'\fR
level.
.SH "STRUCTURE MANIPULATORS"
.IX Header "STRUCTURE MANIPULATORS"
The following functions convert between lists of Perl values and packed binary
strings representing structures.
.ie n .SS "$family = sockaddr_family $sockaddr"
.el .SS "\f(CW$family\fP = sockaddr_family \f(CW$sockaddr\fP"
.IX Subsection "$family = sockaddr_family $sockaddr"
Takes a packed socket address (as returned by \fIpack_sockaddr_in()\fR,
\&\fIpack_sockaddr_un()\fR or the perl builtin functions \fIgetsockname()\fR and
\&\fIgetpeername()\fR). Returns the address family tag. This will be one of the
\&\f(CW\*(C`AF_*\*(C'\fR constants, such as \f(CW\*(C`AF_INET\*(C'\fR for a \f(CW\*(C`sockaddr_in\*(C'\fR addresses or
\&\f(CW\*(C`AF_UNIX\*(C'\fR for a \f(CW\*(C`sockaddr_un\*(C'\fR. It can be used to figure out what unpack to
use for a sockaddr of unknown type.
.ie n .SS "$sockaddr = pack_sockaddr_in $port, $ip_address"
.el .SS "\f(CW$sockaddr\fP = pack_sockaddr_in \f(CW$port\fP, \f(CW$ip_address\fP"
.IX Subsection "$sockaddr = pack_sockaddr_in $port, $ip_address"
Takes two arguments, a port number and an opaque string (as returned by
\&\fIinet_aton()\fR, or a v\-string). Returns the \f(CW\*(C`sockaddr_in\*(C'\fR structure with those
arguments packed in and \f(CW\*(C`AF_INET\*(C'\fR filled in. For Internet domain sockets,
this structure is normally what you need for the arguments in \fIbind()\fR,
\&\fIconnect()\fR, and \fIsend()\fR.
.ie n .SS "($port, $ip_address) = unpack_sockaddr_in $sockaddr"
.el .SS "($port, \f(CW$ip_address\fP) = unpack_sockaddr_in \f(CW$sockaddr\fP"
.IX Subsection "($port, $ip_address) = unpack_sockaddr_in $sockaddr"
Takes a \f(CW\*(C`sockaddr_in\*(C'\fR structure (as returned by \fIpack_sockaddr_in()\fR,
\&\fIgetpeername()\fR or \fIrecv()\fR). Returns a list of two elements: the port and an
opaque string representing the \s-1IP\s0 address (you can use \fIinet_ntoa()\fR to convert
the address to the four-dotted numeric format). Will croak if the structure
does not represent an \f(CW\*(C`AF_INET\*(C'\fR address.
.PP
In scalar context will return just the \s-1IP\s0 address.
.ie n .SS "$sockaddr = sockaddr_in $port, $ip_address"
.el .SS "\f(CW$sockaddr\fP = sockaddr_in \f(CW$port\fP, \f(CW$ip_address\fP"
.IX Subsection "$sockaddr = sockaddr_in $port, $ip_address"
.ie n .SS "($port, $ip_address) = sockaddr_in $sockaddr"
.el .SS "($port, \f(CW$ip_address\fP) = sockaddr_in \f(CW$sockaddr\fP"
.IX Subsection "($port, $ip_address) = sockaddr_in $sockaddr"
A wrapper of \fIpack_sockaddr_in()\fR or \fIunpack_sockaddr_in()\fR. In list context,
unpacks its argument and returns a list consisting of the port and \s-1IP\s0 address.
In scalar context, packs its port and \s-1IP\s0 address arguments as a \f(CW\*(C`sockaddr_in\*(C'\fR
and returns it.
.PP
Provided largely for legacy compatibility; it is better to use
\&\fIpack_sockaddr_in()\fR or \fIunpack_sockaddr_in()\fR explicitly.
.ie n .SS "$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
.el .SS "\f(CW$sockaddr\fP = pack_sockaddr_in6 \f(CW$port\fP, \f(CW$ip6_address\fP, [$scope_id, [$flowinfo]]"
.IX Subsection "$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
Takes two to four arguments, a port number, an opaque string (as returned by
\&\fIinet_pton()\fR), optionally a scope \s-1ID\s0 number, and optionally a flow label
number. Returns the \f(CW\*(C`sockaddr_in6\*(C'\fR structure with those arguments packed in
and \f(CW\*(C`AF_INET6\*(C'\fR filled in. IPv6 equivalent of \fIpack_sockaddr_in()\fR.
.ie n .SS "($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr"
.el .SS "($port, \f(CW$ip6_address\fP, \f(CW$scope_id\fP, \f(CW$flowinfo\fP) = unpack_sockaddr_in6 \f(CW$sockaddr\fP"
.IX Subsection "($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr"
Takes a \f(CW\*(C`sockaddr_in6\*(C'\fR structure. Returns a list of four elements: the port
number, an opaque string representing the IPv6 address, the scope \s-1ID,\s0 and the
flow label. (You can use \fIinet_ntop()\fR to convert the address to the usual
string format). Will croak if the structure does not represent an \f(CW\*(C`AF_INET6\*(C'\fR
address.
.PP
In scalar context will return just the \s-1IP\s0 address.
.ie n .SS "$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
.el .SS "\f(CW$sockaddr\fP = sockaddr_in6 \f(CW$port\fP, \f(CW$ip6_address\fP, [$scope_id, [$flowinfo]]"
.IX Subsection "$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
.ie n .SS "($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr"
.el .SS "($port, \f(CW$ip6_address\fP, \f(CW$scope_id\fP, \f(CW$flowinfo\fP) = sockaddr_in6 \f(CW$sockaddr\fP"
.IX Subsection "($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr"
A wrapper of \fIpack_sockaddr_in6()\fR or \fIunpack_sockaddr_in6()\fR. In list context,
unpacks its argument according to \fIunpack_sockaddr_in6()\fR. In scalar context,
packs its arguments according to \fIpack_sockaddr_in6()\fR.
.PP
Provided largely for legacy compatibility; it is better to use
\&\fIpack_sockaddr_in6()\fR or \fIunpack_sockaddr_in6()\fR explicitly.
.ie n .SS "$sockaddr = pack_sockaddr_un $path"
.el .SS "\f(CW$sockaddr\fP = pack_sockaddr_un \f(CW$path\fP"
.IX Subsection "$sockaddr = pack_sockaddr_un $path"
Takes one argument, a pathname. Returns the \f(CW\*(C`sockaddr_un\*(C'\fR structure with that
path packed in with \f(CW\*(C`AF_UNIX\*(C'\fR filled in. For \f(CW\*(C`PF_UNIX\*(C'\fR sockets, this
structure is normally what you need for the arguments in \fIbind()\fR, \fIconnect()\fR,
and \fIsend()\fR.
.ie n .SS "($path) = unpack_sockaddr_un $sockaddr"
.el .SS "($path) = unpack_sockaddr_un \f(CW$sockaddr\fP"
.IX Subsection "($path) = unpack_sockaddr_un $sockaddr"
Takes a \f(CW\*(C`sockaddr_un\*(C'\fR structure (as returned by \fIpack_sockaddr_un()\fR,
\&\fIgetpeername()\fR or \fIrecv()\fR). Returns a list of one element: the pathname. Will
croak if the structure does not represent an \f(CW\*(C`AF_UNIX\*(C'\fR address.
.ie n .SS "$sockaddr = sockaddr_un $path"
.el .SS "\f(CW$sockaddr\fP = sockaddr_un \f(CW$path\fP"
.IX Subsection "$sockaddr = sockaddr_un $path"
.ie n .SS "($path) = sockaddr_un $sockaddr"
.el .SS "($path) = sockaddr_un \f(CW$sockaddr\fP"
.IX Subsection "($path) = sockaddr_un $sockaddr"
A wrapper of \fIpack_sockaddr_un()\fR or \fIunpack_sockaddr_un()\fR. In a list context,
unpacks its argument and returns a list consisting of the pathname. In a
scalar context, packs its pathname as a \f(CW\*(C`sockaddr_un\*(C'\fR and returns it.
.PP
Provided largely for legacy compatibility; it is better to use
\&\fIpack_sockaddr_un()\fR or \fIunpack_sockaddr_un()\fR explicitly.
.PP
These are only supported if your system has <\fIsys/un.h\fR>.
.ie n .SS "$ip_mreq = pack_ip_mreq $multiaddr, $interface"
.el .SS "\f(CW$ip_mreq\fP = pack_ip_mreq \f(CW$multiaddr\fP, \f(CW$interface\fP"
.IX Subsection "$ip_mreq = pack_ip_mreq $multiaddr, $interface"
Takes an IPv4 multicast address and optionally an interface address (or
\&\f(CW\*(C`INADDR_ANY\*(C'\fR). Returns the \f(CW\*(C`ip_mreq\*(C'\fR structure with those arguments packed
in. Suitable for use with the \f(CW\*(C`IP_ADD_MEMBERSHIP\*(C'\fR and \f(CW\*(C`IP_DROP_MEMBERSHIP\*(C'\fR
sockopts.
.ie n .SS "($multiaddr, $interface) = unpack_ip_mreq $ip_mreq"
.el .SS "($multiaddr, \f(CW$interface\fP) = unpack_ip_mreq \f(CW$ip_mreq\fP"
.IX Subsection "($multiaddr, $interface) = unpack_ip_mreq $ip_mreq"
Takes an \f(CW\*(C`ip_mreq\*(C'\fR structure. Returns a list of two elements; the IPv4
multicast address and interface address.
.ie n .SS "$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface"
.el .SS "\f(CW$ip_mreq_source\fP = pack_ip_mreq_source \f(CW$multiaddr\fP, \f(CW$source\fP, \f(CW$interface\fP"
.IX Subsection "$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface"
Takes an IPv4 multicast address, source address, and optionally an interface
address (or \f(CW\*(C`INADDR_ANY\*(C'\fR). Returns the \f(CW\*(C`ip_mreq_source\*(C'\fR structure with those
arguments packed in. Suitable for use with the \f(CW\*(C`IP_ADD_SOURCE_MEMBERSHIP\*(C'\fR
and \f(CW\*(C`IP_DROP_SOURCE_MEMBERSHIP\*(C'\fR sockopts.
.ie n .SS "($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq"
.el .SS "($multiaddr, \f(CW$source\fP, \f(CW$interface\fP) = unpack_ip_mreq_source \f(CW$ip_mreq\fP"
.IX Subsection "($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq"
Takes an \f(CW\*(C`ip_mreq_source\*(C'\fR structure. Returns a list of three elements; the
IPv4 multicast address, source address and interface address.
.ie n .SS "$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex"
.el .SS "\f(CW$ipv6_mreq\fP = pack_ipv6_mreq \f(CW$multiaddr6\fP, \f(CW$ifindex\fP"
.IX Subsection "$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex"
Takes an IPv6 multicast address and an interface number. Returns the
\&\f(CW\*(C`ipv6_mreq\*(C'\fR structure with those arguments packed in. Suitable for use with
the \f(CW\*(C`IPV6_ADD_MEMBERSHIP\*(C'\fR and \f(CW\*(C`IPV6_DROP_MEMBERSHIP\*(C'\fR sockopts.
.ie n .SS "($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq"
.el .SS "($multiaddr6, \f(CW$ifindex\fP) = unpack_ipv6_mreq \f(CW$ipv6_mreq\fP"
.IX Subsection "($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq"
Takes an \f(CW\*(C`ipv6_mreq\*(C'\fR structure. Returns a list of two elements; the IPv6
address and an interface number.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "$ip_address = inet_aton $string"
.el .SS "\f(CW$ip_address\fP = inet_aton \f(CW$string\fP"
.IX Subsection "$ip_address = inet_aton $string"
Takes a string giving the name of a host, or a textual representation of an \s-1IP\s0
address and translates that to an packed binary address structure suitable to
pass to \fIpack_sockaddr_in()\fR. If passed a hostname that cannot be resolved,
returns \f(CW\*(C`undef\*(C'\fR. For multi-homed hosts (hosts with more than one address),
the first address found is returned.
.PP
For portability do not assume that the result of \fIinet_aton()\fR is 32 bits wide,
in other words, that it would contain only the IPv4 address in network order.
.PP
This IPv4\-only function is provided largely for legacy reasons. Newly-written
code should use \fIgetaddrinfo()\fR or \fIinet_pton()\fR instead for IPv6 support.
.ie n .SS "$string = inet_ntoa $ip_address"
.el .SS "\f(CW$string\fP = inet_ntoa \f(CW$ip_address\fP"
.IX Subsection "$string = inet_ntoa $ip_address"
Takes a packed binary address structure such as returned by
\&\fIunpack_sockaddr_in()\fR (or a v\-string representing the four octets of the IPv4
address in network order) and translates it into a string of the form
\&\f(CW\*(C`d.d.d.d\*(C'\fR where the \f(CW\*(C`d\*(C'\fRs are numbers less than 256 (the normal
human-readable four dotted number notation for Internet addresses).
.PP
This IPv4\-only function is provided largely for legacy reasons. Newly-written
code should use \fIgetnameinfo()\fR or \fIinet_ntop()\fR instead for IPv6 support.
.ie n .SS "$address = inet_pton $family, $string"
.el .SS "\f(CW$address\fP = inet_pton \f(CW$family\fP, \f(CW$string\fP"
.IX Subsection "$address = inet_pton $family, $string"
Takes an address family (such as \f(CW\*(C`AF_INET\*(C'\fR or \f(CW\*(C`AF_INET6\*(C'\fR) and a string
containing a textual representation of an address in that family and
translates that to an packed binary address structure.
.PP
See also \fIgetaddrinfo()\fR for a more powerful and flexible function to look up
socket addresses given hostnames or textual addresses.
.ie n .SS "$string = inet_ntop $family, $address"
.el .SS "\f(CW$string\fP = inet_ntop \f(CW$family\fP, \f(CW$address\fP"
.IX Subsection "$string = inet_ntop $family, $address"
Takes an address family and a packed binary address structure and translates
it into a human-readable textual representation of the address; typically in
\&\f(CW\*(C`d.d.d.d\*(C'\fR form for \f(CW\*(C`AF_INET\*(C'\fR or \f(CW\*(C`hhhh:hhhh::hhhh\*(C'\fR form for \f(CW\*(C`AF_INET6\*(C'\fR.
.PP
See also \fIgetnameinfo()\fR for a more powerful and flexible function to turn
socket addresses into human-readable textual representations.
.ie n .SS "($err, @result) = getaddrinfo $host, $service, [$hints]"
.el .SS "($err, \f(CW@result\fP) = getaddrinfo \f(CW$host\fP, \f(CW$service\fP, [$hints]"
.IX Subsection "($err, @result) = getaddrinfo $host, $service, [$hints]"
Given both a hostname and service name, this function attempts to resolve the
host name into a list of network addresses, and the service name into a
protocol and port number, and then returns a list of address structures
suitable to \fIconnect()\fR to it.
.PP
Given just a host name, this function attempts to resolve it to a list of
network addresses, and then returns a list of address structures giving these
addresses.
.PP
Given just a service name, this function attempts to resolve it to a protocol
and port number, and then returns a list of address structures that represent
it suitable to \fIbind()\fR to. This use should be combined with the \f(CW\*(C`AI_PASSIVE\*(C'\fR
flag; see below.
.PP
Given neither name, it generates an error.
.PP
If present, \f(CW$hints\fR should be a reference to a hash, where the following keys
are recognised:
.IP "flags => \s-1INT\s0" 4
.IX Item "flags => INT"
A bitfield containing \f(CW\*(C`AI_*\*(C'\fR constants; see below.
.IP "family => \s-1INT\s0" 4
.IX Item "family => INT"
Restrict to only generating addresses in this address family
.IP "socktype => \s-1INT\s0" 4
.IX Item "socktype => INT"
Restrict to only generating addresses of this socket type
.IP "protocol => \s-1INT\s0" 4
.IX Item "protocol => INT"
Restrict to only generating addresses for this protocol
.PP
The return value will be a list; the first value being an error indication,
followed by a list of address structures (if no error occurred).
.PP
The error value will be a dualvar; comparable to the \f(CW\*(C`EI_*\*(C'\fR error constants,
or printable as a human-readable error message string. If no error occurred it
will be zero numerically and an empty string.
.PP
Each value in the results list will be a hash reference containing the following
fields:
.IP "family => \s-1INT\s0" 4
.IX Item "family => INT"
The address family (e.g. \f(CW\*(C`AF_INET\*(C'\fR)
.IP "socktype => \s-1INT\s0" 4
.IX Item "socktype => INT"
The socket type (e.g. \f(CW\*(C`SOCK_STREAM\*(C'\fR)
.IP "protocol => \s-1INT\s0" 4
.IX Item "protocol => INT"
The protocol (e.g. \f(CW\*(C`IPPROTO_TCP\*(C'\fR)
.IP "addr => \s-1STRING\s0" 4
.IX Item "addr => STRING"
The address in a packed string (such as would be returned by
\&\fIpack_sockaddr_in()\fR)
.IP "canonname => \s-1STRING\s0" 4
.IX Item "canonname => STRING"
The canonical name for the host if the \f(CW\*(C`AI_CANONNAME\*(C'\fR flag was provided, or
\&\f(CW\*(C`undef\*(C'\fR otherwise. This field will only be present on the first returned
address.
.PP
The following flag constants are recognised in the \f(CW$hints\fR hash. Other flag
constants may exist as provided by the \s-1OS.\s0
.IP "\s-1AI_PASSIVE\s0" 4
.IX Item "AI_PASSIVE"
Indicates that this resolution is for a local \fIbind()\fR for a passive (i.e.
listening) socket, rather than an active (i.e. connecting) socket.
.IP "\s-1AI_CANONNAME\s0" 4
.IX Item "AI_CANONNAME"
Indicates that the caller wishes the canonical hostname (\f(CW\*(C`canonname\*(C'\fR) field
of the result to be filled in.
.IP "\s-1AI_NUMERICHOST\s0" 4
.IX Item "AI_NUMERICHOST"
Indicates that the caller will pass a numeric address, rather than a hostname,
and that \fIgetaddrinfo()\fR must not perform a resolve operation on this name. This
flag will prevent a possibly-slow network lookup operation, and instead return
an error if a hostname is passed.
.ie n .SS "($err, $hostname, $servicename) = getnameinfo $sockaddr, [$flags, [$xflags]]"
.el .SS "($err, \f(CW$hostname\fP, \f(CW$servicename\fP) = getnameinfo \f(CW$sockaddr\fP, [$flags, [$xflags]]"
.IX Subsection "($err, $hostname, $servicename) = getnameinfo $sockaddr, [$flags, [$xflags]]"
Given a packed socket address (such as from \fIgetsockname()\fR, \fIgetpeername()\fR, or
returned by \fIgetaddrinfo()\fR in a \f(CW\*(C`addr\*(C'\fR field), returns the hostname and
symbolic service name it represents. \f(CW$flags\fR may be a bitmask of \f(CW\*(C`NI_*\*(C'\fR
constants, or defaults to 0 if unspecified.
.PP
The return value will be a list; the first value being an error condition,
followed by the hostname and service name.
.PP
The error value will be a dualvar; comparable to the \f(CW\*(C`EI_*\*(C'\fR error constants,
or printable as a human-readable error message string. The host and service
names will be plain strings.
.PP
The following flag constants are recognised as \f(CW$flags\fR. Other flag constants may
exist as provided by the \s-1OS.\s0
.IP "\s-1NI_NUMERICHOST\s0" 4
.IX Item "NI_NUMERICHOST"
Requests that a human-readable string representation of the numeric address be
returned directly, rather than performing a name resolve operation that may
convert it into a hostname. This will also avoid potentially-blocking network
\&\s-1IO.\s0
.IP "\s-1NI_NUMERICSERV\s0" 4
.IX Item "NI_NUMERICSERV"
Requests that the port number be returned directly as a number representation
rather than performing a name resolve operation that may convert it into a
service name.
.IP "\s-1NI_NAMEREQD\s0" 4
.IX Item "NI_NAMEREQD"
If a name resolve operation fails to provide a name, then this flag will cause
\&\fIgetnameinfo()\fR to indicate an error, rather than returning the numeric
representation as a human-readable string.
.IP "\s-1NI_DGRAM\s0" 4
.IX Item "NI_DGRAM"
Indicates that the socket address relates to a \f(CW\*(C`SOCK_DGRAM\*(C'\fR socket, for the
services whose name differs between \s-1TCP\s0 and \s-1UDP\s0 protocols.
.PP
The following constants may be supplied as \f(CW$xflags\fR.
.IP "NIx_NOHOST" 4
.IX Item "NIx_NOHOST"
Indicates that the caller is not interested in the hostname of the result, so
it does not have to be converted. \f(CW\*(C`undef\*(C'\fR will be returned as the hostname.
.IP "NIx_NOSERV" 4
.IX Item "NIx_NOSERV"
Indicates that the caller is not interested in the service name of the result,
so it does not have to be converted. \f(CW\*(C`undef\*(C'\fR will be returned as the service
name.
.SH "\fIgetaddrinfo()\fP / \fIgetnameinfo()\fP ERROR CONSTANTS"
.IX Header "getaddrinfo() / getnameinfo() ERROR CONSTANTS"
The following constants may be returned by \fIgetaddrinfo()\fR or \fIgetnameinfo()\fR.
Others may be provided by the \s-1OS.\s0
.IP "\s-1EAI_AGAIN\s0" 4
.IX Item "EAI_AGAIN"
A temporary failure occurred during name resolution. The operation may be
successful if it is retried later.
.IP "\s-1EAI_BADFLAGS\s0" 4
.IX Item "EAI_BADFLAGS"
The value of the \f(CW\*(C`flags\*(C'\fR hint to \fIgetaddrinfo()\fR, or the \f(CW$flags\fR parameter to
\&\fIgetnameinfo()\fR contains unrecognised flags.
.IP "\s-1EAI_FAMILY\s0" 4
.IX Item "EAI_FAMILY"
The \f(CW\*(C`family\*(C'\fR hint to \fIgetaddrinfo()\fR, or the family of the socket address
passed to \fIgetnameinfo()\fR is not supported.
.IP "\s-1EAI_NODATA\s0" 4
.IX Item "EAI_NODATA"
The host name supplied to \fIgetaddrinfo()\fR did not provide any usable address
data.
.IP "\s-1EAI_NONAME\s0" 4
.IX Item "EAI_NONAME"
The host name supplied to \fIgetaddrinfo()\fR does not exist, or the address
supplied to \fIgetnameinfo()\fR is not associated with a host name and the
\&\f(CW\*(C`NI_NAMEREQD\*(C'\fR flag was supplied.
.IP "\s-1EAI_SERVICE\s0" 4
.IX Item "EAI_SERVICE"
The service name supplied to \fIgetaddrinfo()\fR is not available for the socket
type given in the \f(CW$hints\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Lookup for \fIconnect()\fP"
.IX Subsection "Lookup for connect()"
The \fIgetaddrinfo()\fR function converts a hostname and a service name into a list
of structures, each containing a potential way to \fIconnect()\fR to the named
service on the named host.
.PP
.Vb 2
\& use IO::Socket;
\& use Socket qw(SOCK_STREAM getaddrinfo);
\&
\& my %hints = (socktype => SOCK_STREAM);
\& my ($err, @res) = getaddrinfo("localhost", "echo", \e%hints);
\& die "Cannot getaddrinfo \- $err" if $err;
\&
\& my $sock;
\&
\& foreach my $ai (@res) {
\&     my $candidate = IO::Socket\->new();
\&
\&     $candidate\->socket($ai\->{family}, $ai\->{socktype}, $ai\->{protocol})
\&         or next;
\&
\&     $candidate\->connect($ai\->{addr})
\&         or next;
\&
\&     $sock = $candidate;
\&     last;
\& }
\&
\& die "Cannot connect to localhost:echo" unless $sock;
\&
\& $sock\->print("Hello, world!\en");
\& print <$sock>;
.Ve
.PP
Because a list of potential candidates is returned, the \f(CW\*(C`while\*(C'\fR loop tries
each in turn until it it finds one that succeeds both the \fIsocket()\fR and
\&\fIconnect()\fR calls.
.PP
This function performs the work of the legacy functions \fIgethostbyname()\fR,
\&\fIgetservbyname()\fR, \fIinet_aton()\fR and \fIpack_sockaddr_in()\fR.
.PP
In practice this logic is better performed by IO::Socket::IP.
.SS "Making a human-readable string out of an address"
.IX Subsection "Making a human-readable string out of an address"
The \fIgetnameinfo()\fR function converts a socket address, such as returned by
\&\fIgetsockname()\fR or \fIgetpeername()\fR, into a pair of human-readable strings
representing the address and service name.
.PP
.Vb 2
\& use IO::Socket::IP;
\& use Socket qw(getnameinfo);
\&
\& my $server = IO::Socket::IP\->new(LocalPort => 12345, Listen => 1) or
\&     die "Cannot listen \- $@";
\&
\& my $socket = $server\->accept or die "accept: $!";
\&
\& my ($err, $hostname, $servicename) = getnameinfo($socket\->peername);
\& die "Cannot getnameinfo \- $err" if $err;
\&
\& print "The peer is connected from $hostname\en";
.Ve
.PP
Since in this example only the hostname was used, the redundant conversion of
the port number into a service name may be omitted by passing the
\&\f(CW\*(C`NIx_NOSERV\*(C'\fR flag.
.PP
.Vb 1
\& use Socket qw(getnameinfo NIx_NOSERV);
\&
\& my ($err, $hostname) = getnameinfo($socket\->peername, 0, NIx_NOSERV);
.Ve
.PP
This function performs the work of the legacy functions \fIunpack_sockaddr_in()\fR,
\&\fIinet_ntoa()\fR, \fIgethostbyaddr()\fR and \fIgetservbyport()\fR.
.PP
In practice this logic is better performed by IO::Socket::IP.
.SS "Resolving hostnames into \s-1IP\s0 addresses"
.IX Subsection "Resolving hostnames into IP addresses"
To turn a hostname into a human-readable plain \s-1IP\s0 address use \fIgetaddrinfo()\fR
to turn the hostname into a list of socket structures, then \fIgetnameinfo()\fR on
each one to make it a readable \s-1IP\s0 address again.
.PP
.Vb 1
\& use Socket qw(:addrinfo SOCK_RAW);
\&
\& my ($err, @res) = getaddrinfo($hostname, "", {socktype => SOCK_RAW});
\& die "Cannot getaddrinfo \- $err" if $err;
\&
\& while( my $ai = shift @res ) {
\&     my ($err, $ipaddr) = getnameinfo($ai\->{addr}, NI_NUMERICHOST, NIx_NOSERV);
\&     die "Cannot getnameinfo \- $err" if $err;
\&
\&     print "$ipaddr\en";
\& }
.Ve
.PP
The \f(CW\*(C`socktype\*(C'\fR hint to \fIgetaddrinfo()\fR filters the results to only include one
socket type and protocol. Without this most OSes return three combinations,
for \f(CW\*(C`SOCK_STREAM\*(C'\fR, \f(CW\*(C`SOCK_DGRAM\*(C'\fR and \f(CW\*(C`SOCK_RAW\*(C'\fR, resulting in triplicate
output of addresses. The \f(CW\*(C`NI_NUMERICHOST\*(C'\fR flag to \fIgetnameinfo()\fR causes it to
return a string-formatted plain \s-1IP\s0 address, rather than reverse resolving it
back into a hostname.
.PP
This combination performs the work of the legacy functions \fIgethostbyname()\fR
and \fIinet_ntoa()\fR.
.SS "Accessing socket options"
.IX Subsection "Accessing socket options"
The many \f(CW\*(C`SO_*\*(C'\fR and other constants provide the socket option names for
\&\fIgetsockopt()\fR and \fIsetsockopt()\fR.
.PP
.Vb 2
\& use IO::Socket::INET;
\& use Socket qw(SOL_SOCKET SO_RCVBUF IPPROTO_IP IP_TTL);
\&
\& my $socket = IO::Socket::INET\->new(LocalPort => 0, Proto => \*(Aqudp\*(Aq)
\&     or die "Cannot create socket: $@";
\&
\& $socket\->setsockopt(SOL_SOCKET, SO_RCVBUF, 64*1024) or
\&     die "setsockopt: $!";
\&
\& print "Receive buffer is ", $socket\->getsockopt(SOL_SOCKET, SO_RCVBUF),
\&     " bytes\en";
\&
\& print "IP TTL is ", $socket\->getsockopt(IPPROTO_IP, IP_TTL), "\en";
.Ve
.PP
As a convenience, IO::Socket's \fIsetsockopt()\fR method will convert a number
into a packed byte buffer, and \fIgetsockopt()\fR will unpack a byte buffer of the
correct size back into a number.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was originally maintained in Perl core by the Perl 5 Porters.
.PP
It was extracted to dual-life on \s-1CPAN\s0 at version 1.95 by
Paul Evans <leonerd@leonerd.org.uk>
