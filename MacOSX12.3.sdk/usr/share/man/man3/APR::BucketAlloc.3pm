.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::BucketAlloc 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::BucketAlloc 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
APR::BucketAlloc \- Perl API for Bucket Allocation
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&  use APR::BucketAlloc ();
\&  $ba = APR::BucketAlloc\->new($pool);
\&  $ba\->destroy;
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`APR::BucketAlloc\*(C'\fR is used for bucket allocation.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
Create an \f(CW\*(C`APR::BucketAlloc\*(C'\fR object:
.PP
.Vb 1
\&  $ba = APR::BucketAlloc\->new($pool);
.Ve
.ie n .IP "class: ""APR::BucketAlloc""" 4
.el .IP "class: \f(CWAPR::BucketAlloc\fR" 4
.IX Item "class: APR::BucketAlloc"
.PD 0
.ie n .IP "arg1: $pool ( ""APR::Pool object"" )" 4
.el .IP "arg1: \f(CW$pool\fR ( \f(CWAPR::Pool object\fR )" 4
.IX Item "arg1: $pool ( APR::Pool object )"
.PD
The pool used to create this object.
.ie n .IP "ret: $ba ( ""APR::BucketAlloc object"" )" 4
.el .IP "ret: \f(CW$ba\fR ( \f(CWAPR::BucketAlloc object\fR )" 4
.IX Item "ret: $ba ( APR::BucketAlloc object )"
The new object.
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.PP
This bucket allocation list (freelist) is used to create new buckets
(via \f(CW\*(C`APR::Bucket\->new\*(C'\fR)
and bucket brigades (via
\&\f(CW\*(C`APR::Brigade\->new\*(C'\fR).
.PP
You only need to use this method if you aren't running under httpd.
If you are running under mod_perl, you already have a bucket
allocation available via
\&\f(CW\*(C`$c\->bucket_alloc\*(C'\fR
and
\&\f(CW\*(C`$bb\->bucket_alloc\*(C'\fR.
.PP
Example:
.PP
.Vb 4
\&  use APR::BucketAlloc ();
\&  use APR::Pool ();
\&  my $ba = APR::BucketAlloc\->(APR::Pool\->pool);
\&  my $eos_b = APR::Bucket::eos_create($ba);
.Ve
.ie n .SS """destroy"""
.el .SS "\f(CWdestroy\fP"
.IX Subsection "destroy"
Destroy an \f(CW\*(C`APR::BucketAlloc
object\*(C'\fR:
.PP
.Vb 1
\&  $ba\->destroy;
.Ve
.ie n .IP "arg1: $ba ( ""APR::BucketAlloc object"" )" 4
.el .IP "arg1: \f(CW$ba\fR ( \f(CWAPR::BucketAlloc object\fR )" 4
.IX Item "arg1: $ba ( APR::BucketAlloc object )"
The freelist to destroy.
.IP "ret: no return value" 4
.IX Item "ret: no return value"
.PD 0
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.PD
.PP
Once destroyed this object may not be used again.
.PP
You need to destroy \f(CW$ba\fR \fBonly\fR if you have created it via
\&\f(CW\*(C`APR::BucketAlloc\->new\*(C'\fR. If you try to destroy an
allocation not created by this method, you will get a segmentation
fault.
.PP
Moreover normally it is not necessary to destroy allocators, since the
pool which created them will destroy them during that pool's cleanup
phase.
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous
contributors.
