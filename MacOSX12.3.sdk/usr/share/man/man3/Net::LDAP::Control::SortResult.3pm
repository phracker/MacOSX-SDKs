.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control::SortResult 3"
.TH Net::LDAP::Control::SortResult 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control::SortResult \- Server Side Sort (SSS) result control object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::LDAP::Control::Sort;
\& use Net::LDAP::Constant qw(LDAP_CONTROL_SORTRESULT);
\& use Net::LDAP::Util qw(ldap_error_name);
\&
\& $sort = Net::LDAP::Control::Sort\->new(
\&   order => "cn \-age"
\& );
\&
\& $mesg = $ldap\->search( @args, control => [ $sort ]);
\&
\& ($resp) = $mesg\->control( LDAP_CONTROL_SORTRESULT );
\&
\& if ($resp) {
\&   if ($resp\->result) {
\&     my $attr = $resp\->attr;
\&     print "Problem sorting, ",ldap_error_name($resp\->result);
\&     print " ($attr)"  if $attr;
\&     print "\en";
\&   }
\&   else {
\&     print "Results are sorted\en";
\&   }
\& }
\& else {
\&   print "Server does not support sorting\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control::SortResult\*(C'\fR is a sub-class of
Net::LDAP::Control.  It provides a class for
manipulating the \s-1LDAP\s0 sort request control \f(CW1.2.840.113556.1.4.474\fR
as defined in \s-1RFC\-2891\s0
.PP
A sort result control will be returned by the server in response to
a search with a Server Side Sort control. If a sort result control is
not returned then the user may assume that the server does not support
sorting and the results are not sorted.
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
.IP "attr" 4
.IX Item "attr"
If \f(CW\*(C`result\*(C'\fR indicates that there was a problem with sorting and that problem was
due to one of the attributes specified in the sort control. \f(CW\*(C`attr\*(C'\fR is set to
the name of the attribute causing the problem.
.IP "result" 4
.IX Item "result"
This is the result code that describes if the sort operation was successful. If will
be one of the result codes describes below.
.SH "METHODS"
.IX Header "METHODS"
As with Net::LDAP::Control each constructor argument
described above is also available as a method on the object which will
return the current value for the attribute if called without an argument,
and set a new value for the attribute if called with an argument.
.SH "RESULT CODES"
.IX Header "RESULT CODES"
Possible results from a sort request are listed below. See Net::LDAP::Constant for
a definition of each.
.IP "\s-1LDAP_SUCCESS\s0" 4
.IX Item "LDAP_SUCCESS"
.PD 0
.IP "\s-1LDAP_OPERATIONS_ERROR\s0" 4
.IX Item "LDAP_OPERATIONS_ERROR"
.IP "\s-1LDAP_TIMELIMIT_EXCEEDED\s0" 4
.IX Item "LDAP_TIMELIMIT_EXCEEDED"
.IP "\s-1LDAP_STRONG_AUTH_REQUIRED\s0" 4
.IX Item "LDAP_STRONG_AUTH_REQUIRED"
.IP "\s-1LDAP_ADMIN_LIMIT_EXCEEDED\s0" 4
.IX Item "LDAP_ADMIN_LIMIT_EXCEEDED"
.IP "\s-1LDAP_NO_SUCH_ATTRIBUTE\s0" 4
.IX Item "LDAP_NO_SUCH_ATTRIBUTE"
.IP "\s-1LDAP_INAPPROPRIATE_MATCHING\s0" 4
.IX Item "LDAP_INAPPROPRIATE_MATCHING"
.IP "\s-1LDAP_INSUFFICIENT_ACCESS\s0" 4
.IX Item "LDAP_INSUFFICIENT_ACCESS"
.IP "\s-1LDAP_BUSY\s0" 4
.IX Item "LDAP_BUSY"
.IP "\s-1LDAP_UNWILLING_TO_PERFORM\s0" 4
.IX Item "LDAP_UNWILLING_TO_PERFORM"
.IP "\s-1LDAP_OTHER\s0" 4
.IX Item "LDAP_OTHER"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Control::Sort,
Net::LDAP::Control,
http://ww.ietf.org/rfc/rfc2891.txt
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
