.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::AuthenticationResults::Header::Base 3"
.TH Mail::AuthenticationResults::Header::Base 3 "2020-08-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::AuthenticationResults::Header::Base \- Base class for modelling parts of the Authentication Results Header
.SH "VERSION"
.IX Header "VERSION"
version 1.20200824.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Set of classes representing the various parts and sub parts of Authentication Results Headers.
.IP "\(bu" 4
Mail::AuthenticationResults::Header represents a complete Authentication Results Header set
.IP "\(bu" 4
Mail::AuthenticationResults::Header::AuthServID represents the AuthServID part of the set
.IP "\(bu" 4
Mail::AuthenticationResults::Header::Comment represents a comment
.IP "\(bu" 4
Mail::AuthenticationResults::Header::Entry represents a main entry
.IP "\(bu" 4
Mail::AuthenticationResults::Header::Group represents a group of parts, typically as a search result
.IP "\(bu" 4
Mail::AuthenticationResults::Header::SubEntry represents a sub entry part
.IP "\(bu" 4
Mail::AuthenticationResults::Header::Version represents a version part
.PP
.Vb 10
\&    Header
\&        AuthServID
\&            Version
\&            Comment
\&            SubEntry
\&        Entry
\&            Comment
\&        Entry
\&            Comment
\&            SubEntry
\&                Comment
\&        Entry
\&            SubEntry
\&            SubEntry
\&
\&    Group
\&        Entry
\&            Comment
\&        SubEntry
\&            Comment
\&        Entry
\&            SubEntry
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Return a new instance of this class
.ie n .SS "set_key( $key )"
.el .SS "set_key( \f(CW$key\fP )"
.IX Subsection "set_key( $key )"
Set the key for this instance.
.PP
Croaks if \f(CW$key\fR is invalid.
.SS "\fBkey()\fP"
.IX Subsection "key()"
Return the current key for this instance.
.PP
Croaks if this instance type can not have a key.
.ie n .SS "safe_set_value( $value )"
.el .SS "safe_set_value( \f(CW$value\fP )"
.IX Subsection "safe_set_value( $value )"
Set the value for this instance.
.PP
Munges the value to remove invalid characters before setting.
.PP
This method also removes some value characters when their inclusion
would be likely to break simple parsers.
.ie n .SS "set_value( $value )"
.el .SS "set_value( \f(CW$value\fP )"
.IX Subsection "set_value( $value )"
Set the value for this instance.
.PP
Croaks if the value contains invalid characters.
.SS "\fBvalue()\fP"
.IX Subsection "value()"
Returns the current value for this instance.
.ie n .SS "stringify( $value )"
.el .SS "stringify( \f(CW$value\fP )"
.IX Subsection "stringify( $value )"
Returns \f(CW$value\fR with stringify rules applied.
.SS "\fBchildren()\fP"
.IX Subsection "children()"
Returns a listref of this instances children.
.PP
Croaks if this instance type can not have children.
.SS "\fBorphan()\fP"
.IX Subsection "orphan()"
Removes the parent for this instance.
.PP
Croaks if this instance does not have a parent.
.ie n .SS "add_parent( $parent )"
.el .SS "add_parent( \f(CW$parent\fP )"
.IX Subsection "add_parent( $parent )"
Sets the parent for this instance to the supplied object.
.PP
Croaks if the relationship between \f(CW$parent\fR and \f(CW$self\fR is not valid.
.SS "\fBparent()\fP"
.IX Subsection "parent()"
Returns the parent object for this instance.
.ie n .SS "remove_child( $child )"
.el .SS "remove_child( \f(CW$child\fP )"
.IX Subsection "remove_child( $child )"
Removes \f(CW$child\fR as a child of this instance.
.PP
Croaks if the relationship between \f(CW$child\fR and \f(CW$self\fR is not valid.
.ie n .SS "add_child( $child )"
.el .SS "add_child( \f(CW$child\fP )"
.IX Subsection "add_child( $child )"
Adds \f(CW$child\fR as a child of this instance.
.PP
Croaks if the relationship between \f(CW$child\fR and \f(CW$self\fR is not valid.
.SS "\fBancestor()\fP"
.IX Subsection "ancestor()"
Returns the top Header object and depth of this child
.ie n .SS "as_string_prefix( $header )"
.el .SS "as_string_prefix( \f(CW$header\fP )"
.IX Subsection "as_string_prefix( $header )"
Add the prefix to as_string for this object when calledas a child
of another objects as_string method call.
.SS "\fBas_json()\fP"
.IX Subsection "as_json()"
Return this instance as a \s-1JSON\s0 serialised string
.SS "\fBas_string()\fP"
.IX Subsection "as_string()"
Returns this instance as a string.
.ie n .SS "build_string( $header )"
.el .SS "build_string( \f(CW$header\fP )"
.IX Subsection "build_string( $header )"
Build a string using the supplied Mail::AuthenticationResults::FoldableHeader object.
.ie n .SS "search( $search )"
.el .SS "search( \f(CW$search\fP )"
.IX Subsection "search( $search )"
Apply search rules in \f(CW$search\fR to this instance and return a
Mail::AuthenticationResults::Header::Group object containing the matches.
.PP
\&\f(CW$search\fR is a \s-1HASHREF\s0 with the following possible key/value pairs
.IP "key" 4
.IX Item "key"
Match if the instance key matches the supplied value (string or regex)
.IP "value" 4
.IX Item "value"
Match if the instance value matches the supplied value (string or regex)
.IP "isa" 4
.IX Item "isa"
Match is the instance class typs matches the supplied value. This is a lowercase version
of the class type, (comment,entry,subentry,etc))
.IP "has" 4
.IX Item "has"
An arrayref of searches, match this class if the supplied search queries would return at
least 1 result each
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
