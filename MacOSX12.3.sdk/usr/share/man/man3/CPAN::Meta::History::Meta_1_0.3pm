.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN::Meta::History::Meta_1_0 3pm"
.TH CPAN::Meta::History::Meta_1_0 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Meta::History::Meta_1_0 \- Version 1.0 metadata specification for META.yml
.SH "PREFACE"
.IX Header "PREFACE"
This is a historical copy of the version 1.0 specification for \fI\s-1META\s0.yml\fR
files, copyright by Ken Williams and licensed under the same terms as Perl
itself.
.PP
Modifications from the original:
.IP "\(bu" 4
Conversion from the original \s-1HTML\s0 to \s-1POD\s0 format
.IP "\(bu" 4
Include list of valid licenses from Module::Build 0.17 rather than
linking to the module, with minor updates to text and links to reflect
versions at the time of publication.
.IP "\(bu" 4
Fixed some dead links to point to active resources.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes version 1.0 of the \fI\s-1META\s0.yml\fR specification.
.PP
The \s-1META\s0.yml file describes important properties of contributed Perl
distributions such as the ones found on \s-1CPAN\s0 <http://www.cpan.org>.  It is
typically created by tools like Module::Build and ExtUtils::MakeMaker.
.PP
The fields in the \fI\s-1META\s0.yml\fR file are meant to be helpful to people
maintaining module collections (like \s-1CPAN\s0), for people writing
installation tools (like \s-1CPAN\s0 or \s-1CPANPLUS\s0), or just people who want to
know some stuff about a distribution before downloading it and starting to
install it.
.SH "Format"
.IX Header "Format"
\&\fI\s-1META\s0.yml\fR files are written in the \s-1YAML\s0 <http://www.yaml.org/> format.  The
reasons we chose \s-1YAML\s0 instead of, say, \s-1XML\s0 or Data::Dumper are discussed in
this thread <http://www.nntp.perl.org/group/perl.makemaker/2002/04/msg406.html>
on the MakeMaker mailing list.
.PP
The first line of a \fI\s-1META\s0.yml\fR file should be a valid
\&\s-1YAML\s0 document header <http://yaml.org/spec/history/2002-10-31.html#syntax-document>
like \f(CW"\-\-\- #YAML:1.0"\fR
.SH "Fields"
.IX Header "Fields"
The rest of the \s-1META\s0.yml file is one big \s-1YAML\s0
mapping <http://yaml.org/spec/history/2002-10-31.html#syntax-mapping>,
whose keys are described here.
.IP "name" 4
.IX Item "name"
Example: \f(CW\*(C`Module\-Build\*(C'\fR
.Sp
The name of the distribution.  Often created by taking the \*(L"main
module\*(R" in the distribution and changing \*(L"::\*(R" to \*(L"\-\*(R".  Sometimes it's
completely different, however, as in the case of the
libwww-perl <http://search.cpan.org/author/GAAS/libwww-perl/> distribution.
.IP "version" 4
.IX Item "version"
Example: \f(CW0.16\fR
.Sp
The version of the distribution to which the \s-1META\s0.yml file refers.
.IP "license" 4
.IX Item "license"
Example: \f(CW\*(C`perl\*(C'\fR
.Sp
The license under which this distribution may be used and
redistributed.
.Sp
Must be one of the following licenses:
.RS 4
.IP "perl" 4
.IX Item "perl"
The distribution may be copied and redistributed under the same terms as perl
itself (this is by far the most common licensing option for modules on \s-1CPAN\s0).
This is a dual license, in which the user may choose between either the \s-1GPL\s0
version 1 or the Artistic version 1 license.
.IP "gpl" 4
.IX Item "gpl"
The distribution is distributed under the terms of the \s-1GNU\s0 General Public
License version 2 (<http://opensource.org/licenses/GPL\-2.0>).
.IP "lgpl" 4
.IX Item "lgpl"
The distribution is distributed under the terms of the \s-1GNU\s0 Lesser General
Public License version 2 (<http://opensource.org/licenses/LGPL\-2.1>).
.IP "artistic" 4
.IX Item "artistic"
The distribution is licensed under the Artistic License version 1, as specified
by the Artistic file in the standard perl distribution
(<http://opensource.org/licenses/Artistic\-Perl\-1.0>).
.IP "bsd" 4
.IX Item "bsd"
The distribution is licensed under the \s-1BSD\s0 3\-Clause License
(<http://opensource.org/licenses/BSD\-3\-Clause>).
.IP "open_source" 4
.IX Item "open_source"
The distribution is licensed under some other Open Source Initiative-approved
license listed at <http://www.opensource.org/licenses/>.
.IP "unrestricted" 4
.IX Item "unrestricted"
The distribution is licensed under a license that is \fBnot\fR approved by
www.opensource.org <http://www.opensource.org/> but that allows distribution
without restrictions.
.IP "restrictive" 4
.IX Item "restrictive"
The distribution may not be redistributed without special permission from the
author and/or copyright holder.
.RE
.RS 4
.RE
.IP "distribution_type" 4
.IX Item "distribution_type"
Example: \f(CW\*(C`module\*(C'\fR
.Sp
What kind of stuff is contained in this distribution.  Most things on
\&\s-1CPAN\s0 are \f(CW\*(C`module\*(C'\fRs (which can also mean a collection of
modules), but some things are \f(CW\*(C`script\*(C'\fRs.
.IP "requires" 4
.IX Item "requires"
Example:
.Sp
.Vb 2
\&  Data::Dumper: 0
\&  File::Find: 1.03
.Ve
.Sp
A \s-1YAML\s0 mapping <http://yaml.org/spec/history/2002-10-31.html#syntax-mapping>
indicating the Perl modules this distribution requires for proper
operation.  The keys are the module names, and the values are version
specifications as described in the
documentation for Module::Build's \*(L"requires\*(R" parameter.
.Sp
\&\fINote: the exact nature of the fancy specifications like
\&\f(CI">= 1.2, != 1.5, < 2.0"\fI is subject to
change.  Advance notice will be given here.  The simple specifications
like \f(CI"1.2"\fI will not change in format.\fR
.IP "recommends" 4
.IX Item "recommends"
Example:
.Sp
.Vb 2
\&  Data::Dumper: 0
\&  File::Find: 1.03
.Ve
.Sp
A \s-1YAML\s0 mapping <http://yaml.org/spec/history/2002-10-31.html#syntax-mapping>
indicating the Perl modules this distribution recommends for enhanced
operation.
.IP "build_requires" 4
.IX Item "build_requires"
Example:
.Sp
.Vb 2
\&  Data::Dumper: 0
\&  File::Find: 1.03
.Ve
.Sp
A \s-1YAML\s0 mapping <http://yaml.org/spec/history/2002-10-31.html#syntax-mapping>
indicating the Perl modules required for building and/or testing of
this distribution.  These dependencies are not required after the
module is installed.
.IP "conflicts" 4
.IX Item "conflicts"
Example:
.Sp
.Vb 2
\&  Data::Dumper: 0
\&  File::Find: 1.03
.Ve
.Sp
A \s-1YAML\s0 mapping <http://yaml.org/spec/history/2002-10-31.html#syntax-mapping>
indicating the Perl modules that cannot be installed while this
distribution is installed.  This is a pretty uncommon situation.
.IP "dynamic_config" 4
.IX Item "dynamic_config"
Example: \f(CW0\fR
.Sp
A boolean flag indicating whether a \fIBuild.PL\fR or
\&\fIMakefile.PL\fR (or similar) must be executed, or whether this
module can be built, tested and installed solely from consulting its
metadata file.  The main reason to set this to a true value if that
your module performs some dynamic configuration (asking questions,
sensing the environment, etc.) as part of its build/install process.
.Sp
Currently Module::Build doesn't actually do anything with
this flag \- it's probably going to be up to higher-level tools like
\&\s-1CPAN\s0.pm to do something useful with it.  It can potentially
bring lots of security, packaging, and convenience improvements.
.IP "generated_by" 4
.IX Item "generated_by"
Example: \f(CW\*(C`Module::Build version 0.16\*(C'\fR
.Sp
Indicates the tool that was used to create this \fI\s-1META\s0.yml\fR file.  It's
good form to include both the name of the tool and its version, but
this field is essentially opaque, at least for the moment.
.SH "Related Projects"
.IX Header "Related Projects"
.IP "\s-1DOAP\s0" 4
.IX Item "DOAP"
An \s-1RDF\s0 vocabulary to describe software projects. <http://usefulinc.com/doap>.
.SH "History"
.IX Header "History"
.IP "\(bu" 4
\&\fBMarch 14, 2003\fR (Pi day) \- created version 1.0 of this document.
.IP "\(bu" 4
\&\fBMay 8, 2003\fR \- added the \*(L"dynamic_config\*(R" field, which was missing from the
initial version.
