.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control::PostRead 3"
.TH Net::LDAP::Control::PostRead 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control::PostRead \- LDAPv3 Post\-Read control object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::LDAP;
\& use Net::LDAP::Control::PostRead;
\& use Net::LDAP::Constant qw( LDAP_CONTROL_POSTREAD LDAP_SUCCESS );
\&
\& $ldap = Net::LDAP\->new( "ldap.mydomain.eg" );
\&
\& $postread = Net::LDAP::Control::PostRead\->new( attrs => [ qw/givenName/ ] );
\&
\& my $mesg = $ldap\->modify( "cn=Barbara Jensen, o=University of Michigan, c=US",
\&                           replace => { givenName => "Babs" },
\&                           control => $postread );
\&
\& if ($mesg\->code eq LDAP_SUCCESS) {
\&   my ($afterwards) = $mesg\->control( LDAP_CONTROL_PREREAD );
\&   my $entry = $afterwards ? $afterwards\->entry() : undef;
\&
\&   if ($entry) {
\&     print "givenName changed to \*(Aq" .
\&           join("\*(Aq, \*(Aq", $entry\->get_value(givenName") .
\&           "\*(Aq to \*(AqBabs\*(Aq\en");
\&   }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control::PostRead\*(C'\fR provides an interface for the creation and
manipulation of objects that represent the \f(CW\*(C`Post\-Read Controls\*(C'\fR as described
by \s-1RFC 4527.\s0
.PP
In modification operations, the \f(CW\*(C`Post\-Read request control\*(C'\fR indicates to the
server that a copy of the modified entry after the update is to be returned.
After the successful completion of the operation, the accompanying \f(CW\*(C`Post\-Read
response control\*(C'\fR allows one to retrieve the updated value from the server's response.
.PP
One use case of this control may be to obtain values of operational attributes,
such as the \f(CW\*(C`entryUUID\*(C'\fR and \f(CW\*(C`modifyTimestamp\*(C'\fR attributes, updated by the server
as part of the update operation.
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
In addition to the constructor arguments described in
Net::LDAP::Control the following are provided.
.IP "attrs => [ \s-1ATTR, ...\s0 ]" 4
.IX Item "attrs => [ ATTR, ... ]"
A list of attributes to be returned in the entry returned in the response control.
.Sp
If absent, all attributes are returned.
.Sp
Operational attributes may be included in the list by explicitly asking for them
or by using special \f(CW"+"\fR feature (provided the server supports this feature).
.SH "METHODS"
.IX Header "METHODS"
As with Net::LDAP::Control each constructor argument
described above is also available as a method on the object which will
return the current value for the attribute if called without an argument,
and set a new value for the attribute if called with an argument.
.PP
In addition to these methods, the control also supports the following method:
.IP "entry ()" 4
.IX Item "entry ()"
Returns the entry from the response control in the response message
to the \s-1LDAP\s0 request that contained the request control.
.Sp
The result is either a Net::LDAP::Entry object or undefined.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Control,
http://www.ietf.org/rfc/rfc4527.txt
.SH "AUTHOR"
.IX Header "AUTHOR"
Peter Marschall <peter@adpm.de>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008,2011 Peter Marschall. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
