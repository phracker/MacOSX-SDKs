.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Legacy::Debugging_BaseClassReplacement 3"
.TH Moose::Cookbook::Legacy::Debugging_BaseClassReplacement 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Legacy::Debugging_BaseClassReplacement \- Providing an alternate base object class
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyApp::Base;
\&  use Moose;
\&
\&  extends \*(AqMoose::Object\*(Aq;
\&
\&  before \*(Aqnew\*(Aq => sub { warn "Making a new " . $_[0] };
\&
\&  no Moose;
\&
\&  package MyApp::UseMyBase;
\&  use Moose ();
\&  use Moose::Exporter;
\&
\&  Moose::Exporter\->setup_import_methods( also => \*(AqMoose\*(Aq );
\&
\&  sub init_meta {
\&      shift;
\&      return Moose\->init_meta( @_, base_class => \*(AqMyApp::Base\*(Aq );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING:\s0 Replacing the base class entirely, as opposed to applying roles to
the base class, is strongly discouraged. This recipe is provided solely for
reference when encountering older code that does this.\fR
.PP
A common extension is to provide an alternate base class. One way to
do that is to make a \f(CW\*(C`MyApp::Base\*(C'\fR and add \f(CW\*(C`extends \*(AqMyApp::Base\*(Aq\*(C'\fR to every class in your application. That's pretty
tedious. Instead, you can create a Moose-alike module that sets the
base object class to \f(CW\*(C`MyApp::Base\*(C'\fR for you.
.PP
Then, instead of writing \f(CW\*(C`use Moose\*(C'\fR you can write \f(CW\*(C`use MyApp::UseMyBase\*(C'\fR.
.PP
In this particular example, our base class issues some debugging
output every time a new object is created, but you can think of some
more interesting things to do with your own base class.
.PP
This uses the magic of Moose::Exporter. When we call \f(CW\*(C`Moose::Exporter\->setup_import_methods( also => \*(AqMoose\*(Aq )\*(C'\fR it builds
\&\f(CW\*(C`import\*(C'\fR and \f(CW\*(C`unimport\*(C'\fR methods for you. The \f(CW\*(C`also => \*(AqMoose\*(Aq\*(C'\fR
bit says that we want to export everything that Moose does.
.PP
The \f(CW\*(C`import\*(C'\fR method that gets created will call our \f(CW\*(C`init_meta\*(C'\fR
method, passing it \f(CW\*(C`for_caller => $caller\*(C'\fR as its
arguments. The \f(CW$caller\fR is set to the class that actually imported
us in the first place.
.PP
See the Moose::Exporter docs for more details on its \s-1API.\s0
.SH "USING MyApp::UseMyBase"
.IX Header "USING MyApp::UseMyBase"
To actually use our new base class, we simply use \f(CW\*(C`MyApp::UseMyBase\*(C'\fR
\&\fIinstead\fR of \f(CW\*(C`Moose\*(C'\fR. We get all the Moose sugar plus our new base
class.
.PP
.Vb 1
\&  package Foo;
\&
\&  use MyApp::UseMyBase;
\&
\&  has \*(Aqsize\*(Aq => ( is => \*(Aqrw\*(Aq );
\&
\&  no MyApp::UseMyBase;
.Ve
.SH "CONCLUSION"
.IX Header "CONCLUSION"
This is an awful lot of magic for a simple base class. You will often
want to combine a metaclass trait with a base class extension, and
that's when this technique is useful.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
