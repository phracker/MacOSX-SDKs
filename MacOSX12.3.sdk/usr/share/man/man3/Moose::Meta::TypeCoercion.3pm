.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Meta::TypeCoercion 3"
.TH Moose::Meta::TypeCoercion 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Meta::TypeCoercion \- The Moose Type Coercion metaclass
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A type coercion object is basically a mapping of one or more type
constraints and the associated coercions subroutines.
.PP
It's unlikely that you will need to instantiate an object of this
class directly, as it's part of the deep internals of Moose.
.SH "METHODS"
.IX Header "METHODS"
.SS "Moose::Meta::TypeCoercion\->new(%options)"
.IX Subsection "Moose::Meta::TypeCoercion->new(%options)"
Creates a new type coercion object, based on the options provided.
.IP "\(bu" 4
type_constraint
.Sp
This is the Moose::Meta::TypeConstraint object for the type that is
being coerced \fIto\fR.
.ie n .SS "$coercion\->type_coercion_map"
.el .SS "\f(CW$coercion\fP\->type_coercion_map"
.IX Subsection "$coercion->type_coercion_map"
This returns the map of type constraints to coercions as an array
reference. The values of the array alternate between type names and
subroutine references which implement the coercion.
.PP
The value is an array reference because coercions are tried in the
order they are added.
.ie n .SS "$coercion\->type_constraint"
.el .SS "\f(CW$coercion\fP\->type_constraint"
.IX Subsection "$coercion->type_constraint"
This returns the Moose::Meta::TypeConstraint that was passed to the
constructor.
.ie n .SS "$coercion\->has_coercion_for_type($type_name)"
.el .SS "\f(CW$coercion\fP\->has_coercion_for_type($type_name)"
.IX Subsection "$coercion->has_coercion_for_type($type_name)"
Returns true if the coercion can coerce the named type.
.ie n .SS "$coercion\->add_type_coercions( $type_name => $sub, ... )"
.el .SS "\f(CW$coercion\fP\->add_type_coercions( \f(CW$type_name\fP => \f(CW$sub\fP, ... )"
.IX Subsection "$coercion->add_type_coercions( $type_name => $sub, ... )"
This method takes a list of type names and subroutine references. If
the coercion already has a mapping for a given type, it throws an
exception.
.PP
Coercions are actually
.ie n .SS "$coercion\->coerce($value)"
.el .SS "\f(CW$coercion\fP\->coerce($value)"
.IX Subsection "$coercion->coerce($value)"
This method takes a value and applies the first valid coercion it
finds.
.PP
This means that if the value could belong to more than type in the
coercion object, the first coercion added is used.
.SS "Moose::Meta::TypeCoercion\->meta"
.IX Subsection "Moose::Meta::TypeCoercion->meta"
This will return a Class::MOP::Class instance for this class.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
