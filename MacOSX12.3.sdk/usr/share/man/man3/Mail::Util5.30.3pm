.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Util 3"
.TH Mail::Util 3 "2019-05-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Util \- mail utility functions
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Util
\&   is a Exporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mail::Util qw( ... );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides several mail related utility functions. Any function
required must by explicitly listed on the use line to be exported into
the calling package.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBmailaddress\fR( [$address] )" 4
.IX Item "mailaddress( [$address] )"
Return a guess at the current users mail address. The user can force
the return value by setting the \s-1MAILADDRESS\s0 environment variable.
[2.10] You may set the \f(CW$address\fR via the parameter.
.Sp
\&\s-1WARNING:\s0
When not supplied via the environment variable, <mailaddress> looks at
various configuration files and other environmental data. Although this
seems to be smart behavior, this is not predictable enough (\s-1IMHO\s0) to
be used.  Please set the \s-1MAILADDRESS\s0 explicitly, and do not trust on
the \*(L"automatic detection\*(R", even when that produces a correct address
(on the moment)
.Sp
example:
.Sp
.Vb 2
\& # in your main script
\& $ENV{MAILADDRESS} = \*(Aqme@example.com\*(Aq;
\&
\& # everywhere else
\& use Mail::Util \*(Aqmailaddress\*(Aq;
\& print mailaddress;
\&
\& # since v2.10
\& mailaddress "me@example.com";
.Ve
.IP "\fBmaildomain\fR()" 4
.IX Item "maildomain()"
Attempt to determine the current user mail domain string via the following
methods
.RS 4
.IP "\(bu" 4
Look for the \s-1MAILDOMAIN\s0 environment variable, which can be set from outside the program.  This is by far the best way to configure the domain.
.IP "\(bu" 4
Look for a sendmail.cf file and extract \s-1DH\s0 parameter
.IP "\(bu" 4
Look for a smail config file and usr the first host defined in hostname(s)
.IP "\(bu" 4
Try an \s-1SMTP\s0 connect (if Net::SMTP exists) first to mailhost then localhost
.IP "\(bu" 4
Use value from Net::Domain::domainname (if Net::Domain exists)
.RE
.RS 4
.Sp
\&\s-1WARNING:\s0
On modern machines, there is only one good way to provide information to
this method: the first; always explicitly configure the \s-1MAILDOMAIN.\s0
.Sp
example:
.Sp
.Vb 2
\& # in your main script
\& $ENV{MAILDOMAIN} = \*(Aqexample.com\*(Aq;
\&
\& # everywhere else
\& use Mail::Util \*(Aqmaildomain\*(Aq;
\& print maildomain;
.Ve
.RE
.IP "\fBread_mbox\fR($file)" 4
.IX Item "read_mbox($file)"
Read \f(CW$file\fR, a binmail mailbox file, and return a list of  references.
Each reference is a reference to an array containing one message.
.Sp
\&\s-1WARNING:\s0
This method does not quote lines which accidentally also start with the
message separator \f(CW\*(C`From\*(C'\fR, so this implementation can be considered
broken.  See Mail::Box::Mbox
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2017 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
