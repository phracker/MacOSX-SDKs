.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTIPS 1"
.TH PERLHACKTIPS 1 "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktips \- Tips for Perl core C code hacking
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document will help you learn the best way to go about hacking on
the Perl core C code. It covers common problems, debugging, profiling,
and more.
.PP
If you haven't read perlhack and perlhacktut yet, you might want
to do that first.
.SH "COMMON PROBLEMS"
.IX Header "COMMON PROBLEMS"
Perl source plays by \s-1ANSI C89\s0 rules: no C99 (or \*(C+) extensions. In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl? I
hear there is still a strong demand for J2EE programmers.
.SS "Perl environment problems"
.IX Subsection "Perl environment problems"
.IP "\(bu" 4
Not compiling with threading
.Sp
Compiling with threading (\-Duseithreads) completely rewrites the
function prototypes of Perl. You better try your changes with that.
Related to this is the difference between \*(L"Perl_\-less\*(R" and \*(L"Perl_\-ly\*(R"
APIs, for example:
.Sp
.Vb 2
\&  Perl_sv_setiv(aTHX_ ...);
\&  sv_setiv(...);
.Ve
.Sp
The first one explicitly passes in the context, which is needed for
e.g. threaded builds. The second one does that implicitly; do not get
them mixed. If you are not passing in a aTHX_, you will need to do a
dTHX (or a dVAR) as the first thing in the function.
.Sp
See \*(L"How multiple interpreters and concurrency are
supported\*(R" in perlguts for further discussion about context.
.IP "\(bu" 4
Not compiling with \-DDEBUGGING
.Sp
The \s-1DEBUGGING\s0 define exposes more code to the compiler, therefore more
ways for things to go wrong. You should try it.
.IP "\(bu" 4
Introducing (non-read-only) globals
.Sp
Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency. The right way is to introduce them as new interpreter
variables, see \fIintrpvar.h\fR (at the very end for binary
compatibility).
.Sp
Introducing read-only (const) globals is okay, as long as you verify
with e.g. \f(CW\*(C`nm libperl.a|egrep \-v \*(Aq [TURtr] \*(Aq\*(C'\fR (if your \f(CW\*(C`nm\*(C'\fR has
BSD-style output) that the data you added really is read-only. (If it
is, it shouldn't show up in the output of that command.)
.Sp
If you want to have static strings, make them constant:
.Sp
.Vb 1
\&  static const char etc[] = "...";
.Ve
.Sp
If you want to have arrays of constant strings, note carefully the
right combination of \f(CW\*(C`const\*(C'\fRs:
.Sp
.Vb 2
\&    static const char * const yippee[] =
\&        {"hi", "ho", "silver"};
.Ve
.Sp
There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting
\&\f(CW\*(C`\-DPERL_GLOBAL_STRUCT_PRIVATE\*(C'\fR. It is not normally used, but can be
used for testing, read more about it in \*(L"Background and
\&\s-1PERL_IMPLICIT_CONTEXT\*(R"\s0 in perlguts.
.IP "\(bu" 4
Not exporting your new function
.Sp
Some platforms (Win32, \s-1AIX, VMS, OS/2,\s0 to name a few) require any
function that is part of the public \s-1API \s0(the shared Perl library) to be
explicitly marked as exported. See the discussion about \fIembed.pl\fR in
perlguts.
.IP "\(bu" 4
Exporting your new function
.Sp
The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported. So what could
possibly go wrong?
.Sp
Maybe simply that your function did not need to be exported in the
first place. Perl has a long and not so glorious history of exporting
functions that it should not have.
.Sp
If the function is used only inside one source code file, make it
static. See the discussion about \fIembed.pl\fR in perlguts.
.Sp
If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not export
it to the public \s-1API.\s0 See the discussion about \fIembed.pl\fR in
perlguts.
.SS "Portability problems"
.IX Subsection "Portability problems"
The following are common causes of compilation and/or execution
failures, not common to Perl as such. The C \s-1FAQ\s0 is good bedtime
reading. Please test your changes with as many C compilers and
platforms as possible; we will, anyway, and it's nice to save oneself
from public embarrassment.
.PP
If using gcc, you can add the \f(CW\*(C`\-std=c89\*(C'\fR option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)
.PP
Use the Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR flag to enable the gcc \f(CW\*(C`\-ansi
\&\-pedantic\*(C'\fR flags which enforce stricter \s-1ANSI\s0 rules.
.PP
If using the \f(CW\*(C`gcc \-Wall\*(C'\fR note that not all the possible warnings (like
\&\f(CW\*(C`\-Wunitialized\*(C'\fR) are given unless you also compile with \f(CW\*(C`\-O\*(C'\fR.
.PP
Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled with
as many as possible of the \f(CW\*(C`\-std=c89\*(C'\fR, \f(CW\*(C`\-ansi\*(C'\fR, \f(CW\*(C`\-pedantic\*(C'\fR, and a
selection of \f(CW\*(C`\-W\*(C'\fR flags (see cflags.SH).
.PP
Also study perlport carefully to avoid any bad assumptions about the
operating system, filesystems, and so forth.
.PP
You may once in a while try a \*(L"make microperl\*(R" to see whether we can
still compile Perl with just the bare minimum of interfaces. (See
\&\s-1README\s0.micro.)
.PP
Do not assume an operating system indicates a certain compiler.
.IP "\(bu" 4
Casting pointers to integers or casting integers to pointers
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = p;
.Ve
.Sp
or
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = (IV)p;
.Ve
.Sp
Both are bad, and broken, and unportable. Use the \s-1\fIPTR2IV\s0()\fR macro that
does it right. (Likewise, there are \s-1\fIPTR2UV\s0()\fR, \s-1\fIPTR2NV\s0()\fR, \s-1\fIINT2PTR\s0()\fR, and
\&\s-1\fINUM2PTR\s0()\fR.)
.IP "\(bu" 4
Casting between data function pointers and data pointers
.Sp
Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking it seems
to work, but you should use the \s-1\fIFPTR2DPTR\s0()\fR and \s-1\fIDPTR2FPTR\s0()\fR macros.
Sometimes you can also play games with unions.
.IP "\(bu" 4
Assuming sizeof(int) == sizeof(long)
.Sp
There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits. This is all legal according to the C standard. (In
other words, \*(L"long long\*(R" is not a portable way to specify 64 bits, and
\&\*(L"long long\*(R" is not even guaranteed to be any wider than \*(L"long\*(R".)
.Sp
Instead, use the definitions \s-1IV, UV, IVSIZE, I32SIZE,\s0 and so forth.
Avoid things like I32 because they are \fBnot\fR guaranteed to be
\&\fIexactly\fR 32 bits, they are \fIat least\fR 32 bits, nor are they
guaranteed to be \fBint\fR or \fBlong\fR. If you really explicitly need
64\-bit variables, use I64 and U64, but only if guarded by \s-1HAS_QUAD.\s0
.IP "\(bu" 4
Assuming one can dereference any type of pointer for any type of data
.Sp
.Vb 2
\&  char *p = ...;
\&  long pony = *p;    /* BAD */
.Ve
.Sp
Many platforms, quite rightly so, will give you a core dump instead of
a pony if the p happens not to be correctly aligned.
.IP "\(bu" 4
Lvalue casts
.Sp
.Vb 1
\&  (int)*p = ...;    /* BAD */
.Ve
.Sp
Simply not portable. Get your lvalue to be of the right type, or maybe
use temporary variables, or dirty tricks with unions.
.IP "\(bu" 4
Assume \fBanything\fR about structs (especially the ones you don't
control, like the ones coming from the system headers)
.RS 4
.IP "\(bu" 8
That a certain field exists in a struct
.IP "\(bu" 8
That no other fields exist besides the ones you know of
.IP "\(bu" 8
That a field is of certain signedness, sizeof, or type
.IP "\(bu" 8
That the fields are in a certain order
.RS 8
.IP "\(bu" 8
While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ
.RE
.RS 8
.RE
.IP "\(bu" 8
That the sizeof(struct) or the alignments are the same everywhere
.RS 8
.IP "\(bu" 8
There might be padding bytes between the fields to align the fields \-
the bytes can be anything
.IP "\(bu" 8
Structs are required to be aligned to the maximum alignment required by
the fields \- which for native types is for usually equivalent to
\&\fIsizeof()\fR of the field
.RE
.RS 8
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
Assuming the character set is ASCIIish
.Sp
Perl can compile and run under \s-1EBCDIC\s0 platforms. See perlebcdic.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters. You can safely say 'A', but not 0x41. You can
safely say '\en', but not \e012. If a character doesn't have a trivial
input form, you should add it to the list in
\&\fIregen/unicode_constants.pl\fR, and have Perl create #defines for you,
based on the current platform.
.Sp
Also, the range 'A' \- 'Z' in \s-1ASCII\s0 is an unbroken sequence of 26 upper
case alphabetic characters. That is not true in \s-1EBCDIC.\s0 Nor for 'a' to
\&'z'. But '0' \- '9' is an unbroken range in both systems. Don't assume
anything about other ranges.
.Sp
Many of the comments in the existing code ignore the possibility of
\&\s-1EBCDIC,\s0 and may be wrong therefore, even if the code works. This is
actually a tribute to the successful transparent insertion of being
able to handle \s-1EBCDIC\s0 without having to change pre-existing code.
.Sp
\&\s-1UTF\-8\s0 and UTF-EBCDIC are two different encodings used to represent
Unicode code points as sequences of bytes. Macros  with the same names
(but different definitions) in \f(CW\*(C`utf8.h\*(C'\fR and \f(CW\*(C`utfebcdic.h\*(C'\fR are used to
allow the calling code to think that there is only one such encoding.
This is almost always referred to as \f(CW\*(C`utf8\*(C'\fR, but it means the \s-1EBCDIC\s0
version as well. Again, comments in the code may well be wrong even if
the code itself is right. For example, the concept of \f(CW\*(C`invariant
characters\*(C'\fR differs between \s-1ASCII\s0 and \s-1EBCDIC.\s0 On \s-1ASCII\s0 platforms, only
characters that do not have the high-order bit set (i.e. whose ordinals
are strict \s-1ASCII, 0 \- 127\s0) are invariant, and the documentation and
comments in the code may assume that, often referring to something
like, say, \f(CW\*(C`hibit\*(C'\fR. The situation differs and is not so simple on
\&\s-1EBCDIC\s0 machines, but as long as the code itself uses the
\&\f(CW\*(C`NATIVE_IS_INVARIANT()\*(C'\fR macro appropriately, it works, even if the
comments are wrong.
.IP "\(bu" 4
Assuming the character set is just \s-1ASCII\s0
.Sp
\&\s-1ASCII\s0 is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra
characters have different meanings depending on the locale.  Absent a
locale, currently these extra characters are generally considered to be
unassigned, and this has presented some problems. This is being changed
starting in 5.12 so that these characters will be considered to be
Latin\-1 (\s-1ISO\-8859\-1\s0).
.IP "\(bu" 4
Mixing #define and #ifdef
.Sp
.Vb 6
\&  #define BURGLE(x) ... \e
\&  #ifdef BURGLE_OLD_STYLE        /* BAD */
\&  ... do it the old way ... \e
\&  #else
\&  ... do it the new way ... \e
\&  #endif
.Ve
.Sp
You cannot portably \*(L"stack\*(R" cpp directives. For example in the above
you need two separate \s-1\fIBURGLE\s0()\fR #defines, one for each #ifdef branch.
.IP "\(bu" 4
Adding non-comment stuff after #endif or #else
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else !SNOSH    /* BAD */
\&  ...
\&  #endif SNOSH    /* BAD */
.Ve
.Sp
The #endif and #else cannot portably have anything non-comment after
them. If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else /* !SNOSH */
\&  ...
\&  #endif /* SNOSH */
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wendif\-labels\*(C'\fR warns about the bad variant (by
default on starting from Perl 5.9.4).
.IP "\(bu" 4
Having a comma after the last element of an enum list
.Sp
.Vb 5
\&  enum color {
\&    CERULEAN,
\&    CHARTREUSE,
\&    CINNABAR,     /* BAD */
\&  };
.Ve
.Sp
is not portable. Leave out the last comma.
.Sp
Also note that whether enums are implicitly morphable to ints varies
between compilers, you might need to (int).
.IP "\(bu" 4
Using //\-comments
.Sp
.Vb 1
\&  // This function bamfoodles the zorklator.   /* BAD */
.Ve
.Sp
That is C99 or \*(C+. Perl is C89. Using the //\-comments is silently
allowed by many C compilers but cranking up the \s-1ANSI C89\s0 strictness
(which we like to do) causes the compilation to fail.
.IP "\(bu" 4
Mixing declarations and code
.Sp
.Vb 5
\&  void zorklator()
\&  {
\&    int n = 3;
\&    set_zorkmids(n);    /* BAD */
\&    int q = 4;
.Ve
.Sp
That is C99 or \*(C+. Some C compilers allow that, but you shouldn't.
.Sp
The gcc option \f(CW\*(C`\-Wdeclaration\-after\-statements\*(C'\fR scans for such
problems (by default on starting from Perl 5.9.4).
.IP "\(bu" 4
Introducing variables inside \fIfor()\fR
.Sp
.Vb 1
\&  for(int i = ...; ...; ...) {    /* BAD */
.Ve
.Sp
That is C99 or \*(C+. While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.
.IP "\(bu" 4
Mixing signed char pointers with unsigned char pointers
.Sp
.Vb 4
\&  int foo(char *s) { ... }
\&  ...
\&  unsigned char *t = ...; /* Or U8* t = ... */
\&  foo(t);   /* BAD */
.Ve
.Sp
While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example \s-1VMS\s0 cc considers this a
fatal error. One cause for people often making this mistake is that a
\&\*(L"naked char\*(R" and therefore dereferencing a \*(L"naked char pointer\*(R" have an
undefined signedness: it depends on the compiler and the flags of the
compiler and the underlying platform whether the result is signed or
unsigned. For this very same reason using a 'char' as an array index is
bad.
.IP "\(bu" 4
Macros that have string constants and their arguments as substrings of
the string constants
.Sp
.Vb 2
\&  #define FOO(n) printf("number = %d\en", n)    /* BAD */
\&  FOO(10);
.Ve
.Sp
Pre-ANSI semantics for that was equivalent to
.Sp
.Vb 1
\&  printf("10umber = %d\e10");
.Ve
.Sp
which is probably not what you were expecting. Unfortunately at least
one reasonably common and modern C compiler does \*(L"real backward
compatibility\*(R" here, in \s-1AIX\s0 that is what still happens even though the
rest of the \s-1AIX\s0 compiler is very happily C89.
.IP "\(bu" 4
Using printf formats for non-basic C types
.Sp
.Vb 2
\&   IV i = ...;
\&   printf("i = %d\en", i);    /* BAD */
.Ve
.Sp
While this might by accident work in some platform (where \s-1IV\s0 happens to
be an \f(CW\*(C`int\*(C'\fR), in general it cannot. \s-1IV\s0 might be something larger. Even
worse the situation is with more specific types (defined by Perl's
configuration step in \fIconfig.h\fR):
.Sp
.Vb 2
\&   Uid_t who = ...;
\&   printf("who = %d\en", who);    /* BAD */
.Ve
.Sp
The problem here is that Uid_t might be not only not \f(CW\*(C`int\*(C'\fR\-wide but it
might also be unsigned, in which case large uids would be printed as
negative values.
.Sp
There is no simple solution to this because of \fIprintf()\fR's limited
intelligence, but for many types the right format is available as with
either 'f' or '_f' suffix, for example:
.Sp
.Vb 2
\&   IVdf /* IV in decimal */
\&   UVxf /* UV is hexadecimal */
\&
\&   printf("i = %"IVdf"\en", i); /* The IVdf is a string constant. */
\&
\&   Uid_t_f /* Uid_t in decimal */
\&
\&   printf("who = %"Uid_t_f"\en", who);
.Ve
.Sp
Or you can try casting to a \*(L"wide enough\*(R" type:
.Sp
.Vb 1
\&   printf("i = %"IVdf"\en", (IV)something_very_small_and_signed);
.Ve
.Sp
Also remember that the \f(CW%p\fR format really does require a void pointer:
.Sp
.Vb 2
\&   U8* p = ...;
\&   printf("p = %p\en", (void*)p);
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wformat\*(C'\fR scans for such problems.
.IP "\(bu" 4
Blindly using variadic macros
.Sp
gcc has had them for a while with its own syntax, and C99 brought them
with a standardized syntax. Don't use the former, and use the latter
only if the \s-1HAS_C99_VARIADIC_MACROS\s0 is defined.
.IP "\(bu" 4
Blindly passing va_list
.Sp
Not all platforms support passing va_list to further varargs (stdarg)
functions. The right thing to do is to copy the va_list using the
\&\fIPerl_va_copy()\fR if the \s-1NEED_VA_COPY\s0 is defined.
.IP "\(bu" 4
Using gcc statement expressions
.Sp
.Vb 1
\&   val = ({...;...;...});    /* BAD */
.Ve
.Sp
While a nice extension, it's not portable. The Perl code does
admittedly use them if available to gain some extra speed (essentially
as a funky form of inlining), but you shouldn't.
.IP "\(bu" 4
Binding together several statements in a macro
.Sp
Use the macros \s-1STMT_START\s0 and \s-1STMT_END.\s0
.Sp
.Vb 3
\&   STMT_START {
\&      ...
\&   } STMT_END
.Ve
.IP "\(bu" 4
Testing for operating systems or versions when should be testing for
features
.Sp
.Vb 3
\&  #ifdef _\|_FOONIX_\|_    /* BAD */
\&  foo = quux();
\&  #endif
.Ve
.Sp
Unless you know with 100% certainty that \fIquux()\fR is only ever available
for the \*(L"Foonix\*(R" operating system \fBand\fR that is available \fBand\fR
correctly working for \fBall\fR past, present, \fBand\fR future versions of
\&\*(L"Foonix\*(R", the above is very wrong. This is more correct (though still
not perfect, because the below is a compile-time check):
.Sp
.Vb 3
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
How does the \s-1HAS_QUUX\s0 become defined where it needs to be?  Well, if
Foonix happens to be Unixy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
\&\fIquux()\fR, the \s-1HAS_QUUX\s0 will be correctly defined. In other platforms, the
corresponding configuration step will hopefully do the same.
.Sp
In a pinch, if you cannot wait for Configure to be educated, or if you
have a good hunch of where \fIquux()\fR might be available, you can
temporarily try the following:
.Sp
.Vb 3
\&  #if (defined(_\|_FOONIX_\|_) || defined(_\|_BARNIX_\|_))
\&  # define HAS_QUUX
\&  #endif
\&
\&  ...
\&
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
But in any case, try to keep the features and operating systems
separate.
.SS "Problematic System Interfaces"
.IX Subsection "Problematic System Interfaces"
.IP "\(bu" 4
\&\fImalloc\fR\|(0), \fIrealloc\fR\|(0), calloc(0, 0) are non-portable. To be portable
allocate at least one byte. (In general you should rarely need to work
at this low level, but instead use the various malloc wrappers.)
.IP "\(bu" 4
\&\fIsnprintf()\fR \- the return type is unportable. Use \fImy_snprintf()\fR instead.
.SS "Security problems"
.IX Subsection "Security problems"
Last but not least, here are various tips for safer coding.
.IP "\(bu" 4
Do not use \fIgets()\fR
.Sp
Or we will publicly ridicule you. Seriously.
.IP "\(bu" 4
Do not use \fIstrcpy()\fR or \fIstrcat()\fR or \fIstrncpy()\fR or \fIstrncat()\fR
.Sp
Use \fImy_strlcpy()\fR and \fImy_strlcat()\fR instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of \s-1INN\s0).
.IP "\(bu" 4
Do not use \fIsprintf()\fR or \fIvsprintf()\fR
.Sp
If you really want just plain byte strings, use \fImy_snprintf()\fR and
\&\fImy_vsnprintf()\fR instead, which will try to use \fIsnprintf()\fR and
\&\fIvsnprintf()\fR if those safer APIs are available. If you want something
fancier than a plain byte string, use SVs and \fIPerl_sv_catpvf()\fR.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can compile a special debugging version of Perl, which allows you
to use the \f(CW\*(C`\-D\*(C'\fR option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.
.SS "Poking at Perl"
.IX Subsection "Poking at Perl"
To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:
.PP
.Vb 2
\&    ./Configure \-d \-D optimize=\-g
\&    make
.Ve
.PP
\&\f(CW\*(C`\-g\*(C'\fR is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program, and
to see in which C function we are at (without the debugging information
we might see only the numerical addresses of the functions, which is
not very helpful).
.PP
\&\fIConfigure\fR will also turn on the \f(CW\*(C`DEBUGGING\*(C'\fR compilation symbol
which enables all the internal debugging code in Perl. There are a
whole bunch of things you can debug with this: perlrun lists them
all, and the best way to find out about them is to play about with
them. The most useful options are probably
.PP
.Vb 4
\&    l  Context (loop) stack processing
\&    t  Trace execution
\&    o  Method and overloading resolution
\&    c  String/numeric conversions
.Ve
.PP
Some of the functionality of the debugging code can be achieved using
\&\s-1XS\s0 modules.
.PP
.Vb 2
\&    \-Dr => use re \*(Aqdebug\*(Aq
\&    \-Dx => use O \*(AqDebug\*(Aq
.Ve
.SS "Using a source-level debugger"
.IX Subsection "Using a source-level debugger"
If the debugging output of \f(CW\*(C`\-D\*(C'\fR doesn't help you, it's time to step
through perl's execution with a source-level debugger.
.IP "\(bu" 3
We'll use \f(CW\*(C`gdb\*(C'\fR for our examples here; the principles will apply to
any debugger (many vendors call their debugger \f(CW\*(C`dbx\*(C'\fR), but check the
manual of the one you're using.
.PP
To fire up the debugger, type
.PP
.Vb 1
\&    gdb ./perl
.Ve
.PP
Or if you have a core dump:
.PP
.Vb 1
\&    gdb ./perl core
.Ve
.PP
You'll want to do that in your Perl source tree so the debugger can
read the source code. You should see the copyright message, followed by
the prompt.
.PP
.Vb 1
\&    (gdb)
.Ve
.PP
\&\f(CW\*(C`help\*(C'\fR will get you into the documentation, but here are the most
useful commands:
.IP "\(bu" 3
run [args]
.Sp
Run the program with the given arguments.
.IP "\(bu" 3
break function_name
.IP "\(bu" 3
break source.c:xxx
.Sp
Tells the debugger that we'll want to pause execution when we reach
either the named function (but see \*(L"Internal Functions\*(R" in perlguts!) or
the given line in the named source file.
.IP "\(bu" 3
step
.Sp
Steps through the program a line at a time.
.IP "\(bu" 3
next
.Sp
Steps through the program a line at a time, without descending into
functions.
.IP "\(bu" 3
continue
.Sp
Run until the next breakpoint.
.IP "\(bu" 3
finish
.Sp
Run until the end of the current function, then stop again.
.IP "\(bu" 3
\&'enter'
.Sp
Just pressing Enter will do the most recent operation again \- it's a
blessing when stepping through miles of source code.
.IP "\(bu" 3
print
.Sp
Execute the given C code and print its results. \fB\s-1WARNING\s0\fR: Perl makes
heavy use of macros, and \fIgdb\fR does not necessarily support macros
(see later \*(L"gdb macro support\*(R"). You'll have to substitute them
yourself, or to invoke cpp on the source code files (see \*(L"The .i
Targets\*(R") So, for instance, you can't say
.Sp
.Vb 1
\&    print SvPV_nolen(sv)
.Ve
.Sp
but you have to say
.Sp
.Vb 1
\&    print Perl_sv_2pv_nolen(sv)
.Ve
.PP
You may find it helpful to have a \*(L"macro dictionary\*(R", which you can
produce by saying \f(CW\*(C`cpp \-dM perl.c | sort\*(C'\fR. Even then, \fIcpp\fR won't
recursively apply those macros for you.
.SS "gdb macro support"
.IX Subsection "gdb macro support"
Recent versions of \fIgdb\fR have fairly good macro support, but in order
to use it you'll need to compile perl with macro definitions included
in the debugging information. Using \fIgcc\fR version 3.1, this means
configuring with \f(CW\*(C`\-Doptimize=\-g3\*(C'\fR. Other compilers might use a
different switch (if they support debugging macros at all).
.SS "Dumping Perl Data Structures"
.IX Subsection "Dumping Perl Data Structures"
One way to get around this macro hell is to use the dumping functions
in \fIdump.c\fR; these work a little like an internal
Devel::Peek, but they also cover OPs and other
structures that you can't get at from Perl. Let's take an example.
We'll use the \f(CW\*(C`$a = $b + $c\*(C'\fR we used before, but give it a bit of
context: \f(CW\*(C`$b = "6XXXX"; $c = 2.3;\*(C'\fR. Where's a good place to stop and
poke around?
.PP
What about \f(CW\*(C`pp_add\*(C'\fR, the function we examined earlier to implement the
\&\f(CW\*(C`+\*(C'\fR operator:
.PP
.Vb 2
\&    (gdb) break Perl_pp_add
\&    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.
.Ve
.PP
Notice we use \f(CW\*(C`Perl_pp_add\*(C'\fR and not \f(CW\*(C`pp_add\*(C'\fR \- see
\&\*(L"Internal Functions\*(R" in perlguts. With the breakpoint in place, we can
run our program:
.PP
.Vb 1
\&    (gdb) run \-e \*(Aq$b = "6XXXX"; $c = 2.3; $a = $b + $c\*(Aq
.Ve
.PP
Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:
.PP
.Vb 5
\&    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
\&    309         dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
\&    (gdb) step
\&    311           dPOPTOPnnrl_ul;
\&    (gdb)
.Ve
.PP
We looked at this bit of code before, and we said that
\&\f(CW\*(C`dPOPTOPnnrl_ul\*(C'\fR arranges for two \f(CW\*(C`NV\*(C'\fRs to be placed into \f(CW\*(C`left\*(C'\fR and
\&\f(CW\*(C`right\*(C'\fR \- let's slightly expand it:
.PP
.Vb 3
\& #define dPOPTOPnnrl_ul  NV right = POPn; \e
\&                         SV *leftsv = TOPs; \e
\&                         NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0
.Ve
.PP
\&\f(CW\*(C`POPn\*(C'\fR takes the \s-1SV\s0 from the top of the stack and obtains its \s-1NV\s0
either directly (if \f(CW\*(C`SvNOK\*(C'\fR is set) or by calling the \f(CW\*(C`sv_2nv\*(C'\fR
function. \f(CW\*(C`TOPs\*(C'\fR takes the next \s-1SV\s0 from the top of the stack \- yes,
\&\f(CW\*(C`POPn\*(C'\fR uses \f(CW\*(C`TOPs\*(C'\fR \- but doesn't remove it. We then use \f(CW\*(C`SvNV\*(C'\fR to
get the \s-1NV\s0 from \f(CW\*(C`leftsv\*(C'\fR in the same way as before \- yes, \f(CW\*(C`POPn\*(C'\fR uses
\&\f(CW\*(C`SvNV\*(C'\fR.
.PP
Since we don't have an \s-1NV\s0 for \f(CW$b\fR, we'll have to use \f(CW\*(C`sv_2nv\*(C'\fR to
convert it. If we step again, we'll find ourselves there:
.PP
.Vb 3
\&    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
\&    1669        if (!sv)
\&    (gdb)
.Ve
.PP
We can now use \f(CW\*(C`Perl_sv_dump\*(C'\fR to investigate the \s-1SV:\s0
.PP
.Vb 7
\&    SV = PV(0xa057cc0) at 0xa0675d0
\&    REFCNT = 1
\&    FLAGS = (POK,pPOK)
\&    PV = 0xa06a510 "6XXXX"\e0
\&    CUR = 5
\&    LEN = 6
\&    $1 = void
.Ve
.PP
We know we're going to get \f(CW6\fR from this, so let's finish the
subroutine:
.PP
.Vb 4
\&    (gdb) finish
\&    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
\&    0x462669 in Perl_pp_add () at pp_hot.c:311
\&    311           dPOPTOPnnrl_ul;
.Ve
.PP
We can also dump out this op: the current op is always stored in
\&\f(CW\*(C`PL_op\*(C'\fR, and we can dump it with \f(CW\*(C`Perl_op_dump\*(C'\fR. This'll give us
similar output to B::Debug.
.PP
.Vb 10
\&    {
\&    13  TYPE = add  ===> 14
\&        TARG = 1
\&        FLAGS = (SCALAR,KIDS)
\&        {
\&            TYPE = null  ===> (12)
\&              (was rv2sv)
\&            FLAGS = (SCALAR,KIDS)
\&            {
\&    11          TYPE = gvsv  ===> 12
\&                FLAGS = (SCALAR)
\&                GV = main::b
\&            }
\&        }
.Ve
.PP
# finish this later #
.SH "SOURCE CODE STATIC ANALYSIS"
.IX Header "SOURCE CODE STATIC ANALYSIS"
Various tools exist for analysing C source code \fBstatically\fR, as
opposed to \fBdynamically\fR, that is, without executing the code. It is
possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows. As a matter of fact, this is exactly how C
compilers know to give warnings about dubious code.
.SS "lint, splint"
.IX Subsection "lint, splint"
The good old C code quality inspector, \f(CW\*(C`lint\*(C'\fR, is available in several
platforms, but please be aware that there are several different
implementations of it by different vendors, which means that the flags
are not identical across different platforms.
.PP
There is a lint variant called \f(CW\*(C`splint\*(C'\fR (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.
.PP
There are \f(CW\*(C`lint\*(C'\fR and <splint> targets in Makefile, but you may have to
diddle with the flags (see above).
.SS "Coverity"
.IX Subsection "Coverity"
Coverity (http://www.coverity.com/) is a product similar to lint and as
a testbed for their product they periodically check several open source
projects, and they give out accounts to open source developers to the
defect databases.
.SS "cpd (cut-and-paste detector)"
.IX Subsection "cpd (cut-and-paste detector)"
The cpd tool detects cut-and-paste coding. If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too. Therefore such code should probably be turned into a
subroutine or a macro.
.PP
cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/). pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and \*(C+.
.PP
Download the pmd\-bin\-X.Y.zip () from the SourceForge site, extract the
pmd\-X.Y.jar from it, and then run that on source code thusly:
.PP
.Vb 2
\&  java \-cp pmd\-X.Y.jar net.sourceforge.pmd.cpd.CPD \e
\&   \-\-minimum\-tokens 100 \-\-files /some/where/src \-\-language c > cpd.txt
.Ve
.PP
You may run into memory limits, in which case you should use the \-Xmx
option:
.PP
.Vb 1
\&  java \-Xmx512M ...
.Ve
.SS "gcc warnings"
.IX Subsection "gcc warnings"
Though much can be written about the inconsistency and coverage
problems of gcc warnings (like \f(CW\*(C`\-Wall\*(C'\fR not meaning \*(L"all the warnings\*(R",
or some common portability problems not being covered by \f(CW\*(C`\-Wall\*(C'\fR, or
\&\f(CW\*(C`\-ansi\*(C'\fR and \f(CW\*(C`\-pedantic\*(C'\fR both being a poorly defined collection of
warnings, and so forth), gcc is still a useful tool in keeping our
coding nose clean.
.PP
The \f(CW\*(C`\-Wall\*(C'\fR is by default on.
.PP
The \f(CW\*(C`\-ansi\*(C'\fR (and its sidekick, \f(CW\*(C`\-pedantic\*(C'\fR) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example). If Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR is used, the
\&\f(CW\*(C`cflags\*(C'\fR frontend selects \f(CW\*(C`\-ansi \-pedantic\*(C'\fR for the platforms where
they are known to be safe.
.PP
Starting from Perl 5.9.4 the following extra flags are added:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wendif\-labels\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wextra\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wdeclaration\-after\-statement\*(C'\fR
.PP
The following flags would be nice to have but they would first need
their own Augean stablemaster:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wpointer\-arith\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wshadow\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wstrict\-prototypes\*(C'\fR
.PP
The \f(CW\*(C`\-Wtraditional\*(C'\fR is another example of the annoying tendency of gcc
to bundle a lot of warnings under one switch (it would be impossible to
deploy in practice because it would complain a lot) but it does contain
some warnings that would be beneficial to have available on their own,
such as the warning about string constants inside macros containing the
macro arguments: this behaved differently pre-ANSI than it does in
\&\s-1ANSI,\s0 and some C compilers are still in transition, \s-1AIX\s0 being an
example.
.SS "Warnings of other C compilers"
.IX Subsection "Warnings of other C compilers"
Other C compilers (yes, there \fBare\fR other C compilers than gcc) often
have their \*(L"strict \s-1ANSI\*(R"\s0 or \*(L"strict \s-1ANSI\s0 with some portability
extensions\*(R" modes on, like for example the Sun Workshop has its \f(CW\*(C`\-Xa\*(C'\fR
mode on (though implicitly), or the \s-1DEC \s0(these days, \s-1HP...\s0) has its
\&\f(CW\*(C`\-std1\*(C'\fR mode on.
.SH "MEMORY DEBUGGERS"
.IX Header "MEMORY DEBUGGERS"
\&\fB\s-1NOTE 1\s0\fR: Running under older memory debuggers such as Purify,
valgrind or Third Degree greatly slows down the execution: seconds
become minutes, minutes become hours. For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind. Under valgrind it takes more
than six hours, even on a snappy computer. The said test must be doing
something that is quite unfriendly for memory debuggers. If you don't
feel like waiting, that you can simply kill away the perl process.
Roughly valgrind slows down execution by factor 10, AddressSanitizer by
factor 2.
.PP
\&\fB\s-1NOTE 2\s0\fR: To minimize the number of memory leak false alarms (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 for more information), you have to set the
environment variable \s-1PERL_DESTRUCT_LEVEL\s0 to 2.
.PP
For csh-like shells:
.PP
.Vb 1
\&    setenv PERL_DESTRUCT_LEVEL 2
.Ve
.PP
For Bourne-type shells:
.PP
.Vb 2
\&    PERL_DESTRUCT_LEVEL=2
\&    export PERL_DESTRUCT_LEVEL
.Ve
.PP
In Unixy environments you can also use the \f(CW\*(C`env\*(C'\fR command:
.PP
.Vb 1
\&    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl \-Ilib ...
.Ve
.PP
\&\fB\s-1NOTE 3\s0\fR: There are known memory leaks when there are compile-time
errors within eval or require, seeing \f(CW\*(C`S_doeval\*(C'\fR in the call stack is
a good sign of these. Fixing these leaks is non-trivial, unfortunately,
but they must be fixed eventually.
.PP
\&\fB\s-1NOTE 4\s0\fR: DynaLoader will not clean up after itself completely
unless Perl is built with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.
.SS "Rational Software's Purify"
.IX Subsection "Rational Software's Purify"
Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness. Perl must
be compiled in a specific way for optimal testing with Purify.  Purify
is available under Windows \s-1NT,\s0 Solaris, HP-UX, \s-1SGI,\s0 and Siemens Unix.
.PP
\fIPurify on Unix\fR
.IX Subsection "Purify on Unix"
.PP
On Unix, Purify creates a new Perl binary. To get the most benefit out
of Purify, you should create the perl to Purify using:
.PP
.Vb 2
\&    sh Configure \-Accflags=\-DPURIFY \-Doptimize=\*(Aq\-g\*(Aq \e
\&     \-Uusemymalloc \-Dusemultiplicity
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Accflags=\-DPURIFY
.Sp
Disables Perl's arena memory allocation functions, as well as forcing
use of memory allocation functions derived from the system malloc.
.IP "\(bu" 4
\&\-Doptimize='\-g'
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.IP "\(bu" 4
\&\-Uusemymalloc
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\-Dusemultiplicity
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.PP
Once you've compiled a perl suitable for Purify'ing, then you can just:
.PP
.Vb 1
\&    make pureperl
.Ve
.PP
which creates a binary named 'pureperl' that has been Purify'ed. This
binary is used in place of the standard 'perl' binary when you want to
debug Perl memory problems.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run the Purify'ed perl as:
.PP
.Vb 3
\&    make pureperl
\&    cd t
\&    ../pureperl \-I../lib harness
.Ve
.PP
which would run Perl on test.pl and report any memory problems.
.PP
Purify outputs messages in \*(L"Viewer\*(R" windows by default. If you don't
have a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use these following options to output to the log file \*(L"perl.log\*(R":
.PP
.Vb 2
\&    setenv PURIFYOPTIONS "\-chain\-length=25 \-windows=no \e
\&     \-log\-file=perl.log \-append\-logfile=yes"
.Ve
.PP
If you plan to use the \*(L"Viewer\*(R" windows, then you only need this
option:
.PP
.Vb 1
\&    setenv PURIFYOPTIONS "\-chain\-length=25"
.Ve
.PP
In Bourne-type shells:
.PP
.Vb 2
\&    PURIFYOPTIONS="..."
\&    export PURIFYOPTIONS
.Ve
.PP
or if you have the \*(L"env\*(R" utility:
.PP
.Vb 1
\&    env PURIFYOPTIONS="..." ../pureperl ...
.Ve
.PP
\fIPurify on \s-1NT\s0\fR
.IX Subsection "Purify on NT"
.PP
Purify on Windows \s-1NT\s0 instruments the Perl binary 'perl.exe' on the fly.
 There are several options in the makefile you should change to get the
most use out of Purify:
.IP "\(bu" 4
\&\s-1DEFINES\s0
.Sp
You should add \-DPURIFY to the \s-1DEFINES\s0 line so the \s-1DEFINES\s0 line looks
something like:
.Sp
.Vb 1
\&   DEFINES = \-DWIN32 \-D_CONSOLE \-DNO_STRICT $(CRYPT_FLAG) \-DPURIFY=1
.Ve
.Sp
to disable Perl's arena memory allocation functions, as well as to
force use of memory allocation functions derived from the system
malloc.
.IP "\(bu" 4
\&\s-1USE_MULTI\s0 = define
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.IP "\(bu" 4
#PERL_MALLOC = define
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\s-1CFG\s0 = Debug
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run Purify as:
.PP
.Vb 4
\&    cd win32
\&    make
\&    cd ../t
\&    purify ../perl \-I../lib harness
.Ve
.PP
which would instrument Perl in memory, run Perl on test.pl, then
finally report any memory problems.
.SS "valgrind"
.IX Subsection "valgrind"
The valgrind tool can be used to find out both memory leaks and illegal
heap memory accesses. As of version 3.3.0, Valgrind only supports Linux
on x86, x86\-64 and PowerPC and Darwin (\s-1OS X\s0) on x86 and x86\-64). The
special \*(L"test.valgrind\*(R" target can be used to run the tests under
valgrind. Found errors and memory leaks are logged in files named
\&\fItestfile.valgrind\fR.
.PP
Valgrind also provides a cachegrind tool, invoked on perl as:
.PP
.Vb 1
\&    VG_OPTS=\-\-tool=cachegrind make test.valgrind
.Ve
.PP
As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in \fIt/perl.supp\fR.
.PP
To get valgrind and for more information see
.PP
.Vb 1
\&    http://valgrind.org/
.Ve
.SS "AddressSanitizer"
.IX Subsection "AddressSanitizer"
AddressSanitizer is a clang extension, included in clang since v3.1. It
checks illegal heap pointers, global pointers, stack pointers and use
after free errors, and is fast enough that you can easily compile your
debugging or optimized perl with it. It does not check memory leaks
though. AddressSanitizer is available for linux, Mac \s-1OS X\s0 and soon on
Windows.
.PP
To build perl with AddressSanitizer, your Configure invocation should
look like:
.PP
.Vb 3
\&    sh Configure \-des \-Dcc=clang \e
\&       \-Accflags=\-faddress\-sanitizer \-Aldflags=\-faddress\-sanitizer \e
\&       \-Alddlflags=\-shared\e \-faddress\-sanitizer
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Dcc=clang
.Sp
This should be replaced by the full path to your clang executable if it
is not in your path.
.IP "\(bu" 4
\&\-Accflags=\-faddress\-sanitizer
.Sp
Compile perl and extensions sources with AddressSanitizer.
.IP "\(bu" 4
\&\-Aldflags=\-faddress\-sanitizer
.Sp
Link the perl executable with AddressSanitizer.
.IP "\(bu" 4
\&\-Alddlflags=\-shared\e \-faddress\-sanitizer
.Sp
Link dynamic extensions with AddressSanitizer. You must manually
specify \f(CW\*(C`\-shared\*(C'\fR because using \f(CW\*(C`\-Alddlflags=\-shared\*(C'\fR will prevent
Configure from setting a default value for \f(CW\*(C`lddlflags\*(C'\fR, which usually
contains \f(CW\*(C`\-shared\*(C'\fR (at least on linux).
.PP
See also
<http://code.google.com/p/address\-sanitizer/wiki/AddressSanitizer>.
.SH "PROFILING"
.IX Header "PROFILING"
Depending on your platform there are various ways of profiling Perl.
.PP
There are two commonly used techniques of profiling executables:
\&\fIstatistical time-sampling\fR and \fIbasic-block counting\fR.
.PP
The first method takes periodically samples of the \s-1CPU\s0 program counter,
and since the program counter can be correlated with the code generated
for functions, we get a statistical view of in which functions the
program is spending its time. The caveats are that very small/fast
functions have lower probability of showing up in the profile, and that
periodically interrupting the program (this is usually done rather
frequently, in the scale of milliseconds) imposes an additional
overhead that may skew the results. The first problem can be alleviated
by running the code for longer (in general this is a good idea for
profiling), the second problem is usually kept in guard by the
profiling tools themselves.
.PP
The second method divides up the generated code into \fIbasic blocks\fR.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end. For example, a conditional jump
starts a basic block. Basic block profiling usually works by
\&\fIinstrumenting\fR the code by adding \fIenter basic block #nnnn\fR
book-keeping code to the generated code. During the execution of the
code the basic block counters are then updated appropriately. The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.
.SS "Gprof Profiling"
.IX Subsection "Gprof Profiling"
gprof is a profiling tool available in many Unix platforms, it uses
\&\fIstatistical time-sampling\fR.
.PP
You can build a profiled version of perl called \*(L"perl.gprof\*(R" by
invoking the make target \*(L"perl.gprof\*(R"  (What is required is that Perl
must be compiled using the \f(CW\*(C`\-pg\*(C'\fR flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
\&\fIgmon.out\fR is created which contains the profiling data collected
during the execution.
.PP
The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:
.IP "\(bu" 4
\&\-a
.Sp
Suppress statically defined functions from the profile.
.IP "\(bu" 4
\&\-b
.Sp
Suppress the verbose descriptions in the profile.
.IP "\(bu" 4
\&\-e routine
.Sp
Exclude the given routine and its descendants from the profile.
.IP "\(bu" 4
\&\-f routine
.Sp
Display only the given routine and its descendants in the profile.
.IP "\(bu" 4
\&\-s
.Sp
Generate a summary file called \fIgmon.sum\fR which then may be given to
subsequent gprof runs to accumulate data over several runs.
.IP "\(bu" 4
\&\-z
.Sp
Display routines that have zero usage.
.PP
For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.
.PP
quick hint:
.PP
.Vb 4
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-pg\*(Aq && make perl.gprof
\&    $ ./perl.gprof someprog # creates gmon.out in current directory
\&    $ gprof ./perl.gprof > out
\&    $ view out
.Ve
.SS "\s-1GCC\s0 gcov Profiling"
.IX Subsection "GCC gcov Profiling"
Starting from \s-1GCC 3.0 \s0\fIbasic block profiling\fR is officially available
for the \s-1GNU CC.\s0
.PP
You can build a profiled version of perl called \fIperl.gcov\fR by
invoking the make target \*(L"perl.gcov\*(R" (what is required that Perl must
be compiled using gcc with the flags \f(CW\*(C`\-fprofile\-arcs \-ftest\-coverage\*(C'\fR,
you may need to re-Configure).
.PP
Running the profiled version of Perl will cause profile output to be
generated. For each source file an accompanying \*(L".da\*(R" file will be
created.
.PP
To display the results you use the \*(L"gcov\*(R" utility (which should be
installed if you have gcc 3.0 or newer installed). \fIgcov\fR is run on
source code files, like this
.PP
.Vb 1
\&    gcov sv.c
.Ve
.PP
which will cause \fIsv.c.gcov\fR to be created. The \fI.gcov\fR files contain
the source code annotated with relative frequencies of execution
indicated by \*(L"#\*(R" markers.
.PP
Useful options of \fIgcov\fR include \f(CW\*(C`\-b\*(C'\fR which will summarise the basic
block, branch, and function call coverage, and \f(CW\*(C`\-c\*(C'\fR which instead of
relative frequencies will use the actual counts. For more information
on the use of \fIgcov\fR and basic block profiling with gcc, see the
latest \s-1GNU CC\s0 manual, as of \s-1GCC 3.0\s0 see
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc.html
.Ve
.PP
and its section titled \*(L"8. gcov: a Test Coverage Program\*(R"
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc_8.html#SEC132
.Ve
.PP
quick hint:
.PP
.Vb 7
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-g\*(Aq \e
\&        \-Accflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq \e
\&        \-Aldflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq && make perl.gcov
\&    $ rm \-f regexec.c.gcov regexec.gcda
\&    $ ./perl.gcov
\&    $ gcov regexec.c
\&    $ view regexec.c.gcov
.Ve
.SH "MISCELLANEOUS TRICKS"
.IX Header "MISCELLANEOUS TRICKS"
.SS "\s-1PERL_DESTRUCT_LEVEL\s0"
.IX Subsection "PERL_DESTRUCT_LEVEL"
If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl \fBdoes not\fR explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the \fIexit()\fR of
the whole program \*(L"take care\*(R" of such allocations, also known as
\&\*(L"global destruction of objects\*(R".
.PP
There is a way to tell perl to do complete cleanup: set the environment
variable \s-1PERL_DESTRUCT_LEVEL\s0 to a non-zero value. The t/TEST wrapper
does set this to 2, and this is what you need to do too, if you don't
want to see the \*(L"global leaks\*(R": For example, for \*(L"third-degreed\*(R" Perl:
.PP
.Vb 1
\&        env PERL_DESTRUCT_LEVEL=2 ./perl.third \-Ilib t/foo/bar.t
.Ve
.PP
(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)
.PP
If, at the end of a run you get the message \fIN scalars leaked\fR, you
can recompile with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, which will cause the
addresses of all those leaked SVs to be dumped along with details as to
where each \s-1SV\s0 was originally allocated. This information is also
displayed by Devel::Peek. Note that the extra details recorded with
each \s-1SV\s0 increases memory usage, so it shouldn't be used in production
environments. It also converts \f(CW\*(C`new_SV()\*(C'\fR from a macro into a real
function, so you can use your favourite debugger to discover where
those pesky SVs were allocated.
.PP
If you see that you're leaking memory at runtime, but neither valgrind
nor \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the \f(CW\*(C`\-Dm\*(C'\fR
switch can point you to the source of the leak. If the executable was
built with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, \f(CW\*(C`\-Dm\*(C'\fR will output \s-1SV\s0
allocations in addition to memory allocations. Each \s-1SV\s0 allocation has a
distinct serial number that will be written on creation and destruction
of the \s-1SV.\s0 So if you're executing the leaking code in a loop, you need
to look for SVs that are created, but never destroyed between each
cycle. If such an \s-1SV\s0 is found, set a conditional breakpoint within
\&\f(CW\*(C`new_SV()\*(C'\fR and make it break only when \f(CW\*(C`PL_sv_serial\*(C'\fR is equal to the
serial number of the leaking \s-1SV.\s0 Then you will catch the interpreter in
exactly the state where the leaking \s-1SV\s0 is allocated, which is
sufficient in many cases to find the source of the leak.
.PP
As \f(CW\*(C`\-Dm\*(C'\fR is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion. You
can bypass the PerlIO layer if you use the \s-1SV\s0 logging provided by
\&\f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR instead.
.SS "\s-1PERL_MEM_LOG\s0"
.IX Subsection "PERL_MEM_LOG"
If compiled with \f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR, both memory and \s-1SV\s0 allocations go
through logging functions, which is handy for breakpoint setting.
.PP
Unless \f(CW\*(C`\-DPERL_MEM_LOG_NOIMPL\*(C'\fR is also compiled, the logging functions
read \f(CW$ENV\fR{\s-1PERL_MEM_LOG\s0} to determine whether to log the event, and if
so how:
.PP
.Vb 4
\&    $ENV{PERL_MEM_LOG} =~ /m/           Log all memory ops
\&    $ENV{PERL_MEM_LOG} =~ /s/           Log all SV ops
\&    $ENV{PERL_MEM_LOG} =~ /t/           include timestamp in Log
\&    $ENV{PERL_MEM_LOG} =~ /^(\ed+)/      write to FD given (default is 2)
.Ve
.PP
Memory logging is somewhat similar to \f(CW\*(C`\-Dm\*(C'\fR but is independent of
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR, and at a higher level; all uses of \fINewx()\fR, \fIRenew()\fR, and
\&\fISafefree()\fR are logged with the caller's source code file and line
number (and C function name, if supported by the C compiler). In
contrast, \f(CW\*(C`\-Dm\*(C'\fR is directly at the point of \f(CW\*(C`malloc()\*(C'\fR. \s-1SV\s0 logging is
similar.
.PP
Since the logging doesn't use PerlIO, all \s-1SV\s0 allocations are logged and
no extra \s-1SV\s0 allocations are introduced by enabling the logging. If
compiled with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, the serial number for each \s-1SV\s0
allocation is also logged.
.SS "\s-1DDD\s0 over gdb"
.IX Subsection "DDD over gdb"
Those debugging perl with the \s-1DDD\s0 frontend over gdb may find the
following useful:
.PP
You can extend the data conversion shortcuts menu, so for example you
can display an \s-1SV\s0's \s-1IV\s0 value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:
.PP
.Vb 6
\&  ! Display shortcuts.
\&  Ddd*gdbDisplayShortcuts: \e
\&  /t ()   // Convert to Bin\en\e
\&  /d ()   // Convert to Dec\en\e
\&  /x ()   // Convert to Hex\en\e
\&  /o ()   // Convert to Oct(\en\e
.Ve
.PP
the following two lines:
.PP
.Vb 2
\&  ((XPV*) (())\->sv_any )\->xpv_pv  // 2pvx\en\e
\&  ((XPVIV*) (())\->sv_any )\->xiv_iv // 2ivx
.Ve
.PP
so now you can do ivx and pvx lookups or you can plug there the sv_peek
\&\*(L"conversion\*(R":
.PP
.Vb 1
\&  Perl_sv_peek(my_perl, (SV*)()) // sv_peek
.Ve
.PP
(The my_perl is for threaded builds.) Just remember that every line,
but the last one, should end with \en\e
.PP
Alternatively edit the init file interactively via: 3rd mouse button \->
New Display \-> Edit Menu
.PP
Note: you can define up to 20 conversion shortcuts in the gdb section.
.SS "Poison"
.IX Subsection "Poison"
If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the \fIPoison()\fR macros, see
perlclib.
.SS "Read-only optrees"
.IX Subsection "Read-only optrees"
Under ithreads the optree is read only. If you want to enforce this, to
check for write accesses from buggy code, compile with
\&\f(CW\*(C`\-DPERL_DEBUG_READONLY_OPS\*(C'\fR to enable code that allocates op memory
via \f(CW\*(C`mmap\*(C'\fR, and sets it read-only when it is attached to a subroutine. Any
write access to an op results in a \f(CW\*(C`SIGBUS\*(C'\fR and abort.
.PP
This code is intended for development only, and may not be portable
even to all Unix variants. Also, it is an 80% solution, in that it
isn't able to make all ops read only. Specifically it does not apply to op
slabs belonging to \f(CW\*(C`BEGIN\*(C'\fR blocks.
.PP
However, as an 80% solution it is still effective, as it has caught bugs in
the past.
.SS "The .i Targets"
.IX Subsection "The .i Targets"
You can expand the macros in a \fIfoo.c\fR file by saying
.PP
.Vb 1
\&    make foo.i
.Ve
.PP
which will expand the macros using cpp.  Don't be scared by the
results.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
