.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5222DELTA 1"
.TH PERL5222DELTA 1 "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5222delta \- what is new for perl v5.22.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.22.1 release and the 5.22.2
release.
.PP
If you are upgrading from an earlier release such as 5.22.0, first read
perl5221delta, which describes differences between 5.22.0 and 5.22.1.
.SH "Security"
.IX Header "Security"
.SS "Fix out of boundary access in Win32 path handling"
.IX Subsection "Fix out of boundary access in Win32 path handling"
This is \s-1CVE\-2015\-8608.\s0  For more information see
[perl #126755] <https://rt.perl.org/Ticket/Display.html?id=126755>.
.ie n .SS "Fix loss of taint in ""canonpath()"""
.el .SS "Fix loss of taint in \f(CWcanonpath()\fP"
.IX Subsection "Fix loss of taint in canonpath()"
This is \s-1CVE\-2015\-8607.\s0  For more information see
[perl #126862] <https://rt.perl.org/Ticket/Display.html?id=126862>.
.ie n .SS "Set proper umask before calling mkstemp(3)"
.el .SS "Set proper umask before calling \f(CWmkstemp(3)\fP"
.IX Subsection "Set proper umask before calling mkstemp(3)"
In 5.22.0 perl started setting umask to \f(CW0600\fR before calling \f(CWmkstemp(3)\fR
and restoring it afterwards.  This wrongfully tells \f(CWopen(2)\fR to strip the
owner read and write bits from the given mode before applying it, rather than
the intended negation of leaving only those bits in place.
.PP
Systems that use mode \f(CW0666\fR in \f(CWmkstemp(3)\fR (like old versions of glibc)
create a file with permissions \f(CW0066\fR, leaving world read and write permissions
regardless of current umask.
.PP
This has been fixed by using umask \f(CW0177\fR instead.
.PP
[perl #127322] <https://rt.perl.org/Ticket/Display.html?id=127322>
.ie n .SS "Avoid accessing uninitialized memory in Win32 ""crypt()"""
.el .SS "Avoid accessing uninitialized memory in Win32 \f(CWcrypt()\fP"
.IX Subsection "Avoid accessing uninitialized memory in Win32 crypt()"
Validation that will detect both a short salt and invalid characters in the
salt has been added.
.PP
[perl #126922] <https://rt.perl.org/Ticket/Display.html?id=126922>
.ie n .SS "Remove duplicate environment variables from ""environ"""
.el .SS "Remove duplicate environment variables from \f(CWenviron\fP"
.IX Subsection "Remove duplicate environment variables from environ"
Previously, if an environment variable appeared more than once in \f(CW\*(C`environ[]\*(C'\fR,
\&\f(CW%ENV\fR would contain the last entry for that name, while a
typical \f(CW\*(C`getenv()\*(C'\fR would return the first entry.  We now make sure \f(CW%ENV\fR
contains the same as what \f(CW\*(C`getenv()\*(C'\fR returns.
.PP
Secondly, we now remove duplicates from \f(CW\*(C`environ[]\*(C'\fR, so if a setting with that
name is set in \f(CW%ENV\fR we won't pass an unsafe value to a child process.
.PP
This is \s-1CVE\-2016\-2381.\s0
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with Perl 5.22.1.  If any
exist, they are bugs, and we request that you submit a report.  See
\&\*(L"Reporting Bugs\*(R" below.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
File::Spec has been upgraded from version 3.56 to 3.56_01.
.Sp
\&\f(CW\*(C`canonpath()\*(C'\fR now preserves taint.  See "Fix loss of taint in
\&\f(CW\*(C`canonpath()\*(C'\fR".
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20151213 to 5.20160429.
.Sp
The version number of Digest::SHA listed for Perl 5.18.4 was wrong and has
been corrected.  Likewise for the version number of Config in 5.18.3 and
5.18.4.
[perl #127624] <https://rt.perl.org/Ticket/Display.html?id=127624>
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperldiag\fR
.IX Subsection "perldiag"
.IP "\(bu" 4
The explanation of the warning \*(L"unable to close filehandle \f(CW%s\fR properly: \f(CW%s\fR\*(R"
which can occur when doing an implicit close of a filehandle has been expanded
and improved.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
The documentation of \f(CW\*(C`hex()\*(C'\fR has been revised to clarify valid
inputs.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Dtrace builds now build successfully on systems with a newer dtrace that
require an input object file that uses the probes in the \fI.d\fR file.
.Sp
Previously the probe would fail and cause a build failure.
.Sp
[perl #122287] <https://rt.perl.org/Ticket/Display.html?id=122287>
.IP "\(bu" 4
\&\fIConfigure\fR no longer probes for \fIlibnm\fR by default.  Originally this was the
\&\*(L"New Math\*(R" library, but the name has been re-used by the \s-1GNOME\s0 NetworkManager.
.Sp
[perl #127131] <https://rt.perl.org/Ticket/Display.html?id=127131>
.IP "\(bu" 4
\&\fIConfigure\fR now knows about gcc 5.
.IP "\(bu" 4
Compiling perl with \fB\-DPERL_MEM_LOG\fR now works again.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "Darwin" 4
.IX Item "Darwin"
Compiling perl with \fB\-Dusecbacktrace\fR on Darwin now works again.
.Sp
[perl #127764] <https://rt.perl.org/Ticket/Display.html?id=127764>
.IP "\s-1OS\s0 X/Darwin" 4
.IX Item "OS X/Darwin"
Builds with both \fB\-DDEBUGGING\fR and threading enabled would fail with a \*(L"panic:
free from wrong pool\*(R" error when built or tested from Terminal on \s-1OS X.\s0  This
was caused by perl's internal management of the environment conflicting with an
atfork handler using the libc \f(CW\*(C`setenv()\*(C'\fR function to update the environment.
.Sp
Perl now uses \f(CW\*(C`setenv()\*(C'\fR/\f(CW\*(C`unsetenv()\*(C'\fR to update the environment on \s-1OS X.\s0
.Sp
[perl #126240] <https://rt.perl.org/Ticket/Display.html?id=126240>
.IP "ppc64el" 4
.IX Item "ppc64el"
The floating point format of ppc64el (Debian naming for little-endian PowerPC)
is now detected correctly.
.IP "Tru64" 4
.IX Item "Tru64"
A test failure in \fIt/porting/extrefs.t\fR has been fixed.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
An unwarranted assertion in \f(CW\*(C`Perl_newATTRSUB_x()\*(C'\fR has been removed.  If a stub
subroutine definition with a prototype has been seen, then any subsequent stub
(or definition) of the same subroutine with an attribute was causing an
assertion failure because of a null pointer.
.Sp
[perl #126845] <https://rt.perl.org/Ticket/Display.html?id=126845>
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
Calls to the placeholder \f(CW&PL_sv_yes\fR used internally when an \f(CW\*(C`import()\*(C'\fR or
\&\f(CW\*(C`unimport()\*(C'\fR method isn't found now correctly handle scalar context.
[perl #126042] <https://rt.perl.org/Ticket/Display.html?id=126042>
.IP "\(bu" 4
The \f(CW\*(C`pipe()\*(C'\fR operator would assert for \f(CW\*(C`DEBUGGING\*(C'\fR builds
instead of producing the correct error message.  The condition asserted on is
detected and reported on correctly without the assertions, so the assertions
were removed.
[perl #126480] <https://rt.perl.org/Ticket/Display.html?id=126480>
.IP "\(bu" 4
In some cases, failing to parse a here-doc would attempt to use freed memory.
This was caused by a pointer not being restored correctly.
[perl #126443] <https://rt.perl.org/Ticket/Display.html?id=126443>
.IP "\(bu" 4
Perl now reports more context when it sees an array where it expects to see an
operator, and avoids an assertion failure.
[perl #123737] <https://rt.perl.org/Ticket/Display.html?id=123737>
.IP "\(bu" 4
If a here-doc was found while parsing another operator, the parser had already
read end of file, and the here-doc was not terminated, perl could produce an
assertion or a segmentation fault.  This now reliably complains about the
unterminated here-doc.
[perl #125540] <https://rt.perl.org/Ticket/Display.html?id=125540>
.IP "\(bu" 4
Parsing beyond the end of the buffer when processing a \f(CW\*(C`#line\*(C'\fR directive with
no filename is now avoided.
[perl #127334] <https://rt.perl.org/Ticket/Display.html?id=127334>
.IP "\(bu" 4
Perl 5.22.0 added support for the C99 hexadecimal floating point notation, but
sometimes misparsed hex floats.  This has been fixed.
[perl #127183] <https://rt.perl.org/Ticket/Display.html?id=127183>
.IP "\(bu" 4
Certain regex patterns involving a complemented posix class in an inverted
bracketed character class, and matching something else optionally would
improperly fail to match.  An example of one that could fail is
\&\f(CW\*(C`qr/_?[^\eWbar]\ex{100}/\*(C'\fR.  This has been fixed.
[perl #127537] <https://rt.perl.org/Ticket/Display.html?id=127537>
.IP "\(bu" 4
Fixed an issue with \f(CW\*(C`pack()\*(C'\fR where \f(CW\*(C`pack "H"\*(C'\fR (and
\&\f(CW\*(C`pack "h"\*(C'\fR) could read past the source when given a non\-utf8 source and a
utf8 target.
[perl #126325] <https://rt.perl.org/Ticket/Display.html?id=126325>
.IP "\(bu" 4
Fixed some cases where perl would abort due to a segmentation fault, or a
C\-level assert.
[perl #126193] <https://rt.perl.org/Ticket/Display.html?id=126193>
[perl #126257] <https://rt.perl.org/Ticket/Display.html?id=126257>
[perl #126258] <https://rt.perl.org/Ticket/Display.html?id=126258>
[perl #126405] <https://rt.perl.org/Ticket/Display.html?id=126405>
[perl #126602] <https://rt.perl.org/Ticket/Display.html?id=126602>
[perl #127773] <https://rt.perl.org/Ticket/Display.html?id=127773>
[perl #127786] <https://rt.perl.org/Ticket/Display.html?id=127786>
.IP "\(bu" 4
A memory leak when setting \f(CW$ENV{foo}\fR on Darwin has been fixed.
[perl #126240] <https://rt.perl.org/Ticket/Display.html?id=126240>
.IP "\(bu" 4
Perl now correctly raises an error when trying to compile patterns with
unterminated character classes while there are trailing backslashes.
[perl #126141] <https://rt.perl.org/Ticket/Display.html?id=126141>
.IP "\(bu" 4
\&\f(CW\*(C`NOTHING\*(C'\fR regops and \f(CW\*(C`EXACTFU_SS\*(C'\fR regops in \f(CW\*(C`make_trie()\*(C'\fR are now handled
properly.
[perl #126206] <https://rt.perl.org/Ticket/Display.html?id=126206>
.IP "\(bu" 4
Perl now only tests \f(CW\*(C`semctl()\*(C'\fR if we have everything needed to use it.  In
FreeBSD the \f(CW\*(C`semctl()\*(C'\fR entry point may exist, but it can be disabled by
policy.
[perl #127533] <https://rt.perl.org/Ticket/Display.html?id=127533>
.IP "\(bu" 4
A regression that allowed undeclared barewords as hash keys to work despite
strictures has been fixed.
[perl #126981] <https://rt.perl.org/Ticket/Display.html?id=126981>
.IP "\(bu" 4
As an optimization (introduced in Perl 5.20.0), \f(CW\*(C`uc()\*(C'\fR,
\&\f(CW\*(C`lc()\*(C'\fR, \f(CW\*(C`ucfirst()\*(C'\fR and
\&\f(CW\*(C`lcfirst()\*(C'\fR sometimes modify their argument in-place
rather than returning a modified copy.  The criteria for this optimization has
been made stricter to avoid these functions accidentally modifying in-place
when they should not, which has been happening in some cases, e.g. in
List::Util.
.IP "\(bu" 4
Excessive memory usage in the compilation of some regular expressions involving
non-ASCII characters has been reduced.  A more complete fix is forthcoming in
Perl 5.24.0.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.22.2 represents approximately 5 months of development since Perl 5.22.1
and contains approximately 3,000 lines of changes across 110 files from 24
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 1,500 lines of changes to 52 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.22.2:
.PP
Aaron Crane, Abigail, Andreas Ko\*:nig, Aristotle Pagaltzis, Chris 'BinGOs'
Williams, Craig A. Berry, Dagfinn Ilmari Mannsa\*oker, David Golden, David
Mitchell, H.Merijn Brand, James E Keenan, Jarkko Hietaniemi, Karen Etheridge,
Karl Williamson, Matthew Horsfall, Niko Tyni, Ricardo Signes, Sawyer X, Stevan
Little, Steve Hay, Todd Rinaldo, Tony Cook, Vladimir Timofeev, Yves Orton.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core.  We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at http://www.perl.org/ ,
the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
