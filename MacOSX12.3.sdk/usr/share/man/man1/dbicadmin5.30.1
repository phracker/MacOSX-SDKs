.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBICADMIN 1"
.TH DBICADMIN 1 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dbicadmin \- utility for administrating DBIx::Class schemata
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
dbicadmin: [\-I] [long options...]
.PP
.Vb 4
\&  deploy a schema to a database
\&  dbicadmin \-\-schema=MyApp::Schema \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-deploy
\&
\&  update an existing record
\&  dbicadmin \-\-schema=MyApp::Schema \-\-class=Employee \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-op=update \-\-set=\*(Aq{ "name": "New_Employee" }\*(Aq
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Actions"
.IX Subsection "Actions"
.IP "\fB\-\-create\fR" 4
.IX Item "--create"
Create version diffs needs preversion
.IP "\fB\-\-upgrade\fR" 4
.IX Item "--upgrade"
Upgrade the database to the current schema
.IP "\fB\-\-install\fR" 4
.IX Item "--install"
Install the schema version tables to an existing database
.IP "\fB\-\-deploy\fR" 4
.IX Item "--deploy"
Deploy the schema to the database
.IP "\fB\-\-select\fR" 4
.IX Item "--select"
Select data from the schema
.IP "\fB\-\-insert\fR" 4
.IX Item "--insert"
Insert data into the schema
.IP "\fB\-\-update\fR" 4
.IX Item "--update"
Update data in the schema
.IP "\fB\-\-delete\fR" 4
.IX Item "--delete"
Delete data from the schema
.IP "\fB\-\-op\fR" 4
.IX Item "--op"
compatibility option all of the above can be supplied as \-\-op=<action>
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
display this help
.SS "Arguments"
.IX Subsection "Arguments"
.IP "\fB\-\-config\-file\fR or \fB\-\-config\fR" 4
.IX Item "--config-file or --config"
Supply the config file for parsing by Config::Any
.IP "\fB\-\-connect\-info\fR" 4
.IX Item "--connect-info"
Supply the connect info as trailing options e.g. \-\-connect\-info dsn=<dsn> user=<user> password=<pass>
.IP "\fB\-\-connect\fR" 4
.IX Item "--connect"
Supply the connect info as a JSON-encoded structure, e.g. an \-\-connect=[\*(L"dsn\*(R",\*(L"user\*(R",\*(L"pass\*(R"]
.IP "\fB\-\-schema\-class\fR" 4
.IX Item "--schema-class"
The class of the schema to load
.IP "\fB\-\-config\-stanza\fR" 4
.IX Item "--config-stanza"
Where in the config to find the connection_info, supply in form MyApp::Model::DB
.IP "\fB\-\-resultset\fR or \fB\-\-resultset\-class\fR or \fB\-\-class\fR" 4
.IX Item "--resultset or --resultset-class or --class"
The resultset to operate on for data manipulation
.IP "\fB\-\-sql\-dir\fR" 4
.IX Item "--sql-dir"
The directory where sql diffs will be created
.IP "\fB\-\-sql\-type\fR" 4
.IX Item "--sql-type"
The RDBMs flavour you wish to use
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Supply a version install
.IP "\fB\-\-preversion\fR" 4
.IX Item "--preversion"
The previous version to diff against
.IP "\fB\-\-set\fR" 4
.IX Item "--set"
\&\s-1JSON\s0 data used to perform data operations
.IP "\fB\-\-attrs\fR" 4
.IX Item "--attrs"
\&\s-1JSON\s0 string to be used for the second argument for search
.IP "\fB\-\-where\fR" 4
.IX Item "--where"
\&\s-1JSON\s0 string to be used for the where clause of search
.IP "\fB\-\-force\fR" 4
.IX Item "--force"
Be forceful with some operations
.IP "\fB\-\-trace\fR" 4
.IX Item "--trace"
Turn on DBIx::Class trace output
.IP "\fB\-\-quiet\fR" 4
.IX Item "--quiet"
Be less verbose
.IP "\fB\-I\fR" 4
.IX Item "-I"
Same as perl's \-I, prepended to current \f(CW@INC\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
See \*(L"\s-1AUTHORS\*(R"\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself
