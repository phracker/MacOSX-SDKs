.\"	$NetBSD: rename.2,v 1.7 1995/02/27 12:36:15 cgd Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)rename.2	8.1 (Berkeley) 6/4/93
.\"
.Dd June 3, 2021
.Dt RENAME 2
.Os BSD 4.2
.Sh NAME
.Nm rename ,
.Nm renameat ,
.Nm renamex_np ,
.Nm renameatx_np
.Nd change the name of a file
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft int
.Fo rename
.Fa "const char *old"
.Fa "const char *new"
.Fc
.Ft int
.Fn renameat "int fromfd" "const char *from" "int tofd" "const char *to"
.Ft int
.Fn renamex_np "const char *from" "const char *to" "unsigned int flags"
.Ft int
.Fn renameatx_np "int fromfd" "const char *from" "int tofd" "const char *to" "unsigned int flags"
.Sh DESCRIPTION
The
.Fn rename
system call causes the link named
.Fa old
to be renamed as
.Fa new .
If 
.Fa new
exists, it is first removed.
Both 
.Fa old
and
.Fa new
must be of the same type
(that is, both must be either directories or non-directories)
and must reside on the same file system.
.Pp
The
.Fn rename
system call guarantees that an instance of
.Fa new
will always exist,
even if the system should crash in the middle of the operation.
.Pp
If the final component of
.Fa old
is a symbolic link,
the symbolic link is renamed,
not the file or directory to which it points.
.Pp
The
.Fn renameat
system call is equivalent to
.Fn rename
except in the case where either
.Fa from
or
.Fa to
specifies a relative path.
If
.Fa from
is a relative path, the file to be renamed is located
relative to the directory associated with the file descriptor
.Fa fromfd
instead of the current working directory.
If the
.Fa to
is a relative path, the same happens only relative to the directory associated
with
.Fa tofd .
If the
.Fn renameat
is passed the special value
.Dv AT_FDCWD
in the
.Fa fromfd
or
.Fa tofd
parameter, the current working directory is used in the determination
of the file for the respective path parameter.
.Pp
The
.Fn renamex_np
and
.Fn renameatx_np
system calls are similar to their counterparts except that they take a
.Fa flags
argument.
Values for
.Fa flags
are constructed with below bits set:
.Bl -tag -offset indent
.It Dv RENAME_SWAP
On file systems that support it (see
.Xr getattrlist 2
.Dv VOL_CAP_INT_RENAME_SWAP Ns ),
it will cause the source and target to be atomically swapped.  Source and target need not be of
the same type, i.e. it is possible to swap a file with a directory.
EINVAL is returned in case of bitwise-inclusive OR with
.Dv RENAME_EXCL .
.It Dv RENAME_EXCL
On file systems that support it (see
.Xr getattrlist 2
.Dv VOL_CAP_INT_RENAME_EXCL Ns ),
it will cause
.Dv EEXIST
to be returned if the destination already exists. EINVAL is returned in case of bitwise-inclusive OR with
.Dv RENAME_SWAP .
.It Dv RENAME_NOFOLLOW_ANY
If any symbolic links are encountered during pathname resolution, an error is returned.
.El
.Sh CAVEATS
The system can deadlock if a loop is present in the file system graph.
This loop takes the form of an entry in directory
.Ql Pa a ,
say
.Ql Pa a/foo ,
being a hard link to directory
.Ql Pa b ,
and an entry in
directory
.Ql Pa b ,
say
.Ql Pa b/bar ,
being a hard link
to directory
.Ql Pa a .
When such a loop exists and two separate processes attempt to
perform
.Ql rename a/foo b/bar
and
.Ql rename b/bar a/foo ,
respectively, 
the system may deadlock attempting to lock
both directories for modification.
.Pp
Whether or not hard links to directories are supported is specific to
the underlying filesystem implementation.
.Pp
It is recommended that any hard links to directories in an underlying
filesystem should be replaced by symbolic links by the system administrator
to avoid the possibility of deadlocks.
.Pp
Moving or renaming a file or directory into a directory with inheritable ACLs does not result in ACLs being set on the file or directory. Use
.Xr acl 3
in conjunction with
.Fn rename
to set ACLs on the file or directory.
.Sh RETURN VALUES
A 0 value is returned if the operation succeeds, otherwise
.Fn rename
returns -1 and the global variable 
.Va errno
indicates the reason for the failure.
.Sh ERRORS
The
.Fn rename
system call will fail and neither of the argument files will be
affected if:
.Bl -tag -width Er
.\" ===========
.It Bq Er EACCES
A component of either path prefix denies search permission.
.\" ===========
.It Bq Er EACCES
The requested operation requires writing in a directory
(e.g.,
.Fa new ,
new/.., or old/..) whose modes disallow this.
.\" ===========
.It Bq Er EACCES
.Fa old
is a directory and it, or some descendent in the namespace, is open
and the file system format does does not support renaming a directory
with open descendents (see
.Xr getattrlist 2
.Dv VOL_CAP_INT_RENAME_OPENFAIL Ns ).
.\" ===========
.It Bq Er EDQUOT
The directory in which the entry for the new name
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
.\" ===========
.It Bq Er EEXIST
.Fa flags
has
.Dv RENAME_EXCL
set but
.Fa new
already exists.
.\" ===========
.It Bq Er EFAULT
.Em Path
points outside the process's allocated address space.
.\" ===========
.It Bq Er EINVAL
.Fa Old
is a parent directory of
.Fa new ,
or an attempt is made to rename
.Ql \&.
or
.Ql \&.. .
If
.Dv RENAME_SWAP
is used, then
.Dv EINVAL
will also be returned if
.Fa new
is a parent directory of
.Fa old .
If both RENAME_SWAP and RENAME_EXCL bits are set in
.Fa flags ,
then
.Dv EINVAL
will be returned.
.\" ===========
.It Bq Er EINVAL
.Fa flags
has an invalid value.
.\" ===========
.It Bq Er EIO
An I/O error occurs while making or updating a directory entry.
.\" ===========
.It Bq Er EISDIR
.Fa new
is a directory, but
.Fa old
is not a directory.
.\" ===========
.It Bq Er ELOOP
Too many symbolic links are encountered in translating either pathname.
This is taken to be indicative of a looping symbolic link.
.\" ===========
.It Bq Er ELOOP
If RENAME_NOFOLLOW_ANY was passed and a symbolic link was encountered in
translating either pathname.
.\" ===========
.It Bq Er ENAMETOOLONG
A component of a pathname exceeds 
.Dv {NAME_MAX}
characters, or an entire path name exceeds
.Dv {PATH_MAX}
characters.
.\" ===========
.It Bq Er ENOENT
A component of the
.Fa old
path does not exist,
or a path prefix of
.Fa new
does not exist.
.\" ===========
.It Bq Er ENOENT
.Fa flags
has
.Dv RENAME_SWAP
set but
.Fa new
does not exist.
.\" ===========
.It Bq Er ENOSPC
The directory in which the entry for the new name is being placed
cannot be extended because there is no space left on the file
system containing the directory.
.\" ===========
.It Bq Er ENOTDIR
A component of either path prefix is not a directory.
.\" ===========
.It Bq Er ENOTDIR
.Fa old
is a directory, but
.Fa new
is not a directory.
.\" ===========
.It Bq Er ENOTEMPTY
.Fa New
is a directory and is not empty.
.\" ===========
.It Bq Er ENOTSUP
.Fa flags
has a value that is not supported by the file system.
.\" ===========
.It Bq Er EPERM
The directory containing
.Fa old
is marked sticky,
and neither the containing directory nor
.Fa old
are owned by the effective user ID.
.\" ===========
.It Bq Er EPERM
The
.Fa new
file exists,
the directory containing
.Fa new
is marked sticky,
and neither the containing directory nor
.Fa new
are owned by the effective user ID.
.\" ===========
.It Bq Er EROFS
The requested link requires writing in a directory on a read-only file
system.
.\" ===========
.It Bq Er EXDEV
The link named by
.Fa new
and the file named by
.Fa old
are on different logical devices (file systems).
Note that this error code will not be returned
if the implementation permits cross-device links.
.\" ===========
.It Bq Er EDEADLK
A component of either pathname refers to a
.Dq dataless
directory that requires materialization and the I/O policy of the current
thread or process disallows dataless directory materialization
.Po see
.Xr getiopolicy_np 3
.Pc .
.\" ===========
.It Bq Er EDEADLK
The
.Fa from
pathname refers to a
.Dq dataless
file or directory that must be materialized before being moved to its new
location and the I/O policy of the current thread or process disallows file
or directory materialization
.Po see
.Xr getiopolicy_np 3
.Pc .
.El
.Pp
The
.Fn renameat
and
.Fn renameatx_np
calls may also fail with:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa from
argument does not specify an absolute path and the
.Fa fromfd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor open for searching, or the
.Fa to
argument does not specify an absolute path and the
.Fa tofd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor open for searching.
.It Bq Er ENOTDIR
The
.Fa from
argument is not an absolute path and
.Fa fromfd
is neither
.Dv AT_FDCWD
nor a file descriptor associated with a directory, or the
.Fa to
argument is not an absolute path and
.Fa tofd
is neither
.Dv AT_FDCWD
nor a file descriptor associated with a directory.
.El
.Sh CONFORMANCE
The restriction on renaming a directory whose permissions disallow writing
is based on the fact that UFS directories contain a ".." entry.
If renaming a directory would move it to another parent directory,
this entry needs to be changed.
.Pp
This restriction has been generalized to disallow renaming
of any write-disabled directory,
even when this would not require a change to the ".." entry.
For consistency, HFS+ directories emulate this behavior.
.Sh SEE ALSO
.Xr open 2 ,
.Xr symlink 7
.Sh STANDARDS
The
.Fn rename
function conforms to 
.St -p1003.1-88 .
The
.Fn renameat
system call is expected to conform to POSIX.1-2008 .
