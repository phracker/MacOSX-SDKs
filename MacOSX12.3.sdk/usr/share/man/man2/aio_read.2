.\" Copyright (c) 1998 Terry Lambert
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/sys/aio_read.2,v 1.19 2003/01/14 02:37:06 tjr Exp $
.\"
.Dd November 17, 1998
.Dt AIO_READ 2
.Os
.Sh NAME
.Nm aio_read
.Nd asynchronous read from a file (REALTIME)
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In aio.h
.Ft int
.Fo aio_read
.Fa "struct aiocb *aiocbp"
.Fc
.Sh DESCRIPTION
The
.Fn aio_read
system call allows the calling process to read
.Fa aiocbp->aio_nbytes
from the descriptor
.Fa aiocbp->aio_fildes ,
beginning at the offset
.Fa aiocbp->aio_offset ,
into the buffer pointed to by
.Fa aiocbp->aio_buf .
The call returns immediately after the read request has
been enqueued to the descriptor;
the read may or may not have completed at the time the call returns.
.Pp
If _POSIX_PRIORITIZED_IO is defined, and the descriptor supports it,
then the enqueued operation is submitted at a priority equal to that
of the calling process minus
.Fa aiocbp->aio_reqprio .
.Pp
The
.Fa aiocbp->aio_lio_opcode
argument
is ignored by the
.Fn aio_read
system call.
.Pp
The
.Fa aiocbp
pointer may be subsequently used as an argument to
.Fn aio_return
and
.Fn aio_error
in order to determine return or error status for the enqueued operation
while it is in progress.
.Pp
If the request could not be enqueued (generally due to invalid arguments),
then the call returns without having enqueued the request.
.Pp
If the request is successfully enqueued, the value of
.Fa aiocbp->aio_offset
can be modified during the request as context, so this value must
not be referenced after the request is enqueued.
.Sh RESTRICTIONS
The Asynchronous I/O Control Block structure pointed to by
.Fa aiocbp
and the buffer that the
.Fa aiocbp->aio_buf
member of that structure references must remain valid until the
operation has completed.  For this reason, use of auto (stack) variables
for these objects is discouraged.
.Pp
The asynchronous I/O control buffer
.Fa aiocbp
should be zeroed before the
.Fn aio_read
call to avoid passing bogus context information to the kernel.
.Pp
Modifications of the Asynchronous I/O Control Block structure or the
buffer contents after the request has been enqueued, but before the
request has completed, are not allowed.
.Pp
If the file offset in
.Fa aiocbp->aio_offset
is past the offset maximum  for
.Fa aiocbp->aio_fildes ,
no I/O will occur.
.Sh RETURN VALUES
.Rv -std aio_read
.Sh DIAGNOSTICS
None.
.Sh ERRORS
The
.Fn aio_read
system call will fail if:
.Bl -tag -width Er
.\" ==========
.It Bq Er EAGAIN
Because of system resource limitations,
the request was not queued.
.\" ==========
.It Bq Er ENOSYS
The
.Fn aio_read
system call is not supported.
.El
.Pp
The following conditions may be synchronously detected when the
.Fn aio_read
system call is made, or asynchronously, at any time thereafter.
If they are detected at call time,
.Fn aio_read
returns -1 and sets
.Va errno
appropriately.
Otherwise, the
.Fn aio_return
system call must be called.
It will return -1;
.Fn aio_error
must then be called to determine the actual value
that would have been returned in
.Va errno .
.Pp
.Bl -tag -width Er
.\" ==========
.It Bq Er EBADF
The
.Fa aiocbp->aio_fildes
argument
is invalid.
.\" ==========
.It Bq Er EINVAL
The offset
.Fa aiocbp->aio_offset
is not valid, the priority specified by
.Fa aiocbp->aio_reqprio
is not a valid priority, or the number of bytes specified by
.Fa aiocbp->aio_nbytes
is not valid.
.\" ==========
.It Bq Er EOVERFLOW
The file is a regular file,
.Fa aiocbp->aio_nbytes
is greater than zero, the starting offset in
.Fa aiocbp->aio_offset
is before the end of the file, but is at or beyond the
.Fa aiocbp->aio_fildes
offset maximum.
.El
.Pp
If the request is successfully enqueued, but subsequently cancelled
or an error occurs, the value returned by the
.Fn aio_return
system call is per the
.Xr read 2
system call, and the value returned by the
.Fn aio_error
system call is either one of the error returns from the
.Xr read 2
system call, or one of:
.Bl -tag -width Er
.\" ==========
.It Bq Er EBADF
The
.Fa aiocbp->aio_fildes
argument
is invalid for reading.
.\" ==========
.It Bq Er ECANCELED
The request was explicitly cancelled via a call to
.Fn aio_cancel .
.\" ==========
.It Bq Er EINVAL
The offset
.Fa aiocbp->aio_offset
would be invalid.
.El
.Sh SEE ALSO
.Xr aio_cancel 2 ,
.Xr aio_error 2 ,
.Xr aio_return 2 ,
.Xr aio_suspend 2 ,
.Xr aio_write 2 ,
.Xr aio 4
.Sh STANDARDS
The
.Fn aio_read
system call is expected to conform to the
.St -p1003.1
standard.
.Sh HISTORY
The
.Fn aio_read
system call first appeared in
.Fx 3.0 .
.Sh AUTHORS
This
manual page was written by
.An Terry Lambert Aq terry@whistle.com .
.Sh BUGS
Invalid information in
.Fa aiocbp->_aiocb_private
may confuse the kernel.
