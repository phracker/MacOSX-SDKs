.\"	$NetBSD: getpriority.2,v 1.4 1995/02/27 12:33:15 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)getpriority.2	8.1 (Berkeley) 6/4/93
.\"
.Dd June 4, 1993
.Dt GETPRIORITY 2
.Os BSD 4
.Sh NAME
.Nm getpriority ,
.Nm setpriority
.Nd get/set program scheduling priority
.Sh SYNOPSIS
.Fd #include <sys/resource.h>
.Ft int
.Fo getpriority
.Fa "int which"
.Fa "id_t who"
.Fc
.Ft int
.Fo setpriority
.Fa "int which"
.Fa "id_t who"
.Fa "int prio"
.Fc
.Sh DESCRIPTION
The scheduling priority of the process, process group, or user as indicated by
.Fa which
and
.Fa who
is obtained with the
.Fn getpriority
call and set with the
.Fn setpriority
call.
.Fa Which
is one of
.Dv PRIO_PROCESS ,
.Dv PRIO_PGRP ,
or
.Dv PRIO_USER ,
and 
.Fa who
is interpreted relative to 
.Fa which
(a process identifier for
.Dv PRIO_PROCESS ,
process group
identifier for
.Dv PRIO_PGRP ,
and a user ID for
.Dv PRIO_USER ) .
A zero value of
.Fa who
denotes the current process, process group, or user.
.Fa prio
is a value in the range -20 to 20.  The default priority is 0;
lower priorities cause more favorable scheduling.
.Pp
The
.Fn getpriority
call returns the highest priority (lowest numerical value)
enjoyed by any of the specified processes.
The
.Fn setpriority
call sets the priorities of all of the specified processes
to the specified value.  Only the super-user may lower priorities.
.Pp
Additionally, the current thread or process can be placed in a background state
by specifying PRIO_DARWIN_THREAD or PRIO_DARWIN_PROCESS for
.Fa which .
Only a value of zero (the current thread or process) is supported for
.Fa who
when setting or getting background state.
.Fa prio
is either 0 (to remove current thread from background status) or PRIO_DARWIN_BG
(to set current thread into background state).
When a thread or process is in a background state the scheduling priority is set
to the lowest value, disk IO is throttled (with behavior similar to using
.Xr setiopolicy_np 3
to set a throttleable policy), and network IO is throttled for
any sockets opened after going into background state.  Any previously opened
sockets are not affected.
The
.Fn getpriority
call returns 0 when current thread or process is not in background state or 1
when the current thread is in background state.  Any thread or process can set
itself into background state.
.Sh RETURN VALUES
Since
.Fn getpriority
can legitimately return the value -1, it is necessary
to clear the external variable
.Va errno
prior to the
call, then check it afterward to determine
if a -1 is an error or a legitimate value.
The
.Fn setpriority
call returns 0 if there is no error, or
-1 if there is.
.Sh ERRORS
.Fn getpriority
and
.Fn setpriority
will fail if:
.Bl -tag -width Er
.\" ==========
.It Bq Er EINVAL
.Fa Which
is not one of
.Dv PRIO_PROCESS ,
.Dv PRIO_PGRP ,
.Dv PRIO_USER ,
.Dv PRIO_DARWIN_THREAD ,
or
.Dv PRIO_DARWIN_PROCESS .
.\" ==========
.It Bq Er EINVAL
.Fa Who
is not a valid process, process group, or user ID.
.\" ==========
.It Bq Er EINVAL
.Fa Who
is not 0 when
.Fa which
is 
.Dv PRIO_DARWIN_THREAD
or
.Dv PRIO_DARWIN_PROCESS .
.\" ==========
.It Bq Er ESRCH
No process can be located using the 
.Fa which
and
.Fa who
values specified.
.El
.Pp
.Bl -tag -width Er
In addition to the errors indicated above,
.Fn setpriority
will fail if:
.\" ==========
.It Bq Er EACCES
A non super-user attempts to lower a process priority.
.\" ==========
.It Bq Er EPERM
A process is located,
but neither its effective nor real user ID
matches the effective user ID of the caller.
.El
.Sh LEGACY SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/resource.h>
.Pp
The include file
.In sys/types.h
is necessary.
.Pp
.Ft int
.br
.Fo getpriority
.Fa "int which"
.Fa "int who"
.Fc ;
.Pp
.Ft int
.br
.Fo setpriority
.Fa "int which"
.Fa "int who"
.Fa "int value"
.Fc ;
.Pp
The type of
.Fa who
has changed.
.Sh SEE ALSO
.Xr nice 1 ,
.Xr fork 2 ,
.Xr setiopolicy_np 3 ,
.Xr compat 5 ,
.Xr renice 8
.Sh HISTORY
The
.Fn getpriority
function call appeared in
.Bx 4.2 .
