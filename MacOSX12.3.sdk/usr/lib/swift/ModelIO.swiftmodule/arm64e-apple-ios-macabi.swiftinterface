// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target arm64e-apple-ios15.4-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftModelIO -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name ModelIO
// swift-module-flags-ignorable: -user-module-version 1
@_exported import ModelIO
import Swift
import _Concurrency
import simd
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLMatrix4x4Array {
  @nonobjc public var float4x4Array: [simd.float4x4] {
    get
    set(array)
  }
  @nonobjc public var double4x4Array: [simd.double4x4] {
    get
    set(array)
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedValue {
  @nonobjc public var times: [Foundation.TimeInterval] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedScalarArray {
  @nonobjc public func set(floatArray array: [Swift.Float], atTime time: Foundation.TimeInterval)
  @nonobjc public func set(doubleArray array: [Swift.Double], atTime time: Foundation.TimeInterval)
  @nonobjc public func floatArray(atTime time: Foundation.TimeInterval) -> [Swift.Float]
  @nonobjc public func doubleArray(atTime time: Foundation.TimeInterval) -> [Swift.Double]
  @nonobjc public func reset(floatArray array: [Swift.Float], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(doubleArray array: [Swift.Double], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var floatArray: [Swift.Float] {
    get
  }
  @nonobjc public var doubleArray: [Swift.Double] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedVector3Array {
  @nonobjc public func set(float3Array array: [Swift.SIMD3<Swift.Float>], atTime time: Foundation.TimeInterval)
  @nonobjc public func set(double3Array array: [Swift.SIMD3<Swift.Double>], atTime time: Foundation.TimeInterval)
  @nonobjc public func float3Array(atTime time: Foundation.TimeInterval) -> [Swift.SIMD3<Swift.Float>]
  @nonobjc public func double3Array(atTime time: Foundation.TimeInterval) -> [Swift.SIMD3<Swift.Double>]
  @nonobjc public func reset(float3Array array: [Swift.SIMD3<Swift.Float>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(double3Array array: [Swift.SIMD3<Swift.Double>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var float3Array: [Swift.SIMD3<Swift.Float>] {
    get
  }
  @nonobjc public var double3Array: [Swift.SIMD3<Swift.Double>] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedQuaternionArray {
  @nonobjc public func set(floatQuaternionArray array: [simd.simd_quatf], atTime time: Foundation.TimeInterval)
  @nonobjc public func set(doubleQuaternionArray array: [simd.simd_quatd], atTime time: Foundation.TimeInterval)
  @nonobjc public func floatQuaternionArray(atTime time: Foundation.TimeInterval) -> [simd.simd_quatf]
  @nonobjc public func doubleQuaternionArray(atTime time: Foundation.TimeInterval) -> [simd.simd_quatd]
  @nonobjc public func reset(floatQuaternionArray array: [simd.simd_quatf], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(doubleQuaternionArray array: [simd.simd_quatd], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var floatQuaternionArray: [simd.simd_quatf] {
    get
  }
  @nonobjc public var doubleQuaternionArray: [simd.simd_quatd] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedScalar {
  @nonobjc public func reset(floatArray array: [Swift.Float], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(doubleArray array: [Swift.Double], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var floatArray: [Swift.Float] {
    get
  }
  @nonobjc public var doubleArray: [Swift.Double] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedVector2 {
  @nonobjc public func reset(float2Array array: [Swift.SIMD2<Swift.Float>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(double2Array array: [Swift.SIMD2<Swift.Double>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var float2Array: [Swift.SIMD2<Swift.Float>] {
    get
  }
  @nonobjc public var double2Array: [Swift.SIMD2<Swift.Double>] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedVector3 {
  @nonobjc public func reset(float3Array array: [Swift.SIMD3<Swift.Float>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(double3Array array: [Swift.SIMD3<Swift.Double>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var float3Array: [Swift.SIMD3<Swift.Float>] {
    get
  }
  @nonobjc public var double3Array: [Swift.SIMD3<Swift.Double>] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedVector4 {
  @nonobjc public func reset(float4Array array: [Swift.SIMD4<Swift.Float>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(double4Array array: [Swift.SIMD4<Swift.Double>], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var float4Array: [Swift.SIMD4<Swift.Float>] {
    get
  }
  @nonobjc public var double4Array: [Swift.SIMD4<Swift.Double>] {
    get
  }
}
@available(macOS 10.13, iOS 11.0, tvOS 11.0, *)
extension ModelIO.MDLAnimatedMatrix4x4 {
  @nonobjc public func reset(float4x4Array array: [simd.float4x4], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(double4Array array: [simd.double4x4], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var float4x4Array: [simd.float4x4] {
    get
  }
  @nonobjc public var double4x4Array: [simd.double4x4] {
    get
  }
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, *)
extension ModelIO.MDLAnimatedQuaternion {
  @nonobjc public func reset(floatQuaternionArray array: [simd.simd_quatf], atTimes times: [Foundation.TimeInterval])
  @nonobjc public func reset(doubleQuaternionArray array: [simd.simd_quatd], atTimes times: [Foundation.TimeInterval])
  @nonobjc public var floatQuaternionArray: [simd.simd_quatf] {
    get
  }
  @nonobjc public var doubleQuaternionArray: [simd.simd_quatd] {
    get
  }
}
