// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target arm64e-apple-macos12.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftAppKit -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name AppKit
// swift-module-flags-ignorable: -user-module-version 109
@_exported import Accessibility
@_exported import AppKit
import Foundation
import OpenGL
import Swift
@_exported import _Concurrency
extension AppKit.NSCursor : Swift.__DefaultCustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSCursor._defaultCustomPlaygroundQuickLook will be removed in a future Swift version")
  public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension AppKit.NSView : Swift.__DefaultCustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSView._defaultCustomPlaygroundQuickLook will be removed in a future Swift version")
  @_Concurrency.MainActor(unsafe) public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
@available(macOS 10.12.2, *)
extension AppKit.NSTouchBar : Swift.__DefaultCustomPlaygroundQuickLookable {
  @_Concurrency.MainActor(unsafe) public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
@available(macOS 10.12.2, *)
extension AppKit.NSTouchBarItem : Swift.__DefaultCustomPlaygroundQuickLookable {
  @_Concurrency.MainActor(unsafe) public var _defaultCustomPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension AppKit.NSGradient {
  convenience public init?(colorsAndLocations objects: (AppKit.NSColor, CoreGraphics.CGFloat)...)
}
public func NSApplicationMain(_ argc: Swift.Int32, _ argv: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.CChar>?>) -> Swift.Int32
extension AppKit.NSApplicationDelegate {
  @_alwaysEmitIntoClient public static func main() {
    exit(NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv))
  }
}
extension AppKit.NSApplication {
  @available(swift 4)
  @_Concurrency.MainActor(unsafe) public static func loadApplication()
}
extension AppKit.NSColor : Swift._ExpressibleByColorLiteral {
  @nonobjc required convenience public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
}
public typealias _ColorLiteralType = AppKit.NSColor
extension AppKit.NSImage : Swift._ExpressibleByImageLiteral {
  @nonobjc required convenience public init(imageLiteralResourceName name: Swift.String)
}
public typealias _ImageLiteralType = AppKit.NSImage
@available(swift 4)
public protocol _AppKitKitNumericRawRepresentable : Swift.Comparable, Swift.RawRepresentable where Self.RawValue : Swift.Comparable, Self.RawValue : Swift.Numeric {
}
extension AppKit._AppKitKitNumericRawRepresentable {
  public static func < (lhs: Self, rhs: Self) -> Swift.Bool
  public static func + (lhs: Self, rhs: Self.RawValue) -> Self
  public static func + (lhs: Self.RawValue, rhs: Self) -> Self
  public static func - (lhs: Self, rhs: Self.RawValue) -> Self
  public static func - (lhs: Self, rhs: Self) -> Self.RawValue
  public static func += (lhs: inout Self, rhs: Self.RawValue)
  public static func -= (lhs: inout Self, rhs: Self.RawValue)
}
@available(swift 4)
extension AppKit.NSAppKitVersion : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension AppKit.NSLayoutConstraint.Priority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension AppKit.NSStackView.VisibilityPriority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension AppKit.NSToolbarItem.VisibilityPriority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
@available(macOS 10.12.2, *)
extension AppKit.NSTouchBarItem.Priority : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension AppKit.NSWindow.Level : AppKit._AppKitKitNumericRawRepresentable {
}
@available(swift 4)
extension AppKit.NSFont.Weight : AppKit._AppKitKitNumericRawRepresentable {
}
@available(macOS 10.15.1, *)
public struct NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  public init()
  public var numberOfItems: Swift.Int {
    get
  }
  public var numberOfSections: Swift.Int {
    get
  }
  public var sectionIdentifiers: [SectionIdentifierType] {
    get
  }
  public var itemIdentifiers: [ItemIdentifierType] {
    get
  }
  public func numberOfItems(inSection identifier: SectionIdentifierType) -> Swift.Int
  public func itemIdentifiers(inSection identifier: SectionIdentifierType) -> [ItemIdentifierType]
  public func sectionIdentifier(containingItem identifier: ItemIdentifierType) -> SectionIdentifierType?
  public func indexOfItem(_ identifier: ItemIdentifierType) -> Swift.Int?
  public func indexOfSection(_ identifier: SectionIdentifierType) -> Swift.Int?
  public mutating func appendItems(_ identifiers: [ItemIdentifierType], toSection sectionIdentifier: SectionIdentifierType? = nil)
  public mutating func insertItems(_ identifiers: [ItemIdentifierType], beforeItem beforeIdentifier: ItemIdentifierType)
  public mutating func insertItems(_ identifiers: [ItemIdentifierType], afterItem afterIdentifier: ItemIdentifierType)
  public mutating func deleteItems(_ identifiers: [ItemIdentifierType])
  public mutating func deleteAllItems()
  public mutating func moveItem(_ identifier: ItemIdentifierType, beforeItem toIdentifier: ItemIdentifierType)
  public mutating func moveItem(_ identifier: ItemIdentifierType, afterItem toIdentifier: ItemIdentifierType)
  public mutating func reloadItems(_ identifiers: [ItemIdentifierType])
  public mutating func appendSections(_ identifiers: [SectionIdentifierType])
  public mutating func insertSections(_ identifiers: [SectionIdentifierType], beforeSection toIdentifier: SectionIdentifierType)
  public mutating func insertSections(_ identifiers: [SectionIdentifierType], afterSection toIdentifier: SectionIdentifierType)
  public mutating func deleteSections(_ identifiers: [SectionIdentifierType])
  public mutating func moveSection(_ identifier: SectionIdentifierType, beforeSection toIdentifier: SectionIdentifierType)
  public mutating func moveSection(_ identifier: SectionIdentifierType, afterSection toIdentifier: SectionIdentifierType)
  public mutating func reloadSections(_ identifiers: [SectionIdentifierType])
}
@available(macOS 10.15.1, *)
extension AppKit.NSDiffableDataSourceSnapshot : Swift._ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> AppKit.NSDiffableDataSourceSnapshotReference
  public static func _forceBridgeFromObjectiveC(_ input: AppKit.NSDiffableDataSourceSnapshotReference, result: inout AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>?)
  public static func _conditionallyBridgeFromObjectiveC(_ input: AppKit.NSDiffableDataSourceSnapshotReference, result: inout AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>?) -> Swift.Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ snapshot: AppKit.NSDiffableDataSourceSnapshotReference?) -> AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>
  public typealias _ObjectiveCType = AppKit.NSDiffableDataSourceSnapshotReference
}
@available(macOS 10.15.1, *)
open class NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : ObjectiveC.NSObject, AppKit.NSCollectionViewDataSource where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  public typealias ItemProvider = (AppKit.NSCollectionView, Foundation.IndexPath, ItemIdentifierType) -> AppKit.NSCollectionViewItem?
  public typealias SupplementaryViewProvider = (AppKit.NSCollectionView, Swift.String, Foundation.IndexPath) -> (AppKit.NSView & AppKit.NSCollectionViewElement)?
  public var supplementaryViewProvider: AppKit.NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.SupplementaryViewProvider? {
    get
    set
  }
  public init(collectionView: AppKit.NSCollectionView, itemProvider: @escaping AppKit.NSCollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.ItemProvider)
  open func apply(_ snapshot: AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  open func snapshot() -> AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>
  open func itemIdentifier(for indexPath: Foundation.IndexPath) -> ItemIdentifierType?
  open func indexPath(for itemIdentifier: ItemIdentifierType) -> Foundation.IndexPath?
  @objc open func numberOfSections(in collectionView: AppKit.NSCollectionView) -> Swift.Int
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, itemForRepresentedObjectAt indexPath: Foundation.IndexPath) -> AppKit.NSCollectionViewItem
  @objc open func collectionView(_ collectionView: AppKit.NSCollectionView, viewForSupplementaryElementOfKind kind: AppKit.NSCollectionView.SupplementaryElementKind, at indexPath: Foundation.IndexPath) -> AppKit.NSView
  public func description() -> Swift.String
  @objc deinit
}
@available(macOS 11.0, *)
open class NSTableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : ObjectiveC.NSObject, AppKit.NSTableViewDataSource where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  public typealias CellProvider = (_ tableView: AppKit.NSTableView, _ tableColumn: AppKit.NSTableColumn, _ row: Swift.Int, _ identifier: ItemIdentifierType) -> AppKit.NSView
  public typealias SectionHeaderViewProvider = (_ tableView: AppKit.NSTableView, _ row: Swift.Int, _ identifier: SectionIdentifierType) -> AppKit.NSView
  public typealias RowProvider = (_ tableView: AppKit.NSTableView, _ row: Swift.Int, _ identifier: Swift.AnyHashable) -> AppKit.NSTableRowView
  public var rowViewProvider: AppKit.NSTableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.RowProvider?
  public var sectionHeaderViewProvider: AppKit.NSTableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.SectionHeaderViewProvider?
  public var defaultRowAnimation: AppKit.NSTableView.AnimationOptions
  public init(tableView: AppKit.NSTableView, cellProvider: @escaping AppKit.NSTableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.CellProvider)
  public func snapshot() -> AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>
  public func apply(_ snapshot: AppKit.NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func itemIdentifier(forRow row: Swift.Int) -> ItemIdentifierType?
  public func row(forItemIdentifier identifier: ItemIdentifierType) -> Swift.Int?
  public func sectionIdentifier(forRow row: Swift.Int) -> SectionIdentifierType?
  public func row(forSectionIdentifier identifier: SectionIdentifierType) -> Swift.Int?
  @objc public func numberOfRows(in tableView: AppKit.NSTableView) -> Swift.Int
  @objc deinit
}
@available(macOS 10.10, *)
extension AppKit.NSStoryboard {
  @available(macOS 10.15, *)
  public func instantiateInitialController<Controller>(creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller? where Controller : AppKit.NSViewController
  @available(macOS 10.15, *)
  public func instantiateInitialController<Controller>(creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller? where Controller : AppKit.NSWindowController
  @available(macOS 10.15, *)
  public func instantiateController<Controller>(identifier: AppKit.NSStoryboard.SceneIdentifier, creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller where Controller : AppKit.NSViewController
  @available(macOS 10.15, *)
  public func instantiateController<Controller>(identifier: AppKit.NSStoryboard.SceneIdentifier, creator: ((Foundation.NSCoder) -> Controller?)? = nil) -> Controller where Controller : AppKit.NSWindowController
}
extension Foundation.CocoaError.Code {
  public static var textReadInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var textWriteInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationNotFound: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationLaunchFailed: Foundation.CocoaError.Code {
    get
  }
  public static var serviceRequestTimedOut: Foundation.CocoaError.Code {
    get
  }
  public static var serviceInvalidPasteboardData: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMalformedServiceDictionary: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  public static var sharingServiceNotConfigured: Foundation.CocoaError.Code {
    get
  }
  @available(macOS 10.13, *)
  public static var fontAssetDownloadError: Foundation.CocoaError.Code {
    get
  }
}
extension Foundation.CocoaError.Code {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var textReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var textWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var serviceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var serviceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var serviceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var serviceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var serviceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneousError")
  public static var serviceMiscellaneous: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var sharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension Foundation.CocoaError {
  public static var textReadInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var textWriteInapplicableDocumentType: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationNotFound: Foundation.CocoaError.Code {
    get
  }
  public static var serviceApplicationLaunchFailed: Foundation.CocoaError.Code {
    get
  }
  public static var serviceRequestTimedOut: Foundation.CocoaError.Code {
    get
  }
  public static var serviceInvalidPasteboardData: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMalformedServiceDictionary: Foundation.CocoaError.Code {
    get
  }
  public static var serviceMiscellaneous: Foundation.CocoaError.Code {
    get
  }
  public static var sharingServiceNotConfigured: Foundation.CocoaError.Code {
    get
  }
  @available(macOS 10.13, *)
  public static var fontAssetDownloadError: Foundation.CocoaError.Code {
    get
  }
}
extension Foundation.CocoaError {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var textReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var textWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var serviceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var serviceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var serviceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var serviceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var serviceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var serviceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var sharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension Foundation.CocoaError {
  public var isServiceError: Swift.Bool {
    get
  }
  public var isSharingServiceError: Swift.Bool {
    get
  }
  public var isTextReadWriteError: Swift.Bool {
    get
  }
  @available(macOS 10.13, *)
  public var isFontError: Swift.Bool {
    get
  }
}
extension Foundation.CocoaError {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var TextReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var TextWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var ServiceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var ServiceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var ServiceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var ServiceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var ServiceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var ServiceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var SharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
extension Foundation.CocoaError.Code {
  @available(*, deprecated, renamed: "textReadInapplicableDocumentType")
  public static var TextReadInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "textWriteInapplicableDocumentType")
  public static var TextWriteInapplicableDocumentTypeError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationNotFound")
  public static var ServiceApplicationNotFoundError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceApplicationLaunchFailed")
  public static var ServiceApplicationLaunchFailedError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceRequestTimedOut")
  public static var ServiceRequestTimedOutError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceInvalidPasteboardData")
  public static var ServiceInvalidPasteboardDataError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMalformedServiceDictionary")
  public static var ServiceMalformedServiceDictionaryError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "serviceMiscellaneous")
  public static var ServiceMiscellaneousError: Foundation.CocoaError.Code {
    get
  }
  @available(*, deprecated, renamed: "sharingServiceNotConfigured")
  public static var SharingServiceNotConfiguredError: Foundation.CocoaError.Code {
    get
  }
}
@available(swift 5.1)
@available(macOS 12, *)
public protocol NSViewInvalidating {
  func invalidate(view: AppKit.NSView)
}
extension AppKit.NSView {
  @available(swift 5.1)
  @available(macOS 12, *)
  @propertyWrapper public struct Invalidating<Value, InvalidationType> where Value : Swift.Equatable, InvalidationType : AppKit.NSViewInvalidating {
    @available(*, unavailable, message: "@NSView.Invalidating can only be used on subclasses of NSView")
    public var wrappedValue: Value {
      get
      set
    }
    public init(wrappedValue: Value, _ invalidation: InvalidationType)
    public init<InvalidationType1, InvalidationType2>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2) where InvalidationType == AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, InvalidationType3>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, InvalidationType5>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5, _ invalidation6: InvalidationType6) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, AppKit.NSView.Invalidations.Tuple<InvalidationType5, InvalidationType6>>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating, InvalidationType6 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5, _ invalidation6: InvalidationType6, _ invalidation7: InvalidationType7) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType5, InvalidationType6>, InvalidationType7>>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating, InvalidationType6 : AppKit.NSViewInvalidating, InvalidationType7 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5, _ invalidation6: InvalidationType6, _ invalidation7: InvalidationType7, _ invalidation8: InvalidationType8) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType5, InvalidationType6>, AppKit.NSView.Invalidations.Tuple<InvalidationType7, InvalidationType8>>>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating, InvalidationType6 : AppKit.NSViewInvalidating, InvalidationType7 : AppKit.NSViewInvalidating, InvalidationType8 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5, _ invalidation6: InvalidationType6, _ invalidation7: InvalidationType7, _ invalidation8: InvalidationType8, _ invalidation9: InvalidationType9) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType5, InvalidationType6>, AppKit.NSView.Invalidations.Tuple<InvalidationType7, InvalidationType8>>>, InvalidationType9>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating, InvalidationType6 : AppKit.NSViewInvalidating, InvalidationType7 : AppKit.NSViewInvalidating, InvalidationType8 : AppKit.NSViewInvalidating, InvalidationType9 : AppKit.NSViewInvalidating
    public init<InvalidationType1, InvalidationType2, InvalidationType3, InvalidationType4, InvalidationType5, InvalidationType6, InvalidationType7, InvalidationType8, InvalidationType9, InvalidationType10>(wrappedValue: Value, _ invalidation1: InvalidationType1, _ invalidation2: InvalidationType2, _ invalidation3: InvalidationType3, _ invalidation4: InvalidationType4, _ invalidation5: InvalidationType5, _ invalidation6: InvalidationType6, _ invalidation7: InvalidationType7, _ invalidation8: InvalidationType8, _ invalidation9: InvalidationType9, _ invalidation10: InvalidationType10) where InvalidationType == AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType1, InvalidationType2>, AppKit.NSView.Invalidations.Tuple<InvalidationType3, InvalidationType4>>, AppKit.NSView.Invalidations.Tuple<AppKit.NSView.Invalidations.Tuple<InvalidationType5, InvalidationType6>, AppKit.NSView.Invalidations.Tuple<InvalidationType7, InvalidationType8>>>, AppKit.NSView.Invalidations.Tuple<InvalidationType9, InvalidationType10>>, InvalidationType1 : AppKit.NSViewInvalidating, InvalidationType2 : AppKit.NSViewInvalidating, InvalidationType3 : AppKit.NSViewInvalidating, InvalidationType4 : AppKit.NSViewInvalidating, InvalidationType5 : AppKit.NSViewInvalidating, InvalidationType6 : AppKit.NSViewInvalidating, InvalidationType7 : AppKit.NSViewInvalidating, InvalidationType8 : AppKit.NSViewInvalidating, InvalidationType9 : AppKit.NSViewInvalidating, InvalidationType10 : AppKit.NSViewInvalidating
    public static subscript<EnclosingSelf>(_enclosingInstance observed: EnclosingSelf, wrapped wrappedKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, Value>, storage storageKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, AppKit.NSView.Invalidating<Value, InvalidationType>>) -> Value where EnclosingSelf : AppKit.NSView {
      get
      set
    }
  }
}
@available(swift 5.1)
@available(macOS 12, *)
extension AppKit.NSViewInvalidating where Self == AppKit.NSView.Invalidations.Display {
  @_alwaysEmitIntoClient public static var display: AppKit.NSView.Invalidations.Display {
    get { return .init() }
  }
}
@available(swift 5.1)
@available(macOS 12, *)
extension AppKit.NSViewInvalidating where Self == AppKit.NSView.Invalidations.Layout {
  @_alwaysEmitIntoClient public static var layout: AppKit.NSView.Invalidations.Layout {
    get { return .init() }
  }
}
@available(swift 5.1)
@available(macOS 12, *)
extension AppKit.NSViewInvalidating where Self == AppKit.NSView.Invalidations.Constraints {
  @_alwaysEmitIntoClient public static var constraints: AppKit.NSView.Invalidations.Constraints {
    get { return .init() }
  }
}
@available(swift 5.1)
@available(macOS 12, *)
extension AppKit.NSViewInvalidating where Self == AppKit.NSView.Invalidations.IntrinsicContentSize {
  @_alwaysEmitIntoClient public static var intrinsicContentSize: AppKit.NSView.Invalidations.IntrinsicContentSize {
    get { return .init() }
  }
}
@available(swift 5.1)
@available(macOS 12, *)
extension AppKit.NSViewInvalidating where Self == AppKit.NSView.Invalidations.RestorableState {
  @_alwaysEmitIntoClient public static var restorableState: AppKit.NSView.Invalidations.RestorableState {
    get { return .init() }
  }
}
extension AppKit.NSView {
  @available(swift 5.1)
  @available(macOS 12, *)
  public enum Invalidations {
    public struct Display : AppKit.NSViewInvalidating {
      public init()
      public func invalidate(view: AppKit.NSView)
    }
    public struct Layout : AppKit.NSViewInvalidating {
      public init()
      public func invalidate(view: AppKit.NSView)
    }
    public struct Constraints : AppKit.NSViewInvalidating {
      public init()
      public func invalidate(view: AppKit.NSView)
    }
    public struct IntrinsicContentSize : AppKit.NSViewInvalidating {
      public init()
      public func invalidate(view: AppKit.NSView)
    }
    public struct RestorableState : AppKit.NSViewInvalidating {
      public init()
      public func invalidate(view: AppKit.NSView)
    }
    public struct Tuple<Invalidation1, Invalidation2> : AppKit.NSViewInvalidating where Invalidation1 : AppKit.NSViewInvalidating, Invalidation2 : AppKit.NSViewInvalidating {
      public init(_ invalidation1: Invalidation1, _ invalidation2: Invalidation2)
      public func invalidate(view: AppKit.NSView)
    }
  }
}
extension CoreGraphics.CGRect {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func frame(withWidth width: CoreGraphics.CGFloat = 1.0, using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func clip()
}
extension Swift.Sequence where Self.Element == Foundation.NSRect {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
  @available(swift 4)
  public func clip()
}
extension Swift.Sequence where Self.Element == (CoreGraphics.CGRect, AppKit.NSColor) {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
}
extension Swift.Sequence where Self.Element == (CoreGraphics.CGRect, gray: CoreGraphics.CGFloat) {
  @available(swift 4)
  public func fill(using operation: AppKit.NSCompositingOperation = NSGraphicsContext.current?.compositingOperation ?? .sourceOver)
}
extension AppKit.NSWindow.Depth {
  @available(swift 4)
  public static func bestDepth(colorSpaceName: AppKit.NSColorSpaceName, bitsPerSample: Swift.Int, bitsPerPixel: Swift.Int, isPlanar: Swift.Bool) -> (AppKit.NSWindow.Depth, isExactMatch: Swift.Bool)
  @available(swift 4)
  public static var availableDepths: [AppKit.NSWindow.Depth] {
    get
  }
}
extension AppKit.NSAnimationEffect {
  @available(swift 4)
  public func show(centeredAt centerLocation: Foundation.NSPoint, size: Foundation.NSSize, completionHandler: @escaping () -> Swift.Void = { })
}
extension AppKit.NSSound {
  @available(swift 4)
  public static func beep()
}
extension AppKit.NSScreen {
  @available(macOS 12, *)
  public var auxiliaryTopLeftArea: Foundation.NSRect? {
    get
  }
  @available(macOS 12, *)
  public var auxiliaryTopRightArea: Foundation.NSRect? {
    get
  }
}
extension AppKit.NSEvent {
  public struct SpecialKey : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public var unicodeScalar: Swift.Unicode.Scalar {
      get
    }
    public typealias RawValue = Swift.Int
  }
  open var specialKey: AppKit.NSEvent.SpecialKey? {
    get
  }
}
extension AppKit.NSEvent.SpecialKey {
  public static let upArrow: AppKit.NSEvent.SpecialKey
  public static let downArrow: AppKit.NSEvent.SpecialKey
  public static let leftArrow: AppKit.NSEvent.SpecialKey
  public static let rightArrow: AppKit.NSEvent.SpecialKey
  public static let f1: AppKit.NSEvent.SpecialKey
  public static let f2: AppKit.NSEvent.SpecialKey
  public static let f3: AppKit.NSEvent.SpecialKey
  public static let f4: AppKit.NSEvent.SpecialKey
  public static let f5: AppKit.NSEvent.SpecialKey
  public static let f6: AppKit.NSEvent.SpecialKey
  public static let f7: AppKit.NSEvent.SpecialKey
  public static let f8: AppKit.NSEvent.SpecialKey
  public static let f9: AppKit.NSEvent.SpecialKey
  public static let f10: AppKit.NSEvent.SpecialKey
  public static let f11: AppKit.NSEvent.SpecialKey
  public static let f12: AppKit.NSEvent.SpecialKey
  public static let f13: AppKit.NSEvent.SpecialKey
  public static let f14: AppKit.NSEvent.SpecialKey
  public static let f15: AppKit.NSEvent.SpecialKey
  public static let f16: AppKit.NSEvent.SpecialKey
  public static let f17: AppKit.NSEvent.SpecialKey
  public static let f18: AppKit.NSEvent.SpecialKey
  public static let f19: AppKit.NSEvent.SpecialKey
  public static let f20: AppKit.NSEvent.SpecialKey
  public static let f21: AppKit.NSEvent.SpecialKey
  public static let f22: AppKit.NSEvent.SpecialKey
  public static let f23: AppKit.NSEvent.SpecialKey
  public static let f24: AppKit.NSEvent.SpecialKey
  public static let f25: AppKit.NSEvent.SpecialKey
  public static let f26: AppKit.NSEvent.SpecialKey
  public static let f27: AppKit.NSEvent.SpecialKey
  public static let f28: AppKit.NSEvent.SpecialKey
  public static let f29: AppKit.NSEvent.SpecialKey
  public static let f30: AppKit.NSEvent.SpecialKey
  public static let f31: AppKit.NSEvent.SpecialKey
  public static let f32: AppKit.NSEvent.SpecialKey
  public static let f33: AppKit.NSEvent.SpecialKey
  public static let f34: AppKit.NSEvent.SpecialKey
  public static let f35: AppKit.NSEvent.SpecialKey
  public static let insert: AppKit.NSEvent.SpecialKey
  public static let deleteForward: AppKit.NSEvent.SpecialKey
  public static let home: AppKit.NSEvent.SpecialKey
  public static let begin: AppKit.NSEvent.SpecialKey
  public static let end: AppKit.NSEvent.SpecialKey
  public static let pageUp: AppKit.NSEvent.SpecialKey
  public static let pageDown: AppKit.NSEvent.SpecialKey
  public static let printScreen: AppKit.NSEvent.SpecialKey
  public static let scrollLock: AppKit.NSEvent.SpecialKey
  public static let pause: AppKit.NSEvent.SpecialKey
  public static let sysReq: AppKit.NSEvent.SpecialKey
  public static let `break`: AppKit.NSEvent.SpecialKey
  public static let reset: AppKit.NSEvent.SpecialKey
  public static let stop: AppKit.NSEvent.SpecialKey
  public static let menu: AppKit.NSEvent.SpecialKey
  public static let user: AppKit.NSEvent.SpecialKey
  public static let system: AppKit.NSEvent.SpecialKey
  public static let print: AppKit.NSEvent.SpecialKey
  public static let clearLine: AppKit.NSEvent.SpecialKey
  public static let clearDisplay: AppKit.NSEvent.SpecialKey
  public static let insertLine: AppKit.NSEvent.SpecialKey
  public static let deleteLine: AppKit.NSEvent.SpecialKey
  public static let insertCharacter: AppKit.NSEvent.SpecialKey
  public static let deleteCharacter: AppKit.NSEvent.SpecialKey
  public static let prev: AppKit.NSEvent.SpecialKey
  public static let next: AppKit.NSEvent.SpecialKey
  public static let select: AppKit.NSEvent.SpecialKey
  public static let execute: AppKit.NSEvent.SpecialKey
  public static let undo: AppKit.NSEvent.SpecialKey
  public static let redo: AppKit.NSEvent.SpecialKey
  public static let find: AppKit.NSEvent.SpecialKey
  public static let help: AppKit.NSEvent.SpecialKey
  public static let modeSwitch: AppKit.NSEvent.SpecialKey
  public static let enter: AppKit.NSEvent.SpecialKey
  public static let backspace: AppKit.NSEvent.SpecialKey
  public static let tab: AppKit.NSEvent.SpecialKey
  public static let newline: AppKit.NSEvent.SpecialKey
  public static let formFeed: AppKit.NSEvent.SpecialKey
  public static let carriageReturn: AppKit.NSEvent.SpecialKey
  public static let backTab: AppKit.NSEvent.SpecialKey
  public static let delete: AppKit.NSEvent.SpecialKey
  public static let lineSeparator: AppKit.NSEvent.SpecialKey
  public static let paragraphSeparator: AppKit.NSEvent.SpecialKey
}
extension Foundation.IndexPath {
  public init(item: Swift.Int, section: Swift.Int)
  public var item: Swift.Int {
    get
    set
  }
  public var section: Swift.Int {
    get
    set
  }
}
extension Foundation.URLResourceValues {
  @available(macOS 10.10, *)
  public var thumbnail: AppKit.NSImage? {
    get
  }
  public var labelColor: AppKit.NSColor? {
    get
  }
  public var effectiveIcon: Swift.AnyObject? {
    get
  }
  public var customIcon: AppKit.NSImage? {
    get
  }
  @available(macOS 10.10, *)
  public var thumbnailDictionary: [Foundation.URLThumbnailDictionaryItem : AppKit.NSImage]? {
    get
  }
}
extension AppKit.NSAppKitVersion {
  @available(*, deprecated, renamed: "macOS10_14")
  public static var number10_14: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_14_1")
  public static var number10_14_1: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_14_2")
  public static var number10_14_2: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_14_3")
  public static var number10_14_3: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_14_4")
  public static var number10_14_4: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_14_5")
  public static var number10_14_5: AppKit.NSAppKitVersion {
    get
  }
  @available(*, deprecated, renamed: "macOS10_15")
  public static var number10_15: AppKit.NSAppKitVersion {
    get
  }
}
@available(macOS 12, *)
extension Foundation.AttributeScopes {
  public var appKit: Foundation.AttributeScopes.AppKitAttributes.Type {
    get
  }
  public struct AppKitAttributes : Foundation.AttributeScope {
    public let font: Foundation.AttributeScopes.AppKitAttributes.FontAttribute
    public let paragraphStyle: Foundation.AttributeScopes.AppKitAttributes.ParagraphStyleAttribute
    public let foregroundColor: Foundation.AttributeScopes.AppKitAttributes.ForegroundColorAttribute
    public let backgroundColor: Foundation.AttributeScopes.AppKitAttributes.BackgroundColorAttribute
    public let ligature: Foundation.AttributeScopes.AppKitAttributes.LigatureAttribute
    public let kern: Foundation.AttributeScopes.AppKitAttributes.KernAttribute
    public let tracking: Foundation.AttributeScopes.AppKitAttributes.TrackingAttribute
    public let strikethroughStyle: Foundation.AttributeScopes.AppKitAttributes.StrikethroughStyleAttribute
    public let underlineStyle: Foundation.AttributeScopes.AppKitAttributes.UnderlineStyleAttribute
    public let strokeColor: Foundation.AttributeScopes.AppKitAttributes.StrokeColorAttribute
    public let strokeWidth: Foundation.AttributeScopes.AppKitAttributes.StrokeWidthAttribute
    public let shadow: Foundation.AttributeScopes.AppKitAttributes.ShadowAttribute
    public let textEffect: Foundation.AttributeScopes.AppKitAttributes.TextEffectAttribute
    public let attachment: Foundation.AttributeScopes.AppKitAttributes.AttachmentAttribute
    public let baselineOffset: Foundation.AttributeScopes.AppKitAttributes.BaselineOffsetAttribute
    public let underlineColor: Foundation.AttributeScopes.AppKitAttributes.UnderlineColorAttribute
    public let strikethroughColor: Foundation.AttributeScopes.AppKitAttributes.StrikethroughColorAttribute
    public let obliqueness: Foundation.AttributeScopes.AppKitAttributes.ObliquenessAttribute
    public let expansion: Foundation.AttributeScopes.AppKitAttributes.ExpansionAttribute
    public let toolTip: Foundation.AttributeScopes.AppKitAttributes.ToolTipAttribute
    public let markedClauseSegment: Foundation.AttributeScopes.AppKitAttributes.MarkedClauseSegmentAttribute
    public let superscript: Foundation.AttributeScopes.AppKitAttributes.SuperscriptAttribute
    public let textAlternatives: Foundation.AttributeScopes.AppKitAttributes.TextAlternativesAttribute
    public let glyphInfo: Foundation.AttributeScopes.AppKitAttributes.GlyphInfoAttribute
    public let cursor: Foundation.AttributeScopes.AppKitAttributes.CursorAttribute
    public let accessibility: Foundation.AttributeScopes.AccessibilityAttributes
    public let foundation: Foundation.AttributeScopes.FoundationAttributes
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
@available(macOS 12, *)
extension Foundation.AttributeDynamicLookup {
  @_disfavoredOverload public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.AppKitAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
@available(macOS 12, *)
extension AppKit.NSUnderlineStyle : Swift.Hashable {
}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes {
  @frozen public enum FontAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSFont
    public static let name: Swift.String
  }
  @frozen public enum ParagraphStyleAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSParagraphStyle
    public static let name: Swift.String
  }
  @frozen public enum ForegroundColorAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSColor
    public static let name: Swift.String
  }
  @frozen public enum BackgroundColorAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSColor
    public static let name: Swift.String
  }
  @frozen public enum LigatureAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Swift.Int
    public static let name: Swift.String
  }
  @frozen public enum KernAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum TrackingAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum StrikethroughStyleAttribute : Foundation.CodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = AppKit.NSUnderlineStyle
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static let name: Swift.String
    public static func encode(_ value: AppKit.NSUnderlineStyle, to encoder: Swift.Encoder) throws
    public static func decode(from decoder: Swift.Decoder) throws -> AppKit.NSUnderlineStyle
  }
  @frozen public enum UnderlineStyleAttribute : Foundation.CodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = AppKit.NSUnderlineStyle
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static let name: Swift.String
    public static func encode(_ value: AppKit.NSUnderlineStyle, to encoder: Swift.Encoder) throws
    public static func decode(from decoder: Swift.Decoder) throws -> AppKit.NSUnderlineStyle
  }
  @frozen public enum StrokeColorAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSColor
    public static let name: Swift.String
  }
  @frozen public enum StrokeWidthAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum ShadowAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSShadow
    public static let name: Swift.String
  }
  @frozen public enum TextEffectAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Foundation.NSAttributedString.TextEffectStyle
    public static let name: Swift.String
    public static func encode(_ value: Foundation.NSAttributedString.TextEffectStyle, to encoder: Swift.Encoder) throws
    public static func decode(from decoder: Swift.Decoder) throws -> Foundation.NSAttributedString.TextEffectStyle
  }
  @frozen public enum AttachmentAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSTextAttachment
    public static let name: Swift.String
  }
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  @frozen public enum BaselineOffsetAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum UnderlineColorAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSColor
    public static let name: Swift.String
  }
  @frozen public enum StrikethroughColorAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSColor
    public static let name: Swift.String
  }
  @frozen public enum ObliquenessAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum ExpansionAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreGraphics.CGFloat
    public static let name: Swift.String
  }
  @frozen public enum ToolTipAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Swift.String
    public static let name: Swift.String
  }
  @frozen public enum MarkedClauseSegmentAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Swift.Int
    public static let name: Swift.String
  }
  @frozen public enum SuperscriptAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Swift.Int
    public static let name: Swift.String
  }
  @frozen public enum TextAlternativesAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSTextAlternatives
    public static let name: Swift.String
  }
  @frozen public enum GlyphInfoAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = AppKit.NSGlyphInfo
    public static let name: Swift.String
  }
  @frozen public enum CursorAttribute : Foundation.AttributedStringKey {
    public typealias Value = AppKit.NSCursor
    public static let name: Swift.String
  }
}
extension AppKit.NSOpenGLGlobalOption {
  @available(swift 4)
  public var globalValue: OpenGL.GLint {
    get
    set
  }
}
extension AppKit.NSOpenGLContext {
  @available(swift 4)
  public static var openGLVersion: (major: OpenGL.GLint, minor: OpenGL.GLint) {
    get
  }
}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.FontAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ParagraphStyleAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ForegroundColorAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.BackgroundColorAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.LigatureAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.KernAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.TrackingAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.StrikethroughStyleAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.UnderlineStyleAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.StrokeColorAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.StrokeWidthAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ShadowAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.TextEffectAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.AttachmentAttribute : Swift.Sendable {}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension Foundation.AttributeScopes.AppKitAttributes.BaselineOffsetAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.UnderlineColorAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.StrikethroughColorAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ObliquenessAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ExpansionAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.ToolTipAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.MarkedClauseSegmentAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.SuperscriptAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.TextAlternativesAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.GlyphInfoAttribute : Swift.Sendable {}
@available(macOS 12, *)
extension Foundation.AttributeScopes.AppKitAttributes.CursorAttribute : Swift.Sendable {}
