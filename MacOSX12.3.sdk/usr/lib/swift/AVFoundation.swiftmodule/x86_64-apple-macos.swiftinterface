// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-macos12.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftAVFoundation -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name AVFoundation
// swift-module-flags-ignorable: -user-module-version 2080.20.4.1
@_exported import AVFoundation
import CoreGraphics
import CoreMedia
import Foundation
import Swift
import _Concurrency
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPlayerInterstitialEvent {
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  convenience public init(primaryItem: AVFoundation.AVPlayerItem, identifier: Swift.String?, time: CoreMedia.CMTime, templateItems: [AVFoundation.AVPlayerItem], restrictions: AVFoundation.AVPlayerInterstitialEvent.Restrictions = [], resumptionOffset: CoreMedia.CMTime = .indefinite, playoutLimit: CoreMedia.CMTime = .invalid, userDefinedAttributes: [Swift.String : Any] = [:])
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  convenience public init(primaryItem: AVFoundation.AVPlayerItem, identifier: Swift.String?, date: Foundation.Date, templateItems: [AVFoundation.AVPlayerItem], restrictions: AVFoundation.AVPlayerInterstitialEvent.Restrictions = [], resumptionOffset: CoreMedia.CMTime = .indefinite, playoutLimit: CoreMedia.CMTime = .invalid, userDefinedAttributes: [Swift.String : Any] = [:])
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVMetadataItem {
  public static var extraAttributes: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataExtraAttributeKey : Any]?> {
    get
  }
  public static var value: AVFoundation.AVAsyncProperty<Root, (Foundation.NSCopying & ObjectiveC.NSObjectProtocol)?> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVMetadataItem {
  public static var stringValue: AVFoundation.AVAsyncProperty<Root, Swift.String?> {
    get
  }
  public static var numberValue: AVFoundation.AVAsyncProperty<Root, Foundation.NSNumber?> {
    get
  }
  public static var dateValue: AVFoundation.AVAsyncProperty<Root, Foundation.Date?> {
    get
  }
  public static var dataValue: AVFoundation.AVAsyncProperty<Root, Foundation.Data?> {
    get
  }
}
@available(macOS 12, iOS 15, watchOS 8, *)
@available(tvOS, unavailable)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVMutableMovie {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMutableMovieTrack]> {
    get
  }
}
@available(watchOS 6.0, *)
extension AVFoundation.AVError {
  @available(swift, obsoleted: 4.2, message: "Use `device: AVCaptureDevice?` instead")
  public var device: Swift.String? {
    get
  }
  @available(swift 4.2)
  public var device: AVFoundation.AVCaptureDevice? {
    get
  }
  @available(watchOS 6.0, *)
  public var time: CoreMedia.CMTime? {
    get
  }
  @available(watchOS 6.0, *)
  public var fileSize: Swift.Int64? {
    get
  }
  @available(watchOS 6.0, *)
  public var processID: Swift.Int? {
    get
  }
  @available(watchOS 6.0, *)
  public var recordingSuccessfullyFinished: Swift.Bool? {
    get
  }
  @available(watchOS 6.0, *)
  @available(swift, obsoleted: 4.2)
  public var mediaType: Swift.String? {
    get
  }
  @available(swift 4.2)
  @available(watchOS 6.0, *)
  public var mediaType: AVFoundation.AVMediaType? {
    get
  }
  @available(watchOS 6.0, *)
  public var mediaSubtypes: [Swift.Int]? {
    get
  }
  @available(swift 4.2)
  @available(macOS 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var presentationTimeStamp: CoreMedia.CMTime? {
    get
  }
  @available(swift 4.2)
  @available(macOS 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var persistentTrackID: CoreMedia.CMPersistentTrackID? {
    get
  }
  @available(swift 4.2)
  @available(macOS 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var fileType: AVFoundation.AVFileType? {
    get
  }
}
@available(macOS 12, iOS 15, watchOS 8, *)
@available(tvOS, unavailable)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVFragmentedMovie {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVFragmentedMovieTrack]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVComposition {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVCompositionTrack]> {
    get
  }
}
extension AVFoundation.AVAsynchronousKeyValueLoading {
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func status<T>(of property: AVFoundation.AVAsyncProperty<Self, T>) -> AVFoundation.AVAsyncProperty<Self, T>.Status
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<T>(_ property: AVFoundation.AVAsyncProperty<Self, T>) async throws -> T
  #endif

}
@_hasMissingDesignatedInitializers @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
public class AVAnyAsyncProperty : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
public class AVPartialAsyncProperty<Root> : AVFoundation.AVAnyAsyncProperty {
  override public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
public class AVAsyncProperty<Root, Value> : AVFoundation.AVPartialAsyncProperty<Root> {
  @objc deinit
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAsyncProperty {
  @frozen public enum Status {
    case notYetLoaded
    case loading
    case loaded(Value)
    case failed(Foundation.NSError)
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAsyncProperty.Status : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: AVFoundation.AVAsyncProperty<Root, Value>.Status, rhs: AVFoundation.AVAsyncProperty<Root, Value>.Status) -> Swift.Bool
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAsyncProperty.Status : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AVFoundation.AVAsynchronousKeyValueLoading {
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>) async throws -> (A, B)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>) async throws -> (A, B, C)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C, D>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>, _ propertyD: AVFoundation.AVAsyncProperty<Self, D>) async throws -> (A, B, C, D)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C, D, E>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>, _ propertyD: AVFoundation.AVAsyncProperty<Self, D>, _ propertyE: AVFoundation.AVAsyncProperty<Self, E>) async throws -> (A, B, C, D, E)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C, D, E, F>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>, _ propertyD: AVFoundation.AVAsyncProperty<Self, D>, _ propertyE: AVFoundation.AVAsyncProperty<Self, E>, _ propertyF: AVFoundation.AVAsyncProperty<Self, F>) async throws -> (A, B, C, D, E, F)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C, D, E, F, G>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>, _ propertyD: AVFoundation.AVAsyncProperty<Self, D>, _ propertyE: AVFoundation.AVAsyncProperty<Self, E>, _ propertyF: AVFoundation.AVAsyncProperty<Self, F>, _ propertyG: AVFoundation.AVAsyncProperty<Self, G>) async throws -> (A, B, C, D, E, F, G)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func load<A, B, C, D, E, F, G, H>(_ propertyA: AVFoundation.AVAsyncProperty<Self, A>, _ propertyB: AVFoundation.AVAsyncProperty<Self, B>, _ propertyC: AVFoundation.AVAsyncProperty<Self, C>, _ propertyD: AVFoundation.AVAsyncProperty<Self, D>, _ propertyE: AVFoundation.AVAsyncProperty<Self, E>, _ propertyF: AVFoundation.AVAsyncProperty<Self, F>, _ propertyG: AVFoundation.AVAsyncProperty<Self, G>, _ propertyH: AVFoundation.AVAsyncProperty<Self, H>) async throws -> (A, B, C, D, E, F, G, H)
  #endif

}
@available(macOS 11.0, iOS 7.0, macCatalyst 14.0, *)
extension AVFoundation.AVMetadataMachineReadableCodeObject {
  @nonobjc public var corners: [CoreGraphics.CGPoint] {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var duration: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTime> {
    get
  }
  public static var preferredRate: AVFoundation.AVAsyncProperty<Root, Swift.Float> {
    get
  }
  public static var preferredVolume: AVFoundation.AVAsyncProperty<Root, Swift.Float> {
    get
  }
  public static var preferredTransform: AVFoundation.AVAsyncProperty<Root, CoreGraphics.CGAffineTransform> {
    get
  }
  public static var minimumTimeOffsetFromLive: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTime> {
    get
  }
  public static var providesPreciseDurationAndTiming: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetTrack]> {
    get
  }
  public static var trackGroups: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetTrackGroup]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var creationDate: AVFoundation.AVAsyncProperty<Root, AVFoundation.AVMetadataItem?> {
    get
  }
  public static var lyrics: AVFoundation.AVAsyncProperty<Root, Swift.String?> {
    get
  }
  public static var commonMetadata: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataItem]> {
    get
  }
  public static var metadata: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataItem]> {
    get
  }
  public static var availableMetadataFormats: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataFormat]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var availableChapterLocales: AVFoundation.AVAsyncProperty<Root, [Foundation.Locale]> {
    get
  }
}
extension AVFoundation.AVAsset {
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  public func loadChapterMetadataGroups(withTitleLocale locale: Foundation.Locale, containingItemsWithCommonKeys commonKeys: [AVFoundation.AVMetadataKey] = []) async throws -> [AVFoundation.AVTimedMetadataGroup]
  #endif

}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVURLAsset {
  public static var variants: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetVariant]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var availableMediaCharacteristicsWithMediaSelectionOptions: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMediaCharacteristic]> {
    get
  }
  public static var preferredMediaSelection: AVFoundation.AVAsyncProperty<Root, AVFoundation.AVMediaSelection> {
    get
  }
  public static var allMediaSelections: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMediaSelection]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var hasProtectedContent: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var canContainFragments: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var containsFragments: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var overallDurationHint: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTime> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAsset {
  public static var isPlayable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var isExportable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var isReadable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var isComposable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  @available(iOS 15, tvOS 15, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static var isCompatibleWithSavedPhotosAlbum: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  @available(macOS 12, iOS 15, tvOS 15, *)
  @available(watchOS, unavailable)
  public static var isCompatibleWithAirPlayVideo: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(iOS 7.0, watchOS 2.0, tvOS 9.0, *)
@available(macOS, unavailable)
extension AVFoundation.AVAudioSession.Location {
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.Orientation.top")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.top")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.top")
  @_alwaysEmitIntoClient public static var orientationTop: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.top.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.Orientation.bottom")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.bottom")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.bottom")
  @_alwaysEmitIntoClient public static var orientationBottom: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.bottom.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.Orientation.front")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.front")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.front")
  @_alwaysEmitIntoClient public static var orientationFront: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.front.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.Orientation.back")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.back")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.back")
  @_alwaysEmitIntoClient public static var orientationBack: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.back.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 8.0, renamed: "AVAudioSession.Orientation.left")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.left")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.left")
  @_alwaysEmitIntoClient public static var orientationLeft: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.left.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 8.0, renamed: "AVAudioSession.Orientation.right")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.Orientation.right")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.Orientation.right")
  @_alwaysEmitIntoClient public static var orientationRight: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.Orientation.right.rawValue)
    }
  }
}
@available(iOS 7.0, watchOS 2.0, tvOS 9.0, *)
@available(macOS, unavailable)
extension AVFoundation.AVAudioSession.Location {
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.PolarPattern.cardioid")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.PolarPattern.cardioid")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.PolarPattern.cardioid")
  @_alwaysEmitIntoClient public static var polarPatternCardioid: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.PolarPattern.cardioid.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.PolarPattern.omnidirectional")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.PolarPattern.omnidirectional")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.PolarPattern.omnidirectional")
  @_alwaysEmitIntoClient public static var polarPatternOmnidirectional: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.PolarPattern.omnidirectional.rawValue)
    }
  }
  @available(macOS, unavailable)
  @available(iOS, deprecated, introduced: 7.0, renamed: "AVAudioSession.PolarPattern.subcardioid")
  @available(watchOS, deprecated, introduced: 2.0, renamed: "AVAudioSession.PolarPattern.subcardioid")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVAudioSession.PolarPattern.subcardioid")
  @_alwaysEmitIntoClient public static var polarPatternSubcardioid: AVFoundation.AVAudioSession.Location {
    get {
        Self(rawValue: AVAudioSession.PolarPattern.subcardioid.rawValue)
    }
  }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AVFoundation.AVCaption {
  @nonobjc public func textColor(at index: Swift.String.Index) -> (CoreGraphics.CGColor?, Swift.Range<Swift.String.Index>)
  @nonobjc public func backgroundColor(at index: Swift.String.Index) -> (CoreGraphics.CGColor?, Swift.Range<Swift.String.Index>)
  @nonobjc public func fontWeight(at index: Swift.String.Index) -> (AVFoundation.AVCaption.FontWeight, Swift.Range<Swift.String.Index>)
  @nonobjc public func fontStyle(at index: Swift.String.Index) -> (AVFoundation.AVCaption.FontStyle, Swift.Range<Swift.String.Index>)
  @nonobjc public func decoration(at index: Swift.String.Index) -> (AVFoundation.AVCaption.Decoration, Swift.Range<Swift.String.Index>)
  @nonobjc public func textCombine(at index: Swift.String.Index) -> (AVFoundation.AVCaption.TextCombine, Swift.Range<Swift.String.Index>)
  @nonobjc public func ruby(at index: Swift.String.Index) -> (AVFoundation.AVCaption.Ruby?, Swift.Range<Swift.String.Index>)
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AVFoundation.AVMutableCaption {
  @nonobjc public func setTextColor(_ textColor: CoreGraphics.CGColor, in range: Foundation.NSRange)
  @nonobjc public func setBackgroundColor(_ backgroundColor: CoreGraphics.CGColor, in range: Foundation.NSRange)
  @nonobjc public func setFontWeight(_ fontWeight: AVFoundation.AVCaption.FontWeight, in range: Foundation.NSRange)
  @nonobjc public func setFontStyle(_ fontStyle: AVFoundation.AVCaption.FontStyle, in range: Foundation.NSRange)
  @nonobjc public func setDecoration(_ decoration: AVFoundation.AVCaption.Decoration, in range: Foundation.NSRange)
  @nonobjc public func setTextCombine(_ textCombine: AVFoundation.AVCaption.TextCombine, in range: Foundation.NSRange)
  @nonobjc public func setRuby(_ rubyText: AVFoundation.AVCaption.Ruby, in range: Foundation.NSRange)
  @nonobjc public func removeTextColor(in range: Foundation.NSRange)
  @nonobjc public func removeBackgroundColor(in range: Foundation.NSRange)
  @nonobjc public func removeFontWeight(in range: Foundation.NSRange)
  @nonobjc public func removeFontStyle(in range: Foundation.NSRange)
  @nonobjc public func removeDecoration(in range: Foundation.NSRange)
  @nonobjc public func removeTextCombine(in range: Foundation.NSRange)
  @nonobjc public func removeRuby(in range: Foundation.NSRange)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension AVFoundation.AVAsynchronousVideoCompositionRequest {
  @nonobjc public var sourceSampleDataTrackIDs: [CoreMedia.CMPersistentTrackID] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension AVFoundation.AVVideoComposition {
  @objc(_sourceSampleDataTrackIDs) dynamic public var sourceSampleDataTrackIDs: [CoreMedia.CMPersistentTrackID] {
    @objc get
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension AVFoundation.AVMutableVideoComposition {
  @objc(_sourceSampleDataTrackIDs) override dynamic public var sourceSampleDataTrackIDs: [CoreMedia.CMPersistentTrackID] {
    @objc get
    @objc set
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAssetVariant {
  @nonobjc public var peakBitRate: Swift.Double? {
    get
  }
  @nonobjc public var averageBitRate: Swift.Double? {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAssetVariant.VideoAttributes {
  @nonobjc public var nominalFrameRate: Swift.Double? {
    get
  }
  @nonobjc public var codecTypes: [CoreMedia.CMVideoCodecType] {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAssetVariant.AudioAttributes {
  @nonobjc public var formatIDs: [CoreAudioTypes.AudioFormatID] {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVAssetVariant.AudioAttributes.RenditionSpecificAttributes {
  @nonobjc public var channelCount: Swift.Int? {
    get
  }
}
extension AVFoundation.AVPlayerItem {
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  convenience public init(asset: AVFoundation.AVAsset, automaticallyLoadedAssetKeys: [AVFoundation.AVPartialAsyncProperty<AVFoundation.AVAsset>] = [])
}
extension Foundation.NSNotification.Name {
  @available(macOS, deprecated, introduced: 10.7, renamed: "AVPlayerItem.timeJumpedNotification")
  @available(iOS, deprecated, introduced: 5.0, renamed: "AVPlayerItem.timeJumpedNotification")
  @available(tvOS, deprecated, introduced: 9.0, renamed: "AVPlayerItem.timeJumpedNotification")
  @available(watchOS, deprecated, introduced: 1.0, renamed: "AVPlayerItem.timeJumpedNotification")
  @_alwaysEmitIntoClient public static var AVPlayerItemTimeJumped: Foundation.NSNotification.Name {
    get {
		Self("AVPlayerItemTimeJumpedNotification")
	}
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVMutableComposition {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMutableCompositionTrack]> {
    get
  }
}
@available(macOS 11.0, iOS 10.0, macCatalyst 14.0, *)
extension AVFoundation.AVCapturePhotoOutput {
  @nonobjc public var supportedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode] {
    get
  }
  @nonobjc public var availablePhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
  @nonobjc public var availableRawPhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
extension AVFoundation.AVCapturePhotoOutput {
  @available(macOS 10.15, iOS 11.0, macCatalyst 14.0, *)
  @nonobjc @_alwaysEmitIntoClient public func supportedPhotoPixelFormatTypes(for fileType: AVFoundation.AVFileType) -> [Darwin.OSType] {
		return __supportedPhotoPixelFormatTypes(forFileType: fileType).map { $0.uint32Value } as [OSType]
	}
  @available(*, unavailable, message: "Use 'supportedPhotoPixelFormatTypes(for:) -> [OSType]' instead")
  @nonobjc public func supportedPhotoPixelFormatTypes(for fileType: AVFoundation.AVFileType) -> [Foundation.NSNumber]
  @available(iOS 11.0, macCatalyst 14.0, *)
  @available(macOS, unavailable)
  @nonobjc @_alwaysEmitIntoClient public func supportedRawPhotoPixelFormatTypes(for fileType: AVFoundation.AVFileType) -> [Darwin.OSType] {
		return __supportedRawPhotoPixelFormatTypes(forFileType: fileType).map { $0.uint32Value } as [OSType]
	}
  @available(*, unavailable, message: "Use 'supportedRawPhotoPixelFormatTypes(for:) -> [OSType]' instead")
  @nonobjc public func supportedRawPhotoPixelFormatTypes(for fileType: AVFoundation.AVFileType) -> [Foundation.NSNumber]
}
@available(macOS 11.0, iOS 10.0, macCatalyst 14.0, *)
extension AVFoundation.AVCapturePhotoSettings {
  @nonobjc public var availablePreviewPhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
@available(macOS 10.15, iOS 11.0, macCatalyst 14.0, *)
extension AVFoundation.AVCapturePhoto {
  @available(*, unavailable, message: "Use 'cgImageRepresentation() -> CGImage?' instead")
  @nonobjc public func cgImageRepresentation() -> Swift.Unmanaged<CoreGraphics.CGImage>?
  @available(*, unavailable, message: "Use 'previewCGImageRepresentation() -> CGImage?' instead")
  @nonobjc public func previewCGImageRepresentation() -> Swift.Unmanaged<CoreGraphics.CGImage>?
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var formatDescriptions: AVFoundation.AVAsyncProperty<Root, [CoreMedia.CMFormatDescription]> {
    get
  }
  public static var isPlayable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var isDecodable: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var isEnabled: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var isSelfContained: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
  public static var totalSampleDataLength: AVFoundation.AVAsyncProperty<Root, Swift.Int64> {
    get
  }
  public static var mediaCharacteristics: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMediaCharacteristic]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var timeRange: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTimeRange> {
    get
  }
  public static var naturalTimeScale: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTimeScale> {
    get
  }
  public static var estimatedDataRate: AVFoundation.AVAsyncProperty<Root, Swift.Float> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var languageCode: AVFoundation.AVAsyncProperty<Root, Swift.String?> {
    get
  }
  public static var extendedLanguageTag: AVFoundation.AVAsyncProperty<Root, Swift.String?> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var naturalSize: AVFoundation.AVAsyncProperty<Root, CoreGraphics.CGSize> {
    get
  }
  public static var preferredTransform: AVFoundation.AVAsyncProperty<Root, CoreGraphics.CGAffineTransform> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var preferredVolume: AVFoundation.AVAsyncProperty<Root, Swift.Float> {
    get
  }
  public static var hasAudioSampleDependencies: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var nominalFrameRate: AVFoundation.AVAsyncProperty<Root, Swift.Float> {
    get
  }
  public static var minFrameDuration: AVFoundation.AVAsyncProperty<Root, CoreMedia.CMTime> {
    get
  }
  public static var requiresFrameReordering: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var segments: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetTrackSegment]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var commonMetadata: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataItem]> {
    get
  }
  public static var metadata: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataItem]> {
    get
  }
  public static var availableMetadataFormats: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMetadataFormat]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  public static var availableTrackAssociationTypes: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetTrack.AssociationType]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVAssetTrack {
  @available(macOS 12, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var canProvideSampleCursors: AVFoundation.AVAsyncProperty<Root, Swift.Bool> {
    get
  }
}
@available(watchOS 6.0, *)
extension CoreMedia.CMTime : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTime?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTime?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTime
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(watchOS 6.0, *)
extension CoreMedia.CMTimeRange : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeRange?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeRange?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTimeRange
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(watchOS 6.0, *)
extension CoreMedia.CMTimeMapping : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeMapping?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeMapping?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTimeMapping
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(macOS 10.7, iOS 5.0, *)
extension AVFoundation.AVCaptureVideoDataOutput {
  @nonobjc public var availableVideoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
@available(macOS 11.0, iOS 10.0, macCatalyst 14.0, *)
extension AVFoundation.AVCaptureDevice.Format {
  @nonobjc public var supportedColorSpaces: [AVFoundation.AVCaptureColorSpace] {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVFragmentedAsset {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVFragmentedAssetTrack]> {
    get
  }
}
@available(macOS 12, iOS 15, watchOS 8, *)
@available(tvOS, unavailable)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVMovie {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVMovieTrack]> {
    get
  }
}
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension AVFoundation.AVPartialAsyncProperty where Root : AVFoundation.AVURLAsset {
  public static var tracks: AVFoundation.AVAsyncProperty<Root, [AVFoundation.AVAssetTrack]> {
    get
  }
}
