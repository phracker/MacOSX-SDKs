// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target arm64e-apple-macos12.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftSceneKit -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name SceneKit
// swift-module-flags-ignorable: -user-module-version 1.2
import CoreGraphics
import Foundation
@_exported import SceneKit
import Swift
import _Concurrency
import simd
public typealias SCNFloat = CoreGraphics.CGFloat
extension SceneKit.SCNVector3 {
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public init(_ x: CoreGraphics.CGFloat, _ y: CoreGraphics.CGFloat, _ z: CoreGraphics.CGFloat)
  public init(_ x: Swift.Double, _ y: Swift.Double, _ z: Swift.Double)
  public init(_ x: Swift.Int, _ y: Swift.Int, _ z: Swift.Int)
  public init(_ v: Swift.SIMD3<Swift.Float>)
  public init(_ v: Swift.SIMD3<Swift.Double>)
}
extension Swift.SIMD3 where Scalar == Swift.Float {
  public init(_ v: SceneKit.SCNVector3)
}
extension Swift.SIMD3 where Scalar == Swift.Double {
  public init(_ v: SceneKit.SCNVector3)
}
extension SceneKit.SCNVector4 {
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ w: Swift.Float)
  public init(_ x: CoreGraphics.CGFloat, _ y: CoreGraphics.CGFloat, _ z: CoreGraphics.CGFloat, _ w: CoreGraphics.CGFloat)
  public init(_ x: Swift.Double, _ y: Swift.Double, _ z: Swift.Double, _ w: Swift.Double)
  public init(_ x: Swift.Int, _ y: Swift.Int, _ z: Swift.Int, _ w: Swift.Int)
  public init(_ v: Swift.SIMD4<Swift.Float>)
  public init(_ v: Swift.SIMD4<Swift.Double>)
}
extension Swift.SIMD4 where Scalar == Swift.Float {
  public init(_ v: SceneKit.SCNVector4)
}
extension Swift.SIMD4 where Scalar == Swift.Double {
  public init(_ v: SceneKit.SCNVector4)
}
extension QuartzCore.CATransform3D {
  public init(_ m: simd.float4x4)
  public init(_ m: simd.double4x4)
}
extension simd.simd_float4x4 {
  public init(_ m: SceneKit.SCNMatrix4)
}
extension simd.simd_double4x4 {
  public init(_ m: SceneKit.SCNMatrix4)
}
@available(iOS 8.0, macOS 10.8, *)
extension SceneKit.SCNGeometryElement {
  convenience public init<IndexType>(indices: [IndexType], primitiveType: SceneKit.SCNGeometryPrimitiveType) where IndexType : Swift.FixedWidthInteger
}
@available(iOS 8.0, macOS 10.8, *)
extension SceneKit.SCNGeometrySource {
  @nonobjc convenience public init(vertices: [SceneKit.SCNVector3])
  @nonobjc convenience public init(normals: [SceneKit.SCNVector3])
  @nonobjc convenience public init(textureCoordinates: [CoreGraphics.CGPoint])
}
@available(iOS 8.0, macOS 10.10, *)
extension SceneKit.SCNBoundingVolume {
  public var boundingBox: (min: SceneKit.SCNVector3, max: SceneKit.SCNVector3) {
    get
    set
  }
  public var boundingSphere: (center: SceneKit.SCNVector3, radius: Swift.Float) {
    get
  }
}
@available(iOS 8.0, macOS 10.8, *)
extension SceneKit.SCNSceneSource {
  public func entryWithIdentifier<T>(_ uid: Swift.String, withClass entryClass: T.Type) -> T? where T : AnyObject
}
extension SceneKit.SCNVector3 : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector3?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector3?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> SceneKit.SCNVector3
  public typealias _ObjectiveCType = Foundation.NSValue
}
extension SceneKit.SCNVector4 : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector4?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout SceneKit.SCNVector4?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> SceneKit.SCNVector4
  public typealias _ObjectiveCType = Foundation.NSValue
}
