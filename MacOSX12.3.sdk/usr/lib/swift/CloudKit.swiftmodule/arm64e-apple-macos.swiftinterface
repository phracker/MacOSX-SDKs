// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.32 clang-1316.0.20.8)
// swift-module-flags: -target arm64e-apple-macos12.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCloudKit -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name CloudKit
// swift-module-flags-ignorable: -user-module-version 1950.31.1
@_exported import CloudKit
import Foundation
import Swift
import _Concurrency
import os.activity
import os.log
import os
@available(macOS 10.11, iOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKNotification {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID? {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKSubscription.NotificationInfo {
  @available(swift 4.2)
  @available(tvOS, unavailable)
  public var alertLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var titleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  convenience public init(alertBody: Swift.String? = nil, alertLocalizationKey: Swift.String? = nil, alertLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], title: Swift.String? = nil, titleLocalizationKey: Swift.String? = nil, titleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], subtitle: Swift.String? = nil, subtitleLocalizationKey: Swift.String? = nil, subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], alertActionLocalizationKey: Swift.String? = nil, alertLaunchImage: Swift.String? = nil, soundName: Swift.String? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey] = [], shouldBadge: Swift.Bool = false, shouldSendContentAvailable: Swift.Bool = false, shouldSendMutableContent: Swift.Bool = false, category: Swift.String? = nil, collapseIDKey: Swift.String? = nil)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKDatabase {
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS, introduced: 12.0, deprecated: 12.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(iOS, introduced: 15.0, deprecated: 15.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  public func records(matching query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID?) async throws -> [CloudKit.CKRecord]
  #endif

}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
extension CloudKit.CKDatabase {
  @available(swift 4.2)
  public func fetch(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping (CloudKit.CKSubscription?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func subscription(for subscriptionID: CloudKit.CKSubscription.ID) async throws -> CloudKit.CKSubscription
  #endif

  @available(swift 4.2)
  public func delete(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func deleteSubscription(withID subscriptionID: CloudKit.CKSubscription.ID) async throws -> CloudKit.CKSubscription.ID
  #endif

}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@nonobjc extension CloudKit.CKDatabase {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredDatabase: CloudKit.CKDatabase) throws -> R) rethrows -> R
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredDatabase: CloudKit.CKDatabase) async throws -> R) async rethrows -> R
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetch(withRecordIDs recordIDs: [CloudKit.CKRecord.ID], desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, completionHandler: @escaping (Swift.Result<[CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(for ids: [CloudKit.CKRecord.ID], desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil) async throws -> [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecords(saving recordsToSave: [CloudKit.CKRecord], deleting recordIDsToDelete: [CloudKit.CKRecord.ID], savePolicy: CloudKit.CKModifyRecordsOperation.RecordSavePolicy = .ifServerRecordUnchanged, atomically: Swift.Bool = true, completionHandler: @escaping (Swift.Result<(saveResults: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, Swift.Error>], deleteResults: [CloudKit.CKRecord.ID : Swift.Result<Swift.Void, Swift.Error>]), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecords(saving recordsToSave: [CloudKit.CKRecord], deleting recordIDsToDelete: [CloudKit.CKRecord.ID], savePolicy: CloudKit.CKModifyRecordsOperation.RecordSavePolicy = .ifServerRecordUnchanged, atomically: Swift.Bool = true) async throws -> (saveResults: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, Swift.Error>], deleteResults: [CloudKit.CKRecord.ID : Swift.Result<Swift.Void, Swift.Error>])
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetch(withQuery query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults, completionHandler: @escaping (Swift.Result<(matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?), Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetch(withCursor queryCursor: CloudKit.CKQueryOperation.Cursor, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults, completionHandler: @escaping (Swift.Result<(matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(matching query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults) async throws -> (matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?)
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(continuingMatchFrom queryCursor: CloudKit.CKQueryOperation.Cursor, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults) async throws -> (matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?)
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetch(withRecordZoneIDs zoneIDs: [CloudKit.CKRecordZone.ID], completionHandler: @escaping (Swift.Result<[CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func recordZones(for ids: [CloudKit.CKRecordZone.ID]) async throws -> [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecordZones(saving recordZonesToSave: [CloudKit.CKRecordZone], deleting recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID], completionHandler: @escaping (Swift.Result<(saveResults: [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, Swift.Error>], deleteResults: [CloudKit.CKRecordZone.ID : Swift.Result<Swift.Void, Swift.Error>]), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecordZones(saving recordZonesToSave: [CloudKit.CKRecordZone], deleting recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID]) async throws -> (saveResults: [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, Swift.Error>], deleteResults: [CloudKit.CKRecordZone.ID : Swift.Result<Swift.Void, Swift.Error>])
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetch(withSubscriptionIDs subscriptionIDs: [CloudKit.CKSubscription.ID], completionHandler: @escaping (Swift.Result<[CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func subscriptions(for ids: [CloudKit.CKSubscription.ID]) async throws -> [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifySubscriptions(saving subscriptionsToSave: [CloudKit.CKSubscription], deleting subscriptionIDsToDelete: [CloudKit.CKSubscription.ID], completionHandler: @escaping (Swift.Result<(saveResults: [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, Swift.Error>], deleteResults: [CloudKit.CKSubscription.ID : Swift.Result<Swift.Void, Swift.Error>]), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifySubscriptions(saving subscriptionsToSave: [CloudKit.CKSubscription], deleting subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]) async throws -> (saveResults: [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, Swift.Error>], deleteResults: [CloudKit.CKSubscription.ID : Swift.Result<Swift.Void, Swift.Error>])
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public enum DatabaseChange {
    public struct Modification {
      public let zoneID: CloudKit.CKRecordZone.ID
    }
    public struct Deletion {
      public let zoneID: CloudKit.CKRecordZone.ID
      public let purged: Swift.Bool
    }
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchDatabaseChanges(since changeToken: CloudKit.CKServerChangeToken?, resultsLimit: Swift.Int? = nil, completionHandler: @escaping (Swift.Result<(modifications: [CloudKit.CKDatabase.DatabaseChange.Modification], deletions: [CloudKit.CKDatabase.DatabaseChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func databaseChanges(since changeToken: CloudKit.CKServerChangeToken?, resultsLimit: Swift.Int? = nil) async throws -> (modifications: [CloudKit.CKDatabase.DatabaseChange.Modification], deletions: [CloudKit.CKDatabase.DatabaseChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool)
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public enum RecordZoneChange {
    public struct Modification {
      public let record: CloudKit.CKRecord
    }
    public struct Deletion {
      public let recordID: CloudKit.CKRecord.ID
      public let recordType: CloudKit.CKRecord.RecordType
    }
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchRecordZoneChanges(inZoneWith zoneID: CloudKit.CKRecordZone.ID, since changeToken: CloudKit.CKServerChangeToken?, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int? = nil, completionHandler: @escaping (Swift.Result<(modificationResultsByID: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKDatabase.RecordZoneChange.Modification, Swift.Error>], deletions: [CloudKit.CKDatabase.RecordZoneChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func recordZoneChanges(inZoneWith zoneID: CloudKit.CKRecordZone.ID, since changeToken: CloudKit.CKServerChangeToken?, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int? = nil) async throws -> (modificationResultsByID: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKDatabase.RecordZoneChange.Modification, Swift.Error>], deletions: [CloudKit.CKDatabase.RecordZoneChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool)
  #endif

}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKFetchSubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionIDs: [CloudKit.CKSubscription.ID])
  @available(swift 4.2)
  public var subscriptionIDs: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionResultBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ subscriptionResult: Swift.Result<CloudKit.CKSubscription, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS, introduced: 10.10, deprecated: 12.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(iOS, introduced: 8.0, deprecated: 15.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(tvOS, introduced: 9.0, deprecated: 15.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use fetchSubscriptionsResultBlock instead")
  public var fetchSubscriptionCompletionBlock: ((_ subscriptionsBySubscriptionID: [CloudKit.CKSubscription.ID : CloudKit.CKSubscription]?, _ operationError: Swift.Error?) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchSubscriptionsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKQuerySubscription {
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate, subscriptionID: CloudKit.CKSubscription.ID = UUID().uuidString, options querySubscriptionOptions: CloudKit.CKQuerySubscription.Options = [.firesOnRecordCreation, .firesOnRecordUpdate, .firesOnRecordDeletion])
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
  }
}
@available(macOS 10.11, iOS 9.2, tvOS 9.1, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchWebAuthTokenOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchWebAuthTokenResultBlock: ((_ operationResult: Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension CloudKit.CKSubscription {
  @available(swift 4.2)
  public typealias ID = Swift.String
}
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKSubscription {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordsOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordResultBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordZonesOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneResultBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ recordZoneResult: Swift.Result<CloudKit.CKRecordZone, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordZonesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKDatabaseSubscription {
  @available(swift 4.2)
  convenience public init(subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordZoneChangesOperation {
  @available(swift 4.2)
  @available(macOS 10.14, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
  convenience public init(recordZoneIDs: [CloudKit.CKRecordZone.ID]? = nil, configurationsByRecordZoneID: [CloudKit.CKRecordZone.ID : CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration]? = nil)
  @available(swift 4.2)
  public var recordWithIDWasDeletedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordType: CloudKit.CKRecord.RecordType) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordWasChangedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordZoneFetchResultBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ fetchChangesResult: Swift.Result<(serverChangeToken: CloudKit.CKServerChangeToken, clientChangeTokenData: Foundation.Data?, moreComing: Swift.Bool), Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordZoneChangesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.14, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
@nonobjc extension CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  convenience public init(previousServerChangeToken: CloudKit.CKServerChangeToken? = nil, resultsLimit: Swift.Int? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil)
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKShare {
  @available(swift 4.2)
  public enum SystemFieldKey {
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let title: CloudKit.CKRecord.FieldKey
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let thumbnailImageData: CloudKit.CKRecord.FieldKey
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let shareType: CloudKit.CKRecord.FieldKey
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.share")
@nonobjc public let CKRecordTypeShare: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.title")
@nonobjc public let CKShareTitleKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.thumbnailImageData")
@nonobjc public let CKShareThumbnailImageDataKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.shareType")
@nonobjc public let CKShareTypeKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKRecordZoneSubscription {
  @available(swift 4.2)
  convenience public init(zoneID: CloudKit.CKRecordZone.ID, subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKAcceptSharesOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareResultBlock: ((_ metadata: CloudKit.CKShare.Metadata, _ metadataResult: Swift.Result<CloudKit.CKShare, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var acceptSharesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
extension CloudKit.CKContainer {
  @available(swift 4.2)
  public func fetchAllLongLivedOperationIDs(completionHandler: @escaping ([CloudKit.CKOperation.ID]?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func allLongLivedOperationIDs() async throws -> [CloudKit.CKOperation.ID]
  #endif

  @available(swift 4.2)
  public func fetchLongLivedOperation(withID operationID: CloudKit.CKOperation.ID, completionHandler: @escaping (CloudKit.CKOperation?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func longLivedOperation(for operationID: CloudKit.CKOperation.ID) async throws -> CloudKit.CKOperation?
  #endif

}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@nonobjc extension CloudKit.CKContainer {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredContainer: CloudKit.CKContainer) throws -> R) rethrows -> R
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredContainer: CloudKit.CKContainer) async throws -> R) async rethrows -> R
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func discoverUserIdentities(forEmailAddresses emails: [Swift.String], completionHandler: @escaping (Swift.Result<[Swift.String : CloudKit.CKUserIdentity], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func userIdentities(forEmailAddresses emails: [Swift.String]) async throws -> [Swift.String : CloudKit.CKUserIdentity]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func discoverUserIdentities(forPhoneNumbers phoneNumbers: [Swift.String], completionHandler: @escaping (Swift.Result<[Swift.String : CloudKit.CKUserIdentity], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func userIdentities(forPhoneNumbers phoneNumbers: [Swift.String]) async throws -> [Swift.String : CloudKit.CKUserIdentity]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func discoverUserIdentities(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID], completionHandler: @escaping (Swift.Result<[CloudKit.CKRecord.ID : CloudKit.CKUserIdentity], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func userIdentities(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID]) async throws -> [CloudKit.CKRecord.ID : CloudKit.CKUserIdentity]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchShareParticipants(forEmailAddresses emails: [Swift.String], completionHandler: @escaping (Swift.Result<[Swift.String : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forEmailAddresses emails: [Swift.String]) async throws -> [Swift.String : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchShareParticipants(forPhoneNumbers phoneNumbers: [Swift.String], completionHandler: @escaping (Swift.Result<[Swift.String : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forPhoneNumbers phoneNumbers: [Swift.String]) async throws -> [Swift.String : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchShareParticipants(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID], completionHandler: @escaping (Swift.Result<[CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID]) async throws -> [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKShare.Participant, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func fetchShareMetadatas(for urls: [Foundation.URL], completionHandler: @escaping (Swift.Result<[Foundation.URL : Swift.Result<CloudKit.CKShare.Metadata, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareMetadatas(for urls: [Foundation.URL]) async throws -> [Foundation.URL : Swift.Result<CloudKit.CKShare.Metadata, Swift.Error>]
  #endif

  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func accept(_ metadatas: [CloudKit.CKShare.Metadata], completionHandler: @escaping (Swift.Result<[CloudKit.CKShare.Metadata : Swift.Result<CloudKit.CKShare, Swift.Error>], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func accept(_ metadatas: [CloudKit.CKShare.Metadata]) async throws -> [CloudKit.CKShare.Metadata : Swift.Result<CloudKit.CKShare, Swift.Error>]
  #endif

}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKContainer {
  @available(swift 4.2)
  public enum Application {
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissions")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissions")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissions")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissions")
    public typealias Permissions = CloudKit.CKContainer.ApplicationPermissions
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    public typealias PermissionStatus = CloudKit.CKContainer.ApplicationPermissionStatus
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    public typealias PermissionBlock = CloudKit.CKContainer.ApplicationPermissionBlock
  }
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissions")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissions")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissions")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissions")
public typealias CKContainer_Application_Permissions = CloudKit.CKContainer.ApplicationPermissions
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
public typealias CKContainer_Application_PermissionStatus = CloudKit.CKContainer.ApplicationPermissionStatus
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
public typealias CKContainer_Application_PermissionBlock = CloudKit.CKContainer.ApplicationPermissionBlock
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchShareMetadataOperation {
  @available(swift 4.2)
  public var rootRecordDesiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareMetadataResultBlock: ((_ shareURL: Foundation.URL, _ shareMetadataResult: Swift.Result<CloudKit.CKShare.Metadata, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchShareMetadataResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.ID {
  @available(swift 4.2)
  convenience public init(recordName: Swift.String = UUID().uuidString, zoneID: CloudKit.CKRecordZone.ID = CKRecordZone.ID.default)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public struct CKRecordKeyValueIterator : Swift.IteratorProtocol {
  public mutating func next() -> (CloudKit.CKRecord.FieldKey, CloudKit.CKRecordValueProtocol)?
  public typealias Element = (Swift.String, CloudKit.CKRecordValueProtocol)
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord : Swift.Sequence {
  public func makeIterator() -> CloudKit.CKRecordKeyValueIterator
  public typealias Element = (Swift.String, CloudKit.CKRecordValueProtocol)
  public typealias Iterator = CloudKit.CKRecordKeyValueIterator
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord {
  public typealias RecordType = Swift.String
  public typealias FieldKey = Swift.String
  @available(swift 4.2)
  @available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
  public enum SystemType {
    @available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
    public static let userRecord: CloudKit.CKRecord.RecordType
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.RecordType
  }
  @available(swift 4.2)
  @available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
  public enum SystemFieldKey {
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let parent: CloudKit.CKRecord.RecordType
    @available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.RecordType
  }
  @available(swift, introduced: 4.2, deprecated: 4.2, message: "Use init(recordType:recordID:) + CKRecord.ID(zoneID:) instead")
  convenience public init(recordType: CloudKit.CKRecord.RecordType, zoneID: CloudKit.CKRecordZone.ID)
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, recordID: CloudKit.CKRecord.ID = CKRecord.ID())
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
  @available(swift 4.2)
  public func object(forKey key: CloudKit.CKRecord.FieldKey) -> CloudKit.__CKRecordObjCValue?
  @available(swift 4.2)
  public func setObject(_ object: CloudKit.__CKRecordObjCValue?, forKey key: CloudKit.CKRecord.FieldKey)
  @available(swift 4.2)
  public subscript(key: CloudKit.CKRecord.FieldKey) -> CloudKit.__CKRecordObjCValue? {
    get
    set
  }
  @available(swift 4.2)
  public func allKeys() -> [CloudKit.CKRecord.FieldKey]
  @available(swift 4.2)
  public func changedKeys() -> [CloudKit.CKRecord.FieldKey]
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.userRecord")
@nonobjc public let CKRecordTypeUserRecord: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.parent")
@nonobjc public let CKRecordParentKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.share")
@nonobjc public let CKRecordShareKey: Swift.String
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKDiscoverUserIdentitiesOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var discoverUserIdentitiesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKModifyRecordZonesOperation {
  @available(swift 4.2)
  convenience public init(recordZonesToSave: [CloudKit.CKRecordZone]? = nil, recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID]? = nil)
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneSaveBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ saveResult: Swift.Result<CloudKit.CKRecordZone, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneDeleteBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ deleteResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifyRecordZonesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, watchOS 3.0, *)
@available(tvOS, unavailable)
@nonobjc extension CloudKit.CKDiscoverAllUserIdentitiesOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var discoverAllUserIdentitiesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKModifyRecordsOperation {
  @available(swift 4.2)
  convenience public init(recordsToSave: [CloudKit.CKRecord]? = nil, recordIDsToDelete: [CloudKit.CKRecord.ID]? = nil)
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordSaveBlock: ((_ recordID: CloudKit.CKRecord.ID, _ saveResult: Swift.Result<CloudKit.CKRecord, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordDeleteBlock: ((_ recordID: CloudKit.CKRecord.ID, _ deleteResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifyRecordsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKOperation {
  public typealias ID = Swift.String
  @available(swift 4.2)
  @available(macOS 10.12, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
  public var operationID: CloudKit.CKOperation.ID {
    get
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchShareParticipantsOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareParticipantResultBlock: ((_ lookupInfo: CloudKit.CKUserIdentity.LookupInfo, _ shareParticipantResult: Swift.Result<CloudKit.CKShare.Participant, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchShareParticipantsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKShare.Participant {
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  public typealias AcceptanceStatus = CloudKit.CKShare.ParticipantAcceptanceStatus
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantPermission")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantPermission")
  public typealias Permission = CloudKit.CKShare.ParticipantPermission
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.14, message: "renamed to CKShare.ParticipantRole")
  @available(iOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
  @available(tvOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
  @available(watchOS, deprecated, introduced: 5.0, message: "renamed to CKShare.ParticipantRole")
  public typealias Role = CloudKit.CKShare.ParticipantRole
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantType")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantType")
  public typealias ParticipantType = CloudKit.CKShare.ParticipantType
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
public typealias CKShare_Participant_AcceptanceStatus = CloudKit.CKShare.ParticipantAcceptanceStatus
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantPermission")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantPermission")
public typealias CKShare_Participant_Permission = CloudKit.CKShare.ParticipantPermission
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.14, message: "renamed to CKShare.ParticipantRole")
@available(iOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
@available(tvOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
@available(watchOS, deprecated, introduced: 5.0, message: "renamed to CKShare.ParticipantRole")
public typealias CKShare_Participant_Role = CloudKit.CKShare.ParticipantRole
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantType")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantType")
public typealias CKShare_Participant_ParticipantType = CloudKit.CKShare.ParticipantType
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.Reference {
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKRecord.ReferenceAction")
  @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKRecord.ReferenceAction")
  @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKRecord.ReferenceAction")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKRecord.ReferenceAction")
  public typealias Action = CloudKit.CKRecord.ReferenceAction
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKRecord.ReferenceAction")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKRecord.ReferenceAction")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKRecord.ReferenceAction")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKRecord.ReferenceAction")
public typealias CKRecord_Reference_Action = CloudKit.CKRecord.ReferenceAction
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension CloudKit.CKError {
  public var partialErrorsByItemID: [Swift.AnyHashable : Swift.Error]? {
    get
  }
  public var ancestorRecord: CloudKit.CKRecord? {
    get
  }
  public var serverRecord: CloudKit.CKRecord? {
    get
  }
  public var clientRecord: CloudKit.CKRecord? {
    get
  }
  public var retryAfterSeconds: Swift.Double? {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecordZone.ID {
  convenience public init(zoneName: Swift.String = CKRecordZone.ID.defaultZoneName, ownerName: Swift.String = CKCurrentUserDefaultName)
  @available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
  public static let `default`: CloudKit.CKRecordZone.ID
  @available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
  public static let defaultZoneName: Swift.String
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecordZone.ID.defaultZoneName")
@nonobjc public let CKRecordZoneDefaultName: Swift.String
@available(macOS 10.10, iOS 8.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKModifySubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionsToSave: [CloudKit.CKSubscription]? = nil, subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? = nil)
  @available(swift 4.2)
  public var subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionSaveBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ saveResult: Swift.Result<CloudKit.CKSubscription, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionDeleteBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ deleteResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS, introduced: 10.10, deprecated: 12.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(iOS, introduced: 8.0, deprecated: 15.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(tvOS, introduced: 9.0, deprecated: 15.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use modifySubscriptionsResultBlock instead")
  public var modifySubscriptionsCompletionBlock: ((_ savedSubscriptions: [CloudKit.CKSubscription]?, _ deletedSubscriptionIDs: [CloudKit.CKSubscription.ID]?, _ operationError: Swift.Error?) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifySubscriptionsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKQueryOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordMatchedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var queryResultBlock: ((_ operationResult: Swift.Result<CloudKit.CKQueryOperation.Cursor?, Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKQuery {
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
}
@available(macOS 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchDatabaseChangesOperation {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchDatabaseChangesResultBlock: ((_ operationResult: Swift.Result<(serverChangeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public protocol CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
public typealias CKRecordValue = CloudKit.__CKRecordObjCValue
@available(macOS 10.11, iOS 9.0, watchOS 3.0, *)
extension CloudKit.CKRecordKeyValueSetting {
  @nonobjc public subscript<T>(key: CloudKit.CKRecord.FieldKey) -> T? where T : CloudKit.CKRecordValueProtocol {
    get
    set
  }
  @nonobjc public subscript(key: CloudKit.CKRecord.FieldKey) -> CloudKit.CKRecordValueProtocol? {
    get
    set
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.String : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Foundation.Date : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Foundation.Data : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Bool : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Double : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Int : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.UInt : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Int8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.UInt8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Int16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.UInt16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Int32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.UInt32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Int64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.UInt64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Float : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
extension Swift.Array : CloudKit.CKRecordValueProtocol where Element : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSString : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSDate : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSData : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSNumber : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSArray : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.Reference : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKAsset : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, iOS 8.0, watchOS 3.0, *)
@nonobjc extension CoreLocation.CLLocation : CloudKit.CKRecordValueProtocol {
}
