.\" Copyright (c) 2014 Apple Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of Apple Computer nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd June 24, 2021
.Dt SmartCardServices 7
.Os "Apple Computer, Inc."
.Sh NAME
.Nm SmartCardServices
.Nd overview of SmartCard support
.Sh DESCRIPTION
.Nm
is a set of components for macOS SmartCard support.
.Pp
SmartCards which adhere to the PIV standard are supported natively by macOS. Additional smartcard support is provided through the installation of third party drivers.  Access to SmartCard content is possible using the keychain interface.
.Pp
SmartCard certificates are automatically added to a user's keychain when a
SmartCard is inserted and authenticated. SmartCard certificates can be listed with the
.Em security
command using the
.Em list-smartcards
or
.Em export-smartcard
options. Keychain Access
GUI cannot be used to manipulate or list these certificates.
.sp
.Bl -tag -width -indent  \" Begins a tagged list 
.It Em Card Provisioning
In order to use smartcards with macOS, identities must be populated into Slot 9a, PIV Authentication, and 9d, Key Managment(KMK, Encryption), and optionally 9c, if signing functions such as mail are to be used.
.It Em Supported Services
.Em Authentication
(Loginwindow, ScreenSaver, ssh, sudo, Safari, PAM Authorization, login, su, Finder)
.sp
Authentication is performed using the PIV Authentication Identity.  For login, the Key management Key (9d, encryption) is used to unlock the keychain
.sp
.Em Encryption
(Mail, Keychain)
.sp
.Em Signing
(Requires signing certificate- Mail, code signing)
.sp
Mail in macOS will use Digital Signing and Encryption Identities on an attached smartcard.  Signing and Encryption buttons will appear in the toolbar when a case-sensitive email address matches the subject or subject alternative name on a smartcard's signing or encryption certificate.
.El
.Sh SETUP
macOS smart card support can be configured for either fixed key mapping or attribute based mapping. To configure fixed keymapping, use
.Xr sc_auth 8
or use the pairing notification dialog which automatically appears when an unassociated SmartCard is inserted into a reader. This dialog can be globally suppressed by:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard UserPairing -bool NO
.Ed
.Pp
To configure attribute mapping, use the appropriate
.Em AttributeMapping
section in the configuration file as described below. A configuration file is not provided by default. If no
.Em AttributeMapping
section exists or the configuration file is missing, attribute matching is not used. If both fixed key mapping and attribute mapping are able to associate the inserted SmartCard with a user, attribute mapping takes precedence.
.Pp
By default, certificates do not need to be trusted to allow pairing. Certificate trust can be globally modified using the
.Em checkCertificateTrust
setting:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard checkCertificateTrust -int <level>

.Ed
Possible trust level values are:
.Bl -tag -width 2n
.It 0
certificate trust check is turned off
.It 1
certificate trust check is turned on
.It 2
certificate trust check is turned on and revocation check is set to the soft level (If the OCSP/CRL server is unreachable, authentication succeeds)
.It 3
certificate trust check is turned on and revocation check is set to the hard level (A verified positive response from the OCSP/CRL server is needed to succeed)
.El
.Sh CONFIGURATION FILE
A configuration file for
.Em SmartCardServices
may be set up using
.Em /etc/SmartcardLogin.plist
and should use a standard plist format. The file permissions must be world readable (644) and recommended ownership is root or a system administrator.
.sp
It may contain the following optional sections:
.Bl -tag -width -indent  \" Begins a tagged list 
.It Em UserSelectorPath
This string value points to the custom UserSelector process which is used for associating users with SmartCards. If this section is not found or the component at that path does not exist, the system UserSelector is used.
.It Em TrustedAuthorities
It is possible to specify the Certificate Authorities to be used for the trust evaluation of SmartCard certificates. This trust works in conjunction with Certificate Trust settings (1, 2, or 3 required) and is also referred to as Certificate Pinning. Place SHA-256 fingerprints of Certificate Authorities (as string values, comma delimited, and without spaces) in an array named TrustedAuthorities. When Certificate Pinning is used, only SmartCard certificates issued by a Certificate Authorities in this list will be evaluated as trusted. Please note that TrustedAuthorities will be ignored when the checkCertificateTrust setting is set to 0 (off).
.It Em AttributeMapping
This section is used to set up an optional attribute mapping for the system UserSelector. For each available user record in OpenDirectory, certificate field values are combined into a format string which is then compared to a predefined attribute string. Specifying multiple OpenDirectory attribute strings or using conditional formatting in the format string is not supported. All items in this section are mandatory.
.Pp
.Em fields
contains an array of string values. This is the list of certificate field names that will be used to compare against the attribute string. The following field names are supported:
.Bl -tag -width 2n
.It -
Common Name
.It -
RFC 822 Name
.It -
NT Principal Name
.It -
Organization
.It -
OrganizationalUnit:1
.It -
OrganizationalUnit:2
.It -
OrganizationalUnit:3
.It -
Country
.El
.Pp
.Em formatString
contains a string value which specifies how certificate fields will be concatenated. Dollar sign plus number (starting with 1) is replaced with the field
value at the appropriate index.
.Pp
.Em dsAttributeString
contains a string value. This defines the target attributes for the desired OpenDirectory user record. It will be compared against the generated format strings.
.El                      \" Ends the list
.Bl -tag -width -indent   \" Begins a tagged list 
.It Em NotEnforcedGroup
.Em NotEnforcedGroup
contains a string value. This defines the name of an Open Directory group that will not be included in mandatory smartcard enforcement, when enabled.  This is sometimes referred to as User Based Enforcement, and provides per-user granularity to
.Em SmartcardServices.

Please see section
.Em SMARTCARD ENFORCEMENT
for more details.


.sp
In addition, the system must be configured to allow users who are not paired with SmartCard to login with password:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard allowUnmappedUsers -int 1
.Ed
.br


Remember to update the FileVault Login settings using the
.Em "diskutil apfs updatePreboot"
command.
.sp
.El                      \" Ends the list
.br
.Sh ATTRIBUTE MAPPING CONFIG EXAMPLE
Sample configuration (Please note that if copying and pasting the provided example, the second line starting with <!DOCTYPE and third line ending with .dtd"> should be a single line.  This example presents it as two lines due to formatting and will need a line break removed to be a properly formatted plist):
.Pp
<?xml version="1.0" encoding="UTF-8"?>
.br
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
.br
<plist version="1.0">
.br
<dict>
.br
    <key>AttributeMapping</key>
.br
    <dict>
.br
        <key>fields</key>
.br
        <array>
.br
            <string>Common Name</string>
.br
            <string>RFC 822 Name</string>
.br
        </array>
.br
        <key>formatString</key>
.br
        <string>$2-$1</string>
.br
        <key>dsAttributeString</key>
.br
        <string>dsAttrTypeNative:longName</string>
.br
    </dict>
.br
</dict>
.br
</plist>
.Pp
In this example, assume that a certificate has a
.Em Common Name
with value "John Appleseed" and an
.Em RFC 822 Name
with value "jappleseed@apple.com". The
.Em formatString
"$1-$2"
will join both values and the result will be
.Em "jappleseed@apple.com-John Appleseed".
This result will be compared to a directory attribute - in this case, the
.Em dsAttrTypeNative:email
field. When a match is found, the corresponding user is considered associated with the SmartCard.
.Sh OFFLINE SMARTCARD LOGIN VIA KERBEROS CACHING
In environments where macOS clients may not always be able to reach Directory Servers, cached SmartCard login support is possible via Kerberos caching. This configuration allows users with network accounts to authenticate via SmartCard when operating outside the enterprise environment. Note: Initial account setup requires machine binding and access to the directory server.
.Sh KERBEROS ATTRIBUTE MAPPING CONFIG EXAMPLE
Sample configuration (Please note that if copying and pasting the provided example, the second line starting with <!DOCTYPE and third line ending with .dtd"> should be a single line.  This example presents it as two lines due to formatting and will need a line break removed to be a properly formatted plist).
.sp
The following example SmartcardLogin.plist file matches the Subject Alternative Name type, NT Principal Name, in the identity on the SmartCard against the Directory Server's altSecurityIdentities field (Kerberos), allowing for offline login and authentication:
.Pp
<?xml version="1.0" encoding="UTF-8"?>
.br
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
.br
<plist version="1.0">
.br
<dict>
.br
    <key>AttributeMapping</key>
.br
    <dict>
.br
        <key>fields</key>
.br
        <array>
.br
            <string>NT Principal Name</string>
.br
        </array>
.br
        <key>formatString</key>
.br
        <string>Kerberos:$1</string>
.br
        <key>dsAttributeString</key>
.br
        <string>dsAttrTypeStandard:AltSecurityIdentities</string>
.br
    </dict>
.br
</dict>
.br
</plist>
.Ss Additional considerations
Certificate Checking:
.Em checkCertificateTrust
should not be set to 3 (hard revocation check) if certificate revocation or OCSP servers are not always available to the client machines.
.br
User accounts should be created setting the "Create Mobile User on Login" flag in the Directory Utility application, when binding client machines via the command line, or with a Configuration Profile. When used in conjunction with Kerberos Caching, a mobile user account will allow users to authenticate either online and offline.
.Sh SMARTCARD ENFORCEMENT
There may be a requirement to use a SmartCard for user authentication in your environment. Enforcing the use of the SmartCard for the entire system can be done using MDM or a command:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard enforceSmartCard -bool true
.Ed

In addition, the system might be configured to allow users who are not paired with SmartCard to login with password using MDM or the command:

.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard allowUnmappedUsers -int 1
.Ed

Remember to update the FileVault Login settings using the
.Em "diskutil apfs updatePreboot"
command.

It is also possible to specify an entire group whose members will be exempted from using the card. See the
.Em NotEnforcedGroup
section above for usage. Please note that this option is not compatible with FileVault Unlock.

In addition, it is possible to use the attribute
.Em kDSNativeAttrTypePrefix:SmartCardEnforcement
in the OpenDirectory user record. It always refers to that specific user and can take the following values:
.Bl -tag -width 2n
.It 0
the system default is respected
.It 1
card use is always enforced
.It 2
card enforcement is always disabled, the user can use a password
.El

If ActiveDirectory is used in your environment, the value of the
.Em userAccountControl
attribute is respected.
.Ss Temporarily disabling card enforcement
In case the system is configured for SmartCard enforced login and this cannot be used, the following command can be used to enable password login once:

.Bd -literal -offset indent
security filevault skip-sc-enforcement
.Ed

For more details please see the man page of the
.Em security
command.

.Ss Evaluation order
The exceptions for enforcement are processed in the following order:
.Bl -tag -width 2n
.It -
OD kDSNativeAttrTypePrefix:SmartCardEnforcement
.It -
AD userAccountControl
.It -
NotEnforced group (not available in FileVault Unlock)
.It -
AllowUnmappedUsers setting
.It -
System-wide setting using defaults or MDM
.El

.Sh EXTENSIONS
Extensions can be created using the Xcode SmartCard Token Extension template. Refer to the developer documentation for further details.
.br
To enable the app extension and make the token available to the system for authentication, launch the sc_auth command line tool with value of '‘com.apple.ctk.class-id’ from Info.plist:
.Bd -literal -offset indent
sudo sc_auth enable_for_login -t  com.example.HostApp.TokenExtension
.Ed
.Sh SYSTEM REPORT
It is possible to show the current status of SmartCardServices by command:
.Bd -literal -offset indent
system_profiler SPSmartCardsDataType
.Ed
.sp
Information presented includes reader, reader driver, card, card driver, available smartcards and provisioned certificates.
.sp
.Sh USB SMART CARD READER DRIVERS
OS X has built-in support for USB CCID class-compliant SmartCard readers. For other readers, install the reader driver in
.Pa /usr/local/libexec/SmartCardServices/drivers .
Each driver is a bundle. The bundle contains an XML file Info.plist which contains the device's USB vendor ID and product ID. For detailed description of the plist format and how to write a reader driver, see http://pcsclite.alioth.debian.org/api/group__IFDHandler.html
.Sh SMART CARD APDU LOGGING
It is possible to turn on logging for SmartCards by setting the global preference:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard Logging -bool yes
.Ed
.Pp
After a SmartCard reader is connected (or after reboot) all operations including contents of sent and received APDU messages are logged into the system log. Logging uses the subsystem
.Em com.apple.CryptoTokenKit
and category
.Em APDULog
so it is possible to set up logging with a predicate (see
.Xr log 1 ). Example:
.Bd -literal -offset indent
log show --predicate '(subsystem == "com.apple.CryptoTokenKit") && (category == "APDULog")'
.Ed
.Pp
To avoid security and privacy risks that could occur if logging is turned on indefinitely, the logging setting is one-shot - it must be turned on by the command above to start logging again with a new reader. This includes unplugging and replugging the same reader.  If a USB token is used, it is treated as both a card and a reader.  Use ssh from a remote system to log back in and re-enable logging as needed
.Sh DISABLING SMART CARD DRIVERS
It is possible to turn off token drivers by setting the global preference:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard DisabledTokens -array com.apple.CryptoTokenKit.pivtoken
.Ed
.Pp
This statement disables built-in PIV SmartCard driver, but it can be used to disable any token driver or set of token drivers just by replacing token driver extension identifier.
.Sh ENTITLEMENT
Sandboxed PCSC clients require 'com.apple.security.smartcard=YES' entitlement. Non-sandboxed PCSC clients do not require such entitlement (in order to keep backward compatibility with macOS < 10.10). Users of TKSmartCard* API from CryptoTokenKit.framework always require that entitlement no matter whether they are sandboxed or not.
.Sh SEE ALSO
.Xr defaults 1 ,
.Xr log 1 ,
.Xr security 1 ,
.Xr UserSelector 7 ,
.Xr pam_smartcard 8 ,
.Xr sc_auth 8 ,
.Xr ssh-keychain 8
