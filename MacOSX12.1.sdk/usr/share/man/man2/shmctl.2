.\"   $OpenBSD: shmctl.2,v 1.2 1996/10/08 01:20:15 michaels Exp $
.\"	$NetBSD: shmctl.2,v 1.1 1995/10/16 23:49:30 jtc Exp $	
.\"
.\" Copyright (c) 1995 Frank van der Linden
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed for the NetBSD Project
.\"      by Frank van der Linden
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"/
.Dd August 17, 1995
.Dt SHMCTL 2
.Os
.Sh NAME
.Nm shmctl
.Nd shared memory control operations
.Sh SYNOPSIS
.Fd #include <sys/shm.h>
.Ft int
.Fo shmctl
.Fa "int shmid"
.Fa "int cmd"
.Fa "struct shmid_ds *buf"
.Fc
.Sh DESCRIPTION
The
.Fn shmctl
system call performs some control operations on the shared memory area
specified by
.Fa shmid .
Each shared memory segment has a data structure associated with it,
parts of which may be altered by
.Fn shmctl
and parts of which determine the actions of
.Fn shmctl .
This structure is defined as follows in
.Aq Pa sys/shm.h :
.Bd -literal
struct shmid_ds {
    struct ipc_perm  shm_perm;     /* operation permissions */
    size_t           shm_segsz;    /* size of segment in bytes */
    pid_t            shm_lpid;     /* pid of last shm op */
    pid_t            shm_cpid;     /* pid of creator */
    short            shm_nattch;   /* # of current attaches */
    time_t           shm_atime;    /* last shmat() time*/
    time_t           shm_dtime;    /* last shmdt() time */
    time_t           shm_ctime;    /* last change by shmctl() */
    void            *shm_internal; /* sysv stupidity */
};
.Ed
.Pp
The
.Bf -literal
ipc_perm
.Ef
structure used inside the
.Bf -literal
shmid_ds
.Ef
structure is defined in
.Aq Pa sys/ipc.h
and looks like this:
.Bd -literal
struct ipc_perm {
  uid_t           uid;   /* Owner's user ID */
  gid_t           gid;   /* Owner's group ID */
  uid_t           cuid;  /* Creator's user ID */
  gid_t           cgid;  /* Creator's group ID */
  mode_t          mode;  /* r/w permission (see chmod(2)) */
  unsigned short  _seq;  /* Reserved for internal use */
  key_t           _key;  /* Reserved for internal use */
};
.Ed
.Pp
The operation to be performed by
.Fn shmctl
is specified in
.Fa cmd
and is one of:
.Bl -tag -width IPC_RMIDX
.It Dv IPC_STAT
Gather information about the shared memory segment and place it in the
structure pointed to by
.Fa buf .
.It Dv IPC_SET
Set the value of the
.Va shm_perm.uid ,
.Va shm_perm.gid
and
.Va shm_perm.mode
fields in the structure associated with
.Fa shmid .
The values are taken from the corresponding fields in the structure
pointed to by
.Fa buf .
This operation can only be executed by the super-user, or a process that
has an effective user id equal to either 
.Va shm_perm.cuid
or
.Va shm_perm.uid
in the data structure associated with the shared memory segment.
.It Dv IPC_RMID
Remove the shared memory segment specified by
.Fa shmid
and destroy the data associated with it. Only the super-user or a process
with an effective uid equal to the 
.Va shm_perm.cuid
or
.Va shm_perm.uid
values in the data structure associated with the queue can do this.
.El
.Pp
The read and write permissions on a shared memory identifier
are determined by the
.Va shm_perm.mode
field in the same way as is
done with files (see
.Xr chmod 2 ),
but the effective uid can match either the
.Va shm_perm.cuid
field or the
.Va shm_perm.uid
field, and the
effective gid can match either
.Va shm_perm.cgid
or
.Va shm_perm.gid .
.Sh RETURN VALUES
Upon successful completion, a value of 0 is returned.
Otherwise, -1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn shmctl
will fail if:
.Bl -tag -width Er
.\" ===========
.It Bq Er EACCES
The command is IPC_STAT
and the caller has no read permission for this shared memory segment.
.\" ===========
.It Bq Er EFAULT
.Fa buf
specifies an invalid address.
.\" ===========
.It Bq Er EINVAL
.Fa shmid
is not a valid shared memory segment identifier.
.Va cmd
is not a valid command.
.\" ===========
.It Bq Er EPERM
.Fa cmd
is equal to IPC_SET or IPC_RMID and the caller is not the super-user,\
nor does the effective uid match either the
.Va shm_perm.uid
or
.Va shm_perm.cuid
fields of the data structure associated with the shared memory segment.
An attempt is made to increase the value of
.Va shm_qbytes
through IPC_SET
but the caller is not the super-user.
.El
.Sh LEGACY SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/ipc.h>
.Fd #include <sys/shm.h>
.Pp
All of these include files are necessary.
.Sh LEGACY DESCRIPTION
The
.Bf -literal
ipc_perm
.Ef
structure used inside the
.Bf -literal
shmid_ds
.Ef
structure, as defined in
.Aq Pa sys/ipc.h ,
looks like this:
.Bd -literal
struct ipc_perm {
    __uint16_t cuid;  /* Creator's user id */
    __uint16_t cgid;  /* Creator's group id */
    __uint16_t uid;   /* Owner's user id */
    __uint16_t gid;   /* Owner's group id */
    mode_t     mode;  /* r/w permission (see chmod(2)) */
    __uint16_t seq;   /* Reserved for internal use */
    key_t      key;   /* Reserved for internal use */
};
.Ed
.Pp
This structure is maintained for binary backward compatibility
with previous versions of the interface.
New code should not use this interface,
because ID values may be truncated.
.Pp
Specifically,
LEGACY mode limits the allowable uid/gid ranges to 0-32767.
If the user has a UID that is out of this range (e.g., "nobody"),
software using the LEGACY API will not behave as expected.
.Sh SEE ALSO
.Xr shmat 2 ,
.Xr shmdt 2 ,
.Xr shmget 2 ,
.Xr compat 5
