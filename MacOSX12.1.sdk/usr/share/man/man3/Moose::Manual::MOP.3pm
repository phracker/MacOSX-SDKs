.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Manual::MOP 3"
.TH Moose::Manual::MOP 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Manual::MOP \- The Moose (and Class::MOP) meta API
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Moose provides a powerful introspection \s-1API\s0 built on top of
\&\f(CW\*(C`Class::MOP\*(C'\fR. \*(L"\s-1MOP\*(R"\s0 stands for Meta-Object Protocol. In plainer
English, a \s-1MOP\s0 is an \s-1API\s0 for performing introspection on classes,
attributes, methods, and so on.
.PP
In fact, it is \f(CW\*(C`Class::MOP\*(C'\fR that provides many of Moose's core
features, including attributes, before/after/around method modifiers,
and immutability. In most cases, Moose takes an existing \f(CW\*(C`Class::MOP\*(C'\fR
class and subclasses it to add additional features. Moose also adds
some entirely new features of its own, such as roles, the augment
modifier, and types.
.PP
If you're interested in the \s-1MOP,\s0 it's important to know about
\&\f(CW\*(C`Class::MOP\*(C'\fR so you know what docs to read. Often, the introspection
method that you're looking for is defined in a \f(CW\*(C`Class::MOP\*(C'\fR class,
rather than Moose itself.
.PP
The \s-1MOP\s0 provides more than just \fIread-only\fR introspection. It also
lets you add attributes and methods, apply roles, and much more. In
fact, all of the declarative Moose sugar is simply a thin layer on top
of the \s-1MOP API.\s0
.PP
If you want to write Moose extensions, you'll need to learn some of
the \s-1MOP API.\s0 The introspection methods are also handy if you want to
generate docs or inheritance graphs, or do some other runtime
reflection.
.PP
This document is not a complete reference for the meta \s-1API.\s0 We're just
going to cover some of the highlights, and give you a sense of how it
all works. To really understand it, you'll have to read a lot of other
docs, and possibly even dig into the Moose guts a bit.
.SH "GETTING STARTED"
.IX Header "GETTING STARTED"
The usual entry point to the meta \s-1API\s0 is through a class's metaclass
object, which is a Moose::Meta::Class. This is available by calling
the \f(CW\*(C`meta\*(C'\fR method on a class or object:
.PP
.Vb 1
\&  package User;
\&
\&  use Moose;
\&
\&  my $meta = _\|_PACKAGE_\|_\->meta;
.Ve
.PP
The \f(CW\*(C`meta\*(C'\fR method is added to a class when it uses Moose.
.PP
You can also use \f(CW\*(C`Class::MOP::Class\->initialize($name)\*(C'\fR to get a
metaclass object for any class. This is safer than calling \f(CW\*(C`$class\->meta\*(C'\fR when you're not sure that the class has a meta method.
.PP
The \f(CW\*(C`Class::MOP::Class\->initialize\*(C'\fR constructor will return an
existing metaclass if one has already been created (via Moose or some
other means). If it hasn't, it will return a new \f(CW\*(C`Class::MOP::Class\*(C'\fR
object. This will work for classes that use Moose, meta \s-1API\s0 classes,
and classes which don't use Moose at all.
.SH "USING THE METACLASS OBJECT"
.IX Header "USING THE METACLASS OBJECT"
The metaclass object can tell you about a class's attributes, methods,
roles, parents, and more. For example, to look at all of the class's
attributes:
.PP
.Vb 3
\&  for my $attr ( $meta\->get_all_attributes ) {
\&      print $attr\->name, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`get_all_attributes\*(C'\fR method is documented in
\&\f(CW\*(C`Class::MOP::Class\*(C'\fR. For Moose-using classes, it returns a list of
Moose::Meta::Attribute objects for attributes defined in the class
and its parents.
.PP
You can also get a list of methods:
.PP
.Vb 3
\&  for my $method ( $meta\->get_all_methods ) {
\&      print $method\->fully_qualified_name, "\en";
\&  }
.Ve
.PP
Now we're looping over a list of Moose::Meta::Method objects. Note
that some of these objects may actually be a subclass of
Moose::Meta::Method, as Moose uses different classes to represent
wrapped methods, delegation methods, constructors, etc.
.PP
We can look at a class's parent classes and subclasses:
.PP
.Vb 3
\&  for my $class ( $meta\->linearized_isa ) {
\&      print "$class\en";
\&  }
\&
\&  for my $subclass ( $meta\->subclasses ) {
\&      print "$subclass\en";
\&  }
.Ve
.PP
Note that both these methods return class \fInames\fR, not metaclass
objects.
.SH "ALTERING CLASSES WITH THE MOP"
.IX Header "ALTERING CLASSES WITH THE MOP"
The metaclass object can change the class directly, by adding
attributes, methods, etc.
.PP
As an example, we can add a method to a class:
.PP
.Vb 1
\&  $meta\->add_method( \*(Aqsay\*(Aq => sub { print @_, "\en" } );
.Ve
.PP
Or an attribute:
.PP
.Vb 1
\&  $meta\->add_attribute( \*(Aqsize\*(Aq => ( is => \*(Aqrw\*(Aq, isa  => \*(AqInt\*(Aq ) );
.Ve
.PP
Obviously, this is much more cumbersome than using Perl syntax or
Moose sugar for defining methods and attributes, but this \s-1API\s0 allows
for very powerful extensions.
.PP
You might remember that we've talked about making classes immutable
elsewhere in the manual. This is a good practice. However, once a
class is immutable, calling any of these update methods will throw an
exception.
.PP
You can make a class mutable again simply by calling \f(CW\*(C`$meta\->make_mutable\*(C'\fR. Once you're done changing it, you can
restore immutability by calling \f(CW\*(C`$meta\->make_immutable\*(C'\fR.
.PP
However, the most common use for this part of the meta \s-1API\s0 is as
part of Moose extensions. These extensions should assume that they are
being run before you make a class immutable.
.SH "GOING FURTHER"
.IX Header "GOING FURTHER"
If you're interested in extending Moose, we recommend reading all of
the \*(L"Meta\*(R" and \*(L"Extending\*(R" recipes in the Moose::Cookbook. Those
recipes show various practical applications of the \s-1MOP.\s0
.PP
If you'd like to write your own extensions, one of the best ways to
learn more about this is to look at other similar extensions to see
how they work. You'll probably also need to read various \s-1API\s0 docs,
including the docs for the various \f(CW\*(C`Moose::Meta::*\*(C'\fR and
\&\f(CW\*(C`Class::MOP::*\*(C'\fR classes.
.PP
Finally, we welcome questions on the Moose mailing list and
\&\s-1IRC.\s0 Information on the mailing list, \s-1IRC,\s0 and more references can be
found in the Moose.pm docs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
