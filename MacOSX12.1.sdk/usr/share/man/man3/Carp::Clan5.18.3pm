.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Carp::Clan 3"
.TH Carp::Clan 3 "2009-10-24" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Carp::Clan \- Report errors from perspective of caller of a "clan" of modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& carp    \- warn of errors (from perspective of caller)
\&
\& cluck   \- warn of errors with stack backtrace
\&
\& croak   \- die of errors (from perspective of caller)
\&
\& confess \- die of errors with stack backtrace
\&
\&    use Carp::Clan qw(^MyClan::);
\&    croak "We\*(Aqre outta here!";
\&
\&    use Carp::Clan;
\&    confess "This is how we got here!";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is based on "\f(CW\*(C`Carp.pm\*(C'\fR\*(L" from Perl 5.005_03. It has been
modified to skip all package names matching the pattern given in
the \*(R"use\*(L" statement inside the \*(R"\f(CW\*(C`qw()\*(C'\fR" term (or argument list).
.PP
Suppose you have a family of modules or classes named \*(L"Pack::A\*(R",
\&\*(L"Pack::B\*(R" and so on, and each of them uses "\f(CW\*(C`Carp::Clan qw(^Pack::);\*(C'\fR"
(or at least the one in which the error or warning gets raised).
.PP
Thus when for example your script \*(L"tool.pl\*(R" calls module \*(L"Pack::A\*(R",
and module \*(L"Pack::A\*(R" calls module \*(L"Pack::B\*(R", an exception raised in
module \*(L"Pack::B\*(R" will appear to have originated in \*(L"tool.pl\*(R" where
\&\*(L"Pack::A\*(R" was called, and not in \*(L"Pack::A\*(R" where \*(L"Pack::B\*(R" was called,
as the unmodified "\f(CW\*(C`Carp.pm\*(C'\fR" would try to make you believe \f(CW\*(C`:\-)\*(C'\fR.
.PP
This works similarly if \*(L"Pack::B\*(R" calls \*(L"Pack::C\*(R" where the
exception is raised, etcetera.
.PP
In other words, this blames all errors in the "\f(CW\*(C`Pack::*\*(C'\fR" modules
on the user of these modules, i.e., on you. \f(CW\*(C`;\-)\*(C'\fR
.PP
The skipping of a clan (or family) of packages according to a pattern
describing its members is necessary in cases where these modules are
not classes derived from each other (and thus when examining \f(CW@ISA\fR
\&\- as in the original "\f(CW\*(C`Carp.pm\*(C'\fR" module \- doesn't help).
.PP
The purpose and advantage of this is that a \*(L"clan\*(R" of modules can work
together (and call each other) and throw exceptions at various depths
down the calling hierarchy and still appear as a monolithic block (as
though they were a single module) from the perspective of the caller.
.PP
In case you just want to ward off all error messages from the module
in which you "\f(CW\*(C`use Carp::Clan\*(C'\fR\*(L", i.e., if you want to make all error
messages or warnings to appear to originate from where your module
was called (this is what you usually used to \*(R"\f(CW\*(C`use Carp;\*(C'\fR" for \f(CW\*(C`;\-)\*(C'\fR),
instead of in your module itself (which is what you can do with a
\&\*(L"die\*(R" or \*(L"warn\*(R" anyway), you do not need to provide a pattern,
the module will automatically provide the correct one for you.
.PP
I.e., just "\f(CW\*(C`use Carp::Clan;\*(C'\fR\*(L" without any arguments and call \*(R"carp\*(L"
or \*(R"croak" as appropriate, and they will automatically defend your
module against all blames!
.PP
In other words, a pattern is only necessary if you want to make
several modules (more than one) work together and appear as though
they were only one.
.SS "Forcing a Stack Trace"
.IX Subsection "Forcing a Stack Trace"
As a debugging aid, you can force "\f(CW\*(C`Carp::Clan\*(C'\fR\*(L" to treat a \*(R"croak\*(L" as
a \*(R"confess\*(L" and a \*(R"carp\*(L" as a \*(R"cluck". In other words, force a detailed
stack trace to be given. This can be very helpful when trying to
understand why, or from where, a warning or error is being generated.
.PP
This feature is enabled either by \*(L"importing\*(R" the non-existent symbol
\&'verbose', or by setting the global variable "\f(CW$Carp::Clan::Verbose\fR"
to a true value.
.PP
You would typically enable it by saying
.PP
.Vb 1
\&    use Carp::Clan qw(verbose);
.Ve
.PP
Note that you can both specify a \*(L"family pattern\*(R" and the string \*(L"verbose\*(R"
inside the "\f(CW\*(C`qw()\*(C'\fR\*(L" term (or argument list) of the \*(R"use\*(L" statement, but
consider that a pattern of packages to skip is pointless when \*(R"verbose"
causes a full stack trace anyway.
.SH "BUGS"
.IX Header "BUGS"
The "\f(CW\*(C`Carp::Clan\*(C'\fR\*(L" routines don't handle exception objects currently.
If called with a first argument that is a reference, they simply
call \*(R"\f(CW\*(C`die()\*(C'\fR\*(L" or \*(R"\f(CW\*(C`warn()\*(C'\fR", as appropriate.
