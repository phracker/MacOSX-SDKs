.TH "MPSCNNBinaryFullyConnectedNode" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNBinaryFullyConnectedNode
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSNNGraphNodes\&.h>\fP
.PP
Inherits \fBMPSCNNBinaryConvolutionNode\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithSource:weights:scaleValue:type:flags:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:\fP"
.br
.in -1c
.SS "Class Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) + \fBnodeWithSource:weights:scaleValue:type:flags:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) + \fBnodeWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBA\fP \fBMPSNNFilterNode\fP representing a \fBMPSCNNBinaryFullyConnected\fP kernel 
.SH "Method Documentation"
.PP 
.SS "\- (nonnull instancetype) initWithSource: (\fBMPSNNImageNode\fP *__nonnull) sourceNode(nonnull id< \fBMPSCNNConvolutionDataSource\fP >) weights(const float *__nullable) outputBiasTerms(const float *__nullable) outputScaleTerms(const float *__nullable) inputBiasTerms(const float *__nullable) inputScaleTerms(\fBMPSCNNBinaryConvolutionType\fP) type(\fBMPSCNNBinaryConvolutionFlags\fP) flags"
Init a node representing a \fBMPSCNNBinaryFullyConnected\fP kernel 
.PP
\fBParameters:\fP
.RS 4
\fIsourceNode\fP The \fBMPSNNImageNode\fP representing the source \fBMPSImage\fP for the filter 
.br
\fIweights\fP \fBA\fP pointer to a valid object conforming to the \fBMPSCNNConvolutionDataSource\fP protocol\&. This object is provided by you to encapsulate storage for convolution weights and biases\&. 
.br
\fIoutputBiasTerms\fP \fBA\fP pointer to bias terms to be applied to the convolution output\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIoutputScaleTerms\fP \fBA\fP pointer to scale terms to be applied to binary convolution results per output feature channel\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIinputBiasTerms\fP \fBA\fP pointer to offset terms to be applied to the input before convolution and before input scaling\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIinputScaleTerms\fP \fBA\fP pointer to scale terms to be applied to the input before convolution, but after input biasing\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fItype\fP What kind of binarization strategy is to be used\&. 
.br
\fIflags\fP See documentation of MPSCNNBinaryConvolutionFlags\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new MPSNNFilter node for a \fBMPSCNNBinaryFullyConnected\fP kernel\&. 
.RE
.PP

.PP
Implements \fBMPSCNNBinaryConvolutionNode\fP\&.
.SS "\- (nonnull instancetype) initWithSource: (\fBMPSNNImageNode\fP *__nonnull) sourceNode(nonnull id< \fBMPSCNNConvolutionDataSource\fP >) weights(float) scaleValue(\fBMPSCNNBinaryConvolutionType\fP) type(\fBMPSCNNBinaryConvolutionFlags\fP) flags"
Init a node representing a \fBMPSCNNBinaryFullyConnected\fP kernel 
.PP
\fBParameters:\fP
.RS 4
\fIsourceNode\fP The \fBMPSNNImageNode\fP representing the source \fBMPSImage\fP for the filter 
.br
\fIweights\fP \fBA\fP pointer to a valid object conforming to the \fBMPSCNNConvolutionDataSource\fP protocol\&. This object is provided by you to encapsulate storage for convolution weights and biases\&. 
.br
\fIscaleValue\fP \fBA\fP floating point value used to scale the entire convolution\&. 
.br
\fItype\fP What kind of binarization strategy is to be used\&. 
.br
\fIflags\fP See documentation of MPSCNNBinaryConvolutionFlags\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new MPSNNFilter node for a \fBMPSCNNBinaryFullyConnected\fP kernel\&. 
.RE
.PP

.PP
Implements \fBMPSCNNBinaryConvolutionNode\fP\&.
.SS "+ (nonnull instancetype) nodeWithSource: (\fBMPSNNImageNode\fP *__nonnull) sourceNode(nonnull id< \fBMPSCNNConvolutionDataSource\fP >) weights(const float *__nullable) outputBiasTerms(const float *__nullable) outputScaleTerms(const float *__nullable) inputBiasTerms(const float *__nullable) inputScaleTerms(\fBMPSCNNBinaryConvolutionType\fP) type(\fBMPSCNNBinaryConvolutionFlags\fP) flags"
Init an autoreleased node representing a \fBMPSCNNBinaryFullyConnected\fP kernel 
.PP
\fBParameters:\fP
.RS 4
\fIsourceNode\fP The \fBMPSNNImageNode\fP representing the source \fBMPSImage\fP for the filter 
.br
\fIweights\fP \fBA\fP pointer to a valid object conforming to the \fBMPSCNNConvolutionDataSource\fP protocol\&. This object is provided by you to encapsulate storage for convolution weights and biases\&. 
.br
\fIoutputBiasTerms\fP \fBA\fP pointer to bias terms to be applied to the convolution output\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIoutputScaleTerms\fP \fBA\fP pointer to scale terms to be applied to binary convolution results per output feature channel\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIinputBiasTerms\fP \fBA\fP pointer to offset terms to be applied to the input before convolution and before input scaling\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fIinputScaleTerms\fP \fBA\fP pointer to scale terms to be applied to the input before convolution, but after input biasing\&. See \fBMPSCNNBinaryConvolution\fP for more details\&. 
.br
\fItype\fP What kind of binarization strategy is to be used\&. 
.br
\fIflags\fP See documentation of MPSCNNBinaryConvolutionFlags\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new MPSNNFilter node for a \fBMPSCNNBinaryFullyConnected\fP kernel\&. 
.RE
.PP

.PP
Implements \fBMPSCNNBinaryConvolutionNode\fP\&.
.SS "+ (nonnull instancetype) nodeWithSource: (\fBMPSNNImageNode\fP *__nonnull) sourceNode(nonnull id< \fBMPSCNNConvolutionDataSource\fP >) weights(float) scaleValue(\fBMPSCNNBinaryConvolutionType\fP) type(\fBMPSCNNBinaryConvolutionFlags\fP) flags"
Init an autoreleased node representing a \fBMPSCNNBinaryFullyConnected\fP kernel 
.PP
\fBParameters:\fP
.RS 4
\fIsourceNode\fP The \fBMPSNNImageNode\fP representing the source \fBMPSImage\fP for the filter 
.br
\fIweights\fP \fBA\fP pointer to a valid object conforming to the \fBMPSCNNConvolutionDataSource\fP protocol\&. This object is provided by you to encapsulate storage for convolution weights and biases\&. 
.br
\fIscaleValue\fP \fBA\fP floating point value used to scale the entire convolution\&. 
.br
\fItype\fP What kind of binarization strategy is to be used\&. 
.br
\fIflags\fP See documentation of MPSCNNBinaryConvolutionFlags\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new MPSNNFilter node for a \fBMPSCNNBinaryFullyConnected\fP kernel\&. 
.RE
.PP

.PP
Implements \fBMPSCNNBinaryConvolutionNode\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
