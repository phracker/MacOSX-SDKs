.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::MOP::Method 3"
.TH Class::MOP::Method 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::MOP::Method \- Method Meta Object
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Method Protocol is very small, since methods in Perl 5 are just
subroutines in a specific package. We provide a very basic
introspection interface.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "\fBClass::MOP::Method\->wrap($code, \fB%options\fB)\fR" 4
.el .IP "\fBClass::MOP::Method\->wrap($code, \f(CB%options\fB)\fR" 4
.IX Item "Class::MOP::Method->wrap($code, %options)"
This is the constructor. It accepts a method body in the form of
either a code reference or a Class::MOP::Method instance, followed
by a hash of options.
.Sp
The options are:
.RS 4
.IP "\(bu" 8
name
.Sp
The method name (without a package name). This is required if \f(CW$code\fR
is a coderef.
.IP "\(bu" 8
package_name
.Sp
The package name for the method. This is required if \f(CW$code\fR is a
coderef.
.IP "\(bu" 8
associated_metaclass
.Sp
An optional Class::MOP::Class object. This is the metaclass for the
method's class.
.RE
.RS 4
.RE
.ie n .IP "\fB\fB$metamethod\fB\->clone(%params)\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->clone(%params)\fR" 4
.IX Item "$metamethod->clone(%params)"
This makes a shallow clone of the method object. In particular,
subroutine reference itself is shared between all clones of a given
method.
.Sp
When a method is cloned, the original method object will be available
by calling \f(CW\*(C`original_method\*(C'\fR on the clone.
.ie n .IP "\fB\fB$metamethod\fB\->body\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->body\fR" 4
.IX Item "$metamethod->body"
This returns a reference to the method's subroutine.
.ie n .IP "\fB\fB$metamethod\fB\->name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->name\fR" 4
.IX Item "$metamethod->name"
This returns the method's name
.ie n .IP "\fB\fB$metamethod\fB\->package_name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->package_name\fR" 4
.IX Item "$metamethod->package_name"
This returns the method's package name.
.ie n .IP "\fB\fB$metamethod\fB\->fully_qualified_name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->fully_qualified_name\fR" 4
.IX Item "$metamethod->fully_qualified_name"
This returns the method's fully qualified name (package name and
method name).
.ie n .IP "\fB\fB$metamethod\fB\->associated_metaclass\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->associated_metaclass\fR" 4
.IX Item "$metamethod->associated_metaclass"
This returns the Class::MOP::Class object for the method, if one
exists.
.ie n .IP "\fB\fB$metamethod\fB\->original_method\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->original_method\fR" 4
.IX Item "$metamethod->original_method"
If this method object was created as a clone of some other method
object, this returns the object that was cloned.
.ie n .IP "\fB\fB$metamethod\fB\->original_name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->original_name\fR" 4
.IX Item "$metamethod->original_name"
This returns the method's original name, wherever it was first
defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the name from the \fIfirst\fR method in the chain of clones.
.ie n .IP "\fB\fB$metamethod\fB\->original_package_name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->original_package_name\fR" 4
.IX Item "$metamethod->original_package_name"
This returns the method's original package name, wherever it was first
defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the package name from the \fIfirst\fR method in the chain of
clones.
.ie n .IP "\fB\fB$metamethod\fB\->original_fully_qualified_name\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->original_fully_qualified_name\fR" 4
.IX Item "$metamethod->original_fully_qualified_name"
This returns the method's original fully qualified name, wherever it
was first defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the fully qualified name from the \fIfirst\fR method in the chain
of clones.
.ie n .IP "\fB\fB$metamethod\fB\->is_stub\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->is_stub\fR" 4
.IX Item "$metamethod->is_stub"
Returns true if the method is just a stub:
.Sp
.Vb 1
\&  sub foo;
.Ve
.ie n .IP "\fB\fB$metamethod\fB\->attach_to_class($metaclass)\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->attach_to_class($metaclass)\fR" 4
.IX Item "$metamethod->attach_to_class($metaclass)"
Given a Class::MOP::Class object, this method sets the associated
metaclass for the method. This will overwrite any existing associated
metaclass.
.ie n .IP "\fB\fB$metamethod\fB\->detach_from_class\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->detach_from_class\fR" 4
.IX Item "$metamethod->detach_from_class"
Removes any associated metaclass object for the method.
.ie n .IP "\fB\fB$metamethod\fB\->execute(...)\fR" 4
.el .IP "\fB\f(CB$metamethod\fB\->execute(...)\fR" 4
.IX Item "$metamethod->execute(...)"
This executes the method. Any arguments provided will be passed on to
the method itself.
.IP "\fBClass::MOP::Method\->meta\fR" 4
.IX Item "Class::MOP::Method->meta"
This will return a Class::MOP::Class instance for this class.
.Sp
It should also be noted that Class::MOP will actually bootstrap
this module by installing a number of attribute meta-objects into its
metaclass.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
