.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPC::Semaphore 3pm"
.TH IPC::Semaphore 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Semaphore \- SysV Semaphore IPC object class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use IPC::SysV qw(IPC_PRIVATE S_IRUSR S_IWUSR IPC_CREAT);
\&    use IPC::Semaphore;
\&
\&    $sem = IPC::Semaphore\->new(IPC_PRIVATE, 10, S_IRUSR | S_IWUSR | IPC_CREAT);
\&
\&    $sem\->setall( (0) x 10);
\&
\&    @sem = $sem\->getall;
\&
\&    $ncnt = $sem\->getncnt;
\&
\&    $zcnt = $sem\->getzcnt;
\&
\&    $ds = $sem\->stat;
\&
\&    $sem\->remove;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A class providing an object based interface to SysV \s-1IPC\s0 semaphores.
.SH "METHODS"
.IX Header "METHODS"
.IP "new ( \s-1KEY , NSEMS , FLAGS \s0)" 4
.IX Item "new ( KEY , NSEMS , FLAGS )"
Create a new semaphore set associated with \f(CW\*(C`KEY\*(C'\fR. \f(CW\*(C`NSEMS\*(C'\fR is the number
of semaphores in the set. A new set is created if
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR is equal to \f(CW\*(C`IPC_PRIVATE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR does not already have a semaphore identifier
associated with it, and \f(CW\*(C`\f(CIFLAGS\f(CW & IPC_CREAT\*(C'\fR is true.
.RE
.RS 4
.Sp
On creation of a new semaphore set \f(CW\*(C`FLAGS\*(C'\fR is used to set the
permissions.  Be careful not to set any flags that the Sys V
\&\s-1IPC\s0 implementation does not allow: in some systems setting
execute bits makes the operations fail.
.RE
.IP "getall" 4
.IX Item "getall"
Returns the values of the semaphore set as an array.
.IP "getncnt ( \s-1SEM \s0)" 4
.IX Item "getncnt ( SEM )"
Returns the number of processes waiting for the semaphore \f(CW\*(C`SEM\*(C'\fR to
become greater than its current value
.IP "getpid ( \s-1SEM \s0)" 4
.IX Item "getpid ( SEM )"
Returns the process id of the last process that performed an operation
on the semaphore \f(CW\*(C`SEM\*(C'\fR.
.IP "getval ( \s-1SEM \s0)" 4
.IX Item "getval ( SEM )"
Returns the current value of the semaphore \f(CW\*(C`SEM\*(C'\fR.
.IP "getzcnt ( \s-1SEM \s0)" 4
.IX Item "getzcnt ( SEM )"
Returns the number of processes waiting for the semaphore \f(CW\*(C`SEM\*(C'\fR to
become zero.
.IP "id" 4
.IX Item "id"
Returns the system identifier for the semaphore set.
.IP "op ( \s-1OPLIST \s0)" 4
.IX Item "op ( OPLIST )"
\&\f(CW\*(C`OPLIST\*(C'\fR is a list of operations to pass to \f(CW\*(C`semop\*(C'\fR. \f(CW\*(C`OPLIST\*(C'\fR is
a concatenation of smaller lists, each which has three values. The
first is the semaphore number, the second is the operation and the last
is a flags value. See semop for more details. For example
.Sp
.Vb 4
\&    $sem\->op(
\&        0, \-1, IPC_NOWAIT,
\&        1,  1, IPC_NOWAIT
\&    );
.Ve
.IP "remove" 4
.IX Item "remove"
Remove and destroy the semaphore set from the system.
.IP "set ( \s-1STAT \s0)" 4
.IX Item "set ( STAT )"
.PD 0
.IP "set ( \s-1NAME\s0 => \s-1VALUE\s0 [, \s-1NAME\s0 => \s-1VALUE ...\s0] )" 4
.IX Item "set ( NAME => VALUE [, NAME => VALUE ...] )"
.PD
\&\f(CW\*(C`set\*(C'\fR will set the following values of the \f(CW\*(C`stat\*(C'\fR structure associated
with the semaphore set.
.Sp
.Vb 3
\&    uid
\&    gid
\&    mode (only the permission bits)
.Ve
.Sp
\&\f(CW\*(C`set\*(C'\fR accepts either a stat object, as returned by the \f(CW\*(C`stat\*(C'\fR method,
or a list of \fIname\fR\-\fIvalue\fR pairs.
.IP "setall ( \s-1VALUES \s0)" 4
.IX Item "setall ( VALUES )"
Sets all values in the semaphore set to those given on the \f(CW\*(C`VALUES\*(C'\fR list.
\&\f(CW\*(C`VALUES\*(C'\fR must contain the correct number of values.
.IP "setval ( N , \s-1VALUE \s0)" 4
.IX Item "setval ( N , VALUE )"
Set the \f(CW\*(C`N\*(C'\fRth value in the semaphore set to \f(CW\*(C`VALUE\*(C'\fR
.IP "stat" 4
.IX Item "stat"
Returns an object of type \f(CW\*(C`IPC::Semaphore::stat\*(C'\fR which is a sub-class of
\&\f(CW\*(C`Class::Struct\*(C'\fR. It provides the following fields. For a description
of these fields see your system documentation.
.Sp
.Vb 8
\&    uid
\&    gid
\&    cuid
\&    cgid
\&    mode
\&    ctime
\&    otime
\&    nsems
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IPC::SysV, Class::Struct, semget, semctl, semop
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>,
Marcus Holland-Moritz <mhx@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Version 2.x, Copyright (C) 2007\-2010, Marcus Holland-Moritz.
.PP
Version 1.x, Copyright (c) 1997, Graham Barr.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
