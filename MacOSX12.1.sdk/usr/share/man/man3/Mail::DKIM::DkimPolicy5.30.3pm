.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::DKIM::DkimPolicy 3"
.TH Mail::DKIM::DkimPolicy 3 "2018-10-13" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DKIM::DkimPolicy \- represents a DKIM Sender Signing Practices record
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Sender Signing Practices (\s-1SSP\s0) record can be published by any
domain to help a receiver know what to do when it encounters an unsigned
message claiming to originate from that domain.
.PP
The record is published as a \s-1DNS TXT\s0 record at _policy._domainkey.DOMAIN
where \s-1DOMAIN\s0 is the domain of the message's \*(L"From\*(R" address.
.PP
This record format has been superceded by \s-1ADSP.\s0 See
Mail::DKIM::AuthorDomainPolicy for information about \s-1ADSP.\s0
It is implemented here because at one time it appeared this is what
would be standardized by the \s-1IETF.\s0 It will be removed from Mail::DKIM
at some point in the future.
The last version of the \s-1SSP\s0 specification can be found at
<http://tools.ietf.org/html/draft\-ietf\-dkim\-ssp\-02>.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "\fBfetch()\fP"
.IX Subsection "fetch()"
Lookup a \s-1DKIM\s0 signing practices record.
.PP
.Vb 4
\&  my $policy = Mail::DKIM::DkimPolicy\->fetch(
\&            Protocol => \*(Aqdns\*(Aq,
\&            Author => \*(Aqjsmith@example.org\*(Aq,
\&          );
.Ve
.SS "\fBnew()\fP"
.IX Subsection "new()"
Construct a default policy object.
.PP
.Vb 1
\&  my $policy = Mail::DKIM::DkimPolicy\->new;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBapply()\fP"
.IX Subsection "apply()"
Apply the policy to the results of a \s-1DKIM\s0 verifier.
.PP
.Vb 1
\&  my $result = $policy\->apply($dkim_verifier);
.Ve
.PP
The caller must provide an instance of Mail::DKIM::Verifier, one which
has already been fed the message being verified.
.PP
Possible results are:
.IP "accept" 4
.IX Item "accept"
The message is approved by the sender signing policy.
.IP "reject" 4
.IX Item "reject"
The message is rejected by the sender signing policy.
It can be considered very suspicious.
.IP "neutral" 4
.IX Item "neutral"
The message is neither approved nor rejected by the sender signing
policy. It can be considered somewhat suspicious.
.SS "\fBflags()\fP"
.IX Subsection "flags()"
Get or set the flags (t=) tag.
.PP
A colon-separated list of flags. Flag values are:
.IP "y" 4
.IX Item "y"
The entity is testing signing practices, and the Verifier
\&\s-1SHOULD NOT\s0 consider a message suspicious based on the record.
.IP "s" 4
.IX Item "s"
The signing practices apply only to the named domain, and
not to subdomains.
.SS "\fBis_implied_default_policy()\fP"
.IX Subsection "is_implied_default_policy()"
Is this policy implied?
.PP
.Vb 1
\&  my $is_implied = $policy\->is_implied_default_policy;
.Ve
.PP
If you fetch the policy for a particular domain, but that domain
does not have a policy published, then the \*(L"default policy\*(R" is
in effect. Use this method to detect when that happens.
.SS "\fBlocation()\fP"
.IX Subsection "location()"
Where the policy was fetched from.
.PP
If the policy is domain-wide, this will be domain where the policy was
published.
.PP
If the policy is user-specific, \s-1TBD.\s0
.PP
If nothing is published for the domain, and the default policy
was returned instead, the location will be \f(CW\*(C`undef\*(C'\fR.
.SS "\fBpolicy()\fP"
.IX Subsection "policy()"
Get or set the outbound signing policy (dkim=) tag.
.PP
.Vb 1
\&  my $sp = $policy\->policy;
.Ve
.PP
Outbound signing policy for the entity. Possible values are:
.ie n .IP """unknown""" 4
.el .IP "\f(CWunknown\fR" 4
.IX Item "unknown"
The default. The entity may sign some or all email.
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
All mail from the entity is signed.
(The \s-1DKIM\s0 signature can use any domain, not necessarily matching
the From: address.)
.ie n .IP """strict""" 4
.el .IP "\f(CWstrict\fR" 4
.IX Item "strict"
All mail from the entity is signed with Originator signatures.
(The \s-1DKIM\s0 signature uses a domain matching the From: address.)
.SS "\fBsignall()\fP"
.IX Subsection "signall()"
True if policy is \*(L"all\*(R".
.SS "\fBsignall_strict()\fP"
.IX Subsection "signall_strict()"
True if policy is \*(L"strict\*(R".
.SS "\fBtesting()\fP"
.IX Subsection "testing()"
Checks the testing flag.
.PP
.Vb 1
\&  my $testing = $policy\->testing;
.Ve
.PP
If nonzero, the testing flag is set on the signing policy, and the
verify should not consider a message suspicious based on this policy.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
If a sender signing policy is not found for a given domain, the
\&\fBfetch()\fR method should search the parent domains, according to
section 4 of the dkim-ssp Internet Draft.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Long, <jlong@messiah.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2007 by Messiah College
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
