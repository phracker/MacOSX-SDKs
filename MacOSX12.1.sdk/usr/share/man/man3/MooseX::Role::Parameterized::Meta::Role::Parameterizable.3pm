.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Role::Parameterized::Meta::Role::Parameterizable 3"
.TH MooseX::Role::Parameterized::Meta::Role::Parameterizable 3 "2013-09-11" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Role::Parameterized::Meta::Role::Parameterizable \- metaclass for parameterizable roles
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the metaclass for parameterizable roles, roles that have
their parameters currently unbound. These are the roles that you
use \*(L"with\*(R" in Moose, but instead of composing the parameterizable
role, we construct a new parameterized role
(MooseX::Role::Parameterized::Meta::Role::Parameterized) and use
that new parameterized instead.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "parameterized_role_metaclass"
.IX Subsection "parameterized_role_metaclass"
The name of the class that will be used to construct the parameterized role.
.SS "parameters_class"
.IX Subsection "parameters_class"
The name of the class that will be used to construct the parameters object.
.SS "parameters_metaclass"
.IX Subsection "parameters_metaclass"
A metaclass representing this roles's parameters. It will be an anonymous
subclass of \*(L"parameters_class\*(R". Each call to
\&\*(L"parameter\*(R" in MooseX::Role::Parameters adds an attribute to this metaclass.
.PP
When this role is consumed, the parameters object will be instantiated using
this metaclass.
.SS "role_generator"
.IX Subsection "role_generator"
A code reference that is used to generate a role based on the parameters
provided by the consumer. The user usually specifies it using the
\&\*(L"role\*(R" in MooseX::Role::Parameterized keyword.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "add_parameter $name, %options"
.el .SS "add_parameter \f(CW$name\fP, \f(CW%options\fP"
.IX Subsection "add_parameter $name, %options"
Delegates to \*(L"add_attribute\*(R" in Moose::Meta::Class on the
\&\*(L"parameters_metaclass\*(R" object.
.ie n .SS "construct_parameters %arguments"
.el .SS "construct_parameters \f(CW%arguments\fP"
.IX Subsection "construct_parameters %arguments"
Creates a new MooseX::Role::Parameterized::Parameters object using metaclass
\&\*(L"parameters_metaclass\*(R".
.PP
The arguments are those specified by the consumer as parameter values.
.ie n .SS "generate_role %arguments"
.el .SS "generate_role \f(CW%arguments\fP"
.IX Subsection "generate_role %arguments"
This method generates and returns a new instance of
\&\*(L"parameterized_role_metaclass\*(R". It can take any combination of
three named parameters:
.IP "arguments" 4
.IX Item "arguments"
A hashref of parameters for the role, same as would be passed in at a \*(L"with\*(R"
statement.
.IP "package" 4
.IX Item "package"
A package name that, if present, we will use for the generated role; if not,
we generate an anonymous role.
.IP "consumer" 4
.IX Item "consumer"
A consumer metaobject, if available.
.SS "apply"
.IX Subsection "apply"
Overrides \*(L"apply\*(R" in Moose::Meta::Role to automatically generate the
parameterized role.
