.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control::VLV 3"
.TH Net::LDAP::Control::VLV 3 "2019-04-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control::VLV \- LDAPv3 Virtual List View control object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::LDAP;
\& use Net::LDAP::Control::VLV;
\& use Net::LDAP::Constant qw( LDAP_CONTROL_VLVRESPONSE );
\&
\& $ldap = Net::LDAP\->new( "ldap.mydomain.eg" );
\&
\& # Get the first 20 entries
\& $vlv  = Net::LDAP::Control::VLV\->new(
\&           before  => 0,        # No entries from before target entry
\&           after   => 19,       # 19 entries after target entry
\&           content => 0,        # List size unknown
\&           offset  => 1,        # Target entry is the first
\&         );
\& $sort = Net::LDAP::Control::Sort\->new( order => \*(Aqcn\*(Aq );
\&
\& @args = ( base     => "o=Ace Industry, c=us",
\&           scope    => "subtree",
\&           filter   => "(objectClass=inetOrgPerson)",
\&           callback => \e&process_entry, # Call this sub for each entry
\&           control  => [ $vlv, $sort ],
\& );
\&
\& $mesg = $ldap\->search( @args );
\&
\& # Get VLV response control
\& ($resp)  = $mesg\->control( LDAP_CONTROL_VLVRESPONSE )  or die;
\& $vlv\->response( $resp );
\&
\& # Set the control to get the last 20 entries
\& $vlv\->end;
\&
\& $mesg = $ldap\->search( @args );
\&
\& # Get VLV response control
\& ($resp)  = $mesg\->control( LDAP_CONTROL_VLVRESPONSE )  or die;
\& $vlv\->response( $resp );
\&
\& # Now get the previous page
\& $vlv\->scroll_page( \-1 );
\&
\& $mesg = $ldap\->search( @args );
\&
\& # Get VLV response control
\& ($resp)  = $mesg\->control( LDAP_CONTROL_VLVRESPONSE )  or die;
\& $vlv\->response( $resp );
\&
\& # Now page with first entry starting with "B" in the middle
\& $vlv\->before(9);       # Change page to show 9 before
\& $vlv\->after(10);       # Change page to show 10 after
\& $vlv\->assert("B");     # assert "B"
\&
\& $mesg = $ldap\->search( @args );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control::VLV\*(C'\fR provides an interface for the creation and
manipulation of objects that represent the Virtual List View as described
by draft\-ietf\-ldapext\-ldapv3\-vlv\-09.txt.
.PP
When using a Virtual List View control in a search, it must be accompanied by a sort
control. See Net::LDAP::Control::Sort
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
In addition to the constructor arguments described in
Net::LDAP::Control the following are provided.
.IP "after" 4
.IX Item "after"
Set the number of entries the server should return from the list after
the target entry.
.IP "assert" 4
.IX Item "assert"
Set the assertion value user to locate the target entry. This value should
be a legal value to compare with the first attribute in the sort control
that is passed with the \s-1VLV\s0 control. The target entry is the first entry
in the list which is greater than or equal the assert value.
.IP "before" 4
.IX Item "before"
Set the number of entries the server should return from the list before
the target entry.
.IP "content" 4
.IX Item "content"
Set the number of entries in the list. On the first search this value
should be set to zero. On subsequent searches it should be set to the
length of the list, as returned by the server in the VLVResponse control.
.IP "context" 4
.IX Item "context"
Set the context identifier.  On the first search this value should be
set to zero. On subsequent searches it should be set to the context
value returned by the server in the VLVResponse control.
.IP "offset" 4
.IX Item "offset"
Set the offset of the target entry.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
As with Net::LDAP::Control each constructor argument
described above is also available as a method on the object which will
return the current value for the attribute if called without an argument,
and set a new value for the attribute if called with an argument.
.PP
The \f(CW\*(C`offset\*(C'\fR and \f(CW\*(C`assert\*(C'\fR attributes are mutually exclusive. Setting
one or the other will cause previous values set by the other to
be forgotten. The \f(CW\*(C`content\*(C'\fR attribute is also associated with the
\&\f(CW\*(C`offset\*(C'\fR attribute, so setting \f(CW\*(C`assert\*(C'\fR will cause any \f(CW\*(C`content\*(C'\fR
value to be forgotten.
.IP "end" 4
.IX Item "end"
Set the target entry to the end of the list. This method will change the \f(CW\*(C`before\*(C'\fR
and \f(CW\*(C`after\*(C'\fR attributes so that the target entry is the last in the page.
.IP "response \s-1VLV_RESPONSE\s0" 4
.IX Item "response VLV_RESPONSE"
Set the attributes in the control as per \s-1VLV_RESPONSE. VLV_RESPONSE\s0 should be a control
of type Net::LDAP::Control::VLVResponse returned
from the server. \f(CW\*(C`response\*(C'\fR will populate the \f(CW\*(C`context\*(C'\fR, \f(CW\*(C`offset\*(C'\fR and \f(CW\*(C`content\*(C'\fR
attributes of the control with the values from \s-1VLV_RESPONSE.\s0 Because this sets the
\&\f(CW\*(C`offset\*(C'\fR attribute, any previous setting of the \f(CW\*(C`assert\*(C'\fR attribute will be forgotten.
.IP "scroll \s-1NUM\s0" 4
.IX Item "scroll NUM"
Move the target entry by \s-1NUM\s0 entries. A positive \s-1NUM\s0 will move the target entry towards
the end of the list and a negative \s-1NUM\s0 will move the target entry towards the
start of the list. Returns the index of the new target entry, or \f(CW\*(C`undef\*(C'\fR if the current target
is identified by an assertion.
.Sp
\&\f(CW\*(C`scroll\*(C'\fR may change the \f(CW\*(C`before\*(C'\fR and \f(CW\*(C`after\*(C'\fR attributes if the scroll value would
cause the page to go off either end of the list. But the page size will be maintained.
.IP "scroll_page \s-1NUM\s0" 4
.IX Item "scroll_page NUM"
Scroll by \s-1NUM\s0 pages. This method simple calculates the current page size and calls
\&\f(CW\*(C`scroll\*(C'\fR with \f(CW\*(C`NUM * $page_size\*(C'\fR
.IP "start" 4
.IX Item "start"
Set the target entry to the start of the list. This method will change the \f(CW\*(C`before\*(C'\fR and \f(CW\*(C`after\*(C'\fR
attributes to the target entry is the first entry in the page.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Control,
Net::LDAP::Control::Sort,
Net::LDAP::Control::VLVResponse
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
