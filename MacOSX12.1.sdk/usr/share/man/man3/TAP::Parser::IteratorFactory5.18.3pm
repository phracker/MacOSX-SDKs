.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::IteratorFactory 3pm"
.TH TAP::Parser::IteratorFactory 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::IteratorFactory \- Figures out which SourceHandler objects to use for a given Source
.SH "VERSION"
.IX Header "VERSION"
Version 3.26
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use TAP::Parser::IteratorFactory;
\&  my $factory = TAP::Parser::IteratorFactory\->new({ %config });
\&  my $iterator  = $factory\->make_iterator( $filename );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a factory class that takes a TAP::Parser::Source and runs it through all the
registered TAP::Parser::SourceHandlers to see which one should handle the source.
.PP
If you're a plugin author, you'll be interested in how to \*(L"register_handler\*(R"s,
how \*(L"detect_source\*(R" works.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
Creates a new factory class:
.PP
.Vb 1
\&  my $sf = TAP::Parser::IteratorFactory\->new( $config );
.Ve
.PP
\&\f(CW$config\fR is optional.  If given, sets \*(L"config\*(R" and calls \*(L"load_handlers\*(R".
.PP
\fI\f(CI\*(C`register_handler\*(C'\fI\fR
.IX Subsection "register_handler"
.PP
Registers a new TAP::Parser::SourceHandler with this factory.
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->register_handler( $handler_class );
.Ve
.PP
\fI\f(CI\*(C`handlers\*(C'\fI\fR
.IX Subsection "handlers"
.PP
List of handlers that have been registered.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`config\*(C'\fI\fR
.IX Subsection "config"
.PP
.Vb 2
\& my $cfg = $sf\->config;
\& $sf\->config({ Perl => { %config } });
.Ve
.PP
Chaining getter/setter for the configuration of the available source handlers.
This is a hashref keyed on handler class whose values contain config to be passed
onto the handlers during detection & creation.  Class names may be fully qualified
or abbreviated, eg:
.PP
.Vb 3
\&  # these are equivalent
\&  $sf\->config({ \*(AqTAP::Parser::SourceHandler::Perl\*(Aq => { %config } });
\&  $sf\->config({ \*(AqPerl\*(Aq => { %config } });
.Ve
.PP
\fI\f(CI\*(C`load_handlers\*(C'\fI\fR
.IX Subsection "load_handlers"
.PP
.Vb 1
\& $sf\->load_handlers;
.Ve
.PP
Loads the handler classes defined in \*(L"config\*(R".  For example, given a config:
.PP
.Vb 3
\&  $sf\->config({
\&    MySourceHandler => { some => \*(Aqconfig\*(Aq },
\&  });
.Ve
.PP
\&\f(CW\*(C`load_handlers\*(C'\fR will attempt to load the \f(CW\*(C`MySourceHandler\*(C'\fR class by looking in
\&\f(CW@INC\fR for it in this order:
.PP
.Vb 2
\&  TAP::Parser::SourceHandler::MySourceHandler
\&  MySourceHandler
.Ve
.PP
\&\f(CW\*(C`croak\*(C'\fRs on error.
.PP
\fI\f(CI\*(C`make_iterator\*(C'\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $src_factory\->make_iterator( $source );
.Ve
.PP
Given a TAP::Parser::Source, finds the most suitable TAP::Parser::SourceHandler
to use to create a TAP::Parser::Iterator (see \*(L"detect_source\*(R").  Dies on error.
.PP
\fI\f(CI\*(C`detect_source\*(C'\fI\fR
.IX Subsection "detect_source"
.PP
Given a TAP::Parser::Source, detects what kind of source it is and
returns \fIone\fR TAP::Parser::SourceHandler (the most confident one).  Dies
on error.
.PP
The detection algorithm works something like this:
.PP
.Vb 5
\&  for (@registered_handlers) {
\&    # ask them how confident they are about handling this source
\&    $confidence{$handler} = $handler\->can_handle( $source )
\&  }
\&  # choose the most confident handler
.Ve
.PP
Ties are handled by choosing the first handler.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see \*(L"\s-1SUBCLASSING\*(R"\s0 in TAP::Parser for a subclassing overview.
.SS "Example"
.IX Subsection "Example"
If we've done things right, you'll probably want to write a new source,
rather than sub-classing this (see TAP::Parser::SourceHandler for that).
.PP
But in case you find the need to...
.PP
.Vb 1
\&  package MyIteratorFactory;
\&
\&  use strict;
\&  use vars \*(Aq@ISA\*(Aq;
\&
\&  use TAP::Parser::IteratorFactory;
\&
\&  @ISA = qw( TAP::Parser::IteratorFactory );
\&
\&  # override source detection algorithm
\&  sub detect_source {
\&    my ($self, $raw_source_ref, $meta) = @_;
\&    # do detective work, using $meta and whatever else...
\&  }
\&
\&  1;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Steve Purkis
.SH "ATTRIBUTION"
.IX Header "ATTRIBUTION"
Originally ripped off from Test::Harness.
.PP
Moved out of TAP::Parser & converted to a factory class to support
extensible \s-1TAP\s0 source detective work by Steve Purkis.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Perl,
TAP::Parser::SourceHandler::RawTAP,
TAP::Parser::SourceHandler::Handle,
TAP::Parser::SourceHandler::Executable
