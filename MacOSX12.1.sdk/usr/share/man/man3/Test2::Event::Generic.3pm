.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Event::Generic 3pm"
.TH Test2::Event::Generic 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Event::Generic \- Generic event type.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a generic event that lets you customize all fields in the event \s-1API.\s0
This is useful if you have need for a custom event that does not make sense as
a published reusable event subclass.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::API qw/context/;
\&
\&    sub send_custom_fail {
\&        my $ctx = shift;
\&
\&        $ctx\->send_event(\*(AqGeneric\*(Aq, causes_fail => 1, summary => \*(AqThe sky is falling\*(Aq);
\&
\&        $ctx\->release;
\&    }
\&
\&    send_custom_fail();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$e\->facet_data($data)" 4
.el .IP "\f(CW$e\fR\->facet_data($data)" 4
.IX Item "$e->facet_data($data)"
.PD 0
.ie n .IP "$data = $e\->facet_data" 4
.el .IP "\f(CW$data\fR = \f(CW$e\fR\->facet_data" 4
.IX Item "$data = $e->facet_data"
.PD
Get or set the facet data (see Test2::Event). If no facet_data is set then
\&\f(CW\*(C`Test2::Event\->facet_data\*(C'\fR will be called to produce facets from the other
data.
.ie n .IP "$e\->callback($hub)" 4
.el .IP "\f(CW$e\fR\->callback($hub)" 4
.IX Item "$e->callback($hub)"
Call the custom callback if one is set, otherwise this does nothing.
.ie n .IP "$e\->set_callback(sub { ... })" 4
.el .IP "\f(CW$e\fR\->set_callback(sub { ... })" 4
.IX Item "$e->set_callback(sub { ... })"
Set the custom callback. The custom callback must be a coderef. The first
argument to your callback will be the event itself, the second will be the
Test2::Event::Hub that is using the callback.
.ie n .IP "$bool = $e\->causes_fail" 4
.el .IP "\f(CW$bool\fR = \f(CW$e\fR\->causes_fail" 4
.IX Item "$bool = $e->causes_fail"
.PD 0
.ie n .IP "$e\->set_causes_fail($bool)" 4
.el .IP "\f(CW$e\fR\->set_causes_fail($bool)" 4
.IX Item "$e->set_causes_fail($bool)"
.PD
Get/Set the \f(CW\*(C`causes_fail\*(C'\fR attribute. This defaults to \f(CW0\fR.
.ie n .IP "$bool = $e\->diagnostics" 4
.el .IP "\f(CW$bool\fR = \f(CW$e\fR\->diagnostics" 4
.IX Item "$bool = $e->diagnostics"
.PD 0
.ie n .IP "$e\->set_diagnostics($bool)" 4
.el .IP "\f(CW$e\fR\->set_diagnostics($bool)" 4
.IX Item "$e->set_diagnostics($bool)"
.PD
Get/Set the \f(CW\*(C`diagnostics\*(C'\fR attribute. This defaults to \f(CW0\fR.
.ie n .IP "$bool_or_undef = $e\->global" 4
.el .IP "\f(CW$bool_or_undef\fR = \f(CW$e\fR\->global" 4
.IX Item "$bool_or_undef = $e->global"
.PD 0
.ie n .IP "@bool_or_empty = $e\->global" 4
.el .IP "\f(CW@bool_or_empty\fR = \f(CW$e\fR\->global" 4
.IX Item "@bool_or_empty = $e->global"
.ie n .IP "$e\->set_global($bool_or_undef)" 4
.el .IP "\f(CW$e\fR\->set_global($bool_or_undef)" 4
.IX Item "$e->set_global($bool_or_undef)"
.PD
Get/Set the \f(CW\*(C`diagnostics\*(C'\fR attribute. This defaults to an empty list which is
undef in scalar context.
.ie n .IP "$bool = $e\->increments_count" 4
.el .IP "\f(CW$bool\fR = \f(CW$e\fR\->increments_count" 4
.IX Item "$bool = $e->increments_count"
.PD 0
.ie n .IP "$e\->set_increments_count($bool)" 4
.el .IP "\f(CW$e\fR\->set_increments_count($bool)" 4
.IX Item "$e->set_increments_count($bool)"
.PD
Get/Set the \f(CW\*(C`increments_count\*(C'\fR attribute. This defaults to \f(CW0\fR.
.ie n .IP "$bool = $e\->no_display" 4
.el .IP "\f(CW$bool\fR = \f(CW$e\fR\->no_display" 4
.IX Item "$bool = $e->no_display"
.PD 0
.ie n .IP "$e\->set_no_display($bool)" 4
.el .IP "\f(CW$e\fR\->set_no_display($bool)" 4
.IX Item "$e->set_no_display($bool)"
.PD
Get/Set the \f(CW\*(C`no_display\*(C'\fR attribute. This defaults to \f(CW0\fR.
.ie n .IP "@plan = $e\->sets_plan" 4
.el .IP "\f(CW@plan\fR = \f(CW$e\fR\->sets_plan" 4
.IX Item "@plan = $e->sets_plan"
Get the plan if this event sets one. The plan is a list of up to 3 items:
\&\f(CW\*(C`($count, $directive, $reason)\*(C'\fR. \f(CW$count\fR must be defined, the others may be
undef, or may not exist at all.
.ie n .IP "$e\->set_sets_plan(\e@plan)" 4
.el .IP "\f(CW$e\fR\->set_sets_plan(\e@plan)" 4
.IX Item "$e->set_sets_plan(@plan)"
Set the plan. You must pass in an arrayref with up to 3 elements.
.ie n .IP "$summary = $e\->summary" 4
.el .IP "\f(CW$summary\fR = \f(CW$e\fR\->summary" 4
.IX Item "$summary = $e->summary"
.PD 0
.ie n .IP "$e\->set_summary($summary_or_undef)" 4
.el .IP "\f(CW$e\fR\->set_summary($summary_or_undef)" 4
.IX Item "$e->set_summary($summary_or_undef)"
.PD
Get/Set the summary. This will default to the event package
\&\f(CW\*(AqTest2::Event::Generic\*(Aq\fR. You can set it to any value. Setting this to
\&\f(CW\*(C`undef\*(C'\fR will reset it to the default.
.ie n .IP "$int_or_undef = $e\->terminate" 4
.el .IP "\f(CW$int_or_undef\fR = \f(CW$e\fR\->terminate" 4
.IX Item "$int_or_undef = $e->terminate"
.PD 0
.ie n .IP "@int_or_empty = $e\->terminate" 4
.el .IP "\f(CW@int_or_empty\fR = \f(CW$e\fR\->terminate" 4
.IX Item "@int_or_empty = $e->terminate"
.ie n .IP "$e\->set_terminate($int_or_undef)" 4
.el .IP "\f(CW$e\fR\->set_terminate($int_or_undef)" 4
.IX Item "$e->set_terminate($int_or_undef)"
.PD
This will get/set the \f(CW\*(C`terminate\*(C'\fR attribute. This defaults to undef in scalar
context, or an empty list in list context. Setting this to undef will clear it
completely. This must be set to a positive integer (0 or larger).
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
