.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "syntax 3"
.TH syntax 3 "2012-05-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
syntax \- Activate syntax extensions
.SH "VERSION"
.IX Header "VERSION"
version 0.004
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # either
\&    use syntax \*(Aqfoo\*(Aq;
\&
\&    # or
\&    use syntax foo => { ... };
\&
\&    # or
\&    use syntax qw( foo bar ), baz => { ... };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module activates community provided syntax extensions to Perl. You pass it
a feature name, and optionally a scalar with arguments, and the dispatching
system will load and install the extension in your package.
.PP
The import arguments are parsed with Data::OptList. There are no
standardised options. Please consult the documentation for the specific syntax
feature to find out about possible configuration options.
.PP
The passed in feature names are simply transformed: \f(CW\*(C`function\*(C'\fR becomes
Syntax::Feature::Function and \f(CW\*(C`foo_bar\*(C'\fR would become
\&\f(CW\*(C`Syntax::Feature::FooBar\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "import"
.IX Subsection "import"
.Vb 1
\&    syntax\->import( @spec );
.Ve
.PP
This method will dispatch the syntax extension setup to the specified feature
handlers for the calling package.
.SS "import_into"
.IX Subsection "import_into"
.Vb 1
\&    syntax\->import_into( $into, @spec );
.Ve
.PP
Same as \*(L"import\*(R", but performs the setup in \f(CW$into\fR instead of the calling
package.
.SS "unimport"
.IX Subsection "unimport"
.Vb 1
\&    syntax\->unimport( @features );
.Ve
.PP
This method will trigger uninstallations of the \f(CW@features\fR from the
calling package.
.SS "unimport_from"
.IX Subsection "unimport_from"
.Vb 1
\&    syntax\->unimport_from( $from, @features );
.Ve
.PP
Same as \*(L"unimport\*(R", but will uninstall the \f(CW@features\fR from \f(CW$from\fR.
.SH "RECOMMENDED FEATURES"
.IX Header "RECOMMENDED FEATURES"
.IP "\(bu" 4
Syntax::Feature::Function
.Sp
Activates functions with parameter signatures.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Syntax::Feature::Function,
Devel::Declare
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to bug\-syntax@rt.cpan.org or through the web interface at:
 http://rt.cpan.org/Public/Dist/Display.html?Name=syntax
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek <rs@474.at>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert 'phaylon' Sedlacek.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
