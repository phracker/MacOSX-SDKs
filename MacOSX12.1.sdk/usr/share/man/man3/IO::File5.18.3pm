.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::File 3pm"
.TH IO::File 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::File \- supply object methods for filehandles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::File;
\&
\&    $fh = IO::File\->new();
\&    if ($fh\->open("< file")) {
\&        print <$fh>;
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::File\->new("> file");
\&    if (defined $fh) {
\&        print $fh "bar\en";
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::File\->new("file", "r");
\&    if (defined $fh) {
\&        print <$fh>;
\&        undef $fh;       # automatically closes the file
\&    }
\&
\&    $fh = IO::File\->new("file", O_WRONLY|O_APPEND);
\&    if (defined $fh) {
\&        print $fh "corge\en";
\&
\&        $pos = $fh\->getpos;
\&        $fh\->setpos($pos);
\&
\&        undef $fh;       # automatically closes the file
\&    }
\&
\&    autoflush STDOUT 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::File\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR and \f(CW\*(C`IO::Seekable\*(C'\fR. It extends
these classes with methods that are specific to file handles.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( \s-1FILENAME\s0 [,MODE [,PERMS]] )" 4
.IX Item "new ( FILENAME [,MODE [,PERMS]] )"
Creates an \f(CW\*(C`IO::File\*(C'\fR.  If it receives any parameters, they are passed to
the method \f(CW\*(C`open\*(C'\fR; if the open fails, the object is destroyed.  Otherwise,
it is returned to the caller.
.IP "new_tmpfile" 4
.IX Item "new_tmpfile"
Creates an \f(CW\*(C`IO::File\*(C'\fR opened for read/write on a newly created temporary
file.  On systems where this is possible, the temporary file is anonymous
(i.e. it is unlinked after creation, but held open).  If the temporary
file cannot be created or opened, the \f(CW\*(C`IO::File\*(C'\fR object is destroyed.
Otherwise, it is returned to the caller.
.SH "METHODS"
.IX Header "METHODS"
.IP "open( \s-1FILENAME\s0 [,MODE [,PERMS]] )" 4
.IX Item "open( FILENAME [,MODE [,PERMS]] )"
.PD 0
.IP "open( \s-1FILENAME, IOLAYERS \s0)" 4
.IX Item "open( FILENAME, IOLAYERS )"
.PD
\&\f(CW\*(C`open\*(C'\fR accepts one, two or three parameters.  With one parameter,
it is just a front end for the built-in \f(CW\*(C`open\*(C'\fR function.  With two or three
parameters, the first parameter is a filename that may include
whitespace or other special characters, and the second parameter is
the open mode, optionally followed by a file permission value.
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR receives a Perl mode string (\*(L">\*(R", \*(L"+<\*(R", etc.)
or an \s-1ANSI C\s0 \fIfopen()\fR mode string (\*(L"w\*(R", \*(L"r+\*(R", etc.), it uses the basic
Perl \f(CW\*(C`open\*(C'\fR operator (but protects any special characters).
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR is given a numeric mode, it passes that mode
and the optional permissions value to the Perl \f(CW\*(C`sysopen\*(C'\fR operator.
The permissions default to 0666.
.Sp
If \f(CW\*(C`IO::File::open\*(C'\fR is given a mode that includes the \f(CW\*(C`:\*(C'\fR character,
it passes all the three arguments to the three-argument \f(CW\*(C`open\*(C'\fR operator.
.Sp
For convenience, \f(CW\*(C`IO::File\*(C'\fR exports the O_XXX constants from the
Fcntl module, if this module is available.
.IP "binmode( [\s-1LAYER\s0] )" 4
.IX Item "binmode( [LAYER] )"
\&\f(CW\*(C`binmode\*(C'\fR sets \f(CW\*(C`binmode\*(C'\fR on the underlying \f(CW\*(C`IO\*(C'\fR object, as documented
in \f(CW\*(C`perldoc \-f binmode\*(C'\fR.
.Sp
\&\f(CW\*(C`binmode\*(C'\fR accepts one optional parameter, which is the layer to be
passed on to the \f(CW\*(C`binmode\*(C'\fR call.
.SH "NOTE"
.IX Header "NOTE"
Some operating systems may perform  \f(CW\*(C`IO::File::new()\*(C'\fR or \f(CW\*(C`IO::File::open()\*(C'\fR
on a directory without errors.  This behavior is not portable and not
suggested for use.  Using \f(CW\*(C`opendir()\*(C'\fR and \f(CW\*(C`readdir()\*(C'\fR or \f(CW\*(C`IO::Dir\*(C'\fR are
suggested instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle,
IO::Seekable,
IO::Dir
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <\fIgbarr@pobox.com\fR>.
