.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Base64 3pm"
.TH MIME::Base64 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Base64 \- Encoding and decoding of base64 strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use MIME::Base64;
\&
\& $encoded = encode_base64(\*(AqAladdin:open sesame\*(Aq);
\& $decoded = decode_base64($encoded);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions to encode and decode strings into and from the
base64 encoding specified in \s-1RFC 2045 \- \s0\fI\s-1MIME \s0(Multipurpose Internet
Mail Extensions)\fR. The base64 encoding is designed to represent
arbitrary sequences of octets in a form that need not be humanly
readable. A 65\-character subset ([A\-Za\-z0\-9+/=]) of US-ASCII is used,
enabling 6 bits to be represented per printable character.
.PP
The following primary functions are provided:
.ie n .IP "encode_base64( $bytes )" 4
.el .IP "encode_base64( \f(CW$bytes\fR )" 4
.IX Item "encode_base64( $bytes )"
.PD 0
.ie n .IP "encode_base64( $bytes, $eol );" 4
.el .IP "encode_base64( \f(CW$bytes\fR, \f(CW$eol\fR );" 4
.IX Item "encode_base64( $bytes, $eol );"
.PD
Encode data by calling the \fIencode_base64()\fR function.  The first
argument is the byte string to encode.  The second argument is the
line-ending sequence to use.  It is optional and defaults to \*(L"\en\*(R".  The
returned encoded string is broken into lines of no more than 76
characters each and it will end with \f(CW$eol\fR unless it is empty.  Pass an
empty string as second argument if you do not want the encoded string
to be broken into lines.
.Sp
The function will croak with \*(L"Wide character in subroutine entry\*(R" if \f(CW$bytes\fR
contains characters with code above 255.  The base64 encoding is only defined
for single-byte characters.  Use the Encode module to select the byte encoding
you want.
.ie n .IP "decode_base64( $str )" 4
.el .IP "decode_base64( \f(CW$str\fR )" 4
.IX Item "decode_base64( $str )"
Decode a base64 string by calling the \fIdecode_base64()\fR function.  This
function takes a single argument which is the string to decode and
returns the decoded data.
.Sp
Any character not part of the 65\-character base64 subset is
silently ignored.  Characters occurring after a '=' padding character
are never decoded.
.PP
If you prefer not to import these routines into your namespace, you can
call them as:
.PP
.Vb 3
\&    use MIME::Base64 ();
\&    $encoded = MIME::Base64::encode($decoded);
\&    $decoded = MIME::Base64::decode($encoded);
.Ve
.PP
Additional functions not exported by default:
.ie n .IP "encode_base64url( $bytes )" 4
.el .IP "encode_base64url( \f(CW$bytes\fR )" 4
.IX Item "encode_base64url( $bytes )"
.PD 0
.ie n .IP "decode_base64url( $str )" 4
.el .IP "decode_base64url( \f(CW$str\fR )" 4
.IX Item "decode_base64url( $str )"
.PD
Encode and decode according to the base64 scheme for \*(L"\s-1URL\s0 applications\*(R" [1].
This is a variant of the base64 encoding which does not use padding, does not
break the string into multiple lines and use the characters \*(L"\-\*(R" and \*(L"_\*(R" instead
of \*(L"+\*(R" and \*(L"/\*(R" to avoid using reserved \s-1URL\s0 characters.
.ie n .IP "encoded_base64_length( $bytes )" 4
.el .IP "encoded_base64_length( \f(CW$bytes\fR )" 4
.IX Item "encoded_base64_length( $bytes )"
.PD 0
.ie n .IP "encoded_base64_length( $bytes, $eol )" 4
.el .IP "encoded_base64_length( \f(CW$bytes\fR, \f(CW$eol\fR )" 4
.IX Item "encoded_base64_length( $bytes, $eol )"
.PD
Returns the length that the encoded string would have without actually
encoding it.  This will return the same value as \f(CW\*(C`length(encode_base64($bytes))\*(C'\fR,
but should be more efficient.
.ie n .IP "decoded_base64_length( $str )" 4
.el .IP "decoded_base64_length( \f(CW$str\fR )" 4
.IX Item "decoded_base64_length( $str )"
Returns the length that the decoded string would have without actually
decoding it.  This will return the same value as \f(CW\*(C`length(decode_base64($str))\*(C'\fR,
but should be more efficient.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
If you want to encode a large file, you should encode it in chunks
that are a multiple of 57 bytes.  This ensures that the base64 lines
line up and that you do not end up with padding in the middle. 57
bytes of data fills one complete base64 line (76 == 57*4/3):
.PP
.Vb 1
\&   use MIME::Base64 qw(encode_base64);
\&
\&   open(FILE, "/var/log/wtmp") or die "$!";
\&   while (read(FILE, $buf, 60*57)) {
\&       print encode_base64($buf);
\&   }
.Ve
.PP
or if you know you have enough memory
.PP
.Vb 3
\&   use MIME::Base64 qw(encode_base64);
\&   local($/) = undef;  # slurp
\&   print encode_base64(<STDIN>);
.Ve
.PP
The same approach as a command line:
.PP
.Vb 1
\&   perl \-MMIME::Base64 \-0777 \-ne \*(Aqprint encode_base64($_)\*(Aq <file
.Ve
.PP
Decoding does not need slurp mode if every line contains a multiple
of four base64 chars:
.PP
.Vb 1
\&   perl \-MMIME::Base64 \-ne \*(Aqprint decode_base64($_)\*(Aq <file
.Ve
.PP
Perl v5.8 and better allow extended Unicode characters in strings.
Such strings cannot be encoded directly, as the base64
encoding is only defined for single-byte characters.  The solution is
to use the Encode module to select the byte encoding you want.  For
example:
.PP
.Vb 2
\&    use MIME::Base64 qw(encode_base64);
\&    use Encode qw(encode);
\&
\&    $encoded = encode_base64(encode("UTF\-8", "\ex{FFFF}\en"));
\&    print $encoded;
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1999, 2001\-2004, 2010 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
Distantly based on LWP::Base64 written by Martijn Koster
<m.koster@nexor.co.uk> and Joerg Reichelt <j.reichelt@nexor.co.uk> and
code posted to comp.lang.perl <3pd2lp$6gf@wsinti07.win.tue.nl> by Hans
Mulder <hansm@wsinti07.win.tue.nl>
.PP
The \s-1XS\s0 implementation uses code from metamail.  Copyright 1991 Bell
Communications Research, Inc. (Bellcore)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::QuotedPrint
.PP
[1] <http://en.wikipedia.org/wiki/Base64#URL_applications>
