.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::Protocol::ldap 3"
.TH LWP::Protocol::ldap 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Protocol::ldap \- Provide LDAP support for LWP::UserAgent
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use LWP::UserAgent;
\&
\&  $ua = LWP::UserAgent\->new();
\&  $res = $ua\->get(\*(Aqldap://ldap.example.com/\*(Aq .
\&                  \*(Aqo=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)\*(Aq,
\&                   Accept => \*(Aqtext/json\*(Aq):
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The LWP::Protocol::ldap module provides support for using \fIldap\fR schemed
URLs following \s-1RFC 4516\s0 with \s-1LWP.\s0  This module is a plug-in to the \s-1LWP\s0
protocol handling, so you don't use it directly.
.PP
In addition to being used with \s-1LDAP\s0 URIs, LWP::Protocol::ldap also acts
as the base class for its sibling modules LWP::Protocol::ldaps
and LWP::Protocol::ldapi.
.SS "Features"
.IX Subsection "Features"
\fI\s-1HTTP\s0 methods supported\fR
.IX Subsection "HTTP methods supported"
.PP
LWP::Protocol::ldap implements the \s-1HTTP\s0 \fI\s-1GET\s0\fR and \fI\s-1HEAD\s0\fR methods.
They are mapped to the \s-1LDAP\s0 search operation,
.PP
\fIResponse format\fR
.IX Subsection "Response format"
.PP
Depending on the \s-1HTTP\s0 \fIAccept\fR header provided by the user agent,
LWP::Protocol::ldap can answer the requests in one of the following
formats:
.IP "\s-1DSML\s0" 4
.IX Item "DSML"
When the \s-1HTTP\s0 \fIAccept\fR header contains the \f(CW\*(C`text/dsml\*(C'\fR \s-1MIME\s0 type,
the response is sent as DSMLv1.
.IP "\s-1JSON\s0" 4
.IX Item "JSON"
When the \s-1HTTP\s0 \fIAccept\fR header contains the \f(CW\*(C`text/json\*(C'\fR \s-1MIME\s0 type,
the response is sent as \s-1JSON.\s0
For this to work the \fI\s-1JSON\s0\fR Perl module needs to be installed.
.IP "\s-1LDIF\s0" 4
.IX Item "LDIF"
When the \s-1HTTP\s0 \fIAccept\fR header contains the \f(CW\*(C`text/ldif\*(C'\fR \s-1MIME\s0 type,
the response is sent in LDIFv1 format.
.IP "\s-1HTML\s0" 4
.IX Item "HTML"
In case no \s-1HTTP\s0 \fIAccept\fR header has been sent or none of the above
\&\s-1MIME\s0 types can be detected, and the \fIx\-format\fR extension has not been provided
either, the response is sent using \s-1HTML\s0 markup in a 2\-column table format
(roughly modeled on \s-1LDIF\s0).
.PP
As an alternative to sending an \s-1HTTP\s0 \fIAccept\fR header, LWP::Protocol::ldap
also accepts the \f(CW\*(C`x\-format\*(C'\fR extension
.PP
Example:
.PP
.Vb 1
\& ldap://ldap.example.com/o=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)?x\-format=dsml
.Ve
.PP
\fI\s-1TLS\s0 support\fR
.IX Subsection "TLS support"
.PP
For \fIldap\fR and \fIldapi\fR URIs, the module implements the \f(CW\*(C`x\-tls\*(C'\fR extension
that switches the \s-1LDAP\s0 connection to \s-1TLS\s0 using a call of the
start_tls method.
.PP
Example:
.PP
.Vb 1
\& ldap://ldap.example.com/o=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)?x\-tls=1
.Ve
.PP
Note:
In the above example, ideally giving \f(CW\*(C`x\-tls\*(C'\fR should be sufficient,
but unfortunately the parser in URI::ldap has a little flaw.
.PP
\fIAuthorization\fR
.IX Subsection "Authorization"
.PP
Usually the connection is done anonymously, but if the \s-1HTTP\s0 \fIAuthorization\fR
header is provided with credentials for \s-1HTTP\s0 Basic authorization,
the credentials given in that header will be used to do a simple
bind to the \s-1LDAP\s0 server.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::Protocol::ldaps, LWP::Protocol::ldapi
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2004 Graham Barr, 2012 Peter Marschall.
All rights reserved.  This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
