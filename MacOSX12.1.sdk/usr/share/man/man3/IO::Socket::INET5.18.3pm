.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET 3pm"
.TH IO::Socket::INET 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET \- Object interface for AF_INET domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_INET\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides.
.Sp
.Vb 10
\& PeerAddr    Remote host address          <hostname>[:<port>]
\& PeerHost    Synonym for PeerAddr
\& PeerPort    Remote port or service       <service>[(<no>)] | <no>
\& LocalAddr   Local host bind address      hostname[:port]
\& LocalHost   Synonym for LocalAddr
\& LocalPort   Local host bind port         <service>[(<no>)] | <no>
\& Proto       Protocol name (or number)    "tcp" | "udp" | ...
\& Type        Socket type              SOCK_STREAM | SOCK_DGRAM | ...
\& Listen      Queue size for listen
\& ReuseAddr   Set SO_REUSEADDR before binding
\& Reuse       Set SO_REUSEADDR before binding (deprecated,
\&                                              prefer ReuseAddr)
\& ReusePort   Set SO_REUSEPORT before binding
\& Broadcast   Set SO_BROADCAST before binding
\& Timeout     Timeout value for various operations
\& MultiHomed  Try all addresses for multi\-homed hosts
\& Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname or the IP-address on the
\&\*(L"xx.xx.xx.xx\*(R" form.  The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R".
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(\*(Aq127.0.0.1:25\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(
\&                           PeerPort  => 9999,
\&                           PeerAddr  => inet_ntoa(INADDR_BROADCAST),
\&                           Proto     => udp,    
\&                           LocalAddr => \*(Aqlocalhost\*(Aq,
\&                           Broadcast => 1 ) 
\&                       or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form xx.xx.xx.xx
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
