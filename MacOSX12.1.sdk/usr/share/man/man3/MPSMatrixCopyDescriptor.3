.TH "MPSMatrixCopyDescriptor" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixCopyDescriptor
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixCombination\&.h>\fP
.PP
Inherits NSObject\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:count:\fP"
.br
.ti -1c
.RI "(void) \- \fBsetCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithSourceMatrices:destinationMatrices:offsetVector:offset:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinit\fP"
.br
.in -1c
.SS "Class Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) + \fBdescriptorWithSourceMatrix:destinationMatrix:offsets:\fP"
.br
.in -1c
.SH "Method Documentation"
.PP 
.SS "+ (nonnull instancetype) descriptorWithSourceMatrix: (\fBMPSMatrix\fP *__nonnull) sourceMatrix(\fBMPSMatrix\fP *__nonnull) destinationMatrix(\fBMPSMatrixCopyOffsets\fP) offsets"
convenience allocator for single copies 
.SS "\- (nonnull instancetype) init "

.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device(NSUInteger) count"
initialize a \fBMPSMatrixCopyDescriptor\fP with default values\&.  Use -setCopyOperationAtIndex:sourceMatrix:destinationMatrix:copyOffsets to initialize\&. All indices must be initialized before use\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device on which the copy will be performed 
.br
\fIcount\fP The number of copy operations the object will encode 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP \fBMPSMatrixCopyDescriptor\fP\&. It still needs to be initialized with -setCopyOperationAtIndex:sourceMatrix:destinationMatrix:copyOffsets 
.RE
.PP

.SS "\- (nonnull instancetype) initWithSourceMatrices: (NSArray< \fBMPSMatrix\fP * > *__nonnull) sourceMatrices(NSArray< \fBMPSMatrix\fP * > *__nonnull) destinationMatrices(\fBMPSVector\fP *__nullable) offsets(NSUInteger) byteOffset"
Initialize a \fBMPSMatrixCopyDescriptor\fP using offsets generated on the GPU  Use this method when the offsets needed are coming from GPU based computation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsourceMatrices\fP \fBA\fP list of matrices from which the matrix data is read 
.br
\fIdestinationMatrices\fP \fBA\fP list of matrices to which to write the data\&. The count must match the number of source matrices\&. 
.br
\fIoffsets\fP \fBA\fP \fBMPSVector\fP of type MPSDataTypeUInt32 containing the list of offsets, stored as a packed array of \fBMPSMatrixCopyOffsets\fP\&. 
.br
\fIbyteOffset\fP \fBA\fP byte offset into the offsets vector where the data starts in 'offsets'\&. This value must be a multiple of 16\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSMatrixCopyDescriptor\fP to represent the list of copy operations 
.RE
.PP

.SS "\- (void) setCopyOperationAtIndex: (NSUInteger) index(\fBMPSMatrix\fP *__nonnull) sourceMatrix(\fBMPSMatrix\fP *__nonnull) destinationMatrix(\fBMPSMatrixCopyOffsets\fP) offsets"
Initialize a \fBMPSMatrixCopyDescriptor\fP using offsets generated on the CPU  This is for one at a time intialization of the copy operations 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The index of the copy operation 
.br
\fIsourceMatrix\fP The source matrix for this copy operation 
.br
\fIdestinationMatrix\fP The destination matrix for this copy operation 
.br
\fIoffsets\fP The offsets to use for the copy operation 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
