.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBD::Gofer::Transport::corostream 3"
.TH DBD::Gofer::Transport::corostream 3 "2013-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBD::Gofer::Transport::corostream \- Async DBD::Gofer stream transport using Coro and AnyEvent
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   DBI_AUTOPROXY="dbi:Gofer:transport=corostream" perl some\-perl\-script\-using\-dbi.pl
.Ve
.PP
or
.PP
.Vb 2
\&   $dsn = ...; # the DSN for the driver and database you want to use
\&   $dbh = DBI\->connect("dbi:Gofer:transport=corostream;dsn=$dsn", ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fI\s-1BIG WIN\s0\fR from using Coro is that it enables the use of existing
\&\s-1DBI\s0 frameworks like DBIx::Class.
.SH "KNOWN ISSUES AND LIMITATIONS"
.IX Header "KNOWN ISSUES AND LIMITATIONS"
.Vb 2
\&  \- Uses Coro::Select so alters CORE::select globally
\&    Parent class probably needs refactoring to enable a more encapsulated approach.
\&
\&  \- Doesn\*(Aqt prevent multiple concurrent requests
\&    Probably just needs a per\-connection semaphore
\&
\&  \- Coro has many caveats. Caveat emptor.
.Ve
.SH "STATUS"
.IX Header "STATUS"
\&\s-1THIS IS CURRENTLY JUST A\s0 PROOF-OF-CONCEPT \s-1IMPLEMENTATION FOR EXPERIMENTATION.\s0
.PP
Please note that I have no plans to develop this code further myself.
I'd very much welcome contributions. Interested? Let me know!
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2010, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBD::Gofer::Transport::stream
.PP
DBD::Gofer
.SH "APPENDIX"
.IX Header "APPENDIX"
Example code:
.PP
.Vb 1
\&    #!perl
\&
\&    use strict;
\&    use warnings;
\&    use Time::HiRes qw(time);
\&
\&    BEGIN { $ENV{PERL_ANYEVENT_STRICT} = 1; $ENV{PERL_ANYEVENT_VERBOSE} = 1; }
\&
\&    use AnyEvent;
\&
\&    BEGIN { $ENV{DBI_TRACE} = 0; $ENV{DBI_GOFER_TRACE} = 0; $ENV{DBD_GOFER_TRACE} = 0; };
\&
\&    use DBI;
\&
\&    $ENV{DBI_AUTOPROXY} = \*(Aqdbi:Gofer:transport=corostream\*(Aq;
\&
\&    my $ticker = AnyEvent\->timer( after => 0, interval => 0.1, cb => sub {
\&        warn sprintf "\-tick\- %.2f\en", time
\&    } );
\&
\&    warn "connecting...\en";
\&    my $dbh = DBI\->connect("dbi:NullP:");
\&    warn "...connected\en";
\&
\&    for (1..3) {
\&        warn "entering DBI...\en";
\&        $dbh\->do("sleep 0.3"); # pseudo\-sql understood by the DBD::NullP driver
\&        warn "...returned\en";
\&    }
\&
\&    warn "done.";
.Ve
.PP
Example output:
.PP
.Vb 10
\&    $ perl corogofer.pl
\&    connecting...
\&    \-tick\- 1293631437.14
\&    \-tick\- 1293631437.14
\&    ...connected
\&    entering DBI...
\&    \-tick\- 1293631437.25
\&    \-tick\- 1293631437.35
\&    \-tick\- 1293631437.45
\&    \-tick\- 1293631437.55
\&    ...returned
\&    entering DBI...
\&    \-tick\- 1293631437.66
\&    \-tick\- 1293631437.76
\&    \-tick\- 1293631437.86
\&    ...returned
\&    entering DBI...
\&    \-tick\- 1293631437.96
\&    \-tick\- 1293631438.06
\&    \-tick\- 1293631438.16
\&    ...returned
\&    done. at corogofer.pl line 39.
.Ve
.PP
You can see that the timer callback is firing while the code 'waits' inside the
\&\fBdo()\fR method for the response from the database. Normally that would block.
