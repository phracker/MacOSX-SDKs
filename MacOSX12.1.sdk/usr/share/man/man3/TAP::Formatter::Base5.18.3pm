.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Formatter::Base 3pm"
.TH TAP::Formatter::Base 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Formatter::Base \- Base class for harness output delegates
.SH "VERSION"
.IX Header "VERSION"
Version 3.26
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This provides console orientated output formatting for TAP::Harness.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use TAP::Formatter::Console;
\& my $harness = TAP::Formatter::Console\->new( \e%args );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 4
\& my %args = (
\&    verbose => 1,
\& )
\& my $harness = TAP::Formatter::Console\->new( \e%args );
.Ve
.PP
The constructor returns a new \f(CW\*(C`TAP::Formatter::Console\*(C'\fR object. If
a TAP::Harness is created with no \f(CW\*(C`formatter\*(C'\fR a
\&\f(CW\*(C`TAP::Formatter::Console\*(C'\fR is automatically created. If any of the
following options were given to TAP::Harness\->new they well be passed to
this constructor which accepts an optional hashref whose allowed keys are:
.IP "\(bu" 4
\&\f(CW\*(C`verbosity\*(C'\fR
.Sp
Set the verbosity level.
.IP "\(bu" 4
\&\f(CW\*(C`verbose\*(C'\fR
.Sp
Printing individual test results to \s-1STDOUT.\s0
.IP "\(bu" 4
\&\f(CW\*(C`timer\*(C'\fR
.Sp
Append run time for each test to output. Uses Time::HiRes if available.
.IP "\(bu" 4
\&\f(CW\*(C`failures\*(C'\fR
.Sp
Show test failures (this is a no-op if \f(CW\*(C`verbose\*(C'\fR is selected).
.IP "\(bu" 4
\&\f(CW\*(C`comments\*(C'\fR
.Sp
Show test comments (this is a no-op if \f(CW\*(C`verbose\*(C'\fR is selected).
.IP "\(bu" 4
\&\f(CW\*(C`quiet\*(C'\fR
.Sp
Suppressing some test output (mostly failures while tests are running).
.IP "\(bu" 4
\&\f(CW\*(C`really_quiet\*(C'\fR
.Sp
Suppressing everything but the tests summary.
.IP "\(bu" 4
\&\f(CW\*(C`silent\*(C'\fR
.Sp
Suppressing all output.
.IP "\(bu" 4
\&\f(CW\*(C`errors\*(C'\fR
.Sp
If parse errors are found in the \s-1TAP\s0 output, a note of this will be made
in the summary report.  To see all of the parse errors, set this argument to
true:
.Sp
.Vb 1
\&  errors => 1
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`directives\*(C'\fR
.Sp
If set to a true value, only test results with directives will be displayed.
This overrides other settings such as \f(CW\*(C`verbose\*(C'\fR, \f(CW\*(C`failures\*(C'\fR, or \f(CW\*(C`comments\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`stdout\*(C'\fR
.Sp
A filehandle for catching standard output.
.IP "\(bu" 4
\&\f(CW\*(C`color\*(C'\fR
.Sp
If defined specifies whether color output is desired. If \f(CW\*(C`color\*(C'\fR is not
defined it will default to color output if color support is available on
the current platform and output is not being redirected.
.IP "\(bu" 4
\&\f(CW\*(C`jobs\*(C'\fR
.Sp
The number of concurrent jobs this formatter will handle.
.IP "\(bu" 4
\&\f(CW\*(C`show_count\*(C'\fR
.Sp
Boolean value.  If false, disables the \f(CW\*(C`X/Y\*(C'\fR test count which shows up while
tests are running.
.PP
Any keys for which the value is \f(CW\*(C`undef\*(C'\fR will be ignored.
.PP
\fI\f(CI\*(C`prepare\*(C'\fI\fR
.IX Subsection "prepare"
.PP
Called by Test::Harness before any test output is generated.
.PP
This is an advisory and may not be called in the case where tests are
being supplied to Test::Harness by an iterator.
.PP
\fI\f(CI\*(C`open_test\*(C'\fI\fR
.IX Subsection "open_test"
.PP
Called to create a new test session. A test session looks like this:
.PP
.Vb 6
\&    my $session = $formatter\->open_test( $test, $parser );
\&    while ( defined( my $result = $parser\->next ) ) {
\&        $session\->result($result);
\&        exit 1 if $result\->is_bailout;
\&    }
\&    $session\->close_test;
.Ve
.PP
\fI\f(CI\*(C`summary\*(C'\fI\fR
.IX Subsection "summary"
.PP
.Vb 1
\&  $harness\->summary( $aggregate );
.Ve
.PP
\&\f(CW\*(C`summary\*(C'\fR prints the summary report after all tests are run. The first
argument is an aggregate to summarise. An optional second argument may
be set to a true value to indicate that the summary is being output as a
result of an interrupted test run.
