.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Server::PSGI 3"
.TH Net::Server::PSGI 3 "2017-08-10" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PSGI \- basic Net::Server based PSGI HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::PSGI); main\->run(port => 8080, ipv => "*")\*(Aq
\&    # runs a default echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::PSGI);
\&    _\|_PACKAGE_\|_\->run(app => \e&my_echo_handler); # will bind IPv4 port 80
\&
\&    sub my_echo_handler {
\&        my $env = shift;
\&        my $txt = qq{<form method="post" action="/bam"><input type="text" name="foo"><input type="submit"></form>\en};
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI::PSGI;
\&        my $form = {};
\&        my $q = CGI::PSGI\->new($env);
\&        $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        $txt .= "<pre>".Data::Dumper\->Dump([$env, $form], [\*(Aqenv\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], [$txt]];
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want a more fully featured \s-1PSGI\s0 experience, it would be wise to
look at the Plack and Starman set of modules.  Net::Server::PSGI
is intended as an easy gateway into \s-1PSGI.\s0  But to get the most out of
all that \s-1PSGI\s0 has to offer, you should review the Plack and
Plack::Middleware.  If you only need something a little more
rudimentary, then Net::Server::PSGI may be good for you.
.PP
Net::Server::PSGI takes Net::Server::HTTP one level farther.  It
begins with base type MultiType defaulting to Net::Server::Fork.  It
is easy to change it to any of the other Net::Server flavors by
passing server_type => \f(CW$other_flavor\fR in the server configurtation.
The port has also been defaulted to port 80 \- but could easily be
changed to another through the server configuration.  You can also
very easily add ssl by including, proto=>\*(L"ssl\*(R" and provide a
SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::PSGI);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::PSGI \- you should not
use it while using Net::Server::PSGI.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_psgi_request once the request is ready and headers
have been parsed.
.ie n .IP """process_psgi_request""" 4
.el .IP "\f(CWprocess_psgi_request\fR" 4
.IX Item "process_psgi_request"
Used when psgi_enabled is true.  During this method, find_psgi_handler
will be called to return the appropriate psgi response handler.  Once
finished, print_psgi_headers and print_psgi_body are used to print out
the response.  See \s-1PSGI\s0.
.Sp
Typically this method should not be overridden.  Instead, an appropriate
method for finding the app should be given to find_psgi_handler or app.
.ie n .IP """find_psgi_handler""" 4
.el .IP "\f(CWfind_psgi_handler\fR" 4
.IX Item "find_psgi_handler"
Used to lookup the appropriate \s-1PSGI\s0 handler.  A reference to the
already parsed \f(CW$env\fR hashref is passed.  \s-1PATH_INFO\s0 will be initialized
to the full path portion of the \s-1URI.\s0  \s-1SCRIPT_NAME\s0 will be initialized
to the empty string.  This handler should set the appropriate values
for \s-1SCRIPT_NAME\s0 and \s-1PATH_INFO\s0 depending upon the path matched.  A code
reference for the handler should be returned.  The default
find_psgi_handler will call the \f(CW\*(C`app\*(C'\fR method.  If that fails a
reference to the psgi_echo_handler is returned as the default
application.
.Sp
.Vb 2
\&    sub find_psgi_handler {
\&        my ($self, $env) = @_;
\&
\&        if ($env\->{\*(AqPATH_INFO\*(Aq} && $env\->{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&            $env\->{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&            return \e&foo_app;
\&        }
\&
\&        return $self\->SUPER::find_psgi_handler($env);
\&    }
.Ve
.ie n .IP """app""" 4
.el .IP "\f(CWapp\fR" 4
.IX Item "app"
Return a reference to the application being served.  This should
be a valid \s-1PSGI\s0 application.  See \s-1PSGI\s0.  By default it will look
at the value of the \f(CW\*(C`app\*(C'\fR configuration option.  The \f(CW\*(C`app\*(C'\fR method
may also be used to set the \f(CW\*(C`app\*(C'\fR configuration option.
.Sp
.Vb 2
\&    package MyApp;
\&    use base qw(Net::Server::PSGI);
\&
\&    sub default_server_type { \*(AqPrefork\*(Aq }
\&
\&    sub my_app {
\&        my $env = shift;
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], ["Hello world"]];
\&    }
\&
\&
\&    MyApp\->run(app => \e&my_app);
\&
\&
\&    # OR
\&    sub app { \e&my_app }
\&    MyApp\->run;
\&
\&
\&    # OR
\&    my $server = MyApp\->new;
\&    $server\->app(\e&my_app);
\&    $server\->run;
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server::HTTP
base classes you can also set the following options.
.IP "app" 4
.IX Item "app"
Should return a coderef of the \s-1PSGI\s0 application.  Is returned by the
app method.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Plack,
Starman,
.PP
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
Net::Server::HTTP
