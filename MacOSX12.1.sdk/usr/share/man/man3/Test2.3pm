.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2 3pm"
.TH Test2 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2 \- Framework for writing test tools that all work together.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test2 is a new testing framework produced by forking Test::Builder,
completely refactoring it, adding many new features and capabilities.
.SS "\s-1WHAT IS NEW\s0?"
.IX Subsection "WHAT IS NEW?"
.IP "Easier to test new testing tools." 4
.IX Item "Easier to test new testing tools."
From the beginning Test2 was built with introspection capabilities. With
Test::Builder it was difficult at best to capture test tool output for
verification. Test2 Makes it easy with \f(CW\*(C`Test2::API::intercept()\*(C'\fR.
.IP "Better diagnostics capabilities." 4
.IX Item "Better diagnostics capabilities."
Test2 uses an Test2::API::Context object to track filename, line number, and
tool details. This object greatly simplifies tracking for where errors should
be reported.
.IP "Event driven." 4
.IX Item "Event driven."
Test2 based tools produce events which get passed through a processing system
before being output by a formatter. This event system allows for rich plugin
and extension support.
.IP "More complete \s-1API.\s0" 4
.IX Item "More complete API."
Test::Builder only provided a handful of methods for generating lines of \s-1TAP.\s0
Test2 took inventory of everything people were doing with Test::Builder that
required hacking it up. Test2 made public \s-1API\s0 functions for nearly all the
desired functionality people didn't previously have.
.IP "Support for output other than \s-1TAP.\s0" 4
.IX Item "Support for output other than TAP."
Test::Builder assumed everything would end up as \s-1TAP.\s0 Test2 makes no such
assumption. Test2 provides ways for you to specify alternative and custom
formatters.
.IP "Subtest implementation is more sane." 4
.IX Item "Subtest implementation is more sane."
The Test::Builder implementation of subtests was certifiably insane. Test2 uses
a stacked event hub system that greatly improves how subtests are implemented.
.IP "Support for threading/forking." 4
.IX Item "Support for threading/forking."
Test2 support for forking and threading can be turned on using Test2::IPC.
Once turned on threading and forking operate sanely and work as one would
expect.
.SH "GETTING STARTED"
.IX Header "GETTING STARTED"
If you are interested in writing tests using new tools then you should look at
Test2::Suite. Test2::Suite is a separate cpan distribution that contains
many tools implemented on Test2.
.PP
If you are interested in writing new tools you should take a look at
Test2::API first.
.SH "NAMESPACE LAYOUT"
.IX Header "NAMESPACE LAYOUT"
This describes the namespace layout for the Test2 ecosystem. Not all the
namespaces listed here are part of the Test2 distribution, some are implemented
in Test2::Suite.
.SS "Test2::Tools::"
.IX Subsection "Test2::Tools::"
This namespace is for sets of tools. Modules in this namespace should export
tools like \f(CW\*(C`ok()\*(C'\fR and \f(CW\*(C`is()\*(C'\fR. Most things written for Test2 should go here.
Modules in this namespace \fB\s-1MUST NOT\s0\fR export subs from other tools. See the
\&\*(L"Test2::Bundle::\*(R" namespace if you want to do that.
.SS "Test2::Plugin::"
.IX Subsection "Test2::Plugin::"
This namespace is for plugins. Plugins are modules that change or enhance the
behavior of Test2. An example of a plugin is a module that sets the encoding to
utf8 globally. Another example is a module that causes a bail-out event after
the first test failure.
.SS "Test2::Bundle::"
.IX Subsection "Test2::Bundle::"
This namespace is for bundles of tools and plugins. Loading one of these may
load multiple tools and plugins. Modules in this namespace should not implement
tools directly. In general modules in this namespace should load tools and
plugins, then re-export things into the consumers namespace.
.SS "Test2::Require::"
.IX Subsection "Test2::Require::"
This namespace is for modules that cause a test to be skipped when conditions
do not allow it to run. Examples would be modules that skip the test on older
perls, or when non-essential modules have not been installed.
.SS "Test2::Formatter::"
.IX Subsection "Test2::Formatter::"
Formatters live under this namespace. Test2::Formatter::TAP is the only
formatter currently. It is acceptable for third party distributions to create
new formatters under this namespace.
.SS "Test2::Event::"
.IX Subsection "Test2::Event::"
Events live under this namespace. It is considered acceptable for third party
distributions to add new event types in this namespace.
.SS "Test2::Hub::"
.IX Subsection "Test2::Hub::"
Hub subclasses (and some hub utility objects) live under this namespace. It is
perfectly reasonable for third party distributions to add new hub subclasses in
this namespace.
.SS "Test2::IPC::"
.IX Subsection "Test2::IPC::"
The \s-1IPC\s0 subsystem lives in this namespace. There are not many good reasons to
add anything to this namespace, with exception of \s-1IPC\s0 drivers.
.PP
\fITest2::IPC::Driver::\fR
.IX Subsection "Test2::IPC::Driver::"
.PP
\&\s-1IPC\s0 drivers live in this namespace. It is fine to create new \s-1IPC\s0 drivers and to
put them in this namespace.
.SS "Test2::Util::"
.IX Subsection "Test2::Util::"
This namespace is for general utilities used by testing tools. Please be
considerate when adding new modules to this namespace.
.SS "Test2::API::"
.IX Subsection "Test2::API::"
This is for Test2 \s-1API\s0 and related packages.
.SS "Test2::"
.IX Subsection "Test2::"
The Test2:: namespace is intended for extensions and frameworks. Tools,
Plugins, etc should not go directly into this namespace. However extensions
that are used to build tools and plugins may go here.
.PP
In short: If the module exports anything that should be run directly by a test
script it should probably \s-1NOT\s0 go directly into \f(CW\*(C`Test2::XXX\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test2::API \- Primary \s-1API\s0 functions.
.PP
Test2::API::Context \- Detailed documentation of the context object.
.PP
Test2::IPC \- The \s-1IPC\s0 system used for threading/fork support.
.PP
Test2::Formatter \- Formatters such as \s-1TAP\s0 live here.
.PP
Test2::Event \- Events live in this namespace.
.PP
Test2::Hub \- All events eventually funnel through a hub. Custom hubs are how
\&\f(CW\*(C`intercept()\*(C'\fR and \f(CW\*(C`run_subtest()\*(C'\fR are implemented.
.SH "CONTACTING US"
.IX Header "CONTACTING US"
Many Test2 developers and users lurk on <irc://irc.perl.org/#perl\-qa> and
<irc://irc.perl.org/#toolchain>. We also have a slack team that can be joined
by anyone with an \f(CW\*(C`@cpan.org\*(C'\fR email address <https://perl\-test2.slack.com/>
If you do not have an \f(CW\*(C`@cpan.org\*(C'\fR email you can ask for a slack invite by
emailing Chad Granum <exodist@cpan.org>.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
