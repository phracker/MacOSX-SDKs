.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sort 3pm"
.TH sort 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sort \- perl pragma to control sort() behaviour
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use sort \*(Aqstable\*(Aq;          # guarantee stability
\&    use sort \*(Aqdefaults\*(Aq;        # revert to default behavior
\&    no  sort \*(Aqstable\*(Aq;          # stability not important
\&
\&    my $current;
\&    BEGIN {
\&        $current = sort::current();     # identify prevailing pragmata
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With the \f(CW\*(C`sort\*(C'\fR pragma you can control the behaviour of the builtin
\&\f(CW\*(C`sort()\*(C'\fR function.
.PP
A stable sort means that for records that compare equal, the original
input ordering is preserved.
Stability will matter only if elements that compare equal can be
distinguished in some other way.  That means that simple numerical
and lexical sorts do not profit from stability, since equal elements
are indistinguishable.  However, with a comparison such as
.PP
.Vb 1
\&   { substr($a, 0, 3) cmp substr($b, 0, 3) }
.Ve
.PP
stability might matter because elements that compare equal on the
first 3 characters may be distinguished based on subsequent characters.
.PP
Whether sorting is stable by default is an accident of implementation
that can change (and has changed) between Perl versions.
If stability is important, be sure to
say so with a
.PP
.Vb 1
\&  use sort \*(Aqstable\*(Aq;
.Ve
.PP
The \f(CW\*(C`no sort\*(C'\fR pragma doesn't
\&\fIforbid\fR what follows, it just leaves the choice open.  Thus, after
.PP
.Vb 1
\&  no sort \*(Aqstable\*(Aq;
.Ve
.PP
sorting may happen to be stable anyway.
.SH "CAVEATS"
.IX Header "CAVEATS"
As of Perl 5.10, this pragma is lexically scoped and takes effect
at compile time. In earlier versions its effect was global and took
effect at run-time; the documentation suggested using \f(CW\*(C`eval()\*(C'\fR to
change the behaviour:
.PP
.Vb 10
\&  { eval \*(Aqno sort "stable"\*(Aq;      # stability not wanted
\&    print sort::current . "\en";
\&    @a = sort @b;
\&    eval \*(Aquse sort "defaults"\*(Aq;   # clean up, for others
\&  }
\&  { eval \*(Aquse sort qw(defaults stable)\*(Aq;     # force stability
\&    print sort::current . "\en";
\&    @c = sort @d;
\&    eval \*(Aquse sort "defaults"\*(Aq;   # clean up, for others
\&  }
.Ve
.PP
Such code no longer has the desired effect, for two reasons.
Firstly, the use of \f(CW\*(C`eval()\*(C'\fR means that the sorting algorithm
is not changed until runtime, by which time it's too late to
have any effect. Secondly, \f(CW\*(C`sort::current\*(C'\fR is also called at
run-time, when in fact the compile-time value of \f(CW\*(C`sort::current\*(C'\fR
is the one that matters.
.PP
So now this code would be written:
.PP
.Vb 10
\&  { no sort "stable";      # stability not wanted
\&    my $current;
\&    BEGIN { $current = sort::current; }
\&    print "$current\en";
\&    @a = sort @b;
\&    # Pragmas go out of scope at the end of the block
\&  }
\&  { use sort qw(defaults stable);     # force stability
\&    my $current;
\&    BEGIN { $current = sort::current; }
\&    print "$current\en";
\&    @c = sort @d;
\&  }
.Ve
