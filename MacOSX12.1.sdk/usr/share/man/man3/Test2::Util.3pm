.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Util 3pm"
.TH Test2::Util 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Util \- Tools used by Test2 and friends.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Collection of tools used by Test2 and friends.
.SH "EXPORTS"
.IX Header "EXPORTS"
All exports are optional. You must specify subs to import.
.ie n .IP "($success, $error) = try { ... }" 4
.el .IP "($success, \f(CW$error\fR) = try { ... }" 4
.IX Item "($success, $error) = try { ... }"
Eval the codeblock, return success or failure, and the error message. This code
protects $@ and $!, they will be restored by the end of the run. This code also
temporarily blocks \f(CW$SIG\fR{\s-1DIE\s0} handlers.
.IP "protect { ... }" 4
.IX Item "protect { ... }"
Similar to try, except that it does not catch exceptions. The idea here is to
protect $@ and $! from changes. $@ and $! will be restored to whatever they
were before the run so long as it is successful. If the run fails $! will still
be restored, but $@ will contain the exception being thrown.
.IP "\s-1CAN_FORK\s0" 4
.IX Item "CAN_FORK"
True if this system is capable of true or pseudo-fork.
.IP "\s-1CAN_REALLY_FORK\s0" 4
.IX Item "CAN_REALLY_FORK"
True if the system can really fork. This will be false for systems where fork
is emulated.
.IP "\s-1CAN_THREAD\s0" 4
.IX Item "CAN_THREAD"
True if this system is capable of using threads.
.IP "\s-1USE_THREADS\s0" 4
.IX Item "USE_THREADS"
Returns true if threads are enabled, false if they are not.
.IP "get_tid" 4
.IX Item "get_tid"
This will return the id of the current thread when threads are enabled,
otherwise it returns 0.
.ie n .IP "my $file = pkg_to_file($package)" 4
.el .IP "my \f(CW$file\fR = pkg_to_file($package)" 4
.IX Item "my $file = pkg_to_file($package)"
Convert a package name to a filename.
.ie n .IP "$string = \fBipc_separator()\fR" 4
.el .IP "\f(CW$string\fR = \fBipc_separator()\fR" 4
.IX Item "$string = ipc_separator()"
Get the \s-1IPC\s0 separator. Currently this is always the string \f(CW\*(Aq~\*(Aq\fR.
.ie n .IP "$string = \fBgen_uid()\fR" 4
.el .IP "\f(CW$string\fR = \fBgen_uid()\fR" 4
.IX Item "$string = gen_uid()"
Generate a unique id (\s-1NOT A UUID\s0). This will typically be the process id, the
thread id, the time, and an incrementing integer all joined with the
\&\f(CW\*(C`ipc_separator()\*(C'\fR.
.Sp
These \s-1ID\s0's are unique enough for most purposes. For identical ids to be
generated you must have 2 processes with the same \s-1PID\s0 generate IDs at the same
time with the same current state of the incrementing integer. This is a
perfectly reasonable thing to expect to happen across multiple machines, but is
quite unlikely to happen on one machine.
.Sp
This can fail to be unique if a process generates an id, calls exec, and does
it again after the exec and it all happens in less than a second. It can also
happen if the systems process id's cycle in less than a second allowing 2
different programs that use this generator to run with the same \s-1PID\s0 in less
than a second. Both these cases are sufficiently unlikely. If you need
universally unique ids, or ids that are unique in these conditions, look at
Data::UUID.
.ie n .IP "($ok, $err) = do_rename($old_name, $new_name)" 4
.el .IP "($ok, \f(CW$err\fR) = do_rename($old_name, \f(CW$new_name\fR)" 4
.IX Item "($ok, $err) = do_rename($old_name, $new_name)"
Rename a file, this wraps \f(CW\*(C`rename()\*(C'\fR in a way that makes it more reliable
cross-platform when trying to rename files you recently altered.
.ie n .IP "($ok, $err) = do_unlink($filename)" 4
.el .IP "($ok, \f(CW$err\fR) = do_unlink($filename)" 4
.IX Item "($ok, $err) = do_unlink($filename)"
Unlink a file, this wraps \f(CW\*(C`unlink()\*(C'\fR in a way that makes it more reliable
cross-platform when trying to unlink files you recently altered.
.ie n .IP "($ok, $err) = try_sig_mask { ... }" 4
.el .IP "($ok, \f(CW$err\fR) = try_sig_mask { ... }" 4
.IX Item "($ok, $err) = try_sig_mask { ... }"
Complete an action with several signals masked, they will be unmasked at the
end allowing any signals that were intercepted to get handled.
.Sp
This is primarily used when you need to make several actions atomic (against
some signals anyway).
.Sp
Signals that are intercepted:
.RS 4
.IP "\s-1SIGINT\s0" 4
.IX Item "SIGINT"
.PD 0
.IP "\s-1SIGALRM\s0" 4
.IX Item "SIGALRM"
.IP "\s-1SIGHUP\s0" 4
.IX Item "SIGHUP"
.IP "\s-1SIGTERM\s0" 4
.IX Item "SIGTERM"
.IP "\s-1SIGUSR1\s0" 4
.IX Item "SIGUSR1"
.IP "\s-1SIGUSR2\s0" 4
.IX Item "SIGUSR2"
.RE
.RS 4
.RE
.PD
.SH "NOTES && CAVEATS"
.IX Header "NOTES && CAVEATS"
.IP "5.10.0" 4
.IX Item "5.10.0"
Perl 5.10.0 has a bug when compiled with newer gcc versions. This bug causes a
segfault whenever a new thread is launched. Test2 will attempt to detect
this, and note that the system is not capable of forking when it is detected.
.IP "Devel::Cover" 4
.IX Item "Devel::Cover"
Devel::Cover does not support threads. \s-1CAN_THREAD\s0 will return false if
Devel::Cover is loaded before the check is first run.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.IP "Kent Fredric <kentnl@cpan.org>" 4
.IX Item "Kent Fredric <kentnl@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
