.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Pager::Buffered 3"
.TH IO::Pager::Buffered 3 "2018-10-13" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Buffered \- Pipe deferred output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Buffered;
\&  {
\&    local $token = IO::Pager::Buffered::open local *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Buffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en" while 1;
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Buffered;
\&
\&    $token\->print("OO shiny...\en") while 1;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
This subclass buffers all output for display until execution returns to the
parent scope or a manual \*(L"flush\*(R" occurs.* If this is not what
you want look at another subclass such as IO::Pager::Unbuffered. While
probably not common, this may be useful in some cases, such as buffering all
output to \s-1STDOUT\s0 while the process occurs so that warnings on \s-1STDERR\s0 are more
visible, then displaying the less urgent output from \s-1STDOUT\s0 after. Or,
alternately, letting output to \s-1STDOUT\s0 slide by and defer warnings for later
perusal.
.SH "METHODS"
.IX Header "METHODS"
Class-specific method specifics below, others are inherited from IO::Pager.
.SS "open( [\s-1FILEHANDLE\s0] )"
.IX Subsection "open( [FILEHANDLE] )"
Instantiate a new IO::Pager to paginate \s-1FILEHANDLE\s0 if necessary.
\&\fIAssign the return value to a scoped variable\fR. Output does not
occur until the filehandle is \*(L"flush\*(R"ed or \*(L"close\*(R"d.
.SS "new( [\s-1FILEHANDLE\s0] )"
.IX Subsection "new( [FILEHANDLE] )"
Almost identical to open, except that you will get an IO::Handle
back if there's no \s-1TTY\s0 to allow for IO::Pager agnostic programming.
.SS "close( \s-1FILEHANDLE\s0 )"
.IX Subsection "close( FILEHANDLE )"
Flushes the buffer to the pager and closes the filehandle for writing.
Normally, when using a lexically or locally scoped variable to hold the
token supplied by \*(L"open\*(R", explicit calls to close are unnecessary.
However, if you are using IO::Pager::Buffered with an unlocalized \s-1STDOUT\s0
or \s-1STDERR\s0 you close the filehandle to display the buffered content or
wait for global garbage cleaning upon program termination.
.PP
Alternatively, you might prefer to use a non-core filehandle with IO::Pager,
and call \*(L"select\*(R" in perlfunc to make it the default for output.
.SS "tell( \s-1FILEHANDLE\s0 )"
.IX Subsection "tell( FILEHANDLE )"
Returns the size of the buffer in bytes.
.SS "flush( \s-1FILEHANDLE\s0 )"
.IX Subsection "flush( FILEHANDLE )"
Immediately flushes the contents of the buffer.
.PP
If the last print did not end with a newline, the text from the
preceding newline to the end of the buffer will be flushed but
is unlikely to display until a newline is printed and flushed.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you mix buffered and unbuffered operations the output order is unspecified,
and will probably differ for a \s-1TTY\s0 vs. a file. See perlfunc.
.PP
\&\fI$,\fR is used see perlvar.
.PP
You probably want to do something with \s-1SIGPIPE\s0 eg;
.PP
.Vb 3
\&  eval {
\&    local $SIG{PIPE} = sub { die };
\&    local $STDOUT = IO::Pager::open(*STDOUT);
\&
\&    while (1) {
\&      # Do something
\&    }
\&  }
\&
\&  # Do something else
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Unbuffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2018 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
