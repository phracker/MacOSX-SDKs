.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Config 3pm"
.TH CPANPLUS::Config 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Config \- configuration defaults and heuristics for CPANPLUS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    ### conf object via CPANPLUS::Backend;
\&    $cb   = CPANPLUS::Backend\->new;
\&    $conf = $cb\->configure_object;
\&
\&    ### or as a standalone object
\&    $conf = CPANPLUS::Configure\->new;
\&
\&    ### values in \*(Aqconf\*(Aq section
\&    $verbose = $conf\->get_conf( \*(Aqverbose\*(Aq );
\&    $conf\->set_conf( verbose => 1 );
\&
\&    ### values in \*(Aqprogram\*(Aq section
\&    $editor = $conf\->get_program( \*(Aqeditor\*(Aq );
\&    $conf\->set_program( editor => \*(Aq/bin/vi\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains defaults and heuristics for configuration
information for \s-1CPANPLUS.\s0 To change any of these values, please
see the documentation in \f(CW\*(C`CPANPLUS::Configure\*(C'\fR.
.PP
Below you'll find a list of configuration types and keys, and
their meaning.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "Section 'conf'"
.IX Subsection "Section 'conf'"
.IP "hosts" 4
.IX Item "hosts"
An array ref containing hosts entries to be queried for packages.
.Sp
An example entry would like this:
.Sp
.Vb 4
\&    {   \*(Aqscheme\*(Aq => \*(Aqftp\*(Aq,
\&        \*(Aqpath\*(Aq => \*(Aq/pub/CPAN/\*(Aq,
\&        \*(Aqhost\*(Aq => \*(Aqftp.cpan.org\*(Aq
\&    },
.Ve
.IP "allow_build_interactivity" 4
.IX Item "allow_build_interactivity"
Boolean flag to indicate whether 'perl Makefile.PL' and similar
are run interactively or not. Defaults to 'true'.
.IP "allow_unknown_prereqs" 4
.IX Item "allow_unknown_prereqs"
Boolean flag to indicate that unresolvable prereqs are acceptable.
If \f(CW\*(C`true\*(C'\fR then only warnings will be issued (the behaviour before 0.9114)
when a module is unresolvable from any our sources (\s-1CPAN\s0 and/or
\&\f(CW\*(C`custom_sources\*(C'\fR). If \f(CW\*(C`false\*(C'\fR then an unresolvable prereq will fail
during the \f(CW\*(C`prepare\*(C'\fR stage of distribution installation.
Defaults to \f(CW\*(C`true\*(C'\fR.
.IP "base" 4
.IX Item "base"
The directory \s-1CPANPLUS\s0 keeps all its build and state information in.
Defaults to ~/.cpanplus. If File::HomeDir is available, that will
be used to work out your \f(CW\*(C`HOME\*(C'\fR directory. This may be overriden by
setting the \f(CW\*(C`PERL5_CPANPLUS_HOME\*(C'\fR environment variable, see
CPANPLUS::Config::HomeEnv for more details.
.IP "buildflags" 4
.IX Item "buildflags"
Any flags to be passed to 'perl Build.PL'. See \f(CW\*(C`perldoc Module::Build\*(C'\fR
for details. Defaults to an empty string.
.IP "cpantest" 4
.IX Item "cpantest"
Boolean flag to indicate whether or not to mail test results of module
installations to \f(CW\*(C`http://testers.cpan.org\*(C'\fR. Defaults to 'false'.
.IP "cpantest_mx" 4
.IX Item "cpantest_mx"
String holding an explicit mailserver to use when sending out emails
for \f(CW\*(C`http://testers.cpan.org\*(C'\fR. An empty string will use your system
settings. Defaults to an empty string.
.IP "debug" 4
.IX Item "debug"
Boolean flag to enable or disable extensive debuggging information.
Defaults to 'false'.
.IP "dist_type" 4
.IX Item "dist_type"
Default distribution type to use when building packages. See \f(CW\*(C`cpan2dist\*(C'\fR
or \f(CW\*(C`CPANPLUS::Dist\*(C'\fR for details. An empty string will not use any
package building software. Defaults to an empty string.
.IP "email" 4
.IX Item "email"
Email address to use for anonymous ftp access and as \f(CW\*(C`from\*(C'\fR address
when sending emails. Defaults to an \f(CW\*(C`example.com\*(C'\fR address.
.IP "enable_custom_sources" 4
.IX Item "enable_custom_sources"
Boolean flag indicating whether custom sources should be enabled or
not. See the \f(CW\*(C`CUSTOM MODULE SOURCES\*(C'\fR in \f(CW\*(C`CPANPLUS::Backend\*(C'\fR for
details on how to use them.
.Sp
Defaults to \f(CW\*(C`true\*(C'\fR
.IP "extractdir" 4
.IX Item "extractdir"
String containing the directory where fetched archives should be
extracted. An empty string will use a directory under your \f(CW\*(C`base\*(C'\fR
directory. Defaults to an empty string.
.IP "fetchdir" 4
.IX Item "fetchdir"
String containing the directory where fetched archives should be
stored. An empty string will use a directory under your \f(CW\*(C`base\*(C'\fR
directory. Defaults to an empty string.
.IP "flush" 4
.IX Item "flush"
Boolean indicating whether build failures, cache dirs etc should
be flushed after every operation or not. Defaults to 'true'.
.IP "force" 4
.IX Item "force"
Boolean indicating whether files should be forcefully overwritten
if they exist, modules should be installed when they fail tests,
etc. Defaults to 'false'.
.IP "histfile" 4
.IX Item "histfile"
A string containing the history filename of the \s-1CPANPLUS\s0 readline instance.
.IP "lib" 4
.IX Item "lib"
An array ref holding directories to be added to \f(CW@INC\fR when \s-1CPANPLUS\s0
starts up. Defaults to an empty array reference.
.IP "makeflags" 4
.IX Item "makeflags"
A string holding flags that will be passed to the \f(CW\*(C`make\*(C'\fR program
when invoked. Defaults to an empty string.
.IP "makemakerflags" 4
.IX Item "makemakerflags"
A string holding flags that will be passed to \f(CW\*(C`perl Makefile.PL\*(C'\fR
when invoked. Defaults to an empty string.
.IP "md5" 4
.IX Item "md5"
A boolean indicating whether or not sha256 checks should be done when
an archive is fetched. Defaults to 'true' if you have \f(CW\*(C`Digest::SHA\*(C'\fR
installed, 'false' otherwise.
.IP "no_update" 4
.IX Item "no_update"
A boolean indicating whether or not \f(CW\*(C`CPANPLUS\*(C'\fR' source files should be
updated or not. Defaults to 'false'.
.IP "passive" 4
.IX Item "passive"
A boolean indicating whether or not to use passive ftp connections.
Defaults to 'true'.
.IP "prefer_bin" 4
.IX Item "prefer_bin"
A boolean indicating whether or not to prefer command line programs
over perl modules. Defaults to 'false' unless you do not have
\&\f(CW\*(C`Compress::Zlib\*(C'\fR installed (as that would mean we could not extract
\&\f(CW\*(C`.tar.gz\*(C'\fR files)
.IP "prefer_makefile" 4
.IX Item "prefer_makefile"
A boolean indicating whether or not prefer a \f(CW\*(C`Makefile.PL\*(C'\fR over a
\&\f(CW\*(C`Build.PL\*(C'\fR file if both are present. Defaults to 'true', unless
the perl version is at least 5.10.1 or appropriate versions of Module::Build
and CPANPLUS::Dist::Build are available.
.IP "prereqs" 4
.IX Item "prereqs"
A digit indicating what to do when a package you are installing has a
prerequisite. Options are:
.Sp
.Vb 4
\&    0   Do not install
\&    1   Install
\&    2   Ask
\&    3   Ignore  (dangerous, install will probably fail!)
.Ve
.Sp
The default is to ask.
.IP "shell" 4
.IX Item "shell"
A string holding the shell class you wish to start up when starting
\&\f(CW\*(C`CPANPLUS\*(C'\fR in interactive mode.
.Sp
Defaults to \f(CW\*(C`CPANPLUS::Shell::Default\*(C'\fR, the default \s-1CPANPLUS\s0 shell.
.IP "show_startup_tip" 4
.IX Item "show_startup_tip"
A boolean indicating whether or not to show start up tips in the
interactive shell. Defaults to 'true'.
.IP "signature" 4
.IX Item "signature"
A boolean indicating whether or not check signatures if packages are
signed. Defaults to 'true' if you have \f(CW\*(C`gpg\*(C'\fR or \f(CW\*(C`Crypt::OpenPGP\*(C'\fR
installed, 'false' otherwise.
.IP "skiptest" 4
.IX Item "skiptest"
A boolean indicating whether or not to skip tests when installing modules.
Defaults to 'false'.
.IP "storable" 4
.IX Item "storable"
A boolean indicating whether or not to use \f(CW\*(C`Storable\*(C'\fR to write compiled
source file information to disk. This makes for faster startup and look
up times, but takes extra diskspace. Defaults to 'true' if you have
\&\f(CW\*(C`Storable\*(C'\fR installed and 'false' if you don't.
.IP "timeout" 4
.IX Item "timeout"
Digit indicating the time before a fetch request times out (in seconds).
Defaults to 300.
.IP "verbose" 4
.IX Item "verbose"
A boolean indicating whether or not \f(CW\*(C`CPANPLUS\*(C'\fR runs in verbose mode.
Defaults to 'true' if you have the environment variable
\&\f(CW\*(C`PERL5_CPANPLUS_VERBOSE\*(C'\fR set to true, 'false' otherwise.
.Sp
It is recommended you run with verbose enabled, but it is disabled
for historical reasons.
.IP "write_install_log" 4
.IX Item "write_install_log"
A boolean indicating whether or not to write install logs after installing
a module using the interactive shell. Defaults to 'true'.
.IP "source_engine" 4
.IX Item "source_engine"
Class to use as the source engine, which is generally a subclass of
\&\f(CW\*(C`CPANPLUS::Internals::Source\*(C'\fR. Default to \f(CW\*(C`CPANPLUS::Internals::Source::Memory\*(C'\fR.
.IP "cpantest_reporter_args" 4
.IX Item "cpantest_reporter_args"
A hashref of key => value pairs that are passed to the constructor
of \f(CW\*(C`Test::Reporter\*(C'\fR. If you'd want to enable \s-1TLS\s0 for example, you'd
set it to:
.Sp
.Vb 3
\&  { transport       => \*(AqNet::SMTP::TLS\*(Aq,
\&    transport_args  => [ User => \*(AqJoe\*(Aq, Password => \*(Aq123\*(Aq ],
\&  }
.Ve
.SS "Section 'program'"
.IX Subsection "Section 'program'"
.IP "editor" 4
.IX Item "editor"
A string holding the path to your editor of choice. Defaults to your
\&\f(CW$ENV\fR{\s-1EDITOR\s0}, \f(CW$ENV\fR{\s-1VISUAL\s0}, 'vi' or 'pico' programs, in that order.
.IP "make" 4
.IX Item "make"
A string holding the path to your \f(CW\*(C`make\*(C'\fR binary. Looks for the \f(CW\*(C`make\*(C'\fR
program used to build perl or failing that, a \f(CW\*(C`make\*(C'\fR in your path.
.IP "pager" 4
.IX Item "pager"
A string holding the path to your pager of choice. Defaults to your
\&\f(CW$ENV\fR{\s-1PAGER\s0}, 'less' or 'more' programs, in that order.
.IP "shell" 4
.IX Item "shell"
A string holding the path to your login shell of choice. Defaults to your
\&\f(CW$ENV\fR{\s-1SHELL\s0} setting, or \f(CW$ENV\fR{\s-1COMSPEC\s0} on Windows.
.IP "sudo" 4
.IX Item "sudo"
A string holding the path to your \f(CW\*(C`sudo\*(C'\fR binary if your install path
requires super user permissions. Looks for \f(CW\*(C`sudo\*(C'\fR in your path, or
remains empty if you do not require super user permissions to install.
.IP "perlwrapper" 4
.IX Item "perlwrapper"
\&\fB\s-1DEPRECATED\s0\fR
.Sp
A string holding the path to the \f(CW\*(C`cpanp\-run\-perl\*(C'\fR utility bundled
with \s-1CPANPLUS,\s0 which is used to enable autoflushing in spawned processes.
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-cpanplus@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1CPAN++\s0 interface (of which this module is a part of) is copyright (c)
2001 \- 2007, Jos Boumans <kane@cpan.org>. All rights reserved.
.PP
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CPANPLUS::Backend, CPANPLUS::Configure::Setup, CPANPLUS::Configure
