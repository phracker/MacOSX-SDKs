.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IPC::Run3::ProfLogReader 3"
.TH IPC::Run3::ProfLogReader 3 "2014-03-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Run3::ProfLogReader \-  read and process a ProfLogger file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use IPC::Run3::ProfLogReader;
\&
\& my $reader = IPC::Run3::ProfLogReader\->new; ## use "run3.out"
\& my $reader = IPC::Run3::ProfLogReader\->new( Source => $fn );
\&
\& my $profiler = IPC::Run3::ProfPP;   ## For example
\& my $reader   = IPC::Run3::ProfLogReader\->new( ..., Handler => $p );
\&
\& $reader\->read;
\& $eaderr\->read_all;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads a log file.  Use the filename \*(L"\-\*(R" to read from \s-1STDIN.\s0
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """IPC::Run3::ProfLogReader\->new( ... )"""
.el .SS "\f(CWIPC::Run3::ProfLogReader\->new( ... )\fP"
.IX Subsection "IPC::Run3::ProfLogReader->new( ... )"
.ie n .SS """$reader\->set_handler( $handler )"""
.el .SS "\f(CW$reader\->set_handler( $handler )\fP"
.IX Subsection "$reader->set_handler( $handler )"
.ie n .SS """$reader\->get_handler()"""
.el .SS "\f(CW$reader\->get_handler()\fP"
.IX Subsection "$reader->get_handler()"
.ie n .SS """$reader\->read()"""
.el .SS "\f(CW$reader\->read()\fP"
.IX Subsection "$reader->read()"
.ie n .SS """$reader\->read_all()"""
.el .SS "\f(CW$reader\->read_all()\fP"
.IX Subsection "$reader->read_all()"
This method reads until there is nothing left to read, and then returns true.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003, R. Barrie Slaymaker, Jr., All Rights Reserved
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
You may use this module under the terms of the \s-1BSD,\s0 Artistic, or \s-1GPL\s0 licenses,
any version.
.SH "AUTHOR"
.IX Header "AUTHOR"
Barrie Slaymaker <barries@slaysys.com>
