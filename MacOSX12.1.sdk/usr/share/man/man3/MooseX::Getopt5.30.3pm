.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Getopt 3pm"
.TH MooseX::Getopt 3pm "2018-09-23" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Getopt \- A Moose role for processing command line options
.SH "VERSION"
.IX Header "VERSION"
version 0.74
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  ## In your class
\&  package My::App;
\&  use Moose;
\&
\&  with \*(AqMooseX::Getopt\*(Aq;
\&
\&  has \*(Aqout\*(Aq => (is => \*(Aqrw\*(Aq, isa => \*(AqStr\*(Aq, required => 1);
\&  has \*(Aqin\*(Aq  => (is => \*(Aqrw\*(Aq, isa => \*(AqStr\*(Aq, required => 1);
\&
\&  # ... rest of the class here
\&
\&  ## in your script
\&  #!/usr/bin/perl
\&
\&  use My::App;
\&
\&  my $app = My::App\->new_with_options();
\&  # ... rest of the script here
\&
\&  ## on the command line
\&  % perl my_app_script.pl \-in file.input \-out file.dump
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a role which provides an alternate constructor for creating
objects using parameters passed in from the command line.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new_with_options (%params)"""
.el .SS "\f(CWnew_with_options (%params)\fP"
.IX Subsection "new_with_options (%params)"
This method will take a set of default \f(CW%params\fR and then collect
parameters from the command line (possibly overriding those in \f(CW%params\fR)
and then return a newly constructed object.
.PP
The special parameter \f(CW\*(C`argv\*(C'\fR, if specified should point to an array
reference with an array to use instead of \f(CW@ARGV\fR.
.PP
If \*(L"GetOptions\*(R" in Getopt::Long fails (due to invalid arguments),
\&\f(CW\*(C`new_with_options\*(C'\fR will throw an exception.
.PP
If Getopt::Long::Descriptive is installed and any of the following
command line parameters are passed, the program will exit with usage
information (and the option's state will be stored in the help_flag
attribute). You can add descriptions for each option by including a
\&\fBdocumentation\fR option for each attribute to document.
.PP
.Vb 5
\&  \-?
\&  \-\-?
\&  \-h
\&  \-\-help
\&  \-\-usage
.Ve
.PP
If you have Getopt::Long::Descriptive the \f(CW\*(C`usage\*(C'\fR parameter is also passed to
\&\f(CW\*(C`new\*(C'\fR as the usage option.
.ie n .SS """ARGV"""
.el .SS "\f(CWARGV\fP"
.IX Subsection "ARGV"
This accessor contains a reference to a copy of the \f(CW@ARGV\fR array
as it originally existed at the time of \f(CW\*(C`new_with_options\*(C'\fR.
.ie n .SS """extra_argv"""
.el .SS "\f(CWextra_argv\fP"
.IX Subsection "extra_argv"
This accessor contains an arrayref of leftover \f(CW@ARGV\fR elements that
Getopt::Long did not parse.  Note that the real \f(CW@ARGV\fR is left
untouched.
.PP
\&\fBImportant\fR: By default, Getopt::Long will reject unrecognized \fIoptions\fR
(that is, options that do not correspond with attributes using the \f(CW\*(C`Getopt\*(C'\fR
trait). To disable this, and allow options to also be saved in \f(CW\*(C`extra_argv\*(C'\fR
(for example to pass along to another class's \f(CW\*(C`new_with_options\*(C'\fR), you can either enable the
\&\f(CW\*(C`pass_through\*(C'\fR option of Getopt::Long for your class:  \f(CW\*(C`use Getopt::Long
qw(:config pass_through);\*(C'\fR or specify a value for MooseX::Getopt::GLD's \f(CW\*(C`getopt_conf\*(C'\fR parameter.
.ie n .SS """usage"""
.el .SS "\f(CWusage\fP"
.IX Subsection "usage"
This accessor contains the Getopt::Long::Descriptive::Usage object (if
Getopt::Long::Descriptive is used).
.ie n .SS """help_flag"""
.el .SS "\f(CWhelp_flag\fP"
.IX Subsection "help_flag"
This accessor contains the boolean state of the \-\-help, \-\-usage and \-\-?
options (true if any of these options were passed on the command line).
.ie n .SS """print_usage_text"""
.el .SS "\f(CWprint_usage_text\fP"
.IX Subsection "print_usage_text"
This method is called internally when the \f(CW\*(C`help_flag\*(C'\fR state is true.
It prints the text from the \f(CW\*(C`usage\*(C'\fR object (see above) to \f(CW\*(C`STDOUT\*(C'\fR
(and then after this method is called, the
program terminates normally).  You can apply a method modification (see
Moose::Manual::MethodModifiers) if different behaviour is desired, for
example to include additional text.
.ie n .SS """meta"""
.el .SS "\f(CWmeta\fP"
.IX Subsection "meta"
This returns the role meta object.
.ie n .SS """process_argv (%params)"""
.el .SS "\f(CWprocess_argv (%params)\fP"
.IX Subsection "process_argv (%params)"
This does most of the work of \f(CW\*(C`new_with_options\*(C'\fR, analyzing the parameters
and \f(CW\*(C`argv\*(C'\fR, except for actually calling the constructor. It returns a
MooseX::Getopt::ProcessedArgv object. \f(CW\*(C`new_with_options\*(C'\fR uses this
method internally, so modifying this method via subclasses/roles will affect
\&\f(CW\*(C`new_with_options\*(C'\fR.
.PP
This module attempts to \s-1DWIM\s0 as much as possible with the command line
parameters by introspecting your class's attributes. It will use the name
of your attribute as the command line option, and if there is a type
constraint defined, it will configure Getopt::Long to handle the option
accordingly.
.PP
You can use the trait MooseX::Getopt::Meta::Attribute::Trait or the
attribute metaclass MooseX::Getopt::Meta::Attribute to get non-default
command-line option names and aliases.
.PP
You can use the trait MooseX::Getopt::Meta::Attribute::Trait::NoGetopt
or the attribute metaclass MooseX::Getopt::Meta::Attribute::NoGetopt
to have \f(CW\*(C`MooseX::Getopt\*(C'\fR ignore your attribute in the command-line options.
.PP
By default, attributes which start with an underscore are not given
command-line argument support, unless the attribute's metaclass is set
to MooseX::Getopt::Meta::Attribute. If you don't want your accessors
to have the leading underscore in their name, you can do this:
.PP
.Vb 2
\&  # for read/write attributes
\&  has \*(Aq_foo\*(Aq => (accessor => \*(Aqfoo\*(Aq, ...);
\&
\&  # or for read\-only attributes
\&  has \*(Aq_bar\*(Aq => (reader => \*(Aqbar\*(Aq, ...);
.Ve
.PP
This will mean that MooseX::Getopt will not handle a \-\-foo parameter, but your
code can still call the \f(CW\*(C`foo\*(C'\fR method.
.PP
If your class also uses a configfile-loading role based on
MooseX::ConfigFromFile, such as MooseX::SimpleConfig,
MooseX::Getopt's \f(CW\*(C`new_with_options\*(C'\fR will load the configfile
specified by the \f(CW\*(C`\-\-configfile\*(C'\fR option (or the default you've
given for the configfile attribute) for you.
.PP
Options specified in multiple places follow the following
precedence order: command-line overrides configfile, which
overrides explicit new_with_options parameters.
.SS "Supported Type Constraints"
.IX Subsection "Supported Type Constraints"
.IP "\fIBool\fR" 4
.IX Item "Bool"
A \fIBool\fR type constraint is set up as a boolean option with
Getopt::Long. So that this attribute description:
.Sp
.Vb 1
\&  has \*(Aqverbose\*(Aq => (is => \*(Aqrw\*(Aq, isa => \*(AqBool\*(Aq);
.Ve
.Sp
would translate into \f(CW\*(C`verbose!\*(C'\fR as a Getopt::Long option descriptor,
which would enable the following command line options:
.Sp
.Vb 2
\&  % my_script.pl \-\-verbose
\&  % my_script.pl \-\-noverbose
.Ve
.IP "\fIInt\fR, \fIFloat\fR, \fIStr\fR" 4
.IX Item "Int, Float, Str"
These type constraints are set up as properly typed options with
Getopt::Long, using the \f(CW\*(C`=i\*(C'\fR, \f(CW\*(C`=f\*(C'\fR and \f(CW\*(C`=s\*(C'\fR modifiers as appropriate.
.IP "\fIArrayRef\fR" 4
.IX Item "ArrayRef"
An \fIArrayRef\fR type constraint is set up as a multiple value option
in Getopt::Long. So that this attribute description:
.Sp
.Vb 5
\&  has \*(Aqinclude\*(Aq => (
\&      is      => \*(Aqrw\*(Aq,
\&      isa     => \*(AqArrayRef\*(Aq,
\&      default => sub { [] }
\&  );
.Ve
.Sp
would translate into \f(CW\*(C`includes=s@\*(C'\fR as a Getopt::Long option descriptor,
which would enable the following command line options:
.Sp
.Vb 1
\&  % my_script.pl \-\-include /usr/lib \-\-include /usr/local/lib
.Ve
.IP "\fIHashRef\fR" 4
.IX Item "HashRef"
A \fIHashRef\fR type constraint is set up as a hash value option
in Getopt::Long. So that this attribute description:
.Sp
.Vb 5
\&  has \*(Aqdefine\*(Aq => (
\&      is      => \*(Aqrw\*(Aq,
\&      isa     => \*(AqHashRef\*(Aq,
\&      default => sub { {} }
\&  );
.Ve
.Sp
would translate into \f(CW\*(C`define=s%\*(C'\fR as a Getopt::Long option descriptor,
which would enable the following command line options:
.Sp
.Vb 1
\&  % my_script.pl \-\-define os=linux \-\-define vendor=debian
.Ve
.SS "Custom Type Constraints"
.IX Subsection "Custom Type Constraints"
It is possible to create custom type constraint to option spec
mappings if you need them. The process is fairly simple (but a
little verbose maybe). First you create a custom subtype, like
so:
.PP
.Vb 3
\&  subtype \*(AqArrayOfInts\*(Aq
\&      => as \*(AqArrayRef\*(Aq
\&      => where { scalar (grep { looks_like_number($_) } @$_)  };
.Ve
.PP
Then you register the mapping, like so:
.PP
.Vb 3
\&  MooseX::Getopt::OptionTypeMap\->add_option_type_to_map(
\&      \*(AqArrayOfInts\*(Aq => \*(Aq=i@\*(Aq
\&  );
.Ve
.PP
Now any attribute declarations using this type constraint will
get the custom option spec. So that, this:
.PP
.Vb 5
\&  has \*(Aqnums\*(Aq => (
\&      is      => \*(Aqro\*(Aq,
\&      isa     => \*(AqArrayOfInts\*(Aq,
\&      default => sub { [0] }
\&  );
.Ve
.PP
Will translate to the following on the command line:
.PP
.Vb 1
\&  % my_script.pl \-\-nums 5 \-\-nums 88 \-\-nums 199
.Ve
.PP
This example is fairly trivial, but more complex validations are
easily possible with a little creativity. The trick is balancing
the type constraint validations with the Getopt::Long validations.
.PP
Better examples are certainly welcome :)
.SS "Inferred Type Constraints"
.IX Subsection "Inferred Type Constraints"
If you define a custom subtype which is a subtype of one of the
standard \*(L"Supported Type Constraints\*(R" above, and do not explicitly
provide custom support as in \*(L"Custom Type Constraints\*(R" above,
MooseX::Getopt will treat it like the parent type for Getopt
purposes.
.PP
For example, if you had the same custom \f(CW\*(C`ArrayOfInts\*(C'\fR subtype
from the examples above, but did not add a new custom option
type for it to the \f(CW\*(C`OptionTypeMap\*(C'\fR, it would be treated just
like a normal \f(CW\*(C`ArrayRef\*(C'\fR type for Getopt purposes (that is,
\&\f(CW\*(C`=s@\*(C'\fR).
.SS "More Customization Options"
.IX Subsection "More Customization Options"
See \*(L"Configuring Getopt::Long\*(R" in Getopt::Long for many other customizations you
can make to how options are parsed. Simply \f(CW\*(C`use Getopt::Long qw(:config
other_options...)\*(C'\fR in your class to set these.
.PP
Note in particular that the default setting for case sensitivity has changed
over time in Getopt::Long::Descriptive, so if you rely on a particular
setting, you should set it explicitly, or enforce the version of
Getopt::Long::Descriptive that you install.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
MooseX::Getopt::Usage, an extension to generate man pages, with colour
.IP "\(bu" 4
MooX::Options, similar functionality for Moo
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Getopt>
(or bug\-MooseX\-Getopt@rt.cpan.org <mailto:bug-MooseX-Getopt@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Yuval Kogman <nothingmuch@woobling.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Brandon L Black <blblack@gmail.com>
.IP "\(bu" 4
Shlomi Fish <shlomif@cpan.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Olaf Alders <olaf@wundersolutions.com>
.IP "\(bu" 4
Nelo Onyiah <nelo.onyiah@gmail.com>
.IP "\(bu" 4
Ryan D Johnson <ryan@innerfence.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason <avarab@gmail.com>
.IP "\(bu" 4
Hinrik O\*:rn Sigur\*(d-sson <hinrik.sig@gmail.com>
.IP "\(bu" 4
Damien Krotkine <dkrotkine@weborama.com>
.IP "\(bu" 4
Todd Hepler <thepler@employees.org>
.IP "\(bu" 4
Devin Austin <dhoss@cpan.org>
.IP "\(bu" 4
Jose Luis Martinez <jlmartinez@capside.com>
.IP "\(bu" 4
Gregory Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Jonathan Swartz <swartz@pobox.com>
.IP "\(bu" 4
Andreas Ko\*:nig <Andreas.Koenig.extern@telecolumbus.de>
.IP "\(bu" 4
Dagfinn Ilmari Mannsa\*oker <ilmari@ilmari.org>
.IP "\(bu" 4
Damyan Ivanov <dmn@debian.org>
.IP "\(bu" 4
Drew Taylor <drew@drewtaylor.com>
.IP "\(bu" 4
Gordon Irving <goraxe@goraxe.me.uk>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
John Goulah <jgoulah@cpan.org>
.IP "\(bu" 4
Andreas Koenig <andk@cpan.org>
.IP "\(bu" 4
Justin Hunter <justin.d.hunter@gmail.com>
.IP "\(bu" 4
Michael Schout <mschout@gkg.net>
.IP "\(bu" 4
Shlomi Fish <shlomif@shlomifish.org>
.IP "\(bu" 4
Stevan Little <stevan.little@gmail.com>
.IP "\(bu" 4
Stuart A Johnston <saj_git@thecommune.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2007 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
