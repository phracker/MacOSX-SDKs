.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Hub 3"
.TH Test2::EventFacet::Hub 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::EventFacet::Hub \- Facet for the hubs an event passes through.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These are a record of the hubs an event passes through. Most recent hub is the
first one in the list.
.SH "FACET FIELDS"
.IX Header "FACET FIELDS"
.ie n .IP "$string = $trace\->{details}" 4
.el .IP "\f(CW$string\fR = \f(CW$trace\fR\->{details}" 4
.IX Item "$string = $trace->{details}"
.PD 0
.ie n .IP "$string = $trace\->\fBdetails()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$trace\fR\->\fBdetails()\fR" 4
.IX Item "$string = $trace->details()"
.PD
The hub class or subclass
.ie n .IP "$int = $trace\->{pid}" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->{pid}" 4
.IX Item "$int = $trace->{pid}"
.PD 0
.ie n .IP "$int = $trace\->\fBpid()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->\fBpid()\fR" 4
.IX Item "$int = $trace->pid()"
.PD
\&\s-1PID\s0 of the hub this event was sent to.
.ie n .IP "$int = $trace\->{tid}" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->{tid}" 4
.IX Item "$int = $trace->{tid}"
.PD 0
.ie n .IP "$int = $trace\->\fBtid()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->\fBtid()\fR" 4
.IX Item "$int = $trace->tid()"
.PD
The thread \s-1ID\s0 of the hub the event was sent to.
.ie n .IP "$hid = $trace\->{hid}" 4
.el .IP "\f(CW$hid\fR = \f(CW$trace\fR\->{hid}" 4
.IX Item "$hid = $trace->{hid}"
.PD 0
.ie n .IP "$hid = $trace\->\fBhid()\fR" 4
.el .IP "\f(CW$hid\fR = \f(CW$trace\fR\->\fBhid()\fR" 4
.IX Item "$hid = $trace->hid()"
.PD
The \s-1ID\s0 of the hub that the event was send to.
.ie n .IP "$huuid = $trace\->{huuid}" 4
.el .IP "\f(CW$huuid\fR = \f(CW$trace\fR\->{huuid}" 4
.IX Item "$huuid = $trace->{huuid}"
.PD 0
.ie n .IP "$huuid = $trace\->\fBhuuid()\fR" 4
.el .IP "\f(CW$huuid\fR = \f(CW$trace\fR\->\fBhuuid()\fR" 4
.IX Item "$huuid = $trace->huuid()"
.PD
The \s-1UUID\s0 of the hub that the event was sent to.
.ie n .IP "$int = $trace\->{nested}" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->{nested}" 4
.IX Item "$int = $trace->{nested}"
.PD 0
.ie n .IP "$int = $trace\->\fBnested()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$trace\fR\->\fBnested()\fR" 4
.IX Item "$int = $trace->nested()"
.PD
How deeply nested the hub was.
.ie n .IP "$bool = $trace\->{buffered}" 4
.el .IP "\f(CW$bool\fR = \f(CW$trace\fR\->{buffered}" 4
.IX Item "$bool = $trace->{buffered}"
.PD 0
.ie n .IP "$bool = $trace\->\fBbuffered()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$trace\fR\->\fBbuffered()\fR" 4
.IX Item "$bool = $trace->buffered()"
.PD
True if the event was buffered and not sent to the formatter independent of a
parent (This should never be set when nested is \f(CW0\fR or \f(CW\*(C`undef\*(C'\fR).
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
