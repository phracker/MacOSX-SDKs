.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Legacy::Table_ClassMetaclass 3"
.TH Moose::Cookbook::Legacy::Table_ClassMetaclass 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Legacy::Table_ClassMetaclass \- Adding a "table" attribute to the metaclass
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package MyApp::Meta::Class;
\&  use Moose;
\&  extends \*(AqMoose::Meta::Class\*(Aq;
\&
\&  has table => (
\&      is  => \*(Aqrw\*(Aq,
\&      isa => \*(AqStr\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING:\s0 Subclassing metaclasses (as opposed to providing metaclass traits)
is strongly discouraged. This recipe is provided solely for reference when
encountering older code that does this.\fR
.PP
In this recipe, we'll create a new metaclass which has a \*(L"table\*(R"
attribute. This metaclass is for classes associated with a \s-1DBMS\s0 table,
as one might do for an \s-1ORM.\s0
.PP
In this example, the table name is just a string, but in a real \s-1ORM\s0
the table might be an object describing the table.
.SH "THE METACLASS"
.IX Header "THE METACLASS"
This really is as simple as the recipe \*(L"\s-1SYNOPSIS\*(R"\s0 shows. The trick
is getting your classes to use this metaclass, and providing some sort
of sugar for declaring the table. This is covered in
Moose::Cookbook::Extending::Recipe2, which shows how to make a
module like \f(CW\*(C`Moose.pm\*(C'\fR itself, with sugar like \f(CW\*(C`has_table()\*(C'\fR.
.SS "Using this Metaclass in Practice"
.IX Subsection "Using this Metaclass in Practice"
Accessing this new \f(CW\*(C`table\*(C'\fR attribute is quite simple. Given a class
named \f(CW\*(C`MyApp::User\*(C'\fR, we could simply write the following:
.PP
.Vb 1
\&  my $table = MyApp::User\->meta\->table;
.Ve
.PP
As long as \f(CW\*(C`MyApp::User\*(C'\fR has arranged to use \f(CW\*(C`MyApp::Meta::Class\*(C'\fR as
its metaclass, this method call just works. If we want to be more
careful, we can check the metaclass's class:
.PP
.Vb 2
\&  $table = MyApp::User\->meta\->table
\&      if MyApp::User\->meta\->isa(\*(AqMyApp::Meta::Class\*(Aq);
.Ve
.SH "CONCLUSION"
.IX Header "CONCLUSION"
Creating custom metaclass is trivial. Using it is a little harder, and
is covered in other recipes. We will also talk about applying traits
to a class metaclass, which is a more flexible and cooperative
implementation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose::Cookbook::Meta::Recipe5 \- The \*(L"table\*(R" attribute implemented
as a metaclass trait
.PP
Moose::Cookbook::Extending::Recipe2 \- Acting like Moose.pm and
providing sugar Moose-style
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
