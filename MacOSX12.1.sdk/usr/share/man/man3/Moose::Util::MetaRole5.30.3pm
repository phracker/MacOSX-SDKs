.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Util::MetaRole 3"
.TH Moose::Util::MetaRole 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Util::MetaRole \- Apply roles to any metaclass, as well as the object base class
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyApp::Moose;
\&
\&  use Moose ();
\&  use Moose::Exporter;
\&  use Moose::Util::MetaRole;
\&
\&  use MyApp::Role::Meta::Class;
\&  use MyApp::Role::Meta::Method::Constructor;
\&  use MyApp::Role::Object;
\&
\&  Moose::Exporter\->setup_import_methods( also => \*(AqMoose\*(Aq );
\&
\&  sub init_meta {
\&      shift;
\&      my %args = @_;
\&
\&      Moose\->init_meta(%args);
\&
\&      Moose::Util::MetaRole::apply_metaroles(
\&          for             => $args{for_class},
\&          class_metaroles => {
\&              class       => [\*(AqMyApp::Role::Meta::Class\*(Aq],
\&              constructor => [\*(AqMyApp::Role::Meta::Method::Constructor\*(Aq],
\&          },
\&      );
\&
\&      Moose::Util::MetaRole::apply_base_class_roles(
\&          for   => $args{for_class},
\&          roles => [\*(AqMyApp::Role::Object\*(Aq],
\&      );
\&
\&      return $args{for_class}\->meta();
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility module is designed to help authors of Moose extensions
write extensions that are able to cooperate with other Moose
extensions. To do this, you must write your extensions as roles, which
can then be dynamically applied to the caller's metaclasses.
.PP
This module makes sure to preserve any existing superclasses and roles
already set for the meta objects, which means that any number of
extensions can apply roles in any order.
.SH "USAGE"
.IX Header "USAGE"
The easiest way to use this module is through Moose::Exporter, which can
generate the appropriate \f(CW\*(C`init_meta\*(C'\fR method for you, and make sure it is
called when imported.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module provides two functions.
.SS "apply_metaroles( ... )"
.IX Subsection "apply_metaroles( ... )"
This function will apply roles to one or more metaclasses for the specified
class. It will return a new metaclass object for the class or role passed in
the \*(L"for\*(R" parameter.
.PP
It accepts the following parameters:
.IP "\(bu" 4
for => \f(CW$name\fR
.Sp
This specifies the class or for which to alter the meta classes. This can be a
package name, or an appropriate meta-object (a Moose::Meta::Class or
Moose::Meta::Role).
.IP "\(bu" 4
class_metaroles => \e%roles
.Sp
This is a hash reference specifying which metaroles will be applied to the
class metaclass and its contained metaclasses and helper classes.
.Sp
Each key should in turn point to an array reference of role names.
.Sp
It accepts the following keys:
.RS 4
.IP "class" 8
.IX Item "class"
.PD 0
.IP "attribute" 8
.IX Item "attribute"
.IP "method" 8
.IX Item "method"
.IP "wrapped_method" 8
.IX Item "wrapped_method"
.IP "instance" 8
.IX Item "instance"
.IP "constructor" 8
.IX Item "constructor"
.IP "destructor" 8
.IX Item "destructor"
.IP "error" 8
.IX Item "error"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
role_metaroles => \e%roles
.Sp
This is a hash reference specifying which metaroles will be applied to the
role metaclass and its contained metaclasses and helper classes.
.Sp
It accepts the following keys:
.RS 4
.IP "role" 8
.IX Item "role"
.PD 0
.IP "attribute" 8
.IX Item "attribute"
.IP "method" 8
.IX Item "method"
.IP "required_method" 8
.IX Item "required_method"
.IP "conflicting_method" 8
.IX Item "conflicting_method"
.IP "application_to_class" 8
.IX Item "application_to_class"
.IP "application_to_role" 8
.IX Item "application_to_role"
.IP "application_to_instance" 8
.IX Item "application_to_instance"
.IP "application_role_summation" 8
.IX Item "application_role_summation"
.IP "applied_attribute" 8
.IX Item "applied_attribute"
.RE
.RS 4
.RE
.PD
.ie n .SS "apply_base_class_roles( for => $class, roles => \e@roles )"
.el .SS "apply_base_class_roles( for => \f(CW$class\fP, roles => \e@roles )"
.IX Subsection "apply_base_class_roles( for => $class, roles => @roles )"
This function will apply the specified roles to the object's base class.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
