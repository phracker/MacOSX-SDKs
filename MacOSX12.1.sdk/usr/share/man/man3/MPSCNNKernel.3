.TH "MPSCNNKernel" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNKernel
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNKernel\&.h>\fP
.PP
Inherits \fBMPSKernel\fP\&.
.PP
Inherited by \fBMPSCNNBatchNormalization\fP, \fBMPSCNNBatchNormalizationStatistics\fP, \fBMPSCNNBinaryConvolution\fP, \fBMPSCNNConvolution\fP, \fBMPSCNNConvolutionTranspose\fP, \fBMPSCNNCrossChannelNormalization\fP, \fBMPSCNNDropout\fP, \fBMPSCNNInstanceNormalization\fP, \fBMPSCNNLocalContrastNormalization\fP, \fBMPSCNNLogSoftMax\fP, \fBMPSCNNLoss\fP, \fBMPSCNNNeuron\fP, \fBMPSCNNPooling\fP, \fBMPSCNNSoftMax\fP, \fBMPSCNNSpatialNormalization\fP, \fBMPSCNNUpsampling\fP, \fBMPSCNNYOLOLoss\fP, \fBMPSNNCropAndResizeBilinear\fP, \fBMPSNNReduceUnary\fP, \fBMPSNNReshape\fP, \fBMPSNNResizeBilinear\fP, \fBMPSNNSlice\fP, and \fBMPSRNNImageInferenceLayer\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceImage:destinationImage:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceImage:destinationState:destinationImage:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeBatchToCommandBuffer:sourceImages:destinationImages:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeBatchToCommandBuffer:sourceImages:destinationStates:destinationImages:\fP"
.br
.ti -1c
.RI "(\fBMPSImage\fP *__nonnull) \- \fBencodeToCommandBuffer:sourceImage:\fP"
.br
.ti -1c
.RI "(\fBMPSImage\fP *__nonnull) \- \fBencodeToCommandBuffer:sourceImage:destinationState:destinationStateIsTemporary:\fP"
.br
.ti -1c
.RI "(\fBMPSImageBatch\fP *__nonnull) \- \fBencodeBatchToCommandBuffer:sourceImages:\fP"
.br
.ti -1c
.RI "(\fBMPSImageBatch\fP *__nonnull) \- \fBencodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:\fP"
.br
.ti -1c
.RI "(\fBMPSState\fP *__nullable) \- \fBresultStateForSourceImage:sourceStates:destinationImage:\fP"
.br
.ti -1c
.RI "(\fBMPSStateBatch\fP *__nullable) \- \fBresultStateBatchForSourceImage:sourceStates:destinationImage:\fP"
.br
.ti -1c
.RI "(\fBMPSState\fP *__nullable) \- \fBtemporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:\fP"
.br
.ti -1c
.RI "(\fBMPSStateBatch\fP *__nullable) \- \fBtemporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBisResultStateReusedAcrossBatch\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBappendBatchBarrier\fP"
.br
.ti -1c
.RI "(\fBMPSImageDescriptor\fP *__nonnull) \- \fBdestinationImageDescriptorForSourceImages:sourceStates:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMPSOffset\fP \fBoffset\fP"
.br
.ti -1c
.RI "MTLRegion \fBclipRect\fP"
.br
.ti -1c
.RI "NSUInteger \fBdestinationFeatureChannelOffset\fP"
.br
.ti -1c
.RI "NSUInteger \fBsourceFeatureChannelOffset\fP"
.br
.ti -1c
.RI "NSUInteger \fBsourceFeatureChannelMaxCount\fP"
.br
.ti -1c
.RI "\fBMPSImageEdgeMode\fP \fBedgeMode\fP"
.br
.ti -1c
.RI "NSUInteger \fBkernelWidth\fP"
.br
.ti -1c
.RI "NSUInteger \fBkernelHeight\fP"
.br
.ti -1c
.RI "NSUInteger \fBstrideInPixelsX\fP"
.br
.ti -1c
.RI "NSUInteger \fBstrideInPixelsY\fP"
.br
.ti -1c
.RI "NSUInteger \fBdilationRateX\fP"
.br
.ti -1c
.RI "NSUInteger \fBdilationRateY\fP"
.br
.ti -1c
.RI "BOOL \fBisBackwards\fP"
.br
.ti -1c
.RI "BOOL BOOL \fBisStateModified\fP"
.br
.ti -1c
.RI "id< \fBMPSNNPadding\fP > \fBpadding\fP"
.br
.ti -1c
.RI "id< \fBMPSNNPadding\fP > id< MPSImageAllocator > \fBdestinationImageAllocator\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  Describes a convolution neural network kernel\&.  \fBA\fP \fBMPSCNNKernel\fP consumes one \fBMPSImage\fP and produces one \fBMPSImage\fP\&. 
.PP
.nf
        The region overwritten in the destination MPSImage is described
        by the clipRect.  The top left corner of the region consumed (ignoring
        adjustments for filter size -- e.g. convolution filter size) is given
        by the offset. The size of the region consumed is a function of the
        clipRect size and any subsampling caused by pixel strides at work,
        e.g. MPSCNNPooling.strideInPixelsX/Y.  Where the offset + clipRect
        would cause a {x,y} pixel address not in the image to be read, the
        edgeMode is used to determine what value to read there.

        The Z/depth component of the offset, clipRect.origin and clipRect.size
        indexes which images to use. If the MPSImage contains only a single image
        then these should be offset.z = 0, clipRect.origin.z = 0
        and clipRect.size.depth = 1. If the MPSImage contains multiple images,
        clipRect.size.depth refers to number of images to process. Both source
        and destination MPSImages must have at least this many images. offset.z
        refers to starting source image index. Thus offset.z + clipRect.size.depth must
        be <= source.numberOfImages. Similarly, clipRect.origin.z refers to starting
        image index in destination. So clipRect.origin.z + clipRect.size.depth must be
        <= destination.numberOfImage.

        destinationFeatureChannelOffset property can be used to control where the MPSKernel will
        start writing in feature channel dimension. For example, if the destination image has
        64 channels, and MPSKernel outputs 32 channels, by default channels 0-31 of destination
        will be populated by MPSKernel. But if we want this MPSKernel to populate channel 32-63
        of the destination, we can set destinationFeatureChannelOffset = 32.
        A good example of this is concat (concatenation) operation in Tensor Flow. Suppose
        we have a src = w x h x Ni which goes through CNNConvolution_0 which produces
        output O0 = w x h x N0 and CNNConvolution_1 which produces output O1 = w x h x N1 followed
        by concatenation which produces O = w x h x (N0 + N1). We can achieve this by creating
        an MPSImage with dimensions O = w x h x (N0 + N1) and using this as destination of
        both convolutions as follows
            CNNConvolution0: destinationFeatureChannelOffset = 0, this will output N0 channels starting at
                             channel 0 of destination thus populating [0,N0-1] channels.
            CNNConvolution1: destinationFeatureChannelOffset = N0, this will output N1 channels starting at
                             channel N0 of destination thus populating [N0,N0+N1-1] channels.


        A MPSCNNKernel can be saved to disk / network using NSCoders such as NSKeyedArchiver. 
        When decoding, the system default MTLDevice will be chosen unless the NSCoder adopts 
        the <MPSDeviceProvider> protocol.  To accomplish this you will likely need to subclass your
        unarchiver to add this method.
.fi
.PP
 
.SH "Method Documentation"
.PP 
.SS "\- (BOOL) appendBatchBarrier "
Returns YES if the filter must be run over the entire batch before its results may be used  Nearly all filters do not need to see the entire batch all at once and can operate correctly with partial batches\&. This allows the graph to strip-mine the problem, processing the graph top to bottom on a subset of the batch at a time, dramatically reducing memory usage\&. As the full nominal working set for a graph is often so large that it may not fit in memory, sub-batching may be required forward progress\&.
.PP
Batch normalization statistics on the other hand must complete the batch before the statistics may be used to normalize the images in the batch in the ensuing normalization filter\&. Consequently, batch normalization statistics requests the graph insert a batch barrier following it by returning YES from -appendBatchBarrier\&. This tells the graph to complete the batch before any dependent filters can start\&. Note that the filter itself may still be subject to sub-batching in its operation\&. All filters must be able to function without seeing the entire batch in a single -encode call\&. Carry over state that is accumulated across sub-batches is commonly carried in a shared \fBMPSState\fP containing a MTLBuffer\&. See -isResultStateReusedAcrossBatch\&.
.PP
Caution: on most supported devices, the working set may be so large that the graph may be forced to throw away and recalculate most intermediate images in cases where strip-mining can not occur because -appendBatchBarrier returns YES\&. \fBA\fP single batch barrier can commonly cause a memory size increase and/or performance reduction by many fold over the entire graph\&. Filters of this variety should be avoided\&.
.PP
Default: NO 
.SS "\- (\fBMPSImageDescriptor\fP*__nonnull) destinationImageDescriptorForSourceImages: (NSArray< \fBMPSImage\fP * > *__nonnull) sourceImages(NSArray< \fBMPSState\fP * > *__nullable) sourceStates"
Get a suggested destination image descriptor for a source image  Your application is certainly free to pass in any destinationImage it likes to encodeToCommandBuffer:sourceImage:destinationImage, within reason\&. This is the basic design for iOS 10\&. This method is therefore not required\&.
.PP
However, calculating the \fBMPSImage\fP size and \fBMPSCNNKernel\fP properties for each filter can be tedious and complicated work, so this method is made available to automate the process\&. The application may modify the properties of the descriptor before a \fBMPSImage\fP is made from it, so long as the choice is sensible for the kernel in question\&. Please see individual kernel descriptions for restrictions\&.
.PP
The expected timeline for use is as follows:
.PP
1) This method is called: a) The default MPS padding calculation is applied\&. It uses the MPSNNPaddingMethod of the \&.padding property to provide a consistent addressing scheme over the graph\&. It creates the \fBMPSImageDescriptor\fP and adjusts the \&.offset property of the MPSNNKernel\&. When using a \fBMPSNNGraph\fP, the padding is set using the \fBMPSNNFilterNode\fP as a proxy\&.
.PP
b) This method may be overridden by \fBMPSCNNKernel\fP subclass to achieve any customization appropriate to the object type\&.
.PP
c) Source states are then applied in order\&. These may modify the descriptor and may update other object properties\&. See: -destinationImageDescriptorForSourceImages:sourceStates: forKernel:suggestedDescriptor: This is the typical way in which MPS may attempt to influence the operation of its kernels\&.
.PP
d) If the \&.padding property has a custom padding policy method of the same name, it is called\&. Similarly, it may also adjust the descriptor and any \fBMPSCNNKernel\fP properties\&. This is the typical way in which your application may attempt to influence the operation of the MPS kernels\&.
.PP
2) \fBA\fP result is returned from this method and the caller may further adjust the descriptor and kernel properties directly\&.
.PP
3) The caller uses the descriptor to make a new \fBMPSImage\fP to use as the destination image for the -encode call in step 5\&.
.PP
4) The caller calls -resultStateForSourceImage:sourceStates:destinationImage: to make any result states needed for the kernel\&. If there isn't one, it will return nil\&. \fBA\fP variant is available to return a temporary state instead\&.
.PP
5) a -encode method is called to encode the kernel\&.
.PP
The entire process 1-5 is more simply achieved by just calling an -encode\&.\&.\&. method that returns a \fBMPSImage\fP out the left hand sid of the method\&. Simpler still, use the \fBMPSNNGraph\fP to coordinate the entire process from end to end\&. Opportunities to influence the process are of course reduced, as (2) is no longer possible with either method\&. Your application may opt to use the five step method if it requires greater customization as described, or if it would like to estimate storage in advance based on the sum of MPSImageDescriptors before processing a graph\&. Storage estimation is done by using the \fBMPSImageDescriptor\fP to create a \fBMPSImage\fP (without passing it a texture), and then call -resourceSize\&. As long as the \fBMPSImage\fP is not used in an encode call and the \&.texture property is not invoked, the underlying MTLTexture is not created\&.
.PP
No destination state or destination image is provided as an argument to this function because it is expected they will be made / configured after this is called\&. This method is expected to auto-configure important object properties that may be needed in the ensuing destination image and state creation steps\&.
.PP
\fBParameters:\fP
.RS 4
\fIsourceImages\fP \fBA\fP array of source images that will be passed into the -encode call Since \fBMPSCNNKernel\fP is a unary kernel, it is an array of length 1\&. 
.br
\fIsourceStates\fP An optional array of source states that will be passed into the -encode call 
.RE
.PP
\fBReturns:\fP
.RS 4
an image descriptor allocated on the autorelease pool 
.RE
.PP

.SS "\- (\fBMPSImageBatch\fP * __nonnull) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. Create a texture to hold the result and return it\&.  In the first iteration on this method, encodeToCommandBuffer:sourceImage:destinationImage: some work was left for the developer to do in the form of correctly setting the offset property and sizing the result buffer\&. With the introduction of the padding policy (see padding property) the filter can do this work itself\&. If you would like to have some input into what sort of \fBMPSImage\fP (e\&.g\&. temporary vs\&. regular) or what size it is or where it is allocated, you may set the destinationImageAllocator to allocate the image yourself\&.
.PP
This method uses the \fBMPSNNPadding\fP padding property to figure out how to size the result image and to set the offset property\&. See discussion in \fBMPSNeuralNetworkTypes\&.h\fP\&. All images in a batch must have \fBMPSImage\&.numberOfImages\fP = 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer 
.br
\fIsourceImages\fP \fBA\fP MPSImages to use as the source images for the filter\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of MPSImages or MPSTemporaryImages allocated per the destinationImageAllocator containing the output of the graph\&. The offset property will be adjusted to reflect the offset used during the encode\&. The returned images will be automatically released when the command buffer completes\&. If you want to keep them around for longer, retain the images\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNBatchNormalizationStatistics\fP\&.
.SS "\- (void) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages(\fBMPSImageBatch\fP *__nonnull) destinationImages"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. The operation shall proceed out-of-place\&.  This is the older style of encode which reads the offset, doesn't change it, and ignores the padding method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIsourceImages\fP \fBA\fP valid \fBMPSImage\fP object containing the source images\&. 
.br
\fIdestinationImages\fP \fBA\fP valid \fBMPSImage\fP to be overwritten by result images\&. destinationImages may not alias sourceImages, even at different indices\&. 
.RE
.PP

.SS "\- (void) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages(\fBMPSStateBatch\fP *__nullable) destinationStates(\fBMPSImageBatch\fP *__nonnull) destinationImages"
Encode a \fBMPSCNNKernel\fP with a destination state into a command Buffer\&.  This is typically used during training\&. The state is commonly a \fBMPSNNGradientState\fP\&. Please see -resultStateForSourceImages:SourceStates:destinationImage and batch+temporary variants\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIsourceImages\fP \fBA\fP valid \fBMPSImage\fP object containing the source images\&. 
.br
\fIdestinationStates\fP \fBA\fP list of states to be overwritten by results 
.br
\fIdestinationImages\fP \fBA\fP valid \fBMPSImage\fP to be overwritten by result images\&. destinationImages may not alias sourceImages, even at different indices\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNBatchNormalization\fP\&.
.SS "\- (\fBMPSImageBatch\fP * __nonnull) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages(__autoreleasing \fBMPSStateBatch\fP *__nullable *__nonnull) outStates(BOOL) isTemporary"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. Create a MPSImageBatch and MPSStateBatch to hold the results and return them\&.  In the first iteration on this method, encodeToCommandBuffer:sourceImage:destinationImage: some work was left for the developer to do in the form of correctly setting the offset property and sizing the result buffer\&. With the introduction of the padding policy (see padding property) the filter can do this work itself\&. If you would like to have some input into what sort of \fBMPSImage\fP (e\&.g\&. temporary vs\&. regular) or what size it is or where it is allocated, you may set the destinationImageAllocator to allocate the image yourself\&.
.PP
This method uses the \fBMPSNNPadding\fP padding property to figure out how to size the result image and to set the offset property\&. See discussion in \fBMPSNeuralNetworkTypes\&.h\fP\&. All images in a batch must have \fBMPSImage\&.numberOfImages\fP = 1\&.
.PP
Usage: 
.PP
.nf
MPSStateBatch * outStates = nil;    // autoreleased
MPSImageBatch * result = [k encodeBatchToCommandBuffer: cmdBuf
                                          sourceImages: sourceImages
                                     destinationStates: &outStates ];

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer 
.br
\fIsourceImages\fP \fBA\fP MPSImages to use as the source images for the filter\&. 
.br
\fIoutStates\fP \fBA\fP pointer to storage to hold a MPSStateBatch* where output states are returned 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of MPSImages or MPSTemporaryImages allocated per the destinationImageAllocator containing the output of the graph\&. The offset property will be adjusted to reflect the offset used during the encode\&. The returned images will be automatically released when the command buffer completes\&. If you want to keep them around for longer, retain the images\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNBatchNormalization\fP\&.
.SS "\- (\fBMPSImage\fP * __nonnull) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. Create a texture to hold the result and return it\&.  In the first iteration on this method, encodeToCommandBuffer:sourceImage:destinationImage: some work was left for the developer to do in the form of correctly setting the offset property and sizing the result buffer\&. With the introduction of the padding policy (see padding property) the filter can do this work itself\&. If you would like to have some input into what sort of \fBMPSImage\fP (e\&.g\&. temporary vs\&. regular) or what size it is or where it is allocated, you may set the destinationImageAllocator to allocate the image yourself\&.
.PP
This method uses the \fBMPSNNPadding\fP padding property to figure out how to size the result image and to set the offset property\&. See discussion in \fBMPSNeuralNetworkTypes\&.h\fP\&. All images in a batch must have \fBMPSImage\&.numberOfImages\fP = 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer 
.br
\fIsourceImage\fP \fBA\fP \fBMPSImage\fP to use as the source images for the filter\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP \fBMPSImage\fP or \fBMPSTemporaryImage\fP allocated per the destinationImageAllocator containing the output of the graph\&. The offset property will be adjusted to reflect the offset used during the encode\&. The returned image will be automatically released when the command buffer completes\&. If you want to keep it around for longer, retain the image\&. (ARC will do this for you if you use it later\&.) 
.RE
.PP

.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(\fBMPSImage\fP *__nonnull) destinationImage"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. The operation shall proceed out-of-place\&.  This is the older style of encode which reads the offset, doesn't change it, and ignores the padding method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIsourceImage\fP \fBA\fP valid \fBMPSImage\fP object containing the source image\&. 
.br
\fIdestinationImage\fP \fBA\fP valid \fBMPSImage\fP to be overwritten by result image\&. destinationImage may not alias sourceImage\&. 
.RE
.PP

.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(\fBMPSState\fP *__nonnull) destinationState(\fBMPSImage\fP *__nonnull) destinationImage"
Encode a \fBMPSCNNKernel\fP with a destination state into a command Buffer\&.  This is typically used during training\&. The state is commonly a \fBMPSNNGradientState\fP\&. Please see -resultStateForSourceImages:SourceStates: and batch+temporary variants\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIsourceImage\fP \fBA\fP valid \fBMPSImage\fP object containing the source image\&. 
.br
\fIdestinationState\fP \fBA\fP state to be overwritten by additional state information\&. 
.br
\fIdestinationImage\fP \fBA\fP valid \fBMPSImage\fP to be overwritten by result image\&. destinationImage may not alias sourceImage\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNBatchNormalization\fP\&.
.SS "\- (\fBMPSImage\fP * __nonnull) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(__autoreleasing \fBMPSState\fP *__nullable *__nonnull) outState(BOOL) isTemporary"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. Create a texture and state to hold the results and return them\&.  In the first iteration on this method, encodeToCommandBuffer:sourceImage:destinationState:destinationImage: some work was left for the developer to do in the form of correctly setting the offset property and sizing the result buffer\&. With the introduction of the padding policy (see padding property) the filter can do this work itself\&. If you would like to have some input into what sort of \fBMPSImage\fP (e\&.g\&. temporary vs\&. regular) or what size it is or where it is allocated, you may set the destinationImageAllocator to allocate the image yourself\&.
.PP
This method uses the \fBMPSNNPadding\fP padding property to figure out how to size the result image and to set the offset property\&. See discussion in \fBMPSNeuralNetworkTypes\&.h\fP\&. All images in a batch must have \fBMPSImage\&.numberOfImages\fP = 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer 
.br
\fIsourceImage\fP \fBA\fP \fBMPSImage\fP to use as the source images for the filter\&. 
.br
\fIoutState\fP \fBA\fP new state object is returned here\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP \fBMPSImage\fP or \fBMPSTemporaryImage\fP allocated per the destinationImageAllocator containing the output of the graph\&. The offset property will be adjusted to reflect the offset used during the encode\&. The returned image will be automatically released when the command buffer completes\&. If you want to keep it around for longer, retain the image\&. (ARC will do this for you if you use it later\&.) 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNBatchNormalization\fP\&.
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use initWithCoder:device instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSKernel\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.PP
Reimplemented in \fBMPSCNNBinaryConvolution\fP, \fBMPSCNNBinaryFullyConnected\fP, \fBMPSCNNConvolutionTranspose\fP, \fBMPSCNNFullyConnected\fP, \fBMPSCNNConvolution\fP, \fBMPSCNNYOLOLoss\fP, \fBMPSRNNImageInferenceLayer\fP, \fBMPSCNNLoss\fP, \fBMPSCNNCrossChannelNormalization\fP, \fBMPSCNNDilatedPoolingMax\fP, \fBMPSCNNBatchNormalization\fP, \fBMPSCNNBatchNormalizationStatistics\fP, \fBMPSCNNPoolingAverage\fP, \fBMPSCNNPoolingL2Norm\fP, \fBMPSCNNLocalContrastNormalization\fP, \fBMPSCNNInstanceNormalization\fP, \fBMPSCNNNeuron\fP, \fBMPSNNCropAndResizeBilinear\fP, \fBMPSCNNDropout\fP, \fBMPSCNNSpatialNormalization\fP, \fBMPSNNResizeBilinear\fP, \fBMPSCNNPooling\fP, and \fBMPSCNNPoolingMax\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.PP
Reimplemented in \fBMPSCNNBinaryConvolution\fP, \fBMPSCNNBinaryFullyConnected\fP, \fBMPSCNNConvolutionTranspose\fP, \fBMPSCNNFullyConnected\fP, \fBMPSCNNConvolution\fP, \fBMPSCNNYOLOLoss\fP, \fBMPSRNNImageInferenceLayer\fP, \fBMPSCNNLoss\fP, \fBMPSCNNCrossChannelNormalization\fP, \fBMPSNNReshape\fP, \fBMPSCNNBatchNormalization\fP, \fBMPSCNNBatchNormalizationStatistics\fP, \fBMPSNNReduceFeatureChannelsSum\fP, \fBMPSCNNNeuronLinear\fP, \fBMPSCNNNeuronReLU\fP, \fBMPSCNNNeuronPReLU\fP, \fBMPSCNNNeuronSigmoid\fP, \fBMPSCNNNeuronHardSigmoid\fP, \fBMPSCNNNeuronTanH\fP, \fBMPSCNNNeuronAbsolute\fP, \fBMPSCNNNeuronSoftPlus\fP, \fBMPSCNNNeuronSoftSign\fP, \fBMPSCNNNeuronELU\fP, \fBMPSCNNNeuronReLUN\fP, \fBMPSCNNNeuronPower\fP, \fBMPSCNNNeuronExponential\fP, \fBMPSCNNNeuronLogarithm\fP, \fBMPSCNNLocalContrastNormalization\fP, \fBMPSCNNInstanceNormalization\fP, \fBMPSCNNNeuron\fP, \fBMPSNNCropAndResizeBilinear\fP, \fBMPSNNSlice\fP, \fBMPSCNNDropout\fP, \fBMPSCNNUpsampling\fP, \fBMPSCNNSpatialNormalization\fP, \fBMPSNNReduceUnary\fP, \fBMPSNNReduceRowMin\fP, \fBMPSNNReduceColumnMin\fP, \fBMPSNNReduceFeatureChannelsMin\fP, \fBMPSNNReduceFeatureChannelsArgumentMin\fP, \fBMPSNNReduceRowMax\fP, \fBMPSNNReduceColumnMax\fP, \fBMPSNNReduceFeatureChannelsMax\fP, \fBMPSNNReduceFeatureChannelsArgumentMax\fP, \fBMPSNNReduceRowMean\fP, \fBMPSNNReduceColumnMean\fP, \fBMPSNNReduceFeatureChannelsMean\fP, \fBMPSNNReduceRowSum\fP, \fBMPSNNReduceColumnSum\fP, \fBMPSNNResizeBilinear\fP, and \fBMPSCNNPooling\fP\&.
.SS "\- (BOOL) isResultStateReusedAcrossBatch "
Returns YES if the same state is used for every operation in a batch  If NO, then each image in a MPSImageBatch will need a corresponding (and different) state to go with it\&. Set to YES to avoid allocating redundant state in the case when the same state is used all the time\&. Default: NO 
.SS "\- (\fBMPSStateBatch\fP * __nullable) resultStateBatchForSourceImage: (\fBMPSImageBatch\fP *__nonnull) sourceImage(NSArray< \fBMPSStateBatch\fP * > *__nullable) sourceStates(\fBMPSImageBatch\fP *__nonnull) destinationImage"

.SS "\- (\fBMPSState\fP * __nullable) resultStateForSourceImage: (\fBMPSImage\fP *__nonnull) sourceImage(NSArray< \fBMPSState\fP * > *__nullable) sourceStates(\fBMPSImage\fP *__nonnull) destinationImage"
Allocate a \fBMPSState\fP (subclass) to hold the results from a -encodeBatchToCommandBuffer\&.\&.\&. operation  \fBA\fP graph may need to allocate storage up front before executing\&. This may be necessary to avoid using too much memory and to manage large batches\&. The function should allocate any \fBMPSState\fP objects that will be produced by an -encode call with the indicated sourceImages and sourceStates inputs\&. Though the states can be further adjusted in the ensuing -encode call, the states should be initialized with all important data and all MTLResource storage allocated\&. The data stored in the MTLResource need not be initialized, unless the ensuing -encode call expects it to be\&.
.PP
The MTLDevice used by the result is derived from the source image\&. The padding policy will be applied to the filter before this is called to give it the chance to configure any properties like \fBMPSCNNKernel\&.offset\fP\&.
.PP
CAUTION: The kernel must have all properties set to values that will ultimately be passed to the -encode call that writes to the state, before -resultStateForSourceImages:sourceStates:destinationImage: is called or behavior is undefined\&. Please note that -destinationImageDescriptorForSourceImages:sourceStates: will alter some of these properties automatically based on the padding policy\&. If you intend to call that to make the destination image, then you should call that before -resultStateForSourceImages:sourceStates:destinationImage:\&. This will ensure the properties used in the encode call and in the destination image creation match those used to configure the state\&.
.PP
The following order is recommended: 
.PP
.nf
// Configure MPSCNNKernel properties first
kernel.edgeMode = MPSImageEdgeModeZero;
kernel.destinationFeatureChannelOffset = 128; // concatenation without the copy
...

// ALERT: will change MPSCNNKernel properties
MPSImageDescriptor * d = [kernel destinationImageDescriptorForSourceImage: source
                                                             sourceStates: states];
MPSTemporaryImage * dest = [MPSTemporaryImage temporaryImageWithCommandBuffer: cmdBuf
                                                              imageDescriptor: d];

// Now that all properties are configured properly, we can make the result state
// and call encode.
MPSState * __nullable destState = [kernel resultStateForSourceImage: source
                                                       sourceStates: states
                                                   destinationImage: dest];

// This form of -encode will be declared by the MPSCNNKernel subclass
[kernel encodeToCommandBuffer: cmdBuf
                  sourceImage: source
             destinationState: destState
             destinationImage: dest ];

.fi
.PP
.PP
Default: returns nil
.PP
\fBParameters:\fP
.RS 4
\fIsourceImage\fP The \fBMPSImage\fP consumed by the associated -encode call\&. 
.br
\fIsourceStates\fP The list of MPSStates consumed by the associated -encode call, for a batch size of 1\&. 
.br
\fIdestinationImage\fP The destination image for the encode call 
.RE
.PP
\fBReturns:\fP
.RS 4
The list of states produced by the -encode call for batch size of 1\&. When the batch size is not 1, this function will be called repeatedly unless -isResultStateReusedAcrossBatch returns YES\&. If -isResultStateReusedAcrossBatch returns YES, then it will be called once per batch and the MPSStateBatch array will contain MPSStateBatch\&.length references to the same object\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNConvolution\fP, \fBMPSCNNBatchNormalization\fP, and \fBMPSCNNInstanceNormalization\fP\&.
.SS "\- (\fBMPSStateBatch\fP * __nullable) temporaryResultStateBatchForCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImage(NSArray< \fBMPSStateBatch\fP * > *__nullable) sourceStates(\fBMPSImageBatch\fP *__nonnull) destinationImage"

.PP
Reimplemented in \fBMPSCNNConvolution\fP\&.
.SS "\- (\fBMPSState\fP * __nullable) temporaryResultStateForCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(NSArray< \fBMPSState\fP * > *__nullable) sourceStates(\fBMPSImage\fP *__nonnull) destinationImage"
Allocate a temporary \fBMPSState\fP (subclass) to hold the results from a -encodeBatchToCommandBuffer\&.\&.\&. operation  \fBA\fP graph may need to allocate storage up front before executing\&. This may be necessary to avoid using too much memory and to manage large batches\&. The function should allocate any \fBMPSState\fP objects that will be produced by an -encode call with the indicated sourceImages and sourceStates inputs\&. Though the states can be further adjusted in the ensuing -encode call, the states should be initialized with all important data and all MTLResource storage allocated\&. The data stored in the MTLResource need not be initialized, unless the ensuing -encode call expects it to be\&.
.PP
The MTLDevice used by the result is derived from the command buffer\&. The padding policy will be applied to the filter before this is called to give it the chance to configure any properties like \fBMPSCNNKernel\&.offset\fP\&.
.PP
CAUTION: The kernel must have all properties set to values that will ultimately be passed to the -encode call that writes to the state, before -resultStateForSourceImages:sourceStates:destinationImage: is called or behavior is undefined\&. Please note that -destinationImageDescriptorForSourceImages:sourceStates:destinationImage: will alter some of these properties automatically based on the padding policy\&. If you intend to call that to make the destination image, then you should call that before -resultStateForSourceImages:sourceStates:destinationImage:\&. This will ensure the properties used in the encode call and in the destination image creation match those used to configure the state\&.
.PP
The following order is recommended: 
.PP
.nf
// Configure MPSCNNKernel properties first
kernel.edgeMode = MPSImageEdgeModeZero;
kernel.destinationFeatureChannelOffset = 128; // concatenation without the copy
...

// ALERT: will change MPSCNNKernel properties
MPSImageDescriptor * d = [kernel destinationImageDescriptorForSourceImage: source
                                                             sourceStates: states];
MPSTemporaryImage * dest = [MPSTemporaryImage temporaryImageWithCommandBuffer: cmdBuf
                                                              imageDescriptor: d];

// Now that all properties are configured properly, we can make the result state
// and call encode.
MPSState * __nullable destState = [kernel temporaryResultStateForCommandBuffer: cmdBuf
                                                                   sourceImage: source
                                                                  sourceStates: states];

// This form of -encode will be declared by the MPSCNNKernel subclass
[kernel encodeToCommandBuffer: cmdBuf
                  sourceImage: source
             destinationState: destState
             destinationImage: dest ];

.fi
.PP
.PP
Default: returns nil
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer to allocate the temporary storage against The state will only be valid on this command buffer\&. 
.br
\fIsourceImage\fP The \fBMPSImage\fP consumed by the associated -encode call\&. 
.br
\fIsourceStates\fP The list of MPSStates consumed by the associated -encode call, for a batch size of 1\&. 
.br
\fIdestinationImage\fP The destination image for the encode call 
.RE
.PP
\fBReturns:\fP
.RS 4
The list of states produced by the -encode call for batch size of 1\&. When the batch size is not 1, this function will be called repeatedly unless -isResultStateReusedAcrossBatch returns YES\&. If -isResultStateReusedAcrossBatch returns YES, then it will be called once per batch and the MPSStateBatch array will contain MPSStateBatch\&.length references to the same object\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNConvolution\fP, \fBMPSCNNBatchNormalization\fP, and \fBMPSCNNInstanceNormalization\fP\&.
.SH "Property Documentation"
.PP 
.SS "\- clipRect\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
An optional clip rectangle to use when writing data\&. Only the pixels in the rectangle will be overwritten\&.  \fBA\fP MTLRegion that indicates which part of the destination to overwrite\&. If the clipRect does not lie completely within the destination image, the intersection between clip rectangle and destination bounds is used\&. Default: MPSRectNoClip (\fBMPSKernel::MPSRectNoClip\fP) indicating the entire image\&. clipRect\&.origin\&.z is the index of starting destination image in batch processing mode\&. clipRect\&.size\&.depth is the number of images to process in batch processing mode\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_clipRect 
.SS "\- destinationFeatureChannelOffset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of channels in the destination \fBMPSImage\fP to skip before writing output\&.  This is the starting offset into the destination image in the feature channel dimension at which destination data is written\&. This allows an application to pass a subset of all the channels in \fBMPSImage\fP as output of \fBMPSKernel\fP\&. E\&.g\&. Suppose \fBMPSImage\fP has 24 channels and a \fBMPSKernel\fP outputs 8 channels\&. If we want channels 8 to 15 of this \fBMPSImage\fP to be used as output, we can set destinationFeatureChannelOffset = 8\&. Note that this offset applies independently to each image when the \fBMPSImage\fP is a container for multiple images and the \fBMPSCNNKernel\fP is processing multiple images (clipRect\&.size\&.depth > 1)\&. The default value is 0 and any value specifed shall be a multiple of 4\&. If \fBMPSKernel\fP outputs N channels, the destination image MUST have at least destinationFeatureChannelOffset + N channels\&. Using a destination image with insufficient number of feature channels will result in an error\&. E\&.g\&. if the \fBMPSCNNConvolution\fP outputs 32 channels, and the destination has 64 channels, then it is an error to set destinationFeatureChannelOffset > 32\&. 
.SS "\- (id<\fBMPSNNPadding\fP> id<MPSImageAllocator>) destinationImageAllocator\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [retain]\fP"
Method to allocate the result image for -encodeToCommandBuffer:sourceImage:  Default: \fBdefaultAllocator (MPSTemporaryImage)\fP 
.SS "\- dilationRateX\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Stride in source coordinates from one kernel tap to the next in the X dimension\&. 
.SS "\- (NSUInteger) dilationRateY\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"

.SS "\- edgeMode\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The MPSImageEdgeMode to use when texture reads stray off the edge of an image  Most \fBMPSKernel\fP objects can read off the edge of the source image\&. This can happen because of a negative offset property, because the offset + clipRect\&.size is larger than the source image or because the filter looks at neighboring pixels, such as a Convolution filter\&. Default: MPSImageEdgeModeZero\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_edgemode Note: For \fBMPSCNNPoolingAverage\fP specifying edge mode \fBMPSImageEdgeModeClamp\fP is interpreted as a 'shrink-to-edge' operation, which shrinks the effective filtering window to remain within the source image borders\&. 
.SS "\- isBackwards\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
YES if the filter operates backwards\&.  This influences how strideInPixelsX/Y should be interpreted\&. Most filters either have stride 1 or are reducing, meaning that the result image is smaller than the original by roughly a factor of the stride\&. \fBA\fP few 'backward' filters (e\&.g convolution transpose) are intended to 'undo' the effects of an earlier forward filter, and so enlarge the image\&. The stride is in the destination coordinate frame rather than the source coordinate frame\&. 
.SS "\- (BOOL BOOL) isStateModified\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Returns true if the -encode call modifies the state object it accepts\&. 
.SS "\- kernelHeight\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The height of the \fBMPSCNNKernel\fP filter window  This is the vertical diameter of the region read by the filter for each result pixel\&. If the \fBMPSCNNKernel\fP does not have a filter window, then 1 will be returned\&.
.PP
Warning: This property was lowered to this class in ios/tvos 11 The property may not be available on iOS/tvOS 10 for all subclasses of \fBMPSCNNKernel\fP 
.SS "\- kernelWidth\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The width of the \fBMPSCNNKernel\fP filter window  This is the horizontal diameter of the region read by the filter for each result pixel\&. If the \fBMPSCNNKernel\fP does not have a filter window, then 1 will be returned\&.
.PP
Warning: This property was lowered to this class in ios/tvos 11 The property may not be available on iOS/tvOS 10 for all subclasses of \fBMPSCNNKernel\fP 
.SS "\- offset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The position of the destination clip rectangle origin relative to the source buffer\&.  The offset is defined to be the position of clipRect\&.origin in source coordinates\&. Default: {0,0,0}, indicating that the top left corners of the clipRect and source image align\&. offset\&.z is the index of starting source image in batch processing mode\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_mpsoffset 
.SS "\- padding\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The padding method used by the filter  This influences how the destination image is sized and how the offset into the source image is set\&. It is used by the -encode methods that return a \fBMPSImage\fP from the left hand side\&. 
.SS "\- sourceFeatureChannelMaxCount\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The maximum number of channels in the source \fBMPSImage\fP to use  Most filters can insert a slice operation into the filter for free\&. Use this to limit the size of the feature channel slice taken from the input image\&. If the value is too large, it is truncated to be the remaining size in the image after the sourceFeatureChannelOffset is taken into account\&. Default: ULONG_MAX 
.SS "\- sourceFeatureChannelOffset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of channels in the source \fBMPSImage\fP to skip before reading the input\&.  This is the starting offset into the source image in the feature channel dimension at which source data is read\&. Unit: feature channels This allows an application to read a subset of all the channels in \fBMPSImage\fP as input of \fBMPSKernel\fP\&. E\&.g\&. Suppose \fBMPSImage\fP has 24 channels and a \fBMPSKernel\fP needs to read 8 channels\&. If we want channels 8 to 15 of this \fBMPSImage\fP to be used as input, we can set sourceFeatureChannelOffset = 8\&. Note that this offset applies independently to each image when the \fBMPSImage\fP is a container for multiple images and the \fBMPSCNNKernel\fP is processing multiple images (clipRect\&.size\&.depth > 1)\&. The default value is 0 and any value specifed shall be a multiple of 4\&. If \fBMPSKernel\fP inputs N channels, the source image MUST have at least sourceFeatureChannelOffset + N channels\&. Using a source image with insufficient number of feature channels will result in an error\&. E\&.g\&. if the \fBMPSCNNConvolution\fP inputs 32 channels, and the source has 64 channels, then it is an error to set sourceFeatureChannelOffset > 32\&. 
.SS "\- strideInPixelsX\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The downsampling (or upsampling if a backwards filter) factor in the horizontal dimension  If the filter does not do up or downsampling, 1 is returned\&. 
.PP
.nf
        Warning: This property was lowered to this class in ios/tvos 11
                 The property may not be available on iOS/tvOS 10 for
                 all subclasses of MPSCNNKernel
.fi
.PP
 
.SS "\- strideInPixelsY\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The downsampling (or upsampling if a backwards filter) factor in the vertical dimension  If the filter does not do up or downsampling, 1 is returned\&. 
.PP
.nf
        Warning: This property was lowered to this class in ios/tvos 11
                 The property may not be available on iOS/tvOS 10 for
                 all subclasses of MPSCNNKernel
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
