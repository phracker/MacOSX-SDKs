.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Installed 3pm"
.TH ExtUtils::Installed 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Installed \- Inventory management of installed modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   use ExtUtils::Installed;
\&   my ($inst) = ExtUtils::Installed\->new( skip_cwd => 1 );
\&   my (@modules) = $inst\->modules();
\&   my (@missing) = $inst\->validate("DBI");
\&   my $all_files = $inst\->files("DBI");
\&   my $files_below_usr_local = $inst\->files("DBI", "all", "/usr/local");
\&   my $all_dirs = $inst\->directories("DBI");
\&   my $dirs_below_usr_local = $inst\->directory_tree("DBI", "prog");
\&   my $packlist = $inst\->packlist("DBI");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Installed  provides a standard way to find out what core and module
files have been installed.  It uses the information stored in .packlist files
created during installation to provide this information.  In addition it
provides facilities to classify the installed files and to extract directory
information from the .packlist files.
.SH "USAGE"
.IX Header "USAGE"
The \fInew()\fR function searches for all the installed .packlists on the system, and
stores their contents. The .packlists can be queried with the functions
described below. Where it searches by default is determined by the settings found
in \f(CW%Config::Config\fR, and what the value is of the \s-1PERL5LIB\s0 environment variable.
.SH "METHODS"
.IX Header "METHODS"
Unless specified otherwise all method can be called as class methods, or as object
methods. If called as class methods then the \*(L"default\*(R" object will be used, and if
necessary created using the current processes \f(CW%Config\fR and \f(CW@INC\fR.  See the
\&'default' option to \fInew()\fR for details.
.IP "\fInew()\fR" 4
.IX Item "new()"
This takes optional named parameters. Without parameters, this
searches for all the installed .packlists on the system using
information from \f(CW%Config::Config\fR and the default module search
paths \f(CW@INC\fR. The packlists are read using the
ExtUtils::Packlist module.
.Sp
If the named parameter \f(CW\*(C`skip_cwd\*(C'\fR is true, the current directory \f(CW\*(C`.\*(C'\fR will
be stripped from \f(CW@INC\fR before searching for .packlists.  This keeps
ExtUtils::Installed from finding modules installed in other perls that
happen to be located below the current directory.
.Sp
If the named parameter \f(CW\*(C`config_override\*(C'\fR is specified,
it should be a reference to a hash which contains all information
usually found in \f(CW%Config::Config\fR. For example, you can obtain
the configuration information for a separate perl installation and
pass that in.
.Sp
.Vb 3
\&    my $yoda_cfg  = get_fake_config(\*(Aqyoda\*(Aq);
\&    my $yoda_inst =
\&               ExtUtils::Installed\->new(config_override=>$yoda_cfg);
.Ve
.Sp
Similarly, the parameter \f(CW\*(C`inc_override\*(C'\fR may be a reference to an
array which is used in place of the default module search paths
from \f(CW@INC\fR.
.Sp
.Vb 3
\&    use Config;
\&    my @dirs = split(/\eQ$Config{path_sep}\eE/, $ENV{PERL5LIB});
\&    my $p5libs = ExtUtils::Installed\->new(inc_override=>\e@dirs);
.Ve
.Sp
\&\fBNote\fR: You probably do not want to use these options alone, almost always
you will want to set both together.
.Sp
The parameter \f(CW\*(C`extra_libs\*(C'\fR can be used to specify \fBadditional\fR paths to
search for installed modules. For instance
.Sp
.Vb 2
\&    my $installed =
\&             ExtUtils::Installed\->new(extra_libs=>["/my/lib/path"]);
.Ve
.Sp
This should only be necessary if \fI/my/lib/path\fR is not in \s-1PERL5LIB.\s0
.Sp
Finally there is the 'default', and the related 'default_get' and 'default_set'
options. These options control the \*(L"default\*(R" object which is provided by the
class interface to the methods. Setting \f(CW\*(C`default_get\*(C'\fR to true tells the constructor
to return the default object if it is defined. Setting \f(CW\*(C`default_set\*(C'\fR to true tells
the constructor to make the default object the constructed object. Setting the
\&\f(CW\*(C`default\*(C'\fR option is like setting both to true. This is used primarily internally
and probably isn't interesting to any real user.
.IP "\fImodules()\fR" 4
.IX Item "modules()"
This returns a list of the names of all the installed modules.  The perl 'core'
is given the special name 'Perl'.
.IP "\fIfiles()\fR" 4
.IX Item "files()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the filenames from the package.  To obtain a list of core perl files, use
the module name 'Perl'.  Additional parameters are allowed.  The first is one
of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just program files,
just manual files or all files.  The remaining parameters are a list of
directories. The filenames returned will be restricted to those under the
specified directories.
.IP "\fIdirectories()\fR" 4
.IX Item "directories()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the directories from the package.  Additional parameters are allowed.  The
first is one of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just
program directories, just manual directories or all directories.  The remaining
parameters are a list of directories. The directories returned will be
restricted to those under the specified directories.  This method returns only
the leaf directories that contain files from the specified module.
.IP "\fIdirectory_tree()\fR" 4
.IX Item "directory_tree()"
This is identical in operation to \fIdirectories()\fR, except that it includes all the
intermediate directories back up to the specified directories.
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
This takes one mandatory parameter, the name of a module.  It checks that all
the files listed in the modules .packlist actually exist, and returns a list of
any missing files.  If an optional second argument which evaluates to true is
given any missing files will be removed from the .packlist
.IP "\fIpacklist()\fR" 4
.IX Item "packlist()"
This returns the ExtUtils::Packlist object for the specified module.
.IP "\fIversion()\fR" 4
.IX Item "version()"
This returns the version number for the specified module.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See the example in ExtUtils::Packlist.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alan Burlison <Alan.Burlison@uk.sun.com>
