.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Clone 3"
.TH Clone 3 "2020-04-23" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Clone \- recursively copy Perl datatypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Clone \*(Aqclone\*(Aq;
\&
\&    my $data = {
\&       set => [ 1 .. 50 ],
\&       foo => {
\&           answer => 42,
\&           object => SomeObject\->new,
\&       },
\&    };
\&
\&    my $cloned_data = clone($data);
\&
\&    $cloned_data\->{foo}{answer} = 1;
\&    print $cloned_data\->{foo}{answer};  # \*(Aq1\*(Aq
\&    print $data\->{foo}{answer};         # \*(Aq42\*(Aq
.Ve
.PP
You can also add it to your class:
.PP
.Vb 3
\&    package Foo;
\&    use parent \*(AqClone\*(Aq;
\&    sub new { bless {}, shift }
\&
\&    package main;
\&
\&    my $obj = Foo\->new;
\&    my $copy = $obj\->clone;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a \f(CW\*(C`clone()\*(C'\fR method which makes recursive
copies of nested hash, array, scalar and reference types,
including tied variables and objects.
.PP
\&\f(CW\*(C`clone()\*(C'\fR takes a scalar argument and duplicates it. To duplicate lists,
arrays or hashes, pass them in by reference, e.g.
.PP
.Vb 1
\&    my $copy = clone (\e@array);
\&
\&    # or
\&
\&    my %copy = %{ clone (\e%hash) };
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Storable's \f(CW\*(C`dclone()\*(C'\fR is a flexible solution for cloning variables,
albeit slower for average-sized data structures. Simple
and naive benchmarks show that Clone is faster for data structures
with 3 or fewer levels, while \f(CW\*(C`dclone()\*(C'\fR can be faster for structures
4 or more levels deep.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001\-2019 Ray Finch. All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ray Finch \f(CW\*(C`<rdf@cpan.org>\*(C'\fR
.PP
Breno G. de Oliveira \f(CW\*(C`<garu@cpan.org>\*(C'\fR and
Florian Ragwitz \f(CW\*(C`<rafl@debian.org>\*(C'\fR perform routine maintenance
releases since 2012.
