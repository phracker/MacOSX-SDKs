.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat 3"
.TH DBIx::Class::CDBICompat 3 "2013-12-16" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat \- Class::DBI Compatibility layer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package My::CDBI;
\&  use base qw/DBIx::Class::CDBICompat/;
\&
\&  ...continue as Class::DBI...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Class features a fully featured compatibility layer with Class::DBI
and some common plugins to ease transition for existing \s-1CDBI\s0 users.
.PP
This is not a wrapper or subclass of DBIx::Class but rather a series of plugins.  The result being that even though you're using the Class::DBI emulation layer you are still getting DBIx::Class objects.  You can use all DBIx::Class features and methods via CDBICompat.  This allows you to take advantage of DBIx::Class features without having to rewrite your \s-1CDBI\s0 code.
.SS "Plugins"
.IX Subsection "Plugins"
CDBICompat is good enough that many \s-1CDBI\s0 plugins will work with CDBICompat, but many of the plugin features are better done with DBIx::Class methods.
.PP
\fIClass::DBI::AbstractSearch\fR
.IX Subsection "Class::DBI::AbstractSearch"
.PP
\&\f(CW\*(C`search_where()\*(C'\fR is fully emulated using \s-1DBIC\s0's search.  Aside from emulation there's no reason to use \f(CW\*(C`search_where()\*(C'\fR.
.PP
\fIClass::DBI::Plugin::NoCache\fR
.IX Subsection "Class::DBI::Plugin::NoCache"
.PP
\&\f(CW\*(C`nocache\*(C'\fR is fully emulated.
.PP
\fIClass::DBI::Sweet\fR
.IX Subsection "Class::DBI::Sweet"
.PP
The features of CDBI::Sweet are better done using \s-1DBIC\s0 methods which are almost exactly the same.  It even uses Data::Page.
.PP
\fIClass::DBI::Plugin::DeepAbstractSearch\fR
.IX Subsection "Class::DBI::Plugin::DeepAbstractSearch"
.PP
This plugin will work, but it is more efficiently done using \s-1DBIC\s0's native search facilities.  The major difference is that \s-1DBIC\s0 will not infer the join for you, you have to tell it the join tables.
.SS "Choosing Features"
.IX Subsection "Choosing Features"
In fact, this class is just a recipe containing all the features emulated.
If you like, you can choose which features to emulate by building your
own class and loading it like this:
.PP
.Vb 2
\&  package My::DB;
\&  _\|_PACKAGE_\|_\->load_own_components(qw/CDBICompat/);
.Ve
.PP
this will automatically load the features included in My::DB::CDBICompat,
provided it looks something like this:
.PP
.Vb 8
\&  package My::DB::CDBICompat;
\&  _\|_PACKAGE_\|_\->load_components(qw/
\&    CDBICompat::ColumnGroups
\&    CDBICompat::Retrieve
\&    CDBICompat::HasA
\&    CDBICompat::HasMany
\&    CDBICompat::MightHave
\&  /);
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Unimplemented"
.IX Subsection "Unimplemented"
The following methods and classes are not emulated, maybe in the future.
.IP "Class::DBI::Query" 4
.IX Item "Class::DBI::Query"
Deprecated in Class::DBI.
.IP "Class::DBI::Column" 4
.IX Item "Class::DBI::Column"
Not documented in Class::DBI.  CDBICompat's \fIcolumns()\fR returns a plain string, not an object.
.IP "\fIdata_type()\fR" 4
.IX Item "data_type()"
Undocumented \s-1CDBI\s0 method.
.SS "Limited Support"
.IX Subsection "Limited Support"
The following elements of Class::DBI have limited support.
.IP "Class::DBI::Relationship" 4
.IX Item "Class::DBI::Relationship"
The semi-documented Class::DBI::Relationship objects returned by \f(CW\*(C`meta_info($type, $col)\*(C'\fR are mostly emulated except for their \f(CW\*(C`args\*(C'\fR method.
.IP "Relationships" 4
.IX Item "Relationships"
Relationships between tables (has_a, has_many...) must be declared after all tables in the relationship have been declared.  Thus the usual \s-1CDBI\s0 idiom of declaring columns and relationships for each class together will not work.  They must instead be done like so:
.Sp
.Vb 2
\&    package Foo;
\&    use base qw(Class::DBI);
\&
\&    Foo\->table("foo");
\&    Foo\->columns( All => qw(this that bar) );
\&
\&    package Bar;
\&    use base qw(Class::DBI);
\&
\&    Bar\->table("bar");
\&    Bar\->columns( All => qw(up down) );
\&
\&    # Now that Foo and Bar are declared it is safe to declare a
\&    # relationship between them
\&    Foo\->has_a( bar => "Bar" );
.Ve
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
