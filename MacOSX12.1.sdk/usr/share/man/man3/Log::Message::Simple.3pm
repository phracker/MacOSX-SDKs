.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Message::Simple 3pm"
.TH Log::Message::Simple 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Message::Simple \- Simplified interface to Log::Message
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Log::Message::Simple qw[msg error debug
\&                                carp croak cluck confess];
\&
\&    use Log::Message::Simple qw[:STD :CARP];
\&
\&    ### standard reporting functionality
\&    msg(    "Connecting to database",           $verbose );
\&    error(  "Database connection failed: $@",   $verbose );
\&    debug(  "Connection arguments were: $args", $debug );
\&
\&    ### standard carp functionality
\&    carp(   "Wrong arguments passed: @_" );
\&    croak(  "Fatal: wrong arguments passed: @_" );
\&    cluck(  "Wrong arguments passed \-\- including stacktrace: @_" );
\&    confess("Fatal: wrong arguments passed \-\- including stacktrace: @_" );
\&
\&    ### retrieve individual message
\&    my @stack = Log::Message::Simple\->stack;
\&    my @stack = Log::Message::Simple\->flush;
\&
\&    ### retrieve the entire stack in printable form
\&    my $msgs  = Log::Message::Simple\->stack_as_string;
\&    my $trace = Log::Message::Simple\->stack_as_string(1);
\&
\&    ### redirect output
\&    local $Log::Message::Simple::MSG_FH     = \e*STDERR;
\&    local $Log::Message::Simple::ERROR_FH   = \e*STDERR;
\&    local $Log::Message::Simple::DEBUG_FH   = \e*STDERR;
\&
\&    ### force a stacktrace on error
\&    local $Log::Message::Simple::STACKTRACE_ON_ERROR = 1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides standardized logging facilities using the
\&\f(CW\*(C`Log::Message\*(C'\fR module.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "msg(""message string"" [,VERBOSE])"
.el .SS "msg(``message string'' [,VERBOSE])"
.IX Subsection "msg(message string [,VERBOSE])"
Records a message on the stack, and prints it to \f(CW\*(C`STDOUT\*(C'\fR (or actually
\&\f(CW$MSG_FH\fR, see the \f(CW\*(C`GLOBAL VARIABLES\*(C'\fR section below), if the
\&\f(CW\*(C`VERBOSE\*(C'\fR option is true.
The \f(CW\*(C`VERBOSE\*(C'\fR option defaults to false.
.PP
Exported by default, or using the \f(CW\*(C`:STD\*(C'\fR tag.
.ie n .SS "debug(""message string"" [,VERBOSE])"
.el .SS "debug(``message string'' [,VERBOSE])"
.IX Subsection "debug(message string [,VERBOSE])"
Records a debug message on the stack, and prints it to \f(CW\*(C`STDOUT\*(C'\fR (or
actually \f(CW$DEBUG_FH\fR, see the \f(CW\*(C`GLOBAL VARIABLES\*(C'\fR section below),
if the \f(CW\*(C`VERBOSE\*(C'\fR option is true.
The \f(CW\*(C`VERBOSE\*(C'\fR option defaults to false.
.PP
Exported by default, or using the \f(CW\*(C`:STD\*(C'\fR tag.
.ie n .SS "error(""error string"" [,VERBOSE])"
.el .SS "error(``error string'' [,VERBOSE])"
.IX Subsection "error(error string [,VERBOSE])"
Records an error on the stack, and prints it to \f(CW\*(C`STDERR\*(C'\fR (or actually
\&\f(CW$ERROR_FH\fR, see the \f(CW\*(C`GLOBAL VARIABLES\*(C'\fR sections below), if the
\&\f(CW\*(C`VERBOSE\*(C'\fR option is true.
The \f(CW\*(C`VERBOSE\*(C'\fR options defaults to true.
.PP
Exported by default, or using the \f(CW\*(C`:STD\*(C'\fR tag.
.SS "\fIcarp()\fP;"
.IX Subsection "carp();"
Provides functionality equal to \f(CW\*(C`Carp::carp()\*(C'\fR while still logging
to the stack.
.PP
Exported by using the \f(CW\*(C`:CARP\*(C'\fR tag.
.SS "\fIcroak()\fP;"
.IX Subsection "croak();"
Provides functionality equal to \f(CW\*(C`Carp::croak()\*(C'\fR while still logging
to the stack.
.PP
Exported by using the \f(CW\*(C`:CARP\*(C'\fR tag.
.SS "\fIconfess()\fP;"
.IX Subsection "confess();"
Provides functionality equal to \f(CW\*(C`Carp::confess()\*(C'\fR while still logging
to the stack.
.PP
Exported by using the \f(CW\*(C`:CARP\*(C'\fR tag.
.SS "\fIcluck()\fP;"
.IX Subsection "cluck();"
Provides functionality equal to \f(CW\*(C`Carp::cluck()\*(C'\fR while still logging
to the stack.
.PP
Exported by using the \f(CW\*(C`:CARP\*(C'\fR tag.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "Log::Message::Simple\->\fIstack()\fP"
.IX Subsection "Log::Message::Simple->stack()"
Retrieves all the items on the stack. Since \f(CW\*(C`Log::Message::Simple\*(C'\fR is
implemented using \f(CW\*(C`Log::Message\*(C'\fR, consult its manpage for the
function \f(CW\*(C`retrieve\*(C'\fR to see what is returned and how to use the items.
.SS "Log::Message::Simple\->stack_as_string([\s-1TRACE\s0])"
.IX Subsection "Log::Message::Simple->stack_as_string([TRACE])"
Returns the whole stack as a printable string. If the \f(CW\*(C`TRACE\*(C'\fR option is
true all items are returned with \f(CW\*(C`Carp::longmess\*(C'\fR output, rather than
just the message.
\&\f(CW\*(C`TRACE\*(C'\fR defaults to false.
.SS "Log::Message::Simple\->\fIflush()\fP"
.IX Subsection "Log::Message::Simple->flush()"
Removes all the items from the stack and returns them. Since
\&\f(CW\*(C`Log::Message::Simple\*(C'\fR is  implemented using \f(CW\*(C`Log::Message\*(C'\fR, consult its
manpage for the function \f(CW\*(C`retrieve\*(C'\fR to see what is returned and how
to use the items.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.ie n .IP "$ERROR_FH" 4
.el .IP "\f(CW$ERROR_FH\fR" 4
.IX Item "$ERROR_FH"
This is the filehandle all the messages sent to \f(CW\*(C`error()\*(C'\fR are being
printed. This defaults to \f(CW*STDERR\fR.
.ie n .IP "$MSG_FH" 4
.el .IP "\f(CW$MSG_FH\fR" 4
.IX Item "$MSG_FH"
This is the filehandle all the messages sent to \f(CW\*(C`msg()\*(C'\fR are being
printed. This default to \f(CW*STDOUT\fR.
.ie n .IP "$DEBUG_FH" 4
.el .IP "\f(CW$DEBUG_FH\fR" 4
.IX Item "$DEBUG_FH"
This is the filehandle all the messages sent to \f(CW\*(C`debug()\*(C'\fR are being
printed. This default to \f(CW*STDOUT\fR.
.ie n .IP "$STACKTRACE_ON_ERROR" 4
.el .IP "\f(CW$STACKTRACE_ON_ERROR\fR" 4
.IX Item "$STACKTRACE_ON_ERROR"
If this option is set to \f(CW\*(C`true\*(C'\fR, every call to \f(CW\*(C`error()\*(C'\fR will
generate a stacktrace using \f(CW\*(C`Carp::shortmess()\*(C'\fR.
Defaults to \f(CW\*(C`false\*(C'\fR
