.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::Table::Util 3"
.TH Term::Table::Util 3 "2019-11-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::Table::Util \- Utilities for Term::Table.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package exports some tools used by Term::Table.
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
.ie n .IP "$bool = \s-1USE_GCS\s0" 4
.el .IP "\f(CW$bool\fR = \s-1USE_GCS\s0" 4
.IX Item "$bool = USE_GCS"
True if Unicode::GCString is installed.
.ie n .IP "$bool = \s-1USE_TERM_READKEY\s0" 4
.el .IP "\f(CW$bool\fR = \s-1USE_TERM_READKEY\s0" 4
.IX Item "$bool = USE_TERM_READKEY"
True if Term::ReadKey is installed.
.SS "\s-1UTILITIES\s0"
.IX Subsection "UTILITIES"
.ie n .IP "$width = \fBterm_size()\fR" 4
.el .IP "\f(CW$width\fR = \fBterm_size()\fR" 4
.IX Item "$width = term_size()"
Get the width of the terminal.
.Sp
If the \f(CW$TABLE_TERM_SIZE\fR environment variable is set then that value will be
returned.
.Sp
This will default to 80 if there is no good way to get the size, or if the size
is unreasonably small.
.Sp
If Term::ReadKey is installed it will be used.
.ie n .IP "$width = uni_length($string)" 4
.el .IP "\f(CW$width\fR = uni_length($string)" 4
.IX Item "$width = uni_length($string)"
Get the width (in columns) of the specified string. When Unicode::GCString
is installed this will work on unicode strings, otherwise it will just use
\&\f(CW\*(C`length($string)\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Term-Table can be found at
\&\fIhttp://github.com/exodist/Term\-Table/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
