.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Date::Language 3"
.TH Date::Language 3 "2020-01-20" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Language \- Language specific date formating and parsing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Date::Language;
\&
\&  my $lang = Date::Language\->new(\*(AqGerman\*(Aq);
\&  $lang\->time2str("%a %b %e %T %Y\en", time);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Date::Language provides objects to parse and format dates for specific languages. Available languages are
.PP
.Vb 12
\&  Afar                    French                  Russian_cp1251
\&  Amharic                 Gedeo                   Russian_koi8r
\&  Austrian                German                  Sidama
\&  Brazilian               Greek                   Somali
\&  Chinese                 Hungarian               Spanish
\&  Chinese_GB              Icelandic               Swedish
\&  Czech                   Italian                 Tigrinya
\&  Danish                  Norwegian               TigrinyaEritrean
\&  Dutch                   Oromo                   TigrinyaEthiopian
\&  English                 Romanian                Turkish
\&  Finnish                 Russian                 Bulgarian
\&  Occitan
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "time2str" 4
.IX Item "time2str"
See \*(L"time2str\*(R" in Date::Format
.IP "strftime" 4
.IX Item "strftime"
See \*(L"strftime\*(R" in Date::Format
.IP "ctime" 4
.IX Item "ctime"
See \*(L"ctime\*(R" in Date::Format
.IP "asctime" 4
.IX Item "asctime"
See \*(L"asctime\*(R" in Date::Format
.IP "str2time" 4
.IX Item "str2time"
See \*(L"str2time\*(R" in Date::Parse
.IP "strptime" 4
.IX Item "strptime"
See \*(L"strptime\*(R" in Date::Parse
