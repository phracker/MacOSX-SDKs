.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::Local 3pm"
.TH Time::Local 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Local \- efficiently compute time from local and GMT time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    $time = timelocal( $sec, $min, $hour, $mday, $mon, $year );
\&    $time = timegm( $sec, $min, $hour, $mday, $mon, $year );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions that are the inverse of built-in perl
functions \f(CW\*(C`localtime()\*(C'\fR and \f(CW\*(C`gmtime()\*(C'\fR. They accept a date as a
six-element array, and return the corresponding \f(CWtime(2)\fR value in
seconds since the system epoch (Midnight, January 1, 1970 \s-1GMT\s0 on Unix,
for example). This value can be positive or negative, though \s-1POSIX\s0
only requires support for positive values, so dates before the
system's epoch may not work on all operating systems.
.PP
It is worth drawing particular attention to the expected ranges for
the values provided. The value for the day of the month is the actual
day (ie 1..31), while the month is the number of months since January
(0..11). This is consistent with the values returned from
\&\f(CW\*(C`localtime()\*(C'\fR and \f(CW\*(C`gmtime()\*(C'\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """timelocal()"" and ""timegm()"""
.el .SS "\f(CWtimelocal()\fP and \f(CWtimegm()\fP"
.IX Subsection "timelocal() and timegm()"
This module exports two functions by default, \f(CW\*(C`timelocal()\*(C'\fR and
\&\f(CW\*(C`timegm()\*(C'\fR.
.PP
The \f(CW\*(C`timelocal()\*(C'\fR and \f(CW\*(C`timegm()\*(C'\fR functions perform range checking on
the input \f(CW$sec\fR, \f(CW$min\fR, \f(CW$hour\fR, \f(CW$mday\fR, and \f(CW$mon\fR values by default.
.ie n .SS """timelocal_nocheck()"" and ""timegm_nocheck()"""
.el .SS "\f(CWtimelocal_nocheck()\fP and \f(CWtimegm_nocheck()\fP"
.IX Subsection "timelocal_nocheck() and timegm_nocheck()"
If you are working with data you know to be valid, you can speed your
code up by using the \*(L"nocheck\*(R" variants, \f(CW\*(C`timelocal_nocheck()\*(C'\fR and
\&\f(CW\*(C`timegm_nocheck()\*(C'\fR. These variants must be explicitly imported.
.PP
.Vb 1
\&    use Time::Local \*(Aqtimelocal_nocheck\*(Aq;
\&
\&    # The 365th day of 1999
\&    print scalar localtime timelocal_nocheck( 0, 0, 0, 365, 0, 99 );
.Ve
.PP
If you supply data which is not valid (month 27, second 1,000) the
results will be unpredictable (so don't do that).
.SS "Year Value Interpretation"
.IX Subsection "Year Value Interpretation"
Strictly speaking, the year should be specified in a form consistent
with \f(CW\*(C`localtime()\*(C'\fR, i.e. the offset from 1900. In order to make the
interpretation of the year easier for humans, however, who are more
accustomed to seeing years as two-digit or four-digit values, the
following conventions are followed:
.IP "\(bu" 4
Years greater than 999 are interpreted as being the actual year,
rather than the offset from 1900. Thus, 1964 would indicate the year
Martin Luther King won the Nobel prize, not the year 3864.
.IP "\(bu" 4
Years in the range 100..999 are interpreted as offset from 1900, so
that 112 indicates 2012. This rule also applies to years less than
zero (but see note below regarding date range).
.IP "\(bu" 4
Years in the range 0..99 are interpreted as shorthand for years in the
rolling \*(L"current century,\*(R" defined as 50 years on either side of the
current year. Thus, today, in 1999, 0 would refer to 2000, and 45 to
2045, but 55 would refer to 1955. Twenty years from now, 55 would
instead refer to 2055. This is messy, but matches the way people
currently think about two digit dates. Whenever possible, use an
absolute four digit year instead.
.PP
The scheme above allows interpretation of a wide range of dates,
particularly if 4\-digit years are used.
.SS "Limits of time_t"
.IX Subsection "Limits of time_t"
On perl versions older than 5.12.0, the range of dates that can be
actually be handled depends on the size of \f(CW\*(C`time_t\*(C'\fR (usually a signed
integer) on the given platform. Currently, this is 32 bits for most
systems, yielding an approximate range from Dec 1901 to Jan 2038.
.PP
Both \f(CW\*(C`timelocal()\*(C'\fR and \f(CW\*(C`timegm()\*(C'\fR croak if given dates outside the
supported range.
.PP
As of version 5.12.0, perl has stopped using the underlying time
library of the operating system it's running on and has its own
implementation of those routines with a safe range of at least
+/ 2**52 (about 142 million years).
.SS "Ambiguous Local Times (\s-1DST\s0)"
.IX Subsection "Ambiguous Local Times (DST)"
Because of \s-1DST\s0 changes, there are many time zones where the same local
time occurs for two different \s-1GMT\s0 times on the same day. For example,
in the \*(L"Europe/Paris\*(R" time zone, the local time of 2001\-10\-28 02:30:00
can represent either 2001\-10\-28 00:30:00 \s-1GMT, \s0\fBor\fR 2001\-10\-28
01:30:00 \s-1GMT.\s0
.PP
When given an ambiguous local time, the \fItimelocal()\fR function should
always return the epoch for the \fIearlier\fR of the two possible \s-1GMT\s0
times.
.SS "Non-Existent Local Times (\s-1DST\s0)"
.IX Subsection "Non-Existent Local Times (DST)"
When a \s-1DST\s0 change causes a locale clock to skip one hour forward,
there will be an hour's worth of local times that don't exist. Again,
for the \*(L"Europe/Paris\*(R" time zone, the local clock jumped from
2001\-03\-25 01:59:59 to 2001\-03\-25 03:00:00.
.PP
If the \f(CW\*(C`timelocal()\*(C'\fR function is given a non-existent local time, it
will simply return an epoch value for the time one hour later.
.SS "Negative Epoch Values"
.IX Subsection "Negative Epoch Values"
On perl version 5.12.0 and newer, negative epoch values are fully
supported.
.PP
On older versions of perl, negative epoch (\f(CW\*(C`time_t\*(C'\fR) values, which
are not officially supported by the \s-1POSIX\s0 standards, are known not to
work on some systems. These include MacOS (pre-OSX) and Win32.
.PP
On systems which do support negative epoch values, this module should
be able to cope with dates before the start of the epoch, down the
minimum value of time_t for the system.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
These routines are quite efficient and yet are always guaranteed to
agree with \f(CW\*(C`localtime()\*(C'\fR and \f(CW\*(C`gmtime()\*(C'\fR. We manage this by caching
the start times of any months we've seen before. If we know the start
time of the month, we can always calculate any time within the month.
The start times are calculated using a mathematical formula. Unlike
other algorithms that do multiple calls to \f(CW\*(C`gmtime()\*(C'\fR.
.PP
The \f(CW\*(C`timelocal()\*(C'\fR function is implemented using the same cache. We
just assume that we're translating a \s-1GMT\s0 time, and then fudge it when
we're done for the timezone and daylight savings arguments. Note that
the timezone is evaluated for each date because countries occasionally
change their official timezones. Assuming that \f(CW\*(C`localtime()\*(C'\fR corrects
for these changes, this routine will also be correct.
.SH "BUGS"
.IX Header "BUGS"
The whole scheme for interpreting two-digit years can be considered a
bug.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support for this module is provided via the datetime@perl.org email
list. See http://lists.perl.org/ for more details.
.PP
Please submit bugs to the \s-1CPAN RT\s0 system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time\-Local or via email
at bug\-time\-local@rt.cpan.org.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2003 Graham Barr, 2003\-2007 David Rolsky.  All
rights reserved.  This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included
with this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module is based on a Perl 4 library, timelocal.pl, that was
included with Perl 4.036, and was most likely written by Tom
Christiansen.
.PP
The current version was written by Graham Barr.
.PP
It is now being maintained separately from the Perl core by Dave
Rolsky, <autarch@urth.org>.
