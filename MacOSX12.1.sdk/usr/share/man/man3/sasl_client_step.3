.\" -*- nroff -*-
.\" 
.\" Copyright (c) 2001 Carnegie Mellon University.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer. 
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. The name "Carnegie Mellon University" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For permission or any other legal
.\"    details, please contact  
.\"      Office of Technology Transfer
.\"      Carnegie Mellon University
.\"      5000 Forbes Avenue
.\"      Pittsburgh, PA  15213-3890
.\"      (412) 268-4387, fax: (412) 268-7395
.\"      tech-transfer@andrew.cmu.edu
.\"
.\" 4. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by Computing Services
.\"     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
.\"
.\" CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
.\" THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
.\" FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
.\" AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\" 
.TH sasl_client_step 3 "10 July 2001" SASL "SASL man pages"
.SH NAME
sasl_client_step \- Perform a step in the authentication negotiation


.SH SYNOPSIS
.nf
.B #include <sasl/sasl.h>
.sp
.BI "int sasl_client_step(sasl_conn_t " *conn ", "
.BI "		     const char " *serverin ", "
.BI "		     unsigned " serverinlen ", "
.BI "		     sasl_interact_t ** " prompt_need ", "
.BI "		     const char ** " clientout ", "
.BI "		     unsigned * " clientoutlen ");"

.fi
.SH DESCRIPTION

.B sasl_client_step()
performs a step in the authentication negotiation. It returns SASL_OK
if the whole negotiation is successful and SASL_CONTINUE if this step
is ok but at least one more step is needed. A client should not assume
an authentication negotiation is successful just because the server
signaled success via protocol (i.e. if the server said ". OK
Authentication succeeded" in IMAP sasl_client_step should still be
called one more time with a serverinlen of zero.

If SASL_INTERACT is returned the library needs some values to be
filled in before it can proceed. The prompt_need structure will be
filled in with requests. The application should fulfill these requests
and call sasl_client_start again with identical parameters (the
prompt_need parameter will be the same pointer as before but filled in
by the application).

.I conn
is the SASL connection context
.PP
.I serverin
is the data given by the server (decoded if the protocol encodes requests sent over the wire)
.PP
.I serverinlen
is the length of serverin
.PP
.I clientout
and
.I clientoutlen
is created. It is the initial client response to send to the
server. It is the job of the
client to send it over the network to the server.
Any protocol specific encoding (such as base64
encoding) necessary needs to be done by the client.

.SH "RETURN VALUE"

sasl_client_step returns an integer which corresponds to one of the
following codes. SASL_CONTINUE indicates success and that there are
more steps needed in the authentication. SASL_OK indicates that the
authentication is complete. All other return codes indicate errors and
should either be handled or the authentication session should be quit.

.SH "CONFORMING TO"
RFC 4422
.SH "SEE ALSO"
sasl(3), sasl_callbacks(3), sasl_errors(3), sasl_client_init(3), sasl_client_new(3), sasl_client_start(3)
