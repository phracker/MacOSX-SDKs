.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::Headers::Util 3"
.TH HTTP::Headers::Util 3 "2020-02-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Headers::Util \- Header value parsing utility functions
.SH "VERSION"
.IX Header "VERSION"
version 6.22
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use HTTP::Headers::Util qw(split_header_words);
\&  @values = split_header_words($h\->header("Content\-Type"));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a few functions that helps parsing and
construction of valid \s-1HTTP\s0 header values.  None of the functions are
exported by default.
.PP
The following functions are available:
.ie n .IP "split_header_words( @header_values )" 4
.el .IP "split_header_words( \f(CW@header_values\fR )" 4
.IX Item "split_header_words( @header_values )"
This function will parse the header values given as argument into a
list of anonymous arrays containing key/value pairs.  The function
knows how to deal with \*(L",\*(R", \*(L";\*(R" and \*(L"=\*(R" as well as quoted values after
\&\*(L"=\*(R".  A list of space separated tokens are parsed as if they were
separated by \*(L";\*(R".
.Sp
If the \f(CW@header_values\fR passed as argument contains multiple values,
then they are treated as if they were a single value separated by
comma \*(L",\*(R".
.Sp
This means that this function is useful for parsing header fields that
follow this syntax (\s-1BNF\s0 as from the \s-1HTTP/1.1\s0 specification, but we relax
the requirement for tokens).
.Sp
.Vb 2
\&  headers           = #header
\&  header            = (token | parameter) *( [";"] (token | parameter))
\&
\&  token             = 1*<any CHAR except CTLs or separators>
\&  separators        = "(" | ")" | "<" | ">" | "@"
\&                    | "," | ";" | ":" | "\e" | <">
\&                    | "/" | "[" | "]" | "?" | "="
\&                    | "{" | "}" | SP | HT
\&
\&  quoted\-string     = ( <"> *(qdtext | quoted\-pair ) <"> )
\&  qdtext            = <any TEXT except <">>
\&  quoted\-pair       = "\e" CHAR
\&
\&  parameter         = attribute "=" value
\&  attribute         = token
\&  value             = token | quoted\-string
.Ve
.Sp
Each \fIheader\fR is represented by an anonymous array of key/value
pairs.  The keys will be all be forced to lower case.
The value for a simple token (not part of a parameter) is \f(CW\*(C`undef\*(C'\fR.
Syntactically incorrect headers will not necessarily be parsed as you
would want.
.Sp
This is easier to describe with some examples:
.Sp
.Vb 3
\&   split_header_words(\*(Aqfoo="bar"; port="80,81"; DISCARD, BAR=baz\*(Aq);
\&   split_header_words(\*(Aqtext/html; charset="iso\-8859\-1"\*(Aq);
\&   split_header_words(\*(AqBasic realm="\e\e"foo\e\e\e\ebar\e\e""\*(Aq);
.Ve
.Sp
will return
.Sp
.Vb 3
\&   [foo=>\*(Aqbar\*(Aq, port=>\*(Aq80,81\*(Aq, discard=> undef], [bar=>\*(Aqbaz\*(Aq ]
\&   [\*(Aqtext/html\*(Aq => undef, charset => \*(Aqiso\-8859\-1\*(Aq]
\&   [basic => undef, realm => "\e"foo\e\ebar\e""]
.Ve
.Sp
If you don't want the function to convert tokens and attribute keys to
lower case you can call it as \f(CW\*(C`_split_header_words\*(C'\fR instead (with a
leading underscore).
.ie n .IP "join_header_words( @arrays )" 4
.el .IP "join_header_words( \f(CW@arrays\fR )" 4
.IX Item "join_header_words( @arrays )"
This will do the opposite of the conversion done by \fBsplit_header_words()\fR.
It takes a list of anonymous arrays as arguments (or a list of
key/value pairs) and produces a single header value.  Attribute values
are quoted if needed.
.Sp
Example:
.Sp
.Vb 2
\&   join_header_words(["text/plain" => undef, charset => "iso\-8859/1"]);
\&   join_header_words("text/plain" => undef, charset => "iso\-8859/1");
.Ve
.Sp
will both return the string:
.Sp
.Vb 1
\&   text/plain; charset="iso\-8859/1"
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Gisle Aas <gisle@activestate.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 1994\-2017 by Gisle Aas.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
