.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Which 3"
.TH File::Which 3 "2009-09-26" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Which \- Portable implementation of the `which' utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use File::Which;                  # exports which()
\&  use File::Which qw(which where);  # exports which() and where()
\&  
\&  my $exe_path = which(\*(Aqperldoc\*(Aq);
\&  
\&  my @paths = where(\*(Aqperl\*(Aq);
\&  \- Or \-
\&  my @paths = which(\*(Aqperl\*(Aq); # an array forces search for all of them
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`File::Which\*(C'\fR was created to be able to get the paths to executable programs
on systems under which the `which' program wasn't implemented in the shell.
.PP
\&\f(CW\*(C`File::Which\*(C'\fR searches the directories of the user's \f(CW\*(C`PATH\*(C'\fR (as returned by
\&\f(CW\*(C`File::Spec\->path()\*(C'\fR), looking for executable files having the name
specified as a parameter to \f(CW\*(C`which()\*(C'\fR. Under Win32 systems, which do not have a
notion of directly executable files, but uses special extensions such as \f(CW\*(C`.exe\*(C'\fR
and \f(CW\*(C`.bat\*(C'\fR to identify them, \f(CW\*(C`File::Which\*(C'\fR takes extra steps to assure that
you will find the correct file (so for example, you might be searching for
\&\f(CW\*(C`perl\*(C'\fR, it'll try \fIperl.exe\fR, \fIperl.bat\fR, etc.)
.SH "Steps Used on Win32, DOS, OS2 and VMS"
.IX Header "Steps Used on Win32, DOS, OS2 and VMS"
.SS "Windows \s-1NT\s0"
.IX Subsection "Windows NT"
Windows \s-1NT\s0 has a special environment variable called \f(CW\*(C`PATHEXT\*(C'\fR, which is used
by the shell to look for executable files. Usually, it will contain a list in
the form \f(CW\*(C`.EXE;.BAT;.COM;.JS;.VBS\*(C'\fR etc. If \f(CW\*(C`File::Which\*(C'\fR finds such an
environment variable, it parses the list and uses it as the different
extensions.
.SS "Windows 9x and other ancient Win/DOS/OS2"
.IX Subsection "Windows 9x and other ancient Win/DOS/OS2"
This set of operating systems don't have the \f(CW\*(C`PATHEXT\*(C'\fR variable, and usually
you will find executable files there with the extensions \f(CW\*(C`.exe\*(C'\fR, \f(CW\*(C`.bat\*(C'\fR and
(less likely) \f(CW\*(C`.com\*(C'\fR. \f(CW\*(C`File::Which\*(C'\fR uses this hardcoded list if it's running
under Win32 but does not find a \f(CW\*(C`PATHEXT\*(C'\fR variable.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
Same case as Windows 9x: uses \f(CW\*(C`.exe\*(C'\fR and \f(CW\*(C`.com\*(C'\fR (in that order).
.SH "Functions"
.IX Header "Functions"
.SS "which($short_exe_name)"
.IX Subsection "which($short_exe_name)"
Exported by default.
.PP
\&\f(CW$short_exe_name\fR is the name used in the shell to call the program (for
example, \f(CW\*(C`perl\*(C'\fR).
.PP
If it finds an executable with the name you specified, \f(CW\*(C`which()\*(C'\fR will return
the absolute path leading to this executable (for example, \fI/usr/bin/perl\fR or
\&\fIC:\ePerl\eBin\eperl.exe\fR).
.PP
If it does \fInot\fR find the executable, it returns \f(CW\*(C`undef\*(C'\fR.
.PP
If \f(CW\*(C`which()\*(C'\fR is called in list context, it will return \fIall\fR the
matches.
.SS "where($short_exe_name)"
.IX Subsection "where($short_exe_name)"
Not exported by default.
.PP
Same as \f(CW\*(C`which($short_exe_name)\*(C'\fR in array context. Same as the
\&\f(CW\`where\*(Aq\fR utility, will return an array containing all the path names
matching \f(CW$short_exe_name\fR.
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Not tested on \s-1VMS\s0 or MacOS, although there is platform specific code
for those. Anyone who haves a second would be very kind to send me a
report of how it went.
.PP
File::Spec adds the current directory to the front of \s-1PATH\s0 if on
Win32, \s-1VMS\s0 or MacOS. I have no knowledge of those so don't know if the
current directory is searced first or not. Could someone please tell
me?
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File\-Which>
.PP
For other issues, contact the maintainer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.PP
Per Einar Ellefsen <pereinar@cpan.org>
.PP
Originated in \fImodperl\-2.0/lib/Apache/Build.pm\fR. Changed for use in DocSet
(for the mod_perl site) and Win32\-awareness by me, with slight modifications
by Stas Bekman, then extracted to create \f(CW\*(C`File::Which\*(C'\fR.
.PP
Version 0.04 had some significant platform-related changes, taken from
the Perl Power Tools \f(CW\`which\*(Aq\fR implementation by Abigail with
enhancements from Peter Prymmer. See
<http://www.perl.com/language/ppt/src/which/index.html> for more
information.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 Per Einar Ellefsen.
.PP
Some parts copyright 2009 Adam Kennedy.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Spec, \fIwhich\fR\|(1), Perl Power Tools:
<http://www.perl.com/language/ppt/index.html>.
