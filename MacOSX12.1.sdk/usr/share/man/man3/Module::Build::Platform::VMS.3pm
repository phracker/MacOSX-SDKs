.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::Platform::VMS 3pm"
.TH Module::Build::Platform::VMS 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::Platform::VMS \- Builder class for VMS platforms
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module inherits from \f(CW\*(C`Module::Build::Base\*(C'\fR and alters a few
minor details of its functionality.  Please see Module::Build for
the general docs.
.SS "Overridden Methods"
.IX Subsection "Overridden Methods"
.IP "_set_defaults" 4
.IX Item "_set_defaults"
Change \f(CW$self\fR\->{build_script} to 'Build.com' so \f(CW@Build\fR works.
.IP "cull_args" 4
.IX Item "cull_args"
\&'@Build foo' on \s-1VMS\s0 will not preserve the case of 'foo'.  Rather than forcing
people to write '@Build \*(L"foo\*(R"' we'll dispatch case-insensitively.
.IP "manpage_separator" 4
.IX Item "manpage_separator"
Use '_\|_' instead of '::'.
.IP "prefixify" 4
.IX Item "prefixify"
Prefixify taking into account \s-1VMS\s0' filepath syntax.
.IP "_quote_args" 4
.IX Item "_quote_args"
Command-line arguments (but not the command itself) must be quoted
to ensure case preservation.
.IP "have_forkpipe" 4
.IX Item "have_forkpipe"
There is no native \fIfork()\fR, so some constructs depending on it are not
available.
.IP "_backticks" 4
.IX Item "_backticks"
Override to ensure that we quote the arguments but not the command.
.IP "find_command" 4
.IX Item "find_command"
Local an executable program
.IP "_maybe_command (override)" 4
.IX Item "_maybe_command (override)"
Follows \s-1VMS\s0 naming conventions for executable files.
If the name passed in doesn't exactly match an executable file,
appends \fI.Exe\fR (or equivalent) to check for executable image, and \fI.Com\fR
to check for \s-1DCL\s0 procedure.  If this fails, checks directories in \s-1DCL$PATH\s0
and finally \fISys$System:\fR for an executable file having the name specified,
with or without the \fI.Exe\fR\-equivalent suffix.
.IP "do_system" 4
.IX Item "do_system"
Override to ensure that we quote the arguments but not the command.
.IP "oneliner" 4
.IX Item "oneliner"
Override to ensure that we do not quote the command.
.IP "_infer_xs_spec" 4
.IX Item "_infer_xs_spec"
Inherit the standard version but tweak the library file name to be
something Dynaloader can find.
.IP "rscan_dir" 4
.IX Item "rscan_dir"
Inherit the standard version but remove dots at end of name.
If the extended character set is in effect, do not remove dots from filenames
with Unix path delimiters.
.IP "dist_dir" 4
.IX Item "dist_dir"
Inherit the standard version but replace embedded dots with underscores because
a dot is the directory delimiter on \s-1VMS.\s0
.IP "man3page_name" 4
.IX Item "man3page_name"
Inherit the standard version but chop the extra manpage delimiter off the front if
there is one.  The \s-1VMS\s0 version of splitdir('[.foo]') returns '', 'foo'.
.IP "expand_test_dir" 4
.IX Item "expand_test_dir"
Inherit the standard version but relativize the paths as the native \fIglob()\fR doesn't
do that for us.
.IP "_detildefy" 4
.IX Item "_detildefy"
The home-grown \fIglob()\fR does not currently handle tildes, so provide limited support
here.  Expect only \s-1UNIX\s0 format file specifications for now.
.IP "find_perl_interpreter" 4
.IX Item "find_perl_interpreter"
On \s-1VMS,\s0 $^X returns the fully qualified absolute path including version
number.  It's logically impossible to improve on it for getting the perl
we're currently running, and attempting to manipulate it is usually
lossy.
.IP "localize_file_path" 4
.IX Item "localize_file_path"
Convert the file path to the local syntax
.IP "localize_dir_path" 4
.IX Item "localize_dir_path"
Convert the directory path to the local syntax
.IP "ACTION_clean" 4
.IX Item "ACTION_clean"
The home-grown \fIglob()\fR expands a bit too aggressively when given a bare name,
so default in a zero-length extension.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com>
Ken Williams <kwilliams@cpan.org>
Craig A. Berry <craigberry@mac.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIModule::Build\fR\|(3), \fIExtUtils::MakeMaker\fR\|(3)
