.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPAN::Changes::Release 3"
.TH CPAN::Changes::Release 3 "2014-10-10" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Changes::Release \- Information about a particular release
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $rel = CPAN::Changes::Release\->new(
\&        version => \*(Aq0.01\*(Aq,
\&        date    => \*(Aq2009\-07\-06\*(Aq,
\&    );
\&    
\&    $rel\->add_changes(
\&        { group => \*(AqTHINGS THAT MAY BREAK YOUR CODE\*(Aq },
\&        \*(AqReturn a Foo object instead of a Bar object in foobar()\*(Aq
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A changelog is made up of one or more releases. This object provides access
to all of the key data that embodies a release including the version number, 
date of release, and all of the changelog information lines. Any number of 
changelog lines can be grouped together under a heading.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( %args )"
.el .SS "new( \f(CW%args\fP )"
.IX Subsection "new( %args )"
Creates a new release object, using \f(CW%args\fR as the default data.
.ie n .SS "version( [ $version ] )"
.el .SS "version( [ \f(CW$version\fP ] )"
.IX Subsection "version( [ $version ] )"
Gets/sets the version number for this release.
.ie n .SS "date( [ $date ] )"
.el .SS "date( [ \f(CW$date\fP ] )"
.IX Subsection "date( [ $date ] )"
Gets/sets the date for this release.
.ie n .SS "note( [ $note ] )"
.el .SS "note( [ \f(CW$note\fP ] )"
.IX Subsection "note( [ $note ] )"
Gets/sets the note for this release.
.ie n .SS "changes( [ $group ] )"
.el .SS "changes( [ \f(CW$group\fP ] )"
.IX Subsection "changes( [ $group ] )"
Gets the list of changes for this release as a hashref of group/changes 
pairs. If a group name is specified, an array ref of changes for that group 
is returned. Should that group not exist, undef is returned.
.ie n .SS "add_changes( [ \e%options ], @changes )"
.el .SS "add_changes( [ \e%options ], \f(CW@changes\fP )"
.IX Subsection "add_changes( [ %options ], @changes )"
Appends a list of changes to the release. Specifying a \f(CW\*(C`group\*(C'\fR option 
appends them to that particular group. \s-1NB:\s0 the default group is represented 
by and empty string.
.PP
.Vb 2
\&    # Append to default group
\&    $release\->add_changes( \*(AqAdded foo() function\*(Aq );
\&    
\&    # Append to a particular group
\&    $release\->add_changes( { group => \*(AqFixes\*(Aq }, \*(AqFixed foo() function\*(Aq );
.Ve
.ie n .SS "set_changes( [ \e%options ], @changes )"
.el .SS "set_changes( [ \e%options ], \f(CW@changes\fP )"
.IX Subsection "set_changes( [ %options ], @changes )"
Replaces the existing list of changes with the supplied values. Specifying
a \f(CW\*(C`group\*(C'\fR option will only replace change items in that group.
.SS "clear_changes( )"
.IX Subsection "clear_changes( )"
Clears all changes from the release.
.SS "groups( sort => \e&sorting_function )"
.IX Subsection "groups( sort => &sorting_function )"
Returns a list of current groups in this release.
.PP
If \fIsort\fR is provided, groups are
sorted according to the given function. If not,
they are sorted alphabetically.
.ie n .SS "add_group( @groups )"
.el .SS "add_group( \f(CW@groups\fP )"
.IX Subsection "add_group( @groups )"
Creates an empty group under the names provided.
.ie n .SS "delete_group( @groups )"
.el .SS "delete_group( \f(CW@groups\fP )"
.IX Subsection "delete_group( @groups )"
Deletes the groups of changes specified.
.SS "delete_empty_groups( )"
.IX Subsection "delete_empty_groups( )"
Deletes all groups that don't contain any changes.
.SS "serialize( group_sort => \e&sorting_function )"
.IX Subsection "serialize( group_sort => &sorting_function )"
Returns the release data as a string, suitable for inclusion in a Changes 
file.
.PP
If \fIgroup_sort\fR is provided, change groups are
sorted according to the given function. If not,
groups are sorted alphabetically.
.ie n .SS "get_group( [ $name ] )"
.el .SS "get_group( [ \f(CW$name\fP ] )"
.IX Subsection "get_group( [ $name ] )"
Returns the internal CPAN::Changes::Group object for the group \f(CW$name\fR.
.PP
If \f(CW$name\fR is not specified, the \f(CW\*(C`default\*(C'\fR group \f(CW\*(C`(\*(Aq\*(Aq)\*(C'\fR will be returned.
.PP
If \f(CW$name\fR does not exist, a CPAN::Changes::Group object will be created, and returned.
.ie n .SS "attach_group( $group_object )"
.el .SS "attach_group( \f(CW$group_object\fP )"
.IX Subsection "attach_group( $group_object )"
Attach a CPAN::Changes::Group object to the \f(CW\*(C`::Release\*(C'\fR. Note that the name is \fBnot\fR specified,
as it is instead determined from \f(CW\*(C`$group_object\->name\*(C'\fR
.SS "group_values( sort => \e&sorting_function )"
.IX Subsection "group_values( sort => &sorting_function )"
Works like \*(L"groups\*(R" but instead returns \f(CW\*(C`CPAN::Changes::Group\*(C'\fR compatible objects.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CPAN::Changes::Spec
.IP "\(bu" 4
CPAN::Changes
.IP "\(bu" 4
Test::CPAN::Changes
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Cassidy <bricas@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011\-2013 by Brian Cassidy
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
