.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Intermediate 3"
.TH Net::LDAP::Intermediate 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Intermediate \- LDAPv3 intermediate response object base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::LDAP::Intermediate;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Intermediate\*(C'\fR is a base-class for LDAPv3 intermediate response objects.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "new ( \s-1ARGS\s0 )" 4
.IX Item "new ( ARGS )"
\&\s-1ARGS\s0 is a list of name/value pairs, valid arguments are:
.RS 4
.IP "responseName" 4
.IX Item "responseName"
A dotted-decimal representation of an \s-1OBJECT IDENTIFIER\s0 which
uniquely identifies the intermediate response. This prevents conflicts between
intermediate response names.
.IP "responseValue" 4
.IX Item "responseValue"
Optional information associated with the intermediate response. It's format is specific
to the particular intermediate response.
.RE
.RS 4
.RE
.IP "from_asn ( \s-1ASN\s0 )" 4
.IX Item "from_asn ( ASN )"
\&\s-1ASN\s0 is a \s-1HASH\s0 reference, normally extracted from a \s-1PDU.\s0 It will contain
a \f(CW\*(C`responseName\*(C'\fR element and optionally \f(CW\*(C`responseValue\*(C'\fR element. On
return \s-1ASN\s0 will be blessed into a package. If \f(CW\*(C`responseName\*(C'\fR is a registered
\&\s-1OID,\s0 then \s-1ASN\s0 will be blessed into the registered package, if not then \s-1ASN\s0
will be blessed into Net::LDAP::Intermediate.
.Sp
This constructor is used internally by Net::LDAP and assumes that \s-1HASH\s0
passed contains a valid intermediate response. It should be used with \fBcaution\fR.
.SH "METHODS"
.IX Header "METHODS"
In addition to the methods listed below, each of the named parameters
to \f(CW\*(C`new\*(C'\fR is also available as a method. \f(CW\*(C`responseName\*(C'\fR will return the \s-1OID\s0 of
the intermediate response object. \f(CW\*(C`responseValue\*(C'\fR is set/get methods and will
return the current value for each attribute if called without arguments,
but may also be called with arguments to set new values.
.IP "error ()" 4
.IX Item "error ()"
If there has been an error returns a description of the error, otherwise it will
return \f(CW\*(C`undef\*(C'\fR
.IP "init ()" 4
.IX Item "init ()"
\&\f(CW\*(C`init\*(C'\fR will be called as the last step in both constructors. What it does will depend
on the sub-class. It must always return the object.
.IP "register ( \s-1OID\s0 )" 4
.IX Item "register ( OID )"
\&\f(CW\*(C`register\*(C'\fR is provided for sub-class implementors. It should be called as a class method
on a sub-class of Net::LDAP::Intermediate with the \s-1OID\s0 that the class will handle. Net::LDAP::Intermediate
will remember this class and \s-1OID\s0 pair and use it in the following
situations.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`new\*(C'\fR is called as a class method on the Net::LDAP::Intermediate package and \s-1OID\s0 is passed
as the responseName. The returned object will be blessed into the package that registered
the \s-1OID.\s0
.IP "\(bu" 4
\&\f(CW\*(C`new\*(C'\fR is called as a class method on a registered package and the \f(CW\*(C`responseName\*(C'\fR is not
specified. The \f(CW\*(C`responseName\*(C'\fR will be set to the \s-1OID\s0 registered by that package.
.IP "\(bu" 4
\&\f(CW\*(C`from_asn\*(C'\fR is called to construct an object from \s-1ASN.\s0 The returned object will be
blessed into the package which was registered to handle the \s-1OID\s0 in the \s-1ASN.\s0
.RE
.RS 4
.RE
.IP "( to_asn )" 4
.IX Item "( to_asn )"
Returns a structure suitable for passing to Convert::ASN1 for
encoding. This method will be called by Net::LDAP when the
intermediate response is used.
.Sp
The base class implementation of this method will call the \f(CW\*(C`responseValue\*(C'\fR method
without arguments to allow a sub-class to encode it's value. Sub-classes
should not need to override this method.
.IP "valid ()" 4
.IX Item "valid ()"
Returns true if the object is valid and can be encoded. The default implementation
for this method is to return \s-1TRUE\s0 if there is no error, but sub-classes may override that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP
Net::LDAP::Extension
Net::LDAP::Search
Net::LDAP::Intermediate::SyncInfo
.SH "AUTHOR"
.IX Header "AUTHOR"
Mathieu Parent <math.parent@gmail.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008 Mathieu Parent. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
