.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::compat 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::compat 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache2::compat \-\- 1.0 backward compatibility functions deprecated in 2.0
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 4
\&  # either add at the very beginning of startup.pl
\&  use Apache2::compat;
\&  # or httpd.conf
\&  PerlModule Apache2::compat
\&
\&  # override and restore compat functions colliding with mp2 API
\&  Apache2::compat::override_mp2_api(\*(AqApache2::Connection::local_addr\*(Aq);
\&  my ($local_port, $local_addr) = sockaddr_in($c\->local_addr);
\&  Apache2::compat::restore_mp2_api(\*(AqApache2::Connection::local_addr\*(Aq);
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`Apache2::compat\*(C'\fR provides mod_perl 1.0 compatibility layer and can be
used to smooth the transition process to mod_perl 2.0.
.PP
It includes functions that have changed their \s-1API\s0 or were removed in
mod_perl 2.0. If your code uses any of those functions, you should
load this module at the server startup, and everything should work as
it did in 1.0. If it doesn't please report the
bug, but before you
do that please make sure that your code does work properly under
mod_perl 1.0.
.PP
However, remember, that it's implemented in pure Perl and not C,
therefore its functionality is not optimized and it's the best to try
to port your
code not to use deprecated
functions and stop using the compatibility layer.
.SH "Compatibility Functions Colliding with mod_perl 2.0 API"
.IX Header "Compatibility Functions Colliding with mod_perl 2.0 API"
Most of the functions provided by Apache2::compat don't interfere with
mod_perl 2.0 \s-1API.\s0 However there are several functions which have the
same name in the mod_perl 1.0 and mod_perl 2.0 \s-1API,\s0 accept the same
number of arguments, but either the arguments themselves aren't the
same or the return values are different. For example the mod_perl 1.0
code:
.PP
.Vb 3
\&  require Socket;
\&  my $sockaddr_in = $c\->local_addr;
\&  my ($local_port, $local_addr) = Socket::sockaddr_in($sockaddr_in);
.Ve
.PP
should be adjusted to be:
.PP
.Vb 4
\&  require Apache2::Connection;
\&  require APR::SockAddr;
\&  my $sockaddr = $c\->local_addr;
\&  my ($local_port, $local_addr) = ($sockaddr\->port, $sockaddr\->ip_get);
.Ve
.PP
to work under mod_perl 2.0.
.PP
As you can see in mod_perl 1.0 \s-1API\s0 \fBlocal_addr()\fR was returning a
\&\s-1SOCKADDR_IN\s0 object (see the Socket perl manpage), in mod_perl 2.0 \s-1API\s0
it returns an \f(CW\*(C`APR::SockAddr\*(C'\fR
object, which is a totally different beast. If Apache2::compat
overrides the function \f(CW\*(C`local_addr()\*(C'\fR to be back-compatible with
mod_perl 1.0 \s-1API.\s0 Any code that relies on this function to work as it
should under mod_perl 2.0 will be broken. Therefore the solution is
not to override \f(CW\*(C`local_addr()\*(C'\fR by default. Instead a special \s-1API\s0 is
provided which overrides colliding functions only when needed and
which can be restored when no longer needed. So for example if you
have code from mod_perl 1.0:
.PP
.Vb 1
\&  my ($local_port, $local_addr) = Socket::sockaddr_in($c\->local_addr);
.Ve
.PP
and you aren't ready to port it to to use the mp2 \s-1API:\s0
.PP
.Vb 2
\&  my ($local_port, $local_addr) = ($c\->local_addr\->port,
\&                                   $c\->local_addr\->ip_get);
.Ve
.PP
you could do the following:
.PP
.Vb 3
\&  Apache2::compat::override_mp2_api(\*(AqApache2::Connection::local_addr\*(Aq);
\&  my ($local_port, $local_addr) = Socket::sockaddr_in($c\->local_addr);
\&  Apache2::compat::restore_mp2_api(\*(AqApache2::Connection::local_addr\*(Aq);
.Ve
.PP
Notice that you need to restore the \s-1API\s0 as soon as possible.
.PP
Both \f(CW\*(C`override_mp2_api()\*(C'\fR and \f(CW\*(C`restore_mp2_api()\*(C'\fR accept a list of
functions to operate on.
.SS "Available Overridable Functions"
.IX Subsection "Available Overridable Functions"
At the moment the following colliding functions are available for
overriding:
.IP "Apache2::RequestRec::notes" 4
.IX Item "Apache2::RequestRec::notes"
.PD 0
.IP "Apache2::RequestRec::filename" 4
.IX Item "Apache2::RequestRec::filename"
.IP "Apache2::RequestRec::finfo" 4
.IX Item "Apache2::RequestRec::finfo"
.IP "Apache2::Connection::local_addr" 4
.IX Item "Apache2::Connection::local_addr"
.IP "Apache2::Connection::remote_addr" 4
.IX Item "Apache2::Connection::remote_addr"
.IP "Apache2::Util::ht_time" 4
.IX Item "Apache2::Util::ht_time"
.IP "Apache2::Module::top_module" 4
.IX Item "Apache2::Module::top_module"
.IP "Apache2::Module::get_config" 4
.IX Item "Apache2::Module::get_config"
.IP "APR::URI::unparse" 4
.IX Item "APR::URI::unparse"
.PD
.SH "Use in CPAN Modules"
.IX Header "Use in CPAN Modules"
The short answer: \fBDo not use\fR \f(CW\*(C`Apache2::compat\*(C'\fR in \s-1CPAN\s0 modules.
.PP
The long answer:
.PP
\&\f(CW\*(C`Apache2::compat\*(C'\fR is useful during the mod_perl 1.0 code
porting. Though remember that it's implemented in pure Perl. In
certain cases it overrides mod_perl 2.0 methods, because their \s-1API\s0 is
very different and doesn't map 1:1 to mod_perl 1.0. So if anything,
not under user's control, loads \f(CW\*(C`Apache2::compat\*(C'\fR user's code is
forced to use the potentially slower method. Which is quite bad.
.PP
Some users may choose to keep using \f(CW\*(C`Apache2::compat\*(C'\fR in production
and it may perform just fine. Other users will choose not to use that
module, by porting their code to use mod_perl 2.0 \s-1API.\s0 However it
should be users' choice whether to load this module or not and not to
be enforced by \s-1CPAN\s0 modules.
.PP
If you port your \s-1CPAN\s0 modules to work with mod_perl 2.0, you should
follow the porting Perl and
\&\s-1XS\s0 module guidelines.
.PP
Users that are stuck with \s-1CPAN\s0 modules preloading \f(CW\*(C`Apache2::compat\*(C'\fR,
can prevent this from happening by adding
.PP
.Vb 1
\&  $INC{\*(AqApache2/compat.pm\*(Aq} = _\|_FILE_\|_;
.Ve
.PP
at the very beginning of their \fIstartup.pl\fR. But this will most
certainly break the module that needed this module.
.SH "API"
.IX Header "API"
You should be reading the mod_perl 1.0 \s-1API\s0
docs for usage of the methods and functions
in this package, since what this module is doing is providing a
backwards compatibility and it makes no sense to duplicate
documentation.
.PP
Another important document to read is: Migrating from mod_perl 1.0
to mod_perl 2.0 which covers all
mod_perl 1.0 constants, functions and methods that have changed in
mod_perl 2.0.
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous
contributors.
