.TH "MPSCNNPoolingGradient" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNPoolingGradient
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNPooling\&.h>\fP
.PP
Inherits \fBMPSCNNGradientKernel\fP\&.
.PP
Inherited by \fBMPSCNNDilatedPoolingMaxGradient\fP, \fBMPSCNNPoolingAverageGradient\fP, \fBMPSCNNPoolingL2NormGradient\fP, and \fBMPSCNNPoolingMaxGradient\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:kernelWidth:kernelHeight:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "MTLSize \fBsourceSize\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  Specifies the base class for computing the gradient of the pooling filters\&. The operation backpropagates a gradient vector using the chain rule\&.
.PP
Given the input gradient vector dL(x) = dL/d out(x), which is the derivative of the loss-function wrt\&. (original) pooling filter output the output gradient at position y (dL/d in(y)) is computed as follows: 
.PP
.nf
dL/d in(y) = sum_x (dL/d out(x)) * (d out(x)/d in(y)), where

.fi
.PP
.PP
the sum runs over the input gradient pixels starting from primaryOffset extending to primaryOffset + sourceSize\&. Note here that we need a separate variable 'sourceSize' to specify which input gradients are included in the output gradient computation as this information cannot be deduced directly from the cliprect size due to fractional striding or simply because the user wants to examine a subset of the contributions to the gradients\&. In normal operation the sourceSize is specified as the cliprect\&.size of the forward pooling filter in order to compute the gradients for all outputs the forward direction produced and the primaryOffset is set to cliprect\&.origin of the original forward pooling operation for the same reason\&.
.PP
The cliprect property of the filter allows the user to send the gradients to a new location, which may not match the original forward pooling filter window locations: The index 'y' in the formula above refers to the pixel location in the secondary source, which is the source image of the original forward pooling filter and secondaryOffset specifies the center of the first pooling window as specified in \fBMPSCNNPooling\fP filter specification\&. The first (top leftmost) pixel written into the cliprect computes the derivative of the first pixel within the first pooling window that is contained within the secondary source image and subsequent values are defined by normal striding rules from secondary source to primary source\&. This means that typically the cliprect is set to fill the effective source area of the original forward operation, clamped to edges of the original source image, which in the normal case is the same size as the size of the gradient destination image\&.
.PP
If there are any values in the destination cliprect that do not contribute to the forward pooling result in the area specified by primaryOffset and sourceSize, due to large strides or dilation factors or simply because all forward pass induced values would be outside the source area, then those result values are set to zero\&.
.PP
The actual value of d out(x) / d in(y) depends on the pooling operation and these are defined in the subclasses of \fBMPSCNNPoolingGradient\fP\&. 
.SH "Method Documentation"
.PP 
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  See \fBMPSKernel::initWithCoder\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSCNNPoolingGradient\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSCNNPoolingGradient\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSCNNPooling\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNGradientKernel\fP\&.
.PP
Reimplemented in \fBMPSCNNPoolingAverageGradient\fP, \fBMPSCNNPoolingMaxGradient\fP, \fBMPSCNNPoolingL2NormGradient\fP, and \fBMPSCNNDilatedPoolingMaxGradient\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNGradientKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(NSUInteger) kernelWidth(NSUInteger) kernelHeight"
Initialize a gradient pooling filter 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device the filter will run on 
.br
\fIkernelWidth\fP The width of the kernel\&. Can be an odd or even value\&. 
.br
\fIkernelHeight\fP The height of the kernel\&. Can be an odd or even value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSCNNPoolingGradient\fP object or nil, if failure\&. 
.RE
.PP

.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(NSUInteger) kernelWidth(NSUInteger) kernelHeight(NSUInteger) strideInPixelsX(NSUInteger) strideInPixelsY"
Initialize a gradient pooling filter 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device the filter will run on 
.br
\fIkernelWidth\fP The width of the kernel\&. Can be an odd or even value\&. 
.br
\fIkernelHeight\fP The height of the kernel\&. Can be an odd or even value\&. 
.br
\fIstrideInPixelsX\fP The input stride (upsampling factor) in the x dimension\&. 
.br
\fIstrideInPixelsY\fP The input stride (upsampling factor) in the y dimension\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSCNNPoolingGradient\fP object or nil, if failure\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNPoolingAverageGradient\fP, \fBMPSCNNPoolingMaxGradient\fP, \fBMPSCNNPoolingL2NormGradient\fP, and \fBMPSCNNDilatedPoolingMaxGradient\fP\&.
.SH "Property Documentation"
.PP 
.SS "\- sourceSize\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
An optional source size which defines together with primaryOffset, the set of input gradient pixels to take into account in the gradient computations\&.  \fBA\fP MTLSize that together with primaryOffset indicates which part of the source gradient to consider\&. If the area does not lie completely within the primary source image, the intersection between source area rectangle and primary source bounds is used\&. Default: \fBA\fP size where every component is NSUIntegerMax indicating the entire rest of the image, starting from an offset (see primaryOffset)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
