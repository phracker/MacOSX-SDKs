.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::CoreList::Utils 3pm"
.TH Module::CoreList::Utils 3pm "2014-10-01" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::CoreList::Utils \- what utilities shipped with versions of perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Module::CoreList::Utils;
\&
\& print $Module::CoreList::Utils::utilities{5.009003}{ptar}; # prints 1
\&
\& print Module::CoreList::Utils\->first_release(\*(Aqcorelist\*(Aq);           # prints 5.008009
\& print Module::CoreList::Utils\->first_release_by_date(\*(Aqcorelist\*(Aq);   # prints 5.009002
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::CoreList::Utils provides information on which core and dual-life utilities shipped
with each version of perl.
.PP
It provides a number of mechanisms for querying this information.
.PP
There is a functional programming \s-1API\s0 available for programmers to query
information.
.PP
Programmers may also query the contained hash structure to find relevant
information.
.SH "FUNCTIONS API"
.IX Header "FUNCTIONS API"
These are the functions that are available, they may either be called as functions or class methods:
.PP
.Vb 1
\&  Module::CoreList::Utils::first_release(\*(Aqcorelist\*(Aq); # as a function
\&
\&  Module::CoreList::Utils\->first_release(\*(Aqcorelist\*(Aq); # class method
.Ve
.ie n .IP """utilities""" 4
.el .IP "\f(CWutilities\fR" 4
.IX Item "utilities"
Requires a perl version as an argument, returns a list of utilities that shipped with
that version of perl, or undef/empty list if that perl doesn't exist.
.ie n .IP """first_release( UTILITY )""" 4
.el .IP "\f(CWfirst_release( UTILITY )\fR" 4
.IX Item "first_release( UTILITY )"
Requires a \s-1UTILITY\s0 name as an argument, returns the perl version when that utility first
appeared in core as ordered by perl version number or undef ( in scalar context )
or an empty list ( in list context ) if that utility is not in core.
.ie n .IP """first_release_by_date( UTILITY )""" 4
.el .IP "\f(CWfirst_release_by_date( UTILITY )\fR" 4
.IX Item "first_release_by_date( UTILITY )"
Requires a \s-1UTILITY\s0 name as an argument, returns the perl version when that utility first
appeared in core as ordered by release date or undef ( in scalar context )
or an empty list ( in list context ) if that utility is not in core.
.ie n .IP """removed_from( UTILITY )""" 4
.el .IP "\f(CWremoved_from( UTILITY )\fR" 4
.IX Item "removed_from( UTILITY )"
Takes a \s-1UTILITY\s0 name as an argument, returns the first perl version where that utility
was removed from core. Returns undef if the given utility was never in core or remains
in core.
.ie n .IP """removed_from_by_date( UTILITY )""" 4
.el .IP "\f(CWremoved_from_by_date( UTILITY )\fR" 4
.IX Item "removed_from_by_date( UTILITY )"
Takes a \s-1UTILITY\s0 name as an argument, returns the first perl version by release date where that
utility was removed from core. Returns undef if the given utility was never in core or remains
in core.
.SH "DATA STRUCTURES"
.IX Header "DATA STRUCTURES"
These are the hash data structures that are available:
.ie n .IP "%Module::CoreList::Utils::utilities" 4
.el .IP "\f(CW%Module::CoreList::Utils::utilities\fR" 4
.IX Item "%Module::CoreList::Utils::utilities"
A hash of hashes that is keyed on perl version as indicated
in $].  The second level hash is utility / defined pairs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris \f(CW\*(C`BinGOs\*(C'\fR Williams <chris@bingosnet.co.uk>
.PP
Currently maintained by the perl 5 porters <perl5\-porters@perl.org>.
.PP
This module is the result of archaeology undertaken during \s-1QA\s0 Hackathon
in Lancaster, April 2013.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2013 Chris Williams.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
corelist, Module::CoreList, perl, <http://perlpunks.de/corelist>
