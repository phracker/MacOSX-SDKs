.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::Codes::API 3pm"
.TH Locale::Codes::API 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Codes::API \- a description of the callable function in each module
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Although there are several modules in the Locale-Codes distribution, all of them
(as of version 3.10) use exactly the same \s-1API. \s0 As a matter of fact, each of the
main callable modules are just wrappers around a central module which does all
the real work.
.SH "ROUTINES"
.IX Header "ROUTINES"
In order to maintain the documentation for the modules consistently,
the functions are all documented here, rather than in the documentation
for the separate modules.
.PP
The name of the function depends on the module. For example, every module
contains a function \*(L"code2XXX\*(R" where \s-1XXX\s0 refers to the type of data.
The values of \s-1XXX\s0 are described in the following table:
.PP
.Vb 1
\&   XXX       MODULE
\&
\&   country   Locale::Codes::Country
\&   language  Locale::Codes::Language
\&   currency  Locale::Codes::Currency
\&   script    Locale::Codes::Script
\&   langext   Locale::Codes::LangExt
\&   langvar   Locale::Codes::LangVar
\&   langfam   Locale::Codes::LangFAM
.Ve
.PP
So, the Locale::Country module contains the function code2country, the
Locale::Language module contains the function code2language, etc.
.PP
In all of the functions below, \s-1CODE\s0 refers to a code for one element in
the code set. For example, in the two-letter country codes from \s-1ISO 3166\-1,\s0
the code 'fi' is used to refer to the country Finland. \s-1CODE\s0 is always
case insensitive (though when a code is returned, it will always be in
the case as used in the standard), so 'fi', '\s-1FI\s0', and 'Fi' would all
be equivalent.
.PP
\&\s-1CODESET\s0 refers to a constant specified in the documentation for each
module to label the various code sets. For example, in the
Locale::Language module, \s-1CODESET\s0 could be \s-1LOCALE_CODE_ALPHA_2\s0 or
\&\s-1LOCALE_CODE_ALPHA_3 \s0(among others). Most functions have a default one,
so they do not need to be specified. So the following calls are valid:
.PP
.Vb 3
\&   code2country("fi");
\&   code2country("fi",LOCALE_CODE_ALPHA_2);
\&   code2country("fin",LOCALE_CODE_ALPHA_3);
.Ve
.PP
Since \s-1LOCALE_CODE_ALPHA_2\s0 is the default code set, the first two are
identical.
.IP "\fBcode2XXX ( \s-1CODE\s0 [,CODESET] [,'retired'] )\fR" 4
.IX Item "code2XXX ( CODE [,CODESET] [,'retired'] )"
These functions take a code and returns a string which contains
the name of the element identified.  If the code is not a valid
code in the \s-1CODESET\s0 specified then \f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
The name of the element is the name as specified in the standard,
and as a result, different variations of an element name may
be returned for different values of \s-1CODESET.\s0
.Sp
For example, the \fBalpha\-2\fR country code set defines the two-letter
code \*(L"bo\*(R" to be \*(L"Bolivia, Plurinational State of\*(R", whereas the
\&\fBalpha\-3\fR code set defines the code 'bol' to be the country \*(L"Bolivia
(Plurinational State of)\*(R". So:
.Sp
.Vb 2
\&   code2country(\*(Aqbo\*(Aq,LOCALE_CODE_ALPHA_2);
\&      => \*(AqBolivia, Plurinational State of\*(Aq
\&
\&   code2country(\*(Aqbol\*(Aq,LOCALE_CODE_ALPHA_3);
\&      => \*(AqBolivia (Plurinational State of)\*(Aq
.Ve
.Sp
By default, only active codes will be used, but if the string
\&'retired' is passed in as an argument, both active and retired
codes will be examined.
.IP "\fBXXX2code ( \s-1NAME\s0 [,CODESET] [,'retired'] )\fR" 4
.IX Item "XXX2code ( NAME [,CODESET] [,'retired'] )"
These functions takes the name of an element (or any of it's aliases)
and returns the code that corresponds to it, if it exists. If \s-1NAME\s0
could not be identified as the name of one of the elements, then
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
The name is not case sensitive. Also, any known variation of a name
may be passed in.
.Sp
For example, even though the country name returned using
\&\s-1LOCALE_CODE_ALPHA_2\s0 and \s-1LOCALE_CODE_ALPHA_3\s0 country codes for Bolivia is different,
either country name may be passed in since for each code set, in addition to
the alias 'Bolivia'. So:
.Sp
.Vb 3
\&   country2code(\*(AqBolivia, Plurinational State of\*(Aq,
\&                LOCALE_CODE_ALPHA_2);
\&      => bo
\&
\&   country2code(\*(AqBolivia (Plurinational State of)\*(Aq,
\&                LOCALE_CODE_ALPHA_2);
\&      => bo
\&
\&   country2code(\*(AqBolivia\*(Aq,LOCALE_CODE_ALPHA_2);
\&      => bo
.Ve
.Sp
By default, only active names will be used, but if the string
\&'retired' is passed in as an argument, both active and retired
names will be examined.
.IP "\fBXXX_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR" 4
.IX Item "XXX_code2code ( CODE ,CODESET ,CODESET2 )"
These functions takes a a code from one code set, and returns the
corresponding code from another code set. \s-1CODE\s0 must exists in the code
set specified by \s-1CODESET\s0 and must have a corresponding code in the
code set specified by \s-1CODESET2\s0 or \f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
Both CODESETs must be explicitly entered.
.Sp
.Vb 3
\&   country_code2code(\*(Aqfin\*(Aq, LOCALE_CODE_ALPHA_3,
\&                     LOCALE_CODE_ALPHA_2);
\&      => \*(Aqfi\*(Aq
.Ve
.Sp
Note that this function does \s-1NOT\s0 support retired codes.
.IP "\fBall_XXX_codes ( [\s-1CODESET\s0] [,'retired'] )\fR" 4
.IX Item "all_XXX_codes ( [CODESET] [,'retired'] )"
These returns a list of all code in the code set. The codes will be
sorted.
.Sp
By default, only active codes will be returned, but if the string
\&'retired' is passed in as an argument, both active and retired
codes will be returned.
.IP "\fBall_XXX_names ( [\s-1CODESET\s0] [,'retired'] )\fR" 4
.IX Item "all_XXX_names ( [CODESET] [,'retired'] )"
These return a list of all elements names for which there is a
corresponding code in the specified code set.
.Sp
The names returned are exactly as they are specified in the standard,
and are sorted.
.Sp
Since not all elements are listed in all code sets, the list of
elements may differ depending on the code set specified.
.Sp
By default, only active names will be returned, but if the string
\&'retired' is passed in as an argument, both active and retired
names will be returned.
.SH "SEMI-PRIVATE ROUTINES"
.IX Header "SEMI-PRIVATE ROUTINES"
Additional semi-private routines which may be used to modify the
internal data are also available.  Given their status, they aren't
exported, and so need to be called by prefixing the function name with
the package name.
.PP
These routines do not currently work with retired codes.
.IP "\fBMODULE::rename_XXX  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::rename_XXX ( CODE ,NEW_NAME [,CODESET] )"
These routines are used to change the official name of an element. At
that point, the name returned by the code2XXX routine would be
\&\s-1NEW_NAME\s0 instead of the name specified in the standard.
.Sp
The original name will remain as an alias.
.Sp
For example, the official country name for code 'gb' is 'United
Kingdom'.  If you want to change that, you might call:
.Sp
.Vb 1
\&   Locale::Codes::Country::rename_country(\*(Aqgb\*(Aq, \*(AqGreat Britain\*(Aq);
.Ve
.Sp
This means that calling code2country('gb') will now return 'Great
Britain' instead of 'United Kingdom'.
.Sp
If any error occurs, a warning is issued and 0 is returned. An error
occurs if \s-1CODE\s0 doesn't exist in the specified code set, or if
\&\s-1NEW_NAME\s0 is already in use but for a different element.
.Sp
If the routine succeeds, 1 is returned.
.IP "\fBMODULE::add_XXX  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::add_XXX ( CODE ,NAME [,CODESET] )"
These routines are used to add a new code and name to the data.
.Sp
Both \s-1CODE\s0 and \s-1NAME\s0 must be unused in the data set or an error
occurs (though \s-1NAME\s0 may be used in a different data set).
.Sp
For example, to create the fictitious country named \*(L"Duchy of
Grand Fenwick\*(R" with codes \*(L"gf\*(R" and \*(L"fen\*(R", use the following:
.Sp
.Vb 2
\&   Locale::Codes::Country::add_country("fe","Duchy of Grand Fenwick",
\&                                LOCALE_CODE_ALPHA_2);
\&
\&   Locale::Codes::Country::add_country("fen","Duchy of Grand Fenwick",
\&                                LOCALE_CODE_ALPHA_3);
.Ve
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBMODULE::delete_XXX  ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::delete_XXX ( CODE [,CODESET] )"
These routines are used to delete a code from the data.
.Sp
\&\s-1CODE\s0 must refer to an existing code in the code set.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBMODULE::add_XXX_alias  ( \s-1NAME ,NEW_NAME \s0)\fR" 4
.IX Item "MODULE::add_XXX_alias ( NAME ,NEW_NAME )"
These routines are used to add a new alias to the data. They do
not alter the return value of the code2XXX function.
.Sp
\&\s-1NAME\s0 must be an existing element name, and \s-1NEW_NAME\s0 must
be unused or an error occurs.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBMODULE::delete_XXX_alias  ( \s-1NAME \s0)\fR" 4
.IX Item "MODULE::delete_XXX_alias ( NAME )"
These routines are used to delete an alias from the data. Once
removed, the element may not be referred to by \s-1NAME.\s0
.Sp
\&\s-1NAME\s0 must be one of a list of at least two names that may be used to
specify an element. If the element may only be referred to by a single
name, you'll need to use the add_XXX_alias function to add a new alias
first, or the remove_XXX function to remove the element entirely.
.Sp
If the alias is used as the name in any code set, one of the other
names will be used instead. Predicting exactly which one will
be used requires you to know the order in which the standards
were read, which is not reliable, so you may want to use the
rename_XXX function to force one of the alternate names to be
used.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBMODULE::rename_XXX_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::rename_XXX_code ( CODE ,NEW_CODE [,CODESET] )"
These routines are used to change the official code for an element. At
that point, the code returned by the XXX2code routine would be
\&\s-1NEW_CODE\s0 instead of the code specified in the standard.
.Sp
\&\s-1NEW_CODE\s0 may either be a code that is not in use, or it may be an
alias for \s-1CODE \s0(in which case, \s-1CODE\s0 becomes and alias and \s-1NEW_CODE\s0
becomes the \*(L"real\*(R" code).
.Sp
The original code is kept as an alias, so that the code2XXX routines
will work with either the code from the standard or the new code.
.Sp
However, the all_XXX_codes routine will only return the codes which
are considered \*(L"real\*(R" (which means that the list of codes will now
contain \s-1NEW_CODE,\s0 but will not contain \s-1CODE\s0).
.IP "\fBMODULE::add_XXX_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::add_XXX_code_alias ( CODE ,NEW_CODE [,CODESET] )"
These routines add an alias for the code. At that point, \s-1NEW_CODE\s0 and \s-1CODE\s0
will both work in the code2XXX routines. However, the XXX2code routines will
still return the original code.
.IP "\fBMODULE::delete_XXX_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "MODULE::delete_XXX_code_alias ( CODE [,CODESET] )"
These routines delete an alias for the code.
.Sp
These will only work if \s-1CODE\s0 is actually an alias. If it is the \*(L"real\*(R"
code, it will not be deleted. You will need to use the rename_XXX_code
function to switch the real code with one of the aliases, and then
delete the alias.
.SH "KNOWN BUGS AND LIMITATIONS"
.IX Header "KNOWN BUGS AND LIMITATIONS"
.IP "\fBRelationship between code sets\fR" 4
.IX Item "Relationship between code sets"
Because each code set uses a slightly different list of elements, and
they are not necessarily one-to-one, there may be some confusion
about the relationship between codes from different code sets.
.Sp
For example, \s-1ISO 3166\s0 assigns one code to the country \*(L"United States
Minor Outlying Islands\*(R", but the \s-1FIPS 10\s0 codes give different codes
to different islands (Baker Island, Howland Island, etc.).
.Sp
This may cause some confusion... I've done the best that I could do
to minimize it.
.IP "\fBNon-ASCII characters not supported\fR" 4
.IX Item "Non-ASCII characters not supported"
Currently all names must be all \s-1ASCII. I\s0 plan on relaxing that
limitation in the future.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Locale::Codes
.SH "AUTHOR"
.IX Header "AUTHOR"
See Locale::Codes for full author history.
.PP
Currently maintained by Sullivan Beck (sbeck@cpan.org).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&   Copyright (c) 1997\-2001 Canon Research Centre Europe (CRE).
\&   Copyright (c) 2001\-2010 Neil Bowers
\&   Copyright (c) 2010\-2013 Sullivan Beck
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
