.TH "MPSMatrixSolveTriangular" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixSolveTriangular
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixSolve\&.h>\fP
.PP
Inherits \fBMPSMatrixBinaryKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBMPSMatrixSolve\&.h\fP  MetalPerformanceShaders\&.framework
.PP
\fBCopyright:\fP
.RS 4
Copyright (c) 2016 Apple Inc\&. All rights reserved\&.  MetalPerformanceShaders filter base classes
.RE
.PP
This depends on Metal\&.framework\&.
.PP
\fBA\fP kernel for computing the solution of a linear system of equations using a triangular coefficient matrix\&.
.PP
\fBA\fP \fBMPSMatrixSolveTriangular\fP finds the solution matrix to the triangular system: 
.PP
.nf
op(A) * X = alpha * B    or    X * op(A) = alpha * B

.fi
.PP
.PP
Where \fBA\fP is either upper or lower triangular and op(A) is A**T or \fBA\fP\&. B is the array of right hand sides for which the equations are to be solved\&. X is the resulting matrix of solutions\&. 
.SH "Method Documentation"
.PP 
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSMatrix\fP *__nonnull) sourceMatrix(\fBMPSMatrix\fP *__nonnull) rightHandSideMatrix(\fBMPSMatrix\fP *__nonnull) solutionMatrix"
Encode a \fBMPSMatrixSolveTriangular\fP kernel into a command Buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter
.br
\fIsourceMatrix\fP \fBA\fP valid \fBMPSMatrix\fP containing the source matrix\&.
.br
\fIrightHandSideMatrix\fP \fBA\fP valid \fBMPSMatrix\fP containing the right hand side values\&.
.br
\fIsolutionMatrix\fP \fBA\fP valid \fBMPSMatrix\fP to contain the result\&.
.RE
.PP
This function encodes the \fBMPSMatrixSolveTriangular\fP object to a valid command buffer\&.
.PP
rightHandSideMatrix and solutionMatrix must be large enough to hold at least order * numberOfRightHandSides values starting at secondarySourceMatrixOrigin and resultMatrixOrigin respectively\&.
.PP
sourceMatrix must be at least size order x order starting at primarySourceMatrixOrigin\&. 
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(BOOL) right(BOOL) upper(BOOL) transpose(BOOL) unit(NSUInteger) order(NSUInteger) numberOfRightHandSides(double) alpha"
Initialize an \fBMPSMatrixSolveTriangular\fP object on a device
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device on which the kernel will execute\&.
.br
\fIright\fP \fBA\fP boolean value which indicates if the coefficient matrix is multiplied on the left or right side of the solution\&. NO indicates the multiplication is on the left\&.
.br
\fIupper\fP \fBA\fP boolean value which indicates if the source is lower or upper triangular\&. NO indicates that the coefficient matrix is lower triangular\&.
.br
\fItranspose\fP \fBA\fP boolean value which indicates if the source matrix should be used in transposed form\&. NO indicates that the coefficient matrix is to be used normally\&.
.br
\fIunit\fP \fBA\fP boolean value which indicates if the source matrix is unit triangular\&.
.br
\fIorder\fP The order of the source matrix and, if right == NO, the number of rows in the solution and right hand side matrices\&. If right == YES the number of columns in the solution and right hand side matrices\&.
.br
\fInumberOfRightHandSides\fP If right == NO, the number of columns in the solution and right hand side matrices\&. The number of rows otherwise\&.
.br
\fIalpha\fP \fBA\fP double precision value used to scale the right hand sides\&.
.RE
.PP
This function initializes a \fBMPSMatrixSolveTriangular\fP object\&. It may allocate device side memory\&.
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSMatrixSolveTriangular\fP object or nil, if failure\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
