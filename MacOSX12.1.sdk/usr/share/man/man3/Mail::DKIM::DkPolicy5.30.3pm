.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::DKIM::DkPolicy 3"
.TH Mail::DKIM::DkPolicy 3 "2018-10-13" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DKIM::DkPolicy \- represents a DomainKeys Sender Signing Policy record
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DomainKeys sender signing policies are described in
\&\s-1RFC4870\s0(historical). It is a record published in the message
sender's (i.e. the person who transmitted the message)
\&\s-1DNS\s0 that describes how they sign messages.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "\fBfetch()\fP \- fetch a sender signing policy from \s-1DNS\s0"
.IX Subsection "fetch() - fetch a sender signing policy from DNS"
.Vb 4
\&  my $policy = Mail::DKIM::DkPolicy\->fetch(
\&                   Protocol => \*(Aqdns\*(Aq,
\&                   Sender => \*(Aqjoe@example.org\*(Aq,
\&               );
.Ve
.PP
The following named arguments are accepted:
.IP "Protocol" 4
.IX Item "Protocol"
always specify \*(L"dns\*(R"
.IP "Author" 4
.IX Item "Author"
the \*(L"author\*(R" of the message for which policy is being checked.
This is the first email address in the \*(L"From\*(R" header.
According to \s-1RFC 2822,\s0 section 3.6.2, the \*(L"From\*(R" header lists
who is responsible for writing the message.
.IP "Sender" 4
.IX Item "Sender"
the \*(L"sender\*(R" of the message for which policy is being checked.
This is the first email address in the \*(L"Sender\*(R" header,
or if there is not a \*(L"Sender\*(R" header, the \*(L"From\*(R" header.
According to \s-1RFC 2822,\s0 section 3.6.2, the \*(L"Sender\*(R" header lists
who is responsible for transmitting the message.
.PP
Depending on what type of policy is being checked, both the
Sender and Author fields may need to be specified.
.PP
If a \s-1DNS\s0 error or timeout occurs, an exception is thrown.
.PP
Otherwise, a policy object of some sort will be returned.
If no policy is actually published,
then the \*(L"default policy\*(R" will be returned.
To check when this happens, use
.PP
.Vb 1
\&  my $is_default = $policy\->is_implied_default_policy;
.Ve
.SS "\fBnew()\fP \- construct a default policy object"
.IX Subsection "new() - construct a default policy object"
.Vb 1
\&  my $policy = Mail::DKIM::DkPolicy\->new;
.Ve
.SS "\fBparse()\fP \- gets a policy object by parsing a string"
.IX Subsection "parse() - gets a policy object by parsing a string"
.Vb 3
\&  my $policy = Mail::DKIM::DkPolicy\->parse(
\&                   String => \*(Aqo=~; t=y\*(Aq
\&               );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBapply()\fP \- apply the policy to the results of a \s-1DKIM\s0 verifier"
.IX Subsection "apply() - apply the policy to the results of a DKIM verifier"
.Vb 1
\&  my $result = $policy\->apply($dkim_verifier);
.Ve
.PP
The caller must provide an instance of Mail::DKIM::Verifier, one which
has already been fed the message being verified.
.PP
Possible results are:
.IP "accept" 4
.IX Item "accept"
The message is approved by the sender signing policy.
.IP "reject" 4
.IX Item "reject"
The message is rejected by the sender signing policy.
.IP "neutral" 4
.IX Item "neutral"
The message is neither approved nor rejected by the sender signing
policy. It can be considered suspicious.
.SS "\fBflags()\fP \- get or set the flags (t=) tag"
.IX Subsection "flags() - get or set the flags (t=) tag"
A vertical-bar separated list of flags.
.SS "\fBis_implied_default_policy()\fP \- is this policy implied?"
.IX Subsection "is_implied_default_policy() - is this policy implied?"
.Vb 1
\&  my $is_implied = $policy\->is_implied_default_policy;
.Ve
.PP
If you fetch the policy for a particular domain, but that domain
does not have a policy published, then the \*(L"default policy\*(R" is
in effect. Use this method to detect when that happens.
.SS "\fBlocation()\fP \- where the policy was fetched from"
.IX Subsection "location() - where the policy was fetched from"
DomainKeys policies only have per-domain policies, so this will
be the domain where the policy was published.
.PP
If nothing is published for the domain, and the default policy
was returned instead, the location will be \f(CW\*(C`undef\*(C'\fR.
.SS "\fBnote()\fP \- get or set the human readable notes (n=) tag"
.IX Subsection "note() - get or set the human readable notes (n=) tag"
Human readable notes regarding the record. Undef if no notes specified.
.SS "\fBpolicy()\fP \- get or set the outbound signing policy (o=) tag"
.IX Subsection "policy() - get or set the outbound signing policy (o=) tag"
.Vb 1
\&  my $sp = $policy\->policy;
.Ve
.PP
Outbound signing policy for the entity. Possible values are:
.ie n .IP """~""" 4
.el .IP "\f(CW~\fR" 4
.IX Item "~"
The default. The domain may sign some (but not all) email.
.ie n .IP """\-""" 4
.el .IP "\f(CW\-\fR" 4
.IX Item "-"
The domain signs all email.
.SS "\fBsignall()\fP \- true if policy is /\-"""
.IX Subsection "signall() - true if policy is /-"""
.SS "\fBtesting()\fP \- checks the testing flag"
.IX Subsection "testing() - checks the testing flag"
.Vb 1
\&  my $testing = $policy\->testing;
.Ve
.PP
If nonzero, the testing flag is set on the signing policy, and the
verify should not consider a message suspicious based on this policy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Long, <jlong@messiah.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2009 by Messiah College
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
