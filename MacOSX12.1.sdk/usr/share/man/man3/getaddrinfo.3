.\"	$KAME: getaddrinfo.3,v 1.36 2005/01/05 03:23:05 itojun Exp $
.\"	$OpenBSD: getaddrinfo.3,v 1.35 2004/12/21 03:40:31 jaredy Exp $
.\"
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $FreeBSD: src/lib/libc/net/getaddrinfo.3,v 1.34 2008/07/01 22:59:20 danger Exp $
.\"
.Dd July 1, 2008
.Dt GETADDRINFO 3
.Os
.Sh NAME
.Nm getaddrinfo ,
.Nm freeaddrinfo
.Nd socket address structure to host and service name
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Fd #include <netdb.h>
.Ft int
.Fo getaddrinfo
.Fa "const char *hostname" "const char *servname"
.Fa "const struct addrinfo *hints" "struct addrinfo **res"
.Fc
.Ft void
.Fn freeaddrinfo "struct addrinfo *ai"
.Sh DESCRIPTION
The
.Fn getaddrinfo
function is used to get a list of
.Tn IP
addresses and port numbers for host
.Fa hostname
and service
.Fa servname .
It is a replacement for and provides more flexibility than the
.Xr gethostbyname 3
and
.Xr getservbyname 3
functions.
.Pp
The
.Fa hostname
and
.Fa servname
arguments are either pointers to NUL-terminated strings or the null pointer.
An acceptable value for
.Fa hostname
is either a valid host name or a numeric host address string consisting
of a dotted decimal IPv4 address or an IPv6 address.
The
.Fa servname
is either a decimal port number or a service name listed in
.Xr services 5 .
At least one of
.Fa hostname
and
.Fa servname
must be non-null.
.Pp
.Fa hints
is an optional pointer to a
.Li struct addrinfo ,
as defined by
.Aq Pa netdb.h :
.Bd -literal
struct addrinfo {
	int ai_flags;		/* input flags */
	int ai_family;		/* protocol family for socket */
	int ai_socktype;	/* socket type */
	int ai_protocol;	/* protocol for socket */
	socklen_t ai_addrlen;	/* length of socket-address */
	struct sockaddr *ai_addr; /* socket-address for socket */
	char *ai_canonname;	/* canonical name for service location */
	struct addrinfo *ai_next; /* pointer to next in list */
};
.Ed
.Pp
This structure can be used to provide hints concerning the type of socket
that the caller supports or wishes to use.
The caller can supply the following structure elements in
.Fa hints :
.Bl -tag -width "ai_socktypeXX"
.It Fa ai_family
The protocol family that should be used.
When
.Fa ai_family
is set to
.Dv PF_UNSPEC ,
it means the caller will accept any protocol family supported by the
operating system.
.It Fa ai_socktype
Denotes the type of socket that is wanted:
.Dv SOCK_STREAM ,
.Dv SOCK_DGRAM ,
or
.Dv SOCK_RAW .
When
.Fa ai_socktype
is zero the caller will accept any socket type.
.It Fa ai_protocol
Indicates which transport protocol is desired,
.Dv IPPROTO_UDP
or
.Dv IPPROTO_TCP .
If
.Fa ai_protocol
is zero the caller will accept any protocol.
.It Fa ai_flags
The
.Fa ai_flags
field to which the
.Fa hints
parameter points shall be set to zero
or be the bitwise-inclusive OR of one or more of the values
.Dv AI_ADDRCONFIG ,
.Dv AI_ALL ,
.Dv AI_CANONNAME ,
.Dv AI_NUMERICHOST ,
.Dv AI_NUMERICSERV ,
.Dv AI_PASSIVE ,
.Dv AI_V4MAPPED ,
.Dv AI_V4MAPPED_CFG ,
and
.Dv AI_DEFAULT .
.Bl -tag -width "AI_CANONNAMEXX"
.It Dv AI_ADDRCONFIG
If the
.Dv AI_ADDRCONFIG
bit is set, IPv4 addresses shall be returned only if
an IPv4 address is configured on the local system,
and IPv6 addresses shall be returned only if
an IPv6 address is configured on the local system.
.It Dv AI_ALL
If the
.Dv AI_ALL
bit is set with the
.Dv AI_V4MAPPED
bit, then
.Fn getaddrinfo
shall return all matching IPv6 and IPv4 addresses.
The
.Dv AI_ALL
bit without the
.Dv AI_V4MAPPED
bit is ignored.
.It Dv AI_CANONNAME
If the
.Dv AI_CANONNAME
bit is set, a successful call to
.Fn getaddrinfo
will return a NUL-terminated string containing the canonical name
of the specified hostname in the
.Fa ai_canonname
element of the first
.Li addrinfo
structure returned.
.It Dv AI_NUMERICHOST
If the
.Dv AI_NUMERICHOST
bit is set, it indicates that
.Fa hostname
should be treated as a numeric string defining an IPv4 or IPv6 address
and no name resolution should be attempted.
.It Dv AI_NUMERICSERV
If the
.Dv AI_NUMERICSERV
bit is set,
then a non-null
.Fa servname
string supplied shall be a numeric port string.
Otherwise, an
.Dv EAI_NONAME
error shall be returned.
This bit shall prevent any type of name resolution service
(for example, NIS+) from being invoked.
.It Dv AI_PASSIVE
If the
.Dv AI_PASSIVE
bit is set it indicates that the returned socket address structure
is intended for use in a call to
.Xr bind 2 .
In this case, if the
.Fa hostname
argument is the null pointer, then the IP address portion of the
socket address structure will be set to
.Dv INADDR_ANY
for an IPv4 address or
.Dv IN6ADDR_ANY_INIT
for an IPv6 address.
.Pp
If the
.Dv AI_PASSIVE
bit is not set, the returned socket address structure will be ready
for use in a call to
.Xr connect 2
for a connection-oriented protocol or
.Xr connect 2 ,
.Xr sendto 2 ,
or
.Xr sendmsg 2
if a connectionless protocol was chosen.
The
.Tn IP
address portion of the socket address structure will be set to the
loopback address if
.Fa hostname
is the null pointer and
.Dv AI_PASSIVE
is not set.
.It Dv AI_V4MAPPED
If the
.Dv AI_V4MAPPED
flag is specified along with an
.Fa ai_family
of
.Dv PF_INET6 ,
then
.Fn getaddrinfo
shall return IPv4-mapped IPv6 addresses
on finding no matching IPv6 addresses (
.Fa ai_addrlen
shall be 16).
The
.Dv AI_V4MAPPED
flag shall be ignored unless
.Fa ai_family
equals
.Dv PF_INET6 .
.It Dv AI_V4MAPPED_CFG
The
.Dv AI_V4MAPPED_CFG
flag behaves exactly like the
.Dv AI_V4MAPPED
flag if the kernel supports IPv4-mapped IPv6 addresses. Otherwise it is ignored.
.It Dv AI_DEFAULT
.Dv AI_DEFAULT
is defined as (
.Dv AI_V4MAPPED_CFG
|
.Dv AI_ADDRCONFIG
).
.It Dv AI_UNUSABLE
To override the automatic
.Dv AI_DEFAULT
behavior that occurs when
.Fa ai_flags
is zero pass
.Dv AI_UNUSABLE
instead of zero.
This suppresses the implicit setting of
.Dv AI_V4MAPPED_CFG
and
.Dv AI_ADDRCONFIG ,
thereby causing unusable addresses to be included in the results.
.El
.El
.Pp
If
.Fa ai_flags
is zero,
.Fn getaddrinfo
gives the
.Dv AI_DEFAULT
behavior (
.Dv AI_V4MAPPED_CFG
|
.Dv AI_ADDRCONFIG
). To override this default behavior, pass any nonzero value for
.Fa ai_flags ,
by setting any desired flag values, or setting
.Dv AI_UNUSABLE
if no other flags are desired.
.Pp
All other elements of the
.Li addrinfo
structure passed via
.Fa hints
must be zero or the null pointer.
.Pp
If
.Fa hints
is the null pointer,
.Fn getaddrinfo
behaves as if the caller provided a
.Li struct addrinfo
with
.Fa ai_family
set to
.Dv PF_UNSPEC
and all other elements set to zero or
.Dv NULL
(which includes treating the
.Fa ai_flags
field as effectively zero, giving the automatic default
.Dv AI_DEFAULT
behavior).
.Pp
After a successful call to
.Fn getaddrinfo ,
.Fa *res
is a pointer to a linked list of one or more
.Li addrinfo
structures.
The list can be traversed by following the
.Fa ai_next
pointer in each
.Li addrinfo
structure until a null pointer is encountered.
The three members
.Fa ai_family,
.Fa ai_socktype,
and
.Fa ai_protocol
in each returned
.Li addrinfo
structure are suitable for a call to
.Xr socket 2 .
For each
.Li addrinfo
structure in the list, the
.Fa ai_addr
member points to a filled-in socket address structure of length
.Fa ai_addrlen .
.Pp
This implementation of
.Fn getaddrinfo
allows numeric IPv6 address notation with scope identifier,
as documented in section 11 of RFC 4007.
By appending the percent character and scope identifier to addresses,
one can fill the
.Li sin6_scope_id
field for addresses.
This would make management of scoped addresses easier
and allows cut-and-paste input of scoped addresses.
.Pp
At this moment the code supports only link-local addresses with the format.
The scope identifier is hardcoded to the name of the hardware interface
associated
with the link
.Po
such as
.Li ne0
.Pc .
An example is
.Dq Li fe80::1%ne0 ,
which means
.Do
.Li fe80::1
on the link associated with the
.Li ne0
interface
.Dc .
.Pp
The current implementation assumes a one-to-one relationship between
the interface and link, which is not necessarily true from the specification.
.Pp
All of the information returned by
.Fn getaddrinfo
is dynamically allocated: the
.Li addrinfo
structures themselves as well as the socket address structures and
the canonical host name strings included in the
.Li addrinfo
structures.
.Pp
Memory allocated for the dynamically allocated structures created by
a successful call to
.Fn getaddrinfo
is released by the
.Fn freeaddrinfo
function.
The
.Fa ai
pointer should be an
.Li addrinfo
structure created by a call to
.Fn getaddrinfo .
.Pp
The current implementation supports synthesis of NAT64 mapped IPv6 addresses.
If
.Fa hostname
is a numeric string defining an IPv4 address (for example,
.Dq Li 192.0.2.1
) and
.Fa ai_family
is set to
.Dv PF_UNSPEC
or
.Dv PF_INET6,
.Fn getaddrinfo
will synthesize the appropriate IPv6 address(es) (for example,
.Dq Li 64:ff9b::192.0.2.1
) if the current interface supports IPv6, NAT64 and DNS64
and does not support IPv4. If the
.Dv AI_ADDRCONFIG
flag is set, the IPv4 address will be suppressed on those interfaces.
On non-qualifying interfaces,
.Fn getaddrinfo
is guaranteed to return immediately without attempting any resolution, and will
return the IPv4 address if
.Fa ai_family
is
.Dv PF_UNSPEC
or
.Dv PF_INET.
NAT64 address synthesis can be disabled by setting the
.Dv AI_NUMERICHOST
flag. To best support NAT64 networks, it is recommended to resolve all
IP address literals with
.Fa ai_family
set to
.Dv PF_UNSPEC
and
.Fa ai_flags
set to
.Dv AI_DEFAULT.
.Pp
Note that NAT64 address synthesis is always disabled for IPv4 addresses
in the following ranges:
0.0.0.0/8,
127.0.0.0/8,
169.254.0.0/16,
192.0.0.0/29,
192.88.99.0/24,
224.0.0.0/4, and
255.255.255.255/32.
Additionally, NAT64 address synthesis is disabled when the network uses
the well-known prefix (64:ff9b::/96)
for IPv4 addresses in the following ranges:
10.0.0.0/8,
100.64.0.0/10,
172.16.0.0/12, and
192.168.0.0/16.
.Pp
Historically, passing a host's own hostname to 
.Fn getaddrinfo 
has been a popular 
technique for determining that host's IP address(es), but this is fragile, 
and doesn't work reliably in all cases. The appropriate way for software to 
discover the IP address(es) of the host it is running on is to use 
.Xr getifaddrs 3 .
.Pp
The 
.Fn getaddrinfo 
implementations on all versions of OS X and iOS are now, and always have been, 
thread-safe. Previous versions of this man page incorrectly reported that 
.Fn getaddrinfo 
was not thread-safe.
.Sh RETURN VALUES
.Fn getaddrinfo
returns zero on success or one of the error codes listed in
.Xr gai_strerror 3
if an error occurs.
.Sh EXAMPLES
The following code tries to connect to
.Dq Li www.kame.net
service
.Dq Li http
via a stream socket.
It loops through all the addresses available, regardless of address family.
If the destination resolves to an IPv4 address, it will use an
.Dv PF_INET
socket.
Similarly, if it resolves to IPv6, an
.Dv PF_INET6
socket is used.
Observe that there is no hardcoded reference to a particular address family.
The code works even if
.Fn getaddrinfo
returns addresses that are not IPv4/v6.
.Bd -literal -offset indent
struct addrinfo hints, *res, *res0;
int error;
int s;
const char *cause = NULL;

memset(&hints, 0, sizeof(hints));
hints.ai_family = PF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;
error = getaddrinfo("www.kame.net", "http", &hints, &res0);
if (error) {
	errx(1, "%s", gai_strerror(error));
	/*NOTREACHED*/
}
s = -1;
for (res = res0; res; res = res->ai_next) {
	s = socket(res->ai_family, res->ai_socktype,
	    res->ai_protocol);
	if (s < 0) {
		cause = "socket";
		continue;
	}

	if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
		cause = "connect";
		close(s);
		s = -1;
		continue;
	}

	break;	/* okay we got one */
}
if (s < 0) {
	err(1, "%s", cause);
	/*NOTREACHED*/
}
freeaddrinfo(res0);
.Ed
.Pp
The following example tries to open a wildcard listening socket onto service
.Dq Li http ,
for all the address families available.
.Bd -literal -offset indent
struct addrinfo hints, *res, *res0;
int error;
int s[MAXSOCK];
int nsock;
const char *cause = NULL;

memset(&hints, 0, sizeof(hints));
hints.ai_family = PF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;
error = getaddrinfo(NULL, "http", &hints, &res0);
if (error) {
	errx(1, "%s", gai_strerror(error));
	/*NOTREACHED*/
}
nsock = 0;
for (res = res0; res && nsock < MAXSOCK; res = res->ai_next) {
	s[nsock] = socket(res->ai_family, res->ai_socktype,
	    res->ai_protocol);
	if (s[nsock] < 0) {
		cause = "socket";
		continue;
	}

	if (bind(s[nsock], res->ai_addr, res->ai_addrlen) < 0) {
		cause = "bind";
		close(s[nsock]);
		continue;
	}
	(void) listen(s[nsock], 5);

	nsock++;
}
if (nsock == 0) {
	err(1, "%s", cause);
	/*NOTREACHED*/
}
freeaddrinfo(res0);
.Ed
.Sh SEE ALSO
.Xr bind 2 ,
.Xr connect 2 ,
.Xr send 2 ,
.Xr socket 2 ,
.Xr gai_strerror 3 ,
.Xr gethostbyname 3 ,
.Xr getnameinfo 3 ,
.Xr getservbyname 3 ,
.Xr resolver 3 ,
.Xr hosts 5 ,
.Xr resolv.conf 5 ,
.Xr services 5 ,
.Xr hostname 7 ,
.Xr named 8
.Rs
.%A R. Gilligan
.%A S. Thomson
.%A J. Bound
.%A J. McCann
.%A W. Stevens
.%T Basic Socket Interface Extensions for IPv6
.%R RFC 3493
.%D February 2003
.Re
.Rs
.%A S. Deering
.%A B. Haberman
.%A T. Jinmei
.%A E. Nordmark
.%A B. Zill
.%T "IPv6 Scoped Address Architecture"
.%R RFC 4007
.%D March 2005
.Re
.Rs
.%A Craig Metz
.%T Protocol Independence Using the Sockets API
.%B "Proceedings of the freenix track: 2000 USENIX annual technical conference"
.%D June 2000
.Re
.\".Sh BUGS
.\"The
.\".Nm
.\"function as implemented in
.\".Fx
.\"currently does not support
.\".Dv AI_ALL
.\"and
.\".Dv AI_V4MAPPED
.\"flags and returns
.\".Dv EAI_BADFLAGS
.\"if one of them is specified.
.Sh STANDARDS
The
.Fn getaddrinfo
function is defined by the
.St -p1003.1-2004
specification and documented in
.Dv "RFC 3493" ,
.Dq Basic Socket Interface Extensions for IPv6 .
