.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Traits 3pm"
.TH MooseX::Traits 3pm "2015-08-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Traits \- Automatically apply roles at object creation time
.SH "VERSION"
.IX Header "VERSION"
version 0.13
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Given some roles:
.PP
.Vb 3
\&  package Role;
\&  use Moose::Role;
\&  has foo => ( is => \*(Aqro\*(Aq, isa => \*(AqInt\*(Aq required => 1 );
.Ve
.PP
And a class:
.PP
.Vb 3
\&  package Class;
\&  use Moose;
\&  with \*(AqMooseX::Traits\*(Aq;
.Ve
.PP
Apply the roles to the class at \f(CW\*(C`new\*(C'\fR time:
.PP
.Vb 1
\&  my $class = Class\->with_traits(\*(AqRole\*(Aq)\->new( foo => 42 );
.Ve
.PP
Then use your customized class:
.PP
.Vb 3
\&  $class\->isa(\*(AqClass\*(Aq); # true
\&  $class\->does(\*(AqRole\*(Aq); # true
\&  $class\->foo; # 42
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Often you want to create components that can be added to a class
arbitrarily.  This module makes it easy for the end user to use these
components.  Instead of requiring the user to create a named class
with the desired roles applied, or apply roles to the instance
one-by-one, he can just create a new class from yours with
\&\f(CW\*(C`with_traits\*(C'\fR, and then instantiate that.
.PP
There is also \f(CW\*(C`new_with_traits\*(C'\fR, which exists for compatibility
reasons.  It accepts a \f(CW\*(C`traits\*(C'\fR parameter, creates a new class with
those traits, and then instantiates it.
.PP
.Vb 1
\&   Class\->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )
.Ve
.PP
returns exactly the same object as
.PP
.Vb 1
\&   Class\->with_traits(qw/Foo Bar/)\->new( foo => 42, bar => 1 )
.Ve
.PP
would.  But you can also store the result of \f(CW\*(C`with_traits\*(C'\fR, and call
other methods:
.PP
.Vb 3
\&   my $c = Class\->with_traits(qw/Foo Bar/);
\&   $c\->new( foo => 42 );
\&   $c\->whatever( foo => 1234 );
.Ve
.PP
And so on.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\f(CB$class\fB\->with_traits( \f(CB@traits\fB )\fR" 4
.IX Item "$class->with_traits( @traits )"
Return a new class with the traits applied.  Use like:
.IP "\fB\f(CB$class\fB\->new_with_traits(%args, traits => \e@traits)\fR" 4
.IX Item "$class->new_with_traits(%args, traits => @traits)"
\&\f(CW\*(C`new_with_traits\*(C'\fR can also take a hashref, e.g.:
.Sp
.Vb 1
\&  my $instance = $class\->new_with_traits({ traits => \e@traits, foo => \*(Aqbar\*(Aq });
.Ve
.SH "ATTRIBUTES YOUR CLASS GETS"
.IX Header "ATTRIBUTES YOUR CLASS GETS"
This role will add the following attributes to the consuming class.
.SS "_trait_namespace"
.IX Subsection "_trait_namespace"
You can override the value of this attribute with \f(CW\*(C`default\*(C'\fR to
automatically prepend a namespace to the supplied traits.  (This can
be overridden by prefixing the trait name with \f(CW\*(C`+\*(C'\fR.)
.PP
Example:
.PP
.Vb 7
\&  package Another::Trait;
\&  use Moose::Role;
\&  has \*(Aqbar\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqStr\*(Aq,
\&      required => 1,
\&  );
\&
\&  package Another::Class;
\&  use Moose;
\&  with \*(AqMooseX::Traits\*(Aq;
\&  has \*(Aq+_trait_namespace\*(Aq => ( default => \*(AqAnother\*(Aq );
\&
\&  my $instance = Another::Class\->new_with_traits(
\&      traits => [\*(AqTrait\*(Aq], # "Another::Trait", not "Trait"
\&      bar    => \*(Aqbar\*(Aq,
\&  );
\&  $instance\->does(\*(AqTrait\*(Aq)          # false
\&  $instance\->does(\*(AqAnother::Trait\*(Aq) # true
\&
\&  my $instance2 = Another::Class\->new_with_traits(
\&      traits => [\*(Aq+Trait\*(Aq], # "Trait", not "Another::Trait"
\&  );
\&  $instance2\->does(\*(AqTrait\*(Aq)          # true
\&  $instance2\->does(\*(AqAnother::Trait\*(Aq) # false
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Rockway <jrockway@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Rafael Kitover <rkitover@cpan.org>
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Alexander Hartmaier <abraxxa@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Infinity Interactive, Inc. http://www.iinteractive.com.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
