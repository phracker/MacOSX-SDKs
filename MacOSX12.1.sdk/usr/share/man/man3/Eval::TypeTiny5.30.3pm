.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Eval::TypeTiny 3"
.TH Eval::TypeTiny 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Eval::TypeTiny \- utility to evaluate a string of Perl code in a clean environment
.SH "STATUS"
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used by Type::Tiny to compile coderefs from strings of
Perl code, and hashrefs of variables to close over.
.SS "Functions"
.IX Subsection "Functions"
This module exports one function, which works much like the similarly named
function from Eval::Closure:
.ie n .IP """eval_closure(source => $source, environment => \e%env, %opt)""" 4
.el .IP "\f(CWeval_closure(source => $source, environment => \e%env, %opt)\fR" 4
.IX Item "eval_closure(source => $source, environment => %env, %opt)"
.SS "Constants"
.IX Subsection "Constants"
The following constants may be exported, but are not by default.
.ie n .IP """HAS_LEXICAL_SUBS""" 4
.el .IP "\f(CWHAS_LEXICAL_SUBS\fR" 4
.IX Item "HAS_LEXICAL_SUBS"
Boolean indicating whether Eval::TypeTiny has support for lexical subs.
(This feature requires Perl 5.18.)
.ie n .IP """ALIAS_IMPLEMENTATION""" 4
.el .IP "\f(CWALIAS_IMPLEMENTATION\fR" 4
.IX Item "ALIAS_IMPLEMENTATION"
Returns a string indicating what implementation of \f(CW\*(C`alias => 1\*(C'\fR is
being used. Eval::TypeTiny will automatically choose the best implementation.
This constant can be matched against the \f(CW\*(C`IMPLEMENTAION_*\*(C'\fR constants.
.ie n .IP """IMPLEMENTATION_NATIVE""" 4
.el .IP "\f(CWIMPLEMENTATION_NATIVE\fR" 4
.IX Item "IMPLEMENTATION_NATIVE"
If \f(CW\*(C`ALIAS_IMPLEMENTATION eq IMPLEMENTATION_NATIVE\*(C'\fR then Eval::TypeTiny is
currently using Perl 5.22's native alias feature. This requires Perl 5.22.
.ie n .IP """IMPLEMENTATION_DEVEL_LEXALIAS""" 4
.el .IP "\f(CWIMPLEMENTATION_DEVEL_LEXALIAS\fR" 4
.IX Item "IMPLEMENTATION_DEVEL_LEXALIAS"
If \f(CW\*(C`ALIAS_IMPLEMENTATION eq IMPLEMENTATION_DEVEL_LEXALIAS\*(C'\fR then
Eval::TypeTiny is currently using Devel::LexAlias to provide aliases.
.ie n .IP """IMPLEMENTATION_PADWALKER""" 4
.el .IP "\f(CWIMPLEMENTATION_PADWALKER\fR" 4
.IX Item "IMPLEMENTATION_PADWALKER"
If \f(CW\*(C`ALIAS_IMPLEMENTATION eq IMPLEMENTATION_PADWALKER\*(C'\fR then
Eval::TypeTiny is currently using PadWalker to provide aliases.
.ie n .IP """IMPLEMENTATION_TIE""" 4
.el .IP "\f(CWIMPLEMENTATION_TIE\fR" 4
.IX Item "IMPLEMENTATION_TIE"
If \f(CW\*(C`ALIAS_IMPLEMENTATION eq IMPLEMENTATION_TIE\*(C'\fR then Eval::TypeTiny is
using the fallback implementation of aliases using \f(CW\*(C`tie\*(C'\fR. This is the
slowest implementation, and may cause problems in certain edge cases, like
trying to alias already-tied variables, but it's the only way to implement
\&\f(CW\*(C`alias => 1\*(C'\fR without a recent version of Perl or one of the two optional
modules mentioned above.
.SH "EVALUATION ENVIRONMENT"
.IX Header "EVALUATION ENVIRONMENT"
The evaluation is performed in the presence of strict, but the absence of
warnings. (This is different to Eval::Closure which enables warnings for
compiled closures.)
.PP
The feature pragma is not active in the evaluation environment, so the
following will not work:
.PP
.Vb 2
\&   use feature qw(say);
\&   use Eval::TypeTiny qw(eval_closure);
\&   
\&   my $say_all = eval_closure(
\&      source => \*(Aqsub { say for @_ }\*(Aq,
\&   );
\&   $say_all\->("Hello", "World");
.Ve
.PP
The feature pragma does not \*(L"carry over\*(R" into the stringy eval. It is
of course possible to import pragmas into the evaluated string as part of the
string itself:
.PP
.Vb 1
\&   use Eval::TypeTiny qw(eval_closure);
\&   
\&   my $say_all = eval_closure(
\&      source => \*(Aqsub { use feature qw(say); say for @_ }\*(Aq,
\&   );
\&   $say_all\->("Hello", "World");
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Type\-Tiny>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Eval::Closure, Error::TypeTiny::Compilation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
