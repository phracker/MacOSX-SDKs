.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Listing 3"
.TH File::Listing 3 "2012-02-15" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Listing \- parse directory listing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use File::Listing qw(parse_dir);
\& $ENV{LANG} = "C";  # dates in non\-English locales not supported
\& for (parse_dir(\`ls \-l\`)) {
\&     ($name, $type, $size, $mtime, $mode) = @$_;
\&     next if $type ne \*(Aqf\*(Aq; # plain file
\&     #...
\& }
\&
\& # directory listing can also be read from a file
\& open(LISTING, "zcat ls\-lR.gz|");
\& $dir = parse_dir(\e*LISTING, \*(Aq+0000\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exports a single function called \fBparse_dir()\fR, which can be
used to parse directory listings.
.PP
The first parameter to \fBparse_dir()\fR is the directory listing to parse.
It can be a scalar, a reference to an array of directory lines or a
glob representing a filehandle to read the directory listing from.
.PP
The second parameter is the time zone to use when parsing time stamps
in the listing. If this value is undefined, then the local time zone is
assumed.
.PP
The third parameter is the type of listing to assume.  Currently
supported formats are 'unix', 'apache' and 'dosftp'.  The default
value is 'unix'.  Ideally, the listing type should be determined
automatically.
.PP
The fourth parameter specifies how unparseable lines should be treated.
Values can be 'ignore', 'warn' or a code reference.  Warn means that
the perl \fBwarn()\fR function will be called.  If a code reference is
passed, then this routine will be called and the return value from it
will be incorporated in the listing.  The default is 'ignore'.
.PP
Only the first parameter is mandatory.
.PP
The return value from \fBparse_dir()\fR is a list of directory entries.  In
a scalar context the return value is a reference to the list.  The
directory entries are represented by an array consisting of [
\&\f(CW$filename\fR, \f(CW$filetype\fR, \f(CW$filesize\fR, \f(CW$filetime\fR, \f(CW$filemode\fR ].  The
\&\f(CW$filetype\fR value is one of the letters 'f', 'd', 'l' or '?'.  The
\&\f(CW$filetime\fR value is the seconds since Jan 1, 1970.  The
\&\f(CW$filemode\fR is a bitmask like the mode returned by \fBstat()\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2010, Gisle Aas
.PP
Based on lsparse.pl (from Lee McLoughlin's ftp mirror package) and
Net::FTP's parse_dir (Graham Barr).
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
