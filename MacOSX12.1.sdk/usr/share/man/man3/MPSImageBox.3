.TH "MPSImageBox" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSImageBox
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSImageConvolution\&.h>\fP
.PP
Inherits \fBMPSUnaryImageKernel\fP\&.
.PP
Inherited by \fBMPSImageTent\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:kernelWidth:kernelHeight:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBkernelHeight\fP"
.br
.ti -1c
.RI "NSUInteger \fBkernelWidth\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBMPSImageBox\fP convolves an image with given filter of odd width and height\&. The kernel elements all have equal weight, achieving a blur effect\&. (Each result is the unweighted average of the surrounding pixels\&.) This allows for much faster algorithms, espcially for larger blur radii\&. The box height and width must be odd numbers\&. The box blur is a separable filter\&. The implementation is aware of this and will act accordingly to give best performance for multi-dimensional blurs\&. 
.SH "Method Documentation"
.PP 
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use initWithCoder:device instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSKernel\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSUnaryImageKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSUnaryImageKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(NSUInteger) kernelWidth(NSUInteger) kernelHeight"
Initialize a filter for a particular kernel size and device 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device the filter will run on 
.br
\fIkernelWidth\fP the width of the kernel\&. Must be an odd number\&. 
.br
\fIkernelHeight\fP the height of the kernel\&. Must be an odd number\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid object or nil, if failure\&. 
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\- kernelHeight\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The height of the filter window\&. 
.SS "\- kernelWidth\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The width of the filter window\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
