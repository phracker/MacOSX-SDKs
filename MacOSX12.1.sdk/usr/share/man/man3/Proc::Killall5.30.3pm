.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Proc::Killall 3"
.TH Proc::Killall 3 "2019-06-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
killall \- Kill all instances of a process by pattern matching the command\-line
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Proc::Killall;
\&
\&        killall(\*(AqHUP\*(Aq, \*(Aqxterm\*(Aq); # SIGHUP all xterms
\&        killall(\*(AqKILL\*(Aq, \*(Aq^netscape$\*(Aq); # SIGKILL to "netscape"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides one function, \f(CW\*(C`killall()\*(C'\fR, which takes two parameters:
a signal name or number (see \f(CW\*(C`kill()\*(C'\fR) and a process pattern. This pattern
is matched against the process' command-line as the \f(CW\*(C`ps\*(C'\fR command would
show it (\f(CW\*(C`ps\*(C'\fR is not used internally, instead a package called
\&\f(CW\*(C`Proc::ProcessTable\*(C'\fR is used).
.PP
\&\f(CW\*(C`killall\*(C'\fR searches the process table and sends that signal to all processes
which match the pattern. The return value is the number of processes that
were successfully signaled. If any kills failed, the \f(CW$!\fR variable
will be set based on that last one that failed (even if a successful kill
happened afterward).
.SH "AUTHOR"
.IX Header "AUTHOR"
Written in 2000 by Aaron Sherman <ajs@ajs.com>
.PP
\&\f(CW\*(C`Proc::Killall\*(C'\fR is copyright 2000 by Aaron Sherman, and may be
distributed under the same terms as Perl itself.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
\&\f(CW\*(C`Proc::ProcessTable\*(C'\fR is required for \f(CW\*(C`Proc::Killall\*(C'\fR to function.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, perlfunc, perlvar, Proc::ProcessTable
