.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::DBD::Metadata 3"
.TH DBI::DBD::Metadata 3 "2013-06-24" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::DBD::Metadata \- Generate the code and data for some DBI metadata methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The idea is to extract metadata information from a good quality
\&\s-1ODBC\s0 driver and use it to generate code and data to use in your own
\&\s-1DBI\s0 driver for the same database.
.PP
To generate code to support the get_info method:
.PP
.Vb 1
\&  perl \-MDBI::DBD::Metadata \-e "write_getinfo_pm(\*(Aqdbi:ODBC:dsn\-name\*(Aq,\*(Aquser\*(Aq,\*(Aqpass\*(Aq,\*(AqDriver\*(Aq)"
\&
\&  perl \-MDBI::DBD::Metadata \-e write_getinfo_pm dbi:ODBC:foo_db username password Driver
.Ve
.PP
To generate code to support the type_info method:
.PP
.Vb 1
\&  perl \-MDBI::DBD::Metadata \-e "write_typeinfo_pm(\*(Aqdbi:ODBC:dsn\-name\*(Aq,\*(Aquser\*(Aq,\*(Aqpass\*(Aq,\*(AqDriver\*(Aq)"
\&
\&  perl \-MDBI::DBD::Metadata \-e write_typeinfo_pm dbi:ODBC:dsn\-name user pass Driver
.Ve
.PP
Where \f(CW\*(C`dbi:ODBC:dsn\-name\*(C'\fR is the connection to use to extract the
data, and \f(CW\*(C`Driver\*(C'\fR is the name of the driver you want the code
generated for (the driver name gets embedded into the output in
numerous places).
.SH "Generating a GetInfo package for a driver"
.IX Header "Generating a GetInfo package for a driver"
The \f(CW\*(C`write_getinfo_pm\*(C'\fR in the DBI::DBD::Metadata module generates a
DBD::Driver::GetInfo package on standard output.
.PP
This method generates a DBD::Driver::GetInfo package from the data
source you specified in the parameter list or in the environment
variable \s-1DBI_DSN.\s0
DBD::Driver::GetInfo should help a \s-1DBD\s0 author implement the \s-1DBI\s0
\&\fIget_info()\fR method.
Because you are just creating this package, it is very unlikely that
DBD::Driver already provides a good implementation for \fIget_info()\fR.
Thus you will probably connect via \s-1DBD::ODBC.\s0
.PP
Once you are sure that it is producing reasonably sane data, you should
typically redirect the standard output to lib/DBD/Driver/GetInfo.pm, and
then hand edit the result.
Do not forget to update your Makefile.PL and \s-1MANIFEST\s0 to include this as
an extra \s-1PM\s0 file that should be installed.
.PP
If you connect via \s-1DBD::ODBC,\s0 you should use version 0.38 or greater;
.PP
Please take a critical look at the data returned!
\&\s-1ODBC\s0 drivers vary dramatically in their quality.
.PP
The generator assumes that most values are static and places these
values directly in the \f(CW%info\fR hash.
A few examples show the use of \s-1CODE\s0 references and the implementation
via subroutines.
It is very likely that you will have to write additional subroutines for
values depending on the session state or server version, e.g.
\&\s-1SQL_DBMS_VER.\s0
.PP
A possible implementation of \fIDBD::Driver::db::get_info()\fR may look like:
.PP
.Vb 7
\&  sub get_info {
\&    my($dbh, $info_type) = @_;
\&    require DBD::Driver::GetInfo;
\&    my $v = $DBD::Driver::GetInfo::info{int($info_type)};
\&    $v = $v\->($dbh) if ref $v eq \*(AqCODE\*(Aq;
\&    return $v;
\&  }
.Ve
.PP
Please replace Driver (or \*(L"<foo>\*(R") with the name of your driver.
Note that this stub function is generated for you by write_getinfo_pm
function, but you must manually transfer the code to Driver.pm.
.SH "Generating a TypeInfo package for a driver"
.IX Header "Generating a TypeInfo package for a driver"
The \f(CW\*(C`write_typeinfo_pm\*(C'\fR function in the DBI::DBD::Metadata module generates
on standard output the data needed for a driver's type_info_all method.
It also provides default implementations of the type_info_all
method for inclusion in the driver's main implementation file.
.PP
The driver parameter is the name of the driver for which the methods
will be generated; for the sake of examples, this will be \*(L"Driver\*(R".
Typically, the dsn parameter will be of the form \*(L"dbi:ODBC:odbc_dsn\*(R",
where the odbc_dsn is a \s-1DSN\s0 for one of the driver's databases.
The user and pass parameters are the other optional connection
parameters that will be provided to the \s-1DBI\s0 connect method.
.PP
Once you are sure that it is producing reasonably sane data, you should
typically redirect the standard output to lib/DBD/Driver/TypeInfo.pm,
and then hand edit the result if necessary.
Do not forget to update your Makefile.PL and \s-1MANIFEST\s0 to include this as
an extra \s-1PM\s0 file that should be installed.
.PP
Please take a critical look at the data returned!
\&\s-1ODBC\s0 drivers vary dramatically in their quality.
.PP
The generator assumes that all the values are static and places these
values directly in the \f(CW%info\fR hash.
.PP
A possible implementation of \fIDBD::Driver::type_info_all()\fR may look like:
.PP
.Vb 5
\&  sub type_info_all {
\&    my ($dbh) = @_;
\&    require DBD::Driver::TypeInfo;
\&    return [ @$DBD::Driver::TypeInfo::type_info_all ];
\&  }
.Ve
.PP
Please replace Driver (or \*(L"<foo>\*(R") with the name of your driver.
Note that this stub function is generated for you by the write_typeinfo_pm
function, but you must manually transfer the code to Driver.pm.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan Leffler <jleffler@us.ibm.com> (previously <jleffler@informix.com>),
Jochen Wiedmann <joe@ispsoft.de>,
Steffen Goeldner <sgoeldner@cpan.org>,
and Tim Bunce <dbi\-users@perl.org>.
