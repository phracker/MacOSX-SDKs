.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPAN::Changes::Group 3"
.TH CPAN::Changes::Group 3 "2015-06-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Changes::Group \- A group of related change information within a release
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $rel = CPAN::Changes::Release\->new(
\&        version => \*(Aq0.01\*(Aq,
\&        date    => \*(Aq2009\-07\-06\*(Aq,
\&    );
\&
\&    my $grp = CPAN::Changes::Group\->new(
\&        name => \*(AqBugFixes\*(Aq,
\&    );
\&
\&    $grp\->add_changes(
\&      \*(AqReturn a Foo object instead of a Bar object in foobar()\*(Aq
\&    );
\&
\&    $rel\->attach_group( $grp ); # clobbers existing group if present.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A release is made up of several groups. This object provides access
to all of the key data that embodies a such a group.
.PP
For instance:
.PP
.Vb 1
\&  0.27 2013\-12\-13
\&
\&  \- Foo
\&
\&  [ Spec Changes ]
\&
\&  \- Bar
.Ve
.PP
Here, there are two groups, the second one, \f(CW\*(C` Spec Changes \*(C'\fR and the first with the empty label \f(CW\*(C`q[]\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( %args )"
.el .SS "new( \f(CW%args\fP )"
.IX Subsection "new( %args )"
Creates a new group object, using \f(CW%args\fR as the default data.
.PP
.Vb 4
\&  Group\->new(
\&      name => \*(AqSome Group Name\*(Aq,
\&      changes    => [ ],
\&  );
.Ve
.SS "\fBname()\fP"
.IX Subsection "name()"
Returns the name of the group itself.
.ie n .SS "changes( [ $group ] )"
.el .SS "changes( [ \f(CW$group\fP ] )"
.IX Subsection "changes( [ $group ] )"
Gets the list of changes for this group as an arrayref of changes.
.ie n .SS "add_changes( @changes )"
.el .SS "add_changes( \f(CW@changes\fP )"
.IX Subsection "add_changes( @changes )"
Appends a list of changes to the group.
.PP
.Vb 1
\&    $group\->add_changes( \*(AqAdded foo() function\*(Aq );
.Ve
.ie n .SS "set_changes( @changes )"
.el .SS "set_changes( \f(CW@changes\fP )"
.IX Subsection "set_changes( @changes )"
Replaces the existing list of changes with the supplied values.
.SS "clear_changes( )"
.IX Subsection "clear_changes( )"
Clears all changes from the group.
.SS "groups( sort => \e&sorting_function )"
.IX Subsection "groups( sort => &sorting_function )"
Returns a list of current groups in this release.
.SS "\fBis_empty()\fP"
.IX Subsection "is_empty()"
Returns whether or not the given group has changes.
.SS "\fBserialize()\fP"
.IX Subsection "serialize()"
Returns the group data as a string, suitable for inclusion in a Changes
file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CPAN::Changes::Release
.IP "\(bu" 4
CPAN::Changes::Spec
.IP "\(bu" 4
CPAN::Changes
.IP "\(bu" 4
Test::CPAN::Changes
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Cassidy <bricas@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011\-2013 by Brian Cassidy
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
