.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Cwd 3pm"
.TH Cwd 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cwd \- get pathname of current working directory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Cwd;
\&    my $dir = getcwd;
\&
\&    use Cwd \*(Aqabs_path\*(Aq;
\&    my $abs_path = abs_path($file);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions for determining the pathname of the
current working directory.  It is recommended that getcwd (or another
*\fIcwd()\fR function) be used in \fIall\fR code to ensure portability.
.PP
By default, it exports the functions \fIcwd()\fR, \fIgetcwd()\fR, \fIfastcwd()\fR, and
\&\fIfastgetcwd()\fR (and, on Win32, \fIgetdcwd()\fR) into the caller's namespace.
.SS "getcwd and friends"
.IX Subsection "getcwd and friends"
Each of these functions are called without arguments and return the
absolute path of the current working directory.
.IP "getcwd" 4
.IX Item "getcwd"
.Vb 1
\&    my $cwd = getcwd();
.Ve
.Sp
Returns the current working directory.
.Sp
Exposes the \s-1POSIX\s0 function \fIgetcwd\fR\|(3) or re-implements it if it's not
available.
.IP "cwd" 4
.IX Item "cwd"
.Vb 1
\&    my $cwd = cwd();
.Ve
.Sp
The \fIcwd()\fR is the most natural form for the current architecture.  For
most systems it is identical to `pwd` (but without the trailing line
terminator).
.IP "fastcwd" 4
.IX Item "fastcwd"
.Vb 1
\&    my $cwd = fastcwd();
.Ve
.Sp
A more dangerous version of \fIgetcwd()\fR, but potentially faster.
.Sp
It might conceivably \fIchdir()\fR you out of a directory that it can't
\&\fIchdir()\fR you back into.  If fastcwd encounters a problem it will return
undef but will probably leave you in a different directory.  For a
measure of extra security, if everything appears to have worked, the
\&\fIfastcwd()\fR function will check that it leaves you in the same directory
that it started in.  If it has changed it will \f(CW\*(C`die\*(C'\fR with the message
\&\*(L"Unstable directory path, current directory changed
unexpectedly\*(R".  That should never happen.
.IP "fastgetcwd" 4
.IX Item "fastgetcwd"
.Vb 1
\&  my $cwd = fastgetcwd();
.Ve
.Sp
The \fIfastgetcwd()\fR function is provided as a synonym for \fIcwd()\fR.
.IP "getdcwd" 4
.IX Item "getdcwd"
.Vb 2
\&    my $cwd = getdcwd();
\&    my $cwd = getdcwd(\*(AqC:\*(Aq);
.Ve
.Sp
The \fIgetdcwd()\fR function is also provided on Win32 to get the current working
directory on the specified drive, since Windows maintains a separate current
working directory for each drive.  If no drive is specified then the current
drive is assumed.
.Sp
This function simply calls the Microsoft C library \fI_getdcwd()\fR function.
.SS "abs_path and friends"
.IX Subsection "abs_path and friends"
These functions are exported only on request.  They each take a single
argument and return the absolute pathname for it.  If no argument is
given they'll use the current working directory.
.IP "abs_path" 4
.IX Item "abs_path"
.Vb 1
\&  my $abs_path = abs_path($file);
.Ve
.Sp
Uses the same algorithm as \fIgetcwd()\fR.  Symbolic links and relative-path
components (\*(L".\*(R" and \*(L"..\*(R") are resolved to return the canonical
pathname, just like \fIrealpath\fR\|(3).
.IP "realpath" 4
.IX Item "realpath"
.Vb 1
\&  my $abs_path = realpath($file);
.Ve
.Sp
A synonym for \fIabs_path()\fR.
.IP "fast_abs_path" 4
.IX Item "fast_abs_path"
.Vb 1
\&  my $abs_path = fast_abs_path($file);
.Ve
.Sp
A more dangerous, but potentially faster version of abs_path.
.ie n .SS "$ENV{\s-1PWD\s0}"
.el .SS "\f(CW$ENV\fP{\s-1PWD\s0}"
.IX Subsection "$ENV{PWD}"
If you ask to override your \fIchdir()\fR built-in function,
.PP
.Vb 1
\&  use Cwd qw(chdir);
.Ve
.PP
then your \s-1PWD\s0 environment variable will be kept up to date.  Note that
it will only be kept up to date if all packages which use chdir import
it from Cwd.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
Since the path separators are different on some operating systems ('/'
on Unix, ':' on MacPerl, etc...) we recommend you use the File::Spec
modules wherever portability is a concern.
.IP "\(bu" 4
Actually, on Mac \s-1OS,\s0 the \f(CW\*(C`getcwd()\*(C'\fR, \f(CW\*(C`fastgetcwd()\*(C'\fR and \f(CW\*(C`fastcwd()\*(C'\fR
functions are all aliases for the \f(CW\*(C`cwd()\*(C'\fR function, which, on Mac \s-1OS,\s0
calls `pwd`.  Likewise, the \f(CW\*(C`abs_path()\*(C'\fR function is an alias for
\&\f(CW\*(C`fast_abs_path()\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Originally by the perl5\-porters.
.PP
Maintained by Ken Williams <KWILLIAMS@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Portions of the C code in this library are copyright (c) 1994 by the
Regents of the University of California.  All rights reserved.  The
license on this code is compatible with the licensing of the rest of
the distribution \- please see the source code in \fICwd.xs\fR for the
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::chdir
