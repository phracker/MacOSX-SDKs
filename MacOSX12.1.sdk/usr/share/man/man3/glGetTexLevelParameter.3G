'\" t
.\"     Title: glGetTexLevelParameter
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 03/08/2011
.\"    Manual: OpenGL 3.3
.\"    Source: OpenGL 3.3
.\"  Language: English
.\"
.TH "GLGETTEXLEVELPARAMET" "3G" "03/08/2011" "OpenGL 3.3" "OpenGL 3\&.3"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetTexLevelParameter \- return texture parameter values for a specific level of detail
.SH "C SPECIFICATION"
.HP \w'void\ glGetTexLevelParameterfv('u
.BI "void glGetTexLevelParameterfv(GLenum\ " "target" ", GLint\ " "level" ", GLenum\ " "pname" ", GLfloat\ *\ " "params" ");"
.HP \w'void\ glGetTexLevelParameteriv('u
.BI "void glGetTexLevelParameteriv(GLenum\ " "target" ", GLint\ " "level" ", GLenum\ " "pname" ", GLint\ *\ " "params" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies the symbolic name of the target texture, one of
\fBGL_TEXTURE_1D\fR,
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_3D\fR,
\fBGL_TEXTURE_1D_ARRAY\fR,
\fBGL_TEXTURE_2D_ARRAY\fR,
\fBGL_TEXTURE_RECTANGLE\fR,
\fBGL_TEXTURE_2D_MULTISAMPLE\fR,
\fBGL_TEXTURE_2D_MULTISAMPLE_ARRAY\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR,
\fBGL_PROXY_TEXTURE_1D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_3D\fR,
\fBGL_PROXY_TEXTURE_1D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_2D_ARRAY\fR,
\fBGL_PROXY_TEXTURE_RECTANGLE\fR,
\fBGL_PROXY_TEXTURE_2D_MULTISAMPLE\fR,
\fBGL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY\fR,
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR, or
\fBGL_TEXTURE_BUFFER\fR\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies the level\-of\-detail number of the desired image\&. Level 0 is the base image level\&. Level
n
is the
nth mipmap reduction image\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies the symbolic name of a texture parameter\&.
\fBGL_TEXTURE_WIDTH\fR,
\fBGL_TEXTURE_HEIGHT\fR,
\fBGL_TEXTURE_DEPTH\fR,
\fBGL_TEXTURE_INTERNAL_FORMAT\fR,
\fBGL_TEXTURE_BORDER\fR,
\fBGL_TEXTURE_RED_SIZE\fR,
\fBGL_TEXTURE_GREEN_SIZE\fR,
\fBGL_TEXTURE_BLUE_SIZE\fR,
\fBGL_TEXTURE_ALPHA_SIZE\fR,
\fBGL_TEXTURE_DEPTH_SIZE\fR,
\fBGL_TEXTURE_COMPRESSED\fR, and
\fBGL_TEXTURE_COMPRESSED_IMAGE_SIZE\fR
are accepted\&.
.RE
.PP
\fIparams\fR
.RS 4
Returns the requested data\&.
.RE
.SH "DESCRIPTION"
.PP

\fBglGetTexLevelParameter\fR
returns in
\fIparams\fR
texture parameter values for a specific level\-of\-detail value, specified as
\fIlevel\fR\&.
\fItarget\fR
defines the target texture, either
\fBGL_TEXTURE_1D\fR,
\fBGL_TEXTURE_2D\fR,
\fBGL_TEXTURE_3D\fR,
\fBGL_PROXY_TEXTURE_1D\fR,
\fBGL_PROXY_TEXTURE_2D\fR,
\fBGL_PROXY_TEXTURE_3D\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR,
\fBGL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR,
\fBGL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR, or
\fBGL_PROXY_TEXTURE_CUBE_MAP\fR\&.
.PP

\fBGL_MAX_TEXTURE_SIZE\fR, and
\fBGL_MAX_3D_TEXTURE_SIZE\fR
are not really descriptive enough\&. It has to report the largest square texture image that can be accommodated with mipmaps and borders, but a long skinny texture, or a texture without mipmaps and borders, may easily fit in texture memory\&. The proxy targets allow the user to more accurately query whether the GL can accommodate a texture of a given configuration\&. If the texture cannot be accommodated, the texture state variables, which may be queried with
\fBglGetTexLevelParameter\fR, are set to 0\&. If the texture can be accommodated, the texture state values will be set as they would be set for a non\-proxy target\&.
.PP

\fIpname\fR
specifies the texture parameter whose value or values will be returned\&.
.PP
The accepted parameter names are as follows:
.PP
\fBGL_TEXTURE_WIDTH\fR
.RS 4
.sp

\fIparams\fR
returns a single value, the width of the texture image\&. This value includes the border of the texture image\&. The initial value is 0\&.
.RE
.PP
\fBGL_TEXTURE_HEIGHT\fR
.RS 4
.sp

\fIparams\fR
returns a single value, the height of the texture image\&. This value includes the border of the texture image\&. The initial value is 0\&.
.RE
.PP
\fBGL_TEXTURE_DEPTH\fR
.RS 4
.sp

\fIparams\fR
returns a single value, the depth of the texture image\&. This value includes the border of the texture image\&. The initial value is 0\&.
.RE
.PP
\fBGL_TEXTURE_INTERNAL_FORMAT\fR
.RS 4
.sp

\fIparams\fR
returns a single value, the internal format of the texture image\&.
.RE
.PP
\fBGL_TEXTURE_RED_TYPE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_GREEN_TYPE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_BLUE_TYPE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_ALPHA_TYPE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_DEPTH_TYPE\fR
.RS 4
.sp
The data type used to store the component\&. The types
\fBGL_NONE\fR,
\fBGL_SIGNED_NORMALIZED\fR,
\fBGL_UNSIGNED_NORMALIZED\fR,
\fBGL_FLOAT\fR,
\fBGL_INT\fR, and
\fBGL_UNSIGNED_INT\fR
may be returned to indicate signed normalized fixed\-point, unsigned normalized fixed\-point, floating\-point, integer unnormalized, and unsigned integer unnormalized components, respectively\&.
.RE
.PP
\fBGL_TEXTURE_RED_SIZE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_GREEN_SIZE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_BLUE_SIZE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_ALPHA_SIZE\fR,
.RS 4
.RE
.PP
\fBGL_TEXTURE_DEPTH_SIZE\fR
.RS 4
.sp
The internal storage resolution of an individual component\&. The resolution chosen by the GL will be a close match for the resolution requested by the user with the component argument of
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglCopyTexImage1D\fR(), and
\fBglCopyTexImage2D\fR()\&. The initial value is 0\&.
.RE
.PP
\fBGL_TEXTURE_COMPRESSED\fR
.RS 4
.sp

\fIparams\fR
returns a single boolean value indicating if the texture image is stored in a compressed internal format\&. The initiali value is
\fBGL_FALSE\fR\&.
.RE
.PP
\fBGL_TEXTURE_COMPRESSED_IMAGE_SIZE\fR
.RS 4
.sp

\fIparams\fR
returns a single integer value, the number of unsigned bytes of the compressed texture image that would be returned from
\fBglGetCompressedTexImage\fR()\&.
.RE
.SH "NOTES"
.PP
If an error is generated, no change is made to the contents of
\fIparams\fR\&.
.PP

\fBglGetTexLevelParameter\fR
returns the texture level parameters for the active texture unit\&.
.SH "ERRORS"
.PP

\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
or
\fIpname\fR
is not an accepted value\&.
.PP

\fBGL_INVALID_VALUE\fR
is generated if
\fIlevel\fR
is less than 0\&.
.PP

\fBGL_INVALID_VALUE\fR
may be generated if
\fIlevel\fR
is greater than
log 2
\fImax\fR, where
\fImax\fR
is the returned value of
\fBGL_MAX_TEXTURE_SIZE\fR\&.
.PP

\fBGL_INVALID_VALUE\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_BUFFER\fR
and
\fIlevel\fR
is not zero\&.
.PP

\fBGL_INVALID_OPERATION\fR
is generated if
\fBGL_TEXTURE_COMPRESSED_IMAGE_SIZE\fR
is queried on texture images with an uncompressed internal format or on proxy targets\&.
.SH "SEE ALSO"
.PP

\fBglActiveTexture\fR(),
\fBglGetTexParameter\fR(),
\fBglCopyTexImage1D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage1D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglTexImage1D\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage1D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglTexParameter\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttp://oss\&.sgi\&.com/projects/FreeB/\fR\m[]\&.
