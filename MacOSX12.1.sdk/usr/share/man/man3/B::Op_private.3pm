.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "B::Op_private 3pm"
.TH B::Op_private 3pm "2020-05-14" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Op_private \- OP op_private flag definitions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use B::Op_private;
\&
\&    # flag details for bit 7 of OP_AELEM\*(Aqs op_private:
\&    my $name  = $B::Op_private::bits{aelem}{7}; # OPpLVAL_INTRO
\&    my $value = $B::Op_private::defines{$name}; # 128
\&    my $label = $B::Op_private::labels{$name};  # LVINTRO
\&
\&    # the bit field at bits 5..6 of OP_AELEM\*(Aqs op_private:
\&    my $bf  = $B::Op_private::bits{aelem}{6};
\&    my $mask = $bf\->{bitmask}; # etc
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides four global hashes:
.PP
.Vb 4
\&    %B::Op_private::bits
\&    %B::Op_private::defines
\&    %B::Op_private::labels
\&    %B::Op_private::ops_using
.Ve
.PP
which contain information about the per-op meanings of the bits in the
op_private field.
.ie n .SS "%bits"
.el .SS "\f(CW%bits\fP"
.IX Subsection "%bits"
This is indexed by op name and then bit number (0..7). For single bit flags,
it returns the name of the define (if any) for that bit:
.PP
.Vb 1
\&   $B::Op_private::bits{aelem}{7} eq \*(AqOPpLVAL_INTRO\*(Aq;
.Ve
.PP
For bit fields, it returns a hash ref containing details about the field.
The same reference will be returned for all bit positions that make
up the bit field; so for example these both return the same hash ref:
.PP
.Vb 2
\&    $bitfield = $B::Op_private::bits{aelem}{5};
\&    $bitfield = $B::Op_private::bits{aelem}{6};
.Ve
.PP
The general format of this hash ref is
.PP
.Vb 5
\&    {
\&        # The bit range and mask; these are always present.
\&        bitmin        => 5,
\&        bitmax        => 6,
\&        bitmask       => 0x60,
\&
\&        # (The remaining keys are optional)
\&
\&        # The names of any defines that were requested:
\&        mask_def      => \*(AqOPpFOO_MASK\*(Aq,
\&        baseshift_def => \*(AqOPpFOO_SHIFT\*(Aq,
\&        bitcount_def  => \*(AqOPpFOO_BITS\*(Aq,
\&
\&        # If present, Concise etc will display the value with a \*(AqFOO=\*(Aq
\&        # prefix. If it equals \*(Aq\-\*(Aq, then Concise will treat the bit
\&        # field as raw bits and not try to interpret it.
\&        label         => \*(AqFOO\*(Aq,
\&
\&        # If present, specifies the names of some defines and the
\&        # display labels that are used to assign meaning to particu\-
\&        # lar integer values within the bit field; e.g. 3 is dis\-
\&        # played as \*(AqC\*(Aq.
\&        enum          => [ qw(
\&                             1   OPpFOO_A  A
\&                             2   OPpFOO_B  B
\&                             3   OPpFOO_C  C
\&                         )],
\&
\&    };
.Ve
.ie n .SS "%defines"
.el .SS "\f(CW%defines\fP"
.IX Subsection "%defines"
This gives the value of every \f(CW\*(C`OPp\*(C'\fR define, e.g.
.PP
.Vb 1
\&    $B::Op_private::defines{OPpLVAL_INTRO} == 128;
.Ve
.ie n .SS "%labels"
.el .SS "\f(CW%labels\fP"
.IX Subsection "%labels"
This gives the short display label for each define, as used by \f(CW\*(C`B::Concise\*(C'\fR
and \f(CW\*(C`perl \-Dx\*(C'\fR, e.g.
.PP
.Vb 1
\&    $B::Op_private::labels{OPpLVAL_INTRO} eq \*(AqLVINTRO\*(Aq;
.Ve
.PP
If the label equals '\-', then Concise will treat the bit as a raw bit and
not try to display it symbolically.
.ie n .SS "%ops_using"
.el .SS "\f(CW%ops_using\fP"
.IX Subsection "%ops_using"
For each define, this gives a reference to an array of op names that use
the flag.
.PP
.Vb 1
\&    @ops_using_lvintro = @{ $B::Op_private::ops_using{OPp_LVAL_INTRO} };
.Ve
