.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::LibXML::Pattern 3"
.TH XML::LibXML::Pattern 3 "2014-02-01" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::LibXML::Pattern \- XML::LibXML::Pattern \- interface to libxml2 XPath patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use XML::LibXML;
\&  my $pattern = XML::LibXML::Pattern\->new(\*(Aq/x:html/x:body//x:div\*(Aq, { \*(Aqx\*(Aq => \*(Aqhttp://www.w3.org/1999/xhtml\*(Aq });
\&  # test a match on an XML::LibXML::Node $node
\&
\&  if ($pattern\->matchesNode($node)) { ... }
\&
\&  # or on an XML::LibXML::Reader
\&
\&  if ($reader\->matchesPattern($pattern)) { ... }
\&
\&  # or skip reading all nodes that do not match
\&
\&  print $reader\->nodePath while $reader\->nextPatternMatch($pattern);
\&
\&  $pattern = XML::LibXML::Pattern\->new( pattern, { prefix => namespace_URI, ... } );
\&  $bool = $pattern\->matchesNode($node);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a perl interface to libxml2's pattern matching support \fIhttp://xmlsoft.org/html/libxml\-pattern.html\fR. This feature requires recent versions of libxml2.
.PP
Patterns are a small subset of XPath language, which is limited to
(disjunctions of) location paths involving the child and descendant axes in
abbreviated form as described by the extended \s-1BNF\s0 given below:
.PP
.Vb 4
\&  Selector ::=     Path ( \*(Aq|\*(Aq Path )*
\&  Path     ::=     (\*(Aq.//\*(Aq | \*(Aq//\*(Aq | \*(Aq/\*(Aq )? Step ( \*(Aq/\*(Aq Step )*
\&  Step     ::=     \*(Aq.\*(Aq | NameTest
\&  NameTest ::=     QName | \*(Aq*\*(Aq | NCName \*(Aq:\*(Aq \*(Aq*\*(Aq
.Ve
.PP
For readability, whitespace may be used in selector XPath expressions even
though not explicitly allowed by the grammar: whitespace may be freely added
within patterns before or after any token, where
.PP
.Vb 1
\&  token     ::=     \*(Aq.\*(Aq | \*(Aq/\*(Aq | \*(Aq//\*(Aq | \*(Aq|\*(Aq | NameTest
.Ve
.PP
Note that no predicates or attribute tests are allowed.
.PP
Patterns are particularly useful for stream parsing provided via the \f(CW\*(C`XML::LibXML::Reader\*(C'\fR interface.
.IP "\fBnew()\fR" 4
.IX Item "new()"
.Vb 1
\&  $pattern = XML::LibXML::Pattern\->new( pattern, { prefix => namespace_URI, ... } );
.Ve
.Sp
The constructor of a pattern takes a pattern expression (as described by the
\&\s-1BNF\s0 grammar above) and an optional \s-1HASH\s0 reference mapping prefixes to namespace
URIs. The method returns a compiled pattern object.
.Sp
Note that if the document has a default namespace, it must still be given an
prefix in order to be matched (as demanded by the XPath 1.0 specification). For
example, to match an element \f(CW\*(C`<a xmlns="http://foo.bar"</a>\*(C'\fR, one should use a pattern like this:
.Sp
.Vb 1
\&  $pattern = XML::LibXML::Pattern\->new( \*(Aqfoo:a\*(Aq, { foo => \*(Aqhttp://foo.bar\*(Aq });
.Ve
.IP "matchesNode($node)" 4
.IX Item "matchesNode($node)"
.Vb 1
\&  $bool = $pattern\->matchesNode($node);
.Ve
.Sp
Given an XML::LibXML::Node object, returns a true value if the node is matched
by the compiled pattern expression.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::LibXML::Reader for other methods involving compiled patterns.
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant,
Christian Glahn,
Petr Pajas
.SH "VERSION"
.IX Header "VERSION"
2.0110
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd.
.PP
2002\-2006, Christian Glahn.
.PP
2006\-2009, Petr Pajas.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
