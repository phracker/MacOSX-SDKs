.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::Dwarn 3"
.TH Devel::Dwarn 3 "2013-12-31" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Dwarn \- return Dwarn @return_value
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Devel::Dwarn;
\&
\&  return Dwarn some_call(...)
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  if (wantarray) {
\&     my @return = some_call(...);
\&     warn Dumper(@return);
\&     return @return;
\&  } else {
\&     my $return = some_call(...);
\&     warn Dumper($return);
\&     return $return;
\&  }
.Ve
.PP
but shorter. If you need to force scalar context on the value,
.PP
.Vb 1
\&  use Devel::Dwarn;
\&
\&  return DwarnS some_call(...)
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  my $return = some_call(...);
\&  warn Dumper($return);
\&  return $return;
.Ve
.PP
If you need to force list context on the value,
.PP
.Vb 1
\&  use Devel::Dwarn;
\&
\&  return DwarnL some_call(...)
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  my @return = some_call(...);
\&  warn Dumper(@return);
\&  return @return;
.Ve
.PP
If you want to label your output, try DwarnN
.PP
.Vb 1
\&  use Devel::Dwarn;
\&
\&  return DwarnN $foo
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  my @return = some_call(...);
\&  warn \*(Aq$foo => \*(Aq . Dumper(@return);
\&  return @return;
.Ve
.PP
If you want to output a reference returned by a method easily, try \f(CW$Dwarn\fR
.PP
.Vb 1
\& $foo\->bar\->{baz}\->$Dwarn
.Ve
.PP
is equivalent to:
.PP
.Vb 3
\&  my $return = $foo\->bar\->{baz};
\&  warn Dumper($return);
\&  return $return;
.Ve
.PP
If you want to immediately die after outputting the data structure, every
Dwarn subroutine has a paired Ddie version, so just replace the warn with die.
For example:
.PP
.Vb 1
\& DdieL \*(Aqfoo\*(Aq, { bar => \*(Aqbaz\*(Aq };
.Ve
.SH "TIPS AND TRICKS"
.IX Header "TIPS AND TRICKS"
.SS "global usage"
.IX Subsection "global usage"
Instead of always just doing:
.PP
.Vb 1
\&  use Devel::Dwarn;
\&
\&  Dwarn ...
.Ve
.PP
We tend to do:
.PP
.Vb 1
\&  perl \-MDevel::Dwarn foo.pl
.Ve
.PP
(and then in the perl code:)
.PP
.Vb 1
\&  ::Dwarn ...
.Ve
.PP
That way, if you leave them in and run without the \f(CW\*(C`use Devel::Dwarn\*(C'\fR
the program will fail to compile and you are less likely to check it in by
accident.  Furthmore it allows that much less friction to add debug messages.
.SS "method chaining"
.IX Subsection "method chaining"
One trick which is useful when doing method chaining is the following:
.PP
.Vb 2
\&  my $foo = Bar\->new;
\&  $foo\->bar\->baz\->Devel::Dwarn::DwarnS\->biff;
.Ve
.PP
which is the same as:
.PP
.Vb 2
\&  my $foo = Bar\->new;
\&  (DwarnS $foo\->bar\->baz)\->biff;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is really just a shortcut for Data::Dumper::Concise::Sugar, check
it out for more complete documentation.
