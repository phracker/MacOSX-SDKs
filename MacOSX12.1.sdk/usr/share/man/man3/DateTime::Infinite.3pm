.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Infinite 3"
.TH DateTime::Infinite 3 "2020-02-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Infinite \- Infinite past and future DateTime objects
.SH "VERSION"
.IX Header "VERSION"
version 1.52
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $future = DateTime::Infinite::Future\->new();
\&  my $past   = DateTime::Infinite::Past\->new();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides two DateTime.pm subclasses,
\&\f(CW\*(C`DateTime::Infinite::Future\*(C'\fR and \f(CW\*(C`DateTime::Infinite::Past\*(C'\fR.
.PP
The objects are in the \*(L"floating\*(R" timezone, and this cannot be
changed.
.SH "METHODS"
.IX Header "METHODS"
The only constructor for these two classes is the \f(CW\*(C`new()\*(C'\fR method, as
shown in the \s-1SYNOPSIS\s0. This method takes no parameters.
.PP
All \*(L"get\*(R" methods in this module simply return infinity, positive or
negative. If the method is expected to return a string, it returns the
string representation of positive or negative infinity used by your
system. For example, on my system calling \f(CW\*(C`year()\*(C'\fR returns a number
which when printed appears either \*(L"Inf\*(R" or \*(L"\-Inf\*(R".
.PP
This also applies to methods that are compound stringifications, which return
the same strings even for things like \f(CW\*(C`ymd()\*(C'\fR or \f(CW\*(C`iso8601()\*(C'\fR
.PP
The object is not mutable, so the \f(CW\*(C`set()\*(C'\fR, \f(CW\*(C`set_time_zone()\*(C'\fR, and
\&\f(CW\*(C`truncate()\*(C'\fR methods are all do-nothing methods that simply return
the object they are called with.
.PP
Obviously, the \f(CW\*(C`is_finite()\*(C'\fR method returns false and the
\&\f(CW\*(C`is_infinite()\*(C'\fR method returns true.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
datetime@perl.org mailing list
.PP
http://datetime.perl.org/
.SH "BUGS"
.IX Header "BUGS"
There seem to be lots of problems when dealing with infinite numbers
on Win32. This may be a problem with this code, Perl, or Win32's \s-1IEEE\s0
math implementation. Either way, the module may not be well-behaved
on Win32 operating systems.
.PP
Bugs may be submitted at <https://github.com/houseabsolute/DateTime.pm/issues>.
.PP
There is a mailing list available for users of this distribution,
<mailto:datetime@perl.org>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for DateTime can be found at <https://github.com/houseabsolute/DateTime.pm>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2003 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
