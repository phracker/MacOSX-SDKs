.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Select 3pm"
.TH IO::Select 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Select \- OO interface to the select system call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Select;
\&
\&    $s = IO::Select\->new();
\&
\&    $s\->add(\e*STDIN);
\&    $s\->add($some_handle);
\&
\&    @ready = $s\->can_read($timeout);
\&
\&    @ready = IO::Select\->new(@handles)\->can_read(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::Select\*(C'\fR package implements an object approach to the system \f(CW\*(C`select\*(C'\fR
function call. It allows the user to see what \s-1IO\s0 handles, see IO::Handle,
are ready for reading, writing or have an exception pending.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HANDLES \s0] )" 4
.IX Item "new ( [ HANDLES ] )"
The constructor creates a new object and optionally initialises it with a set
of handles.
.SH "METHODS"
.IX Header "METHODS"
.IP "add ( \s-1HANDLES \s0)" 4
.IX Item "add ( HANDLES )"
Add the list of handles to the \f(CW\*(C`IO::Select\*(C'\fR object. It is these values that
will be returned when an event occurs. \f(CW\*(C`IO::Select\*(C'\fR keeps these values in a
cache which is indexed by the \f(CW\*(C`fileno\*(C'\fR of the handle, so if more than one
handle with the same \f(CW\*(C`fileno\*(C'\fR is specified then only the last one is cached.
.Sp
Each handle can be an \f(CW\*(C`IO::Handle\*(C'\fR object, an integer or an array
reference where the first element is an \f(CW\*(C`IO::Handle\*(C'\fR or an integer.
.IP "remove ( \s-1HANDLES \s0)" 4
.IX Item "remove ( HANDLES )"
Remove all the given handles from the object. This method also works
by the \f(CW\*(C`fileno\*(C'\fR of the handles. So the exact handles that were added
need not be passed, just handles that have an equivalent \f(CW\*(C`fileno\*(C'\fR
.IP "exists ( \s-1HANDLE \s0)" 4
.IX Item "exists ( HANDLE )"
Returns a true value (actually the handle itself) if it is present.
Returns undef otherwise.
.IP "handles" 4
.IX Item "handles"
Return an array of all registered handles.
.IP "can_read ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_read ( [ TIMEOUT ] )"
Return an array of handles that are ready for reading. \f(CW\*(C`TIMEOUT\*(C'\fR is
the maximum amount of time to wait before returning an empty list, in
seconds, possibly fractional. If \f(CW\*(C`TIMEOUT\*(C'\fR is not given and any
handles are registered then the call will block.
.IP "can_write ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_write ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that can be written to.
.IP "has_exception ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "has_exception ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that have an exception
condition, for example pending out-of-band data.
.IP "count ()" 4
.IX Item "count ()"
Returns the number of handles that the object will check for when
one of the \f(CW\*(C`can_\*(C'\fR methods is called or the object is passed to
the \f(CW\*(C`select\*(C'\fR static method.
.IP "\fIbits()\fR" 4
.IX Item "bits()"
Return the bit string suitable as argument to the core \fIselect()\fR call.
.IP "select ( \s-1READ, WRITE, EXCEPTION\s0 [, \s-1TIMEOUT \s0] )" 4
.IX Item "select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )"
\&\f(CW\*(C`select\*(C'\fR is a static method, that is you call it with the package name
like \f(CW\*(C`new\*(C'\fR. \f(CW\*(C`READ\*(C'\fR, \f(CW\*(C`WRITE\*(C'\fR and \f(CW\*(C`EXCEPTION\*(C'\fR are either \f(CW\*(C`undef\*(C'\fR or
\&\f(CW\*(C`IO::Select\*(C'\fR objects. \f(CW\*(C`TIMEOUT\*(C'\fR is optional and has the same effect as
for the core select call.
.Sp
The result will be an array of 3 elements, each a reference to an array
which will hold the handles that are ready for reading, writing and have
exceptions respectively. Upon error an empty list is returned.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a short example which shows how \f(CW\*(C`IO::Select\*(C'\fR could be used
to write a server which communicates with several sockets while also
listening for more connections on a listen socket
.PP
.Vb 2
\&    use IO::Select;
\&    use IO::Socket;
\&
\&    $lsn = IO::Socket::INET\->new(Listen => 1, LocalPort => 8080);
\&    $sel = IO::Select\->new( $lsn );
\&
\&    while(@ready = $sel\->can_read) {
\&        foreach $fh (@ready) {
\&            if($fh == $lsn) {
\&                # Create a new socket
\&                $new = $lsn\->accept;
\&                $sel\->add($new);
\&            }
\&            else {
\&                # Process socket
\&
\&                # Maybe we have finished with the socket
\&                $sel\->remove($fh);
\&                $fh\->close;
\&            }
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
