.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::InflateColumn 3"
.TH DBIx::Class::InflateColumn 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::InflateColumn \- Automatically create references from column data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&  # In your table classes
\&  _\|_PACKAGE_\|_\->inflate_column(\*(Aqcolumn_name\*(Aq, {
\&    inflate => sub {
\&      my ($raw_value_from_db, $result_object) = @_;
\&      ...
\&    },
\&    deflate => sub {
\&      my ($inflated_value_from_user, $result_object) = @_;
\&      ...
\&    },
\&  });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This component translates column data into references, i.e. \*(L"inflating\*(R"
the column data. It also \*(L"deflates\*(R" references into an appropriate format
for the database.
.PP
It can be used, for example, to automatically convert to and from
DateTime objects for your date and time fields. There's a
convenience component to actually do that though, try
DBIx::Class::InflateColumn::DateTime.
.PP
It will handle all types of references except scalar references. It
will not handle scalar values, these are ignored and thus passed
through to SQL::Abstract. This is to allow setting raw values to
\&\*(L"just work\*(R". Scalar references are passed through to the database to
deal with, to allow such settings as \f(CW\*(C` \e\*(Aqyear + 1\*(Aq\*(C'\fR and \f(CW\*(C` \e\*(AqDEFAULT\*(Aq \*(C'\fR
to work.
.PP
If you want to filter plain scalar values and replace them with
something else, see DBIx::Class::FilterColumn.
.SH "METHODS"
.IX Header "METHODS"
.SS "inflate_column"
.IX Subsection "inflate_column"
Instruct DBIx::Class to inflate the given column.
.PP
In addition to the column name, you must provide \f(CW\*(C`inflate\*(C'\fR and
\&\f(CW\*(C`deflate\*(C'\fR methods. The \f(CW\*(C`inflate\*(C'\fR method is called when you access
the field, while the \f(CW\*(C`deflate\*(C'\fR method is called when the field needs
to used by the database.
.PP
For example, if you have a table \f(CW\*(C`events\*(C'\fR with a timestamp field
named \f(CW\*(C`insert_time\*(C'\fR, you could inflate the column in the
corresponding table class using something like:
.PP
.Vb 10
\&    _\|_PACKAGE_\|_\->inflate_column(\*(Aqinsert_time\*(Aq, {
\&        inflate => sub {
\&          my ($insert_time_raw_value, $event_result_object) = @_;
\&          DateTime\->from_epoch( epoch => $insert_time_raw_value );
\&        },
\&        deflate => sub {
\&          my ($insert_time_dt_object, $event_result_object) = @_;
\&          $insert_time_dt_object\->epoch;
\&        },
\&    });
.Ve
.PP
The coderefs you set for inflate and deflate are called with two parameters,
the first is the value of the column to be inflated/deflated, the second is
the result object itself.
.PP
In this example, calls to an event's \f(CW\*(C`insert_time\*(C'\fR accessor return a
DateTime object. This DateTime object is later \*(L"deflated\*(R" back
to the integer epoch representation when used in the database layer.
For a much more thorough handling of the above example, please see
DBIx::Class::DateTime::Epoch
.SS "get_inflated_column"
.IX Subsection "get_inflated_column"
.Vb 1
\&  my $val = $obj\->get_inflated_column($col);
.Ve
.PP
Fetch a column value in its inflated state.  This is directly
analogous to \*(L"get_column\*(R" in DBIx::Class::Row in that it only fetches a
column already retrieved from the database, and then inflates it.
Throws an exception if the column requested is not an inflated column.
.SS "set_inflated_column"
.IX Subsection "set_inflated_column"
.Vb 1
\&  my $copy = $obj\->set_inflated_column($col => $val);
.Ve
.PP
Sets a column value from an inflated value.  This is directly
analogous to \*(L"set_column\*(R" in DBIx::Class::Row.
.SS "store_inflated_column"
.IX Subsection "store_inflated_column"
.Vb 1
\&  my $copy = $obj\->store_inflated_column($col => $val);
.Ve
.PP
Sets a column value from an inflated value without marking the column
as dirty. This is directly analogous to \*(L"store_column\*(R" in DBIx::Class::Row.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.ie n .IP "DBIx::Class::Core \- This component is loaded as part of the ""core"" DBIx::Class components; generally there is no need to load it directly" 4
.el .IP "DBIx::Class::Core \- This component is loaded as part of the \f(CWcore\fR DBIx::Class components; generally there is no need to load it directly" 4
.IX Item "DBIx::Class::Core - This component is loaded as part of the core DBIx::Class components; generally there is no need to load it directly"
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
