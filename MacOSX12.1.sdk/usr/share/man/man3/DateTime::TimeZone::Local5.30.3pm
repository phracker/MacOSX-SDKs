.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::TimeZone::Local 3"
.TH DateTime::TimeZone::Local 3 "2020-04-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::TimeZone::Local \- Determine the local system's time zone
.SH "VERSION"
.IX Header "VERSION"
version 2.39
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $tz = DateTime::TimeZone\->new( name => \*(Aqlocal\*(Aq );
\&
\&  my $tz = DateTime::TimeZone::Local\->TimeZone();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an interface for determining the local system's
time zone. Most of the functionality for doing this is in OS-specific
subclasses.
.SH "USAGE"
.IX Header "USAGE"
This class provides the following methods:
.SS "DateTime::TimeZone::Local\->\fBTimeZone()\fP"
.IX Subsection "DateTime::TimeZone::Local->TimeZone()"
This attempts to load an appropriate subclass and asks it to find the
local time zone. This method is called by when you pass \*(L"local\*(R" as the
time zone name to \f(CW\*(C`DateTime:TimeZone\->new()\*(C'\fR.
.PP
If your \s-1OS\s0 is not explicitly handled, you can create a module with a
name of the form \f(CW\*(C`DateTime::TimeZone::Local::$^O\*(C'\fR. If it exists, it
will be used instead of falling back to the Unix subclass.
.PP
If no OS-specific module exists, we fall back to using the Unix
subclass.
.PP
See DateTime::TimeZone::Local::Unix, DateTime::TimeZone::Local::Android,
DateTime::TimeZone::Local::hpux, DateTime::TimeZone::Local::Win32, and
DateTime::TimeZone::Local::VMS for OS-specific details.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
If you want to make a new OS-specific subclass, there are several
methods provided by this module you should know about.
.ie n .SS "$class\->\fBMethods()\fP"
.el .SS "\f(CW$class\fP\->\fBMethods()\fP"
.IX Subsection "$class->Methods()"
This method should be provided by your class. It should provide a list
of methods that will be called to try to determine the local time
zone.
.PP
Each of these methods is expected to return a new \f(CW\*(C`DateTime::TimeZone\*(C'\fR object
if it can successfully determine the time zone.
.ie n .SS "$class\->\fBFromEnv()\fP"
.el .SS "\f(CW$class\fP\->\fBFromEnv()\fP"
.IX Subsection "$class->FromEnv()"
This method tries to find a valid time zone in an \f(CW%ENV\fR value. It
calls \f(CW\*(C`$class\->EnvVars()\*(C'\fR to determine which keys to look at.
.PP
To use this from a subclass, simply return \*(L"FromEnv\*(R" as one of the
items from \f(CW\*(C`$class\->Methods()\*(C'\fR.
.ie n .SS "$class\->\fBEnvVars()\fP"
.el .SS "\f(CW$class\fP\->\fBEnvVars()\fP"
.IX Subsection "$class->EnvVars()"
This method should be provided by your subclass. It should return a
list of env vars to be checked by \f(CW\*(C`$class\->FromEnv()\*(C'\fR.
.PP
Your class should always include the \f(CW\*(C`TZ\*(C'\fR key as one of the variables to
check.
.ie n .SS "$class\->_IsValidName($name)"
.el .SS "\f(CW$class\fP\->_IsValidName($name)"
.IX Subsection "$class->_IsValidName($name)"
Given a possible time zone name, this returns a boolean indicating
whether or not the name looks valid. It always return false for
\&\*(L"local\*(R" in order to avoid infinite loops.
.SH "EXAMPLE SUBCLASS"
.IX Header "EXAMPLE SUBCLASS"
Here is a simple example subclass:
.PP
.Vb 1
\&  package DateTime::TimeZone::SomeOS;
\&
\&  use strict;
\&  use warnings;
\&
\&  use base \*(AqDateTime::TimeZone::Local\*(Aq;
\&
\&
\&  sub Methods { qw( FromEnv FromEther ) }
\&
\&  sub EnvVars { qw( TZ ZONE ) }
\&
\&  sub FromEther
\&  {
\&      my $class = shift;
\&
\&      ...
\&  }
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/DateTime\-TimeZone/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for DateTime-TimeZone can be found at <https://github.com/houseabsolute/DateTime\-TimeZone>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
