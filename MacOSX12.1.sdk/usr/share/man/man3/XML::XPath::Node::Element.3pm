.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::XPath::Node::Element 3"
.TH XML::XPath::Node::Element 3 "2018-10-11" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Element \- an <element>
.SH "API"
.IX Header "API"
.SS "new ( name, prefix )"
.IX Subsection "new ( name, prefix )"
Create a new Element node with name \*(L"name\*(R" and prefix \*(L"prefix\*(R". The name
be \*(L"prefix:local\*(R" if prefix is defined. I know that sounds weird, but it
works ;\-)
.SS "getName"
.IX Subsection "getName"
Returns the name (including \*(L"prefix:\*(R" if defined) of this element.
.SS "getLocalName"
.IX Subsection "getLocalName"
Returns just the local part of the name (the bit after \*(L"prefix:\*(R").
.SS "getChildNodes"
.IX Subsection "getChildNodes"
Returns the children of this element. In list context returns a list. In
scalar context returns an array ref.
.SS "getChildNode ( pos )"
.IX Subsection "getChildNode ( pos )"
Returns the child at position pos.
.SS "appendChild ( childnode )"
.IX Subsection "appendChild ( childnode )"
Appends the child node to the list of current child nodes.
.SS "removeChild ( childnode )"
.IX Subsection "removeChild ( childnode )"
Removes the supplied child node from the list of current child nodes.
.SS "getAttribute ( name )"
.IX Subsection "getAttribute ( name )"
Returns the attribute node with key name.
.SS "getAttributes / getAttributeNodes"
.IX Subsection "getAttributes / getAttributeNodes"
Returns the attribute nodes. In list context returns a list. In scalar
context returns an array ref.
.SS "appendAttribute ( attrib_node)"
.IX Subsection "appendAttribute ( attrib_node)"
Appends the attribute node to the list of attributes (XML::XPath stores
attributes in order).
.SS "getNamespace ( prefix )"
.IX Subsection "getNamespace ( prefix )"
Returns the namespace node by the given prefix
.SS "getNamespaces / getNamespaceNodes"
.IX Subsection "getNamespaces / getNamespaceNodes"
Returns the namespace nodes. In list context returns a list. In scalar
context returns an array ref.
.SS "appendNamespace ( ns_node )"
.IX Subsection "appendNamespace ( ns_node )"
Appends the namespace node to the list of namespaces.
.SS "getPrefix"
.IX Subsection "getPrefix"
Returns the prefix of this element
.SS "getExpandedName"
.IX Subsection "getExpandedName"
Returns the expanded name of this element (not yet implemented right).
.SS "string_value"
.IX Subsection "string_value"
For elements, the string_value is the concatenation of all string_values
of all text-descendants of the element node in document order.
.SS "toString ( [ norecurse ] )"
.IX Subsection "toString ( [ norecurse ] )"
Output (and all children) the node to a string. Doesn't process children
if the norecurse option is a true value.
