.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Params::Validate::Exception::ValidationFailedForTypeConstraint 3"
.TH MooseX::Params::Validate::Exception::ValidationFailedForTypeConstraint 3 "2015-02-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Params::Validate::Exception::ValidationFailedForTypeConstraint \- Exception thrown when a type constraint check fails
.SH "VERSION"
.IX Header "VERSION"
version 0.21
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use MooseX::Params::Validate qw( validated_list );
\&    use Scalar::Util qw( blessed );
\&    use Try::Tiny;
\&
\&    try {
\&        my @p = validated_list( @_, foo => { isa => \*(AqStr\*(Aq } );
\&    }
\&    catch {
\&        if (
\&            blessed $_
\&            && $_\->isa(
\&                \*(AqMooseX::Params::Validate::Exception::ValidationFailedForTypeConstraint\*(Aq
\&            )
\&            ) {
\&            ...;
\&        }
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides information about type constraint failures.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following methods:
.ie n .SS "$e\->\fBparameter()\fP"
.el .SS "\f(CW$e\fP\->\fBparameter()\fP"
.IX Subsection "$e->parameter()"
This returns a string describing the parameter, something like \f(CW\*(C`The \*(Aqfoo\*(Aq
parameter\*(C'\fR or \f(CW\*(C`Parameter #1\*(C'\fR.
.ie n .SS "$e\->\fBvalue()\fP"
.el .SS "\f(CW$e\fP\->\fBvalue()\fP"
.IX Subsection "$e->value()"
This is the value that failed the type constraint check.
.ie n .SS "$e\->\fBtype()\fP"
.el .SS "\f(CW$e\fP\->\fBtype()\fP"
.IX Subsection "$e->type()"
This is the type constraint object that did not accept the value.
.SH "STRINGIFICATION"
.IX Header "STRINGIFICATION"
This object stringifies to a reasonable error message.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan@cpan.org>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 \- 2015 by Stevan Little <stevan@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
