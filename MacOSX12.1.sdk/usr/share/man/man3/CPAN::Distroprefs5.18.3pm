.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN::Distroprefs 3pm"
.TH CPAN::Distroprefs 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Distroprefs \-\- read and match distroprefs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use CPAN::Distroprefs;
\&
\&    my %info = (... distribution/environment info ...);
\&
\&    my $finder = CPAN::Distroprefs\->find($prefs_dir, \e%ext_map);
\&
\&    while (my $result = $finder\->next) {
\&
\&        die $result\->as_string if $result\->is_fatal;
\&
\&        warn($result\->as_string), next if $result\->is_warning;
\&
\&        for my $pref (@{ $result\->prefs }) {
\&            if ($pref\->matches(\e%info)) {
\&                return $pref;
\&            }
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module encapsulates reading Distroprefs and matching them against \s-1CPAN\s0 distributions.
.SH "INTERFACE"
.IX Header "INTERFACE"
.Vb 1
\&    my $finder = CPAN::Distroprefs\->find($dir, \e%ext_map);
\&
\&    while (my $result = $finder\->next) { ... }
.Ve
.PP
Build an iterator which finds distroprefs files in the given directory.
.PP
\&\f(CW%ext_map\fR is a hashref whose keys are file extensions and whose values are
modules used to load matching files:
.PP
.Vb 5
\&    {
\&        \*(Aqyml\*(Aq => \*(AqYAML::Syck\*(Aq,
\&        \*(Aqdd\*(Aq  => \*(AqData::Dumper\*(Aq,
\&        ...
\&    }
.Ve
.PP
Each time \f(CW\*(C`$finder\->next\*(C'\fR is called, the iterator returns one of two
possible values:
.IP "\(bu" 4
a CPAN::Distroprefs::Result object
.IP "\(bu" 4
\&\f(CW\*(C`undef\*(C'\fR, indicating that no prefs files remain to be found
.SH "RESULTS"
.IX Header "RESULTS"
\&\f(CW\*(C`find()\*(C'\fR returns CPAN::Distroprefs::Result objects to
indicate success or failure when reading a prefs file.
.SS "Common"
.IX Subsection "Common"
All results share some common attributes:
.PP
\fItype\fR
.IX Subsection "type"
.PP
\&\f(CW\*(C`success\*(C'\fR, \f(CW\*(C`warning\*(C'\fR, or \f(CW\*(C`fatal\*(C'\fR
.PP
\fIfile\fR
.IX Subsection "file"
.PP
the file from which these prefs were read, or to which this error refers (relative filename)
.PP
\fIext\fR
.IX Subsection "ext"
.PP
the file's extension, which determines how to load it
.PP
\fIdir\fR
.IX Subsection "dir"
.PP
the directory the file was read from
.PP
\fIabs\fR
.IX Subsection "abs"
.PP
the absolute path to the file
.SS "Errors"
.IX Subsection "Errors"
Error results (warning and fatal) contain:
.PP
\fImsg\fR
.IX Subsection "msg"
.PP
the error message (usually either \f(CW$!\fR or a \s-1YAML\s0 error)
.SS "Successes"
.IX Subsection "Successes"
Success results contain:
.PP
\fIprefs\fR
.IX Subsection "prefs"
.PP
an arrayref of CPAN::Distroprefs::Pref objects
.SH "PREFS"
.IX Header "PREFS"
CPAN::Distroprefs::Pref objects represent individual distroprefs documents.
They are constructed automatically as part of \f(CW\*(C`success\*(C'\fR results from \f(CW\*(C`find()\*(C'\fR.
.PP
\fIdata\fR
.IX Subsection "data"
.PP
the pref information as a hashref, suitable for e.g. passing to Kwalify
.PP
\fImatch_attributes\fR
.IX Subsection "match_attributes"
.PP
returns a list of the valid match attributes (see the Distroprefs section in \s-1CPAN\s0)
.PP
currently: \f(CW\*(C`env perl perlconfig distribution module\*(C'\fR
.PP
\fIhas_any_match\fR
.IX Subsection "has_any_match"
.PP
true if this pref has a 'match' attribute at all
.PP
\fIhas_valid_subkeys\fR
.IX Subsection "has_valid_subkeys"
.PP
true if this pref has a 'match' attribute and at least one valid match attribute
.PP
\fImatches\fR
.IX Subsection "matches"
.PP
.Vb 1
\&  if ($pref\->matches(\e%arg)) { ... }
.Ve
.PP
true if this pref matches the passed-in hashref, which must have a value for
each of the \f(CW\*(C`match_attributes\*(C'\fR (above)
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
