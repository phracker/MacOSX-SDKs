.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Parser::DBIx::Class 3"
.TH SQL::Translator::Parser::DBIx::Class 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Parser::DBIx::Class \- Create a SQL::Translator schema
from a DBIx::Class::Schema instance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& ## Via DBIx::Class
\& use MyApp::Schema;
\& my $schema = MyApp::Schema\->connect("dbi:SQLite:something.db");
\& $schema\->create_ddl_dir();
\& ## or
\& $schema\->deploy();
\&
\& ## Standalone
\& use MyApp::Schema;
\& use SQL::Translator;
\&
\& my $schema = MyApp::Schema\->connect;
\& my $trans  = SQL::Translator\->new (
\&      parser      => \*(AqSQL::Translator::Parser::DBIx::Class\*(Aq,
\&      parser_args => {
\&          dbic_schema => $schema,
\&          add_fk_index => 0,
\&          sources => [qw/
\&            Artist
\&            CD
\&          /],
\&      },
\&      producer    => \*(AqSQLite\*(Aq,
\&     ) or die SQL::Translator\->error;
\& my $out = $trans\->translate() or die $trans\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class requires SQL::Translator installed to work.
.PP
\&\f(CW\*(C`SQL::Translator::Parser::DBIx::Class\*(C'\fR reads a DBIx::Class schema,
interrogates the columns, and stuffs it all in an \f(CW$sqlt_schema\fR object.
.PP
Its primary use is in deploying database layouts described as a set
of DBIx::Class classes, to a database. To do this, see
\&\*(L"deploy\*(R" in DBIx::Class::Schema.
.PP
This can also be achieved by having DBIx::Class export the schema as a
set of \s-1SQL\s0 files ready for import into your database, or passed to
other machines that need to have your application installed but don't
have SQL::Translator installed. To do this see
\&\*(L"create_ddl_dir\*(R" in DBIx::Class::Schema.
.SH "PARSER OPTIONS"
.IX Header "PARSER OPTIONS"
.SS "dbic_schema"
.IX Subsection "dbic_schema"
The DBIx::Class schema (either an instance or a class name) to be parsed.
This argument is in fact optional \- instead one can supply it later at
translation time as an argument to \*(L"translate\*(R" in SQL::Translator. In
other words both of the following invocations are valid and will produce
conceptually identical output:
.PP
.Vb 7
\&  my $yaml = SQL::Translator\->new(
\&    parser => \*(AqSQL::Translator::Parser::DBIx::Class\*(Aq,
\&    parser_args => {
\&      dbic_schema => $schema,
\&    },
\&    producer => \*(AqSQL::Translator::Producer::YAML\*(Aq,
\&  )\->translate;
\&
\&  my $yaml = SQL::Translator\->new(
\&    parser => \*(AqSQL::Translator::Parser::DBIx::Class\*(Aq,
\&    producer => \*(AqSQL::Translator::Producer::YAML\*(Aq,
\&  )\->translate(data => $schema);
.Ve
.SS "add_fk_index"
.IX Subsection "add_fk_index"
Create an index for each foreign key.
Enabled by default, as having indexed foreign key columns is normally the
sensible thing to do.
.SS "sources"
.IX Subsection "sources"
.IP "Arguments: \e@class_names" 4
.IX Item "Arguments: @class_names"
.PP
Limit the amount of parsed sources by supplying an explicit list of source names.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Translator, DBIx::Class::Schema
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
