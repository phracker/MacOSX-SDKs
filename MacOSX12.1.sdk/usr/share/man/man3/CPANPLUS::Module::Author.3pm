.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Module::Author 3pm"
.TH CPANPLUS::Module::Author 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Module::Author \- CPAN author object for CPANPLUS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    my $author = CPANPLUS::Module::Author\->new(
\&                    author  => \*(AqJack Ashton\*(Aq,
\&                    cpanid  => \*(AqJACKASH\*(Aq,
\&                    _id     => INTERNALS_OBJECT_ID,
\&                );
\&
\&    $author\->cpanid;
\&    $author\->author;
\&    $author\->email;
\&
\&    @dists  = $author\->distributions;
\&    @mods   = $author\->modules;
\&
\&    @accessors = CPANPLUS::Module::Author\->accessors;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`CPANPLUS::Module::Author\*(C'\fR creates objects from the information in the
source files. These can then be used to query on.
.PP
These objects should only be created internally. For \f(CW\*(C`fake\*(C'\fR objects,
there's the \f(CW\*(C`CPANPLUS::Module::Author::Fake\*(C'\fR class.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
An objects of this class has the following accessors:
.IP "author" 4
.IX Item "author"
Name of the author.
.IP "cpanid" 4
.IX Item "cpanid"
The \s-1CPAN\s0 id of the author.
.IP "email" 4
.IX Item "email"
The email address of the author, which defaults to '' if not provided.
.IP "parent" 4
.IX Item "parent"
The \f(CW\*(C`CPANPLUS::Internals::Object\*(C'\fR that spawned this module object.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$auth = CPANPLUS::Module::Author\->new( author => \s-1AUTHOR_NAME,\s0 cpanid => \s-1CPAN_ID,\s0 _id => \s-1INTERNALS_ID\s0 [, email => \s-1AUTHOR_EMAIL\s0] )"
.el .SS "\f(CW$auth\fP = CPANPLUS::Module::Author\->new( author => \s-1AUTHOR_NAME,\s0 cpanid => \s-1CPAN_ID,\s0 _id => \s-1INTERNALS_ID\s0 [, email => \s-1AUTHOR_EMAIL\s0] )"
.IX Subsection "$auth = CPANPLUS::Module::Author->new( author => AUTHOR_NAME, cpanid => CPAN_ID, _id => INTERNALS_ID [, email => AUTHOR_EMAIL] )"
This method returns a \f(CW\*(C`CPANPLUS::Module::Author\*(C'\fR object, based on the given
parameters.
.PP
Returns false on failure.
.ie n .SS "@mod_objs = $auth\->\fImodules()\fP"
.el .SS "\f(CW@mod_objs\fP = \f(CW$auth\fP\->\fImodules()\fP"
.IX Subsection "@mod_objs = $auth->modules()"
Return a list of module objects this author has released.
.ie n .SS "@dists = $auth\->\fIdistributions()\fP"
.el .SS "\f(CW@dists\fP = \f(CW$auth\fP\->\fIdistributions()\fP"
.IX Subsection "@dists = $auth->distributions()"
Returns a list of module objects representing all the distributions
this author has released.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "accessors ()"
.IX Subsection "accessors ()"
Returns a list of all accessor methods to the object
