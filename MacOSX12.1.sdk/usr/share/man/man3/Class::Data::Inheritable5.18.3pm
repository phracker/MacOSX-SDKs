.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::Data::Inheritable 3"
.TH Class::Data::Inheritable 3 "2008-01-25" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::Data::Inheritable \- Inheritable, overridable class data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Stuff;
\&  use base qw(Class::Data::Inheritable);
\&
\&  # Set up DataFile as inheritable class data.
\&  Stuff\->mk_classdata(\*(AqDataFile\*(Aq);
\&
\&  # Declare the location of the data file for this class.
\&  Stuff\->DataFile(\*(Aq/etc/stuff/data\*(Aq);
\&
\&  # Or, all in one shot:
\&  Stuff\->mk_classdata(DataFile => \*(Aq/etc/stuff/data\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class::Data::Inheritable is for creating accessor/mutators to class
data.  That is, if you want to store something about your class as a
whole (instead of about a single object).  This data is then inherited
by your subclasses and can be overriden.
.PP
For example:
.PP
.Vb 1
\&  Pere::Ubu\->mk_classdata(\*(AqSuitcase\*(Aq);
.Ve
.PP
will generate the method \fISuitcase()\fR in the class Pere::Ubu.
.PP
This new method can be used to get and set a piece of class data.
.PP
.Vb 2
\&  Pere::Ubu\->Suitcase(\*(AqRed\*(Aq);
\&  $suitcase = Pere::Ubu\->Suitcase;
.Ve
.PP
The interesting part happens when a class inherits from Pere::Ubu:
.PP
.Vb 2
\&  package Raygun;
\&  use base qw(Pere::Ubu);
\&  
\&  # Raygun\*(Aqs suitcase is Red.
\&  $suitcase = Raygun\->Suitcase;
.Ve
.PP
Raygun inherits its Suitcase class data from Pere::Ubu.
.PP
Inheritance of class data works analogous to method inheritance.  As
long as Raygun does not \*(L"override\*(R" its inherited class data (by using
\&\fISuitcase()\fR to set a new value) it will continue to use whatever is set
in Pere::Ubu and inherit further changes:
.PP
.Vb 2
\&  # Both Raygun\*(Aqs and Pere::Ubu\*(Aqs suitcases are now Blue
\&  Pere::Ubu\->Suitcase(\*(AqBlue\*(Aq);
.Ve
.PP
However, should Raygun decide to set its own \fISuitcase()\fR it has now
\&\*(L"overridden\*(R" Pere::Ubu and is on its own, just like if it had
overriden a method:
.PP
.Vb 2
\&  # Raygun has an orange suitcase, Pere::Ubu\*(Aqs is still Blue.
\&  Raygun\->Suitcase(\*(AqOrange\*(Aq);
.Ve
.PP
Now that Raygun has overridden Pere::Ubu futher changes by Pere::Ubu
no longer effect Raygun.
.PP
.Vb 2
\&  # Raygun still has an orange suitcase, but Pere::Ubu is using Samsonite.
\&  Pere::Ubu\->Suitcase(\*(AqSamsonite\*(Aq);
.Ve
.SH "Methods"
.IX Header "Methods"
.SS "mk_classdata"
.IX Subsection "mk_classdata"
.Vb 2
\&  Class\->mk_classdata($data_accessor_name);
\&  Class\->mk_classdata($data_accessor_name => $value);
.Ve
.PP
This is a class method used to declare new class data accessors.
A new accessor will be created in the Class using the name from
\&\f(CW$data_accessor_name\fR, and optionally initially setting it to the given
value.
.PP
To facilitate overriding, mk_classdata creates an alias to the
accessor, \fI_field_accessor()\fR.  So \fISuitcase()\fR would have an alias
\&\fI_Suitcase_accessor()\fR that does the exact same thing as \fISuitcase()\fR.
This is useful if you want to alter the behavior of a single accessor
yet still get the benefits of inheritable class data.  For example.
.PP
.Vb 3
\&  sub Suitcase {
\&      my($self) = shift;
\&      warn "Fashion tragedy" if @_ and $_[0] eq \*(AqPlaid\*(Aq;
\&
\&      $self\->_Suitcase_accessor(@_);
\&  }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Original code by Damian Conway.
.PP
Maintained by Michael G Schwern until September 2005.
.PP
Now maintained by Tony Bowden.
.SH "BUGS and QUERIES"
.IX Header "BUGS and QUERIES"
Please direct all correspondence regarding this module to:
  bug\-Class\-Data\-Inheritable@rt.cpan.org
.SH "COPYRIGHT and LICENSE"
.IX Header "COPYRIGHT and LICENSE"
Copyright (c) 2000\-2005, Damian Conway and Michael G Schwern. 
All Rights Reserved.
.PP
This module is free software. It may be used, redistributed and/or
modified under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perltooc has a very elaborate discussion of class data in Perl.
