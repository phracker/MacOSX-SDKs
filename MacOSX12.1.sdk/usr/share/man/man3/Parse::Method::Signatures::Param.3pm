.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Parse::Method::Signatures::Param 3"
.TH Parse::Method::Signatures::Param 3 "2017-04-01" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Method::Signatures::Param \- a parsed parameter from a signature
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
All attributes of this class are read-only.
.SS "required"
.IX Subsection "required"
Is this parameter required (true) or optional (false)?
.SS "sigil"
.IX Subsection "sigil"
The effective sigil ('$', '@' or '%') of this parameter.
.SS "type_constraints"
.IX Subsection "type_constraints"
.RS 4
\&\fBType:\fR Parse::Method::Signatures::TypeConstraint
.Sp
\&\fBPredicate:\fR has_type_constraints
.RE
.PP
Representation of the type constraint for this parameter. Most commonly you
will just call \*(L"meta_type_constraint\*(R" and not access this attribute directly.
.SS "default_value"
.IX Subsection "default_value"
.RS 4
\&\fBType:\fR Str
.Sp
\&\fBPredicate:\fR has_default_value
.RE
.PP
A string that should be eval'd or injected to get the default value for this
parameter. For example:
.PP
.Vb 1
\& $name = \*(Aqbar\*(Aq
.Ve
.PP
Would give a default_value of \*(L"'bar'\*(R".
.SS "constraints"
.IX Subsection "constraints"
.RS 4
\&\fBType:\fR ArrayRef[Str]
.Sp
\&\fBPredicate:\fR has_constraints
.RE
.PP
\&\f(CW\*(C`where\*(C'\fR constraints for this type. Each member of the array a the string
(including enclosing braces) of the where constraint block.
.SS "param_traits"
.IX Subsection "param_traits"
.RS 4
\&\fBType:\fR ArrayRef[ Tupple[Str,Str] ]
.Sp
\&\fBPredicate:\fR has_traits
.RE
.PP
Traits that this parameter is declared to have. For instance
.PP
.Vb 1
\& $foo does coerce
.Ve
.PP
would have a trait of
.PP
.Vb 1
\& [\*(Aqdoes\*(Aq, \*(Aqcoerce\*(Aq]
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "to_string"
.IX Subsection "to_string"
.SS "meta_type_constraint"
.IX Subsection "meta_type_constraint"
Get the Moose::Meta::TypeConstraint for this parameter. Check first that the
type has a type constraint:
.PP
.Vb 1
\& $tc = $param\->meta_type_constraint if $param\->has_type_constraints;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Parse::Method::Signatures.
.SH "AUTHORS"
.IX Header "AUTHORS"
Ash Berlin <ash@cpan.org>.
.PP
Florian Ragwitz <rafl@debian.org>.
.SH "LICENSE"
.IX Header "LICENSE"
Licensed under the same terms as Perl itself.
