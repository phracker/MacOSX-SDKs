.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools 3"
.TH Test2::Tools 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools \- Documentation for Tools.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tools are packages that export test functions, typically all related to a
specific aspect of testing. If you have a couple different categories of
exports then you may want to break them into separate modules.
.PP
Tools should export testing functions. Loading tools \fBshould not\fR have side
effects, or alter the behavior of other tools. If you want to alter behaviors
or create side effects then you probably want to write a Test2::Plugin.
.SH "FAQ"
.IX Header "FAQ"
.IP "Why is it called Test2::Tools, and not Test2::Tool?" 4
.IX Item "Why is it called Test2::Tools, and not Test2::Tool?"
This question arises since Tools is the only namespace in the plural. This is
because each Plugin should be a distinct unit of functionality, but a Tools
dist can (and usually should) export several tools. A bundle is also typically
described as a single unit. Nobody would like Test2::Bundles::Foo.
.IP "Should my tools subclass Test2::Tools?" 4
.IX Item "Should my tools subclass Test2::Tools?"
No. Currently this class is empty. Eventually we may want to add behavior, in
which case we do not want anyone to already be subclassing it.
.SH "HOW DO I WRITE A 'TOOLS' MODULE?"
.IX Header "HOW DO I WRITE A 'TOOLS' MODULE?"
It is very easy to write tools:
.PP
.Vb 3
\&    package Test2::Tools::Mine
\&    use strict;
\&    use warnings;
\&
\&    # All tools should use the context() function.
\&    use Test2::API qw/context/;
\&
\&    our @EXPORTS = qw/ok plan/;
\&    use base \*(AqExporter\*(Aq;
\&
\&    sub ok($;$) {
\&        my ($bool, $name) = @_;
\&
\&        # All tool functions should start by grabbing a context
\&        my $ctx = context();
\&
\&        # The context is the primary interface for generating events
\&        $ctx\->ok($bool, $name);
\&
\&        # When you are done you release the context
\&        $ctx\->release;
\&
\&        return $bool ? 1 : 0;
\&    }
\&
\&    sub plan {
\&        my ($max) = @_;
\&        my $ctx = context();
\&        $ctx\->plan($max);
\&        $ctx\->release;
\&    }
\&
\&    1;
.Ve
.PP
See Test2::API::Context for documentation on what the \f(CW$ctx\fR object can do.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
