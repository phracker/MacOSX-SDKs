.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Dumper::Concise 3"
.TH Data::Dumper::Concise 3 "2017-05-12" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Dumper::Concise \- Less indentation and newlines plus sub deparsing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  warn Dumper($var);
.Ve
.PP
is equivalent to:
.PP
.Vb 11
\&  use Data::Dumper;
\&  {
\&    local $Data::Dumper::Terse = 1;
\&    local $Data::Dumper::Indent = 1;
\&    local $Data::Dumper::Useqq = 1;
\&    local $Data::Dumper::Deparse = 1;
\&    local $Data::Dumper::Quotekeys = 0;
\&    local $Data::Dumper::Sortkeys = 1;
\&    local $Data::Dumper::Trailingcomma = 1;
\&    warn Dumper($var);
\&  }
.Ve
.PP
So for the structure:
.PP
.Vb 1
\&  { foo => "bar\enbaz", quux => sub { "fleem" } };
.Ve
.PP
Data::Dumper::Concise will give you:
.PP
.Vb 8
\&  {
\&    foo => "bar\enbaz",
\&    quux => sub {
\&        use warnings;
\&        use strict \*(Aqrefs\*(Aq;
\&        \*(Aqfleem\*(Aq;
\&    },
\&  }
.Ve
.PP
instead of the default Data::Dumper output:
.PP
.Vb 5
\&  $VAR1 = {
\&   \*(Aqquux\*(Aq => sub { "DUMMY" },
\&   \*(Aqfoo\*(Aq => \*(Aqbar
\&  baz\*(Aq
\&  };
.Ve
.PP
(note the tab indentation, oh joy ...)
.PP
(The trailing comma on the last element of an array or hash is enabled by a new
feature in Data::Dumper version 2.159, which was first released in Perl 5.24.
Using Data::Dumper::Concise with an older version of Data::Dumper will still
work, but you won't get those commas.)
.PP
If you need to get the underlying Dumper object just call \f(CW\*(C`DumperObject\*(C'\fR.
.PP
Also try out \f(CW\*(C`DumperF\*(C'\fR which takes a \f(CW\*(C`CodeRef\*(C'\fR as the first argument to
format the output.  For example:
.PP
.Vb 1
\&  use Data::Dumper::Concise;
\&
\&  warn DumperF { "result: $_[0] result2: $_[1]" } $foo, $bar;
.Ve
.PP
Which is the same as:
.PP
.Vb 1
\&  warn \*(Aqresult: \*(Aq . Dumper($foo) . \*(Aq result2: \*(Aq . Dumper($bar);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module always exports a single function, Dumper, which can be called
with an array of values to dump those values.
.PP
It exists, fundamentally, as a convenient way to reproduce a set of Dumper
options that we've found ourselves using across large numbers of applications,
primarily for debugging output.
.PP
The principle guiding theme is \*(L"all the concision you can get while still
having a useful dump and not doing anything cleverer than setting Data::Dumper
options\*(R" \- it's been pointed out to us that Data::Dump::Streamer can produce
shorter output with less lines of code. We know. This is simpler and we've
never seen it segfault. But for complex/weird structures, it generally rocks.
You should use it as well, when Concise is underkill. We do.
.PP
Why is deparsing on when the aim is concision? Because you often want to know
what subroutine refs you have when debugging and because if you were planning
to eval this back in you probably wanted to remove subrefs first and add them
back in a custom way anyway. Note that this \-does\- force using the pure perl
Dumper rather than the \s-1XS\s0 one, but I've never in my life seen Data::Dumper
show up in a profile so \*(L"who cares?\*(R".
.SH "BUT BUT BUT ..."
.IX Header "BUT BUT BUT ..."
Yes, we know. Consider this module in the ::Tiny spirit and feel free to
write a Data::Dumper::Concise::ButWithExtraTwiddlyBits if it makes you
happy. Then tell us so we can add it to the see also section.
.SH "SUGARY SYNTAX"
.IX Header "SUGARY SYNTAX"
This package also provides:
.PP
Data::Dumper::Concise::Sugar \- provides Dwarn and DwarnS convenience functions
.PP
Devel::Dwarn \- shorter form for Data::Dumper::Concise::Sugar
.SH "SEE ALSO"
.IX Header "SEE ALSO"
We use for some purposes, and dearly love, the following alternatives:
.PP
Data::Dump \- prettiness oriented but not amazingly configurable
.PP
Data::Dump::Streamer \- brilliant. beautiful. insane. extensive. excessive. try it.
.PP
\&\s-1JSON::XS\s0 \- no, really. If it's just plain data, \s-1JSON\s0 is a great option.
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
frew \- Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 the Data::Dumper::Concise \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
