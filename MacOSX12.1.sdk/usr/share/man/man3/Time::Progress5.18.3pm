.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::Progress 3"
.TH Time::Progress 3 "2013-07-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::Progress \- Elapsed and estimated finish time reporting.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Time::Progress;
\&  # autoflush to get \er working
\&  $| = 1;
\&  # get new \`timer\*(Aq
\&  my $p = new Time::Progress;
\&
\&  # restart and report progress
\&  $p\->restart;
\&  sleep 5; # or do some work here
\&  print $p\->report( "done %p elapsed: %L (%l sec), ETA %E (%e sec)\en", 50 );
\&
\&  # set min and max values
\&  $p\->attr( min => 2, max => 20 );
\&  # restart \`timer\*(Aq
\&  $p\->restart;
\&  my $c;
\&  for( $c = 2; $c <= 20; $c++ )
\&    {
\&    # print progress bar and percentage done
\&    print $p\->report( "eta: %E min, %40b %p\er", $c );
\&    sleep 1; # work...
\&    }
\&  # stop timer
\&  $p\->stop;
\&
\&  # report times
\&  print $p\->elapsed_str;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Shortest time interval that can be measured is 1 second. The available methods are:
.IP "new" 4
.IX Item "new"
.Vb 1
\&  my $p = new Time::Progress;
.Ve
.Sp
Returns new object of Time::Progress class and starts the timer. It
also sets min and max values to 0 and 100, so the next \fBreport\fR calls will
default to percents range.
.IP "restart" 4
.IX Item "restart"
restarts the timer and clears the stop mark. optionally \fIrestart()\fR may act also
as \fIattr()\fR for setting attributes:
.Sp
.Vb 1
\&  $p\->restart( min => 1, max => 5 );
.Ve
.Sp
is the same as:
.Sp
.Vb 2
\&  $p\->attr( min => 1, max => 5 );
\&  $p\->restart();
.Ve
.Sp
If you need to count things, you can set just 'max' attribute since 'min' is
already set to 0 when object is constructed by \fInew()\fR:
.Sp
.Vb 1
\&  $p\->restart( max => 42 );
.Ve
.IP "stop" 4
.IX Item "stop"
Sets the stop mark. This is only useful if you do some work, then finish,
then do some work that shouldn't be timed and finally report. Something
like:
.Sp
.Vb 6
\&  $p\->restart;
\&  # do some work here...
\&  $p\->stop;
\&  # do some post\-work here
\&  print $p\->report;
\&  # \`post\-work\*(Aq will not be timed
.Ve
.Sp
Stop is useless if you want to report time as soon as work is finished like:
.Sp
.Vb 3
\&  $p\->restart;
\&  # do some work here...
\&  print $p\->report;
.Ve
.IP "continue" 4
.IX Item "continue"
Clears the stop mark. (mostly useless, perhaps you need to \fBrestart\fR?)
.IP "attr" 4
.IX Item "attr"
Sets and returns internal values for attributes. Available attributes are:
.RS 4
.IP "min" 4
.IX Item "min"
This is the min value of the items that will follow (used to calculate
estimated finish time)
.IP "max" 4
.IX Item "max"
This is the max value of all items in the even (also used to calculate
estimated finish time)
.IP "format" 4
.IX Item "format"
This is the default \fBreport\fR format. It is used if \fBreport\fR is called
without parameters.
.RE
.RS 4
.Sp
\&\fBattr\fR returns array of the set attributes:
.Sp
.Vb 1
\&  my ( $new_min, $new_max ) = $p\->attr( min => 1, max => 5 );
.Ve
.Sp
If you want just to get values use undef:
.Sp
.Vb 1
\&  my $old_format = $p\->attr( format => undef );
.Ve
.Sp
This way of handling attributes is a bit heavy but saves a lot
of attribute handling functions. \fBattr\fR will complain if you pass odd number
of parameters.
.RE
.IP "report" 4
.IX Item "report"
\&\fBreport\fR is the most complex method in this package. :)
.Sp
expected arguments are:
.Sp
.Vb 1
\&  $p\->report( format, [current_item] );
.Ve
.Sp
\&\fIformat\fR is string that will be used for the result string. Recognized
special sequences are:
.RS 4
.ie n .IP "%l" 4
.el .IP "\f(CW%l\fR" 4
.IX Item "%l"
elapsed seconds
.ie n .IP "%L" 4
.el .IP "\f(CW%L\fR" 4
.IX Item "%L"
elapsed time in minutes in format \s-1MM:SS\s0
.ie n .IP "%e" 4
.el .IP "\f(CW%e\fR" 4
.IX Item "%e"
remaining seconds
.ie n .IP "%E" 4
.el .IP "\f(CW%E\fR" 4
.IX Item "%E"
remaining time in minutes in format \s-1MM:SS\s0
.ie n .IP "%p" 4
.el .IP "\f(CW%p\fR" 4
.IX Item "%p"
percentage done in format \s-1PPP\s0.P%
.ie n .IP "%f" 4
.el .IP "\f(CW%f\fR" 4
.IX Item "%f"
estimated finish time in format returned by \fB\f(BIlocaltime()\fB\fR
.ie n .IP "%b" 4
.el .IP "\f(CW%b\fR" 4
.IX Item "%b"
.PD 0
.ie n .IP "%B" 4
.el .IP "\f(CW%B\fR" 4
.IX Item "%B"
.PD
progress bar which looks like:
.Sp
.Vb 1
\&  ##############......................
.Ve
.Sp
\&\f(CW%b\fR takes optional width:
.Sp
.Vb 3
\&  %40b \-\- 40\-chars wide bar
\&  %9b  \-\-  9\-chars wide bar
\&  %b   \-\- 79\-chars wide bar (default)
.Ve
.RE
.RS 4
.Sp
Parameters can be ommited and then default format set with \fBattr\fR will
be used.
.Sp
Sequences 'L', 'l', 'E' and 'e' can have width also:
.Sp
.Vb 3
\&  %10e
\&  %5l
\&  ...
.Ve
.Sp
Estimate time calculations can be used only if min and max values are set
(see \fBattr\fR method) and current item is passed to \fBreport\fR! if you want
to use the default format but still have estimates use it like this:
.Sp
.Vb 1
\&  $p\->format( undef, 45 );
.Ve
.Sp
If you don't give current item (step) or didn't set proper min/max value
then all estimate sequences will have value `n/a'.
.Sp
You can freely mix reports during the same event.
.RE
.IP "elapsed" 4
.IX Item "elapsed"
.PD 0
.IP "estimate" 4
.IX Item "estimate"
.PD
helpers \*(-- return elapsed/estimate seconds.
.IP "elapsed_str" 4
.IX Item "elapsed_str"
.PD 0
.IP "estimate_str" 4
.IX Item "estimate_str"
.PD
helpers \*(-- return elapsed/estimated string in format:
.Sp
.Vb 2
\&  "elapsed time is MM:SS min.\en"
\&  "remaining time is MM:SS min.\en"
.Ve
.Sp
all helpers need one argument \*(-- current item.
.SH "FORMAT EXAMPLES"
.IX Header "FORMAT EXAMPLES"
.Vb 2
\&  # $c is current element (step) reached
\&  # for the examples: min = 0, max = 100, $c = 33.3
\&
\&  print $p\->report( "done %p elapsed: %L (%l sec), ETA %E (%e sec)\en", $c );
\&  # prints:
\&  # done  33.3% elapsed time   0:05 (5 sec), ETA   0:07 (7 sec)
\&
\&  print $p\->report( "%45b %p\er", $c );
\&  # prints:
\&  # ###############..............................  33.3%
\&
\&  print $p\->report( "done %p ETA %f\en", $c );
\&  # prints:
\&  # done  33.3% ETA Sun Oct 21 16:50:57 2001
.Ve
.SH "GITHUB REPOSITORY"
.IX Header "GITHUB REPOSITORY"
.Vb 1
\&  git@github.com:cade\-vs/perl\-time\-progress.git
\&  
\&  git clone git://github.com/cade\-vs/perl\-time\-progress.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&  Vladi Belperchinov\-Shabanski "Cade"
\&
\&  <cade@biscom.net> <cade@datamax.bg> <cade@cpan.org>
\&
\&  http://cade.datamax.bg
.Ve
