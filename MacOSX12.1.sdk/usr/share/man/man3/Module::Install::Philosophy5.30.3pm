.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::Philosophy 3"
.TH Module::Install::Philosophy 3 "2017-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Install::Philosophy \- The concepts behind Module::Install
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document describes the personal philosophy behind the creation of
\&\fBCPAN::MakeMaker\fR (the predecessor of \fBModule::Install\fR).  The views
expressed here belong to Brian Ingerson; if they are not of interest to
you, you can safely ignore this document.
.SH "I HAVE A DREAM"
.IX Header "I HAVE A DREAM"
I say to you today, my friends, that in spite of the difficulties and
frustrations of the moment, I still have a dream. It is a dream deeply
rooted in the Perl Module dream.
.PP
I have a dream that one day this community will rise up and live out the
true meaning of its creed: \*(L"We hold these truths to be self-evident:
that all Perl authors are created equal.\*(R"
.PP
I have a dream that one day even the state of the \f(CW\*(C`CGI::\*(C'\fR namespace, a
desert state, sweltering with the heat of injustice and oppression, will
be transformed into an oasis of freedom and justice.
.PP
I have a dream that my four modules will one day live in an archive
where they will not be judged by the number of their prerequisites but
by the content of their source code.
.PP
I have a dream today.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The above is obviously a mutation of the monumental speech by great
Martin Luther King (<http://web66.coled.umn.edu/new/MLK/MLK.html>).
While the contexts are vastly different, I feel that there are some
serious parallelisms.
.PP
The \s-1CPAN\s0 has become a place that is not free of injustice. This
situation has arisen not out of directed oppression, but from a failure
of our community to keep its tools sharp. It is the culmination of many
small decisions made in the name of practicality. This is a sad state
for an institution that was created to allow all interested people to
contribute equally to the best of their ability.
.PP
This assertion is rooted in my personal experience as an author. When I
created my first Perl module, Inline.pm, I knew that I had done
something important. But how was I to make a dent in vast Perl
community?
.PP
As a complete unknown in the Perl community, my voice did not travel
far. I repeatedly tried to get even an acknowledgment from the gurus
familiar with \s-1XS.\s0 No success. I resorted to sending messages with
ridiculous subjects to \f(CW\*(C`modules@perl.org\*(C'\fR. 
(<http://www.xray.mpe.mpg.de/mailing\-lists/modules/2000\-08/msg00078.html>) 
No response. Through sheer determination and shameless self-promotion I
eventually got the word out, and I hope the world is a slightly better
place for it.
.PP
Since then, Inline has won awards and I have had the privilege to meet almost
all of Perl's finest. But I still remember the pain of starting out, and
want to help invite more people into this wonderful world.
.PP
One thing I have learned from experience is that the Perl community (and
throw in the Python and Ruby people as well) is a small drop in the vast
ocean of programming. It's a giant pot of Java out there; and a sea of
C. Perl may not be the biggest fish, but with some care and cunning we
could become a much bigger school.
.PP
These are the current problems that I see with \s-1CPAN\s0 and the core modules:
.IP "\(bu" 4
New Modules don't help Older Perls
.Sp
If I were to guess what percent of all Perl5 installations were at the
current release level (5.8.0 in October 2002) I would say 3\-5%. That may
even be generous. I'd say that over 40% of installations might still be
at 5.005 or earlier.
.Sp
The biggest problem with adding a module to the core is that it only
helps a small subset of Perl users for a long long time. Worse yet, a
good module author will still probably avoid using the core additions as
prerequisites, because they want their new module to work as well on
5.005 as on 5.8.
.Sp
CPAN::MakeMaker should be able to help in this regard. For example,
instead of putting Inline.pm into the core for 5.9, I can now
effectively get it into the core for every version of Perl that
Inline supports.
.IP "\(bu" 4
Author Exclusiveness
.Sp
Not just anybody can get a module into the core. It seems you have to
know people in high places. If I were a brilliant new talent with a
great new module, it would have a harder time getting the ear of the
pumpking, then if I were, say, Damian Conway. In fact, I probably
wouldn't even know where to start.
.IP "\(bu" 4
Reduced Competition
.Sp
One comment I've heard from some very good Perl programmers is
\&\*(L"Everything important has already been done\*(R". Their feeling is that
even though a module is suboptimal, it would be a waste of time to
write a competing module. Who would use it instead of the one already
in the core?
.Sp
When I write a competing module, I know that I have to make it at least
twice as good as the existing one to even get noticed. That's not a bad
thing, but should everybody be forced into that situation?
.Sp
For example, let's say that you have created a really useful \s-1CGI\s0 script.
Let's also say that it makes use of your own \fBCGI::Special\fR module,
because \fB\s-1CGI\s0.pm\fR doesn't meet your needs. Even though your script might be
generally useful and worth sharing, the fact that it requires a
non-standard module can only negatively affect its acceptance. Trying to
get general acceptance for the superior \fBCGI::Special\fR module will be
harder still.
.Sp
Core modules are assumed by the general public to be \*(L"Best of Breed\*(R".
While this may be true for some modules at some point in time, it keeps
talented people from attempting to \*(L"breed\*(R" something better.
.IP "\(bu" 4
Core Bloat
.Sp
Every time we add a module to the core it gets bigger and bigger. And we
can't ever remove modules from the core, once they've been added.
.Sp
If I had my druthers, we'd remove all modules from the core that weren't
necessary for either running Perl or installing modules. Of course, we'd
need to set things up so that installing modules was so easy, that it
could be done on the fly if necessary. Is this easily accomplishable?
Nope. Is it impossible? Nope. We have the best language in the world to
help us do it!
.IP "\(bu" 4
Maintenance Bitrot
.Sp
Believe it or not, Perl authors can sometimes acquire a \*(L"Life Beyond
Perl\*(R". They get families or new hobbies or even hit by a bus. (This
would be a \*(L"Death Beyond Perl\*(R".) The fact is, that once somebody writes
a piece of code and shares it with the world, they are expected to
maintain it for all time.
.Sp
That is being generous. There are others that think that once their
module has become popular or made it into the core, they don't need to
keep fixing and improving it. I have personally been guilty of this sin.
.Sp
And then there's the Damian Conway Effect. This plagues the exceptional
authors who are so innovative and prolific they simply don't have time
to maintain everything they have written.
.PP
I initially formalized these opinions at the \s-1YAPC\s0 (Yet Another Perl
Conference) in June 2001. Since then I have been trying to think of
technological solutions to fix these social problems.
.PP
One idea was dubbed \s-1NAPC. NAPC\s0 is \s-1CPAN\s0 backwards. It is a large system
of precompiled modules that can be installed on the fly, with the goal
of reducing the number of modules in the core. \s-1NAPC\s0 hasn't got started
yet. I'd still like to do it someday, but it's a big problem with a lot
of issues.
.PP
\&\fBCPAN::MakeMaker\fR (and now \fBModule::Install\fR) on the other hand, is
simple and ultimately flexible.  It should work with all of the existing
\&\s-1CPAN\s0 processes without requiring any changes from them. And new features
can be continuously added. Even though it doesn't scratch all of my
philosophical \s-1CPAN\s0 itches, it's a good start.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
This is all just food for thought. Take it with a pinch of salt.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Ingerson <INGY@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002. Brian Ingerson.
.PP
This document is free documentation; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
