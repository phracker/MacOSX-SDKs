.TH "MPSMatrixSolveLU" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixSolveLU
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixSolve\&.h>\fP
.PP
Inherits \fBMPSMatrixBinaryKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:transpose:order:numberOfRightHandSides:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework\&.
.PP
\fBA\fP kernel for computing the solution of a linear system of equations using the LU factorization resulting from a \fBMPSMatrixDecompositionLU\fP kernel\&.
.PP
\fBA\fP \fBMPSMatrixSolveLU\fP finds the solution matrix to the system: 
.PP
.nf
            op(A) * X = B

        Where op(A) is A**T or A.  B is the array of right hand sides for which
        the equations are to be solved.  X is the resulting matrix of solutions.
.fi
.PP
 
.SH "Method Documentation"
.PP 
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSMatrix\fP *__nonnull) sourceMatrix(\fBMPSMatrix\fP *__nonnull) rightHandSideMatrix(\fBMPSMatrix\fP *__nonnull) pivotIndices(\fBMPSMatrix\fP *__nonnull) solutionMatrix"
Encode a \fBMPSMatrixSolveLU\fP kernel into a command Buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter
.br
\fIsourceMatrix\fP \fBA\fP valid \fBMPSMatrix\fP containing the source matrix in factored form as returned by a previous successful execution of a \fBMPSMatrixDecompositionLU\fP kernel\&.
.br
\fIrightHandSideMatrix\fP \fBA\fP valid \fBMPSMatrix\fP containing the right hand side values\&.
.br
\fIpivotIndices\fP \fBA\fP valid \fBMPSMatrix\fP which contains the pivot indices as returned by a previous successful execution of a \fBMPSMatrixDecompositionLU\fP kernel\&.
.br
\fIsolutionMatrix\fP \fBA\fP valid \fBMPSMatrix\fP to contain the result\&.
.RE
.PP
This function encodes the \fBMPSMatrixSolveLU\fP object to a valid command buffer\&. sourceMatrix should contain the lower and upper triangular factors of \fBA\fP as results from a previous execution of \fBMPSMatrixDecompositionLU\fP\&.
.PP
pivotIndices is an array of pivots resulting from a previous execution of \fBMPSMatrixDecompositionLU\fP\&.
.PP
rightHandSideMatrix and solutionMatrix must be large enough to hold a matrix of size order x numberOfRightHandSides starting at secondarySourceMatrixOrigin and resultMatrixOrigin respectively\&.
.PP
sourceMatrix must be at least size order x order starting at primarySourceMatrixOrigin\&. 
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(BOOL) transpose(NSUInteger) order(NSUInteger) numberOfRightHandSides"
Initialize an \fBMPSMatrixSolveLU\fP object on a device
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device on which the kernel will execute\&.
.br
\fItranspose\fP \fBA\fP boolean value which indicates if the source matrix should be used in transposed form\&.
.br
\fIorder\fP The order of the source matrix and the number of rows in the solution and right hand side matrices\&.
.br
\fInumberOfRightHandSides\fP The number of columns in the solution and right hand side matrices\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSMatrixSolveLU\fP object or nil, if failure\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
