.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "I18N::Langinfo 3pm"
.TH I18N::Langinfo 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
I18N::Langinfo \- query locale information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use I18N::Langinfo;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fIlanginfo()\fR function queries various locale information that can be
used to localize output and user interfaces.  The \fIlanginfo()\fR requires
one numeric argument that identifies the locale constant to query:
if no argument is supplied, \f(CW$_\fR is used.  The numeric constants
appropriate to be used as arguments are exportable from I18N::Langinfo.
.PP
The following example will import the \fIlanginfo()\fR function itself and
three constants to be used as arguments to \fIlanginfo()\fR: a constant for
the abbreviated first day of the week (the numbering starts from
Sunday = 1) and two more constants for the affirmative and negative
answers for a yes/no question in the current locale.
.PP
.Vb 1
\&    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);
\&
\&    my ($abday_1, $yesstr, $nostr) = map { langinfo($_) } (ABDAY_1, YESSTR, NOSTR);
\&
\&    print "$abday_1? [$yesstr/$nostr] ";
.Ve
.PP
In other words, in the \*(L"C\*(R" (or English) locale the above will probably
print something like:
.PP
.Vb 1
\&    Sun? [yes/no]
.Ve
.PP
but under a French locale
.PP
.Vb 1
\&    dim? [oui/non]
.Ve
.PP
The usually available constants are
.PP
.Vb 6
\&    ABDAY_1 ABDAY_2 ABDAY_3 ABDAY_4 ABDAY_5 ABDAY_6 ABDAY_7
\&    ABMON_1 ABMON_2 ABMON_3 ABMON_4 ABMON_5 ABMON_6
\&    ABMON_7 ABMON_8 ABMON_9 ABMON_10 ABMON_11 ABMON_12
\&    DAY_1 DAY_2 DAY_3 DAY_4 DAY_5 DAY_6 DAY_7
\&    MON_1 MON_2 MON_3 MON_4 MON_5 MON_6
\&    MON_7 MON_8 MON_9 MON_10 MON_11 MON_12
.Ve
.PP
for abbreviated and full length days of the week and months of the year,
.PP
.Vb 1
\&    D_T_FMT D_FMT T_FMT
.Ve
.PP
for the date-time, date, and time formats used by the \fIstrftime()\fR function
(see \s-1POSIX\s0)
.PP
.Vb 1
\&    AM_STR PM_STR T_FMT_AMPM
.Ve
.PP
for the locales for which it makes sense to have ante meridiem and post
meridiem time formats,
.PP
.Vb 1
\&    CODESET CRNCYSTR RADIXCHAR
.Ve
.PP
for the character code set being used (such as \*(L"\s-1ISO8859\-1\*(R", \s0\*(L"cp850\*(R",
\&\*(L"koi8\-r\*(R", \*(L"sjis\*(R", \*(L"utf8\*(R", etc.), for the currency string, for the
radix character used between the integer and the fractional part
of decimal numbers (yes, this is redundant with \fIPOSIX::localeconv()\fR)
.PP
.Vb 1
\&    YESSTR YESEXPR NOSTR NOEXPR
.Ve
.PP
for the affirmative and negative responses and expressions, and
.PP
.Vb 1
\&    ERA ERA_D_FMT ERA_D_T_FMT ERA_T_FMT
.Ve
.PP
for the Japanese Emperor eras (naturally only defined under Japanese locales).
.PP
See your \fIlanginfo\fR\|(3) for more information about the available
constants.  (Often this means having to look directly at the
\&\fIlanginfo.h\fR C header file.)
.PP
Note that unfortunately none of the above constants are guaranteed
to be available on a particular platform.  To be on the safe side
you can wrap the import in an eval like this:
.PP
.Vb 6
\&    eval {
\&        require I18N::Langinfo;
\&        I18N::Langinfo\->import(qw(langinfo CODESET));
\&        $codeset = langinfo(CODESET()); # note the ()
\&    };
\&    if (!$@) { ... failed ... }
.Ve
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
By default only the \f(CW\*(C`langinfo()\*(C'\fR function is exported.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perllocale, \*(L"localeconv\*(R" in \s-1POSIX\s0, \*(L"setlocale\*(R" in \s-1POSIX\s0, \fInl_langinfo\fR\|(3).
.PP
The \fIlanginfo()\fR is just a wrapper for the C \fInl_langinfo()\fR interface.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi, <jhi@hut.fi>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2001 by Jarkko Hietaniemi
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
