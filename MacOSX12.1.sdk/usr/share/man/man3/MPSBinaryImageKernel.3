.TH "MPSBinaryImageKernel" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSBinaryImageKernel
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSImageKernel\&.h>\fP
.PP
Inherits \fBMPSKernel\fP\&.
.PP
Inherited by \fBMPSImageArithmetic\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBencodeToCommandBuffer:primaryTexture:inPlaceSecondaryTexture:fallbackCopyAllocator:\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBencodeToCommandBuffer:inPlacePrimaryTexture:secondaryTexture:fallbackCopyAllocator:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:\fP"
.br
.ti -1c
.RI "(\fBMPSRegion\fP) \- \fBprimarySourceRegionForDestinationSize:\fP"
.br
.ti -1c
.RI "(\fBMPSRegion\fP) \- \fBsecondarySourceRegionForDestinationSize:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMPSOffset\fP \fBprimaryOffset\fP"
.br
.ti -1c
.RI "\fBMPSOffset\fP \fBsecondaryOffset\fP"
.br
.ti -1c
.RI "\fBMPSImageEdgeMode\fP \fBprimaryEdgeMode\fP"
.br
.ti -1c
.RI "\fBMPSImageEdgeMode\fP \fBsecondaryEdgeMode\fP"
.br
.ti -1c
.RI "MTLRegion \fBclipRect\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  \fBA\fP \fBMPSBinaryImageKernel\fP consumes two MTLTextures and produces one MTLTexture\&. 
.SH "Method Documentation"
.PP 
.SS "\- (BOOL) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(__nonnull id< MTLTexture > __strong *__nonnull) inPlacePrimaryTexture(nonnull id< MTLTexture >) secondaryTexture(nullable \fBMPSCopyAllocator\fP) copyAllocator"
Attempt to apply a \fBMPSKernel\fP to a texture in place\&.  This method attempts to apply the \fBMPSKernel\fP in place on a texture\&. 
.PP
.nf
In-place operation means that the same texture is used both to hold the input
image and the results\&. Operating in-place can be an excellent way to reduce
resource utilization, and save time and energy\&. While simple Metal kernels can
not operate in place because textures can not be readable and writable at the
same time, some MPSKernels can operate in place because they use
multi-pass algorithms\&. Whether a MPSKernel can operate in-place can
depend on current hardware, operating system revision and the parameters
and properties passed to it\&. You should never assume that a MPSKernel will
continue to work in place, even if you have observed it doing so before\&.

.fi
.PP
 If the operation succeeds in-place, YES is returned\&. If the in-place operation fails and no copyAllocator is provided, then NO is returned\&. In neither case is the pointer held at *texture modified\&.
.PP
Failure during in-place operation is common\&. You may find it simplifies your code to provide a copyAllocator\&. When an in-place filter fails, your copyAllocator will be invoked to create a new texture in which to write the results, allowing the filter to proceed reliably out-of-place\&. The original texture will be released, replaced with a pointer to the new texture and YES will be returned\&. If the allocator returns an invalid texture, it is released, *texture remains unmodified and NO is returned\&. Please see the MPSCopyAllocator definition for a sample allocator implementation\&.
.PP
Note: Image filters that look at neighboring pixel values may actually consume more memory when operating in place than out of place\&. Many such operations are tiled internally to save intermediate texture storage, but can not tile when operating in place\&. The memory savings for tiling is however very short term, typically the lifetime of the MTLCommandBuffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIinPlacePrimaryTexture\fP \fBA\fP pointer to a valid MTLTexture containing secondary image\&. On success, the image contents and possibly texture itself will be replaced with the result image\&. 
.br
\fIsecondaryTexture\fP \fBA\fP pointer to a valid MTLTexture containing the primary source image\&. It will not be overwritten\&. 
.br
\fIcopyAllocator\fP An optional block to allocate a new texture to hold the results, in case in-place operation is not possible\&. The allocator may use a different MTLPixelFormat or size than the original texture\&. You may enqueue operations on the provided MTLCommandBuffer using the provided MTLComputeCommandEncoder to initialize the texture contents\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success, YES is returned\&. The texture may have been replaced with a new texture if a copyAllocator was provided\&. On failure, NO is returned\&. The texture is unmodified\&. 
.RE
.PP

.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) primaryImage(\fBMPSImage\fP *__nonnull) secondaryImage(\fBMPSImage\fP *__nonnull) destinationImage"
Encode a \fBMPSKernel\fP into a command Buffer\&. The operation shall proceed out-of-place\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIprimaryImage\fP \fBA\fP valid \fBMPSImage\fP containing the primary source image\&. 
.br
\fIsecondaryImage\fP \fBA\fP valid \fBMPSImage\fP containing the secondary source image\&. 
.br
\fIdestinationImage\fP \fBA\fP valid \fBMPSImage\fP to be overwritten by result image\&. destinationImage may not alias the source images\&. 
.RE
.PP

.SS "\- (BOOL) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(nonnull id< MTLTexture >) primaryTexture(__nonnull id< MTLTexture > __strong *__nonnull) inPlaceSecondaryTexture(nullable \fBMPSCopyAllocator\fP) copyAllocator"
This method attempts to apply the \fBMPSKernel\fP in place on a texture\&. 
.PP
.nf
    In-place operation means that the same texture is used both to hold the input
    image and the results. Operating in-place can be an excellent way to reduce
    resource utilization, and save time and energy. While simple Metal kernels can
    not operate in place because textures can not be readable and writable at the
    same time, some MPSKernels can operate in place because they use
    multi-pass algorithms. Whether a MPSKernel can operate in-place can
    depend on current hardware, operating system revision and the parameters
    and properties passed to it. You should never assume that a MPSKernel will
    continue to work in place, even if you have observed it doing so before.

.fi
.PP
.PP
If the operation succeeds in-place, YES is returned\&. If the in-place operation fails and no copyAllocator is provided, then NO is returned\&. In neither case is the pointer held at *texture modified\&.
.PP
Failure during in-place operation is common\&. You may find it simplifies your code to provide a copyAllocator\&. When an in-place filter fails, your copyAllocator will be invoked to create a new texture in which to write the results, allowing the filter to proceed reliably out-of-place\&. The original texture will be released, replaced with a pointer to the new texture and YES will be returned\&. If the allocator returns an invalid texture, it is released, *texture remains unmodified and NO is returned\&. Please see the MPSCopyAllocator definition for a sample allocator implementation\&.
.PP
Note: Image filters that look at neighboring pixel values may actually consume more memory when operating in place than out of place\&. Many such operations are tiled internally to save intermediate texture storage, but can not tile when operating in place\&. The memory savings for tiling is however very short term, typically the lifetime of the MTLCommandBuffer\&.
.PP
Attempt to apply a \fBMPSKernel\fP to a texture in place\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIprimaryTexture\fP \fBA\fP pointer to a valid MTLTexture containing the primary source image\&. It will not be overwritten\&. 
.br
\fIinPlaceSecondaryTexture\fP \fBA\fP pointer to a valid MTLTexture containing secondary image\&. On success, the image contents and possibly texture itself will be replaced with the result image\&. 
.br
\fIcopyAllocator\fP An optional block to allocate a new texture to hold the results, in case in-place operation is not possible\&. The allocator may use a different MTLPixelFormat or size than the original texture\&. You may enqueue operations on the provided MTLCommandBuffer using the provided MTLComputeCommandEncoder to initialize the texture contents\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success, YES is returned\&. The texture may have been replaced with a new texture if a copyAllocator was provided\&. On failure, NO is returned\&. The texture is unmodified\&. 
.RE
.PP

.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(nonnull id< MTLTexture >) primaryTexture(nonnull id< MTLTexture >) secondaryTexture(nonnull id< MTLTexture >) destinationTexture"
Encode a \fBMPSKernel\fP into a command Buffer\&. The operation shall proceed out-of-place\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded filter 
.br
\fIprimaryTexture\fP \fBA\fP valid MTLTexture containing the primary source image\&. 
.br
\fIsecondaryTexture\fP \fBA\fP valid MTLTexture containing the secondary source image\&. 
.br
\fIdestinationTexture\fP \fBA\fP valid MTLTexture to be overwritten by result image\&. destinationTexture may not alias the source textures\&. 
.RE
.PP

.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use initWithCoder:device instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSKernel\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.PP
Reimplemented in \fBMPSImageArithmetic\fP, \fBMPSImageAdd\fP, \fBMPSImageSubtract\fP, \fBMPSImageMultiply\fP, and \fBMPSImageDivide\fP\&.
.SS "\- (\fBMPSRegion\fP) primarySourceRegionForDestinationSize: (MTLSize) destinationSize"
primarySourceRegionForDestinationSize: is used to determine which region of the primaryTexture will be read by encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture (and in-place variants) when the filter runs\&. This information may be needed if the primary source image is broken into multiple textures\&. The size of the full (untiled) destination image is provided\&. The region of the full (untiled) source image that will be read is returned\&. You can then piece together an appropriate texture containing that information for use in your tiled context\&.
.PP
The function will consult the \fBMPSBinaryImageKernel\fP primaryOffset and clipRect parameters, to determine the full region read by the function\&. Other parameters such as kernelHeight and kernelWidth will be consulted as necessary\&. All properties should be set to intended values prior to calling primarySourceRegionForDestinationSize:\&. 
.PP
.nf
Caution: This function operates using global image coordinates, but
-encodeToCommandBuffer:... uses coordinates local to the source and
destination image textures. Consequently, the primaryOffset and clipRect
attached to this object will need to be updated using a global to
local coordinate transform before -encodeToCommandBuffer:... is
called.

.fi
.PP
.PP
Determine the region of the source texture that will be read for a encode operation 
.PP
\fBParameters:\fP
.RS 4
\fIdestinationSize\fP The size of the full virtual destination image\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The area in the virtual source image that will be read\&. 
.RE
.PP

.SS "\- (\fBMPSRegion\fP) secondarySourceRegionForDestinationSize: (MTLSize) destinationSize"
secondarySourceRegionForDestinationSize: is used to determine which region of the sourceTexture will be read by encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture (and in-place variants) when the filter runs\&. This information may be needed if the secondary source image is broken into multiple textures\&. The size of the full (untiled) destination image is provided\&. The region of the full (untiled) secondary source image that will be read is returned\&. You can then piece together an appropriate texture containing that information for use in your tiled context\&.
.PP
The function will consult the \fBMPSBinaryImageKernel\fP secondaryOffset and clipRect parameters, to determine the full region read by the function\&. Other parameters such as kernelHeight and kernelWidth will be consulted as necessary\&. All properties should be set to intended values prior to calling secondarySourceRegionForDestinationSize:\&. 
.PP
.nf
Caution: This function operates using global image coordinates, but
-encodeToCommandBuffer:... uses coordinates local to the source and
destination image textures. Consequently, the secondaryOffset and clipRect
attached to this object will need to be updated using a global to
local coordinate transform before -encodeToCommandBuffer:... is
called.

.fi
.PP
.PP
Determine the region of the source texture that will be read for a encode operation 
.PP
\fBParameters:\fP
.RS 4
\fIdestinationSize\fP The size of the full virtual destination image\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The area in the virtual source image that will be read\&. 
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\- clipRect\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
An optional clip rectangle to use when writing data\&. Only the pixels in the rectangle will be overwritten\&.  \fBA\fP MTLRegion that indicates which part of the destination to overwrite\&. If the clipRect does not lie completely within the destination image, the intersection between clip rectangle and destination bounds is used\&. Default: MPSRectNoClip (\fBMPSKernel::MPSRectNoClip\fP) indicating the entire image\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_clipRect 
.SS "\- primaryEdgeMode\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The MPSImageEdgeMode to use when texture reads stray off the edge of the primary source image  Most \fBMPSKernel\fP objects can read off the edge of a source image\&. This can happen because of a negative offset property, because the offset + clipRect\&.size is larger than the source image or because the filter looks at neighboring pixels, such as a Convolution or morphology filter\&. Default: usually MPSImageEdgeModeZero\&. (Some \fBMPSKernel\fP types default to MPSImageEdgeModeClamp, because MPSImageEdgeModeZero is either not supported or would produce unexpected results\&.)
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_edgemode 
.SS "\- primaryOffset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The position of the destination clip rectangle origin relative to the primary source buffer\&.  The offset is defined to be the position of clipRect\&.origin in source coordinates\&. Default: {0,0,0}, indicating that the top left corners of the clipRect and primary source image align\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_mpsoffset 
.SS "\- secondaryEdgeMode\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The MPSImageEdgeMode to use when texture reads stray off the edge of the secondary source image  Most \fBMPSKernel\fP objects can read off the edge of a source image\&. This can happen because of a negative offset property, because the offset + clipRect\&.size is larger than the source image or because the filter looks at neighboring pixels, such as a Convolution or morphology filter\&. Default: usually MPSImageEdgeModeZero\&. (Some \fBMPSKernel\fP types default to MPSImageEdgeModeClamp, because MPSImageEdgeModeZero is either not supported or would produce unexpected results\&.)
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_edgemode 
.SS "\- secondaryOffset\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The position of the destination clip rectangle origin relative to the secondary source buffer\&.  The offset is defined to be the position of clipRect\&.origin in source coordinates\&. Default: {0,0,0}, indicating that the top left corners of the clipRect and secondary source image align\&.
.PP
See Also: \fBMetalPerformanceShaders\&.h\fP subsubsection_mpsoffset 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
