'\" t
.\"     Title: glVertexAttrib
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 03/08/2011
.\"    Manual: OpenGL 3.3
.\"    Source: OpenGL 3.3
.\"  Language: English
.\"
.TH "GLVERTEXATTRIB" "3G" "03/08/2011" "OpenGL 3.3" "OpenGL 3\&.3"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glVertexAttrib \- Specifies the value of a generic vertex attribute
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttrib1f('u
.BI "void glVertexAttrib1f(GLuint\ " "index" ", GLfloat\ " "v0" ");"
.HP \w'void\ glVertexAttrib1s('u
.BI "void glVertexAttrib1s(GLuint\ " "index" ", GLshort\ " "v0" ");"
.HP \w'void\ glVertexAttrib1d('u
.BI "void glVertexAttrib1d(GLuint\ " "index" ", GLdouble\ " "v0" ");"
.HP \w'void\ glVertexAttribI1i('u
.BI "void glVertexAttribI1i(GLuint\ " "index" ", GLint\ " "v0" ");"
.HP \w'void\ glVertexAttribI1ui('u
.BI "void glVertexAttribI1ui(GLuint\ " "index" ", GLuint\ " "v0" ");"
.HP \w'void\ glVertexAttrib2f('u
.BI "void glVertexAttrib2f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ");"
.HP \w'void\ glVertexAttrib2s('u
.BI "void glVertexAttrib2s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ");"
.HP \w'void\ glVertexAttrib2d('u
.BI "void glVertexAttrib2d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ");"
.HP \w'void\ glVertexAttribI2i('u
.BI "void glVertexAttribI2i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ");"
.HP \w'void\ glVertexAttribI2ui('u
.BI "void glVertexAttribI2ui(GLuint\ " "index" ", GLuint\ " "v0" ", GLuint\ " "v1" ");"
.HP \w'void\ glVertexAttrib3f('u
.BI "void glVertexAttrib3f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ", GLfloat\ " "v2" ");"
.HP \w'void\ glVertexAttrib3s('u
.BI "void glVertexAttrib3s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ", GLshort\ " "v2" ");"
.HP \w'void\ glVertexAttrib3d('u
.BI "void glVertexAttrib3d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ");"
.HP \w'void\ glVertexAttribI3i('u
.BI "void glVertexAttribI3i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ", GLint\ " "v2" ");"
.HP \w'void\ glVertexAttribI3ui('u
.BI "void glVertexAttribI3ui(GLuint\ " "index" ", GLoint\ " "v0" ", GLoint\ " "v1" ", GLoint\ " "v2" ");"
.HP \w'void\ glVertexAttrib4f('u
.BI "void glVertexAttrib4f(GLuint\ " "index" ", GLfloat\ " "v0" ", GLfloat\ " "v1" ", GLfloat\ " "v2" ", GLfloat\ " "v3" ");"
.HP \w'void\ glVertexAttrib4s('u
.BI "void glVertexAttrib4s(GLuint\ " "index" ", GLshort\ " "v0" ", GLshort\ " "v1" ", GLshort\ " "v2" ", GLshort\ " "v3" ");"
.HP \w'void\ glVertexAttrib4d('u
.BI "void glVertexAttrib4d(GLuint\ " "index" ", GLdouble\ " "v0" ", GLdouble\ " "v1" ", GLdouble\ " "v2" ", GLdouble\ " "v3" ");"
.HP \w'void\ glVertexAttrib4Nub('u
.BI "void glVertexAttrib4Nub(GLuint\ " "index" ", GLubyte\ " "v0" ", GLubyte\ " "v1" ", GLubyte\ " "v2" ", GLubyte\ " "v3" ");"
.HP \w'void\ glVertexAttribI4i('u
.BI "void glVertexAttribI4i(GLuint\ " "index" ", GLint\ " "v0" ", GLint\ " "v1" ", GLint\ " "v2" ", GLint\ " "v3" ");"
.HP \w'void\ glVertexAttribI4ui('u
.BI "void glVertexAttribI4ui(GLuint\ " "index" ", GLuint\ " "v0" ", GLuint\ " "v1" ", GLuint\ " "v2" ", GLuint\ " "v3" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies the index of the generic vertex attribute to be modified\&.
.RE
.PP
\fIv0\fR, \fIv1\fR, \fIv2\fR, \fIv3\fR
.RS 4
Specifies the new values to be used for the specified vertex attribute\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttrib1fv('u
.BI "void glVertexAttrib1fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib1sv('u
.BI "void glVertexAttrib1sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib1dv('u
.BI "void glVertexAttrib1dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI1iv('u
.BI "void glVertexAttribI1iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI1uiv('u
.BI "void glVertexAttribI1uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib2fv('u
.BI "void glVertexAttrib2fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib2sv('u
.BI "void glVertexAttrib2sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib2dv('u
.BI "void glVertexAttrib2dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI2iv('u
.BI "void glVertexAttribI2iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI2uiv('u
.BI "void glVertexAttribI2uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib3fv('u
.BI "void glVertexAttrib3fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib3sv('u
.BI "void glVertexAttrib3sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib3dv('u
.BI "void glVertexAttrib3dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttribI3iv('u
.BI "void glVertexAttribI3iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI3uiv('u
.BI "void glVertexAttribI3uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4fv('u
.BI "void glVertexAttrib4fv(GLuint\ " "index" ", const\ GLfloat\ *" "v" ");"
.HP \w'void\ glVertexAttrib4sv('u
.BI "void glVertexAttrib4sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4dv('u
.BI "void glVertexAttrib4dv(GLuint\ " "index" ", const\ GLdouble\ *" "v" ");"
.HP \w'void\ glVertexAttrib4iv('u
.BI "void glVertexAttrib4iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4bv('u
.BI "void glVertexAttrib4bv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4ubv('u
.BI "void glVertexAttrib4ubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4usv('u
.BI "void glVertexAttrib4usv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4uiv('u
.BI "void glVertexAttrib4uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nbv('u
.BI "void glVertexAttrib4Nbv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nsv('u
.BI "void glVertexAttrib4Nsv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Niv('u
.BI "void glVertexAttrib4Niv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nubv('u
.BI "void glVertexAttrib4Nubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nusv('u
.BI "void glVertexAttrib4Nusv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttrib4Nuiv('u
.BI "void glVertexAttrib4Nuiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.HP \w'void\ glVertexAttribI4bv('u
.BI "void glVertexAttribI4bv(GLuint\ " "index" ", const\ GLbyte\ *" "v" ");"
.HP \w'void\ glVertexAttribI4ubv('u
.BI "void glVertexAttribI4ubv(GLuint\ " "index" ", const\ GLubyte\ *" "v" ");"
.HP \w'void\ glVertexAttribI4sv('u
.BI "void glVertexAttribI4sv(GLuint\ " "index" ", const\ GLshort\ *" "v" ");"
.HP \w'void\ glVertexAttribI4usv('u
.BI "void glVertexAttribI4usv(GLuint\ " "index" ", const\ GLushort\ *" "v" ");"
.HP \w'void\ glVertexAttribI4iv('u
.BI "void glVertexAttribI4iv(GLuint\ " "index" ", const\ GLint\ *" "v" ");"
.HP \w'void\ glVertexAttribI4uiv('u
.BI "void glVertexAttribI4uiv(GLuint\ " "index" ", const\ GLuint\ *" "v" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies the index of the generic vertex attribute to be modified\&.
.RE
.PP
\fIv\fR
.RS 4
Specifies a pointer to an array of values to be used for the generic vertex attribute\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glVertexAttribP1ui('u
.BI "void glVertexAttribP1ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP2ui('u
.BI "void glVertexAttribP2ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP3ui('u
.BI "void glVertexAttribP3ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.HP \w'void\ glVertexAttribP4ui('u
.BI "void glVertexAttribP4ui(GLuint\ " "index" ", GLenum\ " "type" ", GLboolean\ " "normalized" ", GLuint\ " "value" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies the index of the generic vertex attribute to be modified\&.
.RE
.PP
\fItype\fR
.RS 4
Type of packing used on the data\&. This parameter must be
\fBGL_INT_10_10_10_2\fR
or
\fBGL_UNSIGNED_INT_10_10_10_2\fR
to specify signed or unsigned data, respectively\&.
.RE
.PP
\fInormalized\fR
.RS 4
If
\fBGL_TRUE\fR, then the values are to be converted to floating point values by normalizing\&. Otherwise, they are converted directly to floating point values\&.
.RE
.PP
\fIvalue\fR
.RS 4
Specifies the new packed value to be used for the specified vertex attribute\&.
.RE
.SH "DESCRIPTION"
.PP
OpenGL defines a number of standard vertex attributes that applications can modify with standard API entry points (color, normal, texture coordinates, etc\&.)\&. The
\fBglVertexAttrib\fR
family of entry points allows an application to pass generic vertex attributes in numbered locations\&.
.PP
Generic attributes are defined as four\-component values that are organized into an array\&. The first entry of this array is numbered 0, and the size of the array is specified by the implementation\-dependent constant
\fBGL_MAX_VERTEX_ATTRIBS\fR\&. Individual elements of this array can be modified with a
\fBglVertexAttrib\fR
call that specifies the index of the element to be modified and a value for that element\&.
.PP
These commands can be used to specify one, two, three, or all four components of the generic vertex attribute specified by
\fIindex\fR\&. A
\fB1\fR
in the name of the command indicates that only one value is passed, and it will be used to modify the first component of the generic vertex attribute\&. The second and third components will be set to 0, and the fourth component will be set to 1\&. Similarly, a
\fB2\fR
in the name of the command indicates that values are provided for the first two components, the third component will be set to 0, and the fourth component will be set to 1\&. A
\fB3\fR
in the name of the command indicates that values are provided for the first three components and the fourth component will be set to 1, whereas a
\fB4\fR
in the name indicates that values are provided for all four components\&.
.PP
The letters
\fBs\fR,
\fBf\fR,
\fBi\fR,
\fBd\fR,
\fBub\fR,
\fBus\fR, and
\fBui\fR
indicate whether the arguments are of type short, float, int, double, unsigned byte, unsigned short, or unsigned int\&. When
\fBv\fR
is appended to the name, the commands can take a pointer to an array of such values\&.
.PP
Additional capitalized letters can indicate further alterations to the default behavior of the glVertexAttrib function:
.PP
The commands containing
\fBN\fR
indicate that the arguments will be passed as fixed\-point values that are scaled to a normalized range according to the component conversion rules defined by the OpenGL specification\&. Signed values are understood to represent fixed\-point values in the range [\-1,1], and unsigned values are understood to represent fixed\-point values in the range [0,1]\&.
.PP
The commands containing
\fBI\fR
indicate that the arguments are extended to full signed or unsigned integers\&.
.PP
The commands containing
\fBP\fR
indicate that the arguments are stored as packed components within a larger natural type\&.
.PP
OpenGL Shading Language attribute variables are allowed to be of type mat2, mat3, or mat4\&. Attributes of these types may be loaded using the
\fBglVertexAttrib\fR
entry points\&. Matrices must be loaded into successive generic attribute slots in column major order, with one column of the matrix in each generic attribute slot\&.
.PP
A user\-defined attribute variable declared in a vertex shader can be bound to a generic attribute index by calling
\fBglBindAttribLocation\fR()\&. This allows an application to use more descriptive variable names in a vertex shader\&. A subsequent change to the specified generic vertex attribute will be immediately reflected as a change to the corresponding attribute variable in the vertex shader\&.
.PP
The binding between a generic vertex attribute index and a user\-defined attribute variable in a vertex shader is part of the state of a program object, but the current value of the generic vertex attribute is not\&. The value of each generic vertex attribute is part of current state, just like standard vertex attributes, and it is maintained even if a different program object is used\&.
.PP
An application may freely modify generic vertex attributes that are not bound to a named vertex shader attribute variable\&. These values are simply maintained as part of current state and will not be accessed by the vertex shader\&. If a generic vertex attribute bound to an attribute variable in a vertex shader is not updated while the vertex shader is executing, the vertex shader will repeatedly use the current value for the generic vertex attribute\&.
.SH "NOTES"
.PP
Generic vertex attributes can be updated at any time\&.
.PP
It is possible for an application to bind more than one attribute name to the same generic vertex attribute index\&. This is referred to as aliasing, and it is allowed only if just one of the aliased attribute variables is active in the vertex shader, or if no path through the vertex shader consumes more than one of the attributes aliased to the same location\&. OpenGL implementations are not required to do error checking to detect aliasing, they are allowed to assume that aliasing will not occur, and they are allowed to employ optimizations that work only in the absence of aliasing\&.
.PP
There is no provision for binding standard vertex attributes; therefore, it is not possible to alias generic attributes with standard attributes\&.
.PP

\fBglVertexAttrib4bv\fR,
\fBglVertexAttrib4sv\fR,
\fBglVertexAttrib4iv\fR,
\fBglVertexAttrib4ubv\fR,
\fBglVertexAttrib4usv\fR,
\fBglVertexAttrib4uiv\fR, and
\fBglVertexAttrib4N\fR
versions are available only if the GL version is 3\&.1 or higher\&.
.PP

\fBglVertexAttribP\fR
versions are available only if the GL version is 3\&.3 or higher\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is greater than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fBglVertexAttribP\fR
is used with a
\fItype\fR
other than
\fBGL_INT_10_10_10_2\fR
or
\fBGL_UNSIGNED_INT_10_10_10_2\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with the argument
\fBGL_CURRENT_PROGRAM\fR
.PP
\fBglGetActiveAttrib\fR()
with argument
\fIprogram\fR
and the index of an active attribute variable
.PP
\fBglGetAttribLocation\fR()
with argument
\fIprogram\fR
and an attribute variable name
.PP
\fBglGetVertexAttrib\fR()
with arguments
\fBGL_CURRENT_VERTEX_ATTRIB\fR
and
\fIindex\fR
.SH "SEE ALSO"
.PP
\fBglBindAttribLocation\fR(),
\fBglVertexAttribPointer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
