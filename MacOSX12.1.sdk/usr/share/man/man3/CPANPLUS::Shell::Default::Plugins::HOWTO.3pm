.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Shell::Default::Plugins::HOWTO 3pm"
.TH CPANPLUS::Shell::Default::Plugins::HOWTO 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Shell::Default::Plugins::HOWTO \-\- documentation on how to write your own plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package CPANPLUS::Shell::Default::Plugins::MyPlugin;
\&
\&    ### return command => method mapping
\&    sub plugins { ( myplugin1 => \*(Aqmp1\*(Aq, myplugin2 => \*(Aqmp2\*(Aq ) }
\&
\&    ### method called when the command \*(Aq/myplugin1\*(Aq is issued
\&    sub mp1 { .... }
\&
\&    ### method called when the command \*(Aq/? myplugin1\*(Aq is issued
\&    sub mp1_help { return "Help Text" }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This pod text explains how to write your own plugins for
\&\f(CW\*(C`CPANPLUS::Shell::Default\*(C'\fR.
.SH "HOWTO"
.IX Header "HOWTO"
.SS "Registering Plugin Modules"
.IX Subsection "Registering Plugin Modules"
Plugins are detected by using \f(CW\*(C`Module::Pluggable\*(C'\fR. Every module in
the \f(CW\*(C`CPANPLUS::Shell::Default::Plugins::*\*(C'\fR namespace is considered a
plugin, and is attempted to be loaded.
.PP
Therefor, any plugin must be declared in that namespace, in a corresponding
\&\f(CW\*(C`.pm\*(C'\fR file.
.SS "Registering Plugin Commands"
.IX Subsection "Registering Plugin Commands"
To register any plugin commands, a list of key value pairs must be returned
by a \f(CW\*(C`plugins\*(C'\fR method in your package. The keys are the commands you wish
to register, the values are the methods in the plugin package you wish to have
called when the command is issued.
.PP
For example, a simple 'Hello, World!' plugin:
.PP
.Vb 1
\&    package CPANPLUS::Shell::Default::Plugins::HW;
\&
\&    sub plugins { return ( helloworld => \*(Aqhw\*(Aq ) };
\&
\&    sub hw { print "Hello, world!\en" }
.Ve
.PP
When the user in the default shell now issues the \f(CW\*(C`/helloworld\*(C'\fR command,
this command will be dispatched to the plugin, and its \f(CW\*(C`hw\*(C'\fR method will
be called
.SS "Registering Plugin Help"
.IX Subsection "Registering Plugin Help"
To provide usage information for your plugin, the user of the default shell
can type \f(CW\*(C`/? PLUGIN_COMMAND\*(C'\fR. In that case, the function \f(CW\*(C`PLUGIN_COMMAND_help\*(C'\fR
will be called in your plugin package.
.PP
For example, extending the above example, when a user calls \f(CW\*(C`/? helloworld\*(C'\fR,
the function \f(CW\*(C`hw_help\*(C'\fR will be called, which might look like this:
.PP
.Vb 1
\&    sub hw_help { "    /helloworld      # prints "Hello, world!\en" }
.Ve
.PP
If you dont provide a corresponding _help function to your commands, the
default shell will handle it gracefully, but the user will be stuck without
usage information on your commands, so it's considered undesirable to omit
the help functions.
.SS "Arguments to Plugin Commands"
.IX Subsection "Arguments to Plugin Commands"
Any plugin function will receive the following arguments when called, which
are all positional:
.IP "Classname \*(-- The name of your plugin class" 4
.IX Item "Classname The name of your plugin class"
.PD 0
.IP "Shell     \*(-- The CPANPLUS::Shell::Default object" 4
.IX Item "Shell The CPANPLUS::Shell::Default object"
.IP "Backend   \*(-- The CPANPLUS::Backend object" 4
.IX Item "Backend The CPANPLUS::Backend object"
.IP "Command   \*(-- The command issued by the user" 4
.IX Item "Command The command issued by the user"
.IP "Input     \*(-- The input string from the user" 4
.IX Item "Input The input string from the user"
.IP "Options   \*(-- A hashref of options provided by the user" 4
.IX Item "Options A hashref of options provided by the user"
.PD
.PP
For example, the following command:
.PP
.Vb 1
\&    /helloworld bob \-\-nofoo \-\-bar=2 joe
.Ve
.PP
Would yield the following arguments:
.PP
.Vb 7
\&    sub hw {
\&        my $class   = shift;    # CPANPLUS::Shell::Default::Plugins::HW
\&        my $shell   = shift;    # CPANPLUS::Shell::Default object
\&        my $cb      = shift;    # CPANPLUS::Backend object
\&        my $cmd     = shift;    # \*(Aqhelloworld\*(Aq
\&        my $input   = shift;    # \*(Aqbob joe\*(Aq
\&        my $opts    = shift;    # { foo => 0, bar => 2 }
\&
\&        ....
\&    }
.Ve
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-cpanplus@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1CPAN++\s0 interface (of which this module is a part of) is copyright (c)
2001 \- 2007, Jos Boumans <kane@cpan.org>. All rights reserved.
.PP
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CPANPLUS::Shell::Default, CPANPLUS::Shell, cpanp
