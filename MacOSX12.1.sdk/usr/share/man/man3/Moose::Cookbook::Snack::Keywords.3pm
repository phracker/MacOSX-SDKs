.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Snack::Keywords 3"
.TH Moose::Cookbook::Snack::Keywords 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Snack::Keywords \- Restricted "keywords" in Moose
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Moose exports a number of sugar functions in order to emulate Perl
built-in keywords. These can cause clashes with other user-defined
functions. This document provides a list of those keywords for easy
reference.
.SS "The 'meta' keyword"
.IX Subsection "The 'meta' keyword"
\&\f(CW\*(C`use Moose\*(C'\fR adds a method called \f(CW\*(C`meta\*(C'\fR to your class. If this
conflicts with a method or function you are using, you can rename it,
or prevent it from being installed entirely. To do this, pass the
\&\f(CW\*(C`\-meta_name\*(C'\fR option when you \f(CW\*(C`use Moose\*(C'\fR. For instance:
.PP
.Vb 2
\&  # install it under a different name
\&  use Moose \-meta_name => \*(Aqmoose_meta\*(Aq;
\&
\&  # don\*(Aqt install it at all
\&  use Moose \-meta_name => undef;
.Ve
.SS "Moose Keywords"
.IX Subsection "Moose Keywords"
If you are using Moose or Moose::Role it is best to avoid these
keywords:
.IP "extends" 4
.IX Item "extends"
.PD 0
.IP "with" 4
.IX Item "with"
.IP "has" 4
.IX Item "has"
.IP "before" 4
.IX Item "before"
.IP "after" 4
.IX Item "after"
.IP "around" 4
.IX Item "around"
.IP "super" 4
.IX Item "super"
.IP "override" 4
.IX Item "override"
.IP "inner" 4
.IX Item "inner"
.IP "augment" 4
.IX Item "augment"
.IP "confess" 4
.IX Item "confess"
.IP "blessed" 4
.IX Item "blessed"
.IP "meta" 4
.IX Item "meta"
.PD
.SS "Moose::Util::TypeConstraints Keywords"
.IX Subsection "Moose::Util::TypeConstraints Keywords"
If you are using Moose::Util::TypeConstraints it is best to avoid
these keywords:
.IP "type" 4
.IX Item "type"
.PD 0
.IP "subtype" 4
.IX Item "subtype"
.IP "class_type" 4
.IX Item "class_type"
.IP "role_type" 4
.IX Item "role_type"
.IP "maybe_type" 4
.IX Item "maybe_type"
.IP "duck_type" 4
.IX Item "duck_type"
.IP "as" 4
.IX Item "as"
.IP "where" 4
.IX Item "where"
.IP "message" 4
.IX Item "message"
.IP "inline_as" 4
.IX Item "inline_as"
.IP "coerce" 4
.IX Item "coerce"
.IP "from" 4
.IX Item "from"
.IP "via" 4
.IX Item "via"
.IP "enum" 4
.IX Item "enum"
.IP "find_type_constraint" 4
.IX Item "find_type_constraint"
.IP "register_type_constraint" 4
.IX Item "register_type_constraint"
.PD
.SS "Avoiding collisions"
.IX Subsection "Avoiding collisions"
\fITurning off Moose\fR
.IX Subsection "Turning off Moose"
.PP
To remove the sugar functions Moose exports, just add \f(CW\*(C`no Moose\*(C'\fR
at the bottom of your code:
.PP
.Vb 2
\&  package Thing;
\&  use Moose;
\&
\&  # code here
\&
\&  no Moose;
.Ve
.PP
This will unexport the sugar functions that Moose originally
exported. The same will also work for Moose::Role and
Moose::Util::TypeConstraints.
.PP
\fISub::Exporter features\fR
.IX Subsection "Sub::Exporter features"
.PP
Moose, Moose::Role and Moose::Util::TypeConstraints all use
Sub::Exporter to handle all their exporting needs. This means that
all the features that Sub::Exporter provides are also available to
them.
.PP
For instance, with Sub::Exporter you can rename keywords, like so:
.PP
.Vb 2
\&  package LOL::Cat;
\&  use Moose \*(Aqhas\*(Aq => { \-as => \*(Aqi_can_haz\*(Aq };
\&
\&  i_can_haz \*(Aqcheeseburger\*(Aq => (
\&      is      => \*(Aqrw\*(Aq,
\&      trigger => sub { print "NOM NOM" }
\&  );
\&
\&  LOL::Cat\->new\->cheeseburger(\*(AqKTHNXBYE\*(Aq);
.Ve
.PP
See the Sub::Exporter docs for more information.
.PP
\fInamespace::autoclean and namespace::clean\fR
.IX Subsection "namespace::autoclean and namespace::clean"
.PP
You can also use namespace::autoclean to clean up your namespace.
This will remove all imported functions from your namespace. Note
that if you are importing functions that are intended to be used as
methods (this includes overload, due to internal implementation
details), it will remove these as well.
.PP
Another option is to use namespace::clean directly, but
you must be careful not to remove \f(CW\*(C`meta\*(C'\fR when doing so:
.PP
.Vb 4
\&  package Foo;
\&  use Moose;
\&  use namespace::clean \-except => \*(Aqmeta\*(Aq;
\&  # ...
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Moose" 4
.IX Item "Moose"
.PD 0
.IP "Moose::Role" 4
.IX Item "Moose::Role"
.IP "Moose::Util::TypeConstraints" 4
.IX Item "Moose::Util::TypeConstraints"
.IP "Sub::Exporter" 4
.IX Item "Sub::Exporter"
.IP "namespace::autoclean" 4
.IX Item "namespace::autoclean"
.IP "namespace::clean" 4
.IX Item "namespace::clean"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
