.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Pluggable::Object 3"
.TH Module::Pluggable::Object 3 "2015-08-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Pluggable::Object \- automatically give your module the ability to have plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Simple use Module::Pluggable \-
.PP
.Vb 2
\&    package MyClass;
\&    use Module::Pluggable::Object;
\&    
\&    my $finder = Module::Pluggable::Object\->new(%opts);
\&    print "My plugins are: ".join(", ", $finder\->plugins)."\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a simple but, hopefully, extensible way of having 'plugins' for 
your module. Obviously this isn't going to be the be all and end all of
solutions but it works for me.
.PP
Essentially all it does is export a method into your namespace that 
looks through a search path for .pm files and turn those into class names.
.PP
Optionally it instantiates those classes for you.
.PP
This object is wrapped by \f(CW\*(C`Module::Pluggable\*(C'\fR. If you want to do something
odd or add non-general special features you're probably best to wrap this
and produce your own subclass.
.SH "OPTIONS"
.IX Header "OPTIONS"
See the \f(CW\*(C`Module::Pluggable\*(C'\fR docs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Wistow <simon@thegestalt.org>
.SH "COPYING"
.IX Header "COPYING"
Copyright, 2006 Simon Wistow
.PP
Distributed under the same terms as Perl itself.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Pluggable
