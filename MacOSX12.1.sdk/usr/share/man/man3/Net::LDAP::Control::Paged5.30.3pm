.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control::Paged 3"
.TH Net::LDAP::Control::Paged 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control::Paged \- LDAPv3 Paged results control object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::LDAP;
\& use Net::LDAP::Control::Paged;
\& use Net::LDAP::Constant qw( LDAP_CONTROL_PAGED );
\&
\& $ldap = Net::LDAP\->new( "ldap.mydomain.eg" );
\&
\& $page = Net::LDAP::Control::Paged\->new( size => 100 );
\&
\& @args = ( base     => "cn=subnets,cn=sites,cn=configuration,$BASE_DN",
\&           scope    => "subtree",
\&           filter   => "(objectClass=subnet)",
\&           callback => \e&process_entry, # Call this sub for each entry
\&           control  => [ $page ],
\& );
\&
\& my $cookie;
\& while (1) {
\&   # Perform search
\&   my $mesg = $ldap\->search( @args );
\&
\&   # Only continue on LDAP_SUCCESS
\&   $mesg\->code  and last;
\&
\&   # Get cookie from paged control
\&   my($resp)  = $mesg\->control( LDAP_CONTROL_PAGED )  or last;
\&   $cookie    = $resp\->cookie;
\&
\&   # Only continue if cookie is nonempty (= we\*(Aqre not done)
\&   last  if (!defined($cookie) || !length($cookie));
\&
\&   # Set cookie in paged control
\&   $page\->cookie($cookie);
\& }
\&
\& if (defined($cookie) && length($cookie)) {
\&   # We had an abnormal exit, so let the server know we do not want any more
\&   $page\->cookie($cookie);
\&   $page\->size(0);
\&   $ldap\->search( @args );
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control::Paged\*(C'\fR provides an interface for the creation and manipulation
of objects that represent the \f(CW\*(C`pagedResultsControl\*(C'\fR as described by \s-1RFC 2696.\s0
.PP
The control is allowed on \s-1LDAP\s0 search requests (\*(L"search\*(R" in Net::LDAP) only.
On other operations it will \- depending on the value of the parameter
\&\f(CW\*(C`critical\*(C'\fR \- either be ignored or lead to errors.
.SH "CONSTRUCTOR ARGUMENTS"
.IX Header "CONSTRUCTOR ARGUMENTS"
In addition to the constructor arguments described in
Net::LDAP::Control the following are provided.
.IP "cookie" 4
.IX Item "cookie"
The value to use as the cookie. This is not normally set when an object is
created, but is set from the cookie value returned by the server. This associates
a search with a previous search, so the server knows to return the page
of entries following the entries it returned the previous time.
.IP "size" 4
.IX Item "size"
The page size that is required. This is the maximum number of entries that the
server will return to the search request.
.SH "METHODS"
.IX Header "METHODS"
As with Net::LDAP::Control each constructor argument
described above is also available as a method on the object which will
return the current value for the attribute if called without an argument,
and set a new value for the attribute if called with an argument.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Control,
http://www.ietf.org/rfc/rfc2696.txt
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
