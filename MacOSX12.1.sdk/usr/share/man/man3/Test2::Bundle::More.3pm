.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Bundle::More 3"
.TH Test2::Bundle::More 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Bundle::More \- ALMOST a drop\-in replacement for Test::More.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This bundle is intended to be a (mostly) drop-in replacement for
Test::More. See \*(L"\s-1KEY DIFFERENCES FROM\s0 Test::More\*(R" for details.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Bundle::More;
\&
\&    ok(1, "pass");
\&
\&    ...
\&
\&    done_testing;
.Ve
.SH "PLUGINS"
.IX Header "PLUGINS"
This loads Test2::Plugin::ExitSummary.
.SH "TOOLS"
.IX Header "TOOLS"
These are from Test2::Tools::Basic. See Test2::Tools::Basic for details.
.ie n .IP "ok($bool, $name)" 4
.el .IP "ok($bool, \f(CW$name\fR)" 4
.IX Item "ok($bool, $name)"
.PD 0
.IP "pass($name)" 4
.IX Item "pass($name)"
.IP "fail($name)" 4
.IX Item "fail($name)"
.ie n .IP "skip($why, $count)" 4
.el .IP "skip($why, \f(CW$count\fR)" 4
.IX Item "skip($why, $count)"
.ie n .IP "$todo = todo($why)" 4
.el .IP "\f(CW$todo\fR = todo($why)" 4
.IX Item "$todo = todo($why)"
.IP "diag($message)" 4
.IX Item "diag($message)"
.IP "note($message)" 4
.IX Item "note($message)"
.IP "plan($count)" 4
.IX Item "plan($count)"
.IP "skip_all($why)" 4
.IX Item "skip_all($why)"
.IP "\fBdone_testing()\fR" 4
.IX Item "done_testing()"
.IP "\s-1BAIL_OUT\s0($why)" 4
.IX Item "BAIL_OUT($why)"
.PD
.PP
These are from Test2::Tools::ClassicCompare. See
Test2::Tools::ClassicCompare for details.
.ie n .IP "is($got, $want, $name)" 4
.el .IP "is($got, \f(CW$want\fR, \f(CW$name\fR)" 4
.IX Item "is($got, $want, $name)"
.PD 0
.ie n .IP "isnt($got, $donotwant, $name)" 4
.el .IP "isnt($got, \f(CW$donotwant\fR, \f(CW$name\fR)" 4
.IX Item "isnt($got, $donotwant, $name)"
.ie n .IP "like($got, qr/match/, $name)" 4
.el .IP "like($got, qr/match/, \f(CW$name\fR)" 4
.IX Item "like($got, qr/match/, $name)"
.ie n .IP "unlike($got, qr/mismatch/, $name)" 4
.el .IP "unlike($got, qr/mismatch/, \f(CW$name\fR)" 4
.IX Item "unlike($got, qr/mismatch/, $name)"
.ie n .IP "is_deeply($got, $want, ""Deep compare"")" 4
.el .IP "is_deeply($got, \f(CW$want\fR, ``Deep compare'')" 4
.IX Item "is_deeply($got, $want, Deep compare)"
.ie n .IP "cmp_ok($got, $op, $want, $name)" 4
.el .IP "cmp_ok($got, \f(CW$op\fR, \f(CW$want\fR, \f(CW$name\fR)" 4
.IX Item "cmp_ok($got, $op, $want, $name)"
.PD
.PP
These are from Test2::Tools::Class. See Test2::Tools::Class for details.
.ie n .IP "isa_ok($thing, @classes)" 4
.el .IP "isa_ok($thing, \f(CW@classes\fR)" 4
.IX Item "isa_ok($thing, @classes)"
.PD 0
.ie n .IP "can_ok($thing, @subs)" 4
.el .IP "can_ok($thing, \f(CW@subs\fR)" 4
.IX Item "can_ok($thing, @subs)"
.PD
.PP
This is from Test2::Tools::Subtest. It is called \f(CW\*(C`subtest_streamed()\*(C'\fR in
that package.
.ie n .IP "subtest $name => sub { ... }" 4
.el .IP "subtest \f(CW$name\fR => sub { ... }" 4
.IX Item "subtest $name => sub { ... }"
.SH "KEY DIFFERENCES FROM Test::More"
.IX Header "KEY DIFFERENCES FROM Test::More"
.PD 0
.IP "You cannot plan at import." 4
.IX Item "You cannot plan at import."
.PD
\&\s-1THIS WILL\s0 \fB\s-1NOT\s0\fR \s-1WORK:\s0
.Sp
.Vb 1
\&    use Test2::Bundle::More tests => 5;
.Ve
.Sp
Instead you must plan in a separate statement:
.Sp
.Vb 2
\&    use Test2::Bundle::More;
\&    plan 5;
.Ve
.IP "You have three subs imported for use in planning" 4
.IX Item "You have three subs imported for use in planning"
Use \f(CW\*(C`plan($count)\*(C'\fR, \f(CW\*(C`skip_all($reason)\*(C'\fR, or \f(CW\*(C`done_testing()\*(C'\fR for your
planning.
.IP "isa_ok accepts different arguments" 4
.IX Item "isa_ok accepts different arguments"
\&\f(CW\*(C`isa_ok\*(C'\fR in Test::More was:
.Sp
.Vb 1
\&    isa_ok($thing, $isa, $alt_thing_name);
.Ve
.Sp
This was very inconsistent with tools like \f(CW\*(C`can_ok($thing, @subs)\*(C'\fR.
.Sp
In Test2::Bundle::More, \f(CW\*(C`isa_ok()\*(C'\fR takes a \f(CW$thing\fR and a list of \f(CW@isa\fR.
.Sp
.Vb 1
\&    isa_ok($thing, $class1, $class2, ...);
.Ve
.SS "\s-1THESE FUNCTIONS AND VARIABLES HAVE BEEN REMOVED\s0"
.IX Subsection "THESE FUNCTIONS AND VARIABLES HAVE BEEN REMOVED"
.ie n .IP "$TODO" 4
.el .IP "\f(CW$TODO\fR" 4
.IX Item "$TODO"
See \f(CW\*(C`todo()\*(C'\fR.
.IP "\fBuse_ok()\fR" 4
.IX Item "use_ok()"
.PD 0
.IP "\fBrequire_ok()\fR" 4
.IX Item "require_ok()"
.PD
These are not necessary. Use \f(CW\*(C`use\*(C'\fR and \f(CW\*(C`require\*(C'\fR directly. If there is an
error loading the module the test will catch the error and fail.
.IP "\fBtodo_skip()\fR" 4
.IX Item "todo_skip()"
Not necessary.
.IP "\fBeq_array()\fR" 4
.IX Item "eq_array()"
.PD 0
.IP "\fBeq_hash()\fR" 4
.IX Item "eq_hash()"
.IP "\fBeq_set()\fR" 4
.IX Item "eq_set()"
.PD
Discouraged in Test::More.
.IP "\fBexplain()\fR" 4
.IX Item "explain()"
This started a fight between Test developers, who may now each write their own
implementations in Test2. (See explain in Test::Most vs Test::More.
Hint: Test::Most wrote it first, then Test::More added it, but broke
compatibility).
.IP "\fBnew_ok()\fR" 4
.IX Item "new_ok()"
Not necessary.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
