.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sub::Util 3pm"
.TH Sub::Util 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sub::Util \- A selection of utility subroutines for subs and CODE references
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Sub::Util qw( prototype set_prototype subname set_subname );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Sub::Util\*(C'\fR contains a selection of utility subroutines that are useful for
operating on subs and \s-1CODE\s0 references.
.PP
The rationale for inclusion in this module is that the function performs some
work for which an \s-1XS\s0 implementation is essential because it cannot be
implemented in Pure Perl, and which is sufficiently-widely used across \s-1CPAN\s0
that its popularity warrants inclusion in a core module, which this is.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "prototype"
.IX Subsection "prototype"
.Vb 1
\&    my $proto = prototype( $code )
.Ve
.PP
\&\fISince version 1.40.\fR
.PP
Returns the prototype of the given \f(CW$code\fR reference, if it has one, as a
string. This is the same as the \f(CW\*(C`CORE::prototype\*(C'\fR operator; it is included
here simply for symmetry and completeness with the other functions.
.SS "set_prototype"
.IX Subsection "set_prototype"
.Vb 1
\&    my $code = set_prototype $prototype, $code;
.Ve
.PP
\&\fISince version 1.40.\fR
.PP
Sets the prototype of the function given by the \f(CW$code\fR reference, or deletes
it if \f(CW$prototype\fR is \f(CW\*(C`undef\*(C'\fR. Returns the \f(CW$code\fR reference itself.
.PP
\&\fICaution\fR: This function takes arguments in a different order to the previous
copy of the code from \f(CW\*(C`Scalar::Util\*(C'\fR. This is to match the order of
\&\f(CW\*(C`set_subname\*(C'\fR, and other potential additions in this file. This order has
been chosen as it allows a neat and simple chaining of other
\&\f(CW\*(C`Sub::Util::set_*\*(C'\fR functions as might become available, such as:
.PP
.Vb 5
\& my $code =
\&    set_subname   name_here =>
\&    set_prototype \*(Aq&@\*(Aq      =>
\&    set_attribute \*(Aq:lvalue\*(Aq =>
\&       sub { ...... };
.Ve
.SS "subname"
.IX Subsection "subname"
.Vb 1
\&    my $name = subname( $code )
.Ve
.PP
\&\fISince version 1.40.\fR
.PP
Returns the name of the given \f(CW$code\fR reference, if it has one. Normal named
subs will give a fully-qualified name consisting of the package and the
localname separated by \f(CW\*(C`::\*(C'\fR. Anonymous code references will give \f(CW\*(C`_\|_ANON_\|_\*(C'\fR
as the localname. If a name has been set using \*(L"set_subname\*(R", this name will
be returned instead.
.PP
This function was inspired by \f(CW\*(C`sub_fullname\*(C'\fR from Sub::Identify. The
remaining functions that \f(CW\*(C`Sub::Identify\*(C'\fR implements can easily be emulated
using regexp operations, such as
.PP
.Vb 3
\& sub get_code_info { return (subname $_[0]) =~ m/^(.+)::(.*?)$/ }
\& sub sub_name      { return (get_code_info $_[0])[0] }
\& sub stash_name    { return (get_code_info $_[0])[1] }
.Ve
.PP
\&\fIUsers of Sub::Name beware\fR: This function is \fBnot\fR the same as
\&\f(CW\*(C`Sub::Name::subname\*(C'\fR; it returns the existing name of the sub rather than
changing it. To set or change a name, see instead \*(L"set_subname\*(R".
.SS "set_subname"
.IX Subsection "set_subname"
.Vb 1
\&    my $code = set_subname $name, $code;
.Ve
.PP
\&\fISince version 1.40.\fR
.PP
Sets the name of the function given by the \f(CW$code\fR reference. Returns the
\&\f(CW$code\fR reference itself. If the \f(CW$name\fR is unqualified, the package of the
caller is used to qualify it.
.PP
This is useful for applying names to anonymous \s-1CODE\s0 references so that stack
traces and similar situations, to give a useful name rather than having the
default of \f(CW\*(C`_\|_ANON_\|_\*(C'\fR. Note that this name is only used for this situation;
the \f(CW\*(C`set_subname\*(C'\fR will not install it into the symbol table; you will have to
do that yourself if required.
.PP
However, since the name is not used by perl except as the return value of
\&\f(CW\*(C`caller\*(C'\fR, for stack traces or similar, there is no actual requirement that
the name be syntactically valid as a perl function name. This could be used to
attach extra information that could be useful in debugging stack traces.
.PP
This function was copied from \f(CW\*(C`Sub::Name::subname\*(C'\fR and renamed to the naming
convention of this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
The general structure of this module was written by Paul Evans
<leonerd@leonerd.org.uk>.
.PP
The \s-1XS\s0 implementation of \*(L"set_subname\*(R" was copied from Sub::Name by
Matthijs van Duin <xmath@cpan.org>
