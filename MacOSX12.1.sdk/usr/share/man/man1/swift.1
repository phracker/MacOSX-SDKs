.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "swift 1"
.TH swift 1 "2021-08-24" "swift\ 5.5.2" "Swift Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
swift \-\- Safe, fast, and expressive general\-purpose programming language
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To invoke the Swift \s-1REPL\s0 (Read-Eval-Print-Loop):
.Sp
.RS 4
\&\fBswift\fR
.RE
.PP
To execute a Swift program:
.Sp
.RS 4
\&\fBswift\fR program.swift \*(-- <arguments>
.RE
.PP
To work with the Swift Package Manager:
.Sp
.RS 4
\&\fBswift\fR build|package|run|test [options] <inputs>
.RE
.PP
To invoke the Swift compiler:
.Sp
.RS 4
\&\fBswiftc\fR [options] <inputs>
.RE
.PP
A list of supported options is available through the \*(L"\-help\*(R" option:
.Sp
.RS 4
\&\fBswift\fR \-help
.Sp
\&\fBswift\fR build \-help
.Sp
\&\fBswiftc\fR \-help
.RE
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Swift is a general-purpose programming language built using a modern approach to
safety, performance, and software design patterns.
.PP
The goal of the Swift project is to create the best available language for uses
ranging from systems programming, to mobile and desktop apps, scaling up to
cloud services. Most importantly, Swift is designed to make writing and
maintaining \fIcorrect\fR programs easier for the developer. To achieve this goal,
we believe that the most obvious way to write Swift code must also be:
.PP
\&\fBSafe.\fR The most obvious way to write code should also behave in a safe manner.
Undefined behavior is the enemy of safety, and developer mistakes should be
caught before software is in production. Opting for safety sometimes means Swift
will feel strict, but we believe that clarity saves time in the long run.
.PP
\&\fBFast.\fR Swift is intended as a replacement for C\-based languages (C, \*(C+, and
Objective-C). As such, Swift must be comparable to those languages in
performance for most tasks. Performance must also be predictable and consistent,
not just fast in short bursts that require clean-up later. There are lots of
languages with novel features \- being fast is rare.
.PP
\&\fBExpressive.\fR Swift benefits from decades of advancement in computer science to
offer syntax that is a joy to use, with modern features developers expect. But
Swift is never done. We will monitor language advancements and embrace what
works, continually evolving to make Swift even better.
.SH "BUGS"
.IX Header "BUGS"
Reporting bugs is a great way for anyone to help improve Swift. The bug tracker
for Swift, an open-source project, is located at <https://bugs.swift.org>.
.PP
If a bug can be reproduced only within an Xcode project or a playground, or if
the bug is associated with an Apple \s-1NDA,\s0 please file a report to Apple's
Feedback Assistant at <https://feedbackassistant.apple.com> instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "\s-1HOME PAGE\s0"
.IX Subsection "HOME PAGE"
<https://swift.org>
.SS "\s-1APPLE DEVELOPER RESOURCES\s0"
.IX Subsection "APPLE DEVELOPER RESOURCES"
<https://developer.apple.com/swift/resources>
.SS "\s-1CODE REPOSITORIES\s0"
.IX Subsection "CODE REPOSITORIES"
Swift Programming Language at <https://github.com/apple/swift>
.PP
Swift Package Manager at <https://github.com/apple/swift\-package\-manager>
