.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5221DELTA 1"
.TH PERL5221DELTA 1 "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5221delta \- what is new for perl v5.22.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.22.0 release and the 5.22.1
release.
.PP
If you are upgrading from an earlier release such as 5.20.0, first read
perl5220delta, which describes differences between 5.20.0 and 5.22.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.20.0 other than the
following single exception, which we deemed to be a sensible change to make in
order to get the new \f(CW\*(C`\eb{wb}\*(C'\fR and (in particular) \f(CW\*(C`\eb{sb}\*(C'\fR features sane
before people decided they're worthless because of bugs in their Perl 5.22.0
implementation and avoided them in the future.
If any others exist, they are bugs, and we request that you submit a report.
See \*(L"Reporting Bugs\*(R" below.
.SS "Bounds Checking Constructs"
.IX Subsection "Bounds Checking Constructs"
Several bugs, including a segmentation fault, have been fixed with the bounds
checking constructs (introduced in Perl 5.22) \f(CW\*(C`\eb{gcb}\*(C'\fR, \f(CW\*(C`\eb{sb}\*(C'\fR, \f(CW\*(C`\eb{wb}\*(C'\fR,
\&\f(CW\*(C`\eB{gcb}\*(C'\fR, \f(CW\*(C`\eB{sb}\*(C'\fR, and \f(CW\*(C`\eB{wb}\*(C'\fR.  All the \f(CW\*(C`\eB{}\*(C'\fR ones now match an empty
string; none of the \f(CW\*(C`\eb{}\*(C'\fR ones do.
[perl #126319] <https://rt.perl.org/Ticket/Display.html?id=126319>
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20150520 to 5.20151213.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.22 to 0.23.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.53 to 1.53_01.
.Sp
If \f(CW\*(C`POSIX::strerror\*(C'\fR was passed \f(CW$!\fR as its argument then it accidentally
cleared \f(CW$!\fR.  This has been fixed.
[perl #126229] <https://rt.perl.org/Ticket/Display.html?id=126229>
.IP "\(bu" 4
Storable has been upgraded from version 2.53 to 2.53_01.
.IP "\(bu" 4
warnings has been upgraded from version 1.32 to 1.34.
.Sp
The \f(CW\*(C`warnings::enabled\*(C'\fR example now actually uses \f(CW\*(C`warnings::enabled\*(C'\fR.
[perl #126051] <https://rt.perl.org/Ticket/Display.html?id=126051>
.IP "\(bu" 4
Win32 has been upgraded from version 0.51 to 0.52.
.Sp
This has been updated for Windows 8.1, 10 and 2012 R2 Server.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperltie\fR
.IX Subsection "perltie"
.IP "\(bu" 4
The usage of \f(CW\*(C`FIRSTKEY\*(C'\fR and \f(CW\*(C`NEXTKEY\*(C'\fR has been clarified.
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP "\(bu" 4
The specific true value of \f(CW$!{E...}\fR is now documented, noting that it is
subject to change and not guaranteed.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR builtins are now more careful about the warnings
they emit: argument reordering now disables the \*(L"redundant argument\*(R" warning in
all cases.
[perl #125469] <https://rt.perl.org/Ticket/Display.html?id=125469>
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Using the \f(CW\*(C`NO_HASH_SEED\*(C'\fR define in combination with the default hash algorithm
\&\f(CW\*(C`PERL_HASH_FUNC_ONE_AT_A_TIME_HARD\*(C'\fR resulted in a fatal error while compiling
the interpreter, since Perl 5.17.10.  This has been fixed.
.IP "\(bu" 4
Configuring with ccflags containing quotes (e.g.
\&\f(CW\*(C`\-Accflags=\*(Aq\-DAPPLLIB_EXP=\e"/usr/libperl\e"\*(Aq\*(C'\fR) was broken in Perl 5.22.0
but has now been fixed again.
[perl #125314] <https://rt.perl.org/Ticket/Display.html?id=125314>
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1IRIX\s0" 4
.IX Item "IRIX"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Under some circumstances \s-1IRIX\s0 stdio \fBfgetc()\fR and \fBfread()\fR set the errno to
\&\f(CW\*(C`ENOENT\*(C'\fR, which made no sense according to either \s-1IRIX\s0 or \s-1POSIX\s0 docs.  Errno
is now cleared in such cases.
[perl #123977] <https://rt.perl.org/Ticket/Display.html?id=123977>
.IP "\(bu" 4
Problems when multiplying long doubles by infinity have been fixed.
[perl #126396] <https://rt.perl.org/Ticket/Display.html?id=126396>
.IP "\(bu" 4
All tests pass now on \s-1IRIX\s0 with the default build configuration.
.RE
.RS 4
.RE
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\f(CW\*(C`qr/(?[ () ])/\*(C'\fR no longer segfaults, giving a syntax error message instead.
[perl #125805] <https://rt.perl.org/Ticket/Display.html?id=125805>
.IP "\(bu" 4
Regular expression possessive quantifier Perl 5.20 regression now fixed.
\&\f(CW\*(C`qr/\*(C'\fR\fI\s-1PAT\s0\fR\f(CW\*(C`{\*(C'\fR\fImin\fR,\fImax\fR\f(CW\*(C`}+\*(C'\fR\f(CW\*(C`/\*(C'\fR is supposed to behave identically to
\&\f(CW\*(C`qr/(?>\*(C'\fR\fI\s-1PAT\s0\fR\f(CW\*(C`{\*(C'\fR\fImin\fR,\fImax\fR\f(CW\*(C`})/\*(C'\fR.  Since Perl 5.20, this didn't work
if \fImin\fR and \fImax\fR were equal.
[perl #125825] <https://rt.perl.org/Ticket/Display.html?id=125825>
.IP "\(bu" 4
Certain syntax errors in
\&\*(L"Extended Bracketed Character Classes\*(R" in perlrecharclass caused panics instead
of the proper error message.  This has now been fixed.
[perl #126481] <https://rt.perl.org/Ticket/Display.html?id=126481>
.IP "\(bu" 4
\&\f(CW\*(C`BEGIN <>\*(C'\fR no longer segfaults and properly produces an error message.
[perl #125341] <https://rt.perl.org/Ticket/Display.html?id=125341>
.IP "\(bu" 4
A regression from Perl 5.20 has been fixed, in which some syntax errors in
\&\f(CW\*(C`(?[...])\*(C'\fR constructs
within regular expression patterns could cause a segfault instead of a proper
error message.
[perl #126180] <https://rt.perl.org/Ticket/Display.html?id=126180>
.IP "\(bu" 4
Another problem with
\&\f(CW\*(C`(?[...])\*(C'\fR
constructs has been fixed wherein things like \f(CW\*(C`\ec]\*(C'\fR could cause panics.
[perl #126181] <https://rt.perl.org/Ticket/Display.html?id=126181>
.IP "\(bu" 4
In Perl 5.22.0, the logic changed when parsing a numeric parameter to the \-C
option, such that the successfully parsed number was not saved as the option
value if it parsed to the end of the argument.
[perl #125381] <https://rt.perl.org/Ticket/Display.html?id=125381>
.IP "\(bu" 4
Warning fatality is now ignored when rewinding the stack.  This prevents
infinite recursion when the now fatal error also causes rewinding of the stack.
[perl #123398] <https://rt.perl.org/Ticket/Display.html?id=123398>
.IP "\(bu" 4
A crash with \f(CW\*(C`%::=(); J\->${\e"::"}\*(C'\fR has been fixed.
[perl #125541] <https://rt.perl.org/Ticket/Display.html?id=125541>
.IP "\(bu" 4
Nested quantifiers such as \f(CW\*(C`/.{1}??/\*(C'\fR should cause perl to throw a fatal
error, but were being silently accepted since Perl 5.20.0.  This has been
fixed.
[perl #126253] <https://rt.perl.org/Ticket/Display.html?id=126253>
.IP "\(bu" 4
Regular expression sequences such as \f(CW\*(C`/(?i/\*(C'\fR (and similarly with other
recognized flags or combination of flags) should cause perl to throw a fatal
error, but were being silently accepted since Perl 5.18.0.  This has been
fixed.
[perl #126178] <https://rt.perl.org/Ticket/Display.html?id=126178>
.IP "\(bu" 4
A bug in hexadecimal floating point literal support meant that high-order bits
could be lost in cases where mantissa overflow was caused by too many trailing
zeros in the fractional part.  This has been fixed.
[perl #126582] <https://rt.perl.org/Ticket/Display.html?id=126582>
.IP "\(bu" 4
Another hexadecimal floating point bug, causing low-order bits to be lost in
cases where the last hexadecimal digit of the mantissa has bits straddling the
limit of the number of bits allowed for the mantissa, has also been fixed.
[perl #126586] <https://rt.perl.org/Ticket/Display.html?id=126586>
.IP "\(bu" 4
Further hexadecimal floating point bugs have been fixed: In some circumstances,
the \f(CW%a\fR format specifier could variously lose the sign of the negative zero,
fail to display zeros after the radix point with the requested precision, or
even lose the radix point after the leftmost hexadecimal digit completely.
.IP "\(bu" 4
A crash caused by incomplete expressions within \f(CW\*(C`/(?[ ])/\*(C'\fR (e.g.
\&\f(CW\*(C`/(?[[0]+()+])/\*(C'\fR) has been fixed.
[perl #126615] <https://rt.perl.org/Ticket/Display.html?id=126615>
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.22.1 represents approximately 6 months of development since Perl 5.22.0
and contains approximately 19,000 lines of changes across 130 files from 27
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 1,700 lines of changes to 44 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.22.1:
.PP
Aaron Crane, Abigail, Andy Broad, Aristotle Pagaltzis, Chase Whitener, Chris
\&'BinGOs' Williams, Craig A. Berry, Daniel Dragan, David Mitchell, Father
Chrysostomos, Herbert Breunung, Hugo van der Sanden, James E Keenan, Jan
Dubois, Jarkko Hietaniemi, Karen Etheridge, Karl Williamson, Lukas Mai, Matthew
Horsfall, Peter Martini, Rafael Garcia-Suarez, Ricardo Signes, Shlomi Fish,
Sisyphus, Steve Hay, Tony Cook, Victor Adam.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core.  We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
