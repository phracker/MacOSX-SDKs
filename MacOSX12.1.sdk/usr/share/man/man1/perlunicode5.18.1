.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUNICODE 1"
.TH PERLUNICODE 1 "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlunicode \- Unicode support in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Important Caveats"
.IX Subsection "Important Caveats"
Unicode support is an extensive requirement. While Perl does not
implement the Unicode standard or the accompanying technical reports
from cover to cover, Perl does support many Unicode features.
.PP
People who want to learn to use Unicode in Perl, should probably read
the Perl Unicode tutorial, perlunitut and
perluniintro, before reading
this reference document.
.PP
Also, the use of Unicode may present security issues that aren't obvious.
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
.ie n .IP "Safest if you ""use feature 'unicode_strings'""" 4
.el .IP "Safest if you ``use feature 'unicode_strings'''" 4
.IX Item "Safest if you use feature 'unicode_strings'"
In order to preserve backward compatibility, Perl does not turn
on full internal Unicode support unless the pragma
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified.  (This is automatically
selected if you use \f(CW\*(C`use 5.012\*(C'\fR or higher.)  Failure to do this can
trigger unexpected surprises.  See \*(L"The \*(R"Unicode Bug"" below.
.Sp
This pragma doesn't affect I/O.  Nor does it change the internal
representation of strings, only their interpretation.  There are still
several places where Unicode isn't fully supported, such as in
filenames.
.IP "Input and Output Layers" 4
.IX Item "Input and Output Layers"
Perl knows when a filehandle uses Perl's internal Unicode encodings
(\s-1UTF\-8,\s0 or UTF-EBCDIC if in \s-1EBCDIC\s0) if the filehandle is opened with
the \*(L":encoding(utf8)\*(R" layer.  Other encodings can be converted to Perl's
encoding on input or from Perl's encoding on output by use of the
\&\*(L":encoding(...)\*(R"  layer.  See open.
.Sp
To indicate that Perl source itself is in \s-1UTF\-8,\s0 use \f(CW\*(C`use utf8;\*(C'\fR.
.ie n .IP """use utf8"" still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.el .IP "\f(CWuse utf8\fR still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.IX Item "use utf8 still needed to enable UTF-8/UTF-EBCDIC in scripts"
As a compatibility measure, the \f(CW\*(C`use utf8\*(C'\fR pragma must be explicitly
included to enable recognition of \s-1UTF\-8\s0 in the Perl scripts themselves
(in string or regular expression literals, or in identifier names) on
ASCII-based machines or to recognize UTF-EBCDIC on EBCDIC-based
machines.  \fBThese are the only times when an explicit \f(CB\*(C`use utf8\*(C'\fB
is needed.\fR  See utf8.
.IP "BOM-marked scripts and \s-1UTF\-16\s0 scripts autodetected" 4
.IX Item "BOM-marked scripts and UTF-16 scripts autodetected"
If a Perl script begins marked with the Unicode \s-1BOM \s0(\s-1UTF\-16LE, UTF16\-BE,\s0
or \s-1UTF\-8\s0), or if the script looks like non-BOM-marked \s-1UTF\-16\s0 of either
endianness, Perl will correctly read in the script as Unicode.
(BOMless \s-1UTF\-8\s0 cannot be effectively recognized or differentiated from
\&\s-1ISO 8859\-1\s0 or other eight-bit encodings.)
.ie n .IP """use encoding"" needed to upgrade non\-Latin\-1 byte strings" 4
.el .IP "\f(CWuse encoding\fR needed to upgrade non\-Latin\-1 byte strings" 4
.IX Item "use encoding needed to upgrade non-Latin-1 byte strings"
By default, there is a fundamental asymmetry in Perl's Unicode model:
implicit upgrading from byte strings to Unicode strings assumes that
they were encoded in \fI\s-1ISO 8859\-1 \s0(Latin\-1)\fR, but Unicode strings are
downgraded with \s-1UTF\-8\s0 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin\-1.
.Sp
See \*(L"Byte and Character Semantics\*(R" for more details.
.SS "Byte and Character Semantics"
.IX Subsection "Byte and Character Semantics"
Perl uses logically-wide characters to represent strings internally.
.PP
Starting in Perl 5.14, Perl-level operations work with
characters rather than bytes within the scope of a
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (or equivalently
\&\f(CW\*(C`use 5.012\*(C'\fR or higher).  (This is not true if bytes have been
explicitly requested by \f(CW\*(C`use bytes\*(C'\fR, nor necessarily true
for interactions with the platform's operating system.)
.PP
For earlier Perls, and when \f(CW\*(C`unicode_strings\*(C'\fR is not in effect, Perl
provides a fairly safe environment that can handle both types of
semantics in programs.  For operations where Perl can unambiguously
decide that the input data are characters, Perl switches to character
semantics.  For operations where this determination cannot be made
without additional information from the user, Perl decides in favor of
compatibility and chooses to use byte semantics.
.PP
When \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in
effect, Perl uses the semantics associated with the current locale.
(\f(CW\*(C`use locale\*(C'\fR overrides \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in the same scope;
while \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR effectively also selects
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in its scope; see perllocale.)
Otherwise, Perl uses the platform's native
byte semantics for characters whose code points are less than 256, and
Unicode semantics for those greater than 255.  That means that non-ASCII
characters are undefined except for their
ordinal numbers.  This means that none have case (upper and lower), nor are any
a member of character classes, like \f(CW\*(C`[:alpha:]\*(C'\fR or \f(CW\*(C`\ew\*(C'\fR.  (But all do belong
to the \f(CW\*(C`\eW\*(C'\fR class or the Perl regular expression extension \f(CW\*(C`[:^alpha:]\*(C'\fR.)
.PP
This behavior preserves compatibility with earlier versions of Perl,
which allowed byte semantics in Perl operations only if
none of the program's inputs were marked as being a source of Unicode
character data.  Such data may come from filehandles, from calls to
external programs, from information provided by the system (such as \f(CW%ENV\fR),
or from literals and constants in the source text.
.PP
The \f(CW\*(C`utf8\*(C'\fR pragma is primarily a compatibility device that enables
recognition of \s-1UTF\-\s0(8|EBCDIC) in literals encountered by the parser.
Note that this pragma is only required while Perl defaults to byte
semantics; when character semantics become the default, this pragma
may become a no-op.  See utf8.
.PP
If strings operating under byte semantics and strings with Unicode
character data are concatenated, the new string will have
character semantics.  This can cause surprises: See \*(L"\s-1BUGS\*(R"\s0, below.
You can choose to be warned when this happens.  See encoding::warnings.
.PP
Under character semantics, many operations that formerly operated on
bytes now operate on characters. A character in Perl is
logically just a number ranging from 0 to 2**31 or so. Larger
characters may encode into longer sequences of bytes internally, but
this internal detail is mostly hidden for Perl code.
See perluniintro for more.
.SS "Effects of Character Semantics"
.IX Subsection "Effects of Character Semantics"
Character semantics have the following effects:
.IP "\(bu" 4
Strings\*(--including hash keys\*(--and regular expression patterns may
contain characters that have an ordinal value larger than 255.
.Sp
If you use a Unicode editor to edit your program, Unicode characters may
occur directly within the literal strings in \s-1UTF\-8\s0 encoding, or \s-1UTF\-16.
\&\s0(The former requires a \s-1BOM\s0 or \f(CW\*(C`use utf8\*(C'\fR, the latter requires a \s-1BOM.\s0)
.Sp
Unicode characters can also be added to a string by using the \f(CW\*(C`\eN{U+...}\*(C'\fR
notation.  The Unicode code for the desired character, in hexadecimal,
should be placed in the braces, after the \f(CW\*(C`U\*(C'\fR. For instance, a smiley face is
\&\f(CW\*(C`\eN{U+263A}\*(C'\fR.
.Sp
Alternatively, you can use the \f(CW\*(C`\ex{...}\*(C'\fR notation for characters 0x100 and
above.  For characters below 0x100 you may get byte semantics instead of
character semantics;  see \*(L"The \*(R"Unicode Bug"".  On \s-1EBCDIC\s0 machines there is
the additional problem that the value for such characters gives the \s-1EBCDIC\s0
character rather than the Unicode one, thus it is more portable to use
\&\f(CW\*(C`\eN{U+...}\*(C'\fR instead.
.Sp
Additionally, you can use the \f(CW\*(C`\eN{...}\*(C'\fR notation and put the official
Unicode character name within the braces, such as
\&\f(CW\*(C`\eN{WHITE SMILING FACE}\*(C'\fR.  This automatically loads the charnames
module with the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR options.  If you prefer different
options for this module, you can instead, before the \f(CW\*(C`\eN{...}\*(C'\fR,
explicitly load it with your desired options; for example,
.Sp
.Vb 1
\&   use charnames \*(Aq:loose\*(Aq;
.Ve
.IP "\(bu" 4
If an appropriate encoding is specified, identifiers within the
Perl script may contain Unicode alphanumeric characters, including
ideographs.  Perl does not currently attempt to canonicalize variable
names.
.IP "\(bu" 4
Regular expressions match characters instead of bytes.  \*(L".\*(R" matches
a character instead of a byte.
.IP "\(bu" 4
Bracketed character classes in regular expressions match characters instead of
bytes and match against the character properties specified in the
Unicode properties database.  \f(CW\*(C`\ew\*(C'\fR can be used to match a Japanese
ideograph, for instance.
.IP "\(bu" 4
Named Unicode properties, scripts, and block ranges may be used (like bracketed
character classes) by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct and
the \f(CW\*(C`\eP{}\*(C'\fR negation, \*(L"doesn't match property\*(R".
See \*(L"Unicode Character Properties\*(R" for more details.
.Sp
You can define your own character properties and use them
in the regular expression with the \f(CW\*(C`\ep{}\*(C'\fR or \f(CW\*(C`\eP{}\*(C'\fR construct.
See \*(L"User-Defined Character Properties\*(R" for more details.
.IP "\(bu" 4
The special pattern \f(CW\*(C`\eX\*(C'\fR matches a logical character, an \*(L"extended grapheme
cluster\*(R" in Standardese.  In Unicode what appears to the user to be a single
character, for example an accented \f(CW\*(C`G\*(C'\fR, may in fact be composed of a sequence
of characters, in this case a \f(CW\*(C`G\*(C'\fR followed by an accent character.  \f(CW\*(C`\eX\*(C'\fR
will match the entire sequence.
.IP "\(bu" 4
The \f(CW\*(C`tr///\*(C'\fR operator translates characters instead of bytes.  Note
that the \f(CW\*(C`tr///CU\*(C'\fR functionality has been removed.  For similar
functionality see pack('U0', ...) and pack('C0', ...).
.IP "\(bu" 4
Case translation operators use the Unicode case translation tables
when character input is provided.  Note that \f(CW\*(C`uc()\*(C'\fR, or \f(CW\*(C`\eU\*(C'\fR in
interpolated strings, translates to uppercase, while \f(CW\*(C`ucfirst\*(C'\fR,
or \f(CW\*(C`\eu\*(C'\fR in interpolated strings, translates to titlecase in languages
that make the distinction (which is equivalent to uppercase in languages
without the distinction).
.IP "\(bu" 4
Most operators that deal with positions or lengths in a string will
automatically switch to using character positions, including
\&\f(CW\*(C`chop()\*(C'\fR, \f(CW\*(C`chomp()\*(C'\fR, \f(CW\*(C`substr()\*(C'\fR, \f(CW\*(C`pos()\*(C'\fR, \f(CW\*(C`index()\*(C'\fR, \f(CW\*(C`rindex()\*(C'\fR,
\&\f(CW\*(C`sprintf()\*(C'\fR, \f(CW\*(C`write()\*(C'\fR, and \f(CW\*(C`length()\*(C'\fR.  An operator that
specifically does not switch is \f(CW\*(C`vec()\*(C'\fR.  Operators that really don't
care include operators that treat strings as a bucket of bits such as
\&\f(CW\*(C`sort()\*(C'\fR, and operators dealing with filenames.
.IP "\(bu" 4
The \f(CW\*(C`pack()\*(C'\fR/\f(CW\*(C`unpack()\*(C'\fR letter \f(CW\*(C`C\*(C'\fR does \fInot\fR change, since it is often
used for byte-oriented formats.  Again, think \f(CW\*(C`char\*(C'\fR in the C language.
.Sp
There is a new \f(CW\*(C`U\*(C'\fR specifier that converts between Unicode characters
and code points. There is also a \f(CW\*(C`W\*(C'\fR specifier that is the equivalent of
\&\f(CW\*(C`chr\*(C'\fR/\f(CW\*(C`ord\*(C'\fR and properly handles character values even if they are above 255.
.IP "\(bu" 4
The \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR functions work on characters, similar to
\&\f(CW\*(C`pack("W")\*(C'\fR and \f(CW\*(C`unpack("W")\*(C'\fR, \fInot\fR \f(CW\*(C`pack("C")\*(C'\fR and
\&\f(CW\*(C`unpack("C")\*(C'\fR.  \f(CW\*(C`pack("C")\*(C'\fR and \f(CW\*(C`unpack("C")\*(C'\fR are methods for
emulating byte-oriented \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR on Unicode strings.
While these methods reveal the internal encoding of Unicode strings,
that is not something one normally needs to care about at all.
.IP "\(bu" 4
The bit string operators, \f(CW\*(C`& | ^ ~\*(C'\fR, can operate on character data.
However, for backward compatibility, such as when using bit string
operations when characters are all less than 256 in ordinal value, one
should not use \f(CW\*(C`~\*(C'\fR (the bit complement) with characters of both
values less than 256 and values greater than 256.  Most importantly,
DeMorgan's laws (\f(CW\*(C`~($x|$y) eq ~$x&~$y\*(C'\fR and \f(CW\*(C`~($x&$y) eq ~$x|~$y\*(C'\fR)
will not hold.  The reason for this mathematical \fIfaux pas\fR is that
the complement cannot return \fBboth\fR the 8\-bit (byte-wide) bit
complement \fBand\fR the full character-wide bit complement.
.IP "\(bu" 4
There is a \s-1CPAN\s0 module, Unicode::Casing, which allows you to define
your own mappings to be used in \f(CW\*(C`lc()\*(C'\fR, \f(CW\*(C`lcfirst()\*(C'\fR, \f(CW\*(C`uc()\*(C'\fR,
\&\f(CW\*(C`ucfirst()\*(C'\fR, and \f(CW\*(C`fc\*(C'\fR (or their double-quoted string inlined
versions such as \f(CW\*(C`\eU\*(C'\fR).
(Prior to Perl 5.16, this functionality was partially provided
in the Perl core, but suffered from a number of insurmountable
drawbacks, so the \s-1CPAN\s0 module was written instead.)
.IP "\(bu" 4
And finally, \f(CW\*(C`scalar reverse()\*(C'\fR reverses by character rather than by byte.
.SS "Unicode Character Properties"
.IX Subsection "Unicode Character Properties"
(The only time that Perl considers a sequence of individual code
points as a single logical character is in the \f(CW\*(C`\eX\*(C'\fR construct, already
mentioned above.   Therefore \*(L"character\*(R" in this discussion means a single
Unicode code point.)
.PP
Very nearly all Unicode character properties are accessible through
regular expressions by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct
and the \f(CW\*(C`\eP{}\*(C'\fR \*(L"doesn't match property\*(R" for its negation.
.PP
For instance, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character with the Unicode
\&\*(L"Uppercase\*(R" property, while \f(CW\*(C`\ep{L}\*(C'\fR matches any character with a
General_Category of \*(L"L\*(R" (letter) property.  Brackets are not
required for single letter property names, so \f(CW\*(C`\ep{L}\*(C'\fR is equivalent to \f(CW\*(C`\epL\*(C'\fR.
.PP
More formally, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character whose Unicode
Uppercase property value is True, and \f(CW\*(C`\eP{Uppercase}\*(C'\fR matches any character
whose Uppercase property value is False, and they could have been written as
\&\f(CW\*(C`\ep{Uppercase=True}\*(C'\fR and \f(CW\*(C`\ep{Uppercase=False}\*(C'\fR, respectively.
.PP
This formality is needed when properties are not binary; that is, if they can
take on more values than just True and False.  For example, the Bidi_Class (see
\&\*(L"Bidirectional Character Types\*(R" below), can take on several different
values, such as Left, Right, Whitespace, and others.  To match these, one needs
to specify both the property name (Bidi_Class), \s-1AND\s0 the value being
matched against
(Left, Right, etc.).  This is done, as in the examples above, by having the
two components separated by an equal sign (or interchangeably, a colon), like
\&\f(CW\*(C`\ep{Bidi_Class: Left}\*(C'\fR.
.PP
All Unicode-defined character properties may be written in these compound forms
of \f(CW\*(C`\ep{property=value}\*(C'\fR or \f(CW\*(C`\ep{property:value}\*(C'\fR, but Perl provides some
additional properties that are written only in the single form, as well as
single-form short-cuts for all binary properties and certain others described
below, in which you may omit the property name and the equals or colon
separator.
.PP
Most Unicode character properties have at least two synonyms (or aliases if you
prefer): a short one that is easier to type and a longer one that is more
descriptive and hence easier to understand.  Thus the \*(L"L\*(R" and \*(L"Letter\*(R" properties
above are equivalent and can be used interchangeably.  Likewise,
\&\*(L"Upper\*(R" is a synonym for \*(L"Uppercase\*(R", and we could have written
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR equivalently as \f(CW\*(C`\ep{Upper}\*(C'\fR.  Also, there are typically
various synonyms for the values the property can be.   For binary properties,
\&\*(L"True\*(R" has 3 synonyms: \*(L"T\*(R", \*(L"Yes\*(R", and \*(L"Y\*(R"; and \*(L"False has correspondingly \*(R"F\*(L",
\&\*(R"No\*(L", and \*(R"N\*(L".  But be careful.  A short form of a value for one property may
not mean the same thing as the same short form for another.  Thus, for the
General_Category property, \*(R"L\*(L" means \*(R"Letter\*(L", but for the Bidi_Class property,
\&\*(R"L\*(L" means \*(R"Left".  A complete list of properties and synonyms is in
perluniprops.
.PP
Upper/lower case differences in property names and values are irrelevant;
thus \f(CW\*(C`\ep{Upper}\*(C'\fR means the same thing as \f(CW\*(C`\ep{upper}\*(C'\fR or even \f(CW\*(C`\ep{UpPeR}\*(C'\fR.
Similarly, you can add or subtract underscores anywhere in the middle of a
word, so that these are also equivalent to \f(CW\*(C`\ep{U_p_p_e_r}\*(C'\fR.  And white space
is irrelevant adjacent to non-word characters, such as the braces and the equals
or colon separators, so \f(CW\*(C`\ep{   Upper  }\*(C'\fR and \f(CW\*(C`\ep{ Upper_case : Y }\*(C'\fR are
equivalent to these as well.  In fact, white space and even
hyphens can usually be added or deleted anywhere.  So even \f(CW\*(C`\ep{ Up\-per case = Yes}\*(C'\fR is
equivalent.  All this is called \*(L"loose-matching\*(R" by Unicode.  The few places
where stricter matching is used is in the middle of numbers, and in the Perl
extension properties that begin or end with an underscore.  Stricter matching
cares about white space (except adjacent to non-word characters),
hyphens, and non-interior underscores.
.PP
You can also use negation in both \f(CW\*(C`\ep{}\*(C'\fR and \f(CW\*(C`\eP{}\*(C'\fR by introducing a caret
(^) between the first brace and the property name: \f(CW\*(C`\ep{^Tamil}\*(C'\fR is
equal to \f(CW\*(C`\eP{Tamil}\*(C'\fR.
.PP
Almost all properties are immune to case-insensitive matching.  That is,
adding a \f(CW\*(C`/i\*(C'\fR regular expression modifier does not change what they
match.  There are two sets that are affected.
The first set is
\&\f(CW\*(C`Uppercase_Letter\*(C'\fR,
\&\f(CW\*(C`Lowercase_Letter\*(C'\fR,
and \f(CW\*(C`Titlecase_Letter\*(C'\fR,
all of which match \f(CW\*(C`Cased_Letter\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
And the second set is
\&\f(CW\*(C`Uppercase\*(C'\fR,
\&\f(CW\*(C`Lowercase\*(C'\fR,
and \f(CW\*(C`Titlecase\*(C'\fR,
all of which match \f(CW\*(C`Cased\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
This set also includes its subsets \f(CW\*(C`PosixUpper\*(C'\fR and \f(CW\*(C`PosixLower\*(C'\fR both
of which under \f(CW\*(C`/i\*(C'\fR matching match \f(CW\*(C`PosixAlpha\*(C'\fR.
(The difference between these sets is that some things, such as Roman
numerals, come in both upper and lower case so they are \f(CW\*(C`Cased\*(C'\fR, but aren't considered
letters, so they aren't \f(CW\*(C`Cased_Letter\*(C'\fRs.)
.PP
The result is undefined if you try to match a non-Unicode code point
(that is, one above 0x10FFFF) against a Unicode property.  Currently, a
warning is raised, and the match will fail.  In some cases, this is
counterintuitive, as both these fail:
.PP
.Vb 2
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=True}      # Fails.
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=False}     # Fails!
.Ve
.PP
\fI\f(BIGeneral_Category\fI\fR
.IX Subsection "General_Category"
.PP
Every Unicode character is assigned a general category, which is the \*(L"most
usual categorization of a character\*(R" (from
<http://www.unicode.org/reports/tr44>).
.PP
The compound way of writing these is like \f(CW\*(C`\ep{General_Category=Number}\*(C'\fR
(short, \f(CW\*(C`\ep{gc:n}\*(C'\fR).  But Perl furnishes shortcuts in which everything up
through the equal or colon separator is omitted.  So you can instead just write
\&\f(CW\*(C`\epN\*(C'\fR.
.PP
Here are the short and long forms of the General Category properties:
.PP
.Vb 1
\&    Short       Long
\&
\&    L           Letter
\&    LC, L&      Cased_Letter (that is: [\ep{Ll}\ep{Lu}\ep{Lt}])
\&    Lu          Uppercase_Letter
\&    Ll          Lowercase_Letter
\&    Lt          Titlecase_Letter
\&    Lm          Modifier_Letter
\&    Lo          Other_Letter
\&
\&    M           Mark
\&    Mn          Nonspacing_Mark
\&    Mc          Spacing_Mark
\&    Me          Enclosing_Mark
\&
\&    N           Number
\&    Nd          Decimal_Number (also Digit)
\&    Nl          Letter_Number
\&    No          Other_Number
\&
\&    P           Punctuation (also Punct)
\&    Pc          Connector_Punctuation
\&    Pd          Dash_Punctuation
\&    Ps          Open_Punctuation
\&    Pe          Close_Punctuation
\&    Pi          Initial_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Pf          Final_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Po          Other_Punctuation
\&
\&    S           Symbol
\&    Sm          Math_Symbol
\&    Sc          Currency_Symbol
\&    Sk          Modifier_Symbol
\&    So          Other_Symbol
\&
\&    Z           Separator
\&    Zs          Space_Separator
\&    Zl          Line_Separator
\&    Zp          Paragraph_Separator
\&
\&    C           Other
\&    Cc          Control (also Cntrl)
\&    Cf          Format
\&    Cs          Surrogate
\&    Co          Private_Use
\&    Cn          Unassigned
.Ve
.PP
Single-letter properties match all characters in any of the
two-letter sub-properties starting with the same letter.
\&\f(CW\*(C`LC\*(C'\fR and \f(CW\*(C`L&\*(C'\fR are special: both are aliases for the set consisting of everything matched by \f(CW\*(C`Ll\*(C'\fR, \f(CW\*(C`Lu\*(C'\fR, and \f(CW\*(C`Lt\*(C'\fR.
.PP
\fI\f(BIBidirectional Character Types\fI\fR
.IX Subsection "Bidirectional Character Types"
.PP
Because scripts differ in their directionality (Hebrew and Arabic are
written right to left, for example) Unicode supplies these properties in
the Bidi_Class class:
.PP
.Vb 1
\&    Property    Meaning
\&
\&    L           Left\-to\-Right
\&    LRE         Left\-to\-Right Embedding
\&    LRO         Left\-to\-Right Override
\&    R           Right\-to\-Left
\&    AL          Arabic Letter
\&    RLE         Right\-to\-Left Embedding
\&    RLO         Right\-to\-Left Override
\&    PDF         Pop Directional Format
\&    EN          European Number
\&    ES          European Separator
\&    ET          European Terminator
\&    AN          Arabic Number
\&    CS          Common Separator
\&    NSM         Non\-Spacing Mark
\&    BN          Boundary Neutral
\&    B           Paragraph Separator
\&    S           Segment Separator
\&    WS          Whitespace
\&    ON          Other Neutrals
.Ve
.PP
This property is always written in the compound form.
For example, \f(CW\*(C`\ep{Bidi_Class:R}\*(C'\fR matches characters that are normally
written right to left.
.PP
\fI\f(BIScripts\fI\fR
.IX Subsection "Scripts"
.PP
The world's languages are written in many different scripts.  This sentence
(unless you're reading it in translation) is written in Latin, while Russian is
written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in
Hiragana or Katakana.  There are many more.
.PP
The Unicode Script and Script_Extensions properties give what script a
given character is in.  Either property can be specified with the
compound form like
\&\f(CW\*(C`\ep{Script=Hebrew}\*(C'\fR (short: \f(CW\*(C`\ep{sc=hebr}\*(C'\fR), or
\&\f(CW\*(C`\ep{Script_Extensions=Javanese}\*(C'\fR (short: \f(CW\*(C`\ep{scx=java}\*(C'\fR).
In addition, Perl furnishes shortcuts for all
\&\f(CW\*(C`Script\*(C'\fR property names.  You can omit everything up through the equals
(or colon), and simply write \f(CW\*(C`\ep{Latin}\*(C'\fR or \f(CW\*(C`\eP{Cyrillic}\*(C'\fR.
(This is not true for \f(CW\*(C`Script_Extensions\*(C'\fR, which is required to be
written in the compound form.)
.PP
The difference between these two properties involves characters that are
used in multiple scripts.  For example the digits '0' through '9' are
used in many parts of the world.  These are placed in a script named
\&\f(CW\*(C`Common\*(C'\fR.  Other characters are used in just a few scripts.  For
example, the \*(L"KATAKANA-HIRAGANA \s-1DOUBLE HYPHEN\*(R"\s0 is used in both Japanese
scripts, Katakana and Hiragana, but nowhere else.  The \f(CW\*(C`Script\*(C'\fR
property places all characters that are used in multiple scripts in the
\&\f(CW\*(C`Common\*(C'\fR script, while the \f(CW\*(C`Script_Extensions\*(C'\fR property places those
that are used in only a few scripts into each of those scripts; while
still using \f(CW\*(C`Common\*(C'\fR for those used in many scripts.  Thus both these
match:
.PP
.Vb 2
\& "0" =~ /\ep{sc=Common}/     # Matches
\& "0" =~ /\ep{scx=Common}/    # Matches
.Ve
.PP
and only the first of these match:
.PP
.Vb 2
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Common}  # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Common} # No match
.Ve
.PP
And only the last two of these match:
.PP
.Vb 4
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Hiragana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Katakana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Hiragana} # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Katakana} # Matches
.Ve
.PP
\&\f(CW\*(C`Script_Extensions\*(C'\fR is thus an improved \f(CW\*(C`Script\*(C'\fR, in which there are
fewer characters in the \f(CW\*(C`Common\*(C'\fR script, and correspondingly more in
other scripts.  It is new in Unicode version 6.0, and its data are likely
to change significantly in later releases, as things get sorted out.
.PP
(Actually, besides \f(CW\*(C`Common\*(C'\fR, the \f(CW\*(C`Inherited\*(C'\fR script, contains
characters that are used in multiple scripts.  These are modifier
characters which modify other characters, and inherit the script value
of the controlling character.  Some of these are used in many scripts,
and so go into \f(CW\*(C`Inherited\*(C'\fR in both \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extensions\*(C'\fR.
Others are used in just a few scripts, so are in \f(CW\*(C`Inherited\*(C'\fR in
\&\f(CW\*(C`Script\*(C'\fR, but not in \f(CW\*(C`Script_Extensions\*(C'\fR.)
.PP
It is worth stressing that there are several different sets of digits in
Unicode that are equivalent to 0\-9 and are matchable by \f(CW\*(C`\ed\*(C'\fR in a
regular expression.  If they are used in a single language only, they
are in that language's \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extension\*(C'\fR.  If they are
used in more than one script, they will be in \f(CW\*(C`sc=Common\*(C'\fR, but only
if they are used in many scripts should they be in \f(CW\*(C`scx=Common\*(C'\fR.
.PP
A complete list of scripts and their shortcuts is in perluniprops.
.PP
\fI\f(BIUse of \*(L"Is\*(R" Prefix\fI\fR
.IX Subsection "Use of Is Prefix"
.PP
For backward compatibility (with Perl 5.6), all properties mentioned
so far may have \f(CW\*(C`Is\*(C'\fR or \f(CW\*(C`Is_\*(C'\fR prepended to their name, so \f(CW\*(C`\eP{Is_Lu}\*(C'\fR, for
example, is equal to \f(CW\*(C`\eP{Lu}\*(C'\fR, and \f(CW\*(C`\ep{IsScript:Arabic}\*(C'\fR is equal to
\&\f(CW\*(C`\ep{Arabic}\*(C'\fR.
.PP
\fI\f(BIBlocks\fI\fR
.IX Subsection "Blocks"
.PP
In addition to \fBscripts\fR, Unicode also defines \fBblocks\fR of
characters.  The difference between scripts and blocks is that the
concept of scripts is closer to natural languages, while the concept
of blocks is more of an artificial grouping based on groups of Unicode
characters with consecutive ordinal values. For example, the \*(L"Basic Latin\*(R"
block is all characters whose ordinals are between 0 and 127, inclusive; in
other words, the \s-1ASCII\s0 characters.  The \*(L"Latin\*(R" script contains some letters
from this as well as several other blocks, like \*(L"Latin\-1 Supplement\*(R",
\&\*(L"Latin Extended-A\*(R", etc., but it does not contain all the characters from
those blocks. It does not, for example, contain the digits 0\-9, because
those digits are shared across many scripts, and hence are in the
\&\f(CW\*(C`Common\*(C'\fR script.
.PP
For more about scripts versus blocks, see UAX#24 \*(L"Unicode Script Property\*(R":
<http://www.unicode.org/reports/tr24>
.PP
The \f(CW\*(C`Script\*(C'\fR or \f(CW\*(C`Script_Extensions\*(C'\fR properties are likely to be the
ones you want to use when processing
natural language; the Block property may occasionally be useful in working
with the nuts and bolts of Unicode.
.PP
Block names are matched in the compound form, like \f(CW\*(C`\ep{Block: Arrows}\*(C'\fR or
\&\f(CW\*(C`\ep{Blk=Hebrew}\*(C'\fR.  Unlike most other properties, only a few block names have a
Unicode-defined short name.  But Perl does provide a (slight) shortcut:  You
can say, for example \f(CW\*(C`\ep{In_Arrows}\*(C'\fR or \f(CW\*(C`\ep{In_Hebrew}\*(C'\fR.  For backwards
compatibility, the \f(CW\*(C`In\*(C'\fR prefix may be omitted if there is no naming conflict
with a script or any other property, and you can even use an \f(CW\*(C`Is\*(C'\fR prefix
instead in those cases.  But it is not a good idea to do this, for a couple
reasons:
.IP "1." 4
It is confusing.  There are many naming conflicts, and you may forget some.
For example, \f(CW\*(C`\ep{Hebrew}\*(C'\fR means the \fIscript\fR Hebrew, and \s-1NOT\s0 the \fIblock\fR
Hebrew.  But would you remember that 6 months from now?
.IP "2." 4
It is unstable.  A new version of Unicode may pre-empt the current meaning by
creating a property with the same name.  There was a time in very early Unicode
releases when \f(CW\*(C`\ep{Hebrew}\*(C'\fR would have matched the \fIblock\fR Hebrew; now it
doesn't.
.PP
Some people prefer to always use \f(CW\*(C`\ep{Block: foo}\*(C'\fR and \f(CW\*(C`\ep{Script: bar}\*(C'\fR
instead of the shortcuts, whether for clarity, because they can't remember the
difference between 'In' and 'Is' anyway, or they aren't confident that those who
eventually will read their code will know that difference.
.PP
A complete list of blocks and their shortcuts is in perluniprops.
.PP
\fI\f(BIOther Properties\fI\fR
.IX Subsection "Other Properties"
.PP
There are many more properties than the very basic ones described here.
A complete list is in perluniprops.
.PP
Unicode defines all its properties in the compound form, so all single-form
properties are Perl extensions.  Most of these are just synonyms for the
Unicode ones, but some are genuine extensions, including several that are in
the compound form.  And quite a few of these are actually recommended by Unicode
(in <http://www.unicode.org/reports/tr18>).
.PP
This section gives some details on all extensions that aren't just
synonyms for compound-form Unicode properties
(for those properties, you'll have to refer to the
Unicode Standard <http://www.unicode.org/reports/tr44>.
.ie n .IP "\fB\fB""\ep{All}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{All}\fB\fR" 4
.IX Item "p{All}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{Any}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{Alnum}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Alnum}\fB\fR" 4
.IX Item "p{Alnum}"
This matches any \f(CW\*(C`\ep{Alphabetic}\*(C'\fR or \f(CW\*(C`\ep{Decimal_Number}\*(C'\fR character.
.ie n .IP "\fB\fB""\ep{Any}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Any}\fB\fR" 4
.IX Item "p{Any}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{All}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{ASCII}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{ASCII}\fB\fR" 4
.IX Item "p{ASCII}"
This matches any of the 128 characters in the US-ASCII character set,
which is a subset of Unicode.
.ie n .IP "\fB\fB""\ep{Assigned}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Assigned}\fB\fR" 4
.IX Item "p{Assigned}"
This matches any assigned code point; that is, any code point whose general
category is not Unassigned (or equivalently, not Cn).
.ie n .IP "\fB\fB""\ep{Blank}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Blank}\fB\fR" 4
.IX Item "p{Blank}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{HorizSpace}\*(C'\fR:  A character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{Decomposition_Type: Non_Canonical}""\fB\fR    (Short: ""\ep{Dt=NonCanon}"")" 4
.el .IP "\fB\f(CB\ep{Decomposition_Type: Non_Canonical}\fB\fR    (Short: \f(CW\ep{Dt=NonCanon}\fR)" 4
.IX Item "p{Decomposition_Type: Non_Canonical} (Short: p{Dt=NonCanon})"
Matches a character that has a non-canonical decomposition.
.Sp
To understand the use of this rarely used property=value combination, it is
necessary to know some basics about decomposition.
Consider a character, say H.  It could appear with various marks around it,
such as an acute accent, or a circumflex, or various hooks, circles, arrows,
\&\fIetc.\fR, above, below, to one side or the other, etc.  There are many
possibilities among the world's languages.  The number of combinations is
astronomical, and if there were a character for each combination, it would
soon exhaust Unicode's more than a million possible characters.  So Unicode
took a different approach: there is a character for the base H, and a
character for each of the possible marks, and these can be variously combined
to get a final logical character.  So a logical character\*(--what appears to be a
single character\*(--can be a sequence of more than one individual characters.
This is called an \*(L"extended grapheme cluster\*(R";  Perl furnishes the \f(CW\*(C`\eX\*(C'\fR
regular expression construct to match such sequences.
.Sp
But Unicode's intent is to unify the existing character set standards and
practices, and several pre-existing standards have single characters that
mean the same thing as some of these combinations.  An example is \s-1ISO\-8859\-1,\s0
which has quite a few of these in the Latin\-1 range, an example being \*(L"\s-1LATIN
CAPITAL LETTER E WITH ACUTE\*(R". \s0 Because this character was in this pre-existing
standard, Unicode added it to its repertoire.  But this character is considered
by Unicode to be equivalent to the sequence consisting of the character
\&\*(L"\s-1LATIN CAPITAL LETTER E\*(R"\s0 followed by the character \*(L"\s-1COMBINING ACUTE ACCENT\*(R".\s0
.Sp
\&\*(L"\s-1LATIN CAPITAL LETTER E WITH ACUTE\*(R"\s0 is called a \*(L"pre-composed\*(R" character, and
its equivalence with the sequence is called canonical equivalence.  All
pre-composed characters are said to have a decomposition (into the equivalent
sequence), and the decomposition type is also called canonical.
.Sp
However, many more characters have a different type of decomposition, a
\&\*(L"compatible\*(R" or \*(L"non-canonical\*(R" decomposition.  The sequences that form these
decompositions are not considered canonically equivalent to the pre-composed
character.  An example, again in the Latin\-1 range, is the \*(L"\s-1SUPERSCRIPT ONE\*(R".\s0
It is somewhat like a regular digit 1, but not exactly; its decomposition
into the digit 1 is called a \*(L"compatible\*(R" decomposition, specifically a
\&\*(L"super\*(R" decomposition.  There are several such compatibility
decompositions (see <http://www.unicode.org/reports/tr44>), including one
called \*(L"compat\*(R", which means some miscellaneous type of decomposition
that doesn't fit into the decomposition categories that Unicode has chosen.
.Sp
Note that most Unicode characters don't have a decomposition, so their
decomposition type is \*(L"None\*(R".
.Sp
For your convenience, Perl has added the \f(CW\*(C`Non_Canonical\*(C'\fR decomposition
type to mean any of the several compatibility decompositions.
.ie n .IP "\fB\fB""\ep{Graph}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Graph}\fB\fR" 4
.IX Item "p{Graph}"
Matches any character that is graphic.  Theoretically, this means a character
that on a printer would cause ink to be used.
.ie n .IP "\fB\fB""\ep{HorizSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{HorizSpace}\fB\fR" 4
.IX Item "p{HorizSpace}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{Blank}\*(C'\fR:  a character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{In=*}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{In=*}\fB\fR" 4
.IX Item "p{In=*}"
This is a synonym for \f(CW\*(C`\ep{Present_In=*}\*(C'\fR
.ie n .IP "\fB\fB""\ep{PerlSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlSpace}\fB\fR" 4
.IX Item "p{PerlSpace}"
This is the same as \f(CW\*(C`\es\*(C'\fR, restricted to \s-1ASCII,\s0 namely \f(CW\*(C`[\ \ef\en\er\et]\*(C'\fR
and starting in Perl v5.18, experimentally, a vertical tab.
.Sp
Mnemonic: Perl's (original) space
.ie n .IP "\fB\fB""\ep{PerlWord}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlWord}\fB\fR" 4
.IX Item "p{PerlWord}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, restricted to \s-1ASCII,\s0 namely \f(CW\*(C`[A\-Za\-z0\-9_]\*(C'\fR
.Sp
Mnemonic: Perl's (original) word.
.ie n .IP "\fB\fB""\ep{Posix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Posix...}\fB\fR" 4
.IX Item "p{Posix...}"
There are several of these, which are equivalents using the \f(CW\*(C`\ep\*(C'\fR
notation for Posix classes and are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.ie n .IP "\fB\fB""\ep{Present_In: *}""\fB\fR    (Short: ""\ep{In=*}"")" 4
.el .IP "\fB\f(CB\ep{Present_In: *}\fB\fR    (Short: \f(CW\ep{In=*}\fR)" 4
.IX Item "p{Present_In: *} (Short: p{In=*})"
This property is used when you need to know in what Unicode version(s) a
character is.
.Sp
The \*(L"*\*(R" above stands for some two digit Unicode version number, such as
\&\f(CW1.1\fR or \f(CW4.0\fR; or the \*(L"*\*(R" can also be \f(CW\*(C`Unassigned\*(C'\fR.  This property will
match the code points whose final disposition has been settled as of the
Unicode release given by the version number; \f(CW\*(C`\ep{Present_In: Unassigned}\*(C'\fR
will match those code points whose meaning has yet to be assigned.
.Sp
For example, \f(CW\*(C`U+0041\*(C'\fR \*(L"\s-1LATIN CAPITAL LETTER A\*(R"\s0 was present in the very first
Unicode release available, which is \f(CW1.1\fR, so this property is true for all
valid \*(L"*\*(R" versions.  On the other hand, \f(CW\*(C`U+1EFF\*(C'\fR was not assigned until version
5.1 when it became \*(L"\s-1LATIN SMALL LETTER Y WITH LOOP\*(R",\s0 so the only \*(L"*\*(R" that
would match it are 5.1, 5.2, and later.
.Sp
Unicode furnishes the \f(CW\*(C`Age\*(C'\fR property from which this is derived.  The problem
with Age is that a strict interpretation of it (which Perl takes) has it
matching the precise release a code point's meaning is introduced in.  Thus
\&\f(CW\*(C`U+0041\*(C'\fR would match only 1.1; and \f(CW\*(C`U+1EFF\*(C'\fR only 5.1.  This is not usually what
you want.
.Sp
Some non-Perl implementations of the Age property may change its meaning to be
the same as the Perl Present_In property; just be aware of that.
.Sp
Another confusion with both these properties is that the definition is not
that the code point has been \fIassigned\fR, but that the meaning of the code point
has been \fIdetermined\fR.  This is because 66 code points will always be
unassigned, and so the Age for them is the Unicode version in which the decision
to make them so was made.  For example, \f(CW\*(C`U+FDD0\*(C'\fR is to be permanently
unassigned to a character, and the decision to do that was made in version 3.1,
so \f(CW\*(C`\ep{Age=3.1}\*(C'\fR matches this character, as also does \f(CW\*(C`\ep{Present_In: 3.1}\*(C'\fR and up.
.ie n .IP "\fB\fB""\ep{Print}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Print}\fB\fR" 4
.IX Item "p{Print}"
This matches any character that is graphical or blank, except controls.
.ie n .IP "\fB\fB""\ep{SpacePerl}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{SpacePerl}\fB\fR" 4
.IX Item "p{SpacePerl}"
This is the same as \f(CW\*(C`\es\*(C'\fR, including beyond \s-1ASCII.\s0
.Sp
Mnemonic: Space, as modified by Perl.  (It doesn't include the vertical tab
which both the Posix standard and Unicode consider white space.)
.ie n .IP "\fB\fB""\ep{Title}""\fB\fR and  \fB\fB""\ep{Titlecase}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Title}\fB\fR and  \fB\f(CB\ep{Titlecase}\fB\fR" 4
.IX Item "p{Title} and p{Titlecase}"
Under case-sensitive matching, these both match the same code points as
\&\f(CW\*(C`\ep{General Category=Titlecase_Letter}\*(C'\fR (\f(CW\*(C`\ep{gc=lt}\*(C'\fR).  The difference
is that under \f(CW\*(C`/i\*(C'\fR caseless matching, these match the same as
\&\f(CW\*(C`\ep{Cased}\*(C'\fR, whereas \f(CW\*(C`\ep{gc=lt}\*(C'\fR matches \f(CW\*(C`\ep{Cased_Letter\*(C'\fR).
.ie n .IP "\fB\fB""\ep{VertSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{VertSpace}\fB\fR" 4
.IX Item "p{VertSpace}"
This is the same as \f(CW\*(C`\ev\*(C'\fR:  A character that changes the spacing vertically.
.ie n .IP "\fB\fB""\ep{Word}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Word}\fB\fR" 4
.IX Item "p{Word}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, including over 100_000 characters beyond \s-1ASCII.\s0
.ie n .IP "\fB\fB""\ep{XPosix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{XPosix...}\fB\fR" 4
.IX Item "p{XPosix...}"
There are several of these, which are the standard Posix classes
extended to the full Unicode range.  They are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.SS "User-Defined Character Properties"
.IX Subsection "User-Defined Character Properties"
You can define your own binary character properties by defining subroutines
whose names begin with \*(L"In\*(R" or \*(L"Is\*(R".  (The experimental feature
\&\*(L"(?[ ])\*(R" in perlre provides an alternative which allows more complex
definitions.)  The subroutines can be defined in any
package.  The user-defined properties can be used in the regular expression
\&\f(CW\*(C`\ep\*(C'\fR and \f(CW\*(C`\eP\*(C'\fR constructs; if you are using a user-defined property from a
package other than the one you are in, you must specify its package in the
\&\f(CW\*(C`\ep\*(C'\fR or \f(CW\*(C`\eP\*(C'\fR construct.
.PP
.Vb 3
\&    # assuming property Is_Foreign defined in Lang::
\&    package main;  # property package name required
\&    if ($txt =~ /\ep{Lang::IsForeign}+/) { ... }
\&
\&    package Lang;  # property package name not required
\&    if ($txt =~ /\ep{IsForeign}+/) { ... }
.Ve
.PP
Note that the effect is compile-time and immutable once defined.
However, the subroutines are passed a single parameter, which is 0 if
case-sensitive matching is in effect and non-zero if caseless matching
is in effect.  The subroutine may return different values depending on
the value of the flag, and one set of values will immutably be in effect
for all case-sensitive matches, and the other set for all case-insensitive
matches.
.PP
Note that if the regular expression is tainted, then Perl will die rather
than calling the subroutine, where the name of the subroutine is
determined by the tainted data.
.PP
The subroutines must return a specially-formatted string, with one
or more newline-separated lines.  Each line must be one of the following:
.IP "\(bu" 4
A single hexadecimal number denoting a Unicode code point to include.
.IP "\(bu" 4
Two hexadecimal numbers separated by horizontal whitespace (space or
tabular characters) denoting a range of Unicode code points to include.
.IP "\(bu" 4
Something to include, prefixed by \*(L"+\*(R": a built-in character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to exclude, prefixed by \*(L"\-\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to negate, prefixed \*(L"!\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to intersect with, prefixed by \*(L"&\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
for all the characters except the characters in the property; two
hexadecimal code points for a range; or a single hexadecimal code point.
.PP
For example, to define a property that covers both the Japanese
syllabaries (hiragana and katakana), you can define
.PP
.Vb 6
\&    sub InKana {
\&        return <<END;
\&    3040\et309F
\&    30A0\et30FF
\&    END
\&    }
.Ve
.PP
Imagine that the here-doc end marker is at the beginning of the line.
Now you can use \f(CW\*(C`\ep{InKana}\*(C'\fR and \f(CW\*(C`\eP{InKana}\*(C'\fR.
.PP
You could also have used the existing block property names:
.PP
.Vb 6
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    END
\&    }
.Ve
.PP
Suppose you wanted to match only the allocated characters,
not the raw block ranges: in other words, you want to remove
the non-characters:
.PP
.Vb 7
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    \-utf8::IsCn
\&    END
\&    }
.Ve
.PP
The negation is useful for defining (surprise!) negated classes.
.PP
.Vb 7
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    END
\&    }
.Ve
.PP
This will match all non-Unicode code points, since every one of them is
not in Kana.  You can use intersection to exclude these, if desired, as
this modified example shows:
.PP
.Vb 8
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    &utf8::Any
\&    END
\&    }
.Ve
.PP
\&\f(CW&utf8::Any\fR must be the last line in the definition.
.PP
Intersection is used generally for getting the common characters matched
by two (or more) classes.  It's important to remember not to use \*(L"&\*(R" for
the first set; that would be intersecting with nothing, resulting in an
empty set.
.PP
(Note that official Unicode properties differ from these in that they
automatically exclude non-Unicode code points and a warning is raised if
a match is attempted on one of those.)
.SS "User-Defined Case Mappings (for serious hackers only)"
.IX Subsection "User-Defined Case Mappings (for serious hackers only)"
\&\fBThis feature has been removed as of Perl 5.16.\fR
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had.  If you are using a Perl earlier
than 5.16, this feature was most fully documented in the 5.14 version of
this pod:
<http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29>
.SS "Character Encodings for Input and Output"
.IX Subsection "Character Encodings for Input and Output"
See Encode.
.SS "Unicode Regular Expression Support Level"
.IX Subsection "Unicode Regular Expression Support Level"
The following list of Unicode supported features for regular expressions describes
all features currently directly supported by core Perl.  The references to \*(L"Level N\*(R"
and the section numbers refer to the Unicode Technical Standard #18,
\&\*(L"Unicode Regular Expressions\*(R", version 13, from August 2008.
.IP "\(bu" 4
Level 1 \- Basic Unicode Support
.Sp
.Vb 8
\& RL1.1   Hex Notation                     \- done          [1]
\& RL1.2   Properties                       \- done          [2][3]
\& RL1.2a  Compatibility Properties         \- done          [4]
\& RL1.3   Subtraction and Intersection     \- experimental  [5]
\& RL1.4   Simple Word Boundaries           \- done          [6]
\& RL1.5   Simple Loose Matches             \- done          [7]
\& RL1.6   Line Boundaries                  \- MISSING       [8][9]
\& RL1.7   Supplementary Code Points        \- done          [10]
.Ve
.RS 4
.IP "[1]" 4
.IX Item "[1]"
\&\ex{...}
.IP "[2]" 4
.IX Item "[2]"
\&\ep{...} \eP{...}
.IP "[3]" 4
.IX Item "[3]"
supports not only minimal list, but all Unicode character properties (see Unicode Character Properties above)
.IP "[4]" 4
.IX Item "[4]"
\&\ed \eD \es \eS \ew \eW \eX [:prop:] [:^prop:]
.IP "[5]" 4
.IX Item "[5]"
The experimental feature in v5.18 \*(L"(?[...])\*(R" accomplishes this.  See
\&\*(L"(?[ ])\*(R" in perlre.  If you don't want to use an experimental feature,
you can use one of the following:
.RS 4
.IP "\(bu" 4
Regular expression look-ahead
.Sp
You can mimic class subtraction using lookahead.
For example, what UTS#18 might write as
.Sp
.Vb 1
\&    [{Block=Greek}\-[{UNASSIGNED}]]
.Ve
.Sp
in Perl can be written as:
.Sp
.Vb 2
\&    (?!\ep{Unassigned})\ep{Block=Greek}
\&    (?=\ep{Assigned})\ep{Block=Greek}
.Ve
.Sp
But in this particular example, you probably really want
.Sp
.Vb 1
\&    \ep{Greek}
.Ve
.Sp
which will match assigned characters known to be part of the Greek script.
.IP "\(bu" 4
\&\s-1CPAN\s0 module Unicode::Regex::Set
.Sp
It does implement the full UTS#18 grouping, intersection, union, and
removal (subtraction) syntax.
.IP "\(bu" 4
\&\*(L"User-Defined Character Properties\*(R"
.Sp
\&'+' for union, '\-' for removal (set-difference), '&' for intersection
.RE
.RS 4
.RE
.IP "[6]" 4
.IX Item "[6]"
\&\eb \eB
.IP "[7]" 4
.IX Item "[7]"
Note that Perl does Full case-folding in matching (but with bugs), not Simple: for example U+1F88 is equivalent to U+1F00 U+03B9, instead of just U+1F80.  This difference matters mainly for certain Greek capital letters with certain modifiers: the Full case-folding decomposes the letter, while the Simple case-folding would map it to a single character.
.IP "[8]" 4
.IX Item "[8]"
Should do ^ and $ also on U+000B (\ev in C), \s-1FF \s0(\ef), \s-1CR \s0(\er), \s-1CRLF
\&\s0(\er\en), \s-1NEL \s0(U+0085), \s-1LS \s0(U+2028), and \s-1PS \s0(U+2029); should also affect
<>, $., and script line numbers; should not split lines within \s-1CRLF
\&\s0(i.e. there is no empty line between \er and \en).  For \s-1CRLF,\s0 try the
\&\f(CW\*(C`:crlf\*(C'\fR layer (see PerlIO).
.IP "[9]" 4
.IX Item "[9]"
Linebreaking conformant with UAX#14 \*(L"Unicode Line Breaking Algorithm\*(R" is available through the Unicode::LineBreaking module.
.IP "[10]" 4
.IX Item "[10]"
\&\s-1UTF\-8/UTF\-EBDDIC\s0 used in Perl allows not only U+10000 to
U+10FFFF but also beyond U+10FFFF
.RE
.RS 4
.RE
.IP "\(bu" 4
Level 2 \- Extended Unicode Support
.Sp
.Vb 6
\& RL2.1   Canonical Equivalents           \- MISSING       [10][11]
\& RL2.2   Default Grapheme Clusters       \- MISSING       [12]
\& RL2.3   Default Word Boundaries         \- MISSING       [14]
\& RL2.4   Default Loose Matches           \- MISSING       [15]
\& RL2.5   Name Properties                 \- DONE
\& RL2.6   Wildcard Properties             \- MISSING
\&
\& [10] see UAX#15 "Unicode Normalization Forms"
\& [11] have Unicode::Normalize but not integrated to regexes
\& [12] have \eX but we don\*(Aqt have a "Grapheme Cluster Mode"
\& [14] see UAX#29, Word Boundaries
\& [15] This is covered in Chapter 3.13 (in Unicode 6.0)
.Ve
.IP "\(bu" 4
Level 3 \- Tailored Support
.Sp
.Vb 11
\& RL3.1   Tailored Punctuation            \- MISSING
\& RL3.2   Tailored Grapheme Clusters      \- MISSING       [17][18]
\& RL3.3   Tailored Word Boundaries        \- MISSING
\& RL3.4   Tailored Loose Matches          \- MISSING
\& RL3.5   Tailored Ranges                 \- MISSING
\& RL3.6   Context Matching                \- MISSING       [19]
\& RL3.7   Incremental Matches             \- MISSING
\&      ( RL3.8   Unicode Set Sharing )
\& RL3.9   Possible Match Sets             \- MISSING
\& RL3.10  Folded Matching                 \- MISSING       [20]
\& RL3.11  Submatchers                     \- MISSING
\&
\& [17] see UAX#10 "Unicode Collation Algorithms"
\& [18] have Unicode::Collate but not integrated to regexes
\& [19] have (?<=x) and (?=x), but look\-aheads or look\-behinds
\&      should see outside of the target substring
\& [20] need insensitive matching for linguistic features other
\&      than case; for example, hiragana to katakana, wide and
\&      narrow, simplified Han to traditional Han (see UTR#30
\&      "Character Foldings")
.Ve
.SS "Unicode Encodings"
.IX Subsection "Unicode Encodings"
Unicode characters are assigned to \fIcode points\fR, which are abstract
numbers.  To use these numbers, various encodings are needed.
.IP "\(bu" 4
\&\s-1UTF\-8\s0
.Sp
\&\s-1UTF\-8\s0 is a variable-length (1 to 4 bytes), byte-order independent
encoding. For \s-1ASCII \s0(and we really do mean 7\-bit \s-1ASCII,\s0 not another
8\-bit encoding), \s-1UTF\-8\s0 is transparent.
.Sp
The following table is from Unicode 3.2.
.Sp
.Vb 1
\& Code Points            1st Byte  2nd Byte  3rd Byte 4th Byte
\&
\&   U+0000..U+007F       00..7F
\&   U+0080..U+07FF     * C2..DF    80..BF
\&   U+0800..U+0FFF       E0      * A0..BF    80..BF
\&   U+1000..U+CFFF       E1..EC    80..BF    80..BF
\&   U+D000..U+D7FF       ED        80..9F    80..BF
\&   U+D800..U+DFFF       +++++ utf16 surrogates, not legal utf8 +++++
\&   U+E000..U+FFFF       EE..EF    80..BF    80..BF
\&  U+10000..U+3FFFF      F0      * 90..BF    80..BF    80..BF
\&  U+40000..U+FFFFF      F1..F3    80..BF    80..BF    80..BF
\& U+100000..U+10FFFF     F4        80..8F    80..BF    80..BF
.Ve
.Sp
Note the gaps marked by \*(L"*\*(R" before several of the byte entries above.  These are
caused by legal \s-1UTF\-8\s0 avoiding non-shortest encodings: it is technically
possible to UTF\-8\-encode a single code point in different ways, but that is
explicitly forbidden, and the shortest possible encoding should always be used
(and that is what Perl does).
.Sp
Another way to look at it is via bits:
.Sp
.Vb 1
\&                Code Points  1st Byte  2nd Byte  3rd Byte  4th Byte
\&
\&                   0aaaaaaa  0aaaaaaa
\&           00000bbbbbaaaaaa  110bbbbb  10aaaaaa
\&           ccccbbbbbbaaaaaa  1110cccc  10bbbbbb  10aaaaaa
\& 00000dddccccccbbbbbbaaaaaa  11110ddd  10cccccc  10bbbbbb  10aaaaaa
.Ve
.Sp
As you can see, the continuation bytes all begin with \*(L"10\*(R", and the
leading bits of the start byte tell how many bytes there are in the
encoded character.
.Sp
The original \s-1UTF\-8\s0 specification allowed up to 6 bytes, to allow
encoding of numbers up to 0x7FFF_FFFF.  Perl continues to allow those,
and has extended that up to 13 bytes to encode code points up to what
can fit in a 64\-bit word.  However, Perl will warn if you output any of
these as being non-portable; and under strict \s-1UTF\-8\s0 input protocols,
they are forbidden.
.Sp
The Unicode non-character code points are also disallowed in \s-1UTF\-8\s0 in
\&\*(L"open interchange\*(R".  See \*(L"Non-character code points\*(R".
.IP "\(bu" 4
UTF-EBCDIC
.Sp
Like \s-1UTF\-8\s0 but EBCDIC-safe, in the way that \s-1UTF\-8\s0 is ASCII-safe.
.IP "\(bu" 4
\&\s-1UTF\-16, UTF\-16BE, UTF\-16LE,\s0 Surrogates, and BOMs (Byte Order Marks)
.Sp
The followings items are mostly for reference and general Unicode
knowledge, Perl doesn't use these constructs internally.
.Sp
Like \s-1UTF\-8, UTF\-16\s0 is a variable-width encoding, but where
\&\s-1UTF\-8\s0 uses 8\-bit code units, \s-1UTF\-16\s0 uses 16\-bit code units.
All code points occupy either 2 or 4 bytes in \s-1UTF\-16:\s0 code points
\&\f(CW\*(C`U+0000..U+FFFF\*(C'\fR are stored in a single 16\-bit unit, and code
points \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR in two 16\-bit units.  The latter case is
using \fIsurrogates\fR, the first 16\-bit unit being the \fIhigh
surrogate\fR, and the second being the \fIlow surrogate\fR.
.Sp
Surrogates are code points set aside to encode the \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR
range of Unicode code points in pairs of 16\-bit units.  The \fIhigh
surrogates\fR are the range \f(CW\*(C`U+D800..U+DBFF\*(C'\fR and the \fIlow surrogates\fR
are the range \f(CW\*(C`U+DC00..U+DFFF\*(C'\fR.  The surrogate encoding is
.Sp
.Vb 2
\&    $hi = ($uni \- 0x10000) / 0x400 + 0xD800;
\&    $lo = ($uni \- 0x10000) % 0x400 + 0xDC00;
.Ve
.Sp
and the decoding is
.Sp
.Vb 1
\&    $uni = 0x10000 + ($hi \- 0xD800) * 0x400 + ($lo \- 0xDC00);
.Ve
.Sp
Because of the 16\-bitness, \s-1UTF\-16\s0 is byte-order dependent.  \s-1UTF\-16\s0
itself can be used for in-memory computations, but if storage or
transfer is required either \s-1UTF\-16BE \s0(big-endian) or \s-1UTF\-16LE
\&\s0(little-endian) encodings must be chosen.
.Sp
This introduces another problem: what if you just know that your data
is \s-1UTF\-16,\s0 but you don't know which endianness?  Byte Order Marks, or
BOMs, are a solution to this.  A special character has been reserved
in Unicode to function as a byte order marker: the character with the
code point \f(CW\*(C`U+FEFF\*(C'\fR is the \s-1BOM.\s0
.Sp
The trick is that if you read a \s-1BOM,\s0 you will know the byte order,
since if it was written on a big-endian platform, you will read the
bytes \f(CW\*(C`0xFE 0xFF\*(C'\fR, but if it was written on a little-endian platform,
you will read the bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR.  (And if the originating platform
was writing in \s-1UTF\-8,\s0 you will read the bytes \f(CW\*(C`0xEF 0xBB 0xBF\*(C'\fR.)
.Sp
The way this trick works is that the character with the code point
\&\f(CW\*(C`U+FFFE\*(C'\fR is not supposed to be in input streams, so the
sequence of bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR is unambiguously \*(L"\s-1BOM,\s0 represented in
little-endian format\*(R" and cannot be \f(CW\*(C`U+FFFE\*(C'\fR, represented in big-endian
format".
.Sp
Surrogates have no meaning in Unicode outside their use in pairs to
represent other code points.  However, Perl allows them to be
represented individually internally, for example by saying
\&\f(CW\*(C`chr(0xD801)\*(C'\fR, so that all code points, not just those valid for open
interchange, are
representable.  Unicode does define semantics for them, such as their
General Category is \*(L"Cs\*(R".  But because their use is somewhat dangerous,
Perl will warn (using the warning category \*(L"surrogate\*(R", which is a
sub-category of \*(L"utf8\*(R") if an attempt is made
to do things like take the lower case of one, or match
case-insensitively, or to output them.  (But don't try this on Perls
before 5.14.)
.IP "\(bu" 4
\&\s-1UTF\-32, UTF\-32BE, UTF\-32LE\s0
.Sp
The \s-1UTF\-32\s0 family is pretty much like the \s-1UTF\-16\s0 family, expect that
the units are 32\-bit, and therefore the surrogate scheme is not
needed.  \s-1UTF\-32\s0 is a fixed-width encoding.  The \s-1BOM\s0 signatures are
\&\f(CW\*(C`0x00 0x00 0xFE 0xFF\*(C'\fR for \s-1BE\s0 and \f(CW\*(C`0xFF 0xFE 0x00 0x00\*(C'\fR for \s-1LE.\s0
.IP "\(bu" 4
\&\s-1UCS\-2, UCS\-4\s0
.Sp
Legacy, fixed-width encodings defined by the \s-1ISO 10646\s0 standard.  \s-1UCS\-2\s0 is a 16\-bit
encoding.  Unlike \s-1UTF\-16, UCS\-2\s0 is not extensible beyond \f(CW\*(C`U+FFFF\*(C'\fR,
because it does not use surrogates.  \s-1UCS\-4\s0 is a 32\-bit encoding,
functionally identical to \s-1UTF\-32 \s0(the difference being that
\&\s-1UCS\-4\s0 forbids neither surrogates nor code points larger than 0x10_FFFF).
.IP "\(bu" 4
\&\s-1UTF\-7\s0
.Sp
A seven-bit safe (non-eight-bit) encoding, which is useful if the
transport or storage is not eight-bit safe.  Defined by \s-1RFC 2152.\s0
.SS "Non-character code points"
.IX Subsection "Non-character code points"
66 code points are set aside in Unicode as \*(L"non-character code points\*(R".
These all have the Unassigned (Cn) General Category, and they never will
be assigned.  These are never supposed to be in legal Unicode input
streams, so that code can use them as sentinels that can be mixed in
with character data, and they always will be distinguishable from that data.
To keep them out of Perl input streams, strict \s-1UTF\-8\s0 should be
specified, such as by using the layer \f(CW\*(C`:encoding(\*(AqUTF\-8\*(Aq)\*(C'\fR.  The
non-character code points are the 32 between U+FDD0 and U+FDEF, and the
34 code points U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, ... U+10FFFE, U+10FFFF.
Some people are under the mistaken impression that these are \*(L"illegal\*(R",
but that is not true.  An application or cooperating set of applications
can legally use them at will internally; but these code points are
\&\*(L"illegal for open interchange\*(R".  Therefore, Perl will not accept these
from input streams unless lax rules are being used, and will warn
(using the warning category \*(L"nonchar\*(R", which is a sub-category of \*(L"utf8\*(R") if
an attempt is made to output them.
.SS "Beyond Unicode code points"
.IX Subsection "Beyond Unicode code points"
The maximum Unicode code point is U+10FFFF.  But Perl accepts code
points up to the maximum permissible unsigned number available on the
platform.  However, Perl will not accept these from input streams unless
lax rules are being used, and will warn (using the warning category
\&\*(L"non_unicode\*(R", which is a sub-category of \*(L"utf8\*(R") if an attempt is made to
operate on or output them.  For example, \f(CW\*(C`uc(0x11_0000)\*(C'\fR will generate
this warning, returning the input parameter as its result, as the upper
case of every non-Unicode code point is the code point itself.
.SS "Security Implications of Unicode"
.IX Subsection "Security Implications of Unicode"
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
Also, note the following:
.IP "\(bu" 4
Malformed \s-1UTF\-8\s0
.Sp
Unfortunately, the original specification of \s-1UTF\-8\s0 leaves some room for
interpretation of how many bytes of encoded output one should generate
from one input Unicode character.  Strictly speaking, the shortest
possible sequence of \s-1UTF\-8\s0 bytes should be generated,
because otherwise there is potential for an input buffer overflow at
the receiving end of a \s-1UTF\-8\s0 connection.  Perl always generates the
shortest length \s-1UTF\-8,\s0 and with warnings on, Perl will warn about
non-shortest length \s-1UTF\-8\s0 along with other malformations, such as the
surrogates, which are not Unicode code points valid for interchange.
.IP "\(bu" 4
Regular expression pattern matching may surprise you if you're not
accustomed to Unicode.  Starting in Perl 5.14, several pattern
modifiers are available to control this, called the character set
modifiers.  Details are given in \*(L"Character set modifiers\*(R" in perlre.
.PP
As discussed elsewhere, Perl has one foot (two hooves?) planted in
each of two worlds: the old world of bytes and the new world of
characters, upgrading from bytes to characters when necessary.
If your legacy code does not explicitly use Unicode, no automatic
switch-over to characters should happen.  Characters shouldn't get
downgraded to bytes, either.  It is possible to accidentally mix bytes
and characters, however (see perluniintro), in which case \f(CW\*(C`\ew\*(C'\fR in
regular expressions might start behaving differently (unless the \f(CW\*(C`/a\*(C'\fR
modifier is in effect).  Review your code.  Use warnings and the \f(CW\*(C`strict\*(C'\fR pragma.
.SS "Unicode in Perl on \s-1EBCDIC\s0"
.IX Subsection "Unicode in Perl on EBCDIC"
The way Unicode is handled on \s-1EBCDIC\s0 platforms is still
experimental.  On such platforms, references to \s-1UTF\-8\s0 encoding in this
document and elsewhere should be read as meaning the UTF-EBCDIC
specified in Unicode Technical Report 16, unless \s-1ASCII\s0 vs. \s-1EBCDIC\s0 issues
are specifically discussed. There is no \f(CW\*(C`utfebcdic\*(C'\fR pragma or
\&\*(L":utfebcdic\*(R" layer; rather, \*(L"utf8\*(R" and \*(L":utf8\*(R" are reused to mean
the platform's \*(L"natural\*(R" 8\-bit encoding of Unicode. See perlebcdic
for more discussion of the issues.
.SS "Locales"
.IX Subsection "Locales"
See \*(L"Unicode and \s-1UTF\-8\*(R"\s0 in perllocale
.SS "When Unicode Does Not Happen"
.IX Subsection "When Unicode Does Not Happen"
While Perl does have extensive ways to input and output in Unicode,
and a few other \*(L"entry points\*(R" like the \f(CW@ARGV\fR array (which can sometimes be
interpreted as \s-1UTF\-8\s0), there are still many places where Unicode
(in some encoding or another) could be given as arguments or received as
results, or both, but it is not.
.PP
The following are such interfaces.  Also, see \*(L"The \*(R"Unicode Bug"".
For all of these interfaces Perl
currently (as of v5.16.0) simply assumes byte strings both as arguments
and results, or \s-1UTF\-8\s0 strings if the (problematic) \f(CW\*(C`encoding\*(C'\fR pragma has been used.
.PP
One reason that Perl does not attempt to resolve the role of Unicode in
these situations is that the answers are highly dependent on the operating
system and the file system(s).  For example, whether filenames can be
in Unicode and in exactly what kind of encoding, is not exactly a
portable concept.  Similarly for \f(CW\*(C`qx\*(C'\fR and \f(CW\*(C`system\*(C'\fR: how well will the
\&\*(L"command-line interface\*(R" (and which of them?) handle Unicode?
.IP "\(bu" 4
chdir, chmod, chown, chroot, exec, link, lstat, mkdir,
rename, rmdir, stat, symlink, truncate, unlink, utime, \-X
.IP "\(bu" 4
\&\f(CW%ENV\fR
.IP "\(bu" 4
glob (aka the <*>)
.IP "\(bu" 4
open, opendir, sysopen
.IP "\(bu" 4
qx (aka the backtick operator), system
.IP "\(bu" 4
readdir, readlink
.ie n .SS "The ""Unicode Bug"""
.el .SS "The ``Unicode Bug''"
.IX Subsection "The Unicode Bug"
The term, \*(L"Unicode bug\*(R" has been applied to an inconsistency
on \s-1ASCII\s0 platforms with the
Unicode code points in the Latin\-1 Supplement block, that
is, between 128 and 255.  Without a locale specified, unlike all other
characters or code points, these characters have very different semantics in
byte semantics versus character semantics, unless
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified, directly or indirectly.
(It is indirectly specified by a \f(CW\*(C`use v5.12\*(C'\fR or higher.)
.PP
In character semantics these upper\-Latin1 characters are interpreted as
Unicode code points, which means
they have the same semantics as Latin\-1 (\s-1ISO\-8859\-1\s0).
.PP
In byte semantics (without \f(CW\*(C`unicode_strings\*(C'\fR), they are considered to
be unassigned characters, meaning that the only semantics they have is
their ordinal numbers, and that they are
not members of various character classes.  None are considered to match \f(CW\*(C`\ew\*(C'\fR
for example, but all match \f(CW\*(C`\eW\*(C'\fR.
.PP
Perl 5.12.0 added \f(CW\*(C`unicode_strings\*(C'\fR to force character semantics on
these code points in some circumstances, which fixed portions of the
bug; Perl 5.14.0 fixed almost all of it; and Perl 5.16.0 fixed the
remainder (so far as we know, anyway).  The lesson here is to enable
\&\f(CW\*(C`unicode_strings\*(C'\fR to avoid the headaches described below.
.PP
The old, problematic behavior affects these areas:
.IP "\(bu" 4
Changing the case of a scalar, that is, using \f(CW\*(C`uc()\*(C'\fR, \f(CW\*(C`ucfirst()\*(C'\fR, \f(CW\*(C`lc()\*(C'\fR,
and \f(CW\*(C`lcfirst()\*(C'\fR, or \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR and \f(CW\*(C`\el\*(C'\fR in double-quotish
contexts, such as regular expression substitutions.
Under \f(CW\*(C`unicode_strings\*(C'\fR starting in Perl 5.12.0, character semantics are
generally used.  See \*(L"lc\*(R" in perlfunc for details on how this works
in combination with various other pragmas.
.IP "\(bu" 4
Using caseless (\f(CW\*(C`/i\*(C'\fR) regular expression matching.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
Matching any of several properties in regular expressions, namely \f(CW\*(C`\eb\*(C'\fR,
\&\f(CW\*(C`\eB\*(C'\fR, \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\eS\*(C'\fR, \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\eW\*(C'\fR, and all the Posix character classes
\&\fIexcept\fR \f(CW\*(C`[[:ascii:]]\*(C'\fR.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
In \f(CW\*(C`quotemeta\*(C'\fR or its inline equivalent \f(CW\*(C`\eQ\*(C'\fR, no code points above 127
are quoted in \s-1UTF\-8\s0 encoded strings, but in byte encoded strings, code
points between 128\-255 are always quoted.
Starting in Perl 5.16.0, consistent quoting rules are used within the
scope of \f(CW\*(C`unicode_strings\*(C'\fR, as described in \*(L"quotemeta\*(R" in perlfunc.
.PP
This behavior can lead to unexpected results in which a string's semantics
suddenly change if a code point above 255 is appended to or removed from it,
which changes the string's semantics from byte to character or vice versa.  As
an example, consider the following program and its output:
.PP
.Vb 11
\& $ perl \-le\*(Aq
\&     no feature \*(Aqunicode_strings\*(Aq;
\&     $s1 = "\exC2";
\&     $s2 = "\ex{2660}";
\&     for ($s1, $s2, $s1.$s2) {
\&         print /\ew/ || 0;
\&     }
\& \*(Aq
\& 0
\& 0
\& 1
.Ve
.PP
If there's no \f(CW\*(C`\ew\*(C'\fR in \f(CW\*(C`s1\*(C'\fR or in \f(CW\*(C`s2\*(C'\fR, why does their concatenation have one?
.PP
This anomaly stems from Perl's attempt to not disturb older programs that
didn't use Unicode, and hence had no semantics for characters outside of the
\&\s-1ASCII\s0 range (except in a locale), along with Perl's desire to add Unicode
support seamlessly.  The result wasn't seamless: these characters were
orphaned.
.PP
For Perls earlier than those described above, or when a string is passed
to a function outside the subpragma's scope, a workaround is to always
call \f(CW\*(C`utf8::upgrade($string)\*(C'\fR,
or to use the standard module Encode.   Also, a scalar that has any characters
whose ordinal is above 0x100, or which were specified using either of the
\&\f(CW\*(C`\eN{...}\*(C'\fR notations, will automatically have character semantics.
.SS "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
.IX Subsection "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
Sometimes (see \*(L"When Unicode Does Not Happen\*(R" or \*(L"The \*(R"Unicode Bug"")
there are situations where you simply need to force a byte
string into \s-1UTF\-8,\s0 or vice versa.  The low-level calls
utf8::upgrade($bytestring) and utf8::downgrade($utf8string[, \s-1FAIL_OK\s0]) are
the answers.
.PP
Note that \fIutf8::downgrade()\fR can fail if the string contains characters
that don't fit into a byte.
.PP
Calling either function on a string that already is in the desired state is a
no-op.
.SS "Using Unicode in \s-1XS\s0"
.IX Subsection "Using Unicode in XS"
If you want to handle Perl Unicode in \s-1XS\s0 extensions, you may find the
following C APIs useful.  See also \*(L"Unicode Support\*(R" in perlguts for an
explanation about Unicode at the \s-1XS\s0 level, and perlapi for the \s-1API\s0
details.
.IP "\(bu" 4
\&\f(CW\*(C`DO_UTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR flag is on and the bytes
pragma is not in effect.  \f(CW\*(C`SvUTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR
flag is on; the bytes pragma is ignored.  The \f(CW\*(C`UTF8\*(C'\fR flag being on
does \fBnot\fR mean that there are any characters of code points greater
than 255 (or 127) in the scalar or that there are even any characters
in the scalar.  What the \f(CW\*(C`UTF8\*(C'\fR flag means is that the sequence of
octets in the representation of the scalar is the sequence of \s-1UTF\-8\s0
encoded code points of the characters of a string.  The \f(CW\*(C`UTF8\*(C'\fR flag
being off means that each octet in this representation encodes a
single character with code point 0..255 within the string.  Perl's
Unicode model is not to use \s-1UTF\-8\s0 until it is absolutely necessary.
.IP "\(bu" 4
\&\f(CW\*(C`uvchr_to_utf8(buf, chr)\*(C'\fR writes a Unicode character code point into
a buffer encoding the code point as \s-1UTF\-8,\s0 and returns a pointer
pointing after the \s-1UTF\-8\s0 bytes.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_to_uvchr_buf(buf, bufend, lenp)\*(C'\fR reads \s-1UTF\-8\s0 encoded bytes from a
buffer and
returns the Unicode character code point and, optionally, the length of
the \s-1UTF\-8\s0 byte sequence.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_length(start, end)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded buffer
in characters.  \f(CW\*(C`sv_len_utf8(sv)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded
scalar.
.IP "\(bu" 4
\&\f(CW\*(C`sv_utf8_upgrade(sv)\*(C'\fR converts the string of the scalar to its \s-1UTF\-8\s0
encoded form.  \f(CW\*(C`sv_utf8_downgrade(sv)\*(C'\fR does the opposite, if
possible.  \f(CW\*(C`sv_utf8_encode(sv)\*(C'\fR is like sv_utf8_upgrade except that
it does not set the \f(CW\*(C`UTF8\*(C'\fR flag.  \f(CW\*(C`sv_utf8_decode()\*(C'\fR does the
opposite of \f(CW\*(C`sv_utf8_encode()\*(C'\fR.  Note that none of these are to be
used as general-purpose encoding or decoding interfaces: \f(CW\*(C`use Encode\*(C'\fR
for that.  \f(CW\*(C`sv_utf8_upgrade()\*(C'\fR is affected by the encoding pragma
but \f(CW\*(C`sv_utf8_downgrade()\*(C'\fR is not (since the encoding pragma is
designed to be a one-way street).
.IP "\(bu" 4
\&\f(CW\*(C`is_utf8_string(buf, len)\*(C'\fR returns true if \f(CW\*(C`len\*(C'\fR bytes of the buffer
are valid \s-1UTF\-8.\s0
.IP "\(bu" 4
\&\f(CW\*(C`is_utf8_char_buf(buf, buf_end)\*(C'\fR returns true if the pointer points to
a valid \s-1UTF\-8\s0 character.
.IP "\(bu" 4
\&\f(CW\*(C`UTF8SKIP(buf)\*(C'\fR will return the number of bytes in the \s-1UTF\-8\s0 encoded
character in the buffer.  \f(CW\*(C`UNISKIP(chr)\*(C'\fR will return the number of bytes
required to UTF\-8\-encode the Unicode character code point.  \f(CW\*(C`UTF8SKIP()\*(C'\fR
is useful for example for iterating over the characters of a \s-1UTF\-8\s0
encoded buffer; \f(CW\*(C`UNISKIP()\*(C'\fR is useful, for example, in computing
the size required for a \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_distance(a, b)\*(C'\fR will tell the distance in characters between the
two pointers pointing to the same \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_hop(s, off)\*(C'\fR will return a pointer to a \s-1UTF\-8\s0 encoded buffer
that is \f(CW\*(C`off\*(C'\fR (positive or negative) Unicode characters displaced
from the \s-1UTF\-8\s0 buffer \f(CW\*(C`s\*(C'\fR.  Be careful not to overstep the buffer:
\&\f(CW\*(C`utf8_hop()\*(C'\fR will merrily run off the end or the beginning of the
buffer if told to do so.
.IP "\(bu" 4
\&\f(CW\*(C`pv_uni_display(dsv, spv, len, pvlim, flags)\*(C'\fR and
\&\f(CW\*(C`sv_uni_display(dsv, ssv, pvlim, flags)\*(C'\fR are useful for debugging the
output of Unicode strings and scalars.  By default they are useful
only for debugging\*(--they display \fBall\fR characters as hexadecimal code
points\*(--but with the flags \f(CW\*(C`UNI_DISPLAY_ISPRINT\*(C'\fR,
\&\f(CW\*(C`UNI_DISPLAY_BACKSLASH\*(C'\fR, and \f(CW\*(C`UNI_DISPLAY_QQ\*(C'\fR you can make the
output more readable.
.IP "\(bu" 4
\&\f(CW\*(C`foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2)\*(C'\fR can be used to
compare two strings case-insensitively in Unicode.  For case-sensitive
comparisons you can just use \f(CW\*(C`memEQ()\*(C'\fR and \f(CW\*(C`memNE()\*(C'\fR as usual, except
if one string is in utf8 and the other isn't.
.PP
For more information, see perlapi, and \fIutf8.c\fR and \fIutf8.h\fR
in the Perl source code distribution.
.SS "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
.IX Subsection "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
Perl by default comes with the latest supported Unicode version built in, but
you can change to use any earlier one.
.PP
Download the files in the desired version of Unicode from the Unicode web
site <http://www.unicode.org>).  These should replace the existing files in
\&\fIlib/unicore\fR in the Perl source tree.  Follow the instructions in
\&\fI\s-1README\s0.perl\fR in that directory to change some of their names, and then build
perl (see \s-1INSTALL\s0).
.SH "BUGS"
.IX Header "BUGS"
.SS "Interaction with Locales"
.IX Subsection "Interaction with Locales"
See \*(L"Unicode and \s-1UTF\-8\*(R"\s0 in perllocale
.SS "Problems with characters in the Latin\-1 Supplement range"
.IX Subsection "Problems with characters in the Latin-1 Supplement range"
See \*(L"The \*(R"Unicode Bug""
.SS "Interaction with Extensions"
.IX Subsection "Interaction with Extensions"
When Perl exchanges data with an extension, the extension should be
able to understand the \s-1UTF8\s0 flag and act accordingly. If the
extension doesn't recognize that flag, it's likely that the extension
will return incorrectly-flagged data.
.PP
So if you're working with Unicode data, consult the documentation of
every module you're using if there are any issues with Unicode data
exchange. If the documentation does not talk about Unicode at all,
suspect the worst and probably look at the source to learn how the
module is implemented. Modules written completely in Perl shouldn't
cause problems. Modules that directly or indirectly access code written
in other programming languages are at risk.
.PP
For affected functions, the simple strategy to avoid data corruption is
to always make the encoding of the exchanged data explicit. Choose an
encoding that you know the extension can handle. Convert arguments passed
to the extensions to that encoding and convert results back from that
encoding. Write wrapper functions that do the conversions for you, so
you can later change the functions when the extension catches up.
.PP
To provide an example, let's say the popular Foo::Bar::escape_html
function doesn't deal with Unicode data yet. The wrapper function
would convert the argument to raw \s-1UTF\-8\s0 and convert the result back to
Perl's internal representation like so:
.PP
.Vb 6
\&    sub my_escape_html ($) {
\&        my($what) = shift;
\&        return unless defined $what;
\&        Encode::decode_utf8(Foo::Bar::escape_html(
\&                                         Encode::encode_utf8($what)));
\&    }
.Ve
.PP
Sometimes, when the extension does not convert data but just stores
and retrieves them, you will be able to use the otherwise
dangerous \fIEncode::_utf8_on()\fR function. Let's say the popular
\&\f(CW\*(C`Foo::Bar\*(C'\fR extension, written in C, provides a \f(CW\*(C`param\*(C'\fR method that
lets you store and retrieve data according to these prototypes:
.PP
.Vb 2
\&    $self\->param($name, $value);            # set a scalar
\&    $value = $self\->param($name);           # retrieve a scalar
.Ve
.PP
If it does not yet provide support for any encoding, one could write a
derived class with such a \f(CW\*(C`param\*(C'\fR method:
.PP
.Vb 12
\&    sub param {
\&      my($self,$name,$value) = @_;
\&      utf8::upgrade($name);     # make sure it is UTF\-8 encoded
\&      if (defined $value) {
\&        utf8::upgrade($value);  # make sure it is UTF\-8 encoded
\&        return $self\->SUPER::param($name,$value);
\&      } else {
\&        my $ret = $self\->SUPER::param($name);
\&        Encode::_utf8_on($ret); # we know, it is UTF\-8 encoded
\&        return $ret;
\&      }
\&    }
.Ve
.PP
Some extensions provide filters on data entry/exit points, such as
DB_File::filter_store_key and family. Look out for such filters in
the documentation of your extensions, they can make the transition to
Unicode data much easier.
.SS "Speed"
.IX Subsection "Speed"
Some functions are slower when working on \s-1UTF\-8\s0 encoded strings than
on byte encoded strings.  All functions that need to hop over
characters such as \fIlength()\fR, \fIsubstr()\fR or \fIindex()\fR, or matching regular
expressions can work \fBmuch\fR faster when the underlying data are
byte-encoded.
.PP
In Perl 5.8.0 the slowness was often quite spectacular; in Perl 5.8.1
a caching scheme was introduced which will hopefully make the slowness
somewhat less spectacular, at least for some operations.  In general,
operations with \s-1UTF\-8\s0 encoded strings are still slower. As an example,
the Unicode properties (character classes) like \f(CW\*(C`\ep{Nd}\*(C'\fR are known to
be quite a bit slower (5\-20 times) than their simpler counterparts
like \f(CW\*(C`\ed\*(C'\fR (then again, there are hundreds of Unicode characters matching \f(CW\*(C`Nd\*(C'\fR
compared with the 10 \s-1ASCII\s0 characters matching \f(CW\*(C`d\*(C'\fR).
.SS "Problems on \s-1EBCDIC\s0 platforms"
.IX Subsection "Problems on EBCDIC platforms"
There are several known problems with Perl on \s-1EBCDIC\s0 platforms.  If you
want to use Perl there, send email to perlbug@perl.org.
.PP
In earlier versions, when byte and character data were concatenated,
the new string was sometimes created by
decoding the byte strings as \fI\s-1ISO 8859\-1 \s0(Latin\-1)\fR, even if the
old Unicode string used \s-1EBCDIC.\s0
.PP
If you find any of these, please report them as bugs.
.SS "Porting code from perl\-5.6.X"
.IX Subsection "Porting code from perl-5.6.X"
Perl 5.8 has a different Unicode model from 5.6. In 5.6 the programmer
was required to use the \f(CW\*(C`utf8\*(C'\fR pragma to declare that a given scope
expected to deal with Unicode data and had to make sure that only
Unicode data were reaching that scope. If you have code that is
working with 5.6, you will need some of the following adjustments to
your code. The examples are written such that the code will continue
to work under 5.6, so you should be safe to try them out.
.IP "\(bu" 3
A filehandle that should read or write \s-1UTF\-8\s0
.Sp
.Vb 3
\&  if ($] > 5.008) {
\&    binmode $fh, ":encoding(utf8)";
\&  }
.Ve
.IP "\(bu" 3
A scalar that is going to be passed to some extension
.Sp
Be it Compress::Zlib, Apache::Request or any extension that has no
mention of Unicode in the manpage, you need to make sure that the
\&\s-1UTF8\s0 flag is stripped off. Note that at the time of this writing
(January 2012) the mentioned modules are not UTF\-8\-aware. Please
check the documentation to verify if this is still true.
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    $val = Encode::encode_utf8($val); # make octets
\&  }
.Ve
.IP "\(bu" 3
A scalar we got back from an extension
.Sp
If you believe the scalar comes back as \s-1UTF\-8,\s0 you will most likely
want the \s-1UTF8\s0 flag restored:
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    $val = Encode::decode_utf8($val);
\&  }
.Ve
.IP "\(bu" 3
Same thing, if you are really sure it is \s-1UTF\-8\s0
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    Encode::_utf8_on($val);
\&  }
.Ve
.IP "\(bu" 3
A wrapper for fetchrow_array and fetchrow_hashref
.Sp
When the database contains only \s-1UTF\-8,\s0 a wrapper function or method is
a convenient way to replace all your fetchrow_array and
fetchrow_hashref calls. A wrapper function will also make it easier to
adapt to future enhancements in your database driver. Note that at the
time of this writing (January 2012), the \s-1DBI\s0 has no standardized way
to deal with \s-1UTF\-8\s0 data. Please check the documentation to verify if
that is still true.
.Sp
.Vb 10
\&  sub fetchrow {
\&    # $what is one of fetchrow_{array,hashref}
\&    my($self, $sth, $what) = @_;
\&    if ($] < 5.008) {
\&      return $sth\->$what;
\&    } else {
\&      require Encode;
\&      if (wantarray) {
\&        my @arr = $sth\->$what;
\&        for (@arr) {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_);
\&        }
\&        return @arr;
\&      } else {
\&        my $ret = $sth\->$what;
\&        if (ref $ret) {
\&          for my $k (keys %$ret) {
\&            defined
\&            && /[^\e000\-\e177]/
\&            && Encode::_utf8_on($_) for $ret\->{$k};
\&          }
\&          return $ret;
\&        } else {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_) for $ret;
\&          return $ret;
\&        }
\&      }
\&    }
\&  }
.Ve
.IP "\(bu" 3
A large scalar that you know can only contain \s-1ASCII\s0
.Sp
Scalars that contain only \s-1ASCII\s0 and are marked as \s-1UTF\-8\s0 are sometimes
a drag to your program. If you recognize such a situation, just remove
the \s-1UTF8\s0 flag:
.Sp
.Vb 1
\&  utf8::downgrade($val) if $] > 5.008;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunitut, perluniintro, perluniprops, Encode, open, utf8, bytes,
perlretut, \*(L"${^UNICODE}\*(R" in perlvar
<http://www.unicode.org/reports/tr44>).
