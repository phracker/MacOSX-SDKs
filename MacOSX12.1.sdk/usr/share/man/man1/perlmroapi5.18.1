.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMROAPI 1"
.TH PERLMROAPI 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmroapi \- Perl method resolution plugin interface
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface.
.PP
Each plugin should register itself by providing
the following structure
.PP
.Vb 7
\&    struct mro_alg {
\&        AV *(*resolve)(pTHX_ HV *stash, U32 level);
\&        const char *name;
\&        U16 length;
\&        U16 kflags;
\&        U32 hash;
\&    };
.Ve
.PP
and calling \f(CW\*(C`Perl_mro_register\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_register(aTHX_ &my_mro_alg);
.Ve
.IP "resolve" 4
.IX Item "resolve"
Pointer to the linearisation function, described below.
.IP "name" 4
.IX Item "name"
Name of the \s-1MRO,\s0 either in \s-1ISO\-8859\-1\s0 or \s-1UTF\-8.\s0
.IP "length" 4
.IX Item "length"
Length of the name.
.IP "kflags" 4
.IX Item "kflags"
If the name is given in \s-1UTF\-8,\s0 set this to \f(CW\*(C`HVhek_UTF8\*(C'\fR. The value is passed
direct as the parameter \fIkflags\fR to \f(CW\*(C`hv_common()\*(C'\fR.
.IP "hash" 4
.IX Item "hash"
A precomputed hash value for the \s-1MRO\s0's name, or 0.
.SH "Callbacks"
.IX Header "Callbacks"
The \f(CW\*(C`resolve\*(C'\fR function is called to generate a linearised \s-1ISA\s0 for the
given stash, using this \s-1MRO.\s0 It is called with a pointer to the stash, and
a \fIlevel\fR of 0. The core always sets \fIlevel\fR to 0 when it calls your
function \- the parameter is provided to allow your implementation to track
depth if it needs to recurse.
.PP
The function should return a reference to an array containing the parent
classes in order. The names of the classes should be the result of calling
\&\f(CW\*(C`HvENAME()\*(C'\fR on the stash. In those cases where \f(CW\*(C`HvENAME()\*(C'\fR returns null,
\&\f(CW\*(C`HvNAME()\*(C'\fR should be used instead.
.PP
The caller is responsible for incrementing the reference count of the array
returned if it wants to keep the structure. Hence, if you have created a
temporary value that you keep no pointer to, \f(CW\*(C`sv_2mortal()\*(C'\fR to ensure that
it is disposed of correctly. If you have cached your return value, then
return a pointer to it without changing the reference count.
.SH "Caching"
.IX Header "Caching"
Computing MROs can be expensive. The implementation provides a cache, in
which you can store a single \f(CW\*(C`SV *\*(C'\fR, or anything that can be cast to
\&\f(CW\*(C`SV *\*(C'\fR, such as \f(CW\*(C`AV *\*(C'\fR. To read your private value, use the macro
\&\f(CW\*(C`MRO_GET_PRIVATE_DATA()\*(C'\fR, passing it the \f(CW\*(C`mro_meta\*(C'\fR structure from the
stash, and a pointer to your \f(CW\*(C`mro_alg\*(C'\fR structure:
.PP
.Vb 2
\&    meta = HvMROMETA(stash);
\&    private_sv = MRO_GET_PRIVATE_DATA(meta, &my_mro_alg);
.Ve
.PP
To set your private value, call \f(CW\*(C`Perl_mro_set_private_data()\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_set_private_data(aTHX_ meta, &c3_alg, private_sv);
.Ve
.PP
The private data cache will take ownership of a reference to private_sv,
much the same way that \f(CW\*(C`hv_store()\*(C'\fR takes ownership of a reference to the
value that you pass it.
.SH "Examples"
.IX Header "Examples"
For examples of \s-1MRO\s0 implementations, see \f(CW\*(C`S_mro_get_linear_isa_c3()\*(C'\fR
and the \f(CW\*(C`BOOT:\*(C'\fR section of \fImro/mro.xs\fR, and \f(CW\*(C`S_mro_get_linear_isa_dfs()\*(C'\fR
in \fImro.c\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
The implementation of the C3 \s-1MRO\s0 and switchable MROs within the perl core was
written by Brandon L Black. Nicholas Clark created the pluggable interface, 
refactored Brandon's implementation to work with it, and wrote this document.
