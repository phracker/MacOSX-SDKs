.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PARL 1"
.TH PARL 1 "2020-03-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
parl \- Binary PAR Loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
(Please see pp for convenient ways to make self-contained
executables, scripts or \s-1PAR\s0 archives from perl programs.)
.PP
To make a \fI\s-1PAR\s0 distribution\fR from a \s-1CPAN\s0 module distribution:
.PP
.Vb 2
\&    % parl \-p                 # make a PAR dist under the current path
\&    % parl \-p Foo\-0.01        # assume unpacked CPAN dist in Foo\-0.01/
.Ve
.PP
To manipulate a \fI\s-1PAR\s0 distribution\fR:
.PP
.Vb 6
\&    % parl \-i Foo\-0.01\-i386\-freebsd\-5.8.0.par   # install
\&    % parl \-i http://foo.com/Foo\-0.01           # auto\-appends archname + perlver
\&    % parl \-i cpan://AUTRIJUS/PAR\-0.74          # uses CPAN author directory
\&    % parl \-u Foo\-0.01\-i386\-freebsd\-5.8.0.par   # uninstall
\&    % parl \-s Foo\-0.01\-i386\-freebsd\-5.8.0.par   # sign
\&    % parl \-v Foo\-0.01\-i386\-freebsd\-5.8.0.par   # verify
.Ve
.PP
To use \fIHello.pm\fR from \fI./foo.par\fR:
.PP
.Vb 2
\&    % parl \-A./foo.par \-MHello 
\&    % parl \-A./foo \-MHello      # the .par part is optional
.Ve
.PP
Same thing, but search \fIfoo.par\fR in the \fI\f(CI@INC\fI\fR;
.PP
.Vb 2
\&    % parl \-Ifoo.par \-MHello 
\&    % parl \-Ifoo \-MHello        # ditto
.Ve
.PP
Run \fItest.pl\fR or \fIscript/test.pl\fR from \fIfoo.par\fR:
.PP
.Vb 2
\&    % parl foo.par test.pl      # looks for \*(Aqmain.pl\*(Aq by default,
\&                                # otherwise run \*(Aqtest.pl\*(Aq
.Ve
.PP
To make a self-containing executable containing a \s-1PAR\s0 file :
.PP
.Vb 2
\&    % parl \-O./foo foo.par
\&    % ./foo test.pl             # same as above
.Ve
.PP
To embed the necessary non-core modules and shared objects for \s-1PAR\s0's
execution (like \f(CW\*(C`Zlib\*(C'\fR, \f(CW\*(C`IO\*(C'\fR, \f(CW\*(C`Cwd\*(C'\fR, etc), use the \fB\-b\fR flag:
.PP
.Vb 2
\&    % parl \-b \-O./foo foo.par
\&    % ./foo test.pl             # runs anywhere with core modules installed
.Ve
.PP
If you also wish to embed \fIcore\fR modules along, use the \fB\-B\fR flag
instead:
.PP
.Vb 2
\&    % parl \-B \-O./foo foo.par
\&    % ./foo test.pl             # runs anywhere with the perl interpreter
.Ve
.PP
This is particularly useful when making stand-alone binary
executables; see pp for details.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This stand-alone command offers roughly the same feature as \f(CW\*(C`perl
\&\-MPAR\*(C'\fR, except that it takes the pre-loaded \fI.par\fR files via
\&\f(CW\*(C`\-Afoo.par\*(C'\fR instead of \f(CW\*(C`\-MPAR=foo.par\*(C'\fR.
.PP
Additionally, it lets you convert a \s-1CPAN\s0 distribution to a \s-1PAR\s0
distribution, as well as manipulate such distributions.  For more
information about \s-1PAR\s0 distributions, see PAR::Dist.
.PP
You can use it to run \fI.par\fR files:
.PP
.Vb 3
\&    # runs script/run.pl in archive, uses its lib/* as libraries
\&    % parl myapp.par run.pl     # runs run.pl or script/run.pl in myapp.par
\&    % parl otherapp.pl          # also runs normal perl scripts
.Ve
.PP
However, if the \fI.par\fR archive contains either \fImain.pl\fR or
\&\fIscript/main.pl\fR, it is used instead:
.PP
.Vb 1
\&    % parl myapp.par run.pl     # runs main.pl, with \*(Aqrun.pl\*(Aq as @ARGV
.Ve
.PP
Finally, the \f(CW\*(C`\-O\*(C'\fR option makes a stand-alone binary executable from a
\&\s-1PAR\s0 file:
.PP
.Vb 2
\&    % parl \-B \-Omyapp myapp.par
\&    % ./myapp                   # run it anywhere without perl binaries
.Ve
.PP
With the \f(CW\*(C`\-\-par\-options\*(C'\fR flag, generated binaries can act as \f(CW\*(C`parl\*(C'\fR
to pack new binaries:
.PP
.Vb 2
\&    % ./myapp \-\-par\-options \-Omyap2 myapp.par   # identical to ./myapp
\&    % ./myapp \-\-par\-options \-Omyap3 myap3.par   # now with different PAR
.Ve
.PP
For an explanation of stand-alone executable format, please see par.pl.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1PAR\s0, PAR::Dist, par.pl, pp
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>
.PP
You can write
to the mailing list at <par@perl.org>, or send an empty mail to
<par\-subscribe@perl.org> to participate in the discussion.
.PP
Please submit bug reports to <bug\-par\-packer@rt.cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2009 by Audrey Tang
<cpan@audreyt.org>.
.PP
Neither this program nor the associated pp program impose any
licensing restrictions on files generated by their execution, in
accordance with the 8th article of the Artistic License:
.PP
.Vb 5
\&    "Aggregation of this Package with a commercial distribution is
\&    always permitted provided that the use of this Package is embedded;
\&    that is, when no overt attempt is made to make this Package\*(Aqs
\&    interfaces visible to the end user of the commercial distribution.
\&    Such use shall not be construed as a distribution of this Package."
.Ve
.PP
Therefore, you are absolutely free to place any license on the resulting
executable, as long as the packed 3rd\-party libraries are also available
under the Artistic License.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See \fI\s-1LICENSE\s0\fR.
