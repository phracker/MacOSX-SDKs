.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PP 1"
.TH PP 1 "2020-03-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pp \- PAR Packager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBpp\fR [ \fB\-ABCEFILMPTSVXacdefghilmnoprsuvxz\fR ] [ \fIparfile\fR | \fIscriptfile\fR ]...
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Note: When running on Microsoft Windows, the \fIa.out\fR below will be
replaced by \fIa.exe\fR instead.
.PP
.Vb 3
\&    % pp hello.pl               # Pack \*(Aqhello.pl\*(Aq into executable \*(Aqa.out\*(Aq
\&    % pp \-o hello hello.pl      # Pack \*(Aqhello.pl\*(Aq into executable \*(Aqhello\*(Aq
\&                                # (or \*(Aqhello.exe\*(Aq on Win32)
\&
\&    % pp \-o foo foo.pl bar.pl   # Pack \*(Aqfoo.pl\*(Aq and \*(Aqbar.pl\*(Aq into \*(Aqfoo\*(Aq
\&    % ./foo                     # Run \*(Aqfoo.pl\*(Aq inside \*(Aqfoo\*(Aq
\&    % mv foo bar; ./bar         # Run \*(Aqbar.pl\*(Aq inside \*(Aqfoo\*(Aq
\&    % mv bar baz; ./baz         # Error: Can\*(Aqt open perl script "baz"
\&
\&    % pp \-p file                # Creates a PAR file, \*(Aqa.par\*(Aq
\&    % pp \-o hello a.par         # Pack \*(Aqa.par\*(Aq to executable \*(Aqhello\*(Aq
\&    % pp \-S \-o hello file       # Combine the two steps above
\&
\&    % pp \-p \-o out.par file     # Creates \*(Aqout.par\*(Aq from \*(Aqfile\*(Aq
\&    % pp \-B \-p \-o out.par file  # same as above, but bundles core modules
\&                                # and removes any local paths from @INC
\&    % pp \-P \-o out.pl file      # Creates \*(Aqout.pl\*(Aq from \*(Aqfile\*(Aq
\&    % pp \-B \-p \-o out.pl file   # same as above, but bundles core modules
\&                                # and removes any local paths from @INC
\&                                # (\-B is assumed when making executables)
\&
\&    % pp \-e "print 123"         # Pack a one\-liner into \*(Aqa.out\*(Aq
\&    % pp \-p \-e "print 123"      # Creates a PAR file \*(Aqa.par\*(Aq
\&    % pp \-P \-e "print 123"      # Creates a perl script \*(Aqa.pl\*(Aq
\&
\&    % pp \-c hello               # Check dependencies from "perl \-c hello"
\&    % pp \-x hello               # Check dependencies from "perl hello"
\&    % pp \-n \-x hello            # same as above, but skips static scanning
\&
\&    % pp \-I /foo hello          # Extra include paths
\&    % pp \-M Foo::Bar hello      # Extra modules in the include path
\&    % pp \-M abbrev.pl hello     # Extra libraries in the include path
\&    % pp \-X Foo::Bar hello      # Exclude modules
\&    % pp \-a data.txt hello      # Additional data files
\&
\&    % pp \-r hello               # Pack \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, runs \*(Aqa.out\*(Aq
\&    % pp \-r hello a b c         # Pack \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, runs \*(Aqa.out\*(Aq
\&                                # with arguments \*(Aqa b c\*(Aq
\&
\&    % pp hello \-\-log=c          # Pack \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, logs
\&                                # messages into \*(Aqc\*(Aq
\&
\&    # Pack \*(Aqhello\*(Aq into a console\-less \*(Aqout.exe\*(Aq (Win32 only)
\&    % pp \-\-gui \-o out.exe hello
\&
\&    % pp @file hello.pl         # Pack \*(Aqhello.pl\*(Aq but read _additional_
\&                                # options from file \*(Aqfile\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIpp\fR creates standalone executables from Perl programs, using the
compressed packager provided by \s-1PAR\s0, and dependency detection
heuristics offered by Module::ScanDeps.  Source files are compressed
verbatim without compilation.
.PP
You may think of \fIpp\fR as "\fIperlcc\fR that works without hassle". :\-)
.PP
A \s-1GUI\s0 interface is also available as the \fItkpp\fR command.
.PP
It does not provide the compilation-step acceleration provided by
\&\fIperlcc\fR (however, see \fB\-f\fR below for byte-compiled, source-hiding
techniques), but makes up for it with better reliability, smaller
executable size, and full retrieval of original source code.
.PP
When a single input program is specified, the resulting executable will
behave identically as that program.  However, when multiple programs
are packaged, the produced executable will run the one that has the
same basename as \f(CW$0\fR (i.e. the filename used to invoke it).  If
nothing matches, it dies with the error \f(CW\*(C`Can\*(Aqt open perl script "$0"\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
Options are available in a \fIshort\fR form and a \fIlong\fR form.  For
example, the three lines below are all equivalent:
.PP
.Vb 3
\&    % pp \-o output.exe input.pl
\&    % pp \-\-output output.exe input.pl
\&    % pp \-\-output=output.exe input.pl
.Ve
.PP
Since the command lines can become sufficiently long to reach the limits
imposed by some shells, it is possible to have \fIpp\fR read some of its
options from one or more text files. The basic usage is to just include
an argument starting with an 'at' (@) sigil. This argument will be
interpreted as a file to read options from. Mixing ordinary options
and \f(CW@file\fR options is possible. This is implemented using the
Getopt::ArgvFile module, so read its documentation for advanced usage.
.IP "\fB\-a\fR, \fB\-\-addfile\fR=\fI\s-1FILE\s0\fR|\fI\s-1DIR\s0\fR" 4
.IX Item "-a, --addfile=FILE|DIR"
Add an extra file into the package.  If the file is a directory, recursively
add all files inside that directory, with links turned into actual files.
.Sp
By default, files are placed under \f(CW\*(C`/\*(C'\fR inside the package with their
original names.  You may override this by appending the target filename
after a \f(CW\*(C`;\*(C'\fR, like this:
.Sp
.Vb 2
\&    % pp \-a "old_filename.txt;new_filename.txt"
\&    % pp \-a "old_dirname;new_dirname"
.Ve
.Sp
You may specify \f(CW\*(C`\-a\*(C'\fR multiple times.
.IP "\fB\-A\fR, \fB\-\-addlist\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-A, --addlist=FILE"
Read a list of file/directory names from \fI\s-1FILE\s0\fR, adding them into the
package.  Each line in \fI\s-1FILE\s0\fR is taken as an argument to \fB\-a\fR above.
.Sp
You may specify \f(CW\*(C`\-A\*(C'\fR multiple times.
.IP "\fB\-B\fR, \fB\-\-bundle\fR" 4
.IX Item "-B, --bundle"
Bundle core modules in the resulting package.  This option is enabled
by default, except when \f(CW\*(C`\-p\*(C'\fR or \f(CW\*(C`\-P\*(C'\fR is specified.
.Sp
Since \s-1PAR\s0 version 0.953, this also strips any local paths from the
list of module search paths \f(CW@INC\fR before running the contained
script.
.IP "\fB\-C\fR, \fB\-\-clean\fR" 4
.IX Item "-C, --clean"
Clean up temporary files extracted from the application at runtime.
By default, these files are cached in the temporary directory; this
allows the program to start up faster next time.
.IP "\fB\-c\fR, \fB\-\-compile\fR" 4
.IX Item "-c, --compile"
Run \f(CW\*(C`perl \-c inputfile\*(C'\fR to determine additional run-time dependencies.
.IP "\fB\-cd\fR, \fB\-\-cachedeps\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-cd, --cachedeps=FILE"
Use \fI\s-1FILE\s0\fR to cache detected dependencies. Creates \fI\s-1FILE\s0\fR unless
present. This will speed up the scanning process on subsequent runs.
.IP "\fB\-d\fR, \fB\-\-dependent\fR" 4
.IX Item "-d, --dependent"
Reduce the executable size by not including a copy of perl interpreter.
Executables built this way will need a separate \fIperl5x.dll\fR
or \fIlibperl.so\fR to function correctly.  This option is only available
if perl is built as a shared library.
.IP "\fB\-e\fR, \fB\-\-eval\fR=\fI\s-1STRING\s0\fR" 4
.IX Item "-e, --eval=STRING"
Package a one-liner, much the same as \f(CW\*(C`perl \-e \*(Aq...\*(Aq\*(C'\fR
.IP "\fB\-E\fR, \fB\-\-evalfeature\fR=\fI\s-1STRING\s0\fR" 4
.IX Item "-E, --evalfeature=STRING"
Behaves just like \f(CW\*(C`\-e\*(C'\fR, except that it implicitly enables all optional features
(in the main compilation unit) with Perl 5.10 and later.  See feature.
.IP "\fB\-x\fR, \fB\-\-execute\fR" 4
.IX Item "-x, --execute"
Run \f(CW\*(C`perl inputfile\*(C'\fR to determine additional run-time dependencies.
.Sp
Using this option, \fIpp\fR may be able to detect the use of modules that
can't be determined by static analysis of \f(CW\*(C`inputfile\*(C'\fR. Examples
are stuff loaded by run-time loaders like Module::Runtime or
\&\*(L"plugin\*(R" loaders like Module::Loader. Note that which modules are
detected depends on which parts of your program are exercised
when running \f(CW\*(C`inputfile\*(C'\fR. E.g. if your program immediately terminates
when run as \f(CW\*(C`perl inputfile\*(C'\fR because it lacks mandatory arguments,
then this option will probably have no effect. You may use \fB\-\-xargs\fR to
supply arguments in this case.
.IP "\fB\-\-xargs\fR=\fI\s-1STRING\s0\fR" 4
.IX Item "--xargs=STRING"
If \fB\-x\fR is given, splits the \f(CW\*(C`STRING\*(C'\fR using the function 
\&\f(CW\*(C`shellwords\*(C'\fR from Text::ParseWords and passes the result 
as \f(CW@ARGV\fR when running \f(CW\*(C`perl inputfile\*(C'\fR.
.IP "\fB\-X\fR, \fB\-\-exclude\fR=\fI\s-1MODULE\s0\fR" 4
.IX Item "-X, --exclude=MODULE"
Exclude the given module from the dependency search path and from the
package. If the given file is a zip or par or par executable, all the files
in the given file (except \s-1MANIFEST, META\s0.yml and script/*) will be
excluded and the output file will \*(L"use\*(R" the given file at runtime.
.IP "\fB\-f\fR, \fB\-\-filter\fR=\fI\s-1FILTER\s0\fR" 4
.IX Item "-f, --filter=FILTER"
Filter source script(s) with a PAR::Filter subclass.  You may specify
multiple such filters.
.Sp
If you wish to hide the source code from casual prying, this will do:
.Sp
.Vb 1
\&    % pp \-f Bleach source.pl
.Ve
.Sp
If you are more serious about hiding your source code, you should have
a look at Steve Hay's PAR::Filter::Crypto module. Make sure you
understand the Filter::Crypto caveats!
.IP "\fB\-g\fR, \fB\-\-gui\fR" 4
.IX Item "-g, --gui"
Build an executable that does not have a console window. This option is
ignored on non\-MSWin32 platforms or when \f(CW\*(C`\-p\*(C'\fR is specified.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Show basic usage information.
.IP "\fB\-I\fR, \fB\-\-lib\fR=\fI\s-1DIR\s0\fR" 4
.IX Item "-I, --lib=DIR"
Add the given directory to the perl module search path.  May
be specified multiple times.
.IP "\fB\-l\fR, \fB\-\-link\fR=\fI\s-1FILE\s0\fR|\fI\s-1LIBRARY\s0\fR" 4
.IX Item "-l, --link=FILE|LIBRARY"
Add the given shared library (a.k.a. shared object or \s-1DLL\s0) into the
packed file.  Also accepts names under library paths; i.e.
\&\f(CW\*(C`\-l ncurses\*(C'\fR means the same thing as \f(CW\*(C`\-l libncurses.so\*(C'\fR or
\&\f(CW\*(C`\-l /usr/local/lib/libncurses.so\*(C'\fR in most Unixes.  May be specified
multiple times.
.IP "\fB\-L\fR, \fB\-\-log\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-L, --log=FILE"
Log the output of packaging to a file rather than to stdout.
.IP "\fB\-F\fR, \fB\-\-modfilter\fR=\fIFILTER[=REGEX]\fR," 4
.IX Item "-F, --modfilter=FILTER[=REGEX],"
Filter included perl module(s) with a PAR::Filter subclass.
You may specify multiple such filters.
.Sp
By default, the \fIPodStrip\fR filter is applied.  In case
that causes trouble, you can turn this off by setting the
environment variable \f(CW\*(C`PAR_VERBATIM\*(C'\fR to \f(CW1\fR.
.Sp
Since \s-1PAR 0.958,\s0 you can use an optional regular expression (\fI\s-1REGEX\s0\fR above)
to select the files in the archive which should be filtered. Example:
.Sp
.Vb 1
\&  pp \-o foo.exe \-F Bleach=warnings\e.pm$ foo.pl
.Ve
.Sp
This creates a binary executable \fIfoo.exe\fR from \fIfoo.pl\fR packaging all files
as usual except for files ending in \f(CW\*(C`warnings.pm\*(C'\fR which are filtered with
PAR::Filter::Bleach.
.IP "\fB\-M\fR, \fB\-\-module\fR=\fI\s-1MODULE\s0\fR" 4
.IX Item "-M, --module=MODULE"
Add the specified module into the package, along with its dependencies.
.Sp
The following variants may be used to add whole module namespaces:
.RS 4
.IP "\fB\-M Foo::**\fR" 4
.IX Item "-M Foo::**"
Add every module in the \f(CW\*(C`Foo\*(C'\fR namespace \fBexcept\fR \f(CW\*(C`Foo\*(C'\fR itself, i.e.
add \f(CW\*(C`Foo::Bar\*(C'\fR, \f(CW\*(C`Foo::Bar::Quux\*(C'\fR etc up to any depth.
.IP "\fB\-M Foo::*\fR" 4
.IX Item "-M Foo::*"
Add every module at level 1 in the \f(CW\*(C`Foo\*(C'\fR namespace, i.e.
add \f(CW\*(C`Foo::Bar\*(C'\fR, but \fBneither\fR \f(CW\*(C`Foo::Bar::Quux\*(C'\fR \fBnor\fR \f(CW\*(C`Foo\*(C'\fR.
.IP "\fB\-M Foo::\fR" 4
.IX Item "-M Foo::"
Shorthand for \f(CW\*(C`\-M Foo \-M Foo:**\*(C'\fR: every module in the \f(CW\*(C`Foo\*(C'\fR namespace 
including \f(CW\*(C`Foo\*(C'\fR itself.
.RE
.RS 4
.Sp
Instead of a module name, \fI\s-1MODULE\s0\fR may also be specified as a filename
relative to the \f(CW@INC\fR path, i.e.  \f(CW\*(C`\-M Module/ScanDeps.pm\*(C'\fR
means the same thing as \f(CW\*(C`\-M Module::ScanDeps\*(C'\fR.
.Sp
If \fI\s-1MODULE\s0\fR has an extension that is not \f(CW\*(C`.pm\*(C'\fR/\f(CW\*(C`.ix\*(C'\fR/\f(CW\*(C`.al\*(C'\fR, it will not
be scanned for dependencies, and will be placed under \f(CW\*(C`/\*(C'\fR instead of
\&\f(CW\*(C`/lib/\*(C'\fR inside the \s-1PAR\s0 file.  This use is \fBdeprecated\fR \*(-- consider using
the \fB\-a\fR option instead.
.Sp
You may specify \f(CW\*(C`\-M\*(C'\fR multiple times.
.RE
.IP "\fB\-m\fR, \fB\-\-multiarch\fR" 4
.IX Item "-m, --multiarch"
Build a multi-architecture \s-1PAR\s0 file.  Implies \fB\-p\fR.
.IP "\fB\-n\fR, \fB\-\-noscan\fR" 4
.IX Item "-n, --noscan"
Skip the default static scanning altogether, using run-time
dependencies from \fB\-c\fR or \fB\-x\fR exclusively.
.IP "\fB\-N\fR, \fB\-\-namespace\fR=\fI\s-1NAMESPACE\s0\fR" 4
.IX Item "-N, --namespace=NAMESPACE"
Add all modules in the namespace into the package, 
along with their dependencies. If \f(CW\*(C`NAMESPACE\*(C'\fR is something like \f(CW\*(C`Foo::Bar\*(C'\fR
then this will add all modules \f(CW\*(C`Foo/Bar/Quux.pm\*(C'\fR, \f(CW\*(C`Foo/Bar/Fred/Barnie.pm\*(C'\fR etc
that can be located in your module search path. It mimics the behaviour
of \*(L"plugin\*(R" loaders like Module::Loader.
.Sp
This is different from using \f(CW\*(C`\-M Foo::Bar::\*(C'\fR, as the latter insists
on adding \f(CW\*(C`Foo/Bar.pm\*(C'\fR which might not exist in the above \*(L"plugin\*(R" scenario.
.Sp
You may specify \f(CW\*(C`\-N\*(C'\fR multiple times.
.IP "\fB\-o\fR, \fB\-\-output\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-o, --output=FILE"
File name for the final packaged executable.
.IP "\fB\-p\fR, \fB\-\-par\fR" 4
.IX Item "-p, --par"
Create \s-1PAR\s0 archives only; do not package to a standalone binary.
.IP "\fB\-P\fR, \fB\-\-perlscript\fR" 4
.IX Item "-P, --perlscript"
Create stand-alone perl script; do not package to a standalone binary.
.IP "\fB\-r\fR, \fB\-\-run\fR" 4
.IX Item "-r, --run"
Run the resulting packaged script after packaging it.
.IP "\fB\-\-reusable\fR" 4
.IX Item "--reusable"
\&\fB\s-1EXPERIMENTAL\s0\fR
.Sp
Make the packaged executable reusable for running arbitrary, external
Perl scripts as if they were part of the package:
.Sp
.Vb 2
\&  pp \-o myapp \-\-reusable someapp.pl
\&  ./myapp \-\-par\-options \-\-reuse otherapp.pl
.Ve
.Sp
The second line will run \fIotherapp.pl\fR instead of \fIsomeapp.pl\fR.
.IP "\fB\-S\fR, \fB\-\-save\fR" 4
.IX Item "-S, --save"
Do not delete generated \s-1PAR\s0 file after packaging.
.IP "\fB\-s\fR, \fB\-\-sign\fR" 4
.IX Item "-s, --sign"
Cryptographically sign the generated \s-1PAR\s0 or binary file using
Module::Signature.
.IP "\fB\-T\fR, \fB\-\-tempcache\fR" 4
.IX Item "-T, --tempcache"
Set the program unique part of the cache directory name that is used
if the program is run without \-C. If not set, a hash of the executable
is used.
.Sp
When the program is run, its contents are extracted to a temporary
directory.  On Unix systems, this is commonly
\&\fI/tmp/par\-USER/cache\-XXXXXXX\fR.  \fI\s-1USER\s0\fR is replaced by the
name of the user running the program, but \*(L"spelled\*(R" in hex.
\&\fI\s-1XXXXXXX\s0\fR is either a hash of the
executable or the value passed to the \f(CW\*(C`\-T\*(C'\fR or \f(CW\*(C`\-\-tempcache\*(C'\fR switch.
.IP "\fB\-u\fR, \fB\-\-unicode\fR" 4
.IX Item "-u, --unicode"
Package Unicode support (essentially \fIutf8_heavy.pl\fR and everything
below the directory \fIunicore\fR in your perl library).
.Sp
This option exists because it is impossible to detect using static analysis
if your program needs Unicode support at runtime. (Note: If your 
program contains \f(CW\*(C`use utf8\*(C'\fR this does \fBnot\fR imply it needs Unicode
support. It merely says that your program is written in \s-1UTF\-8.\s0)
.Sp
If your packed program exits with an error message like
.Sp
.Vb 1
\&  Can\*(Aqt locate utf8_heavy.pl in @INC (@INC contains: ...)
.Ve
.Sp
try to pack it with \f(CW\*(C`\-u\*(C'\fR (or use \f(CW\*(C`\-x\*(C'\fR).
.IP "\fB\-v\fR, \fB\-\-verbose\fR[=\fI\s-1NUMBER\s0\fR]" 4
.IX Item "-v, --verbose[=NUMBER]"
Increase verbosity of output; \fI\s-1NUMBER\s0\fR is an integer from \f(CW1\fR to \f(CW3\fR,
\&\f(CW3\fR being the most verbose.  Defaults to \f(CW1\fR if specified without an
argument.  Alternatively, \fB\-vv\fR sets verbose level to \f(CW2\fR, and \fB\-vvv\fR
sets it to \f(CW3\fR.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Display the version number and copyrights of this program.
.IP "\fB\-z\fR, \fB\-\-compress\fR=\fI\s-1NUMBER\s0\fR" 4
.IX Item "-z, --compress=NUMBER"
Set zip compression level; \fI\s-1NUMBER\s0\fR is an integer from \f(CW0\fR to \f(CW9\fR,
\&\f(CW0\fR = no compression, \f(CW9\fR = max compression.  Defaults to \f(CW6\fR if
\&\fB\-z\fR is not used.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PP_OPTS\s0" 4
.IX Item "PP_OPTS"
Command-line options (switches).  Switches in this variable are taken
as if they were on every \fIpp\fR command line.
.SH "NOTES"
.IX Header "NOTES"
Here are some recipes showing how to utilize \fIpp\fR to bundle
\&\fIsource.pl\fR with all its dependencies, on target machines with
different expected settings:
.IP "Stone-alone setup:" 4
.IX Item "Stone-alone setup:"
To make a stand-alone executable, suitable for running on a
machine that doesn't have perl installed:
.Sp
.Vb 3
\&    % pp \-o packed.exe source.pl        # makes packed.exe
\&    # Now, deploy \*(Aqpacked.exe\*(Aq to target machine...
\&    $ packed.exe                        # run it
.Ve
.IP "Perl interpreter only, without core modules:" 4
.IX Item "Perl interpreter only, without core modules:"
To make a packed .pl file including core modules, suitable
for running on a machine that has a perl interpreter, but where
you want to be sure of the versions of the core modules that
your program uses:
.Sp
.Vb 3
\&    % pp \-B \-P \-o packed.pl source.pl   # makes packed.pl
\&    # Now, deploy \*(Aqpacked.pl\*(Aq to target machine...
\&    $ perl packed.pl                    # run it
.Ve
.IP "Perl with core modules installed:" 4
.IX Item "Perl with core modules installed:"
To make a packed .pl file without core modules, relying on the target
machine's perl interpreter and its core libraries.  This produces
a significantly smaller file than the previous version:
.Sp
.Vb 3
\&    % pp \-P \-o packed.pl source.pl      # makes packed.pl
\&    # Now, deploy \*(Aqpacked.pl\*(Aq to target machine...
\&    $ perl packed.pl                    # run it
.Ve
.IP "Perl with \s-1PAR\s0.pm and its dependencies installed:" 4
.IX Item "Perl with PAR.pm and its dependencies installed:"
Make a separate archive and executable that uses the archive. This
relies upon the perl interpreter and libraries on the target machine.
.Sp
.Vb 5
\&    % pp \-p source.pl                   # makes source.par
\&    % echo "use PAR \*(Aqsource.par\*(Aq;" > packed.pl;
\&    % cat source.pl >> packed.pl;       # makes packed.pl
\&    # Now, deploy \*(Aqsource.par\*(Aq and \*(Aqpacked.pl\*(Aq to target machine...
\&    $ perl packed.pl                    # run it, perl + core modules required
.Ve
.PP
Note that even if your perl was built with a shared library, the
\&'Stand\-alone executable' above will \fInot\fR need a separate \fIperl5x.dll\fR
or \fIlibperl.so\fR to function correctly.  But even in this case, the
underlying system libraries such as \fIlibc\fR must be compatible between
the host and target machines.  Use \f(CW\*(C`\-\-dependent\*(C'\fR if you
are willing to ship the shared library with the application, which
can significantly reduce the executable size.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
tkpp, par.pl, parl, perlcc
.PP
\&\s-1PAR\s0, PAR::Packer, Module::ScanDeps
.PP
Getopt::Long, Getopt::ArgvFile
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Simon Cozens, Tom Christiansen and Edward Peschko for writing
\&\fIperlcc\fR; this program try to mimic its interface as close
as possible, and copied liberally from their code.
.PP
Jan Dubois for writing the \fIexetype.pl\fR utility, which has been
partially adapted into the \f(CW\*(C`\-g\*(C'\fR flag.
.PP
Mattia Barbon for providing the \f(CW\*(C`myldr\*(C'\fR binary loader code.
.PP
Jeff Goff for suggesting the name \fIpp\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>,
Steffen Mueller <smueller@cpan.org>
Roderich Schupp <rschupp@cpan.org>
.PP
You can write
to the mailing list at <par@perl.org>, or send an empty mail to
<par\-subscribe@perl.org> to participate in the discussion.
.PP
Please submit bug reports to <bug\-par\-packer@rt.cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2009 by Audrey Tang
<cpan@audreyt.org>.
.PP
Neither this program nor the associated parl program impose any
licensing restrictions on files generated by their execution, in
accordance with the 8th article of the Artistic License:
.PP
.Vb 5
\&    "Aggregation of this Package with a commercial distribution is
\&    always permitted provided that the use of this Package is embedded;
\&    that is, when no overt attempt is made to make this Package\*(Aqs
\&    interfaces visible to the end user of the commercial distribution.
\&    Such use shall not be construed as a distribution of this Package."
.Ve
.PP
Therefore, you are absolutely free to place any license on the resulting
executable, as long as the packed 3rd\-party libraries are also available
under the Artistic License.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See \fI\s-1LICENSE\s0\fR.
