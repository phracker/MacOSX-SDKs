.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XGETTEXT 1"
.TH XGETTEXT 1 "2014-03-06" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
xgettext.pl \- Extract translatable strings from source
.SH "VERSION"
.IX Header "VERSION"
version 1.00
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBxgettext.pl\fR [\fI\s-1OPTION\s0\fR] [\fI\s-1INPUTFILE\s0\fR]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program extracts translatable strings from given input files, or
from \fB\s-1STDIN\s0\fR if none are given.
.PP
Please see Locale::Maketext::Extract for a list of supported input file
formats.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mandatory arguments to long options are mandatory for short options too.
Similarly for optional arguments.
.SS "Input file location:"
.IX Subsection "Input file location:"
.IP "\fI\s-1INPUTFILE\s0\fR..." 4
.IX Item "INPUTFILE..."
Files to extract messages from.  If not specified, \fB\s-1STDIN\s0\fR is assumed.
.IP "\fB\-f\fR, \fB\-\-files\-from\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-f, --files-from=FILE"
Get list of input files from \fI\s-1FILE\s0\fR.
.IP "\fB\-D\fR, \fB\-\-directory\fR=\fI\s-1DIRECTORY\s0\fR" 4
.IX Item "-D, --directory=DIRECTORY"
Add \fI\s-1DIRECTORY\s0\fR to list for input files search.
.SS "Input file format:"
.IX Subsection "Input file format:"
.IP "\fB\-u\fR, \fB\-\-use\-gettext\-style\fR" 4
.IX Item "-u, --use-gettext-style"
Specifies that the source programs uses the \fBGettext\fR style (e.g.
\&\f(CW%1\fR) instead of the \fBMaketext\fR style (e.g. \f(CW\*(C`[_1]\*(C'\fR) in its
localization calls.
.SS "Output file location:"
.IX Subsection "Output file location:"
.IP "\fB\-d\fR, \fB\-\-default\-domain\fR=\fI\s-1NAME\s0\fR" 4
.IX Item "-d, --default-domain=NAME"
Use \fI\s-1NAME\s0\fR.po for output, instead of \f(CW\*(C`messages.po\*(C'\fR.
.IP "\fB\-o\fR, \fB\-\-output\fR=\fI\s-1FILE\s0\fR" 4
.IX Item "-o, --output=FILE"
\&\s-1PO\s0 file name to be written or incrementally updated; \f(CW\*(C`\-\*(C'\fR means writing
to \fB\s-1STDOUT\s0\fR.
.IP "\fB\-p\fR, \fB\-\-output\-dir\fR=\fI\s-1DIR\s0\fR" 4
.IX Item "-p, --output-dir=DIR"
Output files will be placed in directory \fI\s-1DIR\s0\fR.
.SS "Output details:"
.IX Subsection "Output details:"
.IP "\fB\-g\fR, \fB\-\-gnu\-gettext\fR" 4
.IX Item "-g, --gnu-gettext"
Enables \s-1GNU\s0 gettext interoperability by printing \f(CW\*(C`#, perl\-maketext\-format\*(C'\fR
before each entry that has \f(CW\*(C`%\*(C'\fR variables.
.IP "\fB\-W\fR, \fB\-\-wrap\fR" 4
.IX Item "-W, --wrap"
If wrap is enabled, then, for entries with multiple file locations, each
location is listed on a separate line. The default is to put them all
on a single line.
.Sp
Other comments are not affected.
.SS "Plugins:"
.IX Subsection "Plugins:"
By default, all builtin parser plugins are enabled for all file types, with
warnings turned off.
.PP
If any plugin is specified on the command line, then warnings are turned
on by default \- you can turn them off with \f(CW\*(C`\-now\*(C'\fR
.IP "\fB\-P\fR|\fB\-\-plugin\fR pluginname" 4
.IX Item "-P|--plugin pluginname"
.Vb 2
\&    Use the specified plugin for the default file types recognised by that
\&    plugin.
.Ve
.IP "\fB\-P\fR|\fB\-\-plugin\fR 'pluginname=*'" 4
.IX Item "-P|--plugin 'pluginname=*'"
.Vb 1
\&    Use the specified plugin for all file types.
.Ve
.IP "\fB\-P\fR|\fB\-\-plugin\fR pluginname=ext,ext2" 4
.IX Item "-P|--plugin pluginname=ext,ext2"
.Vb 1
\&    Use the specified plugin for any files ending in C<.ext> or C<.ext2>
.Ve
.IP "\fB\-P\fR|\fB\-\-plugin\fR My::Module::Name='*'" 4
.IX Item "-P|--plugin My::Module::Name='*'"
.Vb 1
\&    Use your custom plugin module for all file types
.Ve
.PP
Multiple plugins can be specified on the command line.
.PP
\fIAvailable plugins:\fR
.IX Subsection "Available plugins:"
.ie n .IP """perl""    : Locale::Maketext::Extract::Plugin::Perl" 4
.el .IP "\f(CWperl\fR    : Locale::Maketext::Extract::Plugin::Perl" 4
.IX Item "perl : Locale::Maketext::Extract::Plugin::Perl"
For a slightly more accurate but much slower Perl parser, you can use
the \s-1PPI\s0 plugin. This does not have a short name, but must be specified in
full, eg:
.Sp
.Vb 1
\&    xgettext.pl \-P Locale::Maketext::Extract::Plugin::PPI
.Ve
.ie n .IP """tt2""     : Locale::Maketext::Extract::Plugin::TT2" 4
.el .IP "\f(CWtt2\fR     : Locale::Maketext::Extract::Plugin::TT2" 4
.IX Item "tt2 : Locale::Maketext::Extract::Plugin::TT2"
.PD 0
.ie n .IP """yaml""    : Locale::Maketext::Extract::Plugin::YAML" 4
.el .IP "\f(CWyaml\fR    : Locale::Maketext::Extract::Plugin::YAML" 4
.IX Item "yaml : Locale::Maketext::Extract::Plugin::YAML"
.ie n .IP """formfu""  : Locale::Maketext::Extract::Plugin::FormFu" 4
.el .IP "\f(CWformfu\fR  : Locale::Maketext::Extract::Plugin::FormFu" 4
.IX Item "formfu : Locale::Maketext::Extract::Plugin::FormFu"
.ie n .IP """mason""   : Locale::Maketext::Extract::Plugin::Mason" 4
.el .IP "\f(CWmason\fR   : Locale::Maketext::Extract::Plugin::Mason" 4
.IX Item "mason : Locale::Maketext::Extract::Plugin::Mason"
.ie n .IP """text""    : Locale::Maketext::Extract::Plugin::TextTemplate" 4
.el .IP "\f(CWtext\fR    : Locale::Maketext::Extract::Plugin::TextTemplate" 4
.IX Item "text : Locale::Maketext::Extract::Plugin::TextTemplate"
.ie n .IP """generic"" : Locale::Maketext::Extract::Plugin::Generic" 4
.el .IP "\f(CWgeneric\fR : Locale::Maketext::Extract::Plugin::Generic" 4
.IX Item "generic : Locale::Maketext::Extract::Plugin::Generic"
.PD
.SS "Warnings:"
.IX Subsection "Warnings:"
If a parser plugin encounters a syntax error while parsing, it will abort
parsing and hand over to the next parser plugin.  If warnings are turned
on then the error will be echoed to \s-1STDERR.\s0
.PP
Off by default, unless any plugin has been specified on the command line.
.IP "\fB\-w\fR|\fB\-\-warnings\fR" 4
.IX Item "-w|--warnings"
.PD 0
.IP "\fB\-now\fR|\fB\-\-nowarnings\fR" 4
.IX Item "-now|--nowarnings"
.PD
.SS "Verbose:"
.IX Subsection "Verbose:"
If you would like to see which files have been processed, which plugins were
used, and which strings were extracted, then enable \f(CW\*(C`verbose\*(C'\fR. If no
acceptable plugin was found, or no strings were extracted, then the file
is not listed:
.IP "\fB\-v\fR|\fB\-\-verbose\fR" 4
.IX Item "-v|--verbose"
Lists processed files.
.IP "\fB\-v \-v\fR|\fB\-\-verbose \-\-verbose\fR :" 4
.IX Item "-v -v|--verbose --verbose :"
Lists processed files and which plugins managed to extract strings.
.IP "\fB\-v \-v\fR|\fB\-\-verbose \-\-verbose\fR :" 4
.IX Item "-v -v|--verbose --verbose :"
Lists processed files, which plugins managed to extract strings, and the
extracted strings, the line where they were found, and any variables.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Locale::Maketext::Extract" 4
.IX Item "Locale::Maketext::Extract"
.PD 0
.IP "Locale::Maketext::Lexicon::Gettext" 4
.IX Item "Locale::Maketext::Lexicon::Gettext"
.IP "Locale::Maketext" 4
.IX Item "Locale::Maketext"
.IP "Locale::Maketext::Extract::Plugin::Perl" 4
.IX Item "Locale::Maketext::Extract::Plugin::Perl"
.IP "Locale::Maketext::Extract::Plugin::PPI" 4
.IX Item "Locale::Maketext::Extract::Plugin::PPI"
.IP "Locale::Maketext::Extract::Plugin::TT2" 4
.IX Item "Locale::Maketext::Extract::Plugin::TT2"
.IP "Locale::Maketext::Extract::Plugin::YAML" 4
.IX Item "Locale::Maketext::Extract::Plugin::YAML"
.IP "Locale::Maketext::Extract::Plugin::FormFu" 4
.IX Item "Locale::Maketext::Extract::Plugin::FormFu"
.IP "Locale::Maketext::Extract::Plugin::Mason" 4
.IX Item "Locale::Maketext::Extract::Plugin::Mason"
.IP "Locale::Maketext::Extract::Plugin::TextTemplate" 4
.IX Item "Locale::Maketext::Extract::Plugin::TextTemplate"
.IP "Locale::Maketext::Extract::Plugin::Generic" 4
.IX Item "Locale::Maketext::Extract::Plugin::Generic"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2008 by Audrey Tang <cpan@audreyt.org>.
.PP
This software is released under the \s-1MIT\s0 license cited below.
.ie n .SS "The ""\s-1MIT""\s0 License"
.el .SS "The ``\s-1MIT''\s0 License"
.IX Subsection "The MIT License"
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Clinton Gormley <drtech@cpan.org>
.IP "\(bu" 4
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014 by Audrey Tang.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
