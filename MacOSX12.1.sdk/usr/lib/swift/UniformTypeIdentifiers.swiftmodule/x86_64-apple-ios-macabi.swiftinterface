// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios15.2-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftUniformTypeIdentifiers -swift-version 5 -enforce-exclusivity=checked -O -module-name UniformTypeIdentifiers
import Foundation
import Swift
@_exported import UniformTypeIdentifiers
import _Concurrency
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension Foundation.URLResourceValues {
  public var contentType: UniformTypeIdentifiers.UTType? {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension Foundation.URL {
  public func appendingPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType) -> Foundation.URL
  public mutating func appendPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType)
  public func appendingPathExtension(for contentType: UniformTypeIdentifiers.UTType) -> Foundation.URL
  public mutating func appendPathExtension(for contentType: UniformTypeIdentifiers.UTType)
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension Swift.String {
  @available(*, unavailable, message: "Use appendingPathExtension(for:) on URL instead.")
  public func appendingPathExtension(for contentType: UniformTypeIdentifiers.UTType) -> Swift.Never
  @available(*, unavailable, message: "Use appendingPathComponent(_:conformingTo:) on URL instead.")
  public func appendingPathComponent(_ partialName: Swift.String, conformingTo contentType: UniformTypeIdentifiers.UTType) -> Swift.Never
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
public struct UTType {
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType {
  public init?(_ identifier: Swift.String)
  public init?(filenameExtension: Swift.String, conformingTo supertype: UniformTypeIdentifiers.UTType = .data)
  public init?(mimeType: Swift.String, conformingTo supertype: UniformTypeIdentifiers.UTType = .data)
  public var identifier: Swift.String {
    get
  }
  public var preferredFilenameExtension: Swift.String? {
    get
  }
  public var preferredMIMEType: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String? {
    get
  }
  public var version: Swift.Int? {
    get
  }
  public var referenceURL: Foundation.URL? {
    get
  }
  public var isDynamic: Swift.Bool {
    get
  }
  public var isDeclared: Swift.Bool {
    get
  }
  public var isPublic: Swift.Bool {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType {
  public func conforms(to type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func isSupertype(of type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func isSubtype(of type: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public var supertypes: Swift.Set<UniformTypeIdentifiers.UTType> {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType {
  public init?(tag: Swift.String, tagClass: UniformTypeIdentifiers.UTTagClass, conformingTo supertype: UniformTypeIdentifiers.UTType?)
  public static func types(tag: Swift.String, tagClass: UniformTypeIdentifiers.UTTagClass, conformingTo supertype: UniformTypeIdentifiers.UTType?) -> [UniformTypeIdentifiers.UTType]
  public var tags: [UniformTypeIdentifiers.UTTagClass : [Swift.String]] {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType {
  public init(exportedAs identifier: Swift.String, conformingTo parentType: UniformTypeIdentifiers.UTType? = nil)
  public init(importedAs identifier: Swift.String, conformingTo parentType: UniformTypeIdentifiers.UTType? = nil)
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: UniformTypeIdentifiers.UTType, rhs: UniformTypeIdentifiers.UTType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType : Foundation.ReferenceConvertible {
  public typealias ReferenceType = UniformTypeIdentifiers.UTTypeReference
  public func _bridgeToObjectiveC() -> UniformTypeIdentifiers.UTTypeReference
  public static func _forceBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference, result: inout UniformTypeIdentifiers.UTType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference, result: inout UniformTypeIdentifiers.UTType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: UniformTypeIdentifiers.UTTypeReference?) -> UniformTypeIdentifiers.UTType
  public typealias _ObjectiveCType = UniformTypeIdentifiers.UTTypeReference
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTType {
  public static var item: UniformTypeIdentifiers.UTType {
    get
  }
  public static var content: UniformTypeIdentifiers.UTType {
    get
  }
  public static var compositeContent: UniformTypeIdentifiers.UTType {
    get
  }
  public static var diskImage: UniformTypeIdentifiers.UTType {
    get
  }
  public static var data: UniformTypeIdentifiers.UTType {
    get
  }
  public static var directory: UniformTypeIdentifiers.UTType {
    get
  }
  public static var resolvable: UniformTypeIdentifiers.UTType {
    get
  }
  public static var symbolicLink: UniformTypeIdentifiers.UTType {
    get
  }
  public static var executable: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mountPoint: UniformTypeIdentifiers.UTType {
    get
  }
  public static var aliasFile: UniformTypeIdentifiers.UTType {
    get
  }
  public static var urlBookmarkData: UniformTypeIdentifiers.UTType {
    get
  }
  public static var url: UniformTypeIdentifiers.UTType {
    get
  }
  public static var fileURL: UniformTypeIdentifiers.UTType {
    get
  }
  public static var text: UniformTypeIdentifiers.UTType {
    get
  }
  public static var plainText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var utf8PlainText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var utf16ExternalPlainText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var utf16PlainText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var delimitedText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var commaSeparatedText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var tabSeparatedText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var utf8TabSeparatedText: UniformTypeIdentifiers.UTType {
    get
  }
  public static var rtf: UniformTypeIdentifiers.UTType {
    get
  }
  public static var html: UniformTypeIdentifiers.UTType {
    get
  }
  public static var xml: UniformTypeIdentifiers.UTType {
    get
  }
  public static var yaml: UniformTypeIdentifiers.UTType {
    get
  }
  public static var sourceCode: UniformTypeIdentifiers.UTType {
    get
  }
  public static var assemblyLanguageSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var cSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var objectiveCSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var swiftSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var cPlusPlusSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var objectiveCPlusPlusSource: UniformTypeIdentifiers.UTType {
    get
  }
  public static var cHeader: UniformTypeIdentifiers.UTType {
    get
  }
  public static var cPlusPlusHeader: UniformTypeIdentifiers.UTType {
    get
  }
  public static var script: UniformTypeIdentifiers.UTType {
    get
  }
  public static var appleScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var osaScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var osaScriptBundle: UniformTypeIdentifiers.UTType {
    get
  }
  public static var javaScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var shellScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var perlScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var pythonScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var rubyScript: UniformTypeIdentifiers.UTType {
    get
  }
  public static var phpScript: UniformTypeIdentifiers.UTType {
    get
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
  public static var makefile: UniformTypeIdentifiers.UTType {
    get
  }
  public static var json: UniformTypeIdentifiers.UTType {
    get
  }
  public static var propertyList: UniformTypeIdentifiers.UTType {
    get
  }
  public static var xmlPropertyList: UniformTypeIdentifiers.UTType {
    get
  }
  public static var binaryPropertyList: UniformTypeIdentifiers.UTType {
    get
  }
  public static var pdf: UniformTypeIdentifiers.UTType {
    get
  }
  public static var rtfd: UniformTypeIdentifiers.UTType {
    get
  }
  public static var flatRTFD: UniformTypeIdentifiers.UTType {
    get
  }
  public static var webArchive: UniformTypeIdentifiers.UTType {
    get
  }
  public static var image: UniformTypeIdentifiers.UTType {
    get
  }
  public static var jpeg: UniformTypeIdentifiers.UTType {
    get
  }
  public static var tiff: UniformTypeIdentifiers.UTType {
    get
  }
  public static var gif: UniformTypeIdentifiers.UTType {
    get
  }
  public static var png: UniformTypeIdentifiers.UTType {
    get
  }
  public static var icns: UniformTypeIdentifiers.UTType {
    get
  }
  public static var bmp: UniformTypeIdentifiers.UTType {
    get
  }
  public static var ico: UniformTypeIdentifiers.UTType {
    get
  }
  public static var rawImage: UniformTypeIdentifiers.UTType {
    get
  }
  public static var svg: UniformTypeIdentifiers.UTType {
    get
  }
  public static var livePhoto: UniformTypeIdentifiers.UTType {
    get
  }
  public static var heif: UniformTypeIdentifiers.UTType {
    get
  }
  public static var heic: UniformTypeIdentifiers.UTType {
    get
  }
  public static var webP: UniformTypeIdentifiers.UTType {
    get
  }
  public static var threeDContent: UniformTypeIdentifiers.UTType {
    get
  }
  public static var usd: UniformTypeIdentifiers.UTType {
    get
  }
  public static var usdz: UniformTypeIdentifiers.UTType {
    get
  }
  public static var realityFile: UniformTypeIdentifiers.UTType {
    get
  }
  public static var sceneKitScene: UniformTypeIdentifiers.UTType {
    get
  }
  public static var arReferenceObject: UniformTypeIdentifiers.UTType {
    get
  }
  public static var audiovisualContent: UniformTypeIdentifiers.UTType {
    get
  }
  public static var movie: UniformTypeIdentifiers.UTType {
    get
  }
  public static var video: UniformTypeIdentifiers.UTType {
    get
  }
  public static var audio: UniformTypeIdentifiers.UTType {
    get
  }
  public static var quickTimeMovie: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mpeg: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mpeg2Video: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mpeg2TransportStream: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mp3: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mpeg4Movie: UniformTypeIdentifiers.UTType {
    get
  }
  public static var mpeg4Audio: UniformTypeIdentifiers.UTType {
    get
  }
  public static var appleProtectedMPEG4Audio: UniformTypeIdentifiers.UTType {
    get
  }
  public static var appleProtectedMPEG4Video: UniformTypeIdentifiers.UTType {
    get
  }
  public static var avi: UniformTypeIdentifiers.UTType {
    get
  }
  public static var aiff: UniformTypeIdentifiers.UTType {
    get
  }
  public static var wav: UniformTypeIdentifiers.UTType {
    get
  }
  public static var midi: UniformTypeIdentifiers.UTType {
    get
  }
  public static var playlist: UniformTypeIdentifiers.UTType {
    get
  }
  public static var m3uPlaylist: UniformTypeIdentifiers.UTType {
    get
  }
  public static var folder: UniformTypeIdentifiers.UTType {
    get
  }
  public static var volume: UniformTypeIdentifiers.UTType {
    get
  }
  public static var package: UniformTypeIdentifiers.UTType {
    get
  }
  public static var bundle: UniformTypeIdentifiers.UTType {
    get
  }
  public static var pluginBundle: UniformTypeIdentifiers.UTType {
    get
  }
  public static var spotlightImporter: UniformTypeIdentifiers.UTType {
    get
  }
  public static var quickLookGenerator: UniformTypeIdentifiers.UTType {
    get
  }
  public static var xpcService: UniformTypeIdentifiers.UTType {
    get
  }
  public static var framework: UniformTypeIdentifiers.UTType {
    get
  }
  public static var application: UniformTypeIdentifiers.UTType {
    get
  }
  public static var applicationBundle: UniformTypeIdentifiers.UTType {
    get
  }
  public static var applicationExtension: UniformTypeIdentifiers.UTType {
    get
  }
  public static var unixExecutable: UniformTypeIdentifiers.UTType {
    get
  }
  public static var exe: UniformTypeIdentifiers.UTType {
    get
  }
  public static var systemPreferencesPane: UniformTypeIdentifiers.UTType {
    get
  }
  public static var archive: UniformTypeIdentifiers.UTType {
    get
  }
  public static var gzip: UniformTypeIdentifiers.UTType {
    get
  }
  public static var bz2: UniformTypeIdentifiers.UTType {
    get
  }
  public static var zip: UniformTypeIdentifiers.UTType {
    get
  }
  public static var appleArchive: UniformTypeIdentifiers.UTType {
    get
  }
  public static var spreadsheet: UniformTypeIdentifiers.UTType {
    get
  }
  public static var presentation: UniformTypeIdentifiers.UTType {
    get
  }
  public static var database: UniformTypeIdentifiers.UTType {
    get
  }
  public static var message: UniformTypeIdentifiers.UTType {
    get
  }
  public static var contact: UniformTypeIdentifiers.UTType {
    get
  }
  public static var vCard: UniformTypeIdentifiers.UTType {
    get
  }
  public static var toDoItem: UniformTypeIdentifiers.UTType {
    get
  }
  public static var calendarEvent: UniformTypeIdentifiers.UTType {
    get
  }
  public static var emailMessage: UniformTypeIdentifiers.UTType {
    get
  }
  public static var internetLocation: UniformTypeIdentifiers.UTType {
    get
  }
  public static var internetShortcut: UniformTypeIdentifiers.UTType {
    get
  }
  public static var font: UniformTypeIdentifiers.UTType {
    get
  }
  public static var bookmark: UniformTypeIdentifiers.UTType {
    get
  }
  public static var pkcs12: UniformTypeIdentifiers.UTType {
    get
  }
  public static var x509Certificate: UniformTypeIdentifiers.UTType {
    get
  }
  public static var epub: UniformTypeIdentifiers.UTType {
    get
  }
  public static var log: UniformTypeIdentifiers.UTType {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
public struct UTTagClass : Swift.RawRepresentable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTTagClass {
  public static var filenameExtension: UniformTypeIdentifiers.UTTagClass {
    get
  }
  public static var mimeType: UniformTypeIdentifiers.UTTagClass {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTTagClass : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: UniformTypeIdentifiers.UTTagClass, rhs: UniformTypeIdentifiers.UTTagClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTTagClass : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension UniformTypeIdentifiers.UTTagClass : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
