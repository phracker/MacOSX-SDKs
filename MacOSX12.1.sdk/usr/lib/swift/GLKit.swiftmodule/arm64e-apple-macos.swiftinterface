// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-macos12.1 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftGLKit -swift-version 5 -enforce-exclusivity=checked -O -module-name GLKit
@_exported import GLKit
import Swift
import _Concurrency
@inlinable @inline(__always) public func _indexHomogeneousValue<TTT, T>(_ aggregate: Swift.UnsafePointer<TTT>, _ index: Swift.Int) -> T {
    return UnsafeRawPointer(aggregate).load(
    fromByteOffset: index * MemoryLayout<T>.stride, as: T.self)
}
extension GLKit._GLKMatrix2 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKMatrix2 index out of range")
      precondition(i < 4, "GLKMatrix2 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKVector2 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKVector2 index out of range")
      precondition(i < 2, "GLKVector2 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKMatrix3 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKMatrix3 index out of range")
      precondition(i < 9, "GLKMatrix3 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKVector3 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKVector3 index out of range")
      precondition(i < 3, "GLKVector3 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKMatrix4 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKMatrix4 index out of range")
      precondition(i < 16, "GLKMatrix4 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKVector4 {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKVector4 index out of range")
      precondition(i < 4, "GLKVector4 index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
extension GLKit._GLKQuaternion {
  @inlinable public subscript(i: Swift.Int) -> Swift.Float {
    @inline(__always) get {
      precondition(i >= 0, "Negative GLKQuaternion index out of range")
      precondition(i < 4, "GLKQuaternion index out of range")

      // We can't derive an UnsafePointer from a let binding. Lame.
      var clone = self
      return _indexHomogeneousValue(&clone, i)
    }
  }
}
