// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-macos12.1 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftNaturalLanguage -swift-version 5 -enforce-exclusivity=checked -O -module-name NaturalLanguage
import Foundation
@_exported import NaturalLanguage
import Swift
import _Concurrency
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NaturalLanguage.NLTokenizer {
  @nonobjc public func tokenRange(at index: Swift.String.Index) -> Swift.Range<Swift.String.Index>
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc public func tokenRange(for range: Swift.Range<Swift.String.Index>) -> Swift.Range<Swift.String.Index>
  @nonobjc public func enumerateTokens(in range: Swift.Range<Swift.String.Index>, using block: (Swift.Range<Swift.String.Index>, NaturalLanguage.NLTokenizer.Attributes) -> Swift.Bool)
  @nonobjc public func tokens(for range: Swift.Range<Swift.String.Index>) -> [Swift.Range<Swift.String.Index>]
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NaturalLanguage.NLTagger {
  @nonobjc public func tokenRange(at index: Swift.String.Index, unit: NaturalLanguage.NLTokenUnit) -> Swift.Range<Swift.String.Index>
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc public func tokenRange(for range: Swift.Range<Swift.String.Index>, unit: NaturalLanguage.NLTokenUnit) -> Swift.Range<Swift.String.Index>
  @nonobjc public func tag(at index: Swift.String.Index, unit: NaturalLanguage.NLTokenUnit, scheme: NaturalLanguage.NLTagScheme) -> (NaturalLanguage.NLTag?, Swift.Range<Swift.String.Index>)
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc public func tagHypotheses(at index: Swift.String.Index, unit: NaturalLanguage.NLTokenUnit, scheme: NaturalLanguage.NLTagScheme, maximumCount: Swift.Int) -> ([Swift.String : Swift.Double], Swift.Range<Swift.String.Index>)
  @nonobjc public func enumerateTags(in range: Swift.Range<Swift.String.Index>, unit: NaturalLanguage.NLTokenUnit, scheme: NaturalLanguage.NLTagScheme, options: NaturalLanguage.NLTagger.Options = [], using block: (NaturalLanguage.NLTag?, Swift.Range<Swift.String.Index>) -> Swift.Bool)
  @nonobjc public func tags(in range: Swift.Range<Swift.String.Index>, unit: NaturalLanguage.NLTokenUnit, scheme: NaturalLanguage.NLTagScheme, options: NaturalLanguage.NLTagger.Options = []) -> [(NaturalLanguage.NLTag?, Swift.Range<Swift.String.Index>)]
  @nonobjc public func setLanguage(_ language: NaturalLanguage.NLLanguage, range: Swift.Range<Swift.String.Index>)
  @nonobjc public func setOrthography(_ orthography: Foundation.NSOrthography, range: Swift.Range<Swift.String.Index>)
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension NaturalLanguage.NLModel {
  @nonobjc public func predictedLabelHypotheses(for string: Swift.String, maximumCount maxCount: Swift.Int) -> [Swift.String : Swift.Double]
  @nonobjc public func predictedLabelHypotheses(forTokens tokens: [Swift.String], maximumCount maxCount: Swift.Int) -> [[Swift.String : Swift.Double]]
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension NaturalLanguage.NLEmbedding {
  @nonobjc public func distance(between firstString: Swift.String, and secondString: Swift.String, distanceType: NaturalLanguage.NLDistanceType = .cosine) -> NaturalLanguage.NLDistance
  @nonobjc public func enumerateNeighbors(for string: Swift.String, maximumCount maxCount: Swift.Int, distanceType: NaturalLanguage.NLDistanceType = .cosine, using block: (Swift.String, NaturalLanguage.NLDistance) -> Swift.Bool)
  @nonobjc public func neighbors(for string: Swift.String, maximumCount maxCount: Swift.Int, distanceType: NaturalLanguage.NLDistanceType = .cosine) -> [(Swift.String, NaturalLanguage.NLDistance)]
  @nonobjc public func enumerateNeighbors(for vector: [Swift.Double], maximumCount maxCount: Swift.Int, distanceType: NaturalLanguage.NLDistanceType = .cosine, using block: (Swift.String, NaturalLanguage.NLDistance) -> Swift.Bool)
  @nonobjc public func neighbors(for vector: [Swift.Double], maximumCount maxCount: Swift.Int, distanceType: NaturalLanguage.NLDistanceType = .cosine) -> [(Swift.String, NaturalLanguage.NLDistance)]
  @nonobjc public func vector(for string: Swift.String) -> [Swift.Double]?
  @nonobjc public class func write(_ dictionary: [Swift.String : [Swift.Double]], language: NaturalLanguage.NLLanguage?, revision: Swift.Int, to url: Foundation.URL) throws
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NaturalLanguage.NLLanguageRecognizer {
  @nonobjc public var languageHints: [NaturalLanguage.NLLanguage : Swift.Double] {
    get
    set(newHints)
  }
  @nonobjc public func languageHypotheses(withMaximum maxHypotheses: Swift.Int) -> [NaturalLanguage.NLLanguage : Swift.Double]
}
