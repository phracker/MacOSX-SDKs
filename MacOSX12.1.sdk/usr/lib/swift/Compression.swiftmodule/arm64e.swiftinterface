// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-macos12.1 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCompression -swift-version 5 -enforce-exclusivity=checked -O -module-name Compression
@_exported import Compression
import Darwin
import Foundation
import Swift
import _Concurrency
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public enum Algorithm : Swift.CaseIterable, Swift.RawRepresentable {
  case lzfse
  case zlib
  case lz4
  case lzma
  public init?(rawValue: Compression.compression_algorithm)
  public var rawValue: Compression.compression_algorithm {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Compression.Algorithm]
  public typealias RawValue = Compression.compression_algorithm
  public static var allCases: [Compression.Algorithm] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public enum FilterOperation : Swift.RawRepresentable {
  case compress
  case decompress
  public init?(rawValue: Compression.compression_stream_operation)
  public var rawValue: Compression.compression_stream_operation {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias RawValue = Compression.compression_stream_operation
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public enum FilterError : Swift.Error {
  case invalidState
  case invalidData
  public static func == (a: Compression.FilterError, b: Compression.FilterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public class OutputFilter {
  public init(_ operation: Compression.FilterOperation, using algorithm: Compression.Algorithm, bufferCapacity: Swift.Int = 65536, writingTo writeFunc: @escaping (Foundation.Data?) throws -> Swift.Void) throws
  public func write<D>(_ data: D?) throws where D : Foundation.DataProtocol
  public func finalize() throws
  @objc deinit
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public class InputFilter<D> where D : Foundation.DataProtocol {
  public init(_ operation: Compression.FilterOperation, using algorithm: Compression.Algorithm, bufferCapacity: Swift.Int = 65536, readingFrom readFunc: @escaping (Swift.Int) throws -> D?) throws
  public func readData(ofLength count: Swift.Int) throws -> Foundation.Data?
  @objc deinit
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.Algorithm : Swift.Equatable {}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.Algorithm : Swift.Hashable {}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.FilterOperation : Swift.Equatable {}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.FilterOperation : Swift.Hashable {}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.FilterError : Swift.Equatable {}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension Compression.FilterError : Swift.Hashable {}
