// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-macos12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WidgetKit
import Combine
import CoreGraphics
import Foundation
import Intents
import Swift
import SwiftUI
import UniformTypeIdentifiers
@_exported import WidgetKit
import _Concurrency
import os.log
import os
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WidgetInfo {
  public let configuration: Intents.INIntent?
  public let family: WidgetKit.WidgetFamily
  public let kind: Swift.String
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: WidgetKit.WidgetInfo {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.WidgetInfo, b: WidgetKit.WidgetInfo) -> Swift.Bool
  public typealias ID = WidgetKit.WidgetInfo
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetInfo : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StaticConfiguration<Content> : SwiftUI.WidgetConfiguration where Content : SwiftUI.View {
  public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19StaticConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.StaticConfiguration {
  public init<Provider>(kind: Swift.String, provider: Provider, content: @escaping (Provider.Entry) -> Content) where Provider : WidgetKit.TimelineProvider
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WidgetPreviewContext : SwiftUI.PreviewContext {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    get
  }
  public init(family: WidgetKit.WidgetFamily)
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineProviderContext {
  @dynamicMemberLookup public struct EnvironmentVariants {
    public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, T>) -> [T]? {
      get
    }
    public subscript<T>(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, T>) -> [T]? {
      get
    }
  }
  public let environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants
  public let family: WidgetKit.WidgetFamily
  public let isPreview: Swift.Bool
  public let displaySize: CoreGraphics.CGSize
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineEntryRelevance : Swift.Codable, Swift.Hashable {
  public var score: Swift.Float
  public var duration: Foundation.TimeInterval
  public init(score: Swift.Float, duration: Foundation.TimeInterval = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.TimelineEntryRelevance, b: WidgetKit.TimelineEntryRelevance) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TimelineEntry {
  var date: Foundation.Date { get }
  var relevance: WidgetKit.TimelineEntryRelevance? { get }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.TimelineEntry {
  public var relevance: WidgetKit.TimelineEntryRelevance? {
    get
  }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineReloadPolicy : Swift.Equatable {
  public static let atEnd: WidgetKit.TimelineReloadPolicy
  public static let never: WidgetKit.TimelineReloadPolicy
  public static func after(_ date: Foundation.Date) -> WidgetKit.TimelineReloadPolicy
  public static func == (a: WidgetKit.TimelineReloadPolicy, b: WidgetKit.TimelineReloadPolicy) -> Swift.Bool
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Timeline<EntryType> where EntryType : WidgetKit.TimelineEntry {
  public let entries: [EntryType]
  public let policy: WidgetKit.TimelineReloadPolicy
  public init(entries: [EntryType], policy: WidgetKit.TimelineReloadPolicy)
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  typealias Context = WidgetKit.TimelineProviderContext
  func placeholder(in context: Self.Context) -> Self.Entry
  func getSnapshot(in context: Self.Context, completion: @escaping (Self.Entry) -> Swift.Void)
  func getTimeline(in context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol IntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : Intents.INIntent
  typealias Context = WidgetKit.TimelineProviderContext
  func placeholder(in context: Self.Context) -> Self.Entry
  func getSnapshot(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (Self.Entry) -> Swift.Void)
  func getTimeline(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class WidgetCenter {
  public static let shared: WidgetKit.WidgetCenter
  public struct UserInfoKey {
    public static let kind: Swift.String
    public static let family: Swift.String
  }
  public func getCurrentConfigurations(_ completion: @escaping (Swift.Result<[WidgetKit.WidgetInfo], Swift.Error>) -> Swift.Void)
  public func reloadTimelines(ofKind kind: Swift.String)
  public func reloadAllTimelines()
  @objc deinit
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func widgetURL(_ url: Foundation.URL?) -> some SwiftUI.View
  
}
extension SwiftUI.Widget {
  @available(iOS 14.0, macOS 11, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func main()
}
extension SwiftUI.WidgetBundle {
  @available(iOS 14.0, macOS 11, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func main()
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EnvironmentValues {
  public var widgetFamily: WidgetKit.WidgetFamily {
    get
  }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum WidgetFamily : Swift.Int, Swift.RawRepresentable, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  case systemSmall
  case systemMedium
  case systemLarge
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  case systemExtraLarge
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ClockHandRotationEffect : SwiftUI.ViewModifier, SwiftUI._ArchivableViewModifier {
  public enum Period {
    case hourHand
    case minuteHand
    case secondHand
    case custom(Foundation.TimeInterval)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @_Concurrency.MainActor(unsafe) public func body(content: WidgetKit._ClockHandRotationEffect.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit24_ClockHandRotationEffectV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _clockHandRotationEffect(_ period: WidgetKit._ClockHandRotationEffect.Period, in timeZone: Foundation.TimeZone, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View
  
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  public func configurationDisplayName(_ displayName: SwiftUI.Text) -> some SwiftUI.WidgetConfiguration
  
  public func configurationDisplayName(_ displayNameKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload public func configurationDisplayName<S>(_ displayName: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  public func description(_ description: SwiftUI.Text) -> some SwiftUI.WidgetConfiguration
  
  public func description(_ descriptionKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload public func description<S>(_ description: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  public func supportedFamilies(_ families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
  public func onBackgroundURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping ((_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void)) -> some SwiftUI.WidgetConfiguration
  
  public func onBackgroundURLSessionEvents(matching matchingBlock: ((_ identifier: Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping ((_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void)) -> some SwiftUI.WidgetConfiguration
  
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct IntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration where Intent : Intents.INIntent, Content : SwiftUI.View {
  public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19IntentConfigurationV4bodyQrvp", 0) __<Intent, Content>
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.IntentConfiguration {
  public init<Provider>(kind: Swift.String, intent: Intent.Type, provider: Provider, content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.IntentTimelineProvider
}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetFamily : Swift.Equatable {}
@available(iOS 14.0, macOS 11, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetFamily : Swift.Hashable {}
