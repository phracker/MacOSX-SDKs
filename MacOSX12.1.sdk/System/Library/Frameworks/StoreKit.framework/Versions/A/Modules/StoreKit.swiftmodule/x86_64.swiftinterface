// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-macos12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-concurrency -module-name StoreKit
import AppKit
import CoreFoundation
import CryptoKit
import CryptoKit/*.P256*/
import CryptoKit/*.SHA384*/
import Foundation
import Security
@_exported import StoreKit
import Swift
import _Concurrency
import os.log
import os
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult where SignedType == StoreKit.Transaction {
  public var jwsRepresentation: Swift.String {
    get
  }
  public var headerData: Foundation.Data {
    get
  }
  public var payloadData: Foundation.Data {
    get
  }
  public var signatureData: Foundation.Data {
    get
  }
  public var signature: CryptoKit.P256.Signing.ECDSASignature {
    get
  }
  public var signedData: Foundation.Data {
    get
  }
  public var signedDate: Foundation.Date {
    get
  }
  public var deviceVerification: Foundation.Data {
    get
  }
  public var deviceVerificationNonce: Foundation.UUID {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult where SignedType == StoreKit.Product.SubscriptionInfo.RenewalInfo {
  public var jwsRepresentation: Swift.String {
    get
  }
  public var headerData: Foundation.Data {
    get
  }
  public var payloadData: Foundation.Data {
    get
  }
  public var signatureData: Foundation.Data {
    get
  }
  public var signature: CryptoKit.P256.Signing.ECDSASignature {
    get
  }
  public var signedData: Foundation.Data {
    get
  }
  public var signedDate: Foundation.Date {
    get
  }
  public var deviceVerification: Foundation.Data {
    get
  }
  public var deviceVerificationNonce: Foundation.UUID {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct Transaction : Swift.Identifiable {
  public struct RevocationReason : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static var developerIssue: StoreKit.Transaction.RevocationReason
    public static var other: StoreKit.Transaction.RevocationReason
    public typealias RawValue = Swift.Int
  }
  public struct OfferType : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static var introductory: StoreKit.Transaction.OfferType
    public static var promotional: StoreKit.Transaction.OfferType
    public static var code: StoreKit.Transaction.OfferType
    public typealias RawValue = Swift.Int
  }
  public struct OwnershipType : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static var purchased: StoreKit.Transaction.OwnershipType
    public static var familyShared: StoreKit.Transaction.OwnershipType
    public typealias RawValue = Swift.String
  }
  @usableFromInline
  internal let backing: StoreKit.BackingValue
  public var jsonRepresentation: Foundation.Data {
    get
  }
  public let id: Swift.UInt64
  public let originalID: Swift.UInt64
  public let webOrderLineItemID: Swift.String?
  public let productID: Swift.String
  public let subscriptionGroupID: Swift.String?
  public let appBundleID: Swift.String
  public let purchaseDate: Foundation.Date
  public let originalPurchaseDate: Foundation.Date
  public let expirationDate: Foundation.Date?
  public let purchasedQuantity: Swift.Int
  public let isUpgraded: Swift.Bool
  public let offerType: StoreKit.Transaction.OfferType?
  public let offerID: Swift.String?
  public let revocationDate: Foundation.Date?
  public let revocationReason: StoreKit.Transaction.RevocationReason?
  public let productType: StoreKit.Product.ProductType
  public let appAccountToken: Foundation.UUID?
  public let deviceVerification: Foundation.Data
  public let deviceVerificationNonce: Foundation.UUID
  public let ownershipType: StoreKit.Transaction.OwnershipType
  public let signedDate: Foundation.Date
  
  #if compiler(>=5.3) && $AsyncAwait
  public func finish() async
  #endif

  public typealias ID = Swift.UInt64
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Transaction : Swift.Equatable {
  public static func == (lhs: StoreKit.Transaction, rhs: StoreKit.Transaction) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Transaction : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Transaction : Swift.CustomDebugStringConvertible {
  @inlinable public var debugDescription: Swift.String {
    get {
        backing.debugDescription
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Transaction {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Transactions : _Concurrency.AsyncSequence {
    public typealias Element = StoreKit.VerificationResult<StoreKit.Transaction>
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async -> StoreKit.VerificationResult<StoreKit.Transaction>?
      #endif

      public typealias Element = StoreKit.VerificationResult<StoreKit.Transaction>
    }
    public func makeAsyncIterator() -> StoreKit.Transaction.Transactions.AsyncIterator
  }
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var all: StoreKit.Transaction.Transactions {
    get
  }
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var currentEntitlements: StoreKit.Transaction.Transactions {
    get
  }
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public static func currentEntitlement(for productID: Swift.String) async -> StoreKit.VerificationResult<StoreKit.Transaction>?
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public static func latest(for productID: Swift.String) async -> StoreKit.VerificationResult<StoreKit.Transaction>?
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var unfinished: StoreKit.Transaction.Transactions {
    get
  }
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Transaction {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var updates: StoreKit.Transaction.Transactions {
    get
  }
  #endif

}
@available(iOS 15.0, macCatalyst 15.0, macOS 12.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension StoreKit.Transaction {
  public enum RefundRequestError : Swift.Error {
    case duplicateRequest
    case failed
    public static func == (a: StoreKit.Transaction.RefundRequestError, b: StoreKit.Transaction.RefundRequestError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum RefundRequestStatus {
    case success
    case userCancelled
    public static func == (a: StoreKit.Transaction.RefundRequestStatus, b: StoreKit.Transaction.RefundRequestStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable public func beginRefundRequest(in controller: AppKit.NSViewController) async throws -> StoreKit.Transaction.RefundRequestStatus {
        return try await Transaction.beginRefundRequest(for: self.id, in: controller)
    }
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 12.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static func beginRefundRequest(for transactionID: Swift.UInt64, in controller: AppKit.NSViewController) async throws -> StoreKit.Transaction.RefundRequestStatus
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum AppStore {
  @inlinable public static var canMakePayments: Swift.Bool {
    get {
            SKPaymentQueue.canMakePayments()
        }
  }
  public static var deviceVerificationID: Foundation.UUID? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.AppStore {
  
  #if compiler(>=5.3) && $AsyncAwait
  public static func sync() async throws
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct Storefront : Swift.Identifiable {
  public let countryCode: Swift.String
  public let id: Swift.String
  
  #if compiler(>=5.3) && $EffectfulProp
  public static var current: StoreKit.Storefront? {
    get async
  }
  #endif

  public typealias ID = Swift.String
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Storefront {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Storefronts : _Concurrency.AsyncSequence {
    public typealias Element = StoreKit.Storefront
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async -> StoreKit.Storefront?
      #endif

      public typealias Element = StoreKit.Storefront
    }
    public func makeAsyncIterator() -> StoreKit.Storefront.Storefronts.AsyncIterator
  }
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var updates: StoreKit.Storefront.Storefronts {
    get
  }
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  public struct SubscriptionPeriod : Swift.Equatable, Swift.Hashable {
    public enum Unit : Swift.Equatable, Swift.Hashable {
      case day
      case week
      case month
      case year
      public static func == (a: StoreKit.Product.SubscriptionPeriod.Unit, b: StoreKit.Product.SubscriptionPeriod.Unit) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public let unit: StoreKit.Product.SubscriptionPeriod.Unit
    public let value: Swift.Int
    public static func == (a: StoreKit.Product.SubscriptionPeriod, b: StoreKit.Product.SubscriptionPeriod) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionPeriod : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionPeriod.Unit : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.DateComponents {
  public init(subscriptionPeriod period: StoreKit.Product.SubscriptionPeriod)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  public struct SubscriptionOffer : Swift.Equatable, Swift.Hashable {
    public struct OfferType : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
      public let rawValue: Swift.String
      public init(rawValue: Swift.String)
      public static var introductory: StoreKit.Product.SubscriptionOffer.OfferType
      public static var promotional: StoreKit.Product.SubscriptionOffer.OfferType
      public typealias RawValue = Swift.String
    }
    public struct PaymentMode : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
      public let rawValue: Swift.String
      public init(rawValue: Swift.String)
      public static var payAsYouGo: StoreKit.Product.SubscriptionOffer.PaymentMode
      public static var payUpFront: StoreKit.Product.SubscriptionOffer.PaymentMode
      public static var freeTrial: StoreKit.Product.SubscriptionOffer.PaymentMode
      public typealias RawValue = Swift.String
    }
    public let id: Swift.String?
    public let type: StoreKit.Product.SubscriptionOffer.OfferType
    public let price: Foundation.Decimal
    public let displayPrice: Swift.String
    public let period: StoreKit.Product.SubscriptionPeriod
    public let periodCount: Swift.Int
    public let paymentMode: StoreKit.Product.SubscriptionOffer.PaymentMode
    public static func == (a: StoreKit.Product.SubscriptionOffer, b: StoreKit.Product.SubscriptionOffer) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionInfo {
  public struct RenewalState : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static var subscribed: StoreKit.Product.SubscriptionInfo.RenewalState
    public static var expired: StoreKit.Product.SubscriptionInfo.RenewalState
    public static var inBillingRetryPeriod: StoreKit.Product.SubscriptionInfo.RenewalState
    public static var inGracePeriod: StoreKit.Product.SubscriptionInfo.RenewalState
    public static var revoked: StoreKit.Product.SubscriptionInfo.RenewalState
    public typealias RawValue = Swift.Int
  }
  public struct RenewalInfo {
    public struct ExpirationReason : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
      public let rawValue: Swift.Int
      public init(rawValue: Swift.Int)
      public static var autoRenewDisabled: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason
      public static var billingError: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason
      public static var didNotConsentToPriceIncrease: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason
      public static var productUnavailable: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason
      public static var unknown: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason
      public typealias RawValue = Swift.Int
    }
    @frozen public enum PriceIncreaseStatus : Swift.Equatable, Swift.Hashable {
      case noIncreasePending
      case pending
      case agreed
      public static func == (a: StoreKit.Product.SubscriptionInfo.RenewalInfo.PriceIncreaseStatus, b: StoreKit.Product.SubscriptionInfo.RenewalInfo.PriceIncreaseStatus) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @usableFromInline
    internal let backing: StoreKit.BackingValue
    public var jsonRepresentation: Foundation.Data {
      get
    }
    public let originalTransactionID: Swift.UInt64
    public let currentProductID: Swift.String
    public let willAutoRenew: Swift.Bool
    public let autoRenewPreference: Swift.String?
    public let expirationReason: StoreKit.Product.SubscriptionInfo.RenewalInfo.ExpirationReason?
    public let priceIncreaseStatus: StoreKit.Product.SubscriptionInfo.RenewalInfo.PriceIncreaseStatus
    public let isInBillingRetry: Swift.Bool
    public let gracePeriodExpirationDate: Foundation.Date?
    public let offerID: Swift.String?
    public let offerType: StoreKit.Transaction.OfferType?
    public let deviceVerification: Foundation.Data
    public let deviceVerificationNonce: Foundation.UUID
    public let signedDate: Foundation.Date
  }
  public struct Status : Swift.Equatable, Swift.Hashable {
    public let state: StoreKit.Product.SubscriptionInfo.RenewalState
    public let transaction: StoreKit.VerificationResult<StoreKit.Transaction>
    public let renewalInfo: StoreKit.VerificationResult<StoreKit.Product.SubscriptionInfo.RenewalInfo>
    public static func == (a: StoreKit.Product.SubscriptionInfo.Status, b: StoreKit.Product.SubscriptionInfo.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  
  #if compiler(>=5.3) && $EffectfulProp
  @inlinable public var status: [StoreKit.Product.SubscriptionInfo.Status] {
    get async throws {
            try await Product.SubscriptionInfo.status(for: subscriptionGroupID)
        }
  }
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public static func status(for groupID: Swift.String) async throws -> [StoreKit.Product.SubscriptionInfo.Status]
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionInfo.Status {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Statuses : _Concurrency.AsyncSequence {
    public typealias Element = StoreKit.Product.SubscriptionInfo.Status
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async -> StoreKit.Product.SubscriptionInfo.Status.Statuses.Element?
      #endif

      public typealias Element = StoreKit.Product.SubscriptionInfo.Status
    }
    public func makeAsyncIterator() -> StoreKit.Product.SubscriptionInfo.Status.Statuses.AsyncIterator
  }
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public static var updates: StoreKit.Product.SubscriptionInfo.Status.Statuses {
    get
  }
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionInfo.RenewalInfo : Swift.Equatable {
  public static func == (lhs: StoreKit.Product.SubscriptionInfo.RenewalInfo, rhs: StoreKit.Product.SubscriptionInfo.RenewalInfo) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionInfo.RenewalInfo : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.SubscriptionInfo.RenewalInfo : Swift.CustomDebugStringConvertible {
  @inlinable public var debugDescription: Swift.String {
    get {
        backing.debugDescription
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum VerificationResult<SignedType> {
  case unverified(SignedType, StoreKit.VerificationResult<SignedType>.VerificationError)
  case verified(SignedType)
  
  #if compiler(>=5.3) && $EffectfulProp
  public var payloadValue: SignedType {
    get throws
  }
  #endif

  public var unsafePayloadValue: SignedType {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult {
  public enum VerificationError : Swift.Error {
    case revokedCertificate
    case invalidCertificateChain
    case invalidDeviceVerification
    case invalidEncoding
    case invalidSignature
    case missingRequiredProperties
    public static func == (a: StoreKit.VerificationResult<SignedType>.VerificationError, b: StoreKit.VerificationResult<SignedType>.VerificationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult : Swift.Equatable where SignedType : Swift.Equatable {
  public static func == (a: StoreKit.VerificationResult<SignedType>, b: StoreKit.VerificationResult<SignedType>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult : Swift.Hashable where SignedType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.VerificationResult : Swift.CustomDebugStringConvertible where SignedType : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum StoreKitError : Swift.Error {
  case unknown
  case userCancelled
  case networkError(Foundation.URLError)
  case systemError(Swift.Error)
  case notAvailableInStorefront
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.BackingValue : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal enum BackingValue : Swift.Equatable, Swift.Hashable {
  case string(Swift.String)
  case number(Swift.Double)
  case bigInt(Swift.Int64)
  case bool(Swift.Bool)
  case array([StoreKit.BackingValue])
  case dictionary([Swift.String : StoreKit.BackingValue])
  case `nil`
  public subscript(key: Swift.String) -> StoreKit.BackingValue {
    get
    set(newValue)
  }
  public subscript(index: Swift.Int) -> StoreKit.BackingValue {
    get
    set(newValue)
  }
  @usableFromInline
  internal static func == (a: StoreKit.BackingValue, b: StoreKit.BackingValue) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.BackingValue : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.BackingValue : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  public struct SubscriptionInfo : Swift.Equatable, Swift.Hashable {
    public let introductoryOffer: StoreKit.Product.SubscriptionOffer?
    public let promotionalOffers: [StoreKit.Product.SubscriptionOffer]
    public let subscriptionGroupID: Swift.String
    public let subscriptionPeriod: StoreKit.Product.SubscriptionPeriod
    
    #if compiler(>=5.3) && $EffectfulProp
    @inlinable public var isEligibleForIntroOffer: Swift.Bool {
      get async {
                await Self.isEligibleForIntroOffer(for: subscriptionGroupID)
            }
    }
    #endif

    
    #if compiler(>=5.3) && $AsyncAwait
    public static func isEligibleForIntroOffer(for groupID: Swift.String) async -> Swift.Bool
    #endif

    public static func == (a: StoreKit.Product.SubscriptionInfo, b: StoreKit.Product.SubscriptionInfo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  public struct PurchaseOption : Swift.Equatable, Swift.Hashable {
    public static func appAccountToken(_ token: Foundation.UUID) -> StoreKit.Product.PurchaseOption
    @usableFromInline
    internal static func custom(key: Swift.String, value: StoreKit.BackingValue) -> StoreKit.Product.PurchaseOption
    public static func custom(key: Swift.String, value: Swift.String) -> StoreKit.Product.PurchaseOption
    public static func custom(key: Swift.String, value: Swift.Double) -> StoreKit.Product.PurchaseOption
    public static func custom(key: Swift.String, value: Swift.Bool) -> StoreKit.Product.PurchaseOption
    public static func custom(key: Swift.String, value: Foundation.Data) -> StoreKit.Product.PurchaseOption
    public static func promotionalOffer(offerID: Swift.String, keyID: Swift.String, nonce: Foundation.UUID, signature: Foundation.Data, timestamp: Swift.Int) -> StoreKit.Product.PurchaseOption
    public static func quantity(_ quantity: Swift.Int) -> StoreKit.Product.PurchaseOption
    public static func simulatesAskToBuyInSandbox(_ simulateAskToBuy: Swift.Bool) -> StoreKit.Product.PurchaseOption
    public static func onStorefrontChange(shouldContinuePurchase: @escaping (StoreKit.Storefront) -> Swift.Bool) -> StoreKit.Product.PurchaseOption
    public static func == (a: StoreKit.Product.PurchaseOption, b: StoreKit.Product.PurchaseOption) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product.PurchaseOption : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct Product : Swift.Identifiable {
  public struct ProductType : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static var consumable: StoreKit.Product.ProductType
    public static var nonConsumable: StoreKit.Product.ProductType
    public static var nonRenewable: StoreKit.Product.ProductType
    public static var autoRenewable: StoreKit.Product.ProductType
    public typealias RawValue = Swift.String
  }
  @usableFromInline
  internal let backing: StoreKit.BackingValue
  public var jsonRepresentation: Foundation.Data {
    get
  }
  public let id: Swift.String
  public let type: StoreKit.Product.ProductType
  public let displayName: Swift.String
  public let description: Swift.String
  public let price: Foundation.Decimal
  public let displayPrice: Swift.String
  public let isFamilyShareable: Swift.Bool
  public let subscription: StoreKit.Product.SubscriptionInfo?
  public typealias ID = Swift.String
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product : Swift.Equatable {
  @inlinable public static func == (lhs: StoreKit.Product, rhs: StoreKit.Product) -> Swift.Bool {
        lhs.backing == rhs.backing
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product : Swift.Hashable {
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(backing)
    }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product : Swift.CustomDebugStringConvertible {
  @inlinable public var debugDescription: Swift.String {
    get {
        backing.debugDescription
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  public enum PurchaseResult {
    case success(StoreKit.VerificationResult<StoreKit.Transaction>)
    case userCancelled
    case pending
  }
  public enum PurchaseError : Swift.Error {
    case invalidQuantity
    case productUnavailable
    case purchaseNotAllowed
    case ineligibleForOffer
    case invalidOfferIdentifier
    case invalidOfferPrice
    case invalidOfferSignature
    case missingOfferParameters
    public static func == (a: StoreKit.Product.PurchaseError, b: StoreKit.Product.PurchaseError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  public func purchase(options: Swift.Set<StoreKit.Product.PurchaseOption> = []) async throws -> StoreKit.Product.PurchaseResult
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  
  #if compiler(>=5.3) && $AsyncAwait
  public static func products<Identifiers>(for identifiers: Identifiers) async throws -> [StoreKit.Product] where Identifiers : Swift.Collection, Identifiers.Element == Swift.String
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension StoreKit.Product {
  
  #if compiler(>=5.3) && $EffectfulProp
  @inlinable public var latestTransaction: StoreKit.VerificationResult<StoreKit.Transaction>? {
    get async {
            await Transaction.latest(for: id)
        }
  }
  #endif

  
  #if compiler(>=5.3) && $EffectfulProp
  @inlinable public var currentEntitlement: StoreKit.VerificationResult<StoreKit.Transaction>? {
    get async {
            await Transaction.currentEntitlement(for: id)
        }
  }
  #endif

}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.BinaryInteger {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.BinaryFloatingPoint {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.Date {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.Data {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.String {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.Decimal {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Bool {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.UUID {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Array where Element == StoreKit.BackingValue {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Dictionary where Key == Swift.String, Value == StoreKit.BackingValue {
  @usableFromInline
  internal init?(_ value: StoreKit.BackingValue)
}
