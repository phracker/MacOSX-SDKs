// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-macos12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name _AuthenticationServices_SwiftUI
@_exported import AuthenticationServices
import Swift
import SwiftUI
import _Concurrency
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct SignInWithAppleButton : SwiftUI.View {
  public init(_ label: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label = .signIn, onRequest: @escaping (AuthenticationServices.ASAuthorizationAppleIDRequest) -> Swift.Void, onCompletion: @escaping ((Swift.Result<AuthenticationServices.ASAuthorization, Swift.Error>) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public struct Label {
    public static let signIn: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
    public static let `continue`: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
    public static let signUp: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Label
  }
  public struct Style {
    public static let black: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
    public static let white: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
    public static let whiteOutline: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style
  }
  public typealias Body = @_opaqueReturnTypeOf("$s31_AuthenticationServices_SwiftUI21SignInWithAppleButtonV4bodyQrvp", 0) __
}
extension SwiftUI.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func signInWithAppleButtonStyle(_ style: _AuthenticationServices_SwiftUI.SignInWithAppleButton.Style) -> some SwiftUI.View
  
}
