// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-macos12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Accessibility
@_exported import Accessibility
import Foundation
import Swift
import _Concurrency
@available(macOS 12.2, iOS 15.2, tvOS 15.2, watchOS 8.2, *)
extension Accessibility.AXBrailleMap {
  public subscript(point: CoreGraphics.CGPoint) -> Swift.Float {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXNumericDataAxisDescriptor {
  public var range: Swift.ClosedRange<Swift.Double> {
    get
    set(newRange)
  }
  public var gridlinePositions: [Swift.Double] {
    get
    set(newPositions)
  }
  convenience public init(title: Swift.String, range: Swift.ClosedRange<Swift.Double>, gridlinePositions: [Swift.Double], valueDescriptionProvider: @escaping ((Swift.Double) -> Swift.String))
  convenience public init(attributedTitle: Foundation.NSAttributedString, range: Swift.ClosedRange<Swift.Double>, gridlinePositions: [Swift.Double], valueDescriptionProvider: @escaping ((Swift.Double) -> Swift.String))
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXDataPoint {
  public enum Value {
    case number(Swift.Double)
    case category(Swift.String)
  }
  convenience public init(x: Swift.Double, y: Swift.Double? = nil, additionalValues: [Accessibility.AXDataPoint.Value] = [], label: Swift.String? = nil)
  convenience public init(x: Swift.String, y: Swift.Double? = nil, additionalValues: [Accessibility.AXDataPoint.Value] = [], label: Swift.String? = nil)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXChartDescriptor {
  open var xAxis: Accessibility.AXDataAxisDescriptor {
    get
    set(newAxis)
  }
  open var additionalAxes: [Accessibility.AXDataAxisDescriptor] {
    get
    set(newAdditionalAxes)
  }
  convenience public init(title: Swift.String? = nil, summary: Swift.String? = nil, xAxis: Accessibility.AXDataAxisDescriptor, yAxis: Accessibility.AXNumericDataAxisDescriptor? = nil, additionalAxes: [Accessibility.AXDataAxisDescriptor] = [], series: [Accessibility.AXDataSeriesDescriptor])
  convenience public init(attributedTitle: Foundation.NSAttributedString? = nil, summary: Swift.String? = nil, xAxis: Accessibility.AXDataAxisDescriptor, yAxis: Accessibility.AXNumericDataAxisDescriptor? = nil, additionalAxes: [Accessibility.AXDataAxisDescriptor] = [], series: [Accessibility.AXDataSeriesDescriptor])
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes {
  public var accessibility: Foundation.AttributeScopes.AccessibilityAttributes.Type {
    get
  }
  public struct AccessibilityAttributes : Foundation.AttributeScope {
    public let accessibilityHeadingLevel: Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute
    public let accessibilityTextCustom: Foundation.AttributeScopes.AccessibilityAttributes.TextCustomAttribute
    public let accessibilityTextualContext: Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute
    public let accessibilitySpeechIncludesPunctuation: Foundation.AttributeScopes.AccessibilityAttributes.IncludesPunctuationAttribute
    public let accessibilitySpeechAdjustedPitch: Foundation.AttributeScopes.AccessibilityAttributes.AdjustedPitchAttribute
    public let accessibilitySpeechSpellsOutCharacters: Foundation.AttributeScopes.AccessibilityAttributes.SpellOutAttribute
    public let accessibilitySpeechAnnouncementsQueued: Foundation.AttributeScopes.AccessibilityAttributes.QueueAnnouncementAttribute
    public let accessibilitySpeechPhoneticNotation: Foundation.AttributeScopes.AccessibilityAttributes.IPANotationAttribute
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeDynamicLookup {
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.AccessibilityAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes {
  @frozen public enum HeadingLevelAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func decodeMarkdown(from decoder: Swift.Decoder) throws -> Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public static func objectiveCValue(for value: Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel) throws -> Foundation.NSNumber
    public static func value(for object: Foundation.NSNumber) throws -> Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public enum HeadingLevel : Swift.Int, Swift.Codable {
      case unspecified, h1, h2, h3, h4, h5, h6
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
  }
  @frozen public enum TextCustomAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = [Swift.String]
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum TextualContextAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public typealias ObjectiveCValue = Foundation.NSString
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func decodeMarkdown(from decoder: Swift.Decoder) throws -> Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public static func objectiveCValue(for value: Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext) throws -> Foundation.NSString
    public static func value(for object: Foundation.NSString) throws -> Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public enum TextualContext : Swift.String, Swift.Codable {
      case plain
      case console
      case fileSystem
      case messaging
      case narrative
      case sourceCode
      case spreadsheet
      case wordProcessing
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  @frozen public enum IncludesPunctuationAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum AdjustedPitchAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Swift.Double
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func objectiveCValue(for value: Swift.Double) throws -> Foundation.NSNumber
    public static func value(for object: Foundation.NSNumber) throws -> Swift.Double
  }
  @frozen public enum SpellOutAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum QueueAnnouncementAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum IPANotationAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.String
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextCustomAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IncludesPunctuationAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AdjustedPitchAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.SpellOutAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.QueueAnnouncementAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IPANotationAttribute : Swift.Sendable {}
