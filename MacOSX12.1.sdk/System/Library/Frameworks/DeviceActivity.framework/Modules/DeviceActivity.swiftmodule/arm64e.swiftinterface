// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-macos12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DeviceActivity
import Foundation
import ManagedSettings
import Swift
import _Concurrency
import os.log
import os
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityName : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public var rawValue: Swift.String
  public init(_ rawValue: Swift.String)
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivitySchedule : Swift.Equatable {
  public init(intervalStart: Foundation.DateComponents, intervalEnd: Foundation.DateComponents, repeats: Swift.Bool, warningTime: Foundation.DateComponents? = nil)
  public var intervalStart: Foundation.DateComponents {
    get
  }
  public var intervalEnd: Foundation.DateComponents {
    get
  }
  public var nextInterval: Foundation.DateInterval? {
    get
  }
  public var repeats: Swift.Bool {
    get
  }
  public var warningTime: Foundation.DateComponents? {
    get
  }
  public static func == (a: DeviceActivity.DeviceActivitySchedule, b: DeviceActivity.DeviceActivitySchedule) -> Swift.Bool
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityEvent : Swift.Equatable {
  public struct Name : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public var rawValue: Swift.String
    public init(_ rawValue: Swift.String)
    public init(rawValue: Swift.String)
    public typealias RawValue = Swift.String
  }
  public init(applications: Swift.Set<ManagedSettings.ApplicationToken> = [], categories: Swift.Set<ManagedSettings.ActivityCategoryToken> = [], webDomains: Swift.Set<ManagedSettings.WebDomainToken> = [], threshold: Foundation.DateComponents)
  public var applications: Swift.Set<ManagedSettings.ApplicationToken> {
    get
  }
  public var categories: Swift.Set<ManagedSettings.ActivityCategoryToken> {
    get
  }
  public var webDomains: Swift.Set<ManagedSettings.WebDomainToken> {
    get
  }
  public var includesAllActivity: Swift.Bool {
    get
  }
  public var threshold: Foundation.DateComponents {
    get
  }
  public static func == (a: DeviceActivity.DeviceActivityEvent, b: DeviceActivity.DeviceActivityEvent) -> Swift.Bool
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeviceActivityCenter {
  public init()
  public var activities: [DeviceActivity.DeviceActivityName] {
    get
  }
  public func schedule(for activity: DeviceActivity.DeviceActivityName) -> DeviceActivity.DeviceActivitySchedule?
  public func events(for activity: DeviceActivity.DeviceActivityName) -> [DeviceActivity.DeviceActivityEvent.Name : DeviceActivity.DeviceActivityEvent]
  public enum MonitoringError : Foundation.LocalizedError {
    case excessiveActivities
    case intervalTooLong
    case intervalTooShort
    case invalidDateComponents
    case unauthorized
    public var errorDescription: Swift.String? {
      get
    }
    public var recoverySuggestion: Swift.String? {
      get
    }
    public static func == (a: DeviceActivity.DeviceActivityCenter.MonitoringError, b: DeviceActivity.DeviceActivityCenter.MonitoringError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func startMonitoring(_ activity: DeviceActivity.DeviceActivityName, during schedule: DeviceActivity.DeviceActivitySchedule, events: [DeviceActivity.DeviceActivityEvent.Name : DeviceActivity.DeviceActivityEvent] = [:]) throws
  public func stopMonitoring(_ activities: [DeviceActivity.DeviceActivityName] = [])
}
@_inheritsConvenienceInitializers @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@objc open class DeviceActivityMonitor : ObjectiveC.NSObject {
  open func intervalDidStart(for activity: DeviceActivity.DeviceActivityName)
  open func intervalDidEnd(for activity: DeviceActivity.DeviceActivityName)
  open func eventDidReachThreshold(_ event: DeviceActivity.DeviceActivityEvent.Name, activity: DeviceActivity.DeviceActivityName)
  open func intervalWillStartWarning(for activity: DeviceActivity.DeviceActivityName)
  open func intervalWillEndWarning(for activity: DeviceActivity.DeviceActivityName)
  open func eventWillReachThresholdWarning(_ event: DeviceActivity.DeviceActivityEvent.Name, activity: DeviceActivity.DeviceActivityName)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityCenter.MonitoringError : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DeviceActivity.DeviceActivityCenter.MonitoringError : Swift.Hashable {}
