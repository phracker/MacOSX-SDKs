// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.46.202 clang-1300.0.29.30)
// swift-module-flags: -target arm64e-apple-ios15.2-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ManagedSettings
import Combine
import Foundation
import Swift
import _Concurrency
import os.log
import os
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AccountSettings : ManagedSettings.ManagedSettingsGroup {
  public var lockAccounts: Swift.Bool? {
    get
    set
  }
  public static let lockAccounts: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ManagedSettingsGroup {
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Application : Swift.Equatable, Swift.Hashable {
  public let bundleIdentifier: Swift.String?
  public let token: ManagedSettings.ApplicationToken?
  public let localizedDisplayName: Swift.String?
  public init(bundleIdentifier: Swift.String)
  public init(token: ManagedSettings.ApplicationToken)
  public static func == (a: ManagedSettings.Application, b: ManagedSettings.Application) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias ApplicationToken = ManagedSettings.Token<ManagedSettings.Application>
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ApplicationSettings : ManagedSettings.ManagedSettingsGroup {
  public var blockedApplications: Swift.Set<ManagedSettings.Application>? {
    get
    set
  }
  public static let blockedApplications: ManagedSettings.SettingMetadata<Swift.Set<ManagedSettings.Application>>
  public var denyAppInstallation: Swift.Bool? {
    get
    set
  }
  public static let denyAppInstallation: ManagedSettings.SettingMetadata<Swift.Bool>
  public var denyAppRemoval: Swift.Bool? {
    get
    set
  }
  public static let denyAppRemoval: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Token<T> : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public static func == (a: ManagedSettings.Token<T>, b: ManagedSettings.Token<T>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AppStoreSettings : ManagedSettings.ManagedSettingsGroup {
  public var denyInAppPurchases: Swift.Bool? {
    get
    set
  }
  public static let denyInAppPurchases: ManagedSettings.SettingMetadata<Swift.Bool>
  public var maximumRating: Swift.Int? {
    get
    set
  }
  public static let maximumRating: ManagedSettings.BoundedSettingMetadata<Swift.Int>
  public var requirePasswordForPurchases: Swift.Bool? {
    get
    set
  }
  public static let requirePasswordForPurchases: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CellularSettings : ManagedSettings.ManagedSettingsGroup {
  public var lockAppCellularData: Swift.Bool? {
    get
    set
  }
  public static let lockAppCellularData: ManagedSettings.SettingMetadata<Swift.Bool>
  public var lockCellularPlan: Swift.Bool? {
    get
    set
  }
  public static let lockCellularPlan: ManagedSettings.SettingMetadata<Swift.Bool>
  public var lockESIM: Swift.Bool? {
    get
    set
  }
  public static let lockESIM: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ShieldAction : Swift.Int {
  case primaryButtonPressed
  case secondaryButtonPressed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ShieldActionResponse : Swift.Int {
  case none
  case close
  case `defer`
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@objc open class ShieldActionDelegate : ObjectiveC.NSObject {
  open func handle(action: ManagedSettings.ShieldAction, for application: ManagedSettings.ApplicationToken, completionHandler: @escaping (ManagedSettings.ShieldActionResponse) -> Swift.Void)
  open func handle(action: ManagedSettings.ShieldAction, for category: ManagedSettings.ActivityCategoryToken, completionHandler: @escaping (ManagedSettings.ShieldActionResponse) -> Swift.Void)
  open func handle(action: ManagedSettings.ShieldAction, for webDomain: ManagedSettings.WebDomainToken, completionHandler: @escaping (ManagedSettings.ShieldActionResponse) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ActivityCategory : Swift.Equatable, Swift.Hashable {
  public let token: ManagedSettings.ActivityCategoryToken?
  public let localizedDisplayName: Swift.String?
  public init(token: ManagedSettings.ActivityCategoryToken)
  public static func == (a: ManagedSettings.ActivityCategory, b: ManagedSettings.ActivityCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias ActivityCategoryToken = ManagedSettings.Token<ManagedSettings.ActivityCategory>
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldSettings {
  public enum ActivityCategoryPolicy<Activity> : Swift.Equatable {
    case none
    case specific(Swift.Set<ManagedSettings.ActivityCategoryToken>, except: Swift.Set<ManagedSettings.Token<Activity>> = [])
    case all(except: Swift.Set<ManagedSettings.Token<Activity>> = [])
    public static func == (lhs: ManagedSettings.ShieldSettings.ActivityCategoryPolicy<Activity>, rhs: ManagedSettings.ShieldSettings.ActivityCategoryPolicy<Activity>) -> Swift.Bool
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GameCenterSettings : ManagedSettings.ManagedSettingsGroup {
  public var denyAddingFriends: Swift.Bool? {
    get
    set
  }
  public static let denyAddingFriends: ManagedSettings.SettingMetadata<Swift.Bool>
  public var denyMultiplayerGaming: Swift.Bool? {
    get
    set
  }
  public static let denyMultiplayerGaming: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MediaSettings : ManagedSettings.ManagedSettingsGroup {
  public var denyBookstoreErotica: Swift.Bool? {
    get
    set
  }
  public static let denyBookstoreErotica: ManagedSettings.SettingMetadata<Swift.Bool>
  public var denyExplicitContent: Swift.Bool? {
    get
    set
  }
  public static let denyExplicitContent: ManagedSettings.SettingMetadata<Swift.Bool>
  public var denyMusicService: Swift.Bool? {
    get
    set
  }
  public static let denyMusicService: ManagedSettings.SettingMetadata<Swift.Bool>
  public var maximumMovieRating: Swift.Int? {
    get
    set
  }
  public static let maximumMovieRating: ManagedSettings.BoundedSettingMetadata<Swift.Int>
  public var maximumTVShowRating: Swift.Int? {
    get
    set
  }
  public static let maximumTVShowRating: ManagedSettings.BoundedSettingMetadata<Swift.Int>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PasscodeSettings : ManagedSettings.ManagedSettingsGroup {
  public var lockPasscode: Swift.Bool? {
    get
    set
  }
  public static let lockPasscode: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DateAndTimeSettings : ManagedSettings.ManagedSettingsGroup {
  public var requireAutomaticDateAndTime: Swift.Bool? {
    get
    set
  }
  public static let requireAutomaticDateAndTime: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ShieldSettings : ManagedSettings.ManagedSettingsGroup {
  public var applications: Swift.Set<ManagedSettings.ApplicationToken>? {
    get
    set
  }
  public static let applications: ManagedSettings.SettingMetadata<Swift.Set<ManagedSettings.ApplicationToken>>
  public var applicationCategories: ManagedSettings.ShieldSettings.ActivityCategoryPolicy<ManagedSettings.Application>? {
    get
    set
  }
  public static let applicationCategories: ManagedSettings.SettingMetadata<ManagedSettings.ShieldSettings.ActivityCategoryPolicy<ManagedSettings.Application>>
  public var webDomains: Swift.Set<ManagedSettings.WebDomainToken>? {
    get
    set
  }
  public static let webDomains: ManagedSettings.SettingMetadata<Swift.Set<ManagedSettings.WebDomainToken>>
  public var webDomainCategories: ManagedSettings.ShieldSettings.ActivityCategoryPolicy<ManagedSettings.WebDomain>? {
    get
    set
  }
  public static let webDomainCategories: ManagedSettings.SettingMetadata<ManagedSettings.ShieldSettings.ActivityCategoryPolicy<ManagedSettings.WebDomain>>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SettingMetadata<Value> {
  public let defaultValue: Value
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct BoundedSettingMetadata<Value> where Value : Swift.Comparable {
  public let defaultValue: Value
  public let bounds: Swift.ClosedRange<Value>
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class ManagedSettingsStore : Combine.ObservableObject {
  public init()
  @objc deinit
  public var account: ManagedSettings.AccountSettings
  public var application: ManagedSettings.ApplicationSettings
  public var appStore: ManagedSettings.AppStoreSettings
  public var cellular: ManagedSettings.CellularSettings
  public var dateAndTime: ManagedSettings.DateAndTimeSettings
  public var gameCenter: ManagedSettings.GameCenterSettings
  public var media: ManagedSettings.MediaSettings
  public var passcode: ManagedSettings.PasscodeSettings
  public var safari: ManagedSettings.SafariSettings
  public var shield: ManagedSettings.ShieldSettings
  public var siri: ManagedSettings.SiriSettings
  public var webContent: ManagedSettings.WebContentSettings
  @Combine.Published @_projectedValueProperty($effectiveMaximumMovieRating) public var effectiveMaximumMovieRating: Swift.Int {
    get
  }
  public var $effectiveMaximumMovieRating: Combine.Published<Swift.Int>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($effectiveMaximumTVShowRating) public var effectiveMaximumTVShowRating: Swift.Int {
    get
  }
  public var $effectiveMaximumTVShowRating: Combine.Published<Swift.Int>.Publisher {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SafariSettings : ManagedSettings.ManagedSettingsGroup {
  public var denyAutoFill: Swift.Bool? {
    get
    set
  }
  public static let denyAutoFill: ManagedSettings.SettingMetadata<Swift.Bool>
  public enum CookiePolicy : Swift.String, Swift.Comparable {
    case never
    case currentWebsite
    case visitedWebsites
    case always
    public static func < (lhs: ManagedSettings.SafariSettings.CookiePolicy, rhs: ManagedSettings.SafariSettings.CookiePolicy) -> Swift.Bool
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var cookiePolicy: ManagedSettings.SafariSettings.CookiePolicy? {
    get
    set
  }
  public static let cookiePolicy: ManagedSettings.SettingMetadata<ManagedSettings.SafariSettings.CookiePolicy>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SiriSettings : ManagedSettings.ManagedSettingsGroup {
  public var denySiri: Swift.Bool? {
    get
    set
  }
  public static let denySiri: ManagedSettings.SettingMetadata<Swift.Bool>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WebDomain : Swift.Equatable, Swift.Hashable {
  public let domain: Swift.String?
  public let token: ManagedSettings.WebDomainToken?
  public init(domain: Swift.String)
  public init(token: ManagedSettings.WebDomainToken)
  public static func == (a: ManagedSettings.WebDomain, b: ManagedSettings.WebDomain) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias WebDomainToken = ManagedSettings.Token<ManagedSettings.WebDomain>
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WebContentSettings : ManagedSettings.ManagedSettingsGroup {
  public enum FilterPolicy : Swift.Equatable {
    case none
    case specific(_: Swift.Set<ManagedSettings.WebDomain>)
    case auto(_: Swift.Set<ManagedSettings.WebDomain> = [], except: Swift.Set<ManagedSettings.WebDomain> = [])
    case all(except: Swift.Set<ManagedSettings.WebDomain> = [])
    public static func == (lhs: ManagedSettings.WebContentSettings.FilterPolicy, rhs: ManagedSettings.WebContentSettings.FilterPolicy) -> Swift.Bool
  }
  public var blockedByFilter: ManagedSettings.WebContentSettings.FilterPolicy? {
    get
    set
  }
  public static let blockedByFilter: ManagedSettings.SettingMetadata<ManagedSettings.WebContentSettings.FilterPolicy>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldAction : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldAction : Swift.Hashable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldAction : Swift.RawRepresentable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldActionResponse : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldActionResponse : Swift.Hashable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.ShieldActionResponse : Swift.RawRepresentable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.SafariSettings.CookiePolicy : Swift.Hashable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedSettings.SafariSettings.CookiePolicy : Swift.RawRepresentable {}
