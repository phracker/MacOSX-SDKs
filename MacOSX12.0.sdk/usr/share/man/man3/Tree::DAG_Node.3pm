.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::DAG_Node 3"
.TH Tree::DAG_Node 3 "2018-02-13" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::DAG_Node \- An N\-ary tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Using as a base class"
.IX Subsection "Using as a base class"
.Vb 1
\&        package Game::Tree::Node;
\&
\&        use parent \*(AqTree::DAG_Node\*(Aq;
\&
\&        # Now add your own methods overriding/extending the methods in C<Tree::DAG_Node>...
.Ve
.SS "Using as a class on its own"
.IX Subsection "Using as a class on its own"
.Vb 1
\&        use Tree::DAG_Node;
\&
\&        my($root) = Tree::DAG_Node \-> new({name => \*(Aqroot\*(Aq, attributes => {uid => 0} });
\&
\&        $root \-> add_daughter(Tree::DAG_Node \-> new({name => \*(Aqone\*(Aq, attributes => {uid => 1} }) );
\&        $root \-> add_daughter(Tree::DAG_Node \-> new({name => \*(Aqtwo\*(Aq, attributes => {} }) );
\&        $root \-> add_daughter(Tree::DAG_Node \-> new({name => \*(Aqthree\*(Aq}) ); # Attrs default to {}.
.Ve
.PP
Or:
.PP
.Vb 2
\&        my($count) = 0;
\&        my($tree)  = Tree::DAG_Node \-> new({name => \*(AqRoot\*(Aq, attributes => {\*(Aquid\*(Aq => $count} });
.Ve
.PP
Or:
.PP
.Vb 1
\&        my $root = Tree::DAG_Node \-> new();
\&
\&        $root \-> name("I\*(Aqm the tops");
\&        $root \-> attributes({uid => 0});
\&
\&        my $new_daughter = $root \-> new_daughter;
\&
\&        $new_daughter \-> name(\*(AqAnother node\*(Aq);
\&        $new_daughter \-> attributes({uid => 1});
\&        ...
.Ve
.PP
Lastly, for fancy wrappers \- called \fB_add_daughter()\fR \- around \f(CW\*(C`new()\*(C'\fR, see these modules:
Marpa::Demo::StringParser and GraphViz2::Marpa. Both of these modules use Moo.
.PP
See scripts/*.pl for other samples.
.SS "Using with utf\-8 data"
.IX Subsection "Using with utf-8 data"
read_tree($file_name) works with utf\-8 data. See t/read.tree.t and t/tree.utf8.attributes.txt.
Such a file can be created by redirecting the output of \fBtree2string()\fR to a file of type utf\-8.
.PP
See the docs for Encode for the difference between utf8 and utf\-8. In brief, use utf\-8.
.PP
See also scripts/write_tree.pl and scripts/read.tree.pl and scripts/read.tree.log.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class encapsulates/makes/manipulates objects that represent nodes
in a tree structure. The tree structure is not an object itself, but
is emergent from the linkages you create between nodes.  This class
provides the methods for making linkages that can be used to build up
a tree, while preventing you from ever making any kinds of linkages
which are not allowed in a tree (such as having a node be its own
mother or ancestor, or having a node have two mothers).
.PP
This is what I mean by a \*(L"tree structure\*(R", a bit redundantly stated:
.IP "o A tree is a special case of an acyclic directed graph" 4
.IX Item "o A tree is a special case of an acyclic directed graph"
.PD 0
.IP "o A tree is a network of nodes where there's exactly one root node" 4
.IX Item "o A tree is a network of nodes where there's exactly one root node"
.PD
Also, the only primary relationship between nodes is the mother-daughter relationship.
.IP "o No node can be its own mother, or its mother's mother, etc" 4
.IX Item "o No node can be its own mother, or its mother's mother, etc"
.PD 0
.IP "o Each node in the tree has exactly one parent" 4
.IX Item "o Each node in the tree has exactly one parent"
.PD
Except for the root of course, which is parentless.
.IP "o Each node can have any number (0 .. N) daughter nodes" 4
.IX Item "o Each node can have any number (0 .. N) daughter nodes"
A given node's daughter nodes constitute an \fIordered\fR list.
.Sp
However, you are free to consider this ordering irrelevant.
Some applications do need daughters to be ordered, so I chose to
consider this the general case.
.IP "o A node can appear in only one tree, and only once in that tree" 4
.IX Item "o A node can appear in only one tree, and only once in that tree"
Notably (notable because it doesn't follow from the two above points),
a node cannot appear twice in its mother's daughter list.
.IP "o There's an idea of up versus down" 4
.IX Item "o There's an idea of up versus down"
Up means towards to the root, and down means away from the root (and towards the leaves).
.IP "o There's an idea of left versus right" 4
.IX Item "o There's an idea of left versus right"
Left is toward the start (index 0) of a given node's daughter list, and right is toward the end of a
given node's daughter list.
.PP
Trees as described above have various applications, among them:
representing syntactic constituency, in formal linguistics;
representing contingencies in a game tree; representing abstract
syntax in the parsing of any computer language \*(-- whether in
expression trees for programming languages, or constituency in the
parse of a markup language document.  (Some of these might not use the
fact that daughters are ordered.)
.PP
(Note: B\-Trees are a very special case of the above kinds of trees,
and are best treated with their own class.  Check \s-1CPAN\s0 for modules
encapsulating B\-Trees; or if you actually want a database, and for
some reason ended up looking here, go look at AnyDBM_File.)
.PP
Many base classes are not usable except as such \*(-- but \f(CW\*(C`Tree::DAG_Node\*(C'\fR
can be used as a normal class.  You can go ahead and say:
.PP
.Vb 6
\&        use Tree::DAG_Node;
\&        my $root = Tree::DAG_Node\->new();
\&        $root\->name("I\*(Aqm the tops");
\&        $new_daughter = Tree::DAG_Node\->new();
\&        $new_daughter\->name("More");
\&        $root\->add_daughter($new_daughter);
.Ve
.PP
and so on, constructing and linking objects from \f(CW\*(C`Tree::DAG_Node\*(C'\fR and
making useful tree structures out of them.
.SH "A NOTE TO THE READER"
.IX Header "A NOTE TO THE READER"
This class is big and provides lots of methods.  If your problem is
simple (say, just representing a simple parse tree), this class might
seem like using an atomic sledgehammer to swat a fly.  But the
complexity of this module's bells and whistles shouldn't detract from
the efficiency of using this class for a simple purpose.  In fact, I'd
be very surprised if any one user ever had use for more that even a
third of the methods in this class.  And remember: an atomic
sledgehammer \fBwill\fR kill that fly.
.SH "OBJECT CONTENTS"
.IX Header "OBJECT CONTENTS"
Implementationally, each node in a tree is an object, in the sense of
being an arbitrarily complex data structure that belongs to a class
(presumably \f(CW\*(C`Tree::DAG_Node\*(C'\fR, or ones derived from it) that provides
methods.
.PP
The attributes of a node-object are:
.IP "o mother \*(-- this node's mother.  undef if this is a root" 4
.IX Item "o mother this node's mother. undef if this is a root"
.PD 0
.IP "o daughters \*(-- the (possibly empty) list of daughters of this node" 4
.IX Item "o daughters the (possibly empty) list of daughters of this node"
.IP "o name \*(-- the name for this node" 4
.IX Item "o name the name for this node"
.PD
Need not be unique, or even printable.  This is printed in some of the
various dumper methods, but it's up to you if you don't put anything
meaningful or printable here.
.IP "o attributes \*(-- whatever the user wants to use it for" 4
.IX Item "o attributes whatever the user wants to use it for"
Presumably a hashref to whatever other attributes the user wants to
store without risk of colliding with the object's real attributes.
(Example usage: attributes to an \s-1SGML\s0 tag \*(-- you definitely wouldn't
want the existence of a \*(L"mother=foo\*(R" pair in such a tag to collide with
a node object's 'mother' attribute.)
.Sp
Aside from (by default) initializing it to {}, and having the access
method called \*(L"attributes\*(R" (described a ways below), I don't do
anything with the \*(L"attributes\*(R" in this module.  I basically intended
this so that users who don't want/need to bother deriving a class
from \f(CW\*(C`Tree::DAG_Node\*(C'\fR, could still attach whatever data they wanted in a
node.
.PP
\&\*(L"mother\*(R" and \*(L"daughters\*(R" are attributes that relate to linkage \*(-- they
are never written to directly, but are changed as appropriate by the
\&\*(L"linkage methods\*(R", discussed below.
.PP
The other two (and whatever others you may add in derived classes) are
simply accessed thru the same-named methods, discussed further below.
.SS "About The Documented Interface"
.IX Subsection "About The Documented Interface"
Stick to the documented interface (and comments in the source \*(--
especially ones saying \*(L"undocumented!\*(R" and/or \*(L"disfavored!\*(R" \*(-- do not
count as documentation!), and don't rely on any behavior that's not in
the documented interface.
.PP
Specifically, unless the documentation for a particular method says
\&\*(L"this method returns thus-and-such a value\*(R", then you should not rely on
it returning anything meaningful.
.PP
A \fIpassing\fR acquaintance with at least the broader details of the source
code for this class is assumed for anyone using this class as a base
class \*(-- especially if you're overriding existing methods, and
\&\fBdefinitely\fR if you're overriding linkage methods.
.SH "MAIN CONSTRUCTOR, AND INITIALIZER"
.IX Header "MAIN CONSTRUCTOR, AND INITIALIZER"
.IP "the constructor \s-1CLASS\-\s0>\fBnew()\fR or \s-1CLASS\-\s0>new($options)" 4
.IX Item "the constructor CLASS->new() or CLASS->new($options)"
This creates a new node object, calls \f(CW$object\fR\->_init($options)
to provide it sane defaults (like: undef name, undef mother, no
daughters, 'attributes' setting of a new empty hashref), and returns
the object created.  (If you just said \*(L"\s-1CLASS\-\s0>\fBnew()\fR\*(R" or \*(L"\s-1CLASS\-\s0>new\*(R",
then it pretends you called \*(L"\s-1CLASS\-\s0>new({})\*(R".)
.Sp
See also the comments under \*(L"new($hashref)\*(R" for options supported in the call to \fBnew()\fR.
.Sp
If you use \f(CW\*(C`Tree::DAG_Node\*(C'\fR as a superclass, and you add
attributes that need to be initialized, what you need to do is provide
an _init method that calls \f(CW$this\fR\->SUPER::_init($options) to use its
superclass's _init method, and then initializes the new attributes:
.Sp
.Vb 4
\&  sub _init {
\&    my($this, $options) = @_[0,1];
\&    $this\->SUPER::_init($options); # call my superclass\*(Aqs _init to
\&      # init all the attributes I\*(Aqm inheriting
\&
\&    # Now init /my/ new attributes:
\&    $this\->{\*(Aqamigos\*(Aq} = []; # for example
\&  }
.Ve
.ie n .IP "the constructor $obj\->\fBnew()\fR or $obj\->new($options)" 4
.el .IP "the constructor \f(CW$obj\fR\->\fBnew()\fR or \f(CW$obj\fR\->new($options)" 4
.IX Item "the constructor $obj->new() or $obj->new($options)"
Just another way to get at the \*(L"new($hashref)\*(R" method. This \fBdoes not copy\fR
\&\f(CW$obj\fR, but merely constructs a new object of the same class as it.
Saves you the bother of going \f(CW$class\fR = ref \f(CW$obj\fR; \f(CW$obj2\fR = \f(CW$class\fR\->new;
.ie n .IP "the method $node\->_init($options)" 4
.el .IP "the method \f(CW$node\fR\->_init($options)" 4
.IX Item "the method $node->_init($options)"
Initialize the object's attribute values.  See the discussion above.
Presumably this should be called only by the guts of the \*(L"new($hashref)\*(R"
constructor \*(-- never by the end user.
.Sp
Currently there are no documented options for putting in the
\&\f(CW$options\fR hashref, but (in case you want to disregard the above rant)
the option exists for you to use \f(CW$options\fR for something useful
in a derived class.
.Sp
Please see the source for more information.
.ie n .IP "see also (below) the constructors ""new_daughter"" and ""new_daughter_left""" 4
.el .IP "see also (below) the constructors ``new_daughter'' and ``new_daughter_left''" 4
.IX Item "see also (below) the constructors new_daughter and new_daughter_left"
.SH "METHODS"
.IX Header "METHODS"
.SS "add_daughter(\s-1LIST\s0)"
.IX Subsection "add_daughter(LIST)"
An exact synonym for \*(L"add_daughters(\s-1LIST\s0)\*(R".
.SS "add_daughters(\s-1LIST\s0)"
.IX Subsection "add_daughters(LIST)"
This method adds the node objects in \s-1LIST\s0 to the (right) end of
\&\f(CW$mother\fR's \fIdaughter\fR list.  Making a node N1 the daughter of another
node N2 also means that N1's \fImother\fR attribute is \*(L"automatically\*(R" set
to N2; it also means that N1 stops being anything else's daughter as
it becomes N2's daughter.
.PP
If you try to make a node its own mother, a fatal error results.  If
you try to take one of a node N1's ancestors and make it also a
daughter of N1, a fatal error results.  A fatal error results if
anything in \s-1LIST\s0 isn't a node object.
.PP
If you try to make N1 a daughter of N2, but it's \fBalready\fR a daughter
of N2, then this is a no-operation \*(-- it won't move such nodes to the
end of the list or anything; it just skips doing anything with them.
.SS "add_daughter_left(\s-1LIST\s0)"
.IX Subsection "add_daughter_left(LIST)"
An exact synonym for \*(L"add_daughters_left(\s-1LIST\s0)\*(R".
.SS "add_daughters_left(\s-1LIST\s0)"
.IX Subsection "add_daughters_left(LIST)"
This method is just like \*(L"add_daughters(\s-1LIST\s0)\*(R", except that it adds the
node objects in \s-1LIST\s0 to the (left) beginning of \f(CW$mother\fR's daughter
list, instead of the (right) end of it.
.SS "add_left_sister(\s-1LIST\s0)"
.IX Subsection "add_left_sister(LIST)"
An exact synonym for \*(L"add_left_sisters(\s-1LIST\s0)\*(R".
.SS "add_left_sisters(\s-1LIST\s0)"
.IX Subsection "add_left_sisters(LIST)"
This adds the elements in \s-1LIST\s0 (in that order) as immediate left sisters of
\&\f(CW$node\fR.  In other words, given that B's mother's daughter-list is (A,B,C,D),
calling B\->add_left_sisters(X,Y) makes B's mother's daughter-list
(A,X,Y,B,C,D).
.PP
If \s-1LIST\s0 is empty, this is a no-op, and returns empty-list.
.PP
This is basically implemented as a call to \f(CW$node\fR\->replace_with(\s-1LIST,\s0
\&\f(CW$node\fR), and so all replace_with's limitations and caveats apply.
.PP
The return value of \f(CW$node\fR\->add_left_sisters(\s-1LIST\s0) is the elements of
\&\s-1LIST\s0 that got added, as returned by replace_with \*(-- minus the copies
of \f(CW$node\fR you'd get from a straight call to \f(CW$node\fR\->replace_with(\s-1LIST,\s0
\&\f(CW$node\fR).
.SS "add_right_sister(\s-1LIST\s0)"
.IX Subsection "add_right_sister(LIST)"
An exact synonym for \*(L"add_right_sisters(\s-1LIST\s0)\*(R".
.SS "add_right_sisters(\s-1LIST\s0)"
.IX Subsection "add_right_sisters(LIST)"
Just like add_left_sisters (which see), except that the elements
in \s-1LIST\s0 (in that order) as immediate \fBright\fR sisters of \f(CW$node\fR;
.PP
In other words, given that B's mother's daughter-list is (A,B,C,D),
calling B\->add_right_sisters(X,Y) makes B's mother's daughter-list
(A,B,X,Y,C,D).
.SS "\fBaddress()\fP"
.IX Subsection "address()"
.SS "address(\s-1ADDRESS\s0)"
.IX Subsection "address(ADDRESS)"
With the first syntax, returns the address of \f(CW$node\fR within its tree,
based on its position within the tree.  An address is formed by noting
the path between the root and \f(CW$node\fR, and concatenating the
daughter-indices of the nodes this passes thru (starting with 0 for
the root, and ending with \f(CW$node\fR).
.PP
For example, if to get from node \s-1ROOT\s0 to node \f(CW$node\fR, you pass thru
\&\s-1ROOT, A, B,\s0 and \f(CW$node\fR, then the address is determined as:
.IP "o \s-1ROOT\s0's my_daughter_index is 0" 4
.IX Item "o ROOT's my_daughter_index is 0"
.PD 0
.IP "o A's my_daughter_index is, suppose, 2" 4
.IX Item "o A's my_daughter_index is, suppose, 2"
.PD
A is index 2 in \s-1ROOT\s0's daughter list.
.IP "o B's my_daughter_index is, suppose, 0" 4
.IX Item "o B's my_daughter_index is, suppose, 0"
B is index 0 in A's daughter list.
.ie n .IP "o $node's my_daughter_index is, suppose, 4" 4
.el .IP "o \f(CW$node\fR's my_daughter_index is, suppose, 4" 4
.IX Item "o $node's my_daughter_index is, suppose, 4"
\&\f(CW$node\fR is index 4 in B's daughter list.
.PP
The address of the above-described \f(CW$node\fR is, therefore, \*(L"0:2:0:4\*(R".
.PP
(As a somewhat special case, the address of the root is always \*(L"0\*(R";
and since addresses start from the root, all addresses start with a
\&\*(L"0\*(R".)
.PP
The second syntax, where you provide an address, starts from the root
of the tree \f(CW$anynode\fR belongs to, and returns the node corresponding to
that address.  Returns undef if no node corresponds to that address.
Note that this routine may be somewhat liberal in its interpretation
of what can constitute an address; i.e., it accepts \*(L"0.2.0.4\*(R", besides
\&\*(L"0:2:0:4\*(R".
.PP
Also note that the address of a node in a tree is meaningful only in
that tree as currently structured.
.PP
(Consider how ($address1 cmp \f(CW$address2\fR) may be magically meaningful
to you, if you meant to figure out what nodes are to the right of what
other nodes.)
.SS "\fBancestors()\fP"
.IX Subsection "ancestors()"
Returns the list of this node's ancestors, starting with its mother,
then grandmother, and ending at the root.  It does this by simply
following the 'mother' attributes up as far as it can.  So if \f(CW$item\fR \s-1IS\s0
the root, this returns an empty list.
.PP
Consider that scalar($node\->ancestors) returns the ply of this node
within the tree \*(-- 2 for a granddaughter of the root, etc., and 0 for
root itself.
.SS "\fBattribute()\fP"
.IX Subsection "attribute()"
.SS "attribute(\s-1SCALAR\s0)"
.IX Subsection "attribute(SCALAR)"
Exact synonyms for \*(L"\fBattributes()\fR\*(R" and \*(L"attributes(\s-1SCALAR\s0)\*(R".
.SS "\fBattributes()\fP"
.IX Subsection "attributes()"
.SS "attributes(\s-1SCALAR\s0)"
.IX Subsection "attributes(SCALAR)"
In the first form, returns the value of the node object's \*(L"attributes\*(R"
attribute.  In the second form, sets it to the value of \s-1SCALAR.\s0  I
intend this to be used to store a reference to a (presumably
anonymous) hash the user can use to store whatever attributes he
doesn't want to have to store as object attributes.  In this case, you
needn't ever set the value of this.  (_init has already initialized it
to {}.)  Instead you can just do...
.PP
.Vb 1
\&  $node\->attributes\->{\*(Aqfoo\*(Aq} = \*(Aqbar\*(Aq;
.Ve
.PP
\&...to write foo => bar.
.SS "\fBclear_daughters()\fP"
.IX Subsection "clear_daughters()"
This unlinks all \f(CW$mother\fR's daughters.
Returns the list of what used to be \f(CW$mother\fR's daughters.
.PP
Not to be confused with \*(L"remove_daughters(\s-1LIST\s0)\*(R".
.SS "common(\s-1LIST\s0)"
.IX Subsection "common(LIST)"
Returns the lowest node in the tree that is ancestor-or-self to the
nodes \f(CW$node\fR and \s-1LIST.\s0
.PP
If the nodes are far enough apart in the tree, the answer is just the
root.
.PP
If the nodes aren't all in the same tree, the answer is undef.
.PP
As a degenerate case, if \s-1LIST\s0 is empty, returns \f(CW$node\fR.
.SS "common_ancestor(\s-1LIST\s0)"
.IX Subsection "common_ancestor(LIST)"
Returns the lowest node that is ancestor to all the nodes given (in
nodes \f(CW$node\fR and \s-1LIST\s0).  In other words, it answers the question: \*(L"What
node in the tree, as low as possible, is ancestor to the nodes given
($node and \s-1LIST\s0)?\*(R"
.PP
If the nodes are far enough apart, the answer is just the root \*(--
except if any of the nodes are the root itself, in which case the
answer is undef (since the root has no ancestor).
.PP
If the nodes aren't all in the same tree, the answer is undef.
.PP
As a degenerate case, if \s-1LIST\s0 is empty, returns \f(CW$node\fR's mother;
that'll be undef if \f(CW$node\fR is root.
.SS "copy($option)"
.IX Subsection "copy($option)"
Returns a copy of the calling node (the invocant). E.g.: my($copy) = \f(CW$node\fR \-> copy;
.PP
\&\f(CW$option\fR is a hashref of options, with these (key => value) pairs:
.ie n .IP "o no_attribute_copy => $Boolean" 4
.el .IP "o no_attribute_copy => \f(CW$Boolean\fR" 4
.IX Item "o no_attribute_copy => $Boolean"
If set to 1, do not copy the node's attributes.
.Sp
If not specified, defaults to 0, which copies attributes.
.SS "\fBcopy_at_and_under()\fP"
.IX Subsection "copy_at_and_under()"
.SS "copy_at_and_under($options)"
.IX Subsection "copy_at_and_under($options)"
This returns a copy of the subtree consisting of \f(CW$node\fR and everything
under it.
.PP
If you pass no options, copy_at_and_under pretends you've passed {}.
.PP
This works by recursively building up the new tree from the leaves,
duplicating nodes using \f(CW$orig_node\fR\->copy($options_ref) and then
linking them up into a new tree of the same shape.
.PP
Options you specify are passed down to calls to \f(CW$node\fR\->copy.
.SS "\fBcopy_tree()\fP"
.IX Subsection "copy_tree()"
.SS "copy_tree($options)"
.IX Subsection "copy_tree($options)"
This returns the root of a copy of the tree that \f(CW$node\fR is a member of.
If you pass no options, copy_tree pretends you've passed {}.
.PP
This method is currently implemented as just a call to
\&\f(CW$this\fR\->root\->copy_at_and_under($options), but magic may be
added in the future.
.PP
Options you specify are passed down to calls to \f(CW$node\fR\->copy.
.SS "\fBdaughters()\fP"
.IX Subsection "daughters()"
This returns the (possibly empty) list of daughters for \f(CW$node\fR.
.SS "decode_lol($lol)"
.IX Subsection "decode_lol($lol)"
Returns an arrayref having decoded the deeply nested structure \f(CW$lol\fR.
.PP
\&\f(CW$lol\fR will be the output of either \fBtree_to_lol()\fR or \fBtree_to_simple_lol()\fR.
.PP
See scripts/read.tree.pl, and it's output file scripts/read.tree.log.
.SS "\fBdelete_tree()\fP"
.IX Subsection "delete_tree()"
Destroys the entire tree that \f(CW$node\fR is a member of (starting at the
root), by nulling out each node-object's attributes (including, most
importantly, its linkage attributes \*(-- hopefully this is more than
sufficient to eliminate all circularity in the data structure), and
then moving it into the class \s-1DEADNODE.\s0
.PP
Use this when you're finished with the tree in question, and want to
free up its memory.  (If you don't do this, it'll get freed up anyway
when your program ends.)
.PP
If you try calling any methods on any of the node objects in the tree
you've destroyed, you'll get an error like:
.PP
.Vb 2
\&  Can\*(Aqt locate object method "leaves_under"
\&    via package "DEADNODE".
.Ve
.PP
So if you see that, that's what you've done wrong.  (Actually, the
class \s-1DEADNODE\s0 does provide one method: a no-op method \*(L"delete_tree\*(R".
So if you want to delete a tree, but think you may have deleted it
already, it's safe to call \f(CW$node\fR\->delete_tree on it (again).)
.PP
The \*(L"\fBdelete_tree()\fR\*(R" method is needed because Perl's garbage collector
would never (as currently implemented) see that it was time to
de-allocate the memory the tree uses \*(-- until either you call
\&\f(CW$node\fR\->delete_tree, or until the program stops (at \*(L"global
destruction\*(R" time, when \fBeverything\fR is unallocated).
.PP
Incidentally, there are better ways to do garbage-collecting on a
tree, ways which don't require the user to explicitly call a method
like \*(L"\fBdelete_tree()\fR\*(R" \*(-- they involve dummy classes, as explained at
<http://mox.perl.com/misc/circle\-destroy.pod>
.PP
However, introducing a dummy class concept into \f(CW\*(C`Tree::DAG_Node\*(C'\fR would
be rather a distraction.  If you want to do this with your derived
classes, via a \s-1DESTROY\s0 in a dummy class (or in a tree-metainformation
class, maybe), then feel free to.
.PP
The only case where I can imagine \*(L"\fBdelete_tree()\fR\*(R" failing to totally
void the tree, is if you use the hashref in the \*(L"attributes\*(R" attribute
to store (presumably among other things) references to other nodes'
\&\*(L"attributes\*(R" hashrefs \*(-- which 1) is maybe a bit odd, and 2) is your
problem, because it's your hash structure that's circular, not the
tree's.  Anyway, consider:
.PP
.Vb 8
\&      # null out all my "attributes" hashes
\&      $anywhere\->root\->walk_down({
\&        \*(Aqcallback\*(Aq => sub {
\&          $hr = $_[0]\->attributes; %$hr = (); return 1;
\&        }
\&      });
\&      # And then:
\&      $anywhere\->delete_tree;
.Ve
.PP
(I suppose \*(L"\fBdelete_tree()\fR\*(R" is a \*(L"destructor\*(R", or as close as you can
meaningfully come for a circularity-rich data structure in Perl.)
.PP
See also \*(L"\s-1WHEN AND HOW TO DESTROY THE TREE\*(R"\s0.
.SS "\fBdepth_under()\fP"
.IX Subsection "depth_under()"
Returns an integer representing the number of branches between this
\&\f(CW$node\fR and the most distant leaf under it.  (In other words, this
returns the ply of subtree starting of \f(CW$node\fR.  Consider
scalar($it\->ancestors) if you want the ply of a node within the whole
tree.)
.SS "\fBdescendants()\fP"
.IX Subsection "descendants()"
Returns a list consisting of all the descendants of \f(CW$node\fR.  Returns
empty-list if \f(CW$node\fR is a terminal_node.
.PP
(Note that it's spelled \*(L"descendants\*(R", not \*(L"descendents\*(R".)
.SS "draw_ascii_tree([$options])"
.IX Subsection "draw_ascii_tree([$options])"
Here, the [] refer to an optional parameter.
.PP
Returns an arrayref of lines suitable for printing.
.PP
Draws a nice ASCII-art representation of the tree structure.
.PP
The tree looks like:
.PP
.Vb 10
\&                     |
\&                  <Root>
\&           /\-\-\-\-\-\-\-+\-\-\-\-\-+\-\-\-+\-\-\-\e
\&           |       |     |   |   |
\&          <I>     <H>   <D> <E> <B>
\&         /\-\-\-\e   /\-\-\-\e   |   |   |
\&         |   |   |   |  <F> <F> <C>
\&        <J> <J> <J> <J>  |   |
\&         |   |   |   |  <G> <G>
\&        <K> <L> <K> <L>
\&             |       |
\&            <M>     <M>
\&             |       |
\&            <N>     <N>
\&             |       |
\&            <O>     <O>
.Ve
.PP
See scripts/cut.and.paste.subtrees.pl.
.PP
Example usage:
.PP
.Vb 1
\&  print map("$_\en", @{$tree\->draw_ascii_tree});
.Ve
.PP
\&\fI\f(BIdraw_ascii_tree()\fI\fR takes parameters you set in the \f(CW$options\fR hashref:
.IP "o h_compact" 4
.IX Item "o h_compact"
Takes 0 or 1.  Sets the extent to which
\&\fI\f(BIdraw_ascii_tree()\fI\fR tries to save horizontal space.
.Sp
If I think of a better scrunching algorithm, there'll be a \*(L"2\*(R" setting
for this.
.Sp
Default: 1.
.IP "o h_spacing" 4
.IX Item "o h_spacing"
Takes a number 0 or greater.  Sets the number of spaces
inserted horizontally between nodes (and groups of nodes) in a tree.
.Sp
Default: 1.
.IP "o no_name" 4
.IX Item "o no_name"
If true, \fI\f(BIdraw_ascii_tree()\fI\fR doesn't print the name of
the node; it simply prints a \*(L"*\*(R".
.Sp
Default: 0 (i.e., print the node name.)
.IP "o v_compact" 4
.IX Item "o v_compact"
Takes a number 0, 1, or 2.  Sets the degree to which
\&\fI\f(BIdraw_ascii_tree()\fI\fR tries to save vertical space.  Defaults to 1.
.PP
The code occasionally returns trees that are a bit cock-eyed in parts; if
anyone can suggest a better drawing algorithm, I'd be appreciative.
.PP
See also \*(L"tree2string($options, [$some_tree])\*(R".
.SS "dump_names($options)"
.IX Subsection "dump_names($options)"
Returns an array.
.PP
Dumps, as an indented list, the names of the nodes starting at \f(CW$node\fR,
and continuing under it.  Options are:
.IP "o _depth \*(-- A nonnegative number" 4
.IX Item "o _depth A nonnegative number"
Indicating the depth to consider \f(CW$node\fR as being at (and so the generation under that is that plus
one, etc.).  You may choose to use set _depth => scalar($node\->ancestors).
.Sp
Default: 0.
.IP "o tick \*(-- a string to preface each entry with" 4
.IX Item "o tick a string to preface each entry with"
This string goes between the indenting-spacing and the node's name.  You
may prefer \*(L"*\*(R" or \*(L"\-> \*(R" or something.
.Sp
Default: ''.
.IP "o indent \*(-- the string used to indent with" 4
.IX Item "o indent the string used to indent with"
Another sane value might be '. ' (period, space).  Setting it to empty-string suppresses indenting.
.Sp
Default: ' ' x 2.
.PP
The output is not printed, but is returned as a list, where each
item is a line, with a \*(L"\en\*(R" at the end.
.ie n .SS "format_node($options, $node)"
.el .SS "format_node($options, \f(CW$node\fP)"
.IX Subsection "format_node($options, $node)"
Returns a string consisting of the node's name and, optionally, it's attributes.
.PP
Possible keys in the \f(CW$options\fR hashref:
.ie n .IP "o no_attributes => $Boolean" 4
.el .IP "o no_attributes => \f(CW$Boolean\fR" 4
.IX Item "o no_attributes => $Boolean"
If 1, the node's attributes are not included in the string returned.
.Sp
Default: 0 (include attributes).
.PP
Calls \*(L"hashref2string($hashref)\*(R".
.PP
Called by \*(L"node2string($options, \f(CW$node\fR, \f(CW$vert_dashes\fR)\*(R".
.PP
You would not normally call this method.
.PP
If you don't wish to supply options, use format_node({}, \f(CW$node\fR).
.SS "\fBgeneration()\fP"
.IX Subsection "generation()"
Returns a list of all nodes (going left-to-right) that are in \f(CW$node\fR's
generation \*(-- i.e., that are the some number of nodes down from
the root.  \f(CW$root\fR\->\fBgeneration()\fR is just \f(CW$root\fR.
.PP
Of course, \f(CW$node\fR is always in its own generation.
.SS "generation_under($node)"
.IX Subsection "generation_under($node)"
Like \*(L"\fBgeneration()\fR\*(R", but returns only the nodes in \f(CW$node\fR's generation
that are also descendants of \f(CW$node\fR \*(-- in other words,
.PP
.Vb 1
\&    @us = $node\->generation_under( $node\->mother\->mother );
.Ve
.PP
is all \f(CW$node\fR's first cousins (to borrow yet more kinship terminology) \*(--
assuming \f(CW$node\fR does indeed have a grandmother.  Actually \*(L"cousins\*(R" isn't
quite an apt word, because \f(CW@us\fR ends up including \f(CW$node\fR's siblings and
\&\f(CW$node\fR.
.PP
Actually, \*(L"generation_under($node)\*(R" is just an alias to \*(L"\fBgeneration()\fR\*(R", but I
figure that this:
.PP
.Vb 1
\&   @us = $node\->generation_under($way_upline);
.Ve
.PP
is a bit more readable than this:
.PP
.Vb 1
\&   @us = $node\->generation($way_upline);
.Ve
.PP
But it's up to you.
.PP
\&\f(CW$node\fR\->generation_under($node) returns just \f(CW$node\fR.
.PP
If you call \f(CW$node\fR\->generation_under($node) but \s-1NODE2\s0 is not \f(CW$node\fR or an
ancestor of \f(CW$node\fR, it behaves as if you called just \f(CW$node\fR\->\fBgeneration()\fR.
.SS "hashref2string($hashref)"
.IX Subsection "hashref2string($hashref)"
Returns the given hashref as a string.
.PP
Called by \*(L"format_node($options, \f(CW$node\fR)\*(R".
.SS "is_daughter_of($node2)"
.IX Subsection "is_daughter_of($node2)"
Returns true iff \f(CW$node\fR is a daughter of \f(CW$node2\fR.
Currently implemented as just a test of ($it\->mother eq \f(CW$node2\fR).
.SS "\fBis_node()\fP"
.IX Subsection "is_node()"
This always returns true.  More pertinently, \f(CW$object\fR\->can('is_node')
is true (regardless of what \*(L"\fBis_node()\fR\*(R" would do if called) for objects
belonging to this class or for any class derived from it.
.SS "\fBis_root()\fP"
.IX Subsection "is_root()"
Returns 1 if the caller is the root, and 0 if it is not.
.SS "\fBleaves_under()\fP"
.IX Subsection "leaves_under()"
Returns a list (going left-to-right) of all the leaf nodes under
\&\f(CW$node\fR.  (\*(L"Leaf nodes\*(R" are also called \*(L"terminal nodes\*(R" \*(-- i.e., nodes
that have no daughters.)  Returns \f(CW$node\fR in the degenerate case of
\&\f(CW$node\fR being a leaf itself.
.SS "\fBleft_sister()\fP"
.IX Subsection "left_sister()"
Returns the node that's the immediate left sister of \f(CW$node\fR.  If \f(CW$node\fR
is the leftmost (or only) daughter of its mother (or has no mother),
then this returns undef.
.PP
See also \*(L"add_left_sisters(\s-1LIST\s0)\*(R" and \*(L"add_right_sisters(\s-1LIST\s0)\*(R".
.SS "\fBleft_sisters()\fP"
.IX Subsection "left_sisters()"
Returns a list of nodes that're sisters to the left of \f(CW$node\fR.  If
\&\f(CW$node\fR is the leftmost (or only) daughter of its mother (or has no
mother), then this returns an empty list.
.PP
See also \*(L"add_left_sisters(\s-1LIST\s0)\*(R" and \*(L"add_right_sisters(\s-1LIST\s0)\*(R".
.SS "lol_to_tree($lol)"
.IX Subsection "lol_to_tree($lol)"
This must be called as a class method.
.PP
Converts something like bracket-notation for \*(L"Chomsky trees\*(R" (or
rather, the closest you can come with Perl
list\-of\-lists(\-of\-lists(\-of\-lists))) into a tree structure.  Returns
the root of the tree converted.
.PP
The conversion rules are that:  1) if the last (possibly the only) item
in a given list is a scalar, then that is used as the \*(L"name\*(R" attribute
for the node based on this list.  2) All other items in the list
represent daughter nodes of the current node \*(-- recursively so, if
they are list references; otherwise, (non-terminal) scalars are
considered to denote nodes with that name.  So ['Foo', 'Bar', 'N'] is
an alternate way to represent [['Foo'], ['Bar'], 'N'].
.PP
An example will illustrate:
.PP
.Vb 10
\&  use Tree::DAG_Node;
\&  $lol =
\&    [
\&      [
\&        [ [ \*(AqDet:The\*(Aq ],
\&          [ [ \*(Aqdog\*(Aq ], \*(AqN\*(Aq], \*(AqNP\*(Aq],
\&        [ \*(Aq/with rabies\e\e\*(Aq, \*(AqPP\*(Aq],
\&        \*(AqNP\*(Aq
\&      ],
\&      [ \*(Aqdied\*(Aq, \*(AqVP\*(Aq],
\&      \*(AqS\*(Aq
\&    ];
\&   $tree = Tree::DAG_Node\->lol_to_tree($lol);
\&   $diagram = $tree\->draw_ascii_tree;
\&   print map "$_\en", @$diagram;
.Ve
.PP
\&...returns this tree:
.PP
.Vb 10
\&                   |
\&                  <S>
\&                   |
\&                /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e
\&                |                  |
\&              <NP>                <VP>
\&                |                  |
\&        /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e        <died>
\&        |               |
\&      <NP>            <PP>
\&        |               |
\&     /\-\-\-\-\-\-\-\e   </with rabies\e>
\&     |       |
\& <Det:The>  <N>
\&             |
\&           <dog>
.Ve
.PP
By the way (and this rather follows from the above rules), when
denoting a LoL tree consisting of just one node, this:
.PP
.Vb 1
\&  $tree = Tree::DAG_Node\->lol_to_tree( \*(AqLonely\*(Aq );
.Ve
.PP
is okay, although it'd probably occur to you to denote it only as:
.PP
.Vb 1
\&  $tree = Tree::DAG_Node\->lol_to_tree( [\*(AqLonely\*(Aq] );
.Ve
.PP
which is of course fine, too.
.SS "\fBmother()\fP"
.IX Subsection "mother()"
This returns what node is \f(CW$node\fR's mother.  This is undef if \f(CW$node\fR has
no mother \*(-- i.e., if it is a root.
.PP
See also \*(L"\fBis_root()\fR\*(R" and \*(L"\fBroot()\fR\*(R".
.SS "\fBmy_daughter_index()\fP"
.IX Subsection "my_daughter_index()"
Returns what index this daughter is, in its mother's \f(CW\*(C`daughter\*(C'\fR list.
In other words, if \f(CW$node\fR is ($node\->mother\->daughters)[3], then
\&\f(CW$node\fR\->my_daughter_index returns 3.
.PP
As a special case, returns 0 if \f(CW$node\fR has no mother.
.SS "\fBname()\fP"
.IX Subsection "name()"
.SS "name(\s-1SCALAR\s0)"
.IX Subsection "name(SCALAR)"
In the first form, returns the value of the node object's \*(L"name\*(R"
attribute.  In the second form, sets it to the value of \s-1SCALAR.\s0
.SS "new($hashref)"
.IX Subsection "new($hashref)"
These options are supported in \f(CW$hashref:\fR
.IP "o attributes => A hashref of attributes" 4
.IX Item "o attributes => A hashref of attributes"
.PD 0
.IP "o daughters => An arrayref of nodes" 4
.IX Item "o daughters => An arrayref of nodes"
.IP "o mother => A node" 4
.IX Item "o mother => A node"
.IP "o name => A string" 4
.IX Item "o name => A string"
.PD
.PP
See also \*(L"\s-1MAIN CONSTRUCTOR, AND INITIALIZER\*(R"\s0 for a long discussion on object creation.
.SS "\fBnew_daughter()\fP"
.IX Subsection "new_daughter()"
.SS "new_daughter($options)"
.IX Subsection "new_daughter($options)"
This \fBconstructs\fR a \fBnew\fR node (of the same class as \f(CW$mother\fR), and
adds it to the (right) end of the daughter list of \f(CW$mother\fR. This is
essentially the same as going
.PP
.Vb 2
\&      $daughter = $mother\->new;
\&      $mother\->add_daughter($daughter);
.Ve
.PP
but is rather more efficient because (since \f(CW$daughter\fR is guaranteed new
and isn't linked to/from anything), it doesn't have to check that
\&\f(CW$daughter\fR isn't an ancestor of \f(CW$mother\fR, isn't already daughter to a
mother it needs to be unlinked from, isn't already in \f(CW$mother\fR's
daughter list, etc.
.PP
As you'd expect for a constructor, it returns the node-object created.
.PP
Note that if you radically change 'mother'/'daughters' bookkeeping,
you may have to change this routine, since it's one of the places
that directly writes to 'daughters' and 'mother'.
.SS "\fBnew_daughter_left()\fP"
.IX Subsection "new_daughter_left()"
.SS "new_daughter_left($options)"
.IX Subsection "new_daughter_left($options)"
This is just like \f(CW$mother\fR\->new_daughter, but adds the new daughter
to the left (start) of \f(CW$mother\fR's daughter list.
.PP
Note that if you radically change 'mother'/'daughters' bookkeeping,
you may have to change this routine, since it's one of the places
that directly writes to 'daughters' and 'mother'.
.ie n .SS "node2string($options, $node, $vert_dashes)"
.el .SS "node2string($options, \f(CW$node\fP, \f(CW$vert_dashes\fP)"
.IX Subsection "node2string($options, $node, $vert_dashes)"
Returns a string of the node's name and attributes, with a leading indent, suitable for printing.
.PP
Possible keys in the \f(CW$options\fR hashref:
.ie n .IP "o no_attributes => $Boolean" 4
.el .IP "o no_attributes => \f(CW$Boolean\fR" 4
.IX Item "o no_attributes => $Boolean"
If 1, the node's attributes are not included in the string returned.
.Sp
Default: 0 (include attributes).
.PP
Ignore the parameter \f(CW$vert_dashes\fR. The code uses it as temporary storage.
.PP
Calls \*(L"format_node($options, \f(CW$node\fR)\*(R".
.PP
Called by \*(L"tree2string($options, [$some_tree])\*(R".
.SS "quote_name($name)"
.IX Subsection "quote_name($name)"
Returns the string \*(L"'$name'\*(R", which is used in various methods for outputting node names.
.SS "random_network($options)"
.IX Subsection "random_network($options)"
This method can be called as a class method or as an object method.
.PP
In the first case, constructs a randomly arranged network under a new
node, and returns the root node of that tree.  In the latter case,
constructs the network under \f(CW$node\fR.
.PP
Currently, this is implemented a bit half-heartedly, and
half-wittedly.  I basically needed to make up random-looking networks
to stress-test the various tree-dumper methods, and so wrote this.  If
you actually want to rely on this for any application more
serious than that, I suggest examining the source code and seeing if
this does really what you need (say, in reliability of randomness);
and feel totally free to suggest changes to me (especially in the form
of "I rewrote \*(L"random_network($options)\*(R", here's the code...")
.PP
It takes four options:
.IP "o max_node_count \*(-- maximum number of nodes this tree will be allowed to have (counting the root)" 4
.IX Item "o max_node_count maximum number of nodes this tree will be allowed to have (counting the root)"
Default: 25.
.IP "o min_depth \*(-- minimum depth for the tree" 4
.IX Item "o min_depth minimum depth for the tree"
Leaves can be generated only after this depth is reached, so the tree will be at
least this deep \*(-- unless max_node_count is hit first.
.Sp
Default: 2.
.IP "o max_depth \*(-- maximum depth for the tree" 4
.IX Item "o max_depth maximum depth for the tree"
The tree will not be deeper than this.
.Sp
Default: 3 plus min_depth.
.IP "o max_children \*(-- maximum number of children any mother in the tree can have." 4
.IX Item "o max_children maximum number of children any mother in the tree can have."
Default: 4.
.SS "read_attributes($s)"
.IX Subsection "read_attributes($s)"
Parses the string \f(CW$s\fR and extracts the name and attributes, assuming the format is as generated by
\&\*(L"tree2string($options, [$some_tree])\*(R".
.PP
This bascially means the attribute string was generated by \*(L"hashref2string($hashref)\*(R".
.PP
Attributes may be absent, in which case they default to {}.
.PP
Returns a new node with this name and these attributes.
.PP
This method is for use by \*(L"read_tree($file_name)\*(R".
.PP
See t/tree.without.attributes.txt and t/tree.with.attributes.txt for sample data.
.SS "read_tree($file_name)"
.IX Subsection "read_tree($file_name)"
Returns the root of the tree read from \f(CW$file_name\fR.
.PP
The file must have been written by re-directing the output of
\&\*(L"tree2string($options, [$some_tree])\*(R" to a file, since it makes assumptions about the format
of the stringified attributes.
.PP
\&\fBread_tree()\fR works with utf\-8 data. See t/read.tree.t and t/tree.utf8.attributes.txt.
.PP
Note: To call this method you need a caller. It'll be a tree of 1 node. The reason is that inside
this method it calls various other methods, and for these calls it needs \f(CW$self\fR. That way, those
methods can be called from anywhere, and not just from within \fBread_tree()\fR.
.PP
For reading and writing trees to databases, see Tree::DAG_Node::Persist.
.PP
Calls \*(L"string2hashref($s)\*(R".
.SS "remove_daughter(\s-1LIST\s0)"
.IX Subsection "remove_daughter(LIST)"
An exact synonym for \*(L"remove_daughters(\s-1LIST\s0)\*(R".
.SS "remove_daughters(\s-1LIST\s0)"
.IX Subsection "remove_daughters(LIST)"
This removes the nodes listed in \s-1LIST\s0 from \f(CW$mother\fR's daughter list.
This is a no-operation if \s-1LIST\s0 is empty.  If there are things in \s-1LIST\s0
that aren't a current daughter of \f(CW$mother\fR, they are ignored.
.PP
Not to be confused with \*(L"\fBclear_daughters()\fR\*(R".
.SS "replace_with(\s-1LIST\s0)"
.IX Subsection "replace_with(LIST)"
This replaces \f(CW$node\fR in its mother's daughter list, by unlinking \f(CW$node\fR
and replacing it with the items in \s-1LIST.\s0  This returns a list consisting
of \f(CW$node\fR followed by \s-1LIST,\s0 i.e., the nodes that replaced it.
.PP
\&\s-1LIST\s0 can include \f(CW$node\fR itself (presumably at most once).  \s-1LIST\s0 can
also be the empty list.  However, if any items in \s-1LIST\s0 are sisters to
\&\f(CW$node\fR, they are ignored, and are not in the copy of \s-1LIST\s0 passed as the
return value.
.PP
As you might expect for any linking operation, the items in \s-1LIST\s0
cannot be \f(CW$node\fR's mother, or any ancestor to it; and items in \s-1LIST\s0 are,
of course, unlinked from their mothers (if they have any) as they're
linked to \f(CW$node\fR's mother.
.PP
(In the special (and bizarre) case where \f(CW$node\fR is root, this simply calls
\&\f(CW$this\fR\->unlink_from_mother on all the items in \s-1LIST,\s0 making them roots of
their own trees.)
.PP
Note that the daughter-list of \f(CW$node\fR is not necessarily affected; nor
are the daughter-lists of the items in \s-1LIST.\s0  I mention this in case you
think replace_with switches one node for another, with respect to its
mother list \fBand\fR its daughter list, leaving the rest of the tree
unchanged. If that's what you want, replacing \f(CW$Old\fR with \f(CW$New\fR, then you
want:
.PP
.Vb 2
\&  $New\->set_daughters($Old\->clear_daughters);
\&  $Old\->replace_with($New);
.Ve
.PP
(I can't say \f(CW$node\fR's and LIST\-items' daughter lists are \fBnever\fR
affected my replace_with \*(-- they can be affected in this case:
.PP
.Vb 4
\&  $N1 = ($node\->daughters)[0]; # first daughter of $node
\&  $N2 = ($N1\->daughters)[0];   # first daughter of $N1;
\&  $N3 = Tree::DAG_Node\->random_network; # or whatever
\&  $node\->replace_with($N1, $N2, $N3);
.Ve
.PP
As a side affect of attaching \f(CW$N1\fR and \f(CW$N2\fR to \f(CW$node\fR's mother, they're
unlinked from their parents ($node, and \f(CW$N1\fR, respectively).
But N3's daughter list is unaffected.
.PP
In other words, this method does what it has to, as you'd expect it
to.
.SS "\fBreplace_with_daughters()\fP"
.IX Subsection "replace_with_daughters()"
This replaces \f(CW$node\fR in its mother's daughter list, by unlinking \f(CW$node\fR
and replacing it with its daughters.  In other words, \f(CW$node\fR becomes
motherless and daughterless as its daughters move up and take its place.
This returns a list consisting of \f(CW$node\fR followed by the nodes that were
its daughters.
.PP
In the special (and bizarre) case where \f(CW$node\fR is root, this simply
unlinks its daughters from it, making them roots of their own trees.
.PP
Effectively the same as \f(CW$node\fR\->replace_with($node\->daughters), but more
efficient, since less checking has to be done.  (And I also think
\&\f(CW$node\fR\->replace_with_daughters is a more common operation in
tree-wrangling than \f(CW$node\fR\->replace_with(\s-1LIST\s0), so deserves a named
method of its own, but that's just me.)
.PP
Note that if you radically change 'mother'/'daughters' bookkeeping,
you may have to change this routine, since it's one of the places
that directly writes to 'daughters' and 'mother'.
.SS "\fBright_sister()\fP"
.IX Subsection "right_sister()"
Returns the node that's the immediate right sister of \f(CW$node\fR.  If \f(CW$node\fR
is the rightmost (or only) daughter of its mother (or has no mother),
then this returns undef.
.PP
See also \*(L"add_left_sisters(\s-1LIST\s0)\*(R" and \*(L"add_right_sisters(\s-1LIST\s0)\*(R".
.SS "\fBright_sisters()\fP"
.IX Subsection "right_sisters()"
Returns a list of nodes that're sisters to the right of \f(CW$node\fR. If
\&\f(CW$node\fR is the rightmost (or only) daughter of its mother (or has no
mother), then this returns an empty list.
.PP
See also \*(L"add_left_sisters(\s-1LIST\s0)\*(R" and \*(L"add_right_sisters(\s-1LIST\s0)\*(R".
.SS "\fBroot()\fP"
.IX Subsection "root()"
Returns the root of whatever tree \f(CW$node\fR is a member of.  If \f(CW$node\fR is
the root, then the result is \f(CW$node\fR itself.
.PP
Not to be confused with \*(L"\fBis_root()\fR\*(R".
.SS "\fBself_and_descendants()\fP"
.IX Subsection "self_and_descendants()"
Returns a list consisting of itself (as element 0) and all the
descendants of \f(CW$node\fR.  Returns just itself if \f(CW$node\fR is a
terminal_node.
.PP
(Note that it's spelled \*(L"descendants\*(R", not \*(L"descendents\*(R".)
.SS "\fBself_and_sisters()\fP"
.IX Subsection "self_and_sisters()"
Returns a list of all nodes (going left-to-right) that have the same
mother as \f(CW$node\fR \*(-- including \f(CW$node\fR itself. This is just like
\&\f(CW$node\fR\->mother\->daughters, except that that fails where \f(CW$node\fR is root,
whereas \f(CW$root\fR\->self_and_siblings, as a special case, returns \f(CW$root\fR.
.PP
(Contrary to how you may interpret how this method is named, \*(L"self\*(R" is
not (necessarily) the first element of what's returned.)
.SS "set_daughters(\s-1LIST\s0)"
.IX Subsection "set_daughters(LIST)"
This unlinks all \f(CW$mother\fR's daughters, and replaces them with the
daughters in \s-1LIST.\s0
.PP
Currently implemented as just \f(CW$mother\fR\->clear_daughters followed by
\&\f(CW$mother\fR\->add_daughters(\s-1LIST\s0).
.SS "simple_lol_to_tree($simple_lol)"
.IX Subsection "simple_lol_to_tree($simple_lol)"
This must be called as a class method.
.PP
This is like lol_to_tree, except that rule 1 doesn't apply \*(-- i.e.,
all scalars (or really, anything not a listref) in the LoL-structure
end up as named terminal nodes, and only terminal nodes get names
(and, of course, that name comes from that scalar value).  This method
is useful for making things like expression trees, or at least
starting them off.  Consider that this:
.PP
.Vb 3
\&    $tree = Tree::DAG_Node\->simple_lol_to_tree(
\&      [ \*(Aqfoo\*(Aq, [\*(Aqbar\*(Aq, [\*(Aqbaz\*(Aq], \*(Aqquux\*(Aq], \*(Aqzaz\*(Aq, \*(Aqpati\*(Aq ]
\&    );
.Ve
.PP
converts from something like a Lispish or Iconish tree, if you pretend
the brackets are parentheses.
.PP
Note that there is a (possibly surprising) degenerate case of what I'm
calling a \*(L"simple-LoL\*(R", and it's like this:
.PP
.Vb 1
\&  $tree = Tree::DAG_Node\->simple_lol_to_tree(\*(AqLonely\*(Aq);
.Ve
.PP
This is the (only) way you can specify a tree consisting of only a
single node, which here gets the name 'Lonely'.
.SS "\fBsisters()\fP"
.IX Subsection "sisters()"
Returns a list of all nodes (going left-to-right) that have the same
mother as \f(CW$node\fR \*(-- \fBnot including\fR \f(CW$node\fR itself.  If \f(CW$node\fR is root,
this returns empty-list.
.SS "string2hashref($s)"
.IX Subsection "string2hashref($s)"
Returns the hashref built from the string.
.PP
The string is expected to be something like
\&'{AutoCommit => '1', PrintError => \*(L"0\*(R", ReportError => 1}'.
.PP
The empty string is returned as {}.
.PP
Called by \*(L"read_tree($file_name)\*(R".
.SS "\fBtree_to_lol()\fP"
.IX Subsection "tree_to_lol()"
Returns that tree (starting at \f(CW$node\fR) represented as a LoL, like what
\&\f(CW$lol\fR, above, holds.  (This is as opposed to \*(L"tree_to_lol_notation($options)\*(R",
which returns the viewable code like what gets evaluated and stored in
\&\f(CW$lol\fR, above.)
.PP
Undefined node names are returned as the string 'undef'.
.PP
See also \*(L"decode_lol($lol)\*(R".
.PP
Lord only knows what you use this for \*(-- maybe for feeding to
Data::Dumper, in case \*(L"tree_to_lol_notation($options)\*(R" doesn't do just what you
want?
.SS "tree_to_lol_notation($options)"
.IX Subsection "tree_to_lol_notation($options)"
Dumps a tree (starting at \f(CW$node\fR) as the sort of LoL-like bracket
notation you see in the above example code.  Returns just one big
block of text.  The only option is \*(L"multiline\*(R" \*(-- if true, it dumps
the text as the sort of indented structure as seen above; if false
(and it defaults to false), dumps it all on one line (with no
indenting, of course).
.PP
For example, starting with the tree from the above example,
this:
.PP
.Vb 1
\&  print $tree\->tree_to_lol_notation, "\en";
.Ve
.PP
prints the following (which I've broken over two lines for sake of
printability of documentation):
.PP
.Vb 2
\&  [[[[\*(AqDet:The\*(Aq], [[\*(Aqdog\*(Aq], \*(AqN\*(Aq], \*(AqNP\*(Aq], [["/with rabies\ex5c"],
\&  \*(AqPP\*(Aq], \*(AqNP\*(Aq], [[\*(Aqdied\*(Aq], \*(AqVP\*(Aq], \*(AqS\*(Aq],
.Ve
.PP
Doing this:
.PP
.Vb 1
\&  print $tree\->tree_to_lol_notation({ multiline => 1 });
.Ve
.PP
prints the same content, just spread over many lines, and prettily
indented.
.PP
Undefined node names are returned as the string 'undef'.
.SS "\fBtree_to_simple_lol()\fP"
.IX Subsection "tree_to_simple_lol()"
Returns that tree (starting at \f(CW$node\fR) represented as a simple-LoL \*(--
i.e., one where non-terminal nodes are represented as listrefs, and
terminal nodes are gotten from the contents of those nodes' "name'
attributes.
.PP
Note that in the case of \f(CW$node\fR being terminal, what you get back is
the same as \f(CW$node\fR\->name.
.PP
Compare to tree_to_simple_lol_notation.
.PP
Undefined node names are returned as the string 'undef'.
.PP
See also \*(L"decode_lol($lol)\*(R".
.SS "tree_to_simple_lol_notation($options)"
.IX Subsection "tree_to_simple_lol_notation($options)"
A simple-LoL version of tree_to_lol_notation (which see); takes the
same options.
.PP
Undefined node names are returned as the string 'undef'.
.SS "tree2string($options, [$some_tree])"
.IX Subsection "tree2string($options, [$some_tree])"
Here, the [] represent an optional parameter.
.PP
Returns an arrayref of lines, suitable for printing.
.PP
Draws a nice ASCII-art representation of the tree structure.
.PP
The tree looks like:
.PP
.Vb 10
\&        Root. Attributes: {}
\&            |\-\-\- Â. Attributes: {# => "ÂÂ"}
\&            |    |\-\-\- â. Attributes: {# => "ââ"}
\&            |    |    |\-\-\- É. Attributes: {# => "ÉÉ"}
\&            |    |\-\-\- ä. Attributes: {# => "ää"}
\&            |    |\-\-\- é. Attributes: {# => "éé"}
\&            |         |\-\-\- Ñ. Attributes: {# => "ÑÑ"}
\&            |              |\-\-\- ñ. Attributes: {# => "ññ"}
\&            |                   |\-\-\- Ô. Attributes: {# => "ÔÔ"}
\&            |                        |\-\-\- ô. Attributes: {# => "ôô"}
\&            |                        |\-\-\- ô. Attributes: {# => "ôô"}
\&            |\-\-\- ß. Attributes: {# => "ßß"}
\&                 |\-\-\- ®. Attributes: {# => "®®"}
\&                 |    |\-\-\- ©. Attributes: {# => "©©"}
\&                 |\-\-\- £. Attributes: {# => "££"}
\&                 |\-\-\- €. Attributes: {# => "€€"}
\&                 |\-\-\- √. Attributes: {# => "√√"}
\&                 |\-\-\- ×xX. Attributes: {# => "×xX×xX"}
\&                      |\-\-\- í. Attributes: {# => "íí"}
\&                      |\-\-\- ú. Attributes: {# => "úú"}
\&                      |\-\-\- «. Attributes: {# => "««"}
\&                      |\-\-\- ». Attributes: {# => "»»"}
.Ve
.PP
Or, without attributes:
.PP
.Vb 10
\&        Root
\&            |\-\-\- Â
\&            |    |\-\-\- â
\&            |    |    |\-\-\- É
\&            |    |\-\-\- ä
\&            |    |\-\-\- é
\&            |         |\-\-\- Ñ
\&            |              |\-\-\- ñ
\&            |                   |\-\-\- Ô
\&            |                        |\-\-\- ô
\&            |                        |\-\-\- ô
\&            |\-\-\- ß
\&                 |\-\-\- ®
\&                 |    |\-\-\- ©
\&                 |\-\-\- £
\&                 |\-\-\- €
\&                 |\-\-\- √
\&                 |\-\-\- ×xX
\&                      |\-\-\- í
\&                      |\-\-\- ú
\&                      |\-\-\- «
\&                      |\-\-\- »
.Ve
.PP
See scripts/cut.and.paste.subtrees.pl.
.PP
Example usage:
.PP
.Vb 1
\&  print map("$_\en", @{$tree\->tree2string});
.Ve
.PP
Can be called with \f(CW$some_tree\fR set to any \f(CW$node\fR, and will print the tree assuming \f(CW$node\fR is the root.
.PP
If you don't wish to supply options, use tree2string({}, \f(CW$node\fR).
.PP
Possible keys in the \f(CW$options\fR hashref (which defaults to {}):
.ie n .IP "o no_attributes => $Boolean" 4
.el .IP "o no_attributes => \f(CW$Boolean\fR" 4
.IX Item "o no_attributes => $Boolean"
If 1, the node's attributes are not included in the string returned.
.Sp
Default: 0 (include attributes).
.PP
Calls \*(L"node2string($options, \f(CW$node\fR, \f(CW$vert_dashes\fR)\*(R".
.PP
See also \*(L"draw_ascii_tree([$options])\*(R".
.SS "\fBunlink_from_mother()\fP"
.IX Subsection "unlink_from_mother()"
This removes node from the daughter list of its mother.  If it has no
mother, this is a no-operation.
.PP
Returns the mother unlinked from (if any).
.SS "walk_down($options)"
.IX Subsection "walk_down($options)"
Performs a depth-first traversal of the structure at and under \f(CW$node\fR.
What it does at each node depends on the value of the options hashref,
which you must provide.  There are three options, \*(L"callback\*(R" and
\&\*(L"callbackback\*(R" (at least one of which must be defined, as a sub
reference), and \*(L"_depth\*(R".
.PP
This is what \fI\f(BIwalk_down()\fI\fR does, in pseudocode form:
.IP "o Starting point" 4
.IX Item "o Starting point"
Start at the \f(CW$node\fR given.
.IP "o Callback" 4
.IX Item "o Callback"
If there's a \fIcallback\fR, call it with \f(CW$node\fR as the first argument,
and the options hashref as the second argument (which contains the
potentially useful \fI_depth\fR, remember).  This function must return
true or false \*(-- if false, it will block the next step:
.IP "o Daughters" 4
.IX Item "o Daughters"
If \f(CW$node\fR has any daughter nodes, increment \fI_depth\fR, and call
\&\f(CW$daughter\fR\->walk_down($options) for each daughter (in order, of
course), where options_hashref is the same hashref it was called with.
When this returns, decrements \fI_depth\fR.
.IP "Callbackback" 4
.IX Item "Callbackback"
If there's a \fIcallbackback\fR, call just it as with \fIcallback\fR (but
tossing out the return value).  Note that \fIcallback\fR returning false
blocks traversal below \f(CW$node\fR, but doesn't block calling callbackback
for \f(CW$node\fR.  (Incidentally, in the unlikely case that \f(CW$node\fR has stopped
being a node object, \fIcallbackback\fR won't get called.)
.IP "o Return" 4
.IX Item "o Return"
.PP
\&\f(CW$node\fR\->walk_down($options) is the way to recursively do things to a tree (if you
start at the root) or part of a tree; if what you're doing is best done
via pre-pre order traversal, use \fIcallback\fR; if what you're doing is
best done with post-order traversal, use \fIcallbackback\fR.
\&\fI\f(BIwalk_down()\fI\fR is even the basis for plenty of the methods in this
class.  See the source code for examples both simple and horrific.
.PP
Note that if you don't specify \fI_depth\fR, it effectively defaults to
0.  You should set it to scalar($node\->ancestors) if you want
\&\fI_depth\fR to reflect the true depth-in-the-tree for the nodes called,
instead of just the depth below \f(CW$node\fR.  (If \f(CW$node\fR is the root, there's
no difference, of course.)
.PP
And \fBby the way\fR, it's a bad idea to modify the tree from the callback.
Unpredictable things may happen.  I instead suggest having your callback
add to a stack of things that need changing, and then, once \fI\f(BIwalk_down()\fI\fR
is all finished, changing those nodes from that stack.
.PP
Note that the existence of \fI\f(BIwalk_down()\fI\fR doesn't mean you can't write
you own special-use traversers.
.SH "WHEN AND HOW TO DESTROY THE TREE"
.IX Header "WHEN AND HOW TO DESTROY THE TREE"
It should be clear to you that if you've built a big parse tree or
something, and then you're finished with it, you should call
\&\f(CW$some_node\fR\->delete_tree on it if you want the memory back.
.PP
But consider this case:  you've got this tree:
.PP
.Vb 5
\&      A
\&    / | \e
\&   B  C  D
\&   |     | \e
\&   E     X  Y
.Ve
.PP
Let's say you decide you don't want D or any of its descendants in the
tree, so you call D\->unlink_from_mother.  This does \s-1NOT\s0 automagically
destroy the tree D\-X-Y.  Instead it merely splits the tree into two:
.PP
.Vb 5
\&     A                        D
\&    / \e                      / \e
\&   B   C                    X   Y
\&   |
\&   E
.Ve
.PP
To destroy D and its little tree, you have to explicitly call
delete_tree on it.
.PP
Note, however, that if you call C\->unlink_from_mother, and if you don't
have a link to C anywhere, then it \fBdoes\fR magically go away.  This is
because nothing links to C \*(-- whereas with the D\-X-Y tree, D links to
X and Y, and X and Y each link back to D. Note that calling
C\->delete_tree is harmless \*(-- after all, a tree of only one node is
still a tree.
.PP
So, this is a surefire way of getting rid of all \f(CW$node\fR's children and
freeing up the memory associated with them and their descendants:
.PP
.Vb 1
\&  foreach my $it ($node\->clear_daughters) { $it\->delete_tree }
.Ve
.PP
Just be sure not to do this:
.PP
.Vb 2
\&  foreach my $it ($node\->daughters) { $it\->delete_tree }
\&  $node\->clear_daughters;
.Ve
.PP
That's bad; the first call to \f(CW$_\fR\->delete_tree will climb to the root
of \f(CW$node\fR's tree, and nuke the whole tree, not just the bits under \f(CW$node\fR.
You might as well have just called \f(CW$node\fR\->delete_tree.
(Moreavor, once \f(CW$node\fR is dead, you can't call clear_daughters on it,
so you'll get an error there.)
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
If you find a bug in this library, report it to me as soon as possible,
at the address listed in the \s-1MAINTAINER\s0 section, below.  Please try to
be as specific as possible about how you got the bug to occur.
.SH "HELP!"
.IX Header "HELP!"
If you develop a given routine for dealing with trees in some way, and
use it a lot, then if you think it'd be of use to anyone else, do email
me about it; it might be helpful to others to include that routine, or
something based on it, in a later version of this module.
.PP
It's occurred to me that you might like to (and might yourself develop
routines to) draw trees in something other than \s-1ASCII\s0 art.  If you do so
\&\*(-- say, for PostScript output, or for output interpretable by some
external plotting program \*(--  I'd be most interested in the results.
.SH "RAMBLINGS"
.IX Header "RAMBLINGS"
This module uses \*(L"strict\*(R", but I never wrote it with \-w warnings in
mind \*(-- so if you use \-w, do not be surprised if you see complaints
from the guts of DAG_Node.  As long as there is no way to turn off \-w
for a given module (instead of having to do it in every single
subroutine with a \*(L"local $^W\*(R"), I'm not going to change this. However,
I do, at points, get bursts of ambition, and I try to fix code in
DAG_Node that generates warnings, \fIas I come across them\fR \*(-- which is
only occasionally.  Feel free to email me any patches for any such
fixes you come up with, tho.
.PP
Currently I don't assume (or enforce) anything about the class
membership of nodes being manipulated, other than by testing whether
each one provides a method \*(L"\fBis_node()\fR\*(R", a la:
.PP
.Vb 1
\&  die "Not a node!!!" unless UNIVERSAL::can($node, "is_node");
.Ve
.PP
So, as far as I'm concerned, a given tree's nodes are free to belong to
different classes, just so long as they provide/inherit \*(L"\fBis_node()\fR\*(R", the
few methods that this class relies on to navigate the tree, and have the
same internal object structure, or a superset of it. Presumably this
would be the case for any object belonging to a class derived from
\&\f(CW\*(C`Tree::DAG_Node\*(C'\fR, or belonging to \f(CW\*(C`Tree::DAG_Node\*(C'\fR itself.
.PP
When routines in this class access a node's \*(L"mother\*(R" attribute, or its
\&\*(L"daughters\*(R" attribute, they (generally) do so directly (via
\&\f(CW$node\fR\->{'mother'}, etc.), for sake of efficiency.  But classes derived
from this class should probably do this instead thru a method (via
\&\f(CW$node\fR\->mother, etc.), for sake of portability, abstraction, and general
goodness.
.PP
However, no routines in this class (aside from, necessarily, \fI\f(BI_init()\fI\fR,
\&\fI\f(BI_init_name()\fI\fR, and \*(L"\fBname()\fR\*(R") access the \*(L"name\*(R" attribute directly;
routines (like the various tree draw/dump methods) get the \*(L"name\*(R" value
thru a call to \f(CW$obj\fR\->\fBname()\fR.  So if you want the object's name to not be
a real attribute, but instead have it derived dynamically from some feature
of the object (say, based on some of its other attributes, or based on
its address), you can to override the \*(L"\fBname()\fR\*(R" method, without causing
problems.  (Be sure to consider the case of \f(CW$obj\fR\->name as a write
method, as it's used in \fI/lol_to_tree($lol)\fR and \*(L"random_network($options)\*(R".)
.SH "FAQ"
.IX Header "FAQ"
.SS "Which is the best tree processing module?"
.IX Subsection "Which is the best tree processing module?"
\&\f(CW\*(C`Tree::DAG_Node\*(C'\fR, as it happens. More details: \*(L"\s-1SEE ALSO\*(R"\s0.
.SS "How to process every node in tree?"
.IX Subsection "How to process every node in tree?"
See \*(L"walk_down($options)\*(R". \f(CW$options\fR normally looks like this, assuming we wish to pass in
an arrayref as a stack:
.PP
.Vb 1
\&        my(@stack);
\&
\&        $tree \-> walk_down
\&        ({
\&                callback =>
\&                sub
\&                {
\&                        my(@node, $options) = @_;
\&
\&                        # Process $node, using $options...
\&
\&                        push @{$$options{stack} }, $node \-> name;
\&
\&                        return 1; # Keep walking.
\&                },
\&                _depth => 0,
\&                stack  => \e@stack,
\&        });
\&
\&        # Process @stack...
.Ve
.SS "How do I switch from Tree to Tree::DAG_Node?"
.IX Subsection "How do I switch from Tree to Tree::DAG_Node?"
.IP "o The node's name" 4
.IX Item "o The node's name"
In \f(CW\*(C`Tree\*(C'\fR you use \f(CW$node\fR \-> value and in \f(CW\*(C`Tree::DAG_Node\*(C'\fR it's \f(CW$node\fR \-> name.
.IP "o The node's attributes" 4
.IX Item "o The node's attributes"
In \f(CW\*(C`Tree\*(C'\fR you use \f(CW$node\fR \-> meta and in \f(CW\*(C`Tree::DAG_Node\*(C'\fR it's \f(CW$node\fR \-> attributes.
.SS "Are there techniques for processing lists of nodes?"
.IX Subsection "Are there techniques for processing lists of nodes?"
.IP "o Copy the daughter list, and change it" 4
.IX Item "o Copy the daughter list, and change it"
.Vb 2
\&        @them    = $mother\->daughters;
\&        @removed = splice(@them, 0, 2, @new_nodes);
\&
\&        $mother\->set_daughters(@them);
.Ve
.IP "o Select a sub-set of nodes" 4
.IX Item "o Select a sub-set of nodes"
.Vb 4
\&        $mother\->set_daughters
\&        (
\&                grep($_\->name =~ /wanted/, $mother\->daughters)
\&        );
.Ve
.SS "Why did you break up the sections of methods in the \s-1POD\s0?"
.IX Subsection "Why did you break up the sections of methods in the POD?"
Because I want to list the methods in alphabetical order.
.SS "Why did you move the \s-1POD\s0 to the end?"
.IX Subsection "Why did you move the POD to the end?"
Because the apostrophes in the text confused the syntax hightlighter in my editor UltraEdit.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "o HTML::Element, HTML::Tree and HTML::TreeBuilder" 4
.IX Item "o HTML::Element, HTML::Tree and HTML::TreeBuilder"
Sean is also the author of these modules.
.IP "o Tree" 4
.IX Item "o Tree"
Lightweight.
.IP "o Tree::Binary" 4
.IX Item "o Tree::Binary"
Lightweight.
.IP "o Tree::DAG_Node::Persist" 4
.IX Item "o Tree::DAG_Node::Persist"
Lightweight.
.IP "o Tree::Persist" 4
.IX Item "o Tree::Persist"
Lightweight.
.IP "o Forest" 4
.IX Item "o Forest"
Uses Moose.
.PP
\&\f(CW\*(C`Tree::DAG_Node\*(C'\fR itself is also lightweight.
.SH "REFERENCES"
.IX Header "REFERENCES"
Wirth, Niklaus.  1976.  \fIAlgorithms + Data Structures = Programs\fR
Prentice-Hall, Englewood Cliffs, \s-1NJ.\s0
.PP
Knuth, Donald Ervin.  1997.  \fIArt of Computer Programming, Volume 1,
Third Edition: Fundamental Algorithms\fR.  Addison-Wesley,  Reading, \s-1MA.\s0
.PP
Wirth's classic, currently and lamentably out of print, has a good
section on trees.  I find it clearer than Knuth's (if not quite as
encyclopedic), probably because Wirth's example code is in a
block-structured high-level language (basically Pascal), instead
of in assembler (\s-1MIX\s0).
.PP
Until some kind publisher brings out a new printing of Wirth's book,
try poking around used bookstores (or \f(CW\*(C`www.abebooks.com\*(C'\fR) for a copy.
I think it was also republished in the 1980s under the title
\&\fIAlgorithms and Data Structures\fR, and in a German edition called
\&\fIAlgorithmen und Datenstrukturen\fR.  (That is, I'm sure books by Knuth
were published under those titles, but I'm \fIassuming\fR that they're just
later printings/editions of \fIAlgorithms + Data Structures =
Programs\fR.)
.SH "MACHINE-READABLE CHANGE LOG"
.IX Header "MACHINE-READABLE CHANGE LOG"
The file Changes was converted into Changelog.ini by Module::Metadata::Changes.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/ronsavage/Tree\-DAG_Node>
.SH "SUPPORT"
.IX Header "SUPPORT"
Email the author, or log a bug on \s-1RT:\s0
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=Tree\-DAG_Node>.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The code to print the tree, in \fBtree2string()\fR, was adapted from
Forest::Tree::Writer::ASCIIWithBranches by the dread Stevan Little.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
David Hand, \f(CW\*(C`<cogent@cpan.org>\*(C'\fR up to V 1.06.
.PP
Ron Savage \f(CW\*(C`<rsavage@cpan.org>\*(C'\fR from V 1.07.
.PP
In this \s-1POD,\s0 usage of 'I' refers to Sean, up until V 1.07.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sean M. Burke, \f(CW\*(C`<sburke@cpan.org>\*(C'\fR
.SH "COPYRIGHT, LICENSE, AND DISCLAIMER"
.IX Header "COPYRIGHT, LICENSE, AND DISCLAIMER"
Copyright 1998\-2001, 2004, 2007 by Sean M. Burke and David Hand.
.PP
This Program of ours is '\s-1OSI\s0 Certified Open Source Software';
you can redistribute it and/or modify it under the terms of
The Perl License, a copy of which is available at:
http://dev.perl.org/licenses/
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
