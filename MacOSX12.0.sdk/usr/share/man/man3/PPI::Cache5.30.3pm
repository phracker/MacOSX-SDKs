.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Cache 3"
.TH PPI::Cache 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Cache \- The PPI Document Caching Layer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Set the cache
\&  use PPI::Cache path => \*(Aq/var/cache/ppi\-cache\*(Aq;
\&  
\&  # Manually create a cache
\&  my $Cache = PPI::Cache\->new(
\&      path     => \*(Aq/var/cache/perl/class\-PPI\*(Aq,
\&      readonly => 1,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`PPI::Cache\*(C'\fR provides the default caching functionality for \s-1PPI\s0.
.PP
It integrates automatically with \s-1PPI\s0 itself. Once enabled, any attempt
to load a document from the filesystem will be cached via cache.
.PP
Please note that creating a PPI::Document from raw source or something
other object will \fBnot\fR be cached.
.SS "Using PPI::Cache"
.IX Subsection "Using PPI::Cache"
The most common way of using \f(CW\*(C`PPI::Cache\*(C'\fR is to provide parameters to
the \f(CW\*(C`use\*(C'\fR statement at the beginning of your program.
.PP
.Vb 2
\&  # Load the class but do not set a cache
\&  use PPI::Cache;
\&  
\&  # Use a fairly normal cache location
\&  use PPI::Cache path => \*(Aq/var/cache/ppi\-cache\*(Aq;
.Ve
.PP
Any of the arguments that can be provided to the \f(CW\*(C`new\*(C'\fR constructor can
also be provided to \f(CW\*(C`use\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new param => $value, ..."
.el .SS "new param => \f(CW$value\fP, ..."
.IX Subsection "new param => $value, ..."
The \f(CW\*(C`new\*(C'\fR constructor creates a new standalone cache object.
.PP
It takes a number of parameters to control the cache.
.IP "path" 4
.IX Item "path"
The \f(CW\*(C`path\*(C'\fR param sets the base directory for the cache. It must already
exist, and must be writable.
.IP "readonly" 4
.IX Item "readonly"
The \f(CW\*(C`readonly\*(C'\fR param is a true/false flag that allows the use of an
existing cache by a less-privileged user (such as the web user).
.Sp
Existing documents will be retrieved from the cache, but new documents
will not be written to it.
.PP
Returns a new \f(CW\*(C`PPI::Cache\*(C'\fR object, or dies on error.
.SS "path"
.IX Subsection "path"
The \f(CW\*(C`path\*(C'\fR accessor returns the path on the local filesystem that is the
root of the cache.
.SS "readonly"
.IX Subsection "readonly"
The \f(CW\*(C`readonly\*(C'\fR accessor returns true if documents should not be written
to the cache.
.ie n .SS "get_document $md5sum | \e$source"
.el .SS "get_document \f(CW$md5sum\fP | \e$source"
.IX Subsection "get_document $md5sum | $source"
The \f(CW\*(C`get_document\*(C'\fR method checks to see if a Document is stored in the
cache and retrieves it if so.
.ie n .SS "store_document $Document"
.el .SS "store_document \f(CW$Document\fP"
.IX Subsection "store_document $Document"
The \f(CW\*(C`store_document\*(C'\fR method takes a PPI::Document as argument and
explicitly adds it to the cache.
.PP
Returns true if saved, or \f(CW\*(C`undef\*(C'\fR (or dies) on error.
.PP
\&\s-1FIXME\s0 (make this return either one or the other, not both)
.SH "TO DO"
.IX Header "TO DO"
\&\- Finish the basic functionality
.PP
\&\- Add support for use PPI::Cache auto-setting \f(CW$PPI::Document::CACHE\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
