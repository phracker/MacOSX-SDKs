.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Types::Combine 3pm"
.TH MooseX::Types::Combine 3pm "2017-02-07" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::Combine \- Combine type libraries for exporting
.SH "VERSION"
.IX Header "VERSION"
version 0.50
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package CombinedTypeLib;
\&
\&    use base \*(AqMooseX::Types::Combine\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->provide_types_from(qw/TypeLib1 TypeLib2/);
\&
\&    package UserClass;
\&
\&    use CombinedTypeLib qw/Type1 Type2 ... /;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows you to create a single class that will allow you to export types from
multiple type libraries:
.PP
.Vb 1
\&    package TransportTypes;
\&
\&    use base \*(AqMooseX::Types::Combine\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->provide_types_from(qw/ MotorizedTypes UnmotorizedTypes /);
\&
\&    1;
.Ve
.PP
In this example all types defined in \f(CW\*(C`MotorizedTypes\*(C'\fR and \f(CW\*(C`UnmotorizedTypes\*(C'\fR
are available through the \f(CW\*(C`TransportTypes\*(C'\fR combined type library.
.PP
.Vb 1
\&    package SkiingTrip;
\&
\&    use Moose;
\&
\&    use TransportTypes qw( CarType SkisType );
\&
\&    has car => ( is => \*(Aqro\*(Aq, isa => CarType, required => 1 );
\&    has ski_rack => ( is => \*(Aqro\*(Aq, isa => ArrayRef[SkisType], required => 1 );
\&    ...
.Ve
.PP
Libraries on the right end of the list passed to \*(L"provide_types_from\*(R" take
precedence over those on the left in case of conflicts.  So, in the above
example if both the \f(CW\*(C`MotorizedTypes\*(C'\fR and \f(CW\*(C`UnmotorizedTypes\*(C'\fR libraries provided
a \f(CW\*(C`Bike\*(C'\fR type, you'd get the bicycle from \f(CW\*(C`UnmotorizedTypes\*(C'\fR not the
motorbike from \f(CW\*(C`MorotizedTypes\*(C'\fR.
.PP
You can also further combine combined type libraries with additional type
libraries or other combined type libraries in the same way to provide even
larger type libraries:
.PP
.Vb 1
\&    package MeetingTransportTypes;
\&
\&    use base \*(AqMooseX::Types::Combine\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->provide_types_from(qw/ TransportTypes TelepresenceTypes /);
\&
\&    1;
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "provide_types_from"
.IX Subsection "provide_types_from"
Sets or returns a list of type libraries (or combined type libraries) to
re-export from.
.SS "type_names"
.IX Subsection "type_names"
Returns a list of all known types by their name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Types
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Types>
(or bug\-MooseX\-Types@rt.cpan.org <mailto:bug-MooseX-Types@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert \*(L"phaylon\*(R" Sedlacek <rs@474.at>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2007 by Robert \*(L"phaylon\*(R" Sedlacek.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
