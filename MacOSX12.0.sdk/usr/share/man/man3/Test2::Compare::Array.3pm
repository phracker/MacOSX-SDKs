.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Compare::Array 3"
.TH Test2::Compare::Array 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Compare::Array \- Internal representation of an array comparison.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an internal representation of an array for comparison purposes.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$ref = $arr\->\fBinref()\fR" 4
.el .IP "\f(CW$ref\fR = \f(CW$arr\fR\->\fBinref()\fR" 4
.IX Item "$ref = $arr->inref()"
If the instance was constructed from an actual array, this will return the
reference to that array.
.ie n .IP "$bool = $arr\->ending" 4
.el .IP "\f(CW$bool\fR = \f(CW$arr\fR\->ending" 4
.IX Item "$bool = $arr->ending"
.PD 0
.ie n .IP "$arr\->set_ending($bool)" 4
.el .IP "\f(CW$arr\fR\->set_ending($bool)" 4
.IX Item "$arr->set_ending($bool)"
.PD
Set this to true if you would like to fail when the array being validated has
more items than the check. That is, if you check indexes 0\-3 but the array has
values for indexes 0\-4, it will fail and list that last item in the array as
unexpected. If set to false then it is assumed you do not care about extra
items.
.ie n .IP "$hashref = $arr\->\fBitems()\fR" 4
.el .IP "\f(CW$hashref\fR = \f(CW$arr\fR\->\fBitems()\fR" 4
.IX Item "$hashref = $arr->items()"
Returns the hashref of \f(CW\*(C`key => val\*(C'\fR pairs to be checked in the
array.
.ie n .IP "$arr\->set_items($hashref)" 4
.el .IP "\f(CW$arr\fR\->set_items($hashref)" 4
.IX Item "$arr->set_items($hashref)"
Accepts a hashref to permit indexes to be skipped if desired.
.Sp
\&\fBNote:\fR that there is no validation when using \f(CW\*(C`set_items\*(C'\fR, it is better to
use the \f(CW\*(C`add_item\*(C'\fR interface.
.ie n .IP "$arrayref = $arr\->\fBorder()\fR" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$arr\fR\->\fBorder()\fR" 4
.IX Item "$arrayref = $arr->order()"
Returns an arrayref of all indexes that will be checked, in order.
.ie n .IP "$arr\->set_order($arrayref)" 4
.el .IP "\f(CW$arr\fR\->set_order($arrayref)" 4
.IX Item "$arr->set_order($arrayref)"
Sets the order in which indexes will be checked.
.Sp
\&\fBNote:\fR that there is no validation when using \f(CW\*(C`set_order\*(C'\fR, it is better to
use the \f(CW\*(C`add_item\*(C'\fR interface.
.ie n .IP "$name = $arr\->\fBname()\fR" 4
.el .IP "\f(CW$name\fR = \f(CW$arr\fR\->\fBname()\fR" 4
.IX Item "$name = $arr->name()"
Always returns the string \f(CW"<ARRAY>"\fR.
.ie n .IP "$bool = $arr\->verify(got => $got, exists => $bool)" 4
.el .IP "\f(CW$bool\fR = \f(CW$arr\fR\->verify(got => \f(CW$got\fR, exists => \f(CW$bool\fR)" 4
.IX Item "$bool = $arr->verify(got => $got, exists => $bool)"
Check if \f(CW$got\fR is an array reference or not.
.ie n .IP "$idx = $arr\->\fBtop_index()\fR" 4
.el .IP "\f(CW$idx\fR = \f(CW$arr\fR\->\fBtop_index()\fR" 4
.IX Item "$idx = $arr->top_index()"
Returns the topmost index which is checked. This will return undef if there
are no items, or \f(CW0\fR if there is only 1 item.
.ie n .IP "$arr\->add_item($item)" 4
.el .IP "\f(CW$arr\fR\->add_item($item)" 4
.IX Item "$arr->add_item($item)"
Push an item onto the list of values to be checked.
.ie n .IP "$arr\->add_item($idx => $item)" 4
.el .IP "\f(CW$arr\fR\->add_item($idx => \f(CW$item\fR)" 4
.IX Item "$arr->add_item($idx => $item)"
Add an item to the list of values to be checked at the specified index.
.ie n .IP "$arr\->add_filter(sub { ... })" 4
.el .IP "\f(CW$arr\fR\->add_filter(sub { ... })" 4
.IX Item "$arr->add_filter(sub { ... })"
Add a filter sub. The filter receives all remaining values of the array being
checked, and should return the values that should still be checked. The filter
will be run between the last item added and the next item added.
.ie n .IP "@deltas = $arr\->deltas(got => $got, convert => \e&convert, seen => \e%seen)" 4
.el .IP "\f(CW@deltas\fR = \f(CW$arr\fR\->deltas(got => \f(CW$got\fR, convert => \e&convert, seen => \e%seen)" 4
.IX Item "@deltas = $arr->deltas(got => $got, convert => &convert, seen => %seen)"
Find the differences between the expected array values and those in the \f(CW$got\fR
arrayref.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
