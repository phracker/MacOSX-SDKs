.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::Text 3"
.TH Net::DNS::Text 3 "2014-01-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Text \- Domain Name System text representation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DNS::Text;
\&
\&    $object = new Net::DNS::Text(\*(Aqexample\*(Aq);
\&    $string = $object\->string;
\&
\&    $object = decode Net::DNS::Text( \e$data, $offset );
\&    ( $object, $next ) = decode Net::DNS::Text( \e$data, $offset );
\&
\&    $data = $object\->encode;
\&    $text = $object\->value;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Net::DNS::Text\*(C'\fR module implements a class of text objects
with associated class and instance methods.
.PP
Each text object instance has a fixed identity throughout its
lifetime.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $object = new Net::DNS::Text(\*(Aqexample\*(Aq);
.Ve
.PP
Creates a text object which encapsulates a single character
string component of a resource record.
.PP
Arbitrary single-byte characters can be represented by \e followed
by exactly three decimal digits. Such characters are devoid of
any special meaning.
.PP
A character preceded by \e represents itself, without any special
interpretation.
.SS "decode"
.IX Subsection "decode"
.Vb 1
\&    $object = decode Net::DNS::Text( \e$buffer, $offset );
\&
\&    ( $object, $next ) = decode Net::DNS::Text( \e$buffer, $offset );
.Ve
.PP
Creates a text object which represents the decoded data at the
indicated offset within the data buffer.
.PP
The argument list consists of a reference to a scalar containing
the wire-format data and offset of the text data.
.PP
The returned offset value indicates the start of the next item in
the data buffer.
.SS "encode"
.IX Subsection "encode"
.Vb 1
\&    $data = $object\->encode;
.Ve
.PP
Returns the wire-format encoded representation of the text object
suitable for inclusion in a \s-1DNS\s0 packet buffer.
.SS "value"
.IX Subsection "value"
.Vb 1
\&    $value = $text\->value;
.Ve
.PP
Character string representation of the text object.
.SS "string"
.IX Subsection "string"
.Vb 1
\&    $string = $text\->string;
.Ve
.PP
Conditionally quoted zone file representation of the text object.
.SH "BUGS"
.IX Header "BUGS"
Coding strategy is intended to avoid creating unnecessary argument
lists and stack frames. This improves efficiency at the expense of
code readability.
.PP
Platform specific character coding features are conditionally
compiled into the code.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2009\-2011 Dick Franks.
.PP
All rights reserved.
.PP
This program is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, \s-1RFC1035, RFC3629,\s0
Unicode Technical Report #16
