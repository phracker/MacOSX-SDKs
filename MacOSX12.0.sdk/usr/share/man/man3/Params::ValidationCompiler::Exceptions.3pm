.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Params::ValidationCompiler::Exceptions 3"
.TH Params::ValidationCompiler::Exceptions 3 "2018-07-31" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::ValidationCompiler::Exceptions \- Defines exceptions thrown by Params::ValidationCompiler
.SH "VERSION"
.IX Header "VERSION"
version 0.30
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines the following exceptions:
.SS "Params::ValidationCompiler::Exception::BadArguments"
.IX Subsection "Params::ValidationCompiler::Exception::BadArguments"
Exception thrown when \f(CW@_\fR does not contain a hash or hashref.
.SS "Params::ValidationCompiler::Exception::Named::Extra"
.IX Subsection "Params::ValidationCompiler::Exception::Named::Extra"
Exception thrown when \f(CW@_\fR contains unexpected extra named arguments.
.SS "Params::ValidationCompiler::Exception::Named::Required"
.IX Subsection "Params::ValidationCompiler::Exception::Named::Required"
Exception thrown when a required named parameter is not passed.
.SS "Params::ValidationCompiler::Exception::Positional::Extra"
.IX Subsection "Params::ValidationCompiler::Exception::Positional::Extra"
Exception thrown when \f(CW@_\fR contains unexpected extra arguments.
.SS "Params::ValidationCompiler::Exception::Positional::Required"
.IX Subsection "Params::ValidationCompiler::Exception::Positional::Required"
Exception thrown when a required positional parameter is not passed.
.SS "Params::ValidationCompiler::Exception::ValidationFailedForMooseTypeConstraint"
.IX Subsection "Params::ValidationCompiler::Exception::ValidationFailedForMooseTypeConstraint"
Exception thrown when a Moose type constraint check fails. This class provides
the following methods:
.PP
\fI\f(CI$e\fI\->parameter\fR
.IX Subsection "$e->parameter"
.PP
This returns a string describing the parameter, something like \f(CW\*(C`The \*(Aqfoo\*(Aq
parameter\*(C'\fR or \f(CW\*(C`Parameter #1\*(C'\fR.
.PP
\fI\f(CI$e\fI\->value\fR
.IX Subsection "$e->value"
.PP
This is the value that failed the type constraint check.
.PP
\fI\f(CI$e\fI\->type\fR
.IX Subsection "$e->type"
.PP
This is the type constraint object that did not accept the value.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Params\-ValidationCompiler/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Params-ValidationCompiler can be found at <https://github.com/houseabsolute/Params\-ValidationCompiler>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 \- 2018 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
