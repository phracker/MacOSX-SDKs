.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook 3"
.TH Moose::Cookbook 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook \- How to cook a Moose
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Moose cookbook is a series of recipes showing various Moose
features. Most recipes present some code demonstrating some feature,
and then explain the details of the code.
.PP
You should probably read the Moose::Manual first. The manual
explains Moose concepts without being too code-heavy.
.SH "RECIPES"
.IX Header "RECIPES"
.SS "Basic Moose"
.IX Subsection "Basic Moose"
These recipes will give you a good overview of Moose's capabilities, starting
with simple attribute declaration, and moving on to more powerful features like
laziness, types, type coercion, method modifiers, and more.
.IP "Moose::Cookbook::Basics::Point_AttributesAndSubclassing" 4
.IX Item "Moose::Cookbook::Basics::Point_AttributesAndSubclassing"
A simple Moose-based class. Demonstrates basic Moose attributes and subclassing.
.IP "Moose::Cookbook::Basics::BankAccount_MethodModifiersAndSubclassing" 4
.IX Item "Moose::Cookbook::Basics::BankAccount_MethodModifiersAndSubclassing"
A slightly more complex Moose class. Demonstrates using a method modifier in a
subclass.
.IP "Moose::Cookbook::Basics::BinaryTree_AttributeFeatures" 4
.IX Item "Moose::Cookbook::Basics::BinaryTree_AttributeFeatures"
Demonstrates several attribute features, including types, weak
references, predicates (\*(L"does this object have a foo?\*(R"), defaults,
laziness, and triggers.
.IP "Moose::Cookbook::Basics::Company_Subtypes" 4
.IX Item "Moose::Cookbook::Basics::Company_Subtypes"
Introduces the creation and use of custom types, a \f(CW\*(C`BUILD\*(C'\fR method, and the
use of \f(CW\*(C`override\*(C'\fR in a subclass. This recipe also shows how to model a set of
classes that could be used to model companies, people, employees, etc.
.IP "Moose::Cookbook::Basics::HTTP_SubtypesAndCoercion" 4
.IX Item "Moose::Cookbook::Basics::HTTP_SubtypesAndCoercion"
This recipe covers more subtype creation, including the use of type coercions.
.IP "Moose::Cookbook::Basics::Immutable" 4
.IX Item "Moose::Cookbook::Basics::Immutable"
Making a class immutable greatly increases the speed of accessors and
object construction.
.IP "Moose::Cookbook::Basics::BinaryTree_BuilderAndLazyBuild \- Builder methods and lazy_build" 4
.IX Item "Moose::Cookbook::Basics::BinaryTree_BuilderAndLazyBuild - Builder methods and lazy_build"
The builder feature provides an inheritable and role-composable way to
provide a default attribute value.
.IP "Moose::Cookbook::Basics::Genome_OverloadingSubtypesAndCoercion" 4
.IX Item "Moose::Cookbook::Basics::Genome_OverloadingSubtypesAndCoercion"
Demonstrates using operator overloading, coercion, and subtypes to
model how eye color is determined during reproduction.
.IP "Moose::Cookbook::Basics::Person_BUILDARGSAndBUILD" 4
.IX Item "Moose::Cookbook::Basics::Person_BUILDARGSAndBUILD"
This recipe demonstrates the use of \f(CW\*(C`BUILDARGS\*(C'\fR and \f(CW\*(C`BUILD\*(C'\fR to hook
into object construction.
.IP "Moose::Cookbook::Basics::DateTime_ExtendingNonMooseParent" 4
.IX Item "Moose::Cookbook::Basics::DateTime_ExtendingNonMooseParent"
In this recipe, we make a Moose-based subclass of DateTime, a
module which does not use Moose itself.
.IP "Moose::Cookbook::Basics::Document_AugmentAndInner" 4
.IX Item "Moose::Cookbook::Basics::Document_AugmentAndInner"
Demonstrates the use of \f(CW\*(C`augment\*(C'\fR method modifiers, a way of turning
the usual method overriding style \*(L"inside-out\*(R".
.SS "Moose Roles"
.IX Subsection "Moose Roles"
These recipes will show you how to use Moose roles.
.IP "Moose::Cookbook::Roles::Comparable_CodeReuse" 4
.IX Item "Moose::Cookbook::Roles::Comparable_CodeReuse"
Demonstrates roles, which are also sometimes known as traits or
mix-ins. Roles provide a method of code re-use which is orthogonal to
subclassing.
.IP "Moose::Cookbook::Roles::Restartable_AdvancedComposition" 4
.IX Item "Moose::Cookbook::Roles::Restartable_AdvancedComposition"
Sometimes you just want to include part of a role in your
class. Sometimes you want the whole role but one of its methods
conflicts with one in your class. With method exclusion and aliasing,
you can work around these problems.
.IP "Moose::Cookbook::Roles::ApplicationToInstance" 4
.IX Item "Moose::Cookbook::Roles::ApplicationToInstance"
In this recipe, we apply a role to an existing object instance.
.SS "Meta Moose"
.IX Subsection "Meta Moose"
These recipes show you how to write your own meta classes, which lets
you extend the object system provided by Moose.
.IP "Moose::Cookbook::Meta::WhyMeta" 4
.IX Item "Moose::Cookbook::Meta::WhyMeta"
If you're wondering what all this \*(L"meta\*(R" stuff is, and why you should
care about it, read this \*(L"recipe\*(R".
.IP "Moose::Cookbook::Meta::Labeled_AttributeTrait" 4
.IX Item "Moose::Cookbook::Meta::Labeled_AttributeTrait"
Extending Moose's attribute metaclass is a great way to add
functionality. However, attributes can only have one metaclass.
Applying roles to the attribute metaclass lets you provide
composable attribute functionality.
.IP "Moose::Cookbook::Meta::Table_MetaclassTrait" 4
.IX Item "Moose::Cookbook::Meta::Table_MetaclassTrait"
This recipe takes the class metaclass we saw in the previous recipe
and reimplements it as a metaclass trait.
.IP "Moose::Cookbook::Meta::PrivateOrPublic_MethodMetaclass" 4
.IX Item "Moose::Cookbook::Meta::PrivateOrPublic_MethodMetaclass"
This recipe shows a custom method metaclass that implements making a
method private.
.IP "Moose::Cookbook::Meta::GlobRef_InstanceMetaclass" 4
.IX Item "Moose::Cookbook::Meta::GlobRef_InstanceMetaclass"
This recipe shows an example of how you create your own meta-instance
class. The meta-instance determines the internal structure of object
instances and provide access to attribute slots.
.Sp
In this particular instance, we use a blessed glob reference as the instance
instead of a blessed hash reference.
.IP "Hooking into immutabilization (\s-1TODO\s0)" 4
.IX Item "Hooking into immutabilization (TODO)"
Moose has a feature known as \*(L"immutabilization\*(R". By calling \f(CW\*(C`_\|_PACKAGE_\|_\->meta()\->make_immutable()\*(C'\fR after defining your class
(attributes, roles, etc), you tell Moose to optimize things like
object creation, attribute access, and so on.
.Sp
If you are creating your own metaclasses, you may need to hook into
the immutabilization system. This cuts across a number of spots,
including the metaclass class, meta method classes, and possibly the
meta-instance class as well.
.Sp
This recipe shows you how to write extensions which immutabilize
properly.
.SS "Extending Moose"
.IX Subsection "Extending Moose"
These recipes cover some more ways to extend Moose, and will be useful
if you plan to write your own \f(CW\*(C`MooseX\*(C'\fR module.
.IP "Moose::Cookbook::Extending::ExtensionOverview" 4
.IX Item "Moose::Cookbook::Extending::ExtensionOverview"
There are quite a few ways to extend Moose. This recipe provides an
overview of each method, and provides recommendations for when each is
appropriate.
.IP "Moose::Cookbook::Extending::Debugging_BaseClassRole" 4
.IX Item "Moose::Cookbook::Extending::Debugging_BaseClassRole"
Many base object class extensions can be implemented as roles. This
example shows how to provide a base object class debugging role that
is applied to any class that uses a notional \f(CW\*(C`MooseX::Debugging\*(C'\fR
module.
.IP "Moose::Cookbook::Extending::Mooseish_MooseSugar" 4
.IX Item "Moose::Cookbook::Extending::Mooseish_MooseSugar"
This recipe shows how to provide a replacement for \f(CW\*(C`Moose.pm\*(C'\fR. You
may want to do this as part of the \s-1API\s0 for a \f(CW\*(C`MooseX\*(C'\fR module,
especially if you want to default to a new metaclass class or base
object class.
.SH "SNACKS"
.IX Header "SNACKS"
.IP "Moose::Cookbook::Snack::Keywords" 4
.IX Item "Moose::Cookbook::Snack::Keywords"
.PD 0
.IP "Moose::Cookbook::Snack::Types" 4
.IX Item "Moose::Cookbook::Snack::Types"
.PD
.SH "Legacy Recipes"
.IX Header "Legacy Recipes"
These cover topics that are no longer considered best practice. We've kept
them in case in you encounter these usages in the wild.
.IP "Moose::Cookbook::Legacy::Labeled_AttributeMetaclass" 4
.IX Item "Moose::Cookbook::Legacy::Labeled_AttributeMetaclass"
.PD 0
.IP "Moose::Cookbook::Legacy::Table_ClassMetaclass" 4
.IX Item "Moose::Cookbook::Legacy::Table_ClassMetaclass"
.IP "Moose::Cookbook::Legacy::Debugging_BaseClassReplacement" 4
.IX Item "Moose::Cookbook::Legacy::Debugging_BaseClassReplacement"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "<http://www.gsph.com/index.php?Lang=En&ID=291>" 4
.IX Item "<http://www.gsph.com/index.php?Lang=En&ID=291>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "\(bu" 4
.PD
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
