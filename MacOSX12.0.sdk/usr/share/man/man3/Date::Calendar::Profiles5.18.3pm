.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Calendar::Profiles 3"
.TH Date::Calendar::Profiles 3 "2009-10-30" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Calendar::Profiles \- Some sample profiles for Date::Calendar
and Date::Calendar::Year
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Date::Calendar::Profiles qw( $Profiles );
\&  use Date::Calendar;
\&
\&  $cal_US_AK = Date::Calendar\->new( $Profiles\->{\*(AqUS\-AK\*(Aq} [,LANG[,WEEKEND]] );
\&  $cal_DE_BY = Date::Calendar\->new( $Profiles\->{\*(AqDE\-BY\*(Aq} [,LANG[,WEEKEND]] );
\&
\& or
\&
\&  use Date::Calendar::Profiles qw( $Profiles );
\&  use Date::Calendar::Year;
\&
\&  $year_2000_US_FL = Date::Calendar::Year\->new( 2000, $Profiles\->{\*(AqUS\-FL\*(Aq} [,LANG[,WEEKEND]] );
\&  $year_2001_DE_NW = Date::Calendar::Year\->new( 2001, $Profiles\->{\*(AqDE\-NW\*(Aq} [,LANG[,WEEKEND]] );
\&
\& and also
\&
\&  use Date::Calendar::Profiles
\&  qw(
\&      &Previous_Friday
\&      &Next_Monday
\&      &Next_Monday_or_Tuesday
\&      &Nearest_Workday
\&      &Sunday_to_Monday
\&      &Advent1
\&      &Advent2
\&      &Advent3
\&      &Advent4
\&      &Advent
\&  );
.Ve
.SH "PREFACE"
.IX Header "PREFACE"
This module provides some sample profiles (i.e., holiday schemes)
for use with the \fIDate::Calendar\fR\|(3) and \fIDate::Calendar::Year\fR\|(3)
module.
.PP
You are not required to use these, you can always roll your own
(this is very easy). See the section \*(L"\s-1HOW TO ROLL YOUR OWN\*(R"\s0 below
for more instructions on how to do this, and take the profiles
from this module as examples.
.PP
Please let me know of any errors in these profiles, and please
send me your own profiles if you'd like to see them included in
the next release of this module! Thank you!
.PP
(But please, only use the ISO\-Latin\-1 character set whenever
possible, since my module doesn't support any other character
sets yet, or at least tell me which character set you used
so I can document this in this manual page. Thank you!)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The method \*(L"\fIinit()\fR\*(R" in module \fIDate::Calendar::Year\fR\|(3) is
responsible for parsing the calendar schemes contained
here in the Date::Calendar::Profiles module.
.PP
This method offers a \*(L"mini-language\*(R" which allows to
specify common date formulas, like for instance a simple
fixed date (in various different formats, e.g. american
or european), or things like \*(L"the second Sunday of May\*(R"
(Mother's Day), or \*(L"Easter Sunday minus 46 days\*(R" (Ash
Wednesday), to cite just a few.
.PP
See the section \*(L"\s-1DATE FORMULA SYNTAX\*(R"\s0 below for more
details.
.PP
There are some more complicated formulas, however, which
cannot be expressed in such simple terms.
.PP
The rule that if a holiday falls on a weekend, it will
be substituted by either the adjacent Friday or Monday
(whichever lies closer), is an example of this.
.PP
In order to be able to deal with such formulas, and in
order to be as flexible as possible, the \*(L"\fIinit()\fR\*(R" method
offers the possibility of using callback functions to
deal with such dates and formulas.
.PP
See the section \*(L"\s-1CALLBACK INTERFACE\*(R"\s0 below for more
details on this topic.
.PP
In order to assist you with more common cases of odd
formulas, the module Date::Calendar::Profiles exports
the following utility subroutines (which are meant to
be used as \*(L"filters\*(R" in callback functions of your own):
.IP "\(bu" 2
\&\f(CW\*(C`($year,$month,$day[,ANYTHING]) = Previous_Friday($year,$month,$day[,ANYTHING]);\*(C'\fR
.Sp
If the given date falls on a Saturday or Sunday, this
function changes the date to the adjacent Friday before
that, and returns this new date.
.Sp
Otherwise the given date is returned unchanged.
.Sp
The rest of the input parameters, if any, are simply
copied to the output.
.IP "\(bu" 2
\&\f(CW\*(C`($year,$month,$day[,ANYTHING]) = Next_Monday($year,$month,$day[,ANYTHING]);\*(C'\fR
.Sp
If the given date falls on a Saturday or Sunday, this
function changes the date to the adjacent Monday after
that, and returns this new date.
.Sp
Otherwise the given date is returned unchanged.
.Sp
The rest of the input parameters, if any, are simply
copied to the output.
.IP "\(bu" 2
\&\f(CW\*(C`($year,$month,$day[,ANYTHING]) = Next_Monday_or_Tuesday($year,$month,$day[,ANYTHING]);\*(C'\fR
.Sp
If the given date falls on a Saturday, the date of the next
Monday (after that weekend) is returned.
.Sp
If the given date falls on a Sunday, the date of the next
Tuesday (after that weekend) is returned.
.Sp
If the given date falls on a Monday, the date of the next
Tuesday (the day after the Monday) is returned.
.Sp
Otherwise the given date is returned unchanged.
.Sp
The rest of the input parameters, if any, are simply
copied to the output.
.Sp
This function is used for the second of two adjacent
holidays, where the first holiday obeys the \*(L"Next
Monday\*(R" rule (see the description of the function
immediately above).
.Sp
Examples of this are Christmas and Boxing Day, among
others.
.Sp
When the first holiday falls on Friday, the second one
falls on Saturday and is substituted by Monday.
.Sp
When the first holiday falls on a Saturday, the second
one falls on Sunday, so the first holiday is substituted
by Monday and the second one by Tuesday.
.Sp
When the first holiday falls on a Sunday, the second
one falls on a Monday. Therefore the first holiday is
substituted by Monday, and consequently the second
holiday must be substituted by Tuesday.
.Sp
Or, in other terms:
.Sp
.Vb 3
\&    Fri Sat => Fri Mon
\&    Sat Sun => Mon Tue
\&    Sun Mon => Mon Tue
.Ve
.Sp
Note that there is no filter subroutine yet for the
second of two adjacent holidays when the first holiday
obeys the \*(L"Nearest Workday\*(R" rule (see the function
described immediately below), i.e.,
.Sp
.Vb 3
\&    Fri Sat => Fri Mon
\&    Sat Sun => Fri Mon
\&    Sun Mon => Mon Tue
.Ve
.Sp
This is left as an excercise to the inclined reader. \f(CW\*(C`:\-)\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`($year,$month,$day[,ANYTHING]) = Nearest_Workday($year,$month,$day[,ANYTHING]);\*(C'\fR
.Sp
If the given date falls on a Saturday, this function
returns the date of the Friday on the day before.
.Sp
If the given date falls on a Sunday, this function
returns the date of the Monday on the day after.
.Sp
Otherwise the given date is returned unchanged.
.Sp
The rest of the input parameters, if any, are simply
copied to the output.
.IP "\(bu" 2
\&\f(CW\*(C`($year,$month,$day[,ANYTHING]) = Sunday_to_Monday($year,$month,$day[,ANYTHING]);\*(C'\fR
.Sp
If the given date falls on a Sunday, this function
returns the date of the Monday on the day after.
.Sp
Otherwise the given date is returned unchanged.
.Sp
The rest of the input parameters, if any, are simply
copied to the output.
.PP
The typical use of these filter subroutines is in a \*(L"return\*(R"
statement at the end of callback functions of your own, when
you already have calculated the holiday in question and only
need to adjust it according to the rule implemented by the
filter subroutine in question.
.PP
See also the implementation of the Date::Calendar::Profiles
module for examples of how to use these functions.
.SH "DATE FORMULA SYNTAX"
.IX Header "DATE FORMULA SYNTAX"
.Vb 1
\& \-  Fixed dates:
\&
\&    "Christmas"  =>  "24.12",   # European format (day, month)
\&    "Christmas"  =>  "24.12.",
\&
\&    "Christmas"  =>  "24Dec",
\&    "Christmas"  =>  "24.Dec",
\&    "Christmas"  =>  "24Dec.",
\&    "Christmas"  =>  "24.Dec.",
\&
\&    "Christmas"  =>  "24\-12",
\&    "Christmas"  =>  "24\-12\-",
\&
\&    "Christmas"  =>  "24\-Dec",
\&    "Christmas"  =>  "24\-Dec\-",
\&
\&    "Christmas"  =>  "12/25",   # American format (month, day)
\&    "Christmas"  =>  "Dec25",
\&    "Christmas"  =>  "Dec/25",
\&
\& \-  Dates relative to Easter Sunday:
\&
\&    "Ladies\*(Aq Carnival"  =>  "\-52",
\&    "Carnival Monday"   =>  "\-48",
\&    "Mardi Gras"        =>  "\-47",
\&    "Ash Wednesday"     =>  "\-46",
\&    "Palm Sunday"       =>   "\-7",
\&    "Maundy Thursday"   =>   "\-3",
\&    "Good Friday"       =>   "\-2",
\&    "Easter Sunday"     =>   "+0",
\&    "Easter Monday"     =>   "+1",
\&    "Ascension"         =>  "+39",
\&    "Whitsunday"        =>  "+49",
\&    "Whitmonday"        =>  "+50",
\&    "Corpus Christi"    =>  "+60",
\&
\& \-  The 1st, 2nd, 3rd, 4th or last day of week:
\&
\&    "Thanksgiving"      =>  "4Thu11",
\&    "Thanksgiving"      =>  "4/Thu/Nov",
\&    "Columbus Day"      =>  "2/Mon/Oct",
\&    "Columbus Day"      =>  "2/Mon/10",
\&    "Columbus Day"      =>  "2/1/Oct",
\&    "Columbus Day"      =>  "2/1/10",
\&    "Memorial Day"      =>  "5/Mon/May", # LAST Monday of May
\&
\& \-  Half holidays, commemorative days:
\&
\&    "Christmas"         =>  ":24.12.", # only half a day off
\&    "Valentine\*(Aqs Day"   =>  "#Feb/14", # not an official holiday
.Ve
.SH "CALLBACK INTERFACE"
.IX Header "CALLBACK INTERFACE"
The interface of the callback functions to use with the
\&\*(L"\fIinit()\fR\*(R" method of the \fIDate::Calendar::Year\fR\|(3) module is
very simple:
.PP
The callback function receives two arguments when called,
first the year number for which the holiday is to be
calculated, and second the name (the \*(L"label\*(R") of the
holiday in question (which serves as key in the hash
of a holiday scheme).
.PP
This second parameter allows you to use the same callback
function for different holidays, which might be more practical
(than separate callback functions) if for instance you have
a set of similar holidays to calculate, like for instance
the four Sundays before Christmas (\*(L"Advent\*(R").
.PP
The callback function \*(L"\fIAdvent()\fR\*(R" (exported by the
Date::Calendar::Profiles module) exemplifies this
technique.
.PP
The callback function is expected to return a list
"\f(CW\*(C`($year,$month,$day)\*(C'\fR" with the exact date of the
holiday (the year number in the output must of course
match the year number passed as parameter).
.PP
A fatal error occurs if the returned list does not
constitute a valid date, in the requested year.
.PP
Optionally, the callback function may return a fourth
value (after the date) containing a string, which may
be either \*(L"#\*(R" or \*(L":\*(R".
.PP
The string \*(L"#\*(R" signifies that the date in question is
a purely commemorative date, i.e., that you don't get
a day off from work on that day.
.PP
The string \*(L":\*(R" means that the date in question is a
\&\*(L"half\*(R" holiday, i.e., a day on which you get half a
day off from work.
.PP
In case the holiday in question was not observed or did
not exist in the requested year, the callback function
may also return an empty list. This will cause the \*(L"\fIinit()\fR\*(R"
method to simply drop this holiday for that year.
.PP
The module Date::Calendar::Profiles exports the sample
callback functions \*(L"\fIAdvent1()\fR\*(R", \*(L"\fIAdvent2()\fR\*(R", \*(L"\fIAdvent3()\fR\*(R",
\&\*(L"\fIAdvent4()\fR\*(R" and \*(L"\fIAdvent()\fR\*(R", which might assist you in
rolling your own profiles.
.SH "HOW TO ROLL YOUR OWN"
.IX Header "HOW TO ROLL YOUR OWN"
Every calendar profile (holiday scheme) is a hash.
.PP
The name of the holiday (like \*(L"Christmas\*(R", for instance)
serves as the key in this hash and must therefore be
unique (unless you want to override a default which was
set previously, but see below for more on this).
.PP
The value for each key is either a string, which specifies
a simple date formula, or the reference of a callback function.
.PP
See the section \*(L"\s-1CALLBACK INTERFACE\*(R"\s0 above for a description
of the interface (in and out) of these callback functions.
.PP
See the section \*(L"\s-1DATE FORMULA SYNTAX\*(R"\s0 above and the description
of the \*(L"\fIinit()\fR\*(R" method in \fIDate::Calendar::Year\fR\|(3) for the
exact syntax of date formula strings.
.PP
\&\fB\s-1BEWARE\s0\fR that if keys are not unique in the source code,
later entries will overwrite previous ones! I.e.,
.PP
.Vb 4
\&    ...
\&    "My special holiday" => "01\-11",
\&    "My special holiday" => "02\-11",
\&    ...
.Ve
.PP
will \fB\s-1NOT\s0\fR set two holidays of the same name, one on November
first, the other on November second, but only one, on November
second!
.PP
Therefore, in order to use sets of defaults and to be able
to override some of them, you must \fB\s-1FIRST\s0\fR include any hash
containing the default definitions, and \fB\s-1THEN\s0\fR write down
your own definitions (see also the Date::Calendar::Profiles
module for examples of this!), like this:
.PP
.Vb 6
\&    $defaults =
\&    {
\&        "Holiday #1" => "01\-01",
\&        "Holiday #2" => "02\-02",
\&        "Holiday #3" => "03\-03"
\&    };
\&
\&    $variant1 =
\&    {
\&        %$defaults,
\&        "Holiday #2" => "09\-02",
\&        "Holiday #4" => "04\-04"
\&    };
.Ve
.PP
This is because of the way hashes work in Perl.
.PP
Now let's suppose that you want to write a profile containing
all your relatives' and friends' birthdays or anniversaries.
.PP
Simply go ahead and list them in your program, in any order
you like, as follows (for example):
.PP
.Vb 10
\&  $Birthdays =
\&  {
\&      "Spouse 1971"             =>  "30.12.",
\&      "Wedding Day 1992"        =>  "01.09.",
\&      "Valentine\*(Aqs Day"         =>  "14.02.",
\&      "Son Richard 1996"        =>  "11.05.",
\&      "Daughter Irene 1994"     =>  "17.01.",
\&      "Mom 1939"                =>  "19.08.",
\&      "Dad 1937"                =>  "23.04.",
\&      "Brother Timothy 1969"    =>  "24.04.",
\&      "Sister Catherine 1973"   =>  "21.10.",
\&      "Cousin Paul 1970"        =>  "16.10.",
\&      "Aunt Marjorie 1944"      =>  "09.06.",
\&      "Uncle George 1941"       =>  "02.08.",
\&      "Friend Alexander 1968"   =>  "12.06.",
\&  };
.Ve
.PP
The year numbers after the names are not really necessary,
but they allow us to display the person's current age. If
this year number is omitted, we simply don't display the age.
.PP
Now in order to query this birthday database, we can use the
following little program:
.PP
.Vb 1
\&  #!perl \-w
\&
\&  use strict;
\&  no strict "vars";
\&  use Date::Calc qw(:all);
\&  use Date::Calendar;
\&
\&  $Birthdays =
\&  {
\&      ... # (see above)
\&  };
\&
\&  @today = Today();
\&  $calendar = Date::Calendar\->new( $Birthdays );
\&  $calendar\->year( $today[0] );
\&
\&  foreach $key (@ARGV)
\&  {
\&      if (@list = $calendar\->search( $key ))
\&      {
\&          foreach $date (@list)
\&          {
\&              @labels = $calendar\->labels( $date );
\&              $dow = shift(@labels);
\&              # More than one person might have birthday on the same date:
\&              $name = $key;
\&              foreach $person (@labels)
\&              {
\&                  if (index(lc($person),lc($key)) >= 0)
\&                  {
\&                      $name = $person;
\&                      last;
\&                  }
\&              }
\&              $delta = Delta_Days(@today, $date\->date());
\&              $age = \*(Aq\*(Aq;
\&              if ($name =~ s!\es*(\ed+)\es*$!!)
\&              {
\&                  $age = $today[0] \- $1;
\&                  $age\-\- if ($delta > 0);
\&                  $age = sprintf(" (%2d years old)", $age);
\&              }
\&              printf
\&              (
\&                  "%\-20.20s: %+5d days => %3.3s %2d\-%3.3s\-%4d%s\en",
\&                  $name,
\&                  $delta,
\&                  $dow,
\&                  $date\->day(),
\&                  Month_to_Text($date\->month()),
\&                  $date\->year(),
\&                  $age
\&              );
\&          }
\&      }
\&      else { print "No entry found in birthday list for \*(Aq$key\*(Aq!\en" }
\&  }
\&
\&  _\|_END_\|_
.Ve
.PP
Let us save this program as, say, \*(L"birthday.pl\*(R".
.PP
Then we can query this birthday database by providing search strings
on the command line, like this (note that this is a (case-insensitive)
substring search, \fB\s-1NOT\s0\fR a regular expression match!):
.PP
.Vb 2
\&  > date
\&  Wed Oct  3 18:05:45 CEST 2001
\&
\&  > perl birthday.pl wed spo
\&  Wedding Day         :   \-32 days => Sat  1\-Sep\-2001 ( 9 years old)
\&  Spouse              :   +88 days => Sun 30\-Dec\-2001 (29 years old)
\&
\&  > perl birthday.pl son daug
\&  Son Richard         :  \-145 days => Fri 11\-May\-2001 ( 5 years old)
\&  Daughter Irene      :  \-259 days => Wed 17\-Jan\-2001 ( 7 years old)
\&
\&  > perl birthday.pl broth sist
\&  Brother Timothy     :  \-162 days => Tue 24\-Apr\-2001 (32 years old)
\&  Sister Catherine    :   +18 days => Sun 21\-Oct\-2001 (27 years old)
\&
\&  > perl birthday.pl mom dad
\&  Mom                 :   \-45 days => Sun 19\-Aug\-2001 (62 years old)
\&  Dad                 :  \-163 days => Mon 23\-Apr\-2001 (64 years old)
\&
\&  > perl birthday.pl uncl aunt
\&  Uncle George        :   \-62 days => Thu  2\-Aug\-2001 (60 years old)
\&  Aunt Marjorie       :  \-116 days => Sat  9\-Jun\-2001 (57 years old)
\&
\&  > perl birthday.pl alex
\&  Friend Alexander    :  \-113 days => Tue 12\-Jun\-2001 (33 years old)
.Ve
.PP
In order to get the whole list, we can supply a substring which is
contained in every name, which happens to be a blank (\f(CW"\ "\fR):
.PP
.Vb 10
\&  > perl birthday.pl \*(Aq \*(Aq
\&  Daughter Irene      :  \-259 days => Wed 17\-Jan\-2001 ( 7 years old)
\&  Valentine\*(Aqs Day     :  \-231 days => Wed 14\-Feb\-2001
\&  Dad                 :  \-163 days => Mon 23\-Apr\-2001 (64 years old)
\&  Brother Timothy     :  \-162 days => Tue 24\-Apr\-2001 (32 years old)
\&  Son Richard         :  \-145 days => Fri 11\-May\-2001 ( 5 years old)
\&  Aunt Marjorie       :  \-116 days => Sat  9\-Jun\-2001 (57 years old)
\&  Friend Alexander    :  \-113 days => Tue 12\-Jun\-2001 (33 years old)
\&  Uncle George        :   \-62 days => Thu  2\-Aug\-2001 (60 years old)
\&  Mom                 :   \-45 days => Sun 19\-Aug\-2001 (62 years old)
\&  Wedding Day         :   \-32 days => Sat  1\-Sep\-2001 ( 9 years old)
\&  Cousin Paul         :   +13 days => Tue 16\-Oct\-2001 (30 years old)
\&  Sister Catherine    :   +18 days => Sun 21\-Oct\-2001 (27 years old)
\&  Spouse              :   +88 days => Sun 30\-Dec\-2001 (29 years old)
.Ve
.PP
By the way, a similar program is included in the \*(L"examples\*(R"
subdirectory of the Date::Calc distribution, called \*(L"anniversaries.pl\*(R".
.PP
See also the file \*(L"\s-1EXAMPLES\s0.txt\*(R" in the distribution's main directory
for a short description of that little script.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIDate::Calendar\fR\|(3), \fIDate::Calendar::Year\fR\|(3),
\&\fIDate::Calc::Object\fR\|(3), \fIDate::Calc\fR\|(3),
\&\fIDate::Calc::Util\fR\|(3).
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
The calendar profiles included in this module usually do not take
historical irregularities into account (even though some do in order
to show how this can be done), they only provide means for calculating
\&\fBregularly\fR recurring events (\fBthe profiles should therefore not be
relied upon for historical faithfulness\fR).
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
The australian calendar profiles are known to contain wrong dates.
This is due to the fact that Australia decrees its holidays individually
for each year, difficulting the calculation of the holidays by way of
a formula. An effort to compare (and to correct) the current implementation
with official documents (web pages) by the Australian authorities is under
way. This hasn't been finished yet because it is very time-consuming.
.SH "VERSION"
.IX Header "VERSION"
This man page documents \*(L"Date::Calendar::Profiles\*(R" version 6.3.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&  Steffen Beyer
\&  mailto:STBEY@cpan.org
\&  http://www.engelschall.com/u/sb/download/
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000 \- 2009 by Steffen Beyer. All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software; you can use, modify and redistribute
it under the same terms as Perl itself, i.e., at your option, under
the terms either of the \*(L"Artistic License\*(R" or the \*(L"\s-1GNU\s0 General Public
License\*(R".
.PP
The C library at the core of the module \*(L"Date::Calc::XS\*(R" can, at your
discretion, also be used, modified and redistributed under the terms
of the \*(L"\s-1GNU\s0 Library General Public License\*(R".
.PP
Please refer to the files \*(L"Artistic.txt\*(R", \*(L"\s-1GNU_GPL\s0.txt\*(R" and
\&\*(L"\s-1GNU_LGPL\s0.txt\*(R" in the \*(L"license\*(R" subdirectory of this distribution
for any details!
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
See the \*(L"\s-1GNU\s0 General Public License\*(R" for more details.
