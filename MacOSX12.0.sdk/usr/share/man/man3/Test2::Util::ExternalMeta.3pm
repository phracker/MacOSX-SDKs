.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Util::ExternalMeta 3pm"
.TH Test2::Util::ExternalMeta 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Util::ExternalMeta \- Allow third party tools to safely attach meta\-data
to your instances.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package lets you define a clear, and consistent way to allow third party
tools to attach meta-data to your instances. If your object consumes this
package, and imports its methods, then third party meta-data has a safe place
to live.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    package My::Object;
\&    use strict;
\&    use warnings;
\&
\&    use Test2::Util::ExternalMeta qw/meta get_meta set_meta delete_meta/;
\&
\&    ...
.Ve
.PP
Now to use it:
.PP
.Vb 1
\&    my $inst = My::Object\->new;
\&
\&    $inst\->set_meta(foo => \*(Aqbar\*(Aq);
\&    my $val = $inst\->get_meta(\*(Aqfoo\*(Aq);
.Ve
.SH "WHERE IS THE DATA STORED?"
.IX Header "WHERE IS THE DATA STORED?"
This package assumes your instances are blessed hashrefs, it will not work if
that is not true. It will store all meta-data in the \f(CW\*(C`_meta\*(C'\fR key on your
objects hash. If your object makes use of the \f(CW\*(C`_meta\*(C'\fR key in its underlying
hash, then there is a conflict and you cannot use this package.
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "$val = $obj\->meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$obj\fR\->meta($key)" 4
.IX Item "$val = $obj->meta($key)"
.PD 0
.ie n .IP "$val = $obj\->meta($key, $default)" 4
.el .IP "\f(CW$val\fR = \f(CW$obj\fR\->meta($key, \f(CW$default\fR)" 4
.IX Item "$val = $obj->meta($key, $default)"
.PD
This will get the value for a specified meta \f(CW$key\fR. Normally this will return
\&\f(CW\*(C`undef\*(C'\fR when there is no value for the \f(CW$key\fR, however you can specify a
\&\f(CW$default\fR value to set when no value is already set.
.ie n .IP "$val = $obj\->get_meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$obj\fR\->get_meta($key)" 4
.IX Item "$val = $obj->get_meta($key)"
This will get the value for a specified meta \f(CW$key\fR. This does not have the
\&\f(CW$default\fR overhead that \f(CW\*(C`meta()\*(C'\fR does.
.ie n .IP "$val = $obj\->delete_meta($key)" 4
.el .IP "\f(CW$val\fR = \f(CW$obj\fR\->delete_meta($key)" 4
.IX Item "$val = $obj->delete_meta($key)"
This will remove the value of a specified meta \f(CW$key\fR. The old \f(CW$val\fR will be
returned.
.ie n .IP "$obj\->set_meta($key, $val)" 4
.el .IP "\f(CW$obj\fR\->set_meta($key, \f(CW$val\fR)" 4
.IX Item "$obj->set_meta($key, $val)"
Set the value of a specified meta \f(CW$key\fR.
.SH "META-KEY RESTRICTIONS"
.IX Header "META-KEY RESTRICTIONS"
Meta keys must be defined, and must be true when used as a boolean. Keys may
not be references. You are free to stringify a reference \f(CW"$ref"\fR for use as a
key, but this package will not stringify it for you.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
