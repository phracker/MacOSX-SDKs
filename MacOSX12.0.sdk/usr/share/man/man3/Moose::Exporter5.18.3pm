.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Exporter 3"
.TH Moose::Exporter 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Exporter \- make an import() and unimport() just like Moose.pm
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyApp::Moose;
\&
\&  use Moose ();
\&  use Moose::Exporter;
\&
\&  Moose::Exporter\->setup_import_methods(
\&      with_meta => [ \*(Aqhas_rw\*(Aq, \*(Aqsugar2\*(Aq ],
\&      as_is     => [ \*(Aqsugar3\*(Aq, \e&Some::Random::thing ],
\&      also      => \*(AqMoose\*(Aq,
\&  );
\&
\&  sub has_rw {
\&      my ( $meta, $name, %options ) = @_;
\&      $meta\->add_attribute(
\&          $name,
\&          is => \*(Aqrw\*(Aq,
\&          %options,
\&      );
\&  }
\&
\&  # then later ...
\&  package MyApp::User;
\&
\&  use MyApp::Moose;
\&
\&  has \*(Aqname\*(Aq;
\&  has_rw \*(Aqsize\*(Aq;
\&  thing;
\&
\&  no MyApp::Moose;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module encapsulates the exporting of sugar functions in a
\&\f(CW\*(C`Moose.pm\*(C'\fR\-like manner. It does this by building custom \f(CW\*(C`import\*(C'\fR and
\&\f(CW\*(C`unimport\*(C'\fR methods for your module, based on a spec you provide.
.PP
It also lets you \*(L"stack\*(R" Moose-alike modules so you can export Moose's sugar
as well as your own, along with sugar from any random \f(CW\*(C`MooseX\*(C'\fR module, as
long as they all use \f(CW\*(C`Moose::Exporter\*(C'\fR. This feature exists to let you bundle
a set of MooseX modules into a policy module that developers can use directly
instead of using Moose itself.
.PP
To simplify writing exporter modules, \f(CW\*(C`Moose::Exporter\*(C'\fR also imports
\&\f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR into your exporter module, as well as into
modules that use it.
.SH "METHODS"
.IX Header "METHODS"
This module provides two public methods:
.IP "\fBMoose::Exporter\->setup_import_methods(...)\fR" 4
.IX Item "Moose::Exporter->setup_import_methods(...)"
When you call this method, \f(CW\*(C`Moose::Exporter\*(C'\fR builds custom \f(CW\*(C`import\*(C'\fR and
\&\f(CW\*(C`unimport\*(C'\fR methods for your module. The \f(CW\*(C`import\*(C'\fR method
will export the functions you specify, and can also re-export functions
exported by some other module (like \f(CW\*(C`Moose.pm\*(C'\fR). If you pass any parameters
for Moose::Util::MetaRole, the \f(CW\*(C`import\*(C'\fR method will also call
\&\f(CW\*(C`Moose::Util::MetaRole::apply_metaroles\*(C'\fR and
\&\f(CW\*(C`Moose::Util::MetaRole::apply_base_class_roles\*(C'\fR as needed, after making
sure the metaclass is initialized.
.Sp
The \f(CW\*(C`unimport\*(C'\fR method cleans the caller's namespace of all the exported
functions. This includes any functions you re-export from other
packages. However, if the consumer of your package also imports those
functions from the original package, they will \fInot\fR be cleaned.
.Sp
Note that if any of these methods already exist, they will not be
overridden, you will have to use \f(CW\*(C`build_import_methods\*(C'\fR to get the
coderef that would be installed.
.Sp
This method accepts the following parameters:
.RS 4
.IP "\(bu" 8
with_meta => [ ... ]
.Sp
This list of function \fInames only\fR will be wrapped and then exported. The
wrapper will pass the metaclass object for the caller as its first argument.
.Sp
Many sugar functions will need to use this metaclass object to do something to
the calling package.
.IP "\(bu" 8
as_is => [ ... ]
.Sp
This list of function names or sub references will be exported as-is. You can
identify a subroutine by reference, which is handy to re-export some other
module's functions directly by reference (\f(CW\*(C`\e&Some::Package::function\*(C'\fR).
.Sp
If you do export some other package's function, this function will never be
removed by the \f(CW\*(C`unimport\*(C'\fR method. The reason for this is we cannot know if
the caller \fIalso\fR explicitly imported the sub themselves, and therefore wants
to keep it.
.IP "\(bu" 8
trait_aliases => [ ... ]
.Sp
This is a list of package names which should have shortened aliases exported,
similar to the functionality of aliased. Each element in the list can be
either a package name, in which case the export will be named as the last
namespace component of the package, or an arrayref, whose first element is the
package to alias to, and second element is the alias to export.
.IP "\(bu" 8
also => \f(CW$name\fR or \e@names
.Sp
This is a list of modules which contain functions that the caller
wants to export. These modules must also use \f(CW\*(C`Moose::Exporter\*(C'\fR. The
most common use case will be to export the functions from \f(CW\*(C`Moose.pm\*(C'\fR.
Functions specified by \f(CW\*(C`with_meta\*(C'\fR or \f(CW\*(C`as_is\*(C'\fR take precedence over
functions exported by modules specified by \f(CW\*(C`also\*(C'\fR, so that a module
can selectively override functions exported by another module.
.Sp
\&\f(CW\*(C`Moose::Exporter\*(C'\fR also makes sure all these functions get removed
when \f(CW\*(C`unimport\*(C'\fR is called.
.IP "\(bu" 8
meta_lookup => sub { ... }
.Sp
This is a function which will be called to provide the metaclass
to be operated upon by the exporter. This is an advanced feature
intended for use by package generator modules in the vein of
MooseX::Role::Parameterized in order to simplify reusing sugar
from other modules that use \f(CW\*(C`Moose::Exporter\*(C'\fR. This function is
used, for example, to select the metaclass to bind to functions
that are exported using the \f(CW\*(C`with_meta\*(C'\fR option.
.Sp
This function will receive one parameter: the class name into which
the sugar is being exported. The default implementation is:
.Sp
.Vb 1
\&    sub { Class::MOP::class_of(shift) }
.Ve
.Sp
Accordingly, this function is expected to return a metaclass.
.RE
.RS 4
.Sp
You can also provide parameters for \f(CW\*(C`Moose::Util::MetaRole::apply_metaroles\*(C'\fR
and \f(CW\*(C`Moose::Util::MetaRole::base_class_roles\*(C'\fR. Specifically, valid parameters
are \*(L"class_metaroles\*(R", \*(L"role_metaroles\*(R", and \*(L"base_class_roles\*(R".
.RE
.IP "\fBMoose::Exporter\->build_import_methods(...)\fR" 4
.IX Item "Moose::Exporter->build_import_methods(...)"
Returns two code refs, one for \f(CW\*(C`import\*(C'\fR and one for \f(CW\*(C`unimport\*(C'\fR.
.Sp
Accepts the additional \f(CW\*(C`install\*(C'\fR option, which accepts an arrayref of method
names to install into your exporting package. The valid options are \f(CW\*(C`import\*(C'\fR
and \f(CW\*(C`unimport\*(C'\fR. Calling \f(CW\*(C`setup_import_methods\*(C'\fR is equivalent
to calling \f(CW\*(C`build_import_methods\*(C'\fR with \f(CW\*(C`install => [qw(import unimport)]\*(C'\fR
except that it doesn't also return the methods.
.Sp
The \f(CW\*(C`import\*(C'\fR method is built using Sub::Exporter. This means that it can
take a hashref of the form \f(CW\*(C`{ into => $package }\*(C'\fR to specify the package
it operates on.
.Sp
Used by \f(CW\*(C`setup_import_methods\*(C'\fR.
.SH "IMPORTING AND init_meta"
.IX Header "IMPORTING AND init_meta"
If you want to set an alternative base object class or metaclass class, see
above for details on how this module can call Moose::Util::MetaRole for
you.
.PP
If you want to do something that is not supported by this module, simply
define an \f(CW\*(C`init_meta\*(C'\fR method in your class. The \f(CW\*(C`import\*(C'\fR method that
\&\f(CW\*(C`Moose::Exporter\*(C'\fR generates for you will call this method (if it exists). It
will always pass the caller to this method via the \f(CW\*(C`for_class\*(C'\fR parameter.
.PP
Most of the time, your \f(CW\*(C`init_meta\*(C'\fR method will probably just call \f(CW\*(C`Moose\->init_meta\*(C'\fR to do the real work:
.PP
.Vb 4
\&  sub init_meta {
\&      shift; # our class name
\&      return Moose\->init_meta( @_, metaclass => \*(AqMy::Metaclass\*(Aq );
\&  }
.Ve
.SH "METACLASS TRAITS"
.IX Header "METACLASS TRAITS"
The \f(CW\*(C`import\*(C'\fR method generated by \f(CW\*(C`Moose::Exporter\*(C'\fR will allow the
user of your module to specify metaclass traits in a \f(CW\*(C`\-traits\*(C'\fR
parameter passed as part of the import:
.PP
.Vb 1
\&  use Moose \-traits => \*(AqMy::Meta::Trait\*(Aq;
\&
\&  use Moose \-traits => [ \*(AqMy::Meta::Trait\*(Aq, \*(AqMy::Other::Trait\*(Aq ];
.Ve
.PP
These traits will be applied to the caller's metaclass
instance. Providing traits for an exporting class that does not create
a metaclass for the caller is an error.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
