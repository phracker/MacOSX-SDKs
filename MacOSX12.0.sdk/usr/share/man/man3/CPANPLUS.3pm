.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS 3pm"
.TH CPANPLUS 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS \- API & CLI access to the CPAN mirrors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    ### standard invocation from the command line
\&    $ cpanp
\&    $ cpanp \-i Some::Module
\&
\&    $ perl \-MCPANPLUS \-eshell
\&    $ perl \-MCPANPLUS \-e\*(Aqfetch Some::Module\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`CPANPLUS\*(C'\fR library is an \s-1API\s0 to the \f(CW\*(C`CPAN\*(C'\fR mirrors and a
collection of interactive shells, commandline programs, etc,
that use this \s-1API.\s0
.SH "GUIDE TO DOCUMENTATION"
.IX Header "GUIDE TO DOCUMENTATION"
.SS "\s-1GENERAL USAGE\s0"
.IX Subsection "GENERAL USAGE"
This is the document you are currently reading. It describes
basic usage and background information. Its main purpose is to
assist the user who wants to learn how to invoke \s-1CPANPLUS\s0
and install modules from the commandline and to point you
to more indepth reading if required.
.SS "\s-1API REFERENCE\s0"
.IX Subsection "API REFERENCE"
The \f(CW\*(C`CPANPLUS\*(C'\fR \s-1API\s0 is meant to let you programmatically
interact with the \f(CW\*(C`CPAN\*(C'\fR mirrors. The documentation in
CPANPLUS::Backend shows you how to create an object
capable of interacting with those mirrors, letting you
create & retrieve module objects.
CPANPLUS::Module shows you how you can use these module
objects to perform actions like installing and testing.
.PP
The default shell, documented in CPANPLUS::Shell::Default
is also scriptable. You can use its \s-1API\s0 to dispatch calls
from your script to the \s-1CPANPLUS\s0 Shell.
.SH "COMMANDLINE TOOLS"
.IX Header "COMMANDLINE TOOLS"
.SS "\s-1STARTING AN INTERACTIVE SHELL\s0"
.IX Subsection "STARTING AN INTERACTIVE SHELL"
You can start an interactive shell by running either of
the two following commands:
.PP
.Vb 1
\&    $ cpanp
\&
\&    $ perl \-MCPANPLUS \-eshell
.Ve
.PP
All commands available are listed in the interactive shells
help menu. See \f(CW\*(C`cpanp \-h\*(C'\fR or CPANPLUS::Shell::Default
for instructions on using the default shell.
.SS "\s-1CHOOSE A SHELL\s0"
.IX Subsection "CHOOSE A SHELL"
By running \f(CW\*(C`cpanp\*(C'\fR without arguments, you will start up
the shell specified in your config, which defaults to
CPANPLUS::Shell::Default. There are more shells available.
\&\f(CW\*(C`CPANPLUS\*(C'\fR itself ships with an emulation shell called
CPANPLUS::Shell::Classic that looks and feels just like
the old \f(CW\*(C`CPAN.pm\*(C'\fR shell.
.PP
You can start this shell by typing:
.PP
.Vb 1
\&    $ perl \-MCPANPLUS \-e\*(Aqshell Classic\*(Aq
.Ve
.PP
Even more shells may be available from \f(CW\*(C`CPAN\*(C'\fR.
.PP
Note that if you have changed your default shell in your
configuration, that shell will be used instead. If for
some reason there was an error with your specified shell,
you will be given the default shell.
.SS "\s-1BUILDING PACKAGES\s0"
.IX Subsection "BUILDING PACKAGES"
\&\f(CW\*(C`cpan2dist\*(C'\fR is a commandline tool to convert any distribution
from \f(CW\*(C`CPAN\*(C'\fR into a package in the format of your choice, like
for example \f(CW\*(C`.deb\*(C'\fR or \f(CW\*(C`FreeBSD ports\*(C'\fR.
.PP
See \f(CW\*(C`cpan2dist \-h\*(C'\fR for details.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
For quick access to common commands, you may use this module,
\&\f(CW\*(C`CPANPLUS\*(C'\fR rather than the full programmatic \s-1API\s0 situated in
\&\f(CW\*(C`CPANPLUS::Backend\*(C'\fR. This module offers the following functions:
.ie n .SS "$bool = install( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.el .SS "\f(CW$bool\fP = install( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.IX Subsection "$bool = install( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
This function requires the full name of the module, which is case
sensitive.  The module name can also be provided as a fully
qualified file name, beginning with a \fI/\fR, relative to
the /authors/id directory on a \s-1CPAN\s0 mirror.
.PP
It will download, extract and install the module.
.ie n .SS "$where = fetch( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.el .SS "\f(CW$where\fP = fetch( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.IX Subsection "$where = fetch( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
Like install, fetch needs the full name of a module or the fully
qualified file name, and is case sensitive.
.PP
It will download the specified module to the current directory.
.ie n .SS "$where = get( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.el .SS "\f(CW$where\fP = get( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )"
.IX Subsection "$where = get( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
Get is provided as an alias for fetch for compatibility with
\&\s-1CPAN\s0.pm.
.SS "\fIshell()\fP"
.IX Subsection "shell()"
Shell starts the default \s-1CPAN\s0 shell.  You can also start the shell
by using the \f(CW\*(C`cpanp\*(C'\fR command, which will be installed in your
perl bin.
.SH "FAQ"
.IX Header "FAQ"
For frequently asked questions and answers, please consult the
\&\f(CW\*(C`CPANPLUS::FAQ\*(C'\fR manual.
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-cpanplus@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1CPAN++\s0 interface (of which this module is a part of) is copyright (c)
2001 \- 2007, Jos Boumans <kane@cpan.org>. All rights reserved.
.PP
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CPANPLUS::Shell::Default, \s-1CPANPLUS::FAQ\s0, CPANPLUS::Backend, CPANPLUS::Module, cpanp, cpan2dist
.SH "CONTACT INFORMATION"
.IX Header "CONTACT INFORMATION"
.IP "\(bu" 4
Bug reporting:
\&\fIbug\-cpanplus@rt.cpan.org\fR
.IP "\(bu" 4
Questions & suggestions:
\&\fIbug\-cpanplus@rt.cpan.org\fR
