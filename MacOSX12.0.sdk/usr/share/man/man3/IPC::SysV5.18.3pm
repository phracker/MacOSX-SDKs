.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPC::SysV 3pm"
.TH IPC::SysV 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::SysV \- System V IPC constants and system calls
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IPC::SysV qw(IPC_STAT IPC_PRIVATE);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IPC::SysV\*(C'\fR defines and conditionally exports all the constants
defined in your system include files which are needed by the SysV
\&\s-1IPC\s0 calls.  Common ones include
.PP
.Vb 4
\&  IPC_CREATE IPC_EXCL IPC_NOWAIT IPC_PRIVATE IPC_RMID IPC_SET IPC_STAT
\&  GETVAL SETVAL GETPID GETNCNT GETZCNT GETALL SETALL
\&  SEM_A SEM_R SEM_UNDO
\&  SHM_RDONLY SHM_RND SHMLBA
.Ve
.PP
and auxiliary ones
.PP
.Vb 3
\&  S_IRUSR S_IWUSR S_IRWXU
\&  S_IRGRP S_IWGRP S_IRWXG
\&  S_IROTH S_IWOTH S_IRWXO
.Ve
.PP
but your system might have more.
.IP "ftok( \s-1PATH \s0)" 4
.IX Item "ftok( PATH )"
.PD 0
.IP "ftok( \s-1PATH, ID \s0)" 4
.IX Item "ftok( PATH, ID )"
.PD
Return a key based on \s-1PATH\s0 and \s-1ID,\s0 which can be used as a key for
\&\f(CW\*(C`msgget\*(C'\fR, \f(CW\*(C`semget\*(C'\fR and \f(CW\*(C`shmget\*(C'\fR. See ftok.
.Sp
If \s-1ID\s0 is omitted, it defaults to \f(CW1\fR. If a single character is
given for \s-1ID,\s0 the numeric value of that character is used.
.IP "shmat( \s-1ID, ADDR, FLAG \s0)" 4
.IX Item "shmat( ID, ADDR, FLAG )"
Attach the shared memory segment identified by \s-1ID\s0 to the address
space of the calling process. See shmat.
.Sp
\&\s-1ADDR\s0 should be \f(CW\*(C`undef\*(C'\fR unless you really know what you're doing.
.IP "shmdt( \s-1ADDR \s0)" 4
.IX Item "shmdt( ADDR )"
Detach the shared memory segment located at the address specified
by \s-1ADDR\s0 from the address space of the calling process. See shmdt.
.IP "memread( \s-1ADDR, VAR, POS, SIZE \s0)" 4
.IX Item "memread( ADDR, VAR, POS, SIZE )"
Reads \s-1SIZE\s0 bytes from a memory segment at \s-1ADDR\s0 starting at position \s-1POS.
VAR\s0 must be a variable that will hold the data read. Returns true if
successful, or false if there is an error. \fImemread()\fR taints the variable.
.IP "memwrite( \s-1ADDR, STRING, POS, SIZE \s0)" 4
.IX Item "memwrite( ADDR, STRING, POS, SIZE )"
Writes \s-1SIZE\s0 bytes from \s-1STRING\s0 to a memory segment at \s-1ADDR\s0 starting at
position \s-1POS.\s0 If \s-1STRING\s0 is too long, only \s-1SIZE\s0 bytes are used; if \s-1STRING\s0
is too short, nulls are written to fill out \s-1SIZE\s0 bytes. Returns true if
successful, or false if there is an error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IPC::Msg, IPC::Semaphore, IPC::SharedMem, ftok, shmat, shmdt
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>,
Jarkko Hietaniemi <jhi@iki.fi>,
Marcus Holland-Moritz <mhx@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Version 2.x, Copyright (C) 2007\-2010, Marcus Holland-Moritz.
.PP
Version 1.x, Copyright (c) 1997, Graham Barr.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
