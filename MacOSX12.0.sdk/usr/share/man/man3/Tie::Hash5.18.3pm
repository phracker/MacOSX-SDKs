.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tie::Hash 3pm"
.TH Tie::Hash 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Hash, Tie::StdHash, Tie::ExtraHash \- base class definitions for tied hashes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package NewHash;
\&    require Tie::Hash;
\&
\&    @ISA = qw(Tie::Hash);
\&
\&    sub DELETE { ... }          # Provides needed method
\&    sub CLEAR { ... }           # Overrides inherited method
\&
\&
\&    package NewStdHash;
\&    require Tie::Hash;
\&
\&    @ISA = qw(Tie::StdHash);
\&
\&    # All methods provided by default, define only those needing overrides
\&    # Accessors access the storage in %{$_[0]};
\&    # TIEHASH should return a reference to the actual storage
\&    sub DELETE { ... }
\&
\&    package NewExtraHash;
\&    require Tie::Hash;
\&
\&    @ISA = qw(Tie::ExtraHash);
\&
\&    # All methods provided by default, define only those needing overrides
\&    # Accessors access the storage in %{$_[0][0]};
\&    # TIEHASH should return an array reference with the first element being
\&    # the reference to the actual storage 
\&    sub DELETE { 
\&      $_[0][1]\->(\*(Aqdel\*(Aq, $_[0][0], $_[1]); # Call the report writer
\&      delete $_[0][0]\->{$_[1]};           #  $_[0]\->SUPER::DELETE($_[1])
\&    }
\&
\&
\&    package main;
\&
\&    tie %new_hash, \*(AqNewHash\*(Aq;
\&    tie %new_std_hash, \*(AqNewStdHash\*(Aq;
\&    tie %new_extra_hash, \*(AqNewExtraHash\*(Aq,
\&        sub {warn "Doing \eU$_[1]\eE of $_[2].\en"};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some skeletal methods for hash-tying classes. See
perltie for a list of the functions required in order to tie a hash
to a package. The basic \fBTie::Hash\fR package provides a \f(CW\*(C`new\*(C'\fR method, as well
as methods \f(CW\*(C`TIEHASH\*(C'\fR, \f(CW\*(C`EXISTS\*(C'\fR and \f(CW\*(C`CLEAR\*(C'\fR. The \fBTie::StdHash\fR and
\&\fBTie::ExtraHash\fR packages
provide most methods for hashes described in perltie (the exceptions
are \f(CW\*(C`UNTIE\*(C'\fR and \f(CW\*(C`DESTROY\*(C'\fR).  They cause tied hashes to behave exactly like standard hashes,
and allow for selective overwriting of methods.  \fBTie::Hash\fR grandfathers the
\&\f(CW\*(C`new\*(C'\fR method: it is used if \f(CW\*(C`TIEHASH\*(C'\fR is not defined
in the case a class forgets to include a \f(CW\*(C`TIEHASH\*(C'\fR method.
.PP
For developers wishing to write their own tied hashes, the required methods
are briefly defined below. See the perltie section for more detailed
descriptive, as well as example code:
.IP "\s-1TIEHASH\s0 classname, \s-1LIST\s0" 4
.IX Item "TIEHASH classname, LIST"
The method invoked by the command \f(CW\*(C`tie %hash, classname\*(C'\fR. Associates a new
hash instance with the specified class. \f(CW\*(C`LIST\*(C'\fR would represent additional
arguments (along the lines of AnyDBM_File and compatriots) needed to
complete the association.
.IP "\s-1STORE\s0 this, key, value" 4
.IX Item "STORE this, key, value"
Store datum \fIvalue\fR into \fIkey\fR for the tied hash \fIthis\fR.
.IP "\s-1FETCH\s0 this, key" 4
.IX Item "FETCH this, key"
Retrieve the datum in \fIkey\fR for the tied hash \fIthis\fR.
.IP "\s-1FIRSTKEY\s0 this" 4
.IX Item "FIRSTKEY this"
Return the first key in the hash.
.IP "\s-1NEXTKEY\s0 this, lastkey" 4
.IX Item "NEXTKEY this, lastkey"
Return the next key in the hash.
.IP "\s-1EXISTS\s0 this, key" 4
.IX Item "EXISTS this, key"
Verify that \fIkey\fR exists with the tied hash \fIthis\fR.
.Sp
The \fBTie::Hash\fR implementation is a stub that simply croaks.
.IP "\s-1DELETE\s0 this, key" 4
.IX Item "DELETE this, key"
Delete the key \fIkey\fR from the tied hash \fIthis\fR.
.IP "\s-1CLEAR\s0 this" 4
.IX Item "CLEAR this"
Clear all values from the tied hash \fIthis\fR.
.IP "\s-1SCALAR\s0 this" 4
.IX Item "SCALAR this"
Returns what evaluating the hash in scalar context yields.
.Sp
\&\fBTie::Hash\fR does not implement this method (but \fBTie::StdHash\fR
and \fBTie::ExtraHash\fR do).
.SH "Inheriting from \fBTie::StdHash\fP"
.IX Header "Inheriting from Tie::StdHash"
The accessor methods assume that the actual storage for the data in the tied
hash is in the hash referenced by \f(CW\*(C`tied(%tiedhash)\*(C'\fR.  Thus overwritten
\&\f(CW\*(C`TIEHASH\*(C'\fR method should return a hash reference, and the remaining methods
should operate on the hash referenced by the first argument:
.PP
.Vb 2
\&  package ReportHash;
\&  our @ISA = \*(AqTie::StdHash\*(Aq;
\&
\&  sub TIEHASH  {
\&    my $storage = bless {}, shift;
\&    warn "New ReportHash created, stored in $storage.\en";
\&    $storage
\&  }
\&  sub STORE    {
\&    warn "Storing data with key $_[1] at $_[0].\en";
\&    $_[0]{$_[1]} = $_[2]
\&  }
.Ve
.SH "Inheriting from \fBTie::ExtraHash\fP"
.IX Header "Inheriting from Tie::ExtraHash"
The accessor methods assume that the actual storage for the data in the tied
hash is in the hash referenced by \f(CW\*(C`(tied(%tiedhash))\->[0]\*(C'\fR.  Thus overwritten
\&\f(CW\*(C`TIEHASH\*(C'\fR method should return an array reference with the first
element being a hash reference, and the remaining methods should operate on the
hash \f(CW\*(C`%{ $_[0]\->[0] }\*(C'\fR:
.PP
.Vb 2
\&  package ReportHash;
\&  our @ISA = \*(AqTie::ExtraHash\*(Aq;
\&
\&  sub TIEHASH  {
\&    my $class = shift;
\&    my $storage = bless [{}, @_], $class;
\&    warn "New ReportHash created, stored in $storage.\en";
\&    $storage;
\&  }
\&  sub STORE    {
\&    warn "Storing data with key $_[1] at $_[0].\en";
\&    $_[0][0]{$_[1]} = $_[2]
\&  }
.Ve
.PP
The default \f(CW\*(C`TIEHASH\*(C'\fR method stores \*(L"extra\*(R" arguments to \fItie()\fR starting
from offset 1 in the array referenced by \f(CW\*(C`tied(%tiedhash)\*(C'\fR; this is the
same storage algorithm as in \s-1TIEHASH\s0 subroutine above.  Hence, a typical
package inheriting from \fBTie::ExtraHash\fR does not need to overwrite this
method.
.ie n .SH """SCALAR"", ""UNTIE"" and ""DESTROY"""
.el .SH "\f(CWSCALAR\fP, \f(CWUNTIE\fP and \f(CWDESTROY\fP"
.IX Header "SCALAR, UNTIE and DESTROY"
The methods \f(CW\*(C`UNTIE\*(C'\fR and \f(CW\*(C`DESTROY\*(C'\fR are not defined in \fBTie::Hash\fR,
\&\fBTie::StdHash\fR, or \fBTie::ExtraHash\fR.  Tied hashes do not require
presence of these methods, but if defined, the methods will be called in
proper time, see perltie.
.PP
\&\f(CW\*(C`SCALAR\*(C'\fR is only defined in \fBTie::StdHash\fR and \fBTie::ExtraHash\fR.
.PP
If needed, these methods should be defined by the package inheriting from
\&\fBTie::Hash\fR, \fBTie::StdHash\fR, or \fBTie::ExtraHash\fR. See \*(L"\s-1SCALAR\*(R"\s0 in perltie
to find out what happens when \f(CW\*(C`SCALAR\*(C'\fR does not exist.
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
The packages relating to various DBM-related implementations (\fIDB_File\fR,
\&\fINDBM_File\fR, etc.) show examples of general tied hashes, as does the
Config module. While these do not utilize \fBTie::Hash\fR, they serve as
good working examples.
