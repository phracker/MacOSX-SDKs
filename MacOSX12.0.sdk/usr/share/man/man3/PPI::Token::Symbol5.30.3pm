.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Token::Symbol 3"
.TH PPI::Token::Symbol 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Token::Symbol \- A token class for variables and other symbols
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  PPI::Token::Symbol
\&  isa PPI::Token
\&      isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`PPI::Token::Symbol\*(C'\fR class is used to cover all tokens that represent
variables and other things that start with a sigil.
.SH "METHODS"
.IX Header "METHODS"
This class has several methods beyond what is provided by its
PPI::Token and PPI::Element parent classes.
.PP
Most methods are provided to help work out what the object is actually
pointing at, rather than what it might appear to be pointing at.
.SS "canonical"
.IX Subsection "canonical"
The \f(CW\*(C`canonical\*(C'\fR method returns a normalized, canonical version of the
symbol.
.PP
For example, it converts \f(CW\*(C`$ ::foo\*(Aqbar::baz\*(C'\fR to \f(CW$main::foo::bar::baz\fR.
.PP
This does not fully resolve the symbol, but merely removes syntax
variations.
.SS "symbol"
.IX Subsection "symbol"
The \f(CW\*(C`symbol\*(C'\fR method returns the \s-1ACTUAL\s0 symbol this token refers to.
.PP
A token of \f(CW$foo\fR might actually be referring to \f(CW@foo\fR, if it is found
in the form \f(CW$foo[1]\fR.
.PP
This method attempts to resolve these issues to determine the actual
symbol.
.PP
Returns the symbol as a string.
.SS "raw_type"
.IX Subsection "raw_type"
The \f(CW\*(C`raw_type\*(C'\fR method returns the \fBapparent\fR type of the symbol in the
form of its sigil.
.PP
Returns the sigil as a string.
.SS "symbol_type"
.IX Subsection "symbol_type"
The \f(CW\*(C`symbol_type\*(C'\fR method returns the \fBactual\fR type of the symbol in the
form of its sigil.
.PP
Returns the sigil as a string.
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
