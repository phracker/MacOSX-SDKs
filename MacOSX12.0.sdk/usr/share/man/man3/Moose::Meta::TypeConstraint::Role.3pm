.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Meta::TypeConstraint::Role 3"
.TH Moose::Meta::TypeConstraint::Role 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Meta::TypeConstraint::Role \- Role/TypeConstraint parallel hierarchy
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents type constraints for a role.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`Moose::Meta::TypeConstraint::Role\*(C'\fR is a subclass of
Moose::Meta::TypeConstraint.
.SH "METHODS"
.IX Header "METHODS"
.SS "Moose::Meta::TypeConstraint::Role\->new(%options)"
.IX Subsection "Moose::Meta::TypeConstraint::Role->new(%options)"
This creates a new role type constraint based on the given
\&\f(CW%options\fR.
.PP
It takes the same options as its parent, with two exceptions. First,
it requires an additional option, \f(CW\*(C`role\*(C'\fR, which is name of the
constraint's role.  Second, it automatically sets the parent to the
\&\f(CW\*(C`Object\*(C'\fR type.
.PP
The constructor also overrides the hand optimized type constraint with
one it creates internally.
.ie n .SS "$constraint\->role"
.el .SS "\f(CW$constraint\fP\->role"
.IX Subsection "$constraint->role"
Returns the role name associated with the constraint.
.ie n .SS "$constraint\->parents"
.el .SS "\f(CW$constraint\fP\->parents"
.IX Subsection "$constraint->parents"
Returns all the type's parent types, corresponding to the roles that
its role does.
.ie n .SS "$constraint\->is_subtype_of($type_name_or_object)"
.el .SS "\f(CW$constraint\fP\->is_subtype_of($type_name_or_object)"
.IX Subsection "$constraint->is_subtype_of($type_name_or_object)"
If the given type is also a role type, then this checks that the
type's role does the other type's role.
.PP
Otherwise it falls back to the implementation in
Moose::Meta::TypeConstraint.
.ie n .SS "$constraint\->create_child_type(%options)"
.el .SS "\f(CW$constraint\fP\->create_child_type(%options)"
.IX Subsection "$constraint->create_child_type(%options)"
This returns a new Moose::Meta::TypeConstraint object with the type
as its parent.
.PP
Note that it does \fInot\fR return a \f(CW\*(C`Moose::Meta::TypeConstraint::Role\*(C'\fR
object!
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
