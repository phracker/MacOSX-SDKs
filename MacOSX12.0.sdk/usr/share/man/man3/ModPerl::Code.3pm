.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ModPerl::Code 3"
.TH ModPerl::Code 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
$class\e::Const \- Perl Interface for $class Constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "CONSTANTS"
.IX Header "CONSTANTS"
\&\s-1EOF\s0
.PP
.Vb 3
\&        my $groups = $data{$class};
\&        for my $group (sort keys %$groups) {
\&            print $fh <<"EOF";
.Ve
.ie n .SS """:$group"""
.el .SS "\f(CW:$group\fP"
.IX Subsection ":$group"
.Vb 1
\&  use $class\e::Const \-compile qw(:$group);
.Ve
.PP
The \f(CW\*(C`:$group\*(C'\fR group is for \s-1XXX\s0 constants.
.PP
\&\s-1EOF\s0
.PP
.Vb 4
\&            for my $const (sort @{ $groups\->{$group} }) {
\&                print $fh "=head3 C<$class\e::$const>\en\en\en";
\&            }
\&        }
\&
\&        print $fh "=cut\en";
\&    }
\&}
.Ve
.PP
sub generate_constants_lookup_doc {
    my ($data) = \f(CW@_\fR;
.PP
.Vb 3
\&    foreach my $class (sort keys %$Apache2::ConstantsTable) {
\&        my $groups = $Apache2::ConstantsTable\->{$class};
\&        my $constants = [sort map { @$_ } values %$groups];
\&
\&        constants_lookup_code_doc($constants, $class, $data);
\&    }
\&}
.Ve
.PP
sub generate_constants_group_lookup_doc {
    my ($data) = \f(CW@_\fR;
.PP
.Vb 5
\&    foreach my $class (sort keys %$Apache2::ConstantsTable) {
\&        my $groups = $Apache2::ConstantsTable\->{$class};
\&        constants_group_lookup_code_doc($class, $groups, $data);
\&    }
\&}
.Ve
.PP
sub constants_group_lookup_code_doc {
    my ($class, \f(CW$groups\fR, \f(CW$data\fR) = \f(CW@_\fR;
    my \f(CW@tags\fR;
    my \f(CW@code\fR;
.PP
.Vb 11
\&    while (my ($group, $constants) = each %$groups) {
\&        $data\->{$class}{$group} = [
\&            map {
\&                my @ifdef = constants_ifdef($_);
\&                s/^($constant_prefixes)_?//o;
\&                $seen_const{$class}{$_}++;
\&                $_;
\&            } @$constants
\&        ];
\&    }
\&}
.Ve
.PP
sub constants_lookup_code_doc {
    my ($constants, \f(CW$class\fR, \f(CW$data\fR) = \f(CW@_\fR;
.PP
.Vb 1
\&    my (%switch, %alias);
\&
\&    %alias = %shortcuts;
\&
\&    my $postfix = lc $class;
\&    my $package = $class . \*(Aq::\*(Aq;
\&    my $package_len = length $package;
\&
\&    my $func = canon_func(qw(constants lookup), $postfix);
\&
\&    for (@$constants) {
\&        if (s/^($constant_prefixes)(_)?//o) {
\&            $alias{$_} = join $2 || "", $1, $_;
\&        }
\&        else {
\&            $alias{$_} ||= $_;
\&        }
\&        next unless /^([A\-Z])/;
\&        push @{ $switch{$1} }, $_;
\&    }
\&
\&    for my $key (sort keys %switch) {
\&        my $names = $switch{$key};
\&        for my $name (@$names) {
\&            my @ifdef = constants_ifdef($alias{$name});
\&            push @{ $data\->{$class}{other} }, $name
\&                unless $seen_const{$class}{$name}
\&        }
\&    }
\&}
.Ve
.PP
sub generate_exports {
    my ($self, \f(CW$c_fh\fR) = \f(CW@_\fR;
    require ModPerl::WrapXS;
    ModPerl::WrapXS\->generate_exports($c_fh);
}
.PP
# src/modules/perl/*.c files needed to build APR/APR::* outside
# of mod_perl.so
sub src_apr_ext {
    return map { \*(L"modperl_$_\*(R" } (qw(error bucket),
                                  map { \*(L"common_$_\*(R" } qw(util log));
}
.PP
1;
_\|_END_\|_
.SH "NAME"
ModPerl::Code \- Generate mod_perl glue code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use ModPerl::Code ();
\&  my $code = ModPerl::Code\->new;
\&  $code\->generate;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functionality for generating mod_perl glue code.
Reason this code is generated rather than written by hand include:
.IP "consistency" 4
.IX Item "consistency"
.PD 0
.IP "thin and clean glue code" 4
.IX Item "thin and clean glue code"
.IP "enable/disable features (without #ifdefs)" 4
.IX Item "enable/disable features (without #ifdefs)"
.IP "adapt to changes in Apache" 4
.IX Item "adapt to changes in Apache"
.IP "experiment with different approaches to gluing" 4
.IX Item "experiment with different approaches to gluing"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug MacEachern
