.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SPF::Server 3"
.TH Mail::SPF::Server 3 "2021-08-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SPF::Server \- Server class for processing SPF requests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mail::SPF;
\&
\&    my $spf_server  = Mail::SPF::Server\->new(
\&        # Optional custom default for authority explanation:
\&        default_authority_explanation =>
\&            \*(AqSee http://www.%{d}/why/id=%{S};ip=%{I};r=%{R}\*(Aq
\&    );
\&
\&    my $result      = $spf_server\->process($request);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMail::SPF::Server\fR is a server class for processing \s-1SPF\s0 requests.  Each
server instance can be configured with specific processing parameters.  Also,
the default \fINet::DNS::Resolver\fR \s-1DNS\s0 resolver used for making \s-1DNS\s0 look-ups can
be overridden with a custom resolver object.
.SS "Constructor"
.IX Subsection "Constructor"
The following constructor is provided:
.IP "\fBnew(%options)\fR: returns \fIMail::SPF::Server\fR" 4
.IX Item "new(%options): returns Mail::SPF::Server"
Creates a new server object for processing \s-1SPF\s0 requests.
.Sp
\&\f(CW%options\fR is a list of key/value pairs representing any of the following
options:
.RS 4
.IP "\fBdefault_authority_explanation\fR" 4
.IX Item "default_authority_explanation"
A \fIstring\fR denoting the default (not macro-expanded) authority explanation
string to use if the authority domain does not specify an explanation string of
its own.  Defaults to:
.Sp
.Vb 1
\&    \*(AqPlease see http://www.openspf.org/Why?s=%{_scope};id=%{S};ip=%{C};r=%{R}\*(Aq
.Ve
.Sp
As can be seen from the default, a non-standard \f(CW\*(C`_scope\*(C'\fR pseudo macro is
supported that expands to the name of the identity's scope.  (Note: Do \fInot\fR
use any non-standard macros in explanation strings published in \s-1DNS.\s0)
.IP "\fBhostname\fR" 4
.IX Item "hostname"
A \fIstring\fR denoting the local system's fully qualified host name that should
be used for expanding the \f(CW\*(C`r\*(C'\fR macro in explanation strings.  Defaults to the
system's configured host name.
.IP "\fBdns_resolver\fR" 4
.IX Item "dns_resolver"
An optional \s-1DNS\s0 resolver object.  If none is specified, a new \fINet::DNS::Resolver\fR
object is used.  The resolver object may be of a different class, but it must
provide an interface similar to \fINet::DNS::Resolver\fR \*(-- at least the \f(CW\*(C`send\*(C'\fR
and \f(CW\*(C`errorstring\*(C'\fR methods must be supported, and the \f(CW\*(C`send\*(C'\fR method must
return either an object of class \fINet::DNS::Packet\fR, or, in the case of an
error, \fBundef\fR.
.IP "\fBquery_rr_types\fR" 4
.IX Item "query_rr_types"
For which \s-1RR\s0 types to query when looking up and selecting \s-1SPF\s0 records.  The
following values are supported:
.RS 4
.IP "\fBMail::SPF::Server\->query_rr_type_all\fR" 4
.IX Item "Mail::SPF::Server->query_rr_type_all"
Both \f(CW\*(C`TXT\*(C'\fR and \f(CW\*(C`SPF\*(C'\fR type RRs.
.IP "\fBMail::SPF::Server\->query_rr_type_txt\fR (default)" 4
.IX Item "Mail::SPF::Server->query_rr_type_txt (default)"
\&\f(CW\*(C`TXT\*(C'\fR type RRs only.
.IP "\fBMail::SPF::Server\->query_rr_type_spf\fR" 4
.IX Item "Mail::SPF::Server->query_rr_type_spf"
\&\f(CW\*(C`SPF\*(C'\fR type RRs only.
.RE
.RS 4
.Sp
For years \fBMail::SPF\fR has defaulted to looking up both \f(CW\*(C`SPF\*(C'\fR and \f(CW\*(C`TXT\*(C'\fR type
RRs as recommended by \s-1RFC 4408.\s0  Experience has shown, however, that a
significant portion of name servers suffer from serious brain damage with
regard to the handling of queries for \s-1RR\s0 types that are unknown to them, such
as the \f(CW\*(C`SPF\*(C'\fR \s-1RR\s0 type.  Consequently \fBMail::SPF\fR now defaults to looking up
only \f(CW\*(C`TXT\*(C'\fR type RRs.  This may be overridden by setting the \fBquery_rr_types\fR
option.
.Sp
See \s-1RFC 4408, 3.1.1,\s0 for a discussion of the topic, as well as the description
of the \*(L"select_record\*(R" method.
.RE
.IP "\fBmax_dns_interactive_terms\fR" 4
.IX Item "max_dns_interactive_terms"
An \fIinteger\fR denoting the maximum number of terms (mechanisms and modifiers)
per \s-1SPF\s0 check that perform \s-1DNS\s0 look-ups, as defined in \s-1RFC 4408, 10.1,\s0
paragraph 6.  If \fBundef\fR is specified, there is no limit on the number of such
terms.  Defaults to \fB10\fR, which is the value defined in \s-1RFC 4408.\s0
.Sp
A value above the default is \fIstrongly discouraged\fR for security reasons.  A
value below the default has implications with regard to the predictability of
\&\s-1SPF\s0 results.  Only deviate from the default if you know what you are doing!
.IP "\fBmax_name_lookups_per_term\fR" 4
.IX Item "max_name_lookups_per_term"
An \fIinteger\fR denoting the maximum number of \s-1DNS\s0 name look-ups per term
(mechanism or modifier), as defined in \s-1RFC 4408, 10.1,\s0 paragraph 7.  If
\&\fBundef\fR is specified, there is no limit on the number of look-ups performed.
Defaults to \fB10\fR, which is the value defined in \s-1RFC 4408.\s0
.Sp
A value above the default is \fIstrongly discouraged\fR for security reasons.  A
value below the default has implications with regard to the predictability of
\&\s-1SPF\s0 results.  Only deviate from the default if you know what you are doing!
.IP "\fBmax_name_lookups_per_mx_mech\fR" 4
.IX Item "max_name_lookups_per_mx_mech"
.PD 0
.IP "\fBmax_name_lookups_per_ptr_mech\fR" 4
.IX Item "max_name_lookups_per_ptr_mech"
.PD
An \fIinteger\fR denoting the maximum number of \s-1DNS\s0 name look-ups per \fBmx\fR or \fBptr\fR
mechanism, respectively.  Defaults to the value of the \f(CW\*(C`max_name_lookups_per_term\*(C'\fR
option.  See there for additional information and security notes.
.IP "\fBmax_void_dns_lookups\fR" 4
.IX Item "max_void_dns_lookups"
An \fIinteger\fR denoting the maximum number of \*(L"void\*(R" \s-1DNS\s0 look-ups per \s-1SPF\s0 check,
i.e. the number of \s-1DNS\s0 look-ups that were caused by DNS-interactive terms and
macros (as defined in \s-1RFC 4408, 10.1,\s0 paragraphs 6 and 7) and that are allowed
to return an empty answer with \s-1RCODE 0\s0 or \s-1RCODE 3\s0 (\f(CW\*(C`NXDOMAIN\*(C'\fR) before
processing is aborted with a \f(CW\*(C`permerror\*(C'\fR result.  If \fBundef\fR is specified,
there is no stricter limit on the number of void \s-1DNS\s0 look-ups beyond the usual
processing limits.  Defaults to \fB2\fR.
.Sp
Specifically, the \s-1DNS\s0 look-ups that are subject to this limit are those caused
by the \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`mx\*(C'\fR, \f(CW\*(C`ptr\*(C'\fR, and \f(CW\*(C`exists\*(C'\fR mechanisms and the \f(CW\*(C`p\*(C'\fR macro.
.Sp
A value of \fB2\fR is likely to prevent effective DoS attacks against third-party
victim domains.  However, a definite limit may cause \f(CW\*(C`permerror\*(C'\fR results even
with certain (overly complex) innocent sender policies where useful results
would normally be returned.
.RE
.RS 4
.RE
.SS "Class methods"
.IX Subsection "Class methods"
The following class methods are provided:
.IP "\fBresult_class\fR: returns \fIclass\fR" 4
.IX Item "result_class: returns class"
.PD 0
.IP "\fBresult_class($name)\fR: returns \fIclass\fR" 4
.IX Item "result_class($name): returns class"
.PD
Returns a \fIMail::SPF::Result\fR descendent class determined from the given
result name via the server's inherent result base class, or returns the
server's inherent result base class if no result name is given.  This method
may also be used as an instance method.
.Sp
\&\fINote\fR:  Do not write code invoking class methods on \fIliteral\fR result class
names as this would ignore any derivative result classes provided by
\&\fBMail::SPF\fR extension modules.
.IP "\fBthrow_result($name, \f(CB$request\fB)\fR: throws \fIMail::SPF::Result\fR" 4
.IX Item "throw_result($name, $request): throws Mail::SPF::Result"
.PD 0
.IP "\fBthrow_result($name, \f(CB$request\fB, \f(CB$text\fB)\fR: throws \fIMail::SPF::Result\fR" 4
.IX Item "throw_result($name, $request, $text): throws Mail::SPF::Result"
.PD
Throws a \fIMail::SPF::Result\fR descendant determined from the given result name
via the server's inherent result base class, passing an optional result text
and associating the given \fIMail::SPF::Request\fR object with the result object.
This method may also be used as an instance method.
.Sp
\&\fINote\fR:  Do not write code invoking \f(CW\*(C`throw\*(C'\fR on \fIliteral\fR result class names
as this would ignore any derivative result classes provided by \fBMail::SPF\fR
extension modules.
.SS "Instance methods"
.IX Subsection "Instance methods"
The following instance methods are provided:
.IP "\fBprocess($request)\fR: returns \fIMail::SPF::Result\fR" 4
.IX Item "process($request): returns Mail::SPF::Result"
Processes the given \fIMail::SPF::Request\fR object, queries the authoritative
domain for an \s-1SPF\s0 sender policy (see the description of the \*(L"select_record\*(R"
method), evaluates the policy with regard to the given identity and other
request parameters, and returns a \fIMail::SPF::Result\fR object denoting the
result of the policy evaluation.  See \s-1RFC 4408, 4,\s0 and \s-1RFC 4406, 4,\s0 for
details.
.IP "\fBselect_record($request)\fR: returns \fIMail::SPF::Record\fR; throws \fIMail::SPF::EDNSError\fR, \fIMail::SPF::ENoAcceptableRecord\fR, \fIMail::SPF::ERedundantAcceptableRecords\fR, \fIMail::SPF::ESyntaxError\fR" 4
.IX Item "select_record($request): returns Mail::SPF::Record; throws Mail::SPF::EDNSError, Mail::SPF::ENoAcceptableRecord, Mail::SPF::ERedundantAcceptableRecords, Mail::SPF::ESyntaxError"
Queries the authority domain of the given \fIMail::SPF::Request\fR object for \s-1SPF\s0
sender policy records and, if multiple records are available, selects the
record of the highest acceptable record version that covers the requested
scope.
.Sp
More precisely, the following algorithm is performed (assuming that both \f(CW\*(C`TXT\*(C'\fR
and \f(CW\*(C`SPF\*(C'\fR \s-1RR\s0 types are being queried):
.RS 4
.IP "1." 4
Determine the authority domain, the set of acceptable \s-1SPF\s0 record versions, and
the identity scope from the given request object.
.IP "2." 4
Query the authority domain for \s-1SPF\s0 records of the \f(CW\*(C`SPF\*(C'\fR \s-1DNS RR\s0 type,
discarding any records that are of an inacceptable version or do not cover the
desired scope.
.Sp
If this yields no \s-1SPF\s0 records, query the authority domain for \s-1SPF\s0 records of
the \f(CW\*(C`TXT\*(C'\fR \s-1DNS RR\s0 type, discarding any records that are of an inacceptable
version or do not cover the desired scope.
.Sp
If still no acceptable \s-1SPF\s0 records could be found, throw a
\&\fIMail::SPF::ENoAcceptableRecord\fR exception.
.IP "3." 4
Discard all records but those of the highest acceptable version found.
.Sp
If exactly one record remains, return it.  Otherwise, throw a
\&\fIMail::SPF::ERedundantAcceptableRecords\fR exception.
.RE
.RS 4
.Sp
If the querying of either \s-1RR\s0 type has been disabled via the \*(L"new\*(R"
constructor's \f(CW\*(C`query_rr_types\*(C'\fR option, the respective part in step 2 will
be skipped.
.Sp
\&\fIMail::SPF::EDNSError\fR exceptions due to \s-1DNS\s0 look-ups and
\&\fIMail::SPF::ESyntaxError\fR exceptions due to invalid acceptable records may
also be thrown.
.RE
.IP "\fBget_acceptable_records_from_packet($packet, \f(CB$rr_type\fB, \e@versions, \f(CB$scope\fB, \f(CB$domain\fB)\fR: returns \fIlist\fR of \fIMail::SPF::Record\fR" 4
.IX Item "get_acceptable_records_from_packet($packet, $rr_type, @versions, $scope, $domain): returns list of Mail::SPF::Record"
Filters from the given \fINet::DNS::Packet\fR object all resource records of the
given \s-1RR\s0 type and for the given domain name, discarding any records that are
not \s-1SPF\s0 records at all, that are of an inacceptable \s-1SPF\s0 record version, or that
do not cover the given scope.  Returns a list of acceptable records.
.IP "\fBdns_lookup($domain, \f(CB$rr_type\fB)\fR: returns \fINet::DNS::Packet\fR; throws \fIMail::SPF::EDNSTimeout\fR, \fIMail::SPF::EDNSError\fR" 4
.IX Item "dns_lookup($domain, $rr_type): returns Net::DNS::Packet; throws Mail::SPF::EDNSTimeout, Mail::SPF::EDNSError"
Queries the \s-1DNS\s0 using the configured resolver for resource records of the
desired type at the specified domain and returns a \fINet::DNS::Packet\fR object
if an answer packet was received.  Throws a \fIMail::SPF::EDNSTimeout\fR exception
if a \s-1DNS\s0 time-out occurred.  Throws a \fIMail::SPF::EDNSError\fR exception if an
error (other than \s-1RCODE 3 AKA\s0 \f(CW\*(C`NXDOMAIN\*(C'\fR) occurred.
.IP "\fBcount_dns_interactive_term($request)\fR: throws \fIMail::SPF::EProcessingLimitExceeded\fR" 4
.IX Item "count_dns_interactive_term($request): throws Mail::SPF::EProcessingLimitExceeded"
Increments by one the count of DNS-interactive mechanisms and modifiers that
have been processed so far during the evaluation of the given
\&\fIMail::SPF::Request\fR object.  If this exceeds the configured limit (see the
\&\*(L"new\*(R" constructor's \f(CW\*(C`max_dns_interactive_terms\*(C'\fR option), throws a
\&\fIMail::SPF::EProcessingLimitExceeded\fR exception.
.Sp
This method is supposed to be called by the \f(CW\*(C`match\*(C'\fR and \f(CW\*(C`process\*(C'\fR methods of
\&\fIMail::SPF::Mech\fR and \fIMail::SPF::Mod\fR sub-classes before (and only if) they
do any \s-1DNS\s0 look-ups.
.IP "\fBcount_void_dns_lookup($request)\fR: throws \fIMail::SPF::EProcessingLimitExceeded\fR" 4
.IX Item "count_void_dns_lookup($request): throws Mail::SPF::EProcessingLimitExceeded"
Increments by one the count of \*(L"void\*(R" \s-1DNS\s0 look-ups that have occurred so far
during the evaluation of the given \fIMail::SPF::Request\fR object.  If this
exceeds the configured limit (see the \*(L"new\*(R" constructor's \f(CW\*(C`max_void_dns_lookups\*(C'\fR
option), throws a \fIMail::SPF::EProcessingLimitExceeded\fR exception.
.Sp
This method is supposed to be called by any code after any calls to the
\&\*(L"dns_lookup\*(R" method whenever (i) no answer records were returned, and (ii)
this fact is a possible indication of a DoS attack against a third-party victim
domain, and (iii) the number of \*(L"void\*(R" look-ups is not already constrained
otherwise (as for example is the case with the \f(CW\*(C`include\*(C'\fR mechanism and the
\&\f(CW\*(C`redirect\*(C'\fR modifier).  Specifically, this applies to look-ups performed by the
\&\f(CW\*(C`a\*(C'\fR, \f(CW\*(C`mx\*(C'\fR, \f(CW\*(C`ptr\*(C'\fR, and \f(CW\*(C`exists\*(C'\fR mechanisms and the \f(CW\*(C`p\*(C'\fR macro.
.IP "\fBdefault_authority_explanation\fR: returns \fIMail::SPF::MacroString\fR" 4
.IX Item "default_authority_explanation: returns Mail::SPF::MacroString"
Returns the default authority explanation as a \fIMacroString\fR object.  See the
description of the \*(L"new\*(R" constructor's \f(CW\*(C`default_authority_explanation\*(C'\fR
option.
.IP "\fBhostname\fR: returns \fIstring\fR" 4
.IX Item "hostname: returns string"
Returns the local system's host name.  See the description of the \*(L"new\*(R"
constructor's \f(CW\*(C`hostname\*(C'\fR option.
.IP "\fBdns_resolver\fR: returns \fINet::DNS::Resolver\fR or compatible object" 4
.IX Item "dns_resolver: returns Net::DNS::Resolver or compatible object"
Returns the \s-1DNS\s0 resolver object of the server object.  See the description of
the \*(L"new\*(R" constructor's \f(CW\*(C`dns_resolver\*(C'\fR option.
.IP "\fBquery_rr_types\fR: returns \fIinteger\fR" 4
.IX Item "query_rr_types: returns integer"
Returns a value denoting the \s-1RR\s0 types for which to query when looking up and
selecting \s-1SPF\s0 records.  See the description of the \*(L"new\*(R" constructor's
\&\f(CW\*(C`query_rr_types\*(C'\fR option.
.IP "\fBmax_dns_interactive_terms\fR: returns \fIinteger\fR" 4
.IX Item "max_dns_interactive_terms: returns integer"
.PD 0
.IP "\fBmax_name_lookups_per_term\fR: returns \fIinteger\fR" 4
.IX Item "max_name_lookups_per_term: returns integer"
.IP "\fBmax_name_lookups_per_mx_mech\fR: returns \fIinteger\fR" 4
.IX Item "max_name_lookups_per_mx_mech: returns integer"
.IP "\fBmax_name_lookups_per_ptr_mech\fR: returns \fIinteger\fR" 4
.IX Item "max_name_lookups_per_ptr_mech: returns integer"
.IP "\fBmax_void_dns_lookups\fR: returns \fIinteger\fR" 4
.IX Item "max_void_dns_lookups: returns integer"
.PD
Return the limit values of the server object.  See the description of the
\&\*(L"new\*(R" constructor's corresponding options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::SPF, Mail::SPF::Request, Mail::SPF::Result
.PP
<http://tools.ietf.org/html/rfc4408>
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Mail::SPF.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>, Shevek <cpan@anarres.org>
