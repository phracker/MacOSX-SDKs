.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Exception 3"
.TH Specio::Exception 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Exception \- An exception class for type constraint failures
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Try::Tiny;
\&
\&  try {
\&      $type\->validate_or_die($value);
\&  }
\&  catch {
\&      if ( $_\->isa(\*(AqSpecio::Exception\*(Aq) ) {
\&          print $_\->message, "\en";
\&          print $_\->type\->name, "\en";
\&          print $_\->value, "\en";
\&      }
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This exception class is thrown by Specio when a type check fails. It emulates
the Throwable::Error \s-1API,\s0 but doesn't use that module to avoid adding a
dependency on Moo.
.SH "API"
.IX Header "API"
This class provides the following methods:
.ie n .SS "$exception\->message"
.el .SS "\f(CW$exception\fP\->message"
.IX Subsection "$exception->message"
The error message associated with the exception.
.ie n .SS "$exception\->stack_trace"
.el .SS "\f(CW$exception\fP\->stack_trace"
.IX Subsection "$exception->stack_trace"
A Devel::StackTrace object for the exception.
.ie n .SS "$exception\->type"
.el .SS "\f(CW$exception\fP\->type"
.IX Subsection "$exception->type"
The type constraint object against which the value failed.
.ie n .SS "$exception\->value"
.el .SS "\f(CW$exception\fP\->value"
.IX Subsection "$exception->value"
The value that failed the type check.
.ie n .SS "$exception\->as_string"
.el .SS "\f(CW$exception\fP\->as_string"
.IX Subsection "$exception->as_string"
The exception as a string. This includes the method and the stack trace.
.SH "OVERLOADING"
.IX Header "OVERLOADING"
This class overloads stringification to call the \f(CW\*(C`as_string\*(C'\fR method.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
