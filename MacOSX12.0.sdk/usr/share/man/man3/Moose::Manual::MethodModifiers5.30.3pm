.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Manual::MethodModifiers 3"
.TH Moose::Manual::MethodModifiers 3 "2019-11-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Manual::MethodModifiers \- Moose's method modifiers
.SH "VERSION"
.IX Header "VERSION"
version 2.2012
.SH "WHAT IS A METHOD MODIFIER?"
.IX Header "WHAT IS A METHOD MODIFIER?"
Moose provides a feature called \*(L"method modifiers\*(R". You can also think
of these as \*(L"hooks\*(R" or \*(L"advice\*(R".
.PP
It's probably easiest to understand this feature with a few examples:
.PP
.Vb 1
\&  package Example;
\&
\&  use Moose;
\&
\&  sub foo {
\&      print "    foo\en";
\&  }
\&
\&  before \*(Aqfoo\*(Aq => sub { print "about to call foo\en"; };
\&  after \*(Aqfoo\*(Aq  => sub { print "just called foo\en"; };
\&
\&  around \*(Aqfoo\*(Aq => sub {
\&      my $orig = shift;
\&      my $self = shift;
\&
\&      print "  I\*(Aqm around foo\en";
\&
\&      $self\->$orig(@_);
\&
\&      print "  I\*(Aqm still around foo\en";
\&  };
.Ve
.PP
Now if I call \f(CW\*(C`Example\->new\->foo\*(C'\fR I'll get the following output:
.PP
.Vb 5
\&  about to call foo
\&    I\*(Aqm around foo
\&      foo
\&    I\*(Aqm still around foo
\&  just called foo
.Ve
.PP
You probably could have figured that out from the names \*(L"before\*(R",
\&\*(L"after\*(R", and \*(L"around\*(R".
.PP
Also, as you can see, the before modifiers come before around
modifiers, and after modifiers come last.
.PP
When there are multiple modifiers of the same type, the before and
around modifiers run from the last added to the first, and after
modifiers run from first added to last:
.PP
.Vb 9
\&   before 2
\&    before 1
\&     around 2
\&      around 1
\&       primary
\&      around 1
\&     around 2
\&    after 1
\&   after 2
.Ve
.SH "WHY USE THEM?"
.IX Header "WHY USE THEM?"
Method modifiers have many uses. They are often used in roles to alter the
behavior of methods in the classes that consume the role. See
Moose::Manual::Roles for more information about roles.
.PP
Since modifiers are mostly useful in roles, some of the examples below
are a bit artificial. They're intended to give you an idea of how
modifiers work, but may not be the most natural usage.
.SH "BEFORE, AFTER, AND AROUND"
.IX Header "BEFORE, AFTER, AND AROUND"
Method modifiers can be used to add behavior to methods without modifying the definition of those methods.
.SS "Before and after Modifiers"
.IX Subsection "Before and after Modifiers"
Method modifiers can be used to add behavior to a method that Moose
generates for you, such as an attribute accessor:
.PP
.Vb 1
\&  has \*(Aqsize\*(Aq => ( is => \*(Aqrw\*(Aq );
\&
\&  before \*(Aqsize\*(Aq => sub {
\&      my $self = shift;
\&
\&      if (@_) {
\&          Carp::cluck(\*(AqSomeone is setting size\*(Aq);
\&      }
\&  };
.Ve
.PP
Another use for the before modifier would be to do some sort of
prechecking on a method call. For example:
.PP
.Vb 2
\&  before \*(Aqsize\*(Aq => sub {
\&      my $self = shift;
\&
\&      die \*(AqCannot set size while the person is growing\*(Aq
\&          if @_ && $self\->is_growing;
\&  };
.Ve
.PP
This lets us implement logical checks that don't make sense as type
constraints. In particular, they're useful for defining logical rules
about an object's state changes.
.PP
Similarly, an after modifier could be used for logging an action that
was taken.
.PP
Note that the return values of both before and after modifiers are
ignored.
.SS "Around modifiers"
.IX Subsection "Around modifiers"
An around modifier is more powerful than either a before or
after modifier. It can modify the arguments being passed to the
original method, and you can even decide to simply not call the
original method at all. You can also modify the return value with an
around modifier.
.PP
An around modifier receives the original method as its first argument,
\&\fIthen\fR the object, and finally any arguments passed to the method.
.PP
.Vb 3
\&  around \*(Aqsize\*(Aq => sub {
\&      my $orig = shift;
\&      my $self = shift;
\&
\&      return $self\->$orig()
\&          unless @_;
\&
\&      my $size = shift;
\&      $size = $size / 2
\&          if $self\->likes_small_things();
\&
\&      return $self\->$orig($size);
\&  };
.Ve
.SS "Wrapping multiple methods at once"
.IX Subsection "Wrapping multiple methods at once"
\&\f(CW\*(C`before\*(C'\fR, \f(CW\*(C`after\*(C'\fR, and \f(CW\*(C`around\*(C'\fR can also modify multiple methods
at once. The simplest example of this is passing them as a list:
.PP
.Vb 3
\&  before [qw(foo bar baz)] => sub {
\&      warn "something is being called!";
\&  };
.Ve
.PP
This will add a \f(CW\*(C`before\*(C'\fR modifier to each of the \f(CW\*(C`foo\*(C'\fR, \f(CW\*(C`bar\*(C'\fR,
and \f(CW\*(C`baz\*(C'\fR methods in the current class, just as though a separate
call to \f(CW\*(C`before\*(C'\fR was made for each of them. The list can be passed
either as a bare list, or as an arrayref. Note that the name of the
function being modified isn't passed in in any way; this syntax is
only intended for cases where the function being modified doesn't
actually matter. If the function name does matter, use something like this:
.PP
.Vb 5
\&  for my $func (qw(foo bar baz)) {
\&      before $func => sub {
\&          warn "$func was called!";
\&      };
\&  }
.Ve
.SS "Using regular expressions to select methods to wrap"
.IX Subsection "Using regular expressions to select methods to wrap"
In addition, you can specify a regular expression to indicate the
methods to wrap, like so:
.PP
.Vb 3
\&  after qr/^command_/ => sub {
\&      warn "got a command";
\&  };
.Ve
.PP
This will match the regular expression against each method name
returned by \*(L"get_method_list\*(R" in Class::MOP::Class, and add a modifier
to each one that matches. The same caveats apply as above.
.PP
Using regular expressions to determine methods to wrap is quite a bit more
powerful than the previous alternatives, but it's also quite a bit more
dangerous.  Bear in mind that if your regular expression matches certain Perl
and Moose reserved method names with a special meaning to Moose or Perl, such
as \f(CW\*(C`meta\*(C'\fR, \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`BUILD\*(C'\fR, \f(CW\*(C`DESTROY\*(C'\fR, \f(CW\*(C`AUTOLOAD\*(C'\fR, etc, this could cause
unintended (and hard to debug) problems and is best avoided.
.SS "Execution order of method modifiers and inheritance"
.IX Subsection "Execution order of method modifiers and inheritance"
When both a superclass and an inheriting class have the same method modifiers,
the method modifiers of the inheriting class are wrapped around the method
modifiers of the superclass, as the following example illustrates:
.PP
Here is the parent class:
.PP
.Vb 10
\&  package Superclass;
\&  use Moose;
\&  sub rant { printf "        RANTING!\en" }
\&  before \*(Aqrant\*(Aq => sub { printf "    In %s before\en", _\|_PACKAGE_\|_ };
\&  after \*(Aqrant\*(Aq  => sub { printf "    In %s after\en",  _\|_PACKAGE_\|_ };
\&  around \*(Aqrant\*(Aq => sub {
\&      my $orig = shift;
\&      my $self = shift;
\&      printf "      In %s around before calling original\en", _\|_PACKAGE_\|_;
\&      $self\->$orig;
\&      printf "      In %s around after calling original\en", _\|_PACKAGE_\|_;
\&  };
\&  1;
.Ve
.PP
And the child class:
.PP
.Vb 10
\&  package Subclass;
\&  use Moose;
\&  extends \*(AqSuperclass\*(Aq;
\&  before \*(Aqrant\*(Aq => sub { printf "In %s before\en", _\|_PACKAGE_\|_ };
\&  after \*(Aqrant\*(Aq  => sub { printf "In %s after\en",  _\|_PACKAGE_\|_ };
\&  around \*(Aqrant\*(Aq => sub {
\&      my $orig = shift;
\&      my $self = shift;
\&      printf "  In %s around before calling original\en", _\|_PACKAGE_\|_;
\&      $self\->$orig;
\&      printf "  In %s around after calling original\en", _\|_PACKAGE_\|_;
\&  };
\&  1;
.Ve
.PP
And here's the output when we call the wrapped method (\f(CW\*(C`Child\->rant\*(C'\fR):
.PP
.Vb 1
\&  % perl \-MSubclass \-e \*(AqSubclass\->new\->rant\*(Aq
\&
\&  In Subclass before
\&    In Subclass around before calling original
\&      In Superclass before
\&        In Superclass around before calling original
\&          RANTING!
\&        In Superclass around after calling original
\&      In Superclass after
\&    In Subclass around after calling original
\&  In Subclass after
.Ve
.SH "INNER AND AUGMENT"
.IX Header "INNER AND AUGMENT"
Augment and inner are two halves of the same feature. The augment
modifier provides a sort of inverted subclassing. You provide part of
the implementation in a superclass, and then document that subclasses
are expected to provide the rest.
.PP
The superclass calls \f(CW\*(C`inner()\*(C'\fR, which then calls the \f(CW\*(C`augment\*(C'\fR
modifier in the subclass:
.PP
.Vb 1
\&  package Document;
\&
\&  use Moose;
\&
\&  sub as_xml {
\&      my $self = shift;
\&
\&      my $xml = "<document>\en";
\&      $xml .= inner();
\&      $xml .= "</document>\en";
\&
\&      return $xml;
\&  }
.Ve
.PP
Using \f(CW\*(C`inner()\*(C'\fR in this method makes it possible for one or more
subclasses to then augment this method with their own specific
implementation:
.PP
.Vb 1
\&  package Report;
\&
\&  use Moose;
\&
\&  extends \*(AqDocument\*(Aq;
\&
\&  augment \*(Aqas_xml\*(Aq => sub {
\&      my $self = shift;
\&
\&      my $xml = "  <report>\en";
\&      $xml .= inner();
\&      $xml .= "  </report>\en";
\&
\&      return $xml;
\&  };
.Ve
.PP
When we call \f(CW\*(C`as_xml\*(C'\fR on a Report object, we get something like this:
.PP
.Vb 4
\&  <document>
\&    <report>
\&    </report>
\&  </document>
.Ve
.PP
But we also called \f(CW\*(C`inner()\*(C'\fR in \f(CW\*(C`Report\*(C'\fR, so we can continue
subclassing and adding more content inside the document:
.PP
.Vb 1
\&  package Report::IncomeAndExpenses;
\&
\&  use Moose;
\&
\&  extends \*(AqReport\*(Aq;
\&
\&  augment \*(Aqas_xml\*(Aq => sub {
\&      my $self = shift;
\&
\&      my $xml = \*(Aq    <income>\*(Aq . $self\->income . \*(Aq</income>\*(Aq;
\&      $xml .= "\en";
\&      $xml .= \*(Aq    <expenses>\*(Aq . $self\->expenses . \*(Aq</expenses>\*(Aq;
\&      $xml .= "\en";
\&
\&      $xml .= inner() || q{};
\&
\&      return $xml;
\&  };
.Ve
.PP
Now our report has some content:
.PP
.Vb 6
\&  <document>
\&    <report>
\&      <income>$10</income>
\&      <expenses>$8</expenses>
\&    </report>
\&  </document>
.Ve
.PP
What makes this combination of \f(CW\*(C`augment\*(C'\fR and \f(CW\*(C`inner()\*(C'\fR special is
that it allows us to have methods which are called from parent (least
specific) to child (most specific). This inverts the normal
inheritance pattern.
.PP
Note that in \f(CW\*(C`Report::IncomeAndExpenses\*(C'\fR we call \f(CW\*(C`inner()\*(C'\fR again. If the
object is an instance of \f(CW\*(C`Report::IncomeAndExpenses\*(C'\fR then this call is a
no-op, and just returns false. It's a good idea to always call \f(CW\*(C`inner()\*(C'\fR to
allow for future subclassing.
.SH "OVERRIDE AND SUPER"
.IX Header "OVERRIDE AND SUPER"
Finally, Moose provides some simple sugar for Perl's built-in method
overriding scheme. If you want to override a method from a parent
class, you can do this with \f(CW\*(C`override\*(C'\fR:
.PP
.Vb 1
\&  package Employee;
\&
\&  use Moose;
\&
\&  extends \*(AqPerson\*(Aq;
\&
\&  has \*(Aqjob_title\*(Aq => ( is => \*(Aqrw\*(Aq );
\&
\&  override \*(Aqdisplay_name\*(Aq => sub {
\&      my $self = shift;
\&
\&      return super() . q{, } . $self\->job_title();
\&  };
.Ve
.PP
The call to \f(CW\*(C`super()\*(C'\fR is almost the same as calling \f(CW\*(C`$self\->SUPER::display_name\*(C'\fR. The difference is that the arguments
passed to the superclass's method will always be the same as the ones
passed to the method modifier, and cannot be changed.
.PP
All arguments passed to \f(CW\*(C`super()\*(C'\fR are ignored, as are any changes
made to \f(CW@_\fR before \f(CW\*(C`super()\*(C'\fR is called.
.SH "SEMI-COLONS"
.IX Header "SEMI-COLONS"
Because all of these method modifiers are implemented as Perl
functions, you must always end the modifier declaration with a
semi-colon:
.PP
.Vb 1
\&  after \*(Aqfoo\*(Aq => sub { };
.Ve
.SH "EXCEPTIONS AND STACK TRACES"
.IX Header "EXCEPTIONS AND STACK TRACES"
An exception thrown in a \f(CW\*(C`before\*(C'\fR modifier will prevent the method it
modifies from being called at all. An exception in an \f(CW\*(C`around\*(C'\fR modifier may
prevent the modified method from being called, depending on how the \f(CW\*(C`around\*(C'\fR
modifier is structured. An exception in an \f(CW\*(C`after\*(C'\fR modifier obviously cannot
prevent the method it wraps from being called.
.PP
Both \f(CW\*(C`override\*(C'\fR and \f(CW\*(C`augment\*(C'\fR are similar to \f(CW\*(C`around\*(C'\fR in that they can
decide whether or not to call the method they modify before or after throwing
an exception.
.PP
From the caller's perspective, an exception in a method modifier will look
like the method it called threw an exception. However, method modifiers are
just standard Perl subroutines. This means that they end up on the stack in
stack traces as an additional frame.
.SH "CAVEATS"
.IX Header "CAVEATS"
These method modification features do not work well with multiple inheritance,
due to how method resolution is performed in Perl. Experiment with a test
program to ensure your class hierarchy works as expected, or more preferably,
don't use multiple inheritance (roles can help with this)!
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
