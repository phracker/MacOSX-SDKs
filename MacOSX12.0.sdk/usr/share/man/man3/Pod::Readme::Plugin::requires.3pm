.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Readme::Plugin::requires 3"
.TH Pod::Readme::Plugin::requires 3 "2018-10-31" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Readme::Plugin::requires \- Include requirements in README
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  =for readme plugin requires
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a plugin for Pod::Readme that includes module requirements
from the \fI\s-1META\s0.yml\fR file.
.PP
Because this depends on the \fI\s-1META\s0.yml\fR file, the \fI\s-1README\s0\fR should be
generated after that file has been updated.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.ie n .SS """from\-file"""
.el .SS "\f(CWfrom\-file\fP"
.IX Subsection "from-file"
.Vb 1
\&  =for readme plugin version from\-file=\*(AqMYMETA.yml\*(Aq
.Ve
.PP
By default, it will extract the version from the \fI\s-1META\s0.yml\fR file. If,
for some reason, this file is in a non-standard location, then you
should specify it here.
.PP
The file will be ignored if the \f(CW\*(C`zilla\*(C'\fR attribute is set, and instead
obtain metadata from the Dist::Zilla object (since the \fI\s-1META\s0.yml\fR
file may not exist.)
.ie n .SS """no\-omit\-core"""
.el .SS "\f(CWno\-omit\-core\fP"
.IX Subsection "no-omit-core"
By default, core modules for the version of Perl specified in the
\&\fI\s-1META\s0.yml\fR file are omitted from this list.  If you prefer to lise
all requirements, then specify this option.
.ie n .SS """title"""
.el .SS "\f(CWtitle\fP"
.IX Subsection "title"
.Vb 1
\&  =for readme plugin version title=\*(AqREQUIREMENTS\*(Aq
.Ve
.PP
This argument allows you to change the title of the heading.
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
.IP "\(bu" 4
Trailing zeros in module versions may be dropped.
.Sp
If you specify a minimum version of a module with a trailing zero,
e.g. \*(L"0.30\*(R", then it may be shown as \*(L"0.3\*(R".  A workaround is to
specify the module version in your \fIMakefile.PL\fR as a string instead
of number:
.Sp
.Vb 4
\&  requires(
\&    \*(AqCPAN::Changes\*(Aq => \*(Aq0.30\*(Aq,
\&    ...
\&  );
.Ve
