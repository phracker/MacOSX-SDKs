.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IPC::System::Simple 3"
.TH IPC::System::Simple 3 "2020-03-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::System::Simple \- Run commands simply, with detailed diagnostics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IPC::System::Simple qw(system systemx capture capturex);
\&
\&  system("some_command");        # Command succeeds or dies!
\&
\&  system("some_command",@args);  # Succeeds or dies, avoids shell if @args
\&
\&  systemx("some_command",@args); # Succeeds or dies, NEVER uses the shell
\&
\&
\&  # Capture the output of a command (just like backticks). Dies on error.
\&  my $output = capture("some_command");
\&
\&  # Just like backticks in list context.  Dies on error.
\&  my @output = capture("some_command");
\&
\&  # As above, but avoids the shell if @args is non\-empty
\&  my $output = capture("some_command", @args);
\&
\&  # As above, but NEVER invokes the shell.
\&  my $output = capturex("some_command", @args);
\&  my @output = capturex("some_command", @args);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calling Perl's in-built \f(CW\*(C`system()\*(C'\fR function is easy, 
determining if it was successful is \fIhard\fR.  Let's face it,
\&\f(CW$?\fR isn't the nicest variable in the world to play with, and
even if you \fIdo\fR check it, producing a well-formatted error
string takes a lot of work.
.PP
\&\f(CW\*(C`IPC::System::Simple\*(C'\fR takes the hard work out of calling 
external commands.  In fact, if you want to be really lazy,
you can just write:
.PP
.Vb 1
\&    use IPC::System::Simple qw(system);
.Ve
.PP
and all of your \f(CW\*(C`system\*(C'\fR commands will either succeed (run to
completion and return a zero exit value), or die with rich diagnostic
messages.
.PP
The \f(CW\*(C`IPC::System::Simple\*(C'\fR module also provides a simple replacement
to Perl's backticks operator.  Simply write:
.PP
.Vb 1
\&    use IPC::System::Simple qw(capture);
.Ve
.PP
and then use the \*(L"\fBcapture()\fR\*(R" command just like you'd use backticks.
If there's an error, it will die with a detailed description of what
went wrong.  Better still, you can even use \f(CW\*(C`capturex()\*(C'\fR to run the
equivalent of backticks, but without the shell:
.PP
.Vb 1
\&    use IPC::System::Simple qw(capturex);
\&
\&    my $result = capturex($command, @args);
.Ve
.PP
If you want more power than the basic interface, including the
ability to specify which exit values are acceptable, trap errors,
or process diagnostics, then read on!
.SH "ADVANCED SYNOPSIS"
.IX Header "ADVANCED SYNOPSIS"
.Vb 3
\&  use IPC::System::Simple qw(
\&    capture capturex system systemx run runx $EXITVAL EXIT_ANY
\&  );
\&
\&  # Run a command, throwing exception on failure
\&
\&  run("some_command");
\&
\&  runx("some_command",@args);  # Run a command, avoiding the shell
\&
\&  # Do the same thing, but with the drop\-in system replacement.
\&
\&  system("some_command");
\&
\&  systemx("some_command", @args);
\&
\&  # Run a command which must return 0..5, avoid the shell, and get the
\&  # exit value (we could also look at $EXITVAL)
\&
\&  my $exit_value = runx([0..5], "some_command", @args);
\&
\&  # The same, but any exit value will do.
\&
\&  my $exit_value = runx(EXIT_ANY, "some_command", @args);
\&
\&  # Capture output into $result and throw exception on failure
\&
\&  my $result = capture("some_command"); 
\&
\&  # Check exit value from captured command
\&
\&  print "some_command exited with status $EXITVAL\en";
\&
\&  # Captures into @lines, splitting on $/
\&  my @lines = capture("some_command"); 
\&
\&  # Run a command which must return 0..5, capture the output into
\&  # @lines, and avoid the shell.
\&
\&  my @lines  = capturex([0..5], "some_command", @args);
.Ve
.SH "ADVANCED USAGE"
.IX Header "ADVANCED USAGE"
.SS "\fBrun()\fP and \fBsystem()\fP"
.IX Subsection "run() and system()"
\&\f(CW\*(C`IPC::System::Simple\*(C'\fR provides a subroutine called
\&\f(CW\*(C`run\*(C'\fR, that executes a command using the same semantics as
Perl's built-in \f(CW\*(C`system\*(C'\fR:
.PP
.Vb 1
\&    use IPC::System::Simple qw(run);
\&
\&    run("cat *.txt");           # Execute command via the shell
\&    run("cat","/etc/motd");     # Execute command without shell
.Ve
.PP
The primary difference between Perl's in-built system and
the \f(CW\*(C`run\*(C'\fR command is that \f(CW\*(C`run\*(C'\fR will throw an exception on
failure, and allows a list of acceptable exit values to be set.
See \*(L"Exit values\*(R" for further information.
.PP
In fact, you can even have \f(CW\*(C`IPC::System::Simple\*(C'\fR replace the
default \f(CW\*(C`system\*(C'\fR function for your package so it has the
same behaviour:
.PP
.Vb 1
\&    use IPC::System::Simple qw(system);
\&
\&    system("cat *.txt");  # system now succeeds or dies!
.Ve
.PP
\&\f(CW\*(C`system\*(C'\fR and \f(CW\*(C`run\*(C'\fR are aliases to each other.
.PP
See also \*(L"\fBrunx()\fR, \fBsystemx()\fR and \fBcapturex()\fR\*(R" for variants of
\&\f(CW\*(C`system()\*(C'\fR and \f(CW\*(C`run()\*(C'\fR that never invoke the shell, even with
a single argument.
.SS "\fBcapture()\fP"
.IX Subsection "capture()"
A second subroutine, named \f(CW\*(C`capture\*(C'\fR executes a command with
the same semantics as Perl's built-in backticks (and \f(CW\*(C`qx()\*(C'\fR):
.PP
.Vb 1
\&    use IPC::System::Simple qw(capture);
\&
\&    # Capture text while invoking the shell.
\&    my $file  = capture("cat /etc/motd");
\&    my @lines = capture("cat /etc/passwd");
.Ve
.PP
However unlike regular backticks, which always use the shell, \f(CW\*(C`capture\*(C'\fR
will bypass the shell when called with multiple arguments:
.PP
.Vb 3
\&    # Capture text while avoiding the shell.
\&    my $file  = capture("cat", "/etc/motd");
\&    my @lines = capture("cat", "/etc/passwd");
.Ve
.PP
See also \*(L"\fBrunx()\fR, \fBsystemx()\fR and \fBcapturex()\fR\*(R" for a variant of
\&\f(CW\*(C`capture()\*(C'\fR that never invokes the shell, even with a single
argument.
.SS "\fBrunx()\fP, \fBsystemx()\fP and \fBcapturex()\fP"
.IX Subsection "runx(), systemx() and capturex()"
The \f(CW\*(C`runx()\*(C'\fR, \f(CW\*(C`systemx()\*(C'\fR and \f(CW\*(C`capturex()\*(C'\fR commands are identical
to the multi-argument forms of \f(CW\*(C`run()\*(C'\fR, \f(CW\*(C`system()\*(C'\fR and \f(CW\*(C`capture()\*(C'\fR
respectively, but \fInever\fR invoke the shell, even when called with a
single argument.  These forms are particularly useful when a command's
argument list \fImight\fR be empty, for example:
.PP
.Vb 1
\&    systemx($cmd, @args);
.Ve
.PP
The use of \f(CW\*(C`systemx()\*(C'\fR here guarantees that the shell will \fInever\fR
be invoked, even if \f(CW@args\fR is empty.
.SS "Exception handling"
.IX Subsection "Exception handling"
In the case where the command returns an unexpected status, both \f(CW\*(C`run\*(C'\fR and
\&\f(CW\*(C`capture\*(C'\fR will throw an exception, which if not caught will terminate your
program with an error.
.PP
Capturing the exception is easy:
.PP
.Vb 3
\&    eval {
\&        run("cat *.txt");
\&    };
\&
\&    if ($@) {
\&        print "Something went wrong \- $@\en";
\&    }
.Ve
.PP
See the diagnostics section below for more details.
.PP
\fIException cases\fR
.IX Subsection "Exception cases"
.PP
\&\f(CW\*(C`IPC::System::Simple\*(C'\fR considers the following to be unexpected,
and worthy of exception:
.IP "\(bu" 4
Failing to start entirely (eg, command not found, permission denied).
.IP "\(bu" 4
Returning an exit value other than zero (but see below).
.IP "\(bu" 4
Being killed by a signal.
.IP "\(bu" 4
Being passed tainted data (in taint mode).
.SS "Exit values"
.IX Subsection "Exit values"
Traditionally, system commands return a zero status for success and a
non-zero status for failure.  \f(CW\*(C`IPC::System::Simple\*(C'\fR will default to throwing
an exception if a non-zero exit value is returned.
.PP
You may specify a range of values which are considered acceptable exit
values by passing an \fIarray reference\fR as the first argument.  The
special constant \f(CW\*(C`EXIT_ANY\*(C'\fR can be used to allow \fIany\fR exit value
to be returned.
.PP
.Vb 1
\&        use IPC::System::Simple qw(run system capture EXIT_ANY);
\&
\&        run( [0..5], "cat *.txt");             # Exit values 0\-5 are OK
\&
\&        system( [0..5], "cat *.txt");          # This works the same way
\&
\&        my @lines = capture( EXIT_ANY, "cat *.txt"); # Any exit is fine.
.Ve
.PP
The \f(CW\*(C`run\*(C'\fR and replacement \f(CW\*(C`system\*(C'\fR subroutines returns the exit
value of the process:
.PP
.Vb 1
\&        my $exit_value = run( [0..5], "cat *.txt");
\&
\&        # OR:
\&
\&        my $exit_value = system( [0..5] "cat *.txt");
\&
\&        print "Program exited with value $exit_value\en";
.Ve
.PP
\fI\f(CI$EXITVAL\fI\fR
.IX Subsection "$EXITVAL"
.PP
The exit value of any command executed by \f(CW\*(C`IPC::System::Simple\*(C'\fR
can always be retrieved from the \f(CW$IPC::System::Simple::EXITVAL\fR
variable:
.PP
This is particularly useful when inspecting results from \f(CW\*(C`capture\*(C'\fR,
which returns the captured text from the command.
.PP
.Vb 1
\&        use IPC::System::Simple qw(capture $EXITVAL EXIT_ANY);
\&
\&        my @enemies_defeated = capture(EXIT_ANY, "defeat_evil", "/dev/mordor");
\&
\&        print "Program exited with value $EXITVAL\en";
.Ve
.PP
\&\f(CW$EXITVAL\fR will be set to \f(CW\*(C`\-1\*(C'\fR if the command did not exit normally (eg,
being terminated by a signal) or did not start.  In this situation an
exception will also be thrown.
.SS "WINDOWS-SPECIFIC \s-1NOTES\s0"
.IX Subsection "WINDOWS-SPECIFIC NOTES"
The \f(CW\*(C`run\*(C'\fR subroutine make available the full 32\-bit exit value on
Win32 systems. This has been true since \f(CW\*(C`IPC::System::Simple\*(C'\fR v0.06
when called with multiple arguments, and since v1.25 when called with
a single argument.  This is different from the previous versions of
\&\f(CW\*(C`IPC::System::Simple\*(C'\fR and from Perl's in-build \f(CW\*(C`system()\*(C'\fR function,
which can only handle 8\-bit return values.
.PP
The \f(CW\*(C`capture\*(C'\fR subroutine always returns the 32\-bit exit value under
Windows.  The \f(CW\*(C`capture\*(C'\fR subroutine also never uses the shell,
even when passed a single argument.
.PP
The \f(CW\*(C`run\*(C'\fR subroutine always uses a shell when passed a single
argument. On \s-1NT\s0 systems, it uses \f(CW\*(C`cmd.exe\*(C'\fR in the system root, and on
non-NT systems it uses \f(CW\*(C`command.com\*(C'\fR in the system root.
.PP
As of \f(CW\*(C`IPC::System::Simple\*(C'\fR v1.25, the \f(CW\*(C`runx\*(C'\fR and \f(CW\*(C`capturex\*(C'\fR
subroutines, as well as multiple-argument calls to the \f(CW\*(C`run\*(C'\fR and
\&\f(CW\*(C`capture\*(C'\fR subroutines, have their arguments properly quoted, so that
arugments with spaces and the like work properly. Unfortunately, this
breaks any attempt to invoke the shell itself. If you really need to
execute \f(CW\*(C`cmd.exe\*(C'\fR or \f(CW\*(C`command.com\*(C'\fR, use the single-argument form.
For single-argument calls to \f(CW\*(C`run\*(C'\fR and \f(CW\*(C`capture\*(C'\fR, the argument must
be properly shell-quoted in advance of the call.
.PP
Versions of \f(CW\*(C`IPC::System::Simple\*(C'\fR before v0.09 would not search
the \f(CW\*(C`PATH\*(C'\fR environment variable when the multi-argument form of
\&\f(CW\*(C`run()\*(C'\fR was called.  Versions from v0.09 onwards correctly search
the path provided the command is provided including the extension
(eg, \f(CW\*(C`notepad.exe\*(C'\fR rather than just \f(CW\*(C`notepad\*(C'\fR, or \f(CW\*(C`gvim.bat\*(C'\fR rather
than just \f(CW\*(C`gvim\*(C'\fR).  If no extension is provided, \f(CW\*(C`.exe\*(C'\fR is
assumed.
.PP
Signals are not supported on Windows systems.  Sending a signal
to a Windows process will usually cause it to exit with the signal
number used.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """%s"" failed to start: ""%s""" 4
.el .IP "``%s'' failed to start: ``%s''" 4
.IX Item "%s failed to start: %s"
The command specified did not even start.  It may not exist, or
you may not have permission to use it.  The reason it could not
start (as determined from \f(CW$!\fR) will be provided.
.ie n .IP """%s"" unexpectedly returned exit value %d" 4
.el .IP "``%s'' unexpectedly returned exit value \f(CW%d\fR" 4
.IX Item "%s unexpectedly returned exit value %d"
The command ran successfully, but returned an exit value we did
not expect.  The value returned is reported.
.ie n .IP """%s"" died to signal ""%s"" (%d) %s" 4
.el .IP "``%s'' died to signal ``%s'' (%d) \f(CW%s\fR" 4
.IX Item "%s died to signal %s (%d) %s"
The command was killed by a signal.  The name of the signal
will be reported, or \f(CW\*(C`UNKNOWN\*(C'\fR if it cannot be determined.  The
signal number is always reported.  If we detected that the
process dumped core, then the string \f(CW\*(C`and dumped core\*(C'\fR is
appended.
.IP "IPC::System::Simple::%s called with no arguments" 4
.IX Item "IPC::System::Simple::%s called with no arguments"
You attempted to call \f(CW\*(C`run\*(C'\fR or \f(CW\*(C`capture\*(C'\fR but did not provide any
arguments at all.  At the very lease you need to supply a command
to run.
.IP "IPC::System::Simple::%s called with no command" 4
.IX Item "IPC::System::Simple::%s called with no command"
You called \f(CW\*(C`run\*(C'\fR or \f(CW\*(C`capture\*(C'\fR with a list of acceptable exit values,
but no actual command.
.ie n .IP "IPC::System::Simple::%s called with tainted argument ""%s""" 4
.el .IP "IPC::System::Simple::%s called with tainted argument ``%s''" 4
.IX Item "IPC::System::Simple::%s called with tainted argument %s"
You called \f(CW\*(C`run\*(C'\fR or \f(CW\*(C`capture\*(C'\fR with tainted (untrusted) arguments, which is
almost certainly a bad idea.  To untaint your arguments you'll need to pass
your data through a regular expression and use the resulting match variables.
See \*(L"Laundering and Detecting Tainted Data\*(R" in perlsec for more information.
.ie n .IP "IPC::System::Simple::%s called with tainted environment $ENV{%s}" 4
.el .IP "IPC::System::Simple::%s called with tainted environment \f(CW$ENV\fR{%s}" 4
.IX Item "IPC::System::Simple::%s called with tainted environment $ENV{%s}"
You called \f(CW\*(C`run\*(C'\fR or \f(CW\*(C`capture\*(C'\fR but part of your environment was tainted
(untrusted).  You should either delete the named environment
variable before calling \f(CW\*(C`run\*(C'\fR, or set it to an untainted value
(usually one set inside your program).  See
\&\*(L"Cleaning Up Your Path\*(R" in perlsec for more information.
.ie n .IP "Error in IPC::System::Simple plumbing: ""%s"" \- ""%s""" 4
.el .IP "Error in IPC::System::Simple plumbing: ``%s'' \- ``%s''" 4
.IX Item "Error in IPC::System::Simple plumbing: %s - %s"
Implementing the \f(CW\*(C`capture\*(C'\fR command involves dark and terrible magicks
involving pipes, and one of them has sprung a leak.  This could be due to a
lack of file descriptors, although there are other possibilities.
.Sp
If you are able to reproduce this error, you are encouraged
to submit a bug report according to the \*(L"Reporting bugs\*(R" section below.
.ie n .IP "Internal error in IPC::System::Simple: ""%s""" 4
.el .IP "Internal error in IPC::System::Simple: ``%s''" 4
.IX Item "Internal error in IPC::System::Simple: %s"
You've found a bug in \f(CW\*(C`IPC::System::Simple\*(C'\fR.  Please check to
see if an updated version of \f(CW\*(C`IPC::System::Simple\*(C'\fR is available.
If not, please file a bug report according to the \*(L"Reporting bugs\*(R" section
below.
.IP "IPC::System::Simple::%s called with undefined command" 4
.IX Item "IPC::System::Simple::%s called with undefined command"
You've passed the undefined value as a command to be executed.
While this is a very Zen-like action, it's not supported by
Perl's current implementation.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This module depends upon Win32::Process when used on Win32
system.  \f(CW\*(C`Win32::Process\*(C'\fR is bundled as a core module in ActivePerl 5.6
and above.
.PP
There are no non-core dependencies on non\-Win32 systems.
.SH "COMPARISON TO OTHER APIs"
.IX Header "COMPARISON TO OTHER APIs"
Perl provides a range of in-built functions for handling external
commands, and \s-1CPAN\s0 provides even more.  The \f(CW\*(C`IPC::System::Simple\*(C'\fR
differentiates itself from other options by providing:
.IP "Extremely detailed diagnostics" 4
.IX Item "Extremely detailed diagnostics"
The diagnostics produced by \f(CW\*(C`IPC::System::Simple\*(C'\fR are designed
to provide as much information as possible.  Rather than requiring
the developer to inspect \f(CW$?\fR, \f(CW\*(C`IPC::System::Simple\*(C'\fR does the
hard work for you.
.Sp
If an odd exit status is provided, you're informed of what it is.  If a
signal kills your process, you are informed of both its name and number.
If tainted data or environment prevents your command from running, you
are informed of exactly which data or environmental variable is
tainted.
.IP "Exceptions on failure" 4
.IX Item "Exceptions on failure"
\&\f(CW\*(C`IPC::System::Simple\*(C'\fR takes an aggressive approach to error handling.
Rather than allow commands to fail silently, exceptions are thrown
when unexpected results are seen.  This allows for easy development
using a try/catch style, and avoids the possibility of accidentally
continuing after a failed command.
.IP "Easy access to exit status" 4
.IX Item "Easy access to exit status"
The \f(CW\*(C`run\*(C'\fR, \f(CW\*(C`system\*(C'\fR and \f(CW\*(C`capture\*(C'\fR commands all set \f(CW$EXITVAL\fR,
making it easy to determine the exit status of a command.
Additionally, the \f(CW\*(C`system\*(C'\fR and \f(CW\*(C`run\*(C'\fR interfaces return the exit
status.
.IP "Consistent interfaces" 4
.IX Item "Consistent interfaces"
When called with multiple arguments, the \f(CW\*(C`run\*(C'\fR, \f(CW\*(C`system\*(C'\fR and
\&\f(CW\*(C`capture\*(C'\fR interfaces \fInever\fR invoke the shell.  This differs
from the in-built Perl \f(CW\*(C`system\*(C'\fR command which may invoke the
shell under Windows when called with multiple arguments.  It
differs from the in-built Perl backticks operator which always
invokes the shell.
.SH "BUGS"
.IX Header "BUGS"
When \f(CW\*(C`system\*(C'\fR is exported, the exotic form \f(CW\*(C`system { $cmd } @args\*(C'\fR
is not supported.  Attemping to use the exotic form is a syntax
error.  This affects the calling package \fIonly\fR.  Use \f(CW\*(C`CORE::system\*(C'\fR
if you need it, or consider using the autodie module to replace
\&\f(CW\*(C`system\*(C'\fR with lexical scope.
.PP
Core dumps are only checked for when a process dies due to a
signal.  It is not believed there are any systems where processes
can dump core without dying to a signal.
.PP
\&\f(CW\*(C`WIFSTOPPED\*(C'\fR status is not checked, as perl never spawns processes
with the \f(CW\*(C`WUNTRACED\*(C'\fR option.
.PP
Signals are not supported under Win32 systems, since they don't
work at all like Unix signals.  Win32 signals cause commands to
exit with a given exit value, which this modules \fIdoes\fR capture.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Before reporting a bug, please check to ensure you are using the
most recent version of \f(CW\*(C`IPC::System::Simple\*(C'\fR.  Your problem may
have already been fixed in a new release.
.PP
You can find the \f(CW\*(C`IPC::System::Simple\*(C'\fR bug-tracker at
<http://rt.cpan.org/Public/Dist/Display.html?Name=IPC\-System\-Simple> .
Please check to see if your bug has already been reported; if
in doubt, report yours anyway.
.PP
Submitting a patch and/or failing test case will greatly expedite
the fixing of bugs.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
If you find this module useful, please consider rating it on the
\&\s-1CPAN\s0 Ratings service at
<http://cpanratings.perl.org/rate/?distribution=IPC\-System\-Simple> .
.PP
The module author loves to hear how \f(CW\*(C`IPC::System::Simple\*(C'\fR has made
your life better (or worse).  Feedback can be sent to
<pjf@perltraining.com.au>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
autodie uses \f(CW\*(C`IPC::System::Simple\*(C'\fR to provide succeed-or-die
replacements to \f(CW\*(C`system\*(C'\fR (and other built-ins) with lexical scope.
.PP
\&\s-1POSIX\s0, IPC::Run::Simple, perlipc, perlport, IPC::Run,
IPC::Run3, Win32::Process
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Fenwick <pjf@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2008 by Paul Fenwick
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.6.0 or,
at your option, any later version of Perl 5 you may have available.
