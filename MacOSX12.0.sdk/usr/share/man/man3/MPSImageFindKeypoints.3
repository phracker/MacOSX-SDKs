.TH "MPSImageFindKeypoints" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSImageFindKeypoints
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSImageKeypoint\&.h>\fP
.PP
Inherits \fBMPSKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:info:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceTexture:regions:numberOfRegions:keypointCountBuffer:keypointCountBufferOffset:keypointDataBuffer:keypointDataBufferOffset:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMPSImageKeypointRangeInfo\fP \fBkeypointRangeInfo\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBMPSImageFindKeypoints\fP kernel is used to find a list of keypoints whose values are >= minimumPixelThresholdValue in \fBMPSImageKeypointRangeInfo\fP\&. The keypoints are generated for a specified region in the image\&. 
.br
 The pixel format of the source image must be MTLPixelFormatR8Unorm\&. 
.SH "Method Documentation"
.PP 
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(nonnull id< MTLTexture >) source(const MTLRegion *__nonnull) regions(NSUInteger) numberOfRegions(nonnull id< MTLBuffer >) keypointCountBuffer(NSUInteger) keypointCountBufferOffset(nonnull id< MTLBuffer >) keypointDataBuffer(NSUInteger) keypointDataBufferOffset"
Encode the filter to a command buffer using a MTLComputeCommandEncoder\&.  The filter will not begin to execute until after the command buffer has been enqueued and committed\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer\&. 
.br
\fIsource\fP \fBA\fP valid MTLTexture containing the source image for the filter\&. 
.br
\fIregions\fP An array of rectangles that describe regions in the image\&. The list of keypoints is generated for each individual rectangle specifed\&. 
.br
\fIkeypointCountBuffer\fP The list of keypoints for each specified region 
.br
\fIkeypointCountBufferOffset\fP Byte offset into keypointCountBufferOffset buffer at which to write the keypoint results\&. Must be a multiple of 32 bytes\&. 
.br
\fIkeypointDataBuffer\fP \fBA\fP valid MTLBuffer to receive the keypoint data results for each rectangle\&. The keypoint data for keypoints in each rectangle are stored consecutively\&. The keypoint data for each rectangle starts at the following offset: MPSImageKeypointRangeInfo\&.maximumKeyPoints * rectangle index 
.br
\fIkeypointDataBufferOffset\fP Byte offset into keypointData buffer at which to write the keypoint results\&. Must be a multiple of 32 bytes\&. 
.RE
.PP

.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use initWithCoder:device instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSKernel\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(const \fBMPSImageKeypointRangeInfo\fP *__nonnull) info"
Specifies information to find keypoints in an image\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device the filter will run on 
.br
\fIinfo\fP Pointer to the \fBMPSImageKeypointRangeInfo\fP struct 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSImageFindKeypoints\fP object or nil, if failure\&. 
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\- keypointRangeInfo\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Return a structure describing the keypoint range info  Returns a \fBMPSImageKeypointRangeInfo\fP structure 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
