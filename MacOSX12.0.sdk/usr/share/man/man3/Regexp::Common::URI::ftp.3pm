.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Regexp::Common::URI::ftp 3"
.TH Regexp::Common::URI::ftp 3 "2017-06-02" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Regexp::Common::URI::ftp \-\- Returns a pattern for FTP URIs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Regexp::Common qw /URI/;
\&
\&    while (<>) {
\&        /$RE{URI}{FTP}/       and  print "Contains an FTP URI.\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .SS "$RE{\s-1URI\s0}{\s-1FTP\s0}{\-type}{\-password};"
.el .SS "\f(CW$RE\fP{\s-1URI\s0}{\s-1FTP\s0}{\-type}{\-password};"
.IX Subsection "$RE{URI}{FTP}{-type}{-password};"
Returns a regex for \s-1FTP\s0 URIs. Note: \s-1FTP\s0 URIs are not formally defined.
\&\s-1RFC 1738\s0 defines \s-1FTP\s0 URLs, but parts of that \s-1RFC\s0 have been obsoleted
by \s-1RFC 2396.\s0 However, the differences between \s-1RFC 1738\s0 and \s-1RFC 2396\s0 
are such that they aren't applicable straightforwardly to \s-1FTP\s0 URIs.
.PP
There are two main problems:
.IP "Passwords." 4
.IX Item "Passwords."
\&\s-1RFC 1738\s0 allowed an optional username and an optional password (separated
by a colon) in the \s-1FTP URL.\s0 Hence, colons were not allowed in either the
username or the password. \s-1RFC 2396\s0 strongly recommends passwords should
not be used in URIs. It does allow for \fIuserinfo\fR instead. This userinfo
part may contain colons, and hence contain more than one colon. The regexp
returned follows the \s-1RFC 2396\s0 specification, unless the \fI{\-password}\fR
option is given; then the regex allows for an optional username and
password, separated by a colon.
.IP "The ;type specifier." 4
.IX Item "The ;type specifier."
\&\s-1RFC 1738\s0 does not allow semi-colons in \s-1FTP\s0 path names, because a semi-colon
is a reserved character for \s-1FTP\s0 URIs. The semi-colon is used to separate
the path from the option \fItype\fR specifier. However, in \s-1RFC 2396,\s0 paths
consist of slash separated segments, and each segment is a semi-colon 
separated group of parameters. Straigthforward application of \s-1RFC 2396\s0
would mean that a trailing \fItype\fR specifier couldn't be distinguished
from the last segment of the path having a two parameters, the last one
starting with \fItype=\fR. Therefore we have opted to disallow a semi-colon
in the path part of an \s-1FTP URI.\s0
.Sp
Furthermore, \s-1RFC 1738\s0 allows three values for the type specifier, \fIA\fR,
\&\fII\fR and \fID\fR (either upper case or lower case). However, the internet
draft about \s-1FTP\s0 URIs \fB[\s-1DRAFT\-FTP\-URL\s0]\fR (which expired in May 1997) notes
the lack of consistent implementation of the \fID\fR parameter and drops \fID\fR
from the set of possible values. We follow this practise; however, \s-1RFC 1738\s0
behaviour can be archieved by using the \fI\-type =\fR \*(L"[ADIadi]\*(R"> parameter.
.PP
\&\s-1FTP\s0 URIs have the following syntax:
.PP
.Vb 2
\&    "ftp:" "//" [ userinfo "@" ] host [ ":" port ]
\&                [ "/" path [ ";type=" value ]]
.Ve
.PP
When using \fI{\-password}\fR, we have the syntax:
.PP
.Vb 2
\&    "ftp:" "//" [ user [ ":" password ] "@" ] host [ ":" port ]
\&                [ "/" path [ ";type=" value ]]
.Ve
.PP
Under \f(CW\*(C`{\-keep}\*(C'\fR, the following are returned:
.ie n .IP "$1" 4
.el .IP "\f(CW$1\fR" 4
.IX Item "$1"
The complete \s-1URI.\s0
.ie n .IP "$2" 4
.el .IP "\f(CW$2\fR" 4
.IX Item "$2"
The scheme.
.ie n .IP "$3" 4
.el .IP "\f(CW$3\fR" 4
.IX Item "$3"
The userinfo, or if \fI{\-password}\fR is used, the username.
.ie n .IP "$4" 4
.el .IP "\f(CW$4\fR" 4
.IX Item "$4"
If \fI{\-password}\fR is used, the password, else \f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$5" 4
.el .IP "\f(CW$5\fR" 4
.IX Item "$5"
The hostname or \s-1IP\s0 address.
.ie n .IP "$6" 4
.el .IP "\f(CW$6\fR" 4
.IX Item "$6"
The port number.
.ie n .IP "$7" 4
.el .IP "\f(CW$7\fR" 4
.IX Item "$7"
The full path and type specification, including the leading slash.
.ie n .IP "$8" 4
.el .IP "\f(CW$8\fR" 4
.IX Item "$8"
The full path and type specification, without the leading slash.
.ie n .IP "$9" 4
.el .IP "\f(CW$9\fR" 4
.IX Item "$9"
The full path, without the type specification nor the leading slash.
.ie n .IP "$10" 4
.el .IP "\f(CW$10\fR" 4
.IX Item "$10"
The value of the type specification.
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\fB[\s-1DRAFT\-URL\-FTP\s0]\fR" 4
.IX Item "[DRAFT-URL-FTP]"
Casey, James: \fIA \s-1FTP URL\s0 Format\fR. November 1996.
.IP "\fB[\s-1RFC 1738\s0]\fR" 4
.IX Item "[RFC 1738]"
Berners-Lee, Tim, Masinter, L., McCahill, M.: \fIUniform Resource
Locators (\s-1URL\s0)\fR. December 1994.
.IP "\fB[\s-1RFC 2396\s0]\fR" 4
.IX Item "[RFC 2396]"
Berners-Lee, Tim, Fielding, R., and Masinter, L.: \fIUniform Resource
Identifiers (\s-1URI\s0): Generic Syntax\fR. August 1998.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Regexp::Common::URI for other supported URIs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Damian Conway (damian@conway.org)
.SH "MAINTENANCE"
.IX Header "MAINTENANCE"
This package is maintained by Abigail (\fIregexp\-common@abigail.be\fR).
.SH "BUGS AND IRRITATIONS"
.IX Header "BUGS AND IRRITATIONS"
Bound to be plenty.
.SH "LICENSE and COPYRIGHT"
.IX Header "LICENSE and COPYRIGHT"
This software is Copyright (c) 2001 \- 2017, Damian Conway and Abigail.
.PP
This module is free software, and maybe used under any of the following
licenses:
.PP
.Vb 4
\& 1) The Perl Artistic License.     See the file COPYRIGHT.AL.
\& 2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
\& 3) The BSD License.               See the file COPYRIGHT.BSD.
\& 4) The MIT License.               See the file COPYRIGHT.MIT.
.Ve
