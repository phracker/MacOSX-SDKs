.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pty 3"
.TH Pty 3 "2020-01-19" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pty \- Pseudo TTY object class
.SH "VERSION"
.IX Header "VERSION"
1.14
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Pty;
\&
\&    $pty = new IO::Pty;
\&
\&    $slave  = $pty\->slave;
\&
\&    foreach $val (1..10) {
\&        print $pty "$val\en";
\&        $_ = <$slave>;
\&        print "$_";
\&    }
\&
\&    close($slave);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pty\*(C'\fR provides an interface to allow the creation of a pseudo tty.
.PP
\&\f(CW\*(C`IO::Pty\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR and so provide all the methods
defined by the \f(CW\*(C`IO::Handle\*(C'\fR package.
.PP
Please note that pty creation is very system-dependent.  If you have
problems, see IO::Tty for help.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 3
.IX Item "new"
The \f(CW\*(C`new\*(C'\fR constructor takes no arguments and returns a new file
object which is the master side of the pseudo tty.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBttyname()\fR" 4
.IX Item "ttyname()"
Returns the name of the slave pseudo tty. On \s-1UNIX\s0 machines this will
be the pathname of the device.  Use this name for informational
purpose only, to get a slave filehandle, use \fBslave()\fR.
.IP "\fBslave()\fR" 4
.IX Item "slave()"
The \f(CW\*(C`slave\*(C'\fR method will return the slave filehandle of the given
master pty, opening it anew if necessary.  If IO::Stty is installed,
you can then call \f(CW\*(C`$slave\->stty()\*(C'\fR to modify the terminal settings.
.IP "\fBclose_slave()\fR" 4
.IX Item "close_slave()"
The slave filehandle will be closed and destroyed.  This is necessary
in the parent after forking to get rid of the open filehandle,
otherwise the parent will not notice if the child exits.  Subsequent
calls of \f(CW\*(C`slave()\*(C'\fR will return a newly opened slave filehandle.
.IP "\fBmake_slave_controlling_terminal()\fR" 4
.IX Item "make_slave_controlling_terminal()"
This will set the slave filehandle as the controlling terminal of the
current process, which will become a session leader, so this should
only be called by a child process after a \fBfork()\fR, e.g. in the callback
to \f(CW\*(C`sync_exec()\*(C'\fR (see Proc::SyncExec).  See the \f(CW\*(C`try\*(C'\fR script
(also \f(CW\*(C`test.pl\*(C'\fR) for an example how to correctly spawn a subprocess.
.IP "\fBset_raw()\fR" 4
.IX Item "set_raw()"
Will set the pty to raw.  Note that this is a one-way operation, you
need IO::Stty to set the terminal settings to anything else.
.Sp
On some systems, the master pty is not a tty.  This method checks for
that and returns success anyway on such systems.  Note that this
method must be called on the slave, and probably should be called on
the master, just to be sure, i.e.
.Sp
.Vb 2
\&  $pty\->slave\->set_raw();
\&  $pty\->set_raw();
.Ve
.IP "clone_winsize_from(\e*FH)" 4
.IX Item "clone_winsize_from(*FH)"
Gets the terminal size from filehandle \s-1FH\s0 (which must be a terminal)
and transfers it to the pty.  Returns true on success and undef on
failure.  Note that this must be called upon the \fIslave\fR, i.e.
.Sp
.Vb 1
\& $pty\->slave\->clone_winsize_from(\e*STDIN);
.Ve
.Sp
On some systems, the master pty also isatty.  I actually have no
idea if setting terminal sizes there is passed through to the slave,
so if this method is called for a master that is not a tty, it
silently returns \s-1OK.\s0
.Sp
See the \f(CW\*(C`try\*(C'\fR script for example code how to propagate \s-1SIGWINCH.\s0
.IP "\fBget_winsize()\fR" 4
.IX Item "get_winsize()"
Returns the terminal size, in a 4\-element list.
.Sp
.Vb 1
\& ($row, $col, $xpixel, $ypixel) = $tty\->get_winsize()
.Ve
.ie n .IP "set_winsize($row, $col, $xpixel, $ypixel)" 4
.el .IP "set_winsize($row, \f(CW$col\fR, \f(CW$xpixel\fR, \f(CW$ypixel\fR)" 4
.IX Item "set_winsize($row, $col, $xpixel, $ypixel)"
Sets the terminal size. If not specified, \f(CW$xpixel\fR and \f(CW$ypixel\fR are set to
0.  As with \f(CW\*(C`clone_winsize_from\*(C'\fR, this must be called upon the \fIslave\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Tty, IO::Tty::Constant, IO::Handle, Expect, Proc::SyncExec
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by 
Tatu Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT\s0 (\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
