.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::InstallPaths 3"
.TH ExtUtils::InstallPaths 3 "2013-10-29" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::InstallPaths \- Build.PL install path logic made easy
.SH "VERSION"
.IX Header "VERSION"
version 0.010
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use ExtUtils::InstallPaths;
\& use ExtUtils::Install \*(Aqinstall\*(Aq;
\& GetOptions(\emy %opt, \*(Aqinstall_base=s\*(Aq, \*(Aqinstall_path=s%\*(Aq, \*(Aqinstalldirs=s\*(Aq, \*(Aqdestdir=s\*(Aq, \*(Aqprefix=s\*(Aq, \*(Aquninst:1\*(Aq, \*(Aqverbose:1\*(Aq);
\& my $paths = ExtUtils::InstallPaths\->new(%opt, dist_name => $dist_name);
\& install($paths\->install_map, $opt{verbose}, 0, $opt{uninst});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make install path resolution as easy as possible.
.PP
When you want to install a module, it needs to figure out where to install things. The nutshell version of how this works is that default installation locations are determined from ExtUtils::Config, and they may be individually overridden by using the \f(CW\*(C`install_path\*(C'\fR attribute. An \f(CW\*(C`install_base\*(C'\fR attribute lets you specify an alternative installation root like \fI/home/foo\fR and \f(CW\*(C`prefix\*(C'\fR does something similar in a rather different (and more complicated) way. \f(CW\*(C`destdir\*(C'\fR lets you specify a temporary installation directory like \fI/tmp/install\fR in case you want to create bundled-up installable packages.
.PP
The following types are supported by default.
.IP "\(bu" 4
lib
.Sp
Usually pure-Perl module files ending in \fI.pm\fR or \fI.pod\fR.
.IP "\(bu" 4
arch
.Sp
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling \s-1XS, \s0Inline, or similar code.
.IP "\(bu" 4
script
.Sp
Programs written in pure Perl.  In order to improve reuse, you may want to make these as small as possible \- put the code into modules whenever possible.
.IP "\(bu" 4
bin
.Sp
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or something.  Pretty rare to see this in a perl distribution, but it happens.
.IP "\(bu" 4
bindoc
.Sp
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually generated from the \s-1POD\s0 in those files.  Under Unix, these are manual pages belonging to the 'man1' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
libdoc
.Sp
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually generated from the \s-1POD\s0 in \fI.pm\fR and \fI.pod\fR files.  Under Unix, these are manual pages belonging to the 'man3' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
binhtml
.Sp
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.IP "\(bu" 4
libhtml
.Sp
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "installdirs"
.IX Subsection "installdirs"
The default destinations for these installable things come from entries in your system's configuration. You can select from three different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR parameter as follows:
.PP
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from ExtUtils::Config:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitescript   installvendorscript
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.PP
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".
.SS "install_base"
.IX Subsection "install_base"
You can also set the whole bunch of installation paths by supplying the \f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux system, you'll install as follows:
.PP
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.SS "prefix"
.IX Subsection "prefix"
This sets a prefix, identical to ExtUtils::MakeMaker's \s-1PREFIX\s0 option. This does something similar to \f(CW\*(C`install_base\*(C'\fR in a much more complicated way.
.SS "\fIconfig()\fP"
.IX Subsection "config()"
The ExtUtils::Config object used for this object.
.SS "verbose"
.IX Subsection "verbose"
The verbosity of ExtUtils::InstallPaths. It defaults to 0
.SS "blib"
.IX Subsection "blib"
The location of the blib directory, it defaults to 'blib'.
.SS "create_packlist"
.IX Subsection "create_packlist"
Together with \f(CW\*(C`module_name\*(C'\fR this controls whether a packlist will be added; it defaults to 1.
.SS "dist_name"
.IX Subsection "dist_name"
The name of the current module.
.SS "module_name"
.IX Subsection "module_name"
The name of the main module of the package. This is required for packlist creation, but in the future it may be replaced by dist_name. It defaults to \f(CW\*(C`dist_name =~ s/\-/::/gr\*(C'\fR if dist_name is set.
.SS "destdir"
.IX Subsection "destdir"
If you want to install everything into a temporary directory first (for instance, if you want to create a directory tree that a package manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can use the \f(CW\*(C`destdir\*(C'\fR parameter. E.g. Setting \f(CW\*(C`destdir\*(C'\fR to \f(CW"/tmp/foo"\fR will effectively install to \*(L"/tmp/foo/$sitelib\*(R", \*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use \f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever platform you're installing on.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Create a new ExtUtils::InstallPaths object. \fBAll attributes are valid arguments\fR to the constructor, as well as this:
.IP "\(bu" 4
install_path
.Sp
This must be a hashref with the type as keys and the destination as values.
.IP "\(bu" 4
install_base_relpaths
.Sp
This must be a hashref with types as keys and a path relative to the install_base as value.
.IP "\(bu" 4
prefix_relpaths
.Sp
This must be a hashref any of these three keys: core, vendor, site. Each of the values mush be a hashref with types as keys and a path relative to the prefix as value. You probably want to make these three hashrefs identical.
.IP "\(bu" 4
original_prefix
.Sp
This must be a hashref with the legal installdirs values as keys and the prefix directories as values.
.IP "\(bu" 4
install_sets
.Sp
This mush be a hashref with the legal installdirs are keys, and the values being hashrefs with types as keys and locations as values.
.SS "\fIinstall_map()\fP"
.IX Subsection "install_map()"
Return a map suitable for use with ExtUtils::Install. \fBIn most cases, this is the only method you'll need\fR.
.SS "install_destination($type)"
.IX Subsection "install_destination($type)"
Returns the destination of a certain type.
.SS "\fIinstall_types()\fP"
.IX Subsection "install_types()"
Return a list of all supported install types in the current configuration.
.SS "is_default_installable($type)"
.IX Subsection "is_default_installable($type)"
Given a file type, will return true if the file type would normally be installed when neither install-base nor prefix has been set.  I.e. it will be true only if the path is set from the configuration object or set explicitly by the user via install_path.
.SS "install_path($type)"
.IX Subsection "install_path($type)"
Gets the install path for a certain type.
.ie n .SS "install_sets($installdirs, $type)"
.el .SS "install_sets($installdirs, \f(CW$type\fP)"
.IX Subsection "install_sets($installdirs, $type)"
Get the path for a certain \f(CW$type\fR with a certain \f(CW$installdirs\fR.
.ie n .SS "install_base_relpaths($type, $relpath)"
.el .SS "install_base_relpaths($type, \f(CW$relpath\fP)"
.IX Subsection "install_base_relpaths($type, $relpath)"
Get the relative paths for use with install_base for a certain type.
.ie n .SS "prefix_relative($installdirs, $type)"
.el .SS "prefix_relative($installdirs, \f(CW$type\fP)"
.IX Subsection "prefix_relative($installdirs, $type)"
Gets the path of a certain \f(CW$type\fR and \f(CW$installdirs\fR relative to the prefix.
.ie n .SS "prefix_relpaths($install_dirs, $type)"
.el .SS "prefix_relpaths($install_dirs, \f(CW$type\fP)"
.IX Subsection "prefix_relpaths($install_dirs, $type)"
Get the default relative path to use in case the config install paths cannot be prefixified. You do not want to use this to get any relative path, but may require it to set it for custom types.
.SS "original_prefix($installdirs)"
.IX Subsection "original_prefix($installdirs)"
Get the original prefix for a certain type of \f(CW$installdirs\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Build.PL spec <http://github.com/dagolden/cpan-api-buildpl/blob/master/lib/CPAN/API/BuildPL.pm>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
