.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Cap 3"
.TH Mail::Cap 3 "2014-01-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Cap \- Parse mailcap files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $mc = new Mail::Cap;
\& $desc = $mc\->description(\*(Aqimage/gif\*(Aq);
\&
\& print "GIF desc: $desc\en";
\& $cmd = $mc\->viewCmd(\*(Aqtext/plain; charset=iso\-8859\-1\*(Aq, \*(Aqfile.txt\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parse mailcap files as specified in "\s-1RFC 1524 \-\-A\s0 User Agent
Configuration Mechanism For Multimedia Mail Format Information>.  In
the description below \f(CW$type\fR refers to the \s-1MIME\s0 type as specified in
the \f(CW\*(C`Content\-Type\*(C'\fR header of mail or \s-1HTTP\s0 messages.  Examples of
types are:
.PP
.Vb 3
\&  image/gif
\&  text/html
\&  text/plain; charset=iso\-8859\-1
.Ve
.PP
You could also take a look at the File::MimeInfo distribution, which
are accessing tables which are used by many applications on a system,
and therefore have succeeded the mail-cap specifications on modern
(\s-1UNIX\s0) systems.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Cap\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "Mail::Cap->new(OPTIONS)"
Create and initialize a new Mail::Cap object.  If you give it an
argument it will try to parse the specified file.  Without any
arguments it will search for the mailcap file using the standard
mailcap path, or the \s-1MAILCAPS\s0 environment variable if it is defined.
.Sp
.Vb 3
\& \-Option  \-\-Default
\&  filename  undef
\&  take      \*(AqFIRST\*(Aq
.Ve
.RS 4
.IP "filename => \s-1FILENAME\s0" 2
.IX Item "filename => FILENAME"
Add the specified file to the list to standard locations.  This file
is tried first.
.IP "take => '\s-1ALL\s0'|'\s-1FIRST\s0'" 2
.IX Item "take => 'ALL'|'FIRST'"
Include all mailcap files you can find.  By default, only the first
file is parsed, however the \s-1RFC\s0 tells us to include \s-1ALL. \s0 To maintain
backwards compatibility, the default only takes the \s-1FIRST.\s0
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\&  $mcap = new Mail::Cap;
\&  $mcap = new Mail::Cap "/mydir/mailcap";
\&  $mcap = new Mail::Cap filename => "/mydir/mailcap";
\&  $mcap = new Mail::Cap take => \*(AqALL\*(Aq;
\&  $mcap = Mail::Cap\->new(take => \*(AqALL\*(Aq);
.Ve
.RE
.SS "Run commands"
.IX Subsection "Run commands"
These methods invoke a suitable program presenting or manipulating the
media object in the specified file.  They all return \f(CW1\fR if a command
was found, and \f(CW0\fR otherwise.  You might test \f(CW$?\fR for the outcome
of the command.
.ie n .IP "$obj\->\fBcompose\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcompose\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->compose(TYPE, FILE)"
.PD 0
.ie n .IP "$obj\->\fBedit\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBedit\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->edit(TYPE, FILE)"
.ie n .IP "$obj\->\fBprint\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->print(TYPE, FILE)"
.ie n .IP "$obj\->\fBview\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBview\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->view(TYPE, FILE)"
.PD
.SS "Command creator"
.IX Subsection "Command creator"
These methods return a string that is suitable for feeding to \fIsystem()\fR
in order to invoke a suitable program presenting or manipulating the
media object in the specified file.  It will return \f(CW\*(C`undef\*(C'\fR if no
suitable specification exists.
.ie n .IP "$obj\->\fBcomposeCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcomposeCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->composeCmd(TYPE, FILE)"
.PD 0
.ie n .IP "$obj\->\fBeditCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBeditCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->editCmd(TYPE, FILE)"
.ie n .IP "$obj\->\fBprintCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBprintCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->printCmd(TYPE, FILE)"
.ie n .IP "$obj\->\fBviewCmd\fR(\s-1TYPE, FILE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBviewCmd\fR(\s-1TYPE, FILE\s0)" 4
.IX Item "$obj->viewCmd(TYPE, FILE)"
.PD
.SS "Look-up definitions"
.IX Subsection "Look-up definitions"
Methods return the corresponding mailcap field for the type.
.ie n .IP "$obj\->\fBdescription\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->description(TYPE)"
.PD 0
.ie n .IP "$obj\->\fBfield\fR(\s-1TYPE, FIELD\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBfield\fR(\s-1TYPE, FIELD\s0)" 4
.IX Item "$obj->field(TYPE, FIELD)"
.PD
Returns the specified field for the type.  Returns undef if no
specification exists.
.ie n .IP "$obj\->\fBnametemplate\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBnametemplate\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->nametemplate(TYPE)"
.PD 0
.ie n .IP "$obj\->\fBtextualnewlines\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtextualnewlines\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->textualnewlines(TYPE)"
.ie n .IP "$obj\->\fBx11_bitmap\fR(\s-1TYPE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBx11_bitmap\fR(\s-1TYPE\s0)" 4
.IX Item "$obj->x11_bitmap(TYPE)"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
