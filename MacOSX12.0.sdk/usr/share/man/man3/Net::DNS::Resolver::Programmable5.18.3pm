.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Resolver::Programmable 3"
.TH Net::DNS::Resolver::Programmable 3 "2021-08-27" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Resolver::Programmable \- programmable DNS resolver class for offline
emulation of DNS
.SH "VERSION"
.IX Header "VERSION"
0.003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::DNS::Resolver::Programmable;
\&    use Net::DNS::RR;
\&    
\&    my $resolver = Net::DNS::Resolver::Programmable\->new(
\&        records         => {
\&            \*(Aqexample.com\*(Aq     => [
\&                Net::DNS::RR\->new(\*(Aqexample.com.     NS  ns.example.org.\*(Aq),
\&                Net::DNS::RR\->new(\*(Aqexample.com.     A   192.168.0.1\*(Aq)
\&            ],
\&            \*(Aqns.example.org\*(Aq  => [
\&                Net::DNS::RR\->new(\*(Aqns.example.org.  A   192.168.1.1\*(Aq)
\&            ]
\&        },
\&        
\&        resolver_code   => sub {
\&            my ($domain, $rr_type, $class) = @_;
\&            ...
\&            return ($result, $aa, @rrs);
\&        }
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::Resolver::Programmable\fR is a \fBNet::DNS::Resolver\fR descendant
class that allows a virtual \s-1DNS\s0 to be emulated instead of querying the real
\&\s-1DNS.  A\s0 set of static \s-1DNS\s0 records may be supplied, or arbitrary code may be
specified as a means for retrieving \s-1DNS\s0 records, or even generating them on the
fly.
.SS "Constructor"
.IX Subsection "Constructor"
The following constructor is provided:
.IP "\fBnew(%options)\fR: returns \fINet::DNS::Resolver::Programmable\fR" 4
.IX Item "new(%options): returns Net::DNS::Resolver::Programmable"
Creates a new programmed \s-1DNS\s0 resolver object.
.Sp
\&\f(CW%options\fR is a list of key/value pairs representing any of the following
options:
.RS 4
.IP "\fBrecords\fR" 4
.IX Item "records"
A reference to a hash of arrays containing a static set of \fINet::DNS::RR\fR
objects.  The hash entries must be indexed by fully qualified domain names
(lower-case, without any trailing dots), and the entries themselves must be
arrays of the \s-1RR\s0 objects pertaining to these domain names.  For example:
.Sp
.Vb 12
\&    records => {
\&        \*(Aqexample.com\*(Aq     => [
\&            Net::DNS::RR\->new(\*(Aqexample.com.     NS  ns.example.org.\*(Aq),
\&            Net::DNS::RR\->new(\*(Aqexample.com.     A   192.168.0.1\*(Aq)
\&        ],
\&        \*(Aqwww.example.com\*(Aq => [
\&            Net::DNS::RR\->new(\*(Aqwww.example.com. A   192.168.0.2\*(Aq)
\&        ],
\&        \*(Aqns.example.org\*(Aq  => [
\&            Net::DNS::RR\->new(\*(Aqns.example.org.  A   192.168.1.1\*(Aq)
\&        ]
\&    }
.Ve
.Sp
If this option is specified, the resolver retrieves requested RRs from this
data structure.
.IP "\fBresolver_code\fR" 4
.IX Item "resolver_code"
A code reference used as a call-back for dynamically retrieving requested RRs.
.Sp
The code must take the following query parameters as arguments: the \fIdomain\fR,
\&\fI\s-1RR\s0 type\fR, and \fIclass\fR.
.Sp
It must return a list composed of: the response's \fI\s-1RCODE\s0\fR (by name, as
returned by Net::DNS::Header\->rcode), the
\&\fI\f(CI\*(C`aa\*(C'\fI (authoritative answer) flag\fR (\fIboolean\fR, use \fBundef\fR if you don't
care), and the \fINet::DNS::RR answer objects\fR.  If an error string is returned
instead of a valid \s-1RCODE,\s0 a \fINet::DNS::Packet\fR object is not constructed but
an error condition for the resolver is signaled instead.
.Sp
For example:
.Sp
.Vb 5
\&    resolver_code => sub {
\&        my ($domain, $rr_type, $class) = @_;
\&        ...
\&        return ($result, $aa, @rrs);
\&    }
.Ve
.Sp
If both this and the \f(CW\*(C`records\*(C'\fR option are specified, then statically
programmed records are used in addition to any that are returned by the
configured resolver code.
.IP "\fBdefnames\fR" 4
.IX Item "defnames"
.PD 0
.IP "\fBdnsrch\fR" 4
.IX Item "dnsrch"
.IP "\fBdomain\fR" 4
.IX Item "domain"
.IP "\fBsearchlist\fR" 4
.IX Item "searchlist"
.IP "\fBdebug\fR" 4
.IX Item "debug"
.PD
These Net::DNS::Resolver options are also meaningful with
Net::DNS::Resolver::Programmable.  See Net::DNS::Resolver for their
descriptions.
.RE
.RS 4
.RE
.SS "Instance methods"
.IX Subsection "Instance methods"
The following instance methods of \fINet::DNS::Resolver\fR are also supported by
\&\fINet::DNS::Resolver::Programmable\fR:
.IP "\fBsearch\fR: returns \fINet::DNS::Packet\fR" 4
.IX Item "search: returns Net::DNS::Packet"
.PD 0
.IP "\fBquery\fR: returns \fINet::DNS::Packet\fR" 4
.IX Item "query: returns Net::DNS::Packet"
.IP "\fBsend\fR: returns \fINet::DNS::Packet\fR" 4
.IX Item "send: returns Net::DNS::Packet"
.PD
Performs an offline \s-1DNS\s0 query, using the statically programmed \s-1DNS\s0 RRs and/or
the configured dynamic resolver code.  See the \*(L"new\*(R" constructor's \f(CW\*(C`records\*(C'\fR
and \f(CW\*(C`resolver_code\*(C'\fR options.  See the descriptions of search, query, and
send for details about the calling syntax of these
methods.
.IP "\fBprint\fR" 4
.IX Item "print"
.PD 0
.IP "\fBstring\fR: returns \fIstring\fR" 4
.IX Item "string: returns string"
.IP "\fBsearchlist\fR: returns \fIlist\fR of \fIstring\fR" 4
.IX Item "searchlist: returns list of string"
.IP "\fBdefnames\fR: returns \fIboolean\fR" 4
.IX Item "defnames: returns boolean"
.IP "\fBdnsrch\fR: returns \fIboolean\fR" 4
.IX Item "dnsrch: returns boolean"
.IP "\fBdebug\fR: returns \fIboolean\fR" 4
.IX Item "debug: returns boolean"
.IP "\fBerrorstring\fR: returns \fIstring\fR" 4
.IX Item "errorstring: returns string"
.IP "\fBanswerfrom\fR: returns \fIstring\fR" 4
.IX Item "answerfrom: returns string"
.IP "\fBanswersize\fR: returns \fIinteger\fR" 4
.IX Item "answersize: returns integer"
.PD
See \*(L"\s-1METHODS\*(R"\s0 in Net::DNS::Resolver.
.PP
Currently the following methods of \fINet::DNS::Resolver\fR are \fBnot\fR supported:
\&\fBaxfr\fR, \fBaxfr_start\fR, \fBaxfr_next\fR, \fBnameservers\fR, \fBport\fR, \fBsrcport\fR,
\&\fBsrcaddr\fR, \fBbgsend\fR, \fBbgread\fR, \fBbgisready\fR, \fBtsig\fR, \fBretrans\fR, \fBretry\fR,
\&\fBrecurse\fR, \fBusevc\fR, \fBtcp_timeout\fR, \fBudp_timeout\fR, \fBpersistent_tcp\fR,
\&\fBpersistent_udp\fR, \fBigntc\fR, \fBdnssec\fR, \fBcdflag\fR, \fBudppacketsize\fR.
The effects of using these on \fINet::DNS::Resolver::Programmable\fR objects are
undefined.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DNS::Resolver
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Net::DNS::Resolver::Programmable.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>
