.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::FAQ 3"
.TH Module::Install::FAQ 3 "2017-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Install::FAQ \- Frequently Asked Questions for Module::Install
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Though Module::Install itself has a general \s-1FAQ\s0 section in the
pod, it's more for advocacy. Here's an incomplete and growing list of
the actual questions I have been frequently asked (or found on the
net) about Module::Install.
.SS "Do I also have to update my \s-1CPAN\s0 modules every time Module::Install is updated?"
.IX Subsection "Do I also have to update my CPAN modules every time Module::Install is updated?"
The point of Module::Install is let module authors take care of
everything related to updating toolchains for the sake of module
users. So, if you choose to use Module::Install, it's you who
should update toolchains, i.e. Module::Install and other bundled
modules. You should check if there's any significant change/fix in
your toolchains. You should check if your toolchains go along with
other tools users use to install your distributions, or with
the systems users are in, or whatever that matters. In the end,
you are expected to have much more knowledge and willingness than
average users.
.PP
That being said, practically, you don't have to update your
distributions if they are working well. But if you do find issues,
please update your distributions, even when you have nothing to
change in your own modules. Module::Install is not only a tool to
write better, but also a tool to encourage you to help others.
.SS "Do I really have to avoid \fBauto_install()\fP?"
.IX Subsection "Do I really have to avoid auto_install()?"
Not at all, \fBusing \f(CB\*(C`auto_install()\*(C'\fB is just fine\fR. While it indeed
behaved erratically in older Module::Install versions, there have
been no reported issues since mid\-2009. As far as compatibility with
various \s-1CPAN\s0 clients: several rather large projects on \s-1CPAN\s0 (including
Catalyst and DBIx::Class), are using \f(CW\*(C`auto_install\*(C'\fR without any
issues reported by their substantial userbases.
.PP
That said, if all you want to do is make it easy for a contributor to
checkout your code and quickly install necessary dependencies, there
are alternatives to \f(CW\*(C`auto_install\*(C'\fR.
.PP
If your \s-1CPAN\s0 module is new enough, you can pass a dot to the
\&\fBcpan\fR command it provides, and it will install all the required
distributions from the \s-1CPAN:\s0
.PP
.Vb 1
\&  $ cpan .
.Ve
.PP
The same is true for the \fBcpanm\fR command from App::cpanminus,
with which you even can write like \f(CW\*(C`cpanm \-\-installdeps .\*(C'\fR
.ie n .SS "Should I put an ""inc"" directory Module::Install automatically creates into a repository for my projects?"
.el .SS "Should I put an ``inc'' directory Module::Install automatically creates into a repository for my projects?"
.IX Subsection "Should I put an inc directory Module::Install automatically creates into a repository for my projects?"
Depends. If the repository is private and only for you, you usually
don't want to put it in your repository to let you always use the
latest Module::Install you have (the \f(CW\*(C`inc\*(C'\fR directory is recreated
each time you run \f(CW\*(C`perl Makefile.PL\*(C'\fR).
.PP
If not, but you alone are the release manager and know what you have
to do when you release, putting the \f(CW\*(C`inc\*(C'\fR directory into your
repository may help other casual contributors, especially if you use
minor (or private) non-core extensions in your Makefile.PL.
.PP
However, if you generously allow other people to release, or you're
not so familiar with how Module::Install works and don't know what
you have to do in the above situation, \fBdon't\fR put it in the
repository. It may be the cause of troubles including a wrong version
in the \f(CW\*(C`META.yml\*(C'\fR.
.PP
If you feel sorry about the inconvenience for your fellow
contributors, you may want to add explicitly \f(CW\*(C`use
Module::Install::<ExtensionYouWantToUse>;\*(C'\fR after \f(CW\*(C`use
inc::Module::Install;\*(C'\fR in your Makefile.PL. It doesn't do any harm,
and it makes clear which extensions they need to install.
.ie n .SS "What're there in the ""inc"" directory?"
.el .SS "What're there in the ``inc'' directory?"
.IX Subsection "What're there in the inc directory?"
Module::Install puts its components (sometimes with extra modules)
under the \f(CW\*(C`inc\*(C'\fR directory to be released with a distribution.
Those modules will not be installed into your system, unless
explicitly copied into somewhere. They are only used to help
configuration, tests, and/or installation.
.PP
If there's no \f(CW\*(C`inc\*(C'\fR directory, Module::Install will automatically
create it when you run \f(CW\*(C`perl Makefile.PL\*(C'\fR. And if that happens,
a directory (as of this writing, \f(CW\*(C`.author\*(C'\fR) will also be created
under the \f(CW\*(C`inc\*(C'\fR directory. If the \f(CW\*(C`.author\*(C'\fR directory exists,
the \f(CW\*(C`inc\*(C'\fR directory will be recreated each time you run \f(CW\*(C`perl
Makefile.PL\*(C'\fR to make sure everything you need is included and
up-to-date. This \f(CW\*(C`.author\*(C'\fR directory will not be included in
a distribution.
.ie n .SS """perl Makefile.PL"" doesn't work or does a strange behavior for me. Why?"
.el .SS "``perl Makefile.PL'' doesn't work or does a strange behavior for me. Why?"
.IX Subsection "perl Makefile.PL doesn't work or does a strange behavior for me. Why?"
Module::Install uses an Autoloader magic to delegate command
handling to the extensions in the \f(CW\*(C`inc\*(C'\fR directory. This works while
everything is in order, but when it finds something it can't
understands, it dies with a compile error, or does what you don't
expect.
.PP
To prevent the latter strange behavior, Module::Install 0.96 and
above dies when it tries to process unknown commands. In most cases
(other than typos), these unknown commands are from non-core extensions
on the \s-1CPAN,\s0 and they should hopefully have predictable names
that you can easily tell from which extension they come, though some
may be a bit hard to find.
.PP
If you are trying to contribute to some project, and having a trouble
to run \f(CW\*(C`Makefile.PL\*(C'\fR, please contact the author of the project to
learn what you have to install. If the distribution is already on the
\&\s-1CPAN,\s0 you may also want to look into the \s-1MANIFEST\s0 file to see which
extensions are included in the \f(CW\*(C`inc\*(C'\fR directory before you ask.
.PP
This usually does not happen in the user land as distributions that
use Module::Install should have all the necessary extensions under
the \f(CW\*(C`inc\*(C'\fR directory. If this should happen, that's most probably
because the release manager shipped the distribution under a
non-author mode. Please contact the author to fix the issue.
.SS "Why can't I do <anything> with Module::Install that I can do with ExtUtils::MakeMaker?"
.IX Subsection "Why can't I do <anything> with Module::Install that I can do with ExtUtils::MakeMaker?"
Module::Install is just a wrapper of ExtUtils::MakeMaker. You
can do almost everything you can do with ExtUtils::MakeMaker by
passing arbitrary attributes to ExtUtils::MakeMaker in the backend
via \f(CW\*(C`makemaker_args\*(C'\fR like this:
.PP
.Vb 1
\&  use inc::Module::Install;
\&  
\&  all_from \*(Aqlib/Foo/Bar.pm\*(Aq;
\&  
\&  makemaker_args(
\&    dist => { PREOP => \*(Aq...\*(Aq },
\&    PL_FILES => {\*(Aqbin/foobar.PL\*(Aq => \*(Aqbin/foobar\*(Aq},
\&  );
\&  WriteAll;
.Ve
.PP
However, by the singleton nature of Module::Install, it may fail
to process Makefile.PLs in subdirectories correctly now, and you may
need to override attributes explicitly in some cases where
Module::Install provides other default values than
ExtUtils::MakeMaker does. Please see also the
ExtUtils::MakeMaker's pod for further instructions.
.SS "I added MyMakefile.PL to my distribution, but it doesn't work as I expected. Why?"
.IX Subsection "I added MyMakefile.PL to my distribution, but it doesn't work as I expected. Why?"
ExtUtils::MakeMaker (and Module::Build also) treats
\&\f(CW\*(C`*.PL\*(C'\fR files in the top level directory as something special
to generate other files. So, if you add something that has
\&\f(CW\*(C`.PL\*(C'\fR extension like \f(CW\*(C`MyMakefile.PL\*(C'\fR in the top level
directory, it also runs automatically when you run Makefile.PL.
.PP
If you don't like this behavior, use \f(CW\*(C`makemaker_args\*(C'\fR to pass
an anonymous hash to \f(CW\*(C`PL_FILES\*(C'\fR.
.PP
.Vb 1
\&  makemaker_args(PL_FILES => {});
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kenichi Ishigaki <ishigaki@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010 Kenichi Ishigaki.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
