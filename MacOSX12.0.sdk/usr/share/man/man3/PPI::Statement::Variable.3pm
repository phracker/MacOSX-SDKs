.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Statement::Variable 3"
.TH PPI::Statement::Variable 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Statement::Variable \- Variable declaration statements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # All of the following are variable declarations
\&  my $foo = 1;
\&  my ($foo, $bar) = (1, 2);
\&  our $foo = 1;
\&  local $foo;
\&  local $foo = 1;
\&  LABEL: my $foo = 1;
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 5
\&  PPI::Statement::Variable
\&  isa PPI::Statement::Expression
\&      isa PPI::Statement
\&          isa PPI::Node
\&              isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The main intent of the \f(CW\*(C`PPI::Statement::Variable\*(C'\fR class is to describe
simple statements that explicitly declare new local or global variables.
.PP
Note that this does not make it exclusively the only place where variables
are defined, and later on you should expect that the \f(CW\*(C`variables\*(C'\fR method
will migrate deeper down the tree to either PPI::Statement or
PPI::Node to recognise this fact, but for now it stays here.
.SH "METHODS"
.IX Header "METHODS"
.SS "type"
.IX Subsection "type"
The \f(CW\*(C`type\*(C'\fR method checks and returns the declaration type of the statement,
which will be one of 'my', 'local', 'our', or 'state'.
.PP
Returns a string of the type, or \f(CW\*(C`undef\*(C'\fR if the type cannot be detected
(which is probably a bug).
.SS "variables"
.IX Subsection "variables"
As for several other \s-1PDOM\s0 Element types that can declare variables, the
\&\f(CW\*(C`variables\*(C'\fR method returns a list of the canonical forms of the variables
defined by the statement.
.PP
Returns a list of the canonical string forms of variables, or the null list
if it is unable to find any variables.
.SS "symbols"
.IX Subsection "symbols"
Returns a list of the variables defined by the statement, as
PPI::Token::Symbols.
.SH "TO DO"
.IX Header "TO DO"
\&\- Write unit tests for this
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
