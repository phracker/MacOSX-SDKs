.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PAR::StrippedPARL::Base 3"
.TH PAR::StrippedPARL::Base 3 "2020-03-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PAR::StrippedPARL::Base \- Base class for the PARL data packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Please use one of the siblings of this class instead.
\&  use base \*(AqPAR::StrippedPARL::Base\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is internal to \s-1PAR.\s0 Do not use it outside of \s-1PAR.\s0
.PP
This class is basically just a container for a static binary \s-1PAR\s0 loader
which doesn't include the \s-1PAR\s0 code like the \fIparl\fR or \fIparl.exe\fR
you are used to. If you're really curious, I'll tell you it is
just a copy of the \fImyldr/static\fR (or \fImyldr/static.exe\fR) file.
.PP
The data is appended during the \f(CW\*(C`make\*(C'\fR phase of the \s-1PAR\s0 build process.
.PP
If the binary data isn't appended during the build process, the two class
methods will return the empty list.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "write_parl"
.IX Subsection "write_parl"
Takes a file name as argument. Writes the raw binary data in
the package to the specified file and embeds the core modules
to produce a complete \s-1PAR\s0 loader (\fIparl\fR).
.PP
Returns true on success or the empty list on failure.
.SS "get_raw"
.IX Subsection "get_raw"
Returns the binary data attached to the data package.
.PP
Returns the empty list on failure.
.SS "write_raw"
.IX Subsection "write_raw"
Takes a file name as argument and writes the binary data to the file.
.PP
Returns true on success and the empty list on failure.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Subclasses need to implement the \f(CW\*(C`_data_pos\*(C'\fR class method which returns
the value of \f(CW\*(C`tell DATA\*(C'\fR as it was after the class was loaded.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steffen Mueller <smueller@cpan.org>,
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2006\-2009 by Steffen Mueller <smueller@cpan.org>.
.PP
This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.PP
See \fI\s-1LICENSE\s0\fR.
