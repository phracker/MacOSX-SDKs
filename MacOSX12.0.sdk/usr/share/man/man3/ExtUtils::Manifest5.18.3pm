.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Manifest 3pm"
.TH ExtUtils::Manifest 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Manifest \- utilities to write and check a MANIFEST file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use ExtUtils::Manifest qw(...funcs to import...);
\&
\&    mkmanifest();
\&
\&    my @missing_files    = manicheck;
\&    my @skipped          = skipcheck;
\&    my @extra_files      = filecheck;
\&    my($missing, $extra) = fullcheck;
\&
\&    my $found    = manifind();
\&
\&    my $manifest = maniread();
\&
\&    manicopy($read,$target);
\&
\&    maniadd({$file => $comment, ...});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Functions"
.IX Subsection "Functions"
ExtUtils::Manifest exports no functions by default.  The following are
exported on request
.IP "mkmanifest" 4
.IX Item "mkmanifest"
.Vb 1
\&    mkmanifest();
.Ve
.Sp
Writes all files in and below the current directory to your \fI\s-1MANIFEST\s0\fR.
It works similar to the result of the Unix command
.Sp
.Vb 1
\&    find . > MANIFEST
.Ve
.Sp
All files that match any regular expression in a file \fI\s-1MANIFEST.SKIP\s0\fR
(if it exists) are ignored.
.Sp
Any existing \fI\s-1MANIFEST\s0\fR file will be saved as \fI\s-1MANIFEST\s0.bak\fR.
.IP "manifind" 4
.IX Item "manifind"
.Vb 1
\&    my $found = manifind();
.Ve
.Sp
returns a hash reference. The keys of the hash are the files found
below the current directory.
.IP "manicheck" 4
.IX Item "manicheck"
.Vb 1
\&    my @missing_files = manicheck();
.Ve
.Sp
checks if all the files within a \f(CW\*(C`MANIFEST\*(C'\fR in the current directory
really do exist. If \f(CW\*(C`MANIFEST\*(C'\fR and the tree below the current
directory are in sync it silently returns an empty list.
Otherwise it returns a list of files which are listed in the
\&\f(CW\*(C`MANIFEST\*(C'\fR but missing from the directory, and by default also
outputs these names to \s-1STDERR.\s0
.IP "filecheck" 4
.IX Item "filecheck"
.Vb 1
\&    my @extra_files = filecheck();
.Ve
.Sp
finds files below the current directory that are not mentioned in the
\&\f(CW\*(C`MANIFEST\*(C'\fR file. An optional file \f(CW\*(C`MANIFEST.SKIP\*(C'\fR will be
consulted. Any file matching a regular expression in such a file will
not be reported as missing in the \f(CW\*(C`MANIFEST\*(C'\fR file. The list of any
extraneous files found is returned, and by default also reported to
\&\s-1STDERR.\s0
.IP "fullcheck" 4
.IX Item "fullcheck"
.Vb 1
\&    my($missing, $extra) = fullcheck();
.Ve
.Sp
does both a \fImanicheck()\fR and a \fIfilecheck()\fR, returning then as two array
refs.
.IP "skipcheck" 4
.IX Item "skipcheck"
.Vb 1
\&    my @skipped = skipcheck();
.Ve
.Sp
lists all the files that are skipped due to your \f(CW\*(C`MANIFEST.SKIP\*(C'\fR
file.
.IP "maniread" 4
.IX Item "maniread"
.Vb 2
\&    my $manifest = maniread();
\&    my $manifest = maniread($manifest_file);
.Ve
.Sp
reads a named \f(CW\*(C`MANIFEST\*(C'\fR file (defaults to \f(CW\*(C`MANIFEST\*(C'\fR in the current
directory) and returns a \s-1HASH\s0 reference with files being the keys and
comments being the values of the \s-1HASH. \s0 Blank lines and lines which
start with \f(CW\*(C`#\*(C'\fR in the \f(CW\*(C`MANIFEST\*(C'\fR file are discarded.
.IP "maniskip" 4
.IX Item "maniskip"
.Vb 2
\&    my $skipchk = maniskip();
\&    my $skipchk = maniskip($manifest_skip_file);
\&
\&    if ($skipchk\->($file)) { .. }
.Ve
.Sp
reads a named \f(CW\*(C`MANIFEST.SKIP\*(C'\fR file (defaults to \f(CW\*(C`MANIFEST.SKIP\*(C'\fR in
the current directory) and returns a \s-1CODE\s0 reference that tests whether
a given filename should be skipped.
.IP "manicopy" 4
.IX Item "manicopy"
.Vb 2
\&    manicopy(\e%src, $dest_dir);
\&    manicopy(\e%src, $dest_dir, $how);
.Ve
.Sp
Copies the files that are the keys in \f(CW%src\fR to the \f(CW$dest_dir\fR.  \f(CW%src\fR is
typically returned by the \fImaniread()\fR function.
.Sp
.Vb 1
\&    manicopy( maniread(), $dest_dir );
.Ve
.Sp
This function is useful for producing a directory tree identical to the
intended distribution tree.
.Sp
\&\f(CW$how\fR can be used to specify a different methods of \*(L"copying\*(R".  Valid
values are \f(CW\*(C`cp\*(C'\fR, which actually copies the files, \f(CW\*(C`ln\*(C'\fR which creates
hard links, and \f(CW\*(C`best\*(C'\fR which mostly links the files but copies any
symbolic link to make a tree without any symbolic link.  \f(CW\*(C`cp\*(C'\fR is the
default.
.IP "maniadd" 4
.IX Item "maniadd"
.Vb 1
\&  maniadd({ $file => $comment, ...});
.Ve
.Sp
Adds an entry to an existing \fI\s-1MANIFEST\s0\fR unless its already there.
.Sp
\&\f(CW$file\fR will be normalized (ie. Unixified).  \fB\s-1UNIMPLEMENTED\s0\fR
.SS "\s-1MANIFEST\s0"
.IX Subsection "MANIFEST"
A list of files in the distribution, one file per line.  The \s-1MANIFEST\s0
always uses Unix filepath conventions even if you're not on Unix.  This
means \fIfoo/bar\fR style not \fIfoo\ebar\fR.
.PP
Anything between white space and an end of line within a \f(CW\*(C`MANIFEST\*(C'\fR
file is considered to be a comment.  Any line beginning with # is also
a comment. Beginning with ExtUtils::Manifest 1.52, a filename may
contain whitespace characters if it is enclosed in single quotes; single
quotes or backslashes in that filename must be backslash-escaped.
.PP
.Vb 4
\&    # this a comment
\&    some/file
\&    some/other/file            comment about some/file
\&    \*(Aqsome/third file\*(Aq          comment
.Ve
.SS "\s-1MANIFEST.SKIP\s0"
.IX Subsection "MANIFEST.SKIP"
The file \s-1MANIFEST.SKIP\s0 may contain regular expressions of files that
should be ignored by \fImkmanifest()\fR and \fIfilecheck()\fR. The regular
expressions should appear one on each line. Blank lines and lines
which start with \f(CW\*(C`#\*(C'\fR are skipped.  Use \f(CW\*(C`\e#\*(C'\fR if you need a regular
expression to start with a \f(CW\*(C`#\*(C'\fR.
.PP
For example:
.PP
.Vb 5
\&    # Version control files and dirs.
\&    \ebRCS\eb
\&    \ebCVS\eb
\&    ,v$
\&    \eB\e.svn\eb
\&
\&    # Makemaker generated files and dirs.
\&    ^MANIFEST\e.
\&    ^Makefile$
\&    ^blib/
\&    ^MakeMaker\-\ed
\&
\&    # Temp, old and emacs backup files.
\&    ~$
\&    \e.old$
\&    ^#.*#$
\&    ^\e.#
.Ve
.PP
If no \s-1MANIFEST.SKIP\s0 file is found, a default set of skips will be
used, similar to the example above.  If you want nothing skipped,
simply make an empty \s-1MANIFEST.SKIP\s0 file.
.PP
In one's own \s-1MANIFEST.SKIP\s0 file, certain directives
can be used to include the contents of other \s-1MANIFEST.SKIP\s0
files. At present two such directives are recognized.
.IP "#!include_default" 4
.IX Item "#!include_default"
This inserts the contents of the default \s-1MANIFEST.SKIP\s0 file
.IP "#!include /Path/to/another/manifest.skip" 4
.IX Item "#!include /Path/to/another/manifest.skip"
This inserts the contents of the specified external file
.PP
The included contents will be inserted into the \s-1MANIFEST.SKIP\s0
file in between \fI#!start included /path/to/manifest.skip\fR
and \fI#!end included /path/to/manifest.skip\fR markers.
The original \s-1MANIFEST.SKIP\s0 is saved as \s-1MANIFEST.SKIP\s0.bak.
.SS "\s-1EXPORT_OK\s0"
.IX Subsection "EXPORT_OK"
\&\f(CW&mkmanifest\fR, \f(CW&manicheck\fR, \f(CW&filecheck\fR, \f(CW&fullcheck\fR,
\&\f(CW&maniread\fR, and \f(CW&manicopy\fR are exportable.
.SS "\s-1GLOBAL VARIABLES\s0"
.IX Subsection "GLOBAL VARIABLES"
\&\f(CW$ExtUtils::Manifest::MANIFEST\fR defaults to \f(CW\*(C`MANIFEST\*(C'\fR. Changing it
results in both a different \f(CW\*(C`MANIFEST\*(C'\fR and a different
\&\f(CW\*(C`MANIFEST.SKIP\*(C'\fR file. This is useful if you want to maintain
different distributions for different audiences (say a user version
and a developer version including \s-1RCS\s0).
.PP
\&\f(CW$ExtUtils::Manifest::Quiet\fR defaults to 0. If set to a true value,
all functions act silently.
.PP
\&\f(CW$ExtUtils::Manifest::Debug\fR defaults to 0.  If set to a true value,
or if \s-1PERL_MM_MANIFEST_DEBUG\s0 is true, debugging output will be
produced.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
All diagnostic output is sent to \f(CW\*(C`STDERR\*(C'\fR.
.ie n .IP """Not in MANIFEST:"" \fIfile\fR" 4
.el .IP "\f(CWNot in MANIFEST:\fR \fIfile\fR" 4
.IX Item "Not in MANIFEST: file"
is reported if a file is found which is not in \f(CW\*(C`MANIFEST\*(C'\fR.
.ie n .IP """Skipping"" \fIfile\fR" 4
.el .IP "\f(CWSkipping\fR \fIfile\fR" 4
.IX Item "Skipping file"
is reported if a file is skipped due to an entry in \f(CW\*(C`MANIFEST.SKIP\*(C'\fR.
.ie n .IP """No such file:"" \fIfile\fR" 4
.el .IP "\f(CWNo such file:\fR \fIfile\fR" 4
.IX Item "No such file: file"
is reported if a file mentioned in a \f(CW\*(C`MANIFEST\*(C'\fR file does not
exist.
.ie n .IP """MANIFEST:"" \fI$!\fR" 4
.el .IP "\f(CWMANIFEST:\fR \fI$!\fR" 4
.IX Item "MANIFEST: $!"
is reported if \f(CW\*(C`MANIFEST\*(C'\fR could not be opened.
.ie n .IP """Added to MANIFEST:"" \fIfile\fR" 4
.el .IP "\f(CWAdded to MANIFEST:\fR \fIfile\fR" 4
.IX Item "Added to MANIFEST: file"
is reported by \fImkmanifest()\fR if \f(CW$Verbose\fR is set and a file is added
to \s-1MANIFEST.\s0 \f(CW$Verbose\fR is set to 1 by default.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1PERL_MM_MANIFEST_DEBUG\s0\fR" 4
.IX Item "PERL_MM_MANIFEST_DEBUG"
Turns on debugging
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker which has handy targets for most of the functionality.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Koenig \f(CW\*(C`andreas.koenig@anima.de\*(C'\fR
.PP
Maintained by Michael G Schwern \f(CW\*(C`schwern@pobox.com\*(C'\fR within the
ExtUtils-MakeMaker package and, as a separate \s-1CPAN\s0 package, by
Randy Kobes \f(CW\*(C`r.kobes@uwinnipeg.ca\*(C'\fR.
