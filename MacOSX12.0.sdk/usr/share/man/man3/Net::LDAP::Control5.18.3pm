.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Control 3"
.TH Net::LDAP::Control 3 "2013-07-21" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Control \- LDAPv3 control object base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Net::LDAP::Control;
\& use Net::LDAP::Constant qw( LDAP_CONTROL_MATCHEDVALS );
\&
\& $ctrl = Net::LDAP::Control\->new(
\&   type     => "1.2.3.4",
\&   value    => "help",
\&   critical => 0
\& );
\&
\& $mesg = $ldap\->search( @args, control => [ $ctrl ]);
\&
\& $ctrl = Net::LDAP::Control\->new( type => LDAP_CONTROL_MATCHEDVALS );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Control\*(C'\fR is a base-class for LDAPv3 control objects.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "new ( \s-1ARGS \s0)" 4
.IX Item "new ( ARGS )"
\&\s-1ARGS\s0 is a list of name/value pairs, valid arguments are:
.RS 4
.IP "critical" 4
.IX Item "critical"
A Boolean value, if \s-1TRUE\s0 and the control is unrecognized by the server or
is inappropriate for the requested operation then the server will return
an error and the operation will not be performed.
.Sp
If \s-1FALSE\s0 and the control is unrecognized by the server or
is inappropriate for the requested operation then the server will ignore
the control and perform the requested operation as if the control was
not given.
.Sp
If absent, \s-1FALSE\s0 is assumed.
.IP "type" 4
.IX Item "type"
A dotted-decimal representation of an \s-1OBJECT IDENTIFIER\s0 which
uniquely identifies the control. This prevents conflicts between
control names.
.Sp
This may be omitted if the constructor is being called on a sub-class of
Net::LDAP::Control which has registered to be associated with an \s-1OID.\s0
If the constructor is being called on the Net::LDAP::Control
package, then this argument must be given.  If the given \s-1OID\s0 has been
registered by a package, then the returned object will be of the type
registered to handle that \s-1OID.\s0
.IP "value" 4
.IX Item "value"
Optional information associated with the control. Its format is specific
to the particular control.
.RE
.RS 4
.RE
.IP "from_asn ( \s-1ASN \s0)" 4
.IX Item "from_asn ( ASN )"
\&\s-1ASN\s0 is a \s-1HASH\s0 reference, normally extracted from a \s-1PDU.\s0 It will contain
a \f(CW\*(C`type\*(C'\fR element and optionally \f(CW\*(C`critical\*(C'\fR and \f(CW\*(C`value\*(C'\fR elements. On
return \s-1ASN\s0 will be blessed into a package. If \f(CW\*(C`type\*(C'\fR is a registered
\&\s-1OID,\s0 then \s-1ASN\s0 will be blessed into the registered package, if not then \s-1ASN\s0
will be blessed into Net::LDAP::Control.
.Sp
This constructor is used internally by Net::LDAP and assumes that \s-1HASH\s0
passed contains a valid control. It should be used with \fBcaution\fR.
.SH "METHODS"
.IX Header "METHODS"
In addition to the methods listed below, each of the named parameters
to \f(CW\*(C`new\*(C'\fR is also available as a method. \f(CW\*(C`type\*(C'\fR will return the \s-1OID\s0 of
the control object. \f(CW\*(C`value\*(C'\fR and \f(CW\*(C`critical\*(C'\fR are set/get methods and will
return the current value for each attribute if called without arguments,
but may also be called with arguments to set new values.
.IP "error ()" 4
.IX Item "error ()"
If there has been an error returns a description of the error, otherwise it will
return \f(CW\*(C`undef\*(C'\fR
.IP "init ()" 4
.IX Item "init ()"
\&\f(CW\*(C`init\*(C'\fR will be called as the last step in both constructors. What it does will depend
on the sub-class. It must always return the object.
.IP "register ( \s-1OID \s0)" 4
.IX Item "register ( OID )"
\&\f(CW\*(C`register\*(C'\fR is provided for sub-class implementors. It should be called as a class method
on a sub-class of Net::LDAP::Control with the \s-1OID\s0 that the class will handle. Net::LDAP::Control
will remember this class and \s-1OID\s0 pair and use it in the following
situations.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`new\*(C'\fR is called as a class method on the Net::LDAP::Control package and \s-1OID\s0 is passed
as the type. The returned object will be blessed into the package that registered
the \s-1OID.\s0
.IP "\(bu" 4
\&\f(CW\*(C`new\*(C'\fR is called as a class method on a registered package and the \f(CW\*(C`type\*(C'\fR is not
specified. The \f(CW\*(C`type\*(C'\fR will be set to the \s-1OID\s0 registered by that package.
.IP "\(bu" 4
\&\f(CW\*(C`from_asn\*(C'\fR is called to construct an object from \s-1ASN.\s0 The returned object will be
blessed into the package which was registered to handle the \s-1OID\s0 in the \s-1ASN.\s0
.RE
.RS 4
.RE
.IP "( to_asn )" 4
.IX Item "( to_asn )"
Returns a structure suitable for passing to Convert::ASN1 for
encoding. This method will be called by Net::LDAP when the
control is used.
.Sp
The base class implementation of this method will call the \f(CW\*(C`value\*(C'\fR method
without arguments to allow a sub-class to encode it's value. Sub-classes
should not need to override this method.
.IP "valid ()" 4
.IX Item "valid ()"
Returns true if the object is valid and can be encoded. The default implementation
for this method is to return \s-1TRUE\s0 if there is no error, but sub-classes may override that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP
Net::LDAP::Control::Assertion
Net::LDAP::Control::EntryChange
Net::LDAP::Control::ManageDsaIT
Net::LDAP::Control::MatchedValues
Net::LDAP::Control::Paged
Net::LDAP::Control::PasswordPolicy
Net::LDAP::Control::PersistentSearch
Net::LDAP::Control::PostRead
Net::LDAP::Control::PreRead
Net::LDAP::Control::ProxyAuth
Net::LDAP::Control::Sort
Net::LDAP::Control::SortResult
Net::LDAP::Control::SyncDone
Net::LDAP::Control::SyncRequest
Net::LDAP::Control::SyncState
Net::LDAP::Control::VLV
Net::LDAP::Control::VLVResponse
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
