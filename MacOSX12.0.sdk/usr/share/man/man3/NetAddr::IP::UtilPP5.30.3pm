.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "NetAddr::IP::UtilPP 3"
.TH NetAddr::IP::UtilPP 3 "2012-08-10" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
NetAddr::IP::UtilPP \-\- pure Perl functions for NetAddr::IP::Util
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use NetAddr::IP::UtilPP qw(
\&        hasbits
\&        shiftleft
\&        addconst
\&        add128
\&        sub128
\&        notcontiguous
\&        ipv4to6
\&        mask4to6
\&        ipanyto6
\&        maskanyto6
\&        ipv6to4
\&        bin2bcd
\&        bcd2bin
\&  );
\&
\&  use NetAddr::IP::UtilPP qw(:all)
\&
\&  $rv = hasbits($bits128);
\&  $bitsX2 = shiftleft($bits128,$n);
\&  $carry = addconst($ipv6naddr,$signed_32con);
\&  ($carry,$ipv6naddr)=addconst($ipv6naddr,$signed_32con);
\&  $carry = add128($ipv6naddr1,$ipv6naddr2);
\&  ($carry,$ipv6naddr)=add128($ipv6naddr1,$ipv6naddr2);
\&  $carry = sub128($ipv6naddr1,$ipv6naddr2);
\&  ($spurious,$cidr) = notcontiguous($mask128);
\&  ($carry,$ipv6naddr)=sub128($ipv6naddr1,$ipv6naddr2);
\&  $ipv6naddr = ipv4to6($netaddr);
\&  $ipv6naddr = mask4to6($netaddr);
\&  $ipv6naddr = ipanyto6($netaddr);
\&  $ipv6naddr = maskanyto6($netaddr);
\&  $netaddr = ipv6to4($pv6naddr);
\&  $bcdtext = bin2bcd($bits128);
\&  $bits128 = bcd2bin($bcdtxt);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNetAddr::IP::UtilPP\fR provides pure Perl functions for \fBNetAddr::IP::Util\fR
.IP "\(bu" 4
\&\f(CW$rv\fR = hasbits($bits128);
.Sp
This function returns true if there are one's present in the 128 bit string
and false if all the bits are zero.
.Sp
.Vb 3
\&  i.e.  if (hasbits($bits128)) {
\&          &do_something;
\&        }
\&
\&  or    if (hasbits($bits128 & $mask128) {
\&          &do_something;
\&        }
.Ve
.Sp
This allows the implementation of logical functions of the form of:
.Sp
.Vb 2
\&        if ($bits128 & $mask128) {
\&            ...
\&
\&  input:        128 bit IPv6 string
\&  returns:      true if any bits are present
.Ve
.IP "\(bu" 4
\&\f(CW$bitsXn\fR = shiftleft($bits128,$n);
.Sp
.Vb 3
\&  input:        128 bit string variable,
\&                number of shifts [optional]
\&  returns:      bits X n shifts
\&
\&  NOTE: input bits are returned
\&        if $n is not specified
.Ve
.IP "\(bu" 4
addconst($ipv6naddr,$signed_32con);
.Sp
Add a signed constant to a 128 bit string variable.
.Sp
.Vb 4
\&  input:        128 bit IPv6 string,
\&                signed 32 bit integer
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.IP "\(bu" 4
add128($ipv6naddr1,$ipv6naddr2);
.Sp
Add two 128 bit string variables.
.Sp
.Vb 4
\&  input:        128 bit string var1,
\&                128 bit string var2
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.IP "\(bu" 4
sub128($ipv6naddr1,$ipv6naddr2);
.Sp
Subtract two 128 bit string variables.
.Sp
.Vb 4
\&  input:        128 bit string var1,
\&                128 bit string var2
\&  returns:  scalar      carry
\&            array       (carry, result)
.Ve
.Sp
Note: The carry from this operation is the result of adding the one's
complement of \s-1ARG2 +1\s0 to the \s-1ARG1.\s0 It is logically
\&\fB\s-1NOT\s0 borrow\fR.
.Sp
.Vb 2
\&        i.e.    if ARG1 >= ARG2 then carry = 1
\&        or      if ARG1  < ARG2 then carry = 0
.Ve
.IP "\(bu" 4
($spurious,$cidr) = notcontiguous($mask128);
.Sp
This function counts the bit positions remaining in the mask when the
rightmost '0's are removed.
.Sp
.Vb 6
\&        input:  128 bit netmask
\&        returns true if there are spurious
\&                    zero bits remaining in the
\&                    mask, false if the mask is
\&                    contiguous one\*(Aqs,
\&                128 bit cidr
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = ipv4to6($netaddr);
.Sp
Convert an ipv4 network address into an ipv6 network address.
.Sp
.Vb 2
\&  input:        32 bit network address
\&  returns:      128 bit network address
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = mask4to6($netaddr);
.Sp
Convert an ipv4 netowrk address into an ipv6 network mask.
.Sp
.Vb 2
\&  input:        32 bit network/mask address
\&  returns:      128 bit network/mask address
.Ve
.Sp
\&\s-1NOTE:\s0 returns the high 96 bits as one's
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = ipanyto6($netaddr);
.Sp
Similar to ipv4to6 except that this function takes either an IPv4 or IPv6
input and always returns a 128 bit IPv6 network address.
.Sp
.Vb 2
\&  input:        32 or 128 bit network address
\&  returns:      128 bit network address
.Ve
.IP "\(bu" 4
\&\f(CW$ipv6naddr\fR = maskanyto6($netaddr);
.Sp
Similar to mask4to6 except that this function takes either an IPv4 or IPv6
netmask and always returns a 128 bit IPv6 netmask.
.Sp
.Vb 2
\&  input:        32 or 128 bit network mask
\&  returns:      128 bit network mask
.Ve
.IP "\(bu" 4
\&\f(CW$netaddr\fR = ipv6to4($pv6naddr);
.Sp
Truncate the upper 96 bits of a 128 bit address and return the lower
32 bits. Returns an IPv4 address as returned by inet_aton.
.Sp
.Vb 2
\&  input:        128 bit network address
\&  returns:      32 bit inet_aton network address
.Ve
.IP "\(bu" 4
\&\f(CW$bcdtext\fR = bin2bcd($bits128);
.Sp
Convert a 128 bit binary string into binary coded decimal text digits.
.Sp
.Vb 2
\&  input:        128 bit string variable
\&  returns:      string of bcd text digits
.Ve
.IP "\(bu" 4
\&\f(CW$bits128\fR = bcd2bin($bcdtxt);
.Sp
Convert a bcd text string to 128 bit string variable
.Sp
.Vb 2
\&  input:        string of bcd text digits
\&  returns:      128 bit string variable
.Ve
.SH "EXPORT_OK"
.IX Header "EXPORT_OK"
.Vb 10
\&        hasbits
\&        shiftleft
\&        addconst
\&        add128
\&        sub128
\&        notcontiguous
\&        ipv4to6
\&        mask4to6
\&        ipanyto6
\&        maskanyto6
\&        ipv6to4
\&        bin2bcd
\&        bcd2bin
\&        comp128
\&        bin2bcdn
\&        bcdn2txt
\&        bcdn2bin
\&        simple_pack
\&        threads
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003 \- 2012, Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.,
\&        51 Franklin Street, Fifth Floor
\&        Boston, MA 02110\-1301 USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
