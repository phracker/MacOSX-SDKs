.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::Tester 3"
.TH Test2::Tools::Tester 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::Tester \- Tools to help you test other testing tools.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a collection of tools that are useful when testing other test tools.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Tools::Tester qw/event_groups filter_events facets/;
\&
\&    use Test2::Tools::Basic qw/plan pass ok/;
\&    use Test2::Tools::Compare qw/is like/;
\&
\&    my $events = intercept {
\&        plan 11;
\&
\&        pass(\*(Aqpass\*(Aq);
\&        ok(1, \*(Aqpass\*(Aq);
\&
\&        is(1, 1, "pass");
\&        like(1, 1, "pass");
\&    };
\&
\&    # Grab events generated by tools in Test2::Tools::Basic
\&    my $basic = filter $events => \*(AqTest2::Tools::Basic\*(Aq;
\&
\&    # Grab events generated by Test2::Tools::Basic;
\&    my $compare = filter $events => \*(AqTest2::Tools::Compare\*(Aq;
\&
\&    # Grab events generated by tools named \*(Aqok\*(Aq.
\&    my $oks = filter $events => qr/.*::ok$/;
\&
\&    my $grouped = group_events $events;
\&    # Breaks events into this structure:
\&    {
\&        \*(Aq_\|_NA_\|_\*(Aq => [ ... ],
\&        \*(AqTest2::Tools::Basic\*(Aq => {
\&            \*(Aq_\|_ALL_\|_\*(Aq => [ $events\->[0], $events\->[1], $events\->[2] ],
\&            plan => [ $events\->[0] ],
\&            pass => [ $events\->[1] ],
\&            ok => [ $events\->[2] ],
\&        },
\&        Test2::Tools::Compare => { ... },
\&    }
\&
\&    # Get an arrayref of all the assert facets from the list of events.
\&    my $assert_facets = facets assert => $events;
\&    # [
\&    #   bless({ details => \*(Aqpass\*(Aq, pass => 1}, \*(AqTest2::EventFacet::Assert\*(Aq),
\&    #   bless({ details => \*(Aqpass\*(Aq, pass => 1}, \*(AqTest2::EventFacet::Assert\*(Aq),
\&    # ]
\&
\&    # Same, but for info facets
\&    my $info_facets = facets info => $events;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No subs are exported by default.
.ie n .IP "$array_ref = filter $events => $PACKAGE" 4
.el .IP "\f(CW$array_ref\fR = filter \f(CW$events\fR => \f(CW$PACKAGE\fR" 4
.IX Item "$array_ref = filter $events => $PACKAGE"
.PD 0
.ie n .IP "$array_ref = filter $events => $PACKAGE1, $PACKAGE2" 4
.el .IP "\f(CW$array_ref\fR = filter \f(CW$events\fR => \f(CW$PACKAGE1\fR, \f(CW$PACKAGE2\fR" 4
.IX Item "$array_ref = filter $events => $PACKAGE1, $PACKAGE2"
.ie n .IP "$array_ref = filter $events => qr/match/" 4
.el .IP "\f(CW$array_ref\fR = filter \f(CW$events\fR => qr/match/" 4
.IX Item "$array_ref = filter $events => qr/match/"
.ie n .IP "$array_ref = filter $events => qr/match/, $PACKAGE" 4
.el .IP "\f(CW$array_ref\fR = filter \f(CW$events\fR => qr/match/, \f(CW$PACKAGE\fR" 4
.IX Item "$array_ref = filter $events => qr/match/, $PACKAGE"
.PD
This function takes an arrayref of events as the first argument. All additional
arguments must either be a package name, or a regex. Any event that is
generated by a tool in any of the package, or by a tool that matches any of the
regexes, will be returned in an arrayref.
.ie n .IP "$grouped = group_events($events)" 4
.el .IP "\f(CW$grouped\fR = group_events($events)" 4
.IX Item "$grouped = group_events($events)"
This function iterates all the events in the argument arrayref and splits them
into groups. The resulting data structure is:
.Sp
.Vb 1
\&    { PACKAGE => { SUBNAME => [ $EVENT1, $EVENT2, ... }}
.Ve
.Sp
If the package of an event is not known it will be put into and arrayref under
the '_\|_NA_\|_' key at the root of the structure. If a sub name is not known it
will typically go under the '_\|_ANON_\|_' key in under the package name.
.Sp
In addition there is an '_\|_ALL_\|_' key under each package which stores all of
the events sorted into that group.
.Sp
A more complete example:
.Sp
.Vb 9
\&    {
\&        \*(Aq_\|_NA_\|_\*(Aq => [ $event\->[3] ],
\&        \*(AqTest2::Tools::Basic\*(Aq => {
\&            \*(Aq_\|_ALL_\|_\*(Aq => [ $events\->[0], $events\->[1], $events\->[2] ],
\&            plan => [ $events\->[0] ],
\&            pass => [ $events\->[1] ],
\&            ok => [ $events\->[2] ],
\&        },
\&    }
.Ve
.ie n .IP "$arrayref = facets \s-1TYPE\s0 => $events" 4
.el .IP "\f(CW$arrayref\fR = facets \s-1TYPE\s0 => \f(CW$events\fR" 4
.IX Item "$arrayref = facets TYPE => $events"
This function will compile a list of all facets of the specified type that are
found in the arrayref of events. If the facet has a \f(CW\*(C`Test2::EventFacet::TYPE\*(C'\fR
package available then the facet will be constructed into an instance of the
class, otherwise it is left as a hashref. Facet Order is preserved.
.Sp
.Vb 5
\&    my $assert_facets = facets assert => $events;
\&    # [
\&    #   bless({ details => \*(Aqpass\*(Aq, pass => 1}, \*(AqTest2::EventFacet::Assert\*(Aq),
\&    #   bless({ details => \*(Aqpass\*(Aq, pass => 1}, \*(AqTest2::EventFacet::Assert\*(Aq),
\&    # ]
.Ve
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
