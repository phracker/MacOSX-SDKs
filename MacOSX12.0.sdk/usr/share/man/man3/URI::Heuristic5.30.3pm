.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "URI::Heuristic 3"
.TH URI::Heuristic 3 "2019-01-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::Heuristic \- Expand URI using heuristics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& use URI::Heuristic qw(uf_uristr);
\& $u = uf_uristr("perl");             # http://www.perl.com
\& $u = uf_uristr("www.sol.no/sol");   # http://www.sol.no/sol
\& $u = uf_uristr("aas");              # http://www.aas.no
\& $u = uf_uristr("ftp.funet.fi");     # ftp://ftp.funet.fi
\& $u = uf_uristr("/etc/passwd");      # file:/etc/passwd
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions that expand strings into real absolute
URIs using some built-in heuristics.  Strings that already represent
absolute URIs (i.e. that start with a \f(CW\*(C`scheme:\*(C'\fR part) are never modified
and are returned unchanged.  The main use of these functions is to
allow abbreviated URIs similar to what many web browsers allow for URIs
typed in by the user.
.PP
The following functions are provided:
.IP "uf_uristr($str)" 4
.IX Item "uf_uristr($str)"
Tries to make the argument string
into a proper absolute \s-1URI\s0 string.  The \*(L"uf_\*(R" prefix stands for \*(L"User 
Friendly\*(R".  Under MacOS, it assumes that any string with a common \s-1URL\s0 
scheme (http, ftp, etc.) is a \s-1URL\s0 rather than a local path.  So don't name 
your volumes after common \s-1URL\s0 schemes and expect \fBuf_uristr()\fR to construct 
valid file: \s-1URL\s0's on those volumes for you, because it won't.
.IP "uf_uri($str)" 4
.IX Item "uf_uri($str)"
Works the same way as \fBuf_uristr()\fR but
returns a \f(CW\*(C`URI\*(C'\fR object.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
If the hostname portion of a \s-1URI\s0 does not contain any dots, then
certain qualified guesses are made.  These guesses are governed by
the following environment variables:
.IP "\s-1COUNTRY\s0" 10
.IX Item "COUNTRY"
The two-letter country code (\s-1ISO 3166\s0) for your location.  If
the domain name of your host ends with two letters, then it is taken
to be the default country. See also Locale::Country.
.IP "\s-1HTTP_ACCEPT_LANGUAGE, LC_ALL, LANG\s0" 10
.IX Item "HTTP_ACCEPT_LANGUAGE, LC_ALL, LANG"
If \s-1COUNTRY\s0 is not set, these standard environment variables are
examined and country (not language) information possibly found in them
is used as the default country.
.IP "\s-1URL_GUESS_PATTERN\s0" 10
.IX Item "URL_GUESS_PATTERN"
Contains a space-separated list of \s-1URL\s0 patterns to try.  The string
\&\*(L"\s-1ACME\*(R"\s0 is for some reason used as a placeholder for the host name in
the \s-1URL\s0 provided.  Example:
.Sp
.Vb 2
\& URL_GUESS_PATTERN="www.ACME.no www.ACME.se www.ACME.com"
\& export URL_GUESS_PATTERN
.Ve
.Sp
Specifying \s-1URL_GUESS_PATTERN\s0 disables any guessing rules based on
country.  An empty \s-1URL_GUESS_PATTERN\s0 disables any guessing that
involves host name lookups.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997\-1998, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
