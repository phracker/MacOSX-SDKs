.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::stat 3pm"
.TH File::stat 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::stat \- by\-name interface to Perl's built\-in stat() functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use File::stat;
\& $st = stat($file) or die "No $file: $!";
\& if ( ($st\->mode & 0111) && $st\->nlink > 1) ) {
\&     print "$file is executable with lotsa links\en";
\& } 
\&
\& if ( \-x $st ) {
\&     print "$file is executable\en";
\& }
\&
\& use Fcntl "S_IRUSR";
\& if ( $st\->cando(S_IRUSR, 1) ) {
\&     print "My effective uid can read $file\en";
\& }
\&
\& use File::stat qw(:FIELDS);
\& stat($file) or die "No $file: $!";
\& if ( ($st_mode & 0111) && ($st_nlink > 1) ) {
\&     print "$file is executable with lotsa links\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module's default exports override the core \fIstat()\fR 
and \fIlstat()\fR functions, replacing them with versions that return 
\&\*(L"File::stat\*(R" objects.  This object has methods that
return the similarly named structure field name from the
\&\fIstat\fR\|(2) function; namely,
dev,
ino,
mode,
nlink,
uid,
gid,
rdev,
size,
atime,
mtime,
ctime,
blksize,
and
blocks.
.PP
As of version 1.02 (provided with perl 5.12) the object provides \f(CW"\-X"\fR
overloading, so you can call filetest operators (\f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, and so
on) on it. It also provides a \f(CW\*(C`\->cando\*(C'\fR method, called like
.PP
.Vb 1
\& $st\->cando( ACCESS, EFFECTIVE )
.Ve
.PP
where \fI\s-1ACCESS\s0\fR is one of \f(CW\*(C`S_IRUSR\*(C'\fR, \f(CW\*(C`S_IWUSR\*(C'\fR or \f(CW\*(C`S_IXUSR\*(C'\fR from the
Fcntl module, and \fI\s-1EFFECTIVE\s0\fR indicates whether to use
effective (true) or real (false) ids. The method interprets the \f(CW\*(C`mode\*(C'\fR,
\&\f(CW\*(C`uid\*(C'\fR and \f(CW\*(C`gid\*(C'\fR fields, and returns whether or not the current process
would be allowed the specified access.
.PP
If you don't want to use the objects, you may import the \f(CW\*(C`\->cando\*(C'\fR
method into your namespace as a regular function called \f(CW\*(C`stat_cando\*(C'\fR.
This takes an arrayref containing the return values of \f(CW\*(C`stat\*(C'\fR or
\&\f(CW\*(C`lstat\*(C'\fR as its first argument, and interprets it for you.
.PP
You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your \fIstat()\fR and \fIlstat()\fR functions.)  Access these fields as
variables named with a preceding \f(CW\*(C`st_\*(C'\fR in front their method names.
Thus, \f(CW\*(C`$stat_obj\->dev()\*(C'\fR corresponds to \f(CW$st_dev\fR if you import
the fields.
.PP
To access this functionality without the core overrides,
pass the \f(CW\*(C`use\*(C'\fR an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SH "BUGS"
.IX Header "BUGS"
As of Perl 5.8.0 after using this module you cannot use the implicit
\&\f(CW$_\fR or the special filehandle \f(CW\*(C`_\*(C'\fR with \fIstat()\fR or \fIlstat()\fR, trying
to do so leads into strange errors.  The workaround is for \f(CW$_\fR to
be explicit
.PP
.Vb 1
\&    my $stat_obj = stat $_;
.Ve
.PP
and for \f(CW\*(C`_\*(C'\fR to explicitly populate the object using the unexported
and undocumented \fIpopulate()\fR function with \fICORE::stat()\fR:
.PP
.Vb 1
\&    my $stat_obj = File::stat::populate(CORE::stat(_));
.Ve
.SH "ERRORS"
.IX Header "ERRORS"
.IP "\-%s is not implemented on a File::stat object" 4
.IX Item "-%s is not implemented on a File::stat object"
The filetest operators \f(CW\*(C`\-t\*(C'\fR, \f(CW\*(C`\-T\*(C'\fR and \f(CW\*(C`\-B\*(C'\fR are not implemented, as
they require more information than just a stat buffer.
.SH "WARNINGS"
.IX Header "WARNINGS"
These can all be disabled with
.PP
.Vb 1
\&    no warnings "File::stat";
.Ve
.IP "File::stat ignores use filetest 'access'" 4
.IX Item "File::stat ignores use filetest 'access'"
You have tried to use one of the \f(CW\*(C`\-rwxRWX\*(C'\fR filetests with \f(CW\*(C`use
filetest \*(Aqaccess\*(Aq\*(C'\fR in effect. \f(CW\*(C`File::stat\*(C'\fR will ignore the pragma, and
just use the information in the \f(CW\*(C`mode\*(C'\fR member as usual.
.IP "File::stat ignores \s-1VMS\s0 ACLs" 4
.IX Item "File::stat ignores VMS ACLs"
\&\s-1VMS\s0 systems have a permissions structure that cannot be completely
represented in a stat buffer, and unlike on other systems the builtin
filetest operators respect this. The \f(CW\*(C`File::stat\*(C'\fR overloads, however,
do not, since the information required is not available.
.SH "NOTE"
.IX Header "NOTE"
While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen
