.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Document::File 3"
.TH PPI::Document::File 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Document::File \- A Perl Document located in a specific file
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING:\s0 This class is experimental, and may change without notice\fR
.PP
\&\fBPPI::Document::File\fR provides a PPI::Document subclass that represents
a Perl document stored in a specific named file.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $file = PPI::Document::File\->new( \*(AqModule.pm\*(Aq );
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR constructor works the same as for the regular one, except
that the only params allowed is a file name. You cannot create an
\&\*(L"anonymous\*(R" PPI::Document::File object, not can you create an empty one.
.PP
Returns a new PPI::Document::File object, or \f(CW\*(C`undef\*(C'\fR on error.
.SS "save"
.IX Subsection "save"
.Vb 2
\&  # Save to the file we were loaded from
\&  $file\->save;
\&  
\&  # Save a copy to somewhere else
\&  $file\->save( \*(AqModule2.pm\*(Aq );
.Ve
.PP
The \f(CW\*(C`save\*(C'\fR method works similarly to the one in the parent PPI::Document
class, saving a copy of the document to a file.
.PP
The difference with this subclass is that if \f(CW\*(C`save\*(C'\fR is not passed any
filename, it will save it back to the file it was loaded from.
.PP
Note: When saving to a different file, it is considered to be saving a
\&\fBcopy\fR and so the value returned by the \f(CW\*(C`filename\*(C'\fR accessor will stay
the same, and not change to the new filename.
.SH "TO DO"
.IX Header "TO DO"
\&\- May need to overload some methods to forcefully prevent Document
objects becoming children of another Node.
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
