.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Spec 3pm"
.TH File::Spec 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Spec \- portably perform operations on file names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use File::Spec;
\&
\&        $x=File::Spec\->catfile(\*(Aqa\*(Aq, \*(Aqb\*(Aq, \*(Aqc\*(Aq);
.Ve
.PP
which returns 'a/b/c' under Unix. Or:
.PP
.Vb 1
\&        use File::Spec::Functions;
\&
\&        $x = catfile(\*(Aqa\*(Aq, \*(Aqb\*(Aq, \*(Aqc\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is designed to support operations commonly performed on file
specifications (usually called \*(L"file names\*(R", but not to be confused with the
contents of a file, or Perl's file handles), such as concatenating several
directory and file names into a single path, or determining whether a path
is rooted. It is based on code directly taken from MakeMaker 5.17, code
written by Andreas Ko\*:nig, Andy Dougherty, Charles Bailey, Ilya
Zakharevich, Paul Schinder, and others.
.PP
Since these functions are different for most operating systems, each set of
\&\s-1OS\s0 specific routines is available in a separate module, including:
.PP
.Vb 5
\&        File::Spec::Unix
\&        File::Spec::Mac
\&        File::Spec::OS2
\&        File::Spec::Win32
\&        File::Spec::VMS
.Ve
.PP
The module appropriate for the current \s-1OS\s0 is automatically loaded by
File::Spec. Since some modules (like \s-1VMS\s0) make use of facilities available
only under that \s-1OS,\s0 it may not be possible to load all modules under all
operating systems.
.PP
Since File::Spec is object oriented, subroutines should not be called directly,
as in:
.PP
.Vb 1
\&        File::Spec::catfile(\*(Aqa\*(Aq,\*(Aqb\*(Aq);
.Ve
.PP
but rather as class methods:
.PP
.Vb 1
\&        File::Spec\->catfile(\*(Aqa\*(Aq,\*(Aqb\*(Aq);
.Ve
.PP
For simple uses, File::Spec::Functions provides convenient functional
forms of these methods.
.SH "METHODS"
.IX Header "METHODS"
.IP "canonpath" 2
.IX Xref "canonpath"
.IX Item "canonpath"
No physical check on the filesystem, but a logical cleanup of a
path.
.Sp
.Vb 1
\&    $cpath = File::Spec\->canonpath( $path ) ;
.Ve
.Sp
Note that this does *not* collapse \fIx/../y\fR sections into \fIy\fR.  This
is by design.  If \fI/foo\fR on your system is a symlink to \fI/bar/baz\fR,
then \fI/foo/../quux\fR is actually \fI/bar/quux\fR, not \fI/quux\fR as a naive
\&\fI../\fR\-removal would give you.  If you want to do this kind of
processing, you probably want \f(CW\*(C`Cwd\*(C'\fR's \f(CW\*(C`realpath()\*(C'\fR function to
actually traverse the filesystem cleaning up paths like this.
.IP "catdir" 2
.IX Xref "catdir"
.IX Item "catdir"
Concatenate two or more directory names to form a complete path ending
with a directory. But remove the trailing slash from the resulting
string, because it doesn't look good, isn't necessary and confuses
\&\s-1OS/2.\s0 Of course, if this is the root directory, don't cut off the
trailing slash :\-)
.Sp
.Vb 1
\&    $path = File::Spec\->catdir( @directories );
.Ve
.IP "catfile" 2
.IX Xref "catfile"
.IX Item "catfile"
Concatenate one or more directory names and a filename to form a
complete path ending with a filename
.Sp
.Vb 1
\&    $path = File::Spec\->catfile( @directories, $filename );
.Ve
.IP "curdir" 2
.IX Xref "curdir"
.IX Item "curdir"
Returns a string representation of the current directory.
.Sp
.Vb 1
\&    $curdir = File::Spec\->curdir();
.Ve
.IP "devnull" 2
.IX Xref "devnull"
.IX Item "devnull"
Returns a string representation of the null device.
.Sp
.Vb 1
\&    $devnull = File::Spec\->devnull();
.Ve
.IP "rootdir" 2
.IX Xref "rootdir"
.IX Item "rootdir"
Returns a string representation of the root directory.
.Sp
.Vb 1
\&    $rootdir = File::Spec\->rootdir();
.Ve
.IP "tmpdir" 2
.IX Xref "tmpdir"
.IX Item "tmpdir"
Returns a string representation of the first writable directory from a
list of possible temporary directories.  Returns the current directory
if no writable temporary directories are found.  The list of directories
checked depends on the platform; e.g. File::Spec::Unix checks \f(CW$ENV{TMPDIR}\fR
(unless taint is on) and \fI/tmp\fR.
.Sp
.Vb 1
\&    $tmpdir = File::Spec\->tmpdir();
.Ve
.IP "updir" 2
.IX Xref "updir"
.IX Item "updir"
Returns a string representation of the parent directory.
.Sp
.Vb 1
\&    $updir = File::Spec\->updir();
.Ve
.IP "no_upwards" 2
.IX Item "no_upwards"
Given a list of file names, strip out those that refer to a parent
directory. (Does not strip symlinks, only '.', '..', and equivalents.)
.Sp
.Vb 1
\&    @paths = File::Spec\->no_upwards( @paths );
.Ve
.IP "case_tolerant" 2
.IX Item "case_tolerant"
Returns a true or false value indicating, respectively, that alphabetic
case is not or is significant when comparing file specifications.
Cygwin and Win32 accept an optional drive argument.
.Sp
.Vb 1
\&    $is_case_tolerant = File::Spec\->case_tolerant();
.Ve
.IP "file_name_is_absolute" 2
.IX Item "file_name_is_absolute"
Takes as its argument a path, and returns true if it is an absolute path.
.Sp
.Vb 1
\&    $is_absolute = File::Spec\->file_name_is_absolute( $path );
.Ve
.Sp
This does not consult the local filesystem on Unix, Win32, \s-1OS/2,\s0 or
Mac \s-1OS \s0(Classic).  It does consult the working environment for \s-1VMS
\&\s0(see \*(L"file_name_is_absolute\*(R" in File::Spec::VMS).
.IP "path" 2
.IX Xref "path"
.IX Item "path"
Takes no argument.  Returns the environment variable \f(CW\*(C`PATH\*(C'\fR (or the local
platform's equivalent) as a list.
.Sp
.Vb 1
\&    @PATH = File::Spec\->path();
.Ve
.IP "join" 2
.IX Xref "join, path"
.IX Item "join"
join is the same as catfile.
.IP "splitpath" 2
.IX Xref "splitpath split, path"
.IX Item "splitpath"
Splits a path in to volume, directory, and filename portions. On systems
with no concept of volume, returns '' for volume.
.Sp
.Vb 4
\&    ($volume,$directories,$file) =
\&                       File::Spec\->splitpath( $path );
\&    ($volume,$directories,$file) =
\&                       File::Spec\->splitpath( $path, $no_file );
.Ve
.Sp
For systems with no syntax differentiating filenames from directories, 
assumes that the last file is a path unless \f(CW$no_file\fR is true or a
trailing separator or \fI/.\fR or \fI/..\fR is present. On Unix, this means that \f(CW$no_file\fR
true makes this return ( '', \f(CW$path\fR, '' ).
.Sp
The directory portion may or may not be returned with a trailing '/'.
.Sp
The results can be passed to \*(L"\fIcatpath()\fR\*(R" to get back a path equivalent to
(usually identical to) the original path.
.IP "splitdir" 2
.IX Xref "splitdir split, dir"
.IX Item "splitdir"
The opposite of \*(L"catdir\*(R".
.Sp
.Vb 1
\&    @dirs = File::Spec\->splitdir( $directories );
.Ve
.Sp
\&\f(CW$directories\fR must be only the directory portion of the path on systems 
that have the concept of a volume or that have path syntax that differentiates
files from directories.
.Sp
Unlike just splitting the directories on the separator, empty
directory names (\f(CW\*(Aq\*(Aq\fR) can be returned, because these are significant
on some OSes.
.IP "\fIcatpath()\fR" 2
.IX Item "catpath()"
Takes volume, directory and file portions and returns an entire path. Under
Unix, \f(CW$volume\fR is ignored, and directory and file are concatenated.  A '/' is
inserted if need be.  On other OSes, \f(CW$volume\fR is significant.
.Sp
.Vb 1
\&    $full_path = File::Spec\->catpath( $volume, $directory, $file );
.Ve
.IP "abs2rel" 2
.IX Xref "abs2rel absolute, path relative, path"
.IX Item "abs2rel"
Takes a destination path and an optional base path returns a relative path
from the base path to the destination path:
.Sp
.Vb 2
\&    $rel_path = File::Spec\->abs2rel( $path ) ;
\&    $rel_path = File::Spec\->abs2rel( $path, $base ) ;
.Ve
.Sp
If \f(CW$base\fR is not present or '', then \fICwd::cwd()\fR is used. If \f(CW$base\fR is
relative, then it is converted to absolute form using
\&\*(L"\fIrel2abs()\fR\*(R". This means that it is taken to be relative to
\&\fICwd::cwd()\fR.
.Sp
On systems with the concept of volume, if \f(CW$path\fR and \f(CW$base\fR appear to be
on two different volumes, we will not attempt to resolve the two
paths, and we will instead simply return \f(CW$path\fR.  Note that previous
versions of this module ignored the volume of \f(CW$base\fR, which resulted in
garbage results part of the time.
.Sp
On systems that have a grammar that indicates filenames, this ignores the 
\&\f(CW$base\fR filename as well. Otherwise all path components are assumed to be
directories.
.Sp
If \f(CW$path\fR is relative, it is converted to absolute form using \*(L"\fIrel2abs()\fR\*(R".
This means that it is taken to be relative to \fICwd::cwd()\fR.
.Sp
No checks against the filesystem are made.  On \s-1VMS,\s0 there is
interaction with the working environment, as logicals and
macros are expanded.
.Sp
Based on code written by Shigio Yamaguchi.
.IP "\fIrel2abs()\fR" 2
.IX Xref "rel2abs absolute, path relative, path"
.IX Item "rel2abs()"
Converts a relative path to an absolute path.
.Sp
.Vb 2
\&    $abs_path = File::Spec\->rel2abs( $path ) ;
\&    $abs_path = File::Spec\->rel2abs( $path, $base ) ;
.Ve
.Sp
If \f(CW$base\fR is not present or '', then \fICwd::cwd()\fR is used. If \f(CW$base\fR is relative,
then it is converted to absolute form using \*(L"\fIrel2abs()\fR\*(R". This means that it
is taken to be relative to \fICwd::cwd()\fR.
.Sp
On systems with the concept of volume, if \f(CW$path\fR and \f(CW$base\fR appear to be
on two different volumes, we will not attempt to resolve the two
paths, and we will instead simply return \f(CW$path\fR.  Note that previous
versions of this module ignored the volume of \f(CW$base\fR, which resulted in
garbage results part of the time.
.Sp
On systems that have a grammar that indicates filenames, this ignores the 
\&\f(CW$base\fR filename as well. Otherwise all path components are assumed to be
directories.
.Sp
If \f(CW$path\fR is absolute, it is cleaned up and returned using \*(L"canonpath\*(R".
.Sp
No checks against the filesystem are made.  On \s-1VMS,\s0 there is
interaction with the working environment, as logicals and
macros are expanded.
.Sp
Based on code written by Shigio Yamaguchi.
.PP
For further information, please see File::Spec::Unix,
File::Spec::Mac, File::Spec::OS2, File::Spec::Win32, or
File::Spec::VMS.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Spec::Unix, File::Spec::Mac, File::Spec::OS2,
File::Spec::Win32, File::Spec::VMS, File::Spec::Functions,
ExtUtils::MakeMaker
.SH "AUTHOR"
.IX Header "AUTHOR"
Currently maintained by Ken Williams \f(CW\*(C`<KWILLIAMS@cpan.org>\*(C'\fR.
.PP
The vast majority of the code was written by
Kenneth Albanowski \f(CW\*(C`<kjahds@kjahds.com>\*(C'\fR,
Andy Dougherty \f(CW\*(C`<doughera@lafayette.edu>\*(C'\fR,
Andreas Ko\*:nig \f(CW\*(C`<A.Koenig@franz.ww.TU\-Berlin.DE>\*(C'\fR,
Tim Bunce \f(CW\*(C`<Tim.Bunce@ig.co.uk>\*(C'\fR.
\&\s-1VMS\s0 support by Charles Bailey \f(CW\*(C`<bailey@newman.upenn.edu>\*(C'\fR.
\&\s-1OS/2\s0 support by Ilya Zakharevich \f(CW\*(C`<ilya@math.ohio\-state.edu>\*(C'\fR.
Mac support by Paul Schinder \f(CW\*(C`<schinder@pobox.com>\*(C'\fR, and
Thomas Wegner \f(CW\*(C`<wegner_thomas@yahoo.com>\*(C'\fR.
\&\fIabs2rel()\fR and \fIrel2abs()\fR written by Shigio Yamaguchi \f(CW\*(C`<shigio@tamacom.com>\*(C'\fR,
modified by Barrie Slaymaker \f(CW\*(C`<barries@slaysys.com>\*(C'\fR.
\&\fIsplitpath()\fR, \fIsplitdir()\fR, \fIcatpath()\fR and \fIcatdir()\fR by Barrie Slaymaker.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004\-2013 by the Perl 5 Porters.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
