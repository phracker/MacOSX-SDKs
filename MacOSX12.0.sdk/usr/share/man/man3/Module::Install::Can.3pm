.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::Can 3"
.TH Module::Install::Can 3 "2017-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Install::Can \- Utility functions for capability detection
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Install::Can\*(C'\fR contains a number of functions for authors to use
when creating customised smarter installers. The functions simplify
standard tests so that you can express your dependencies and conditions
much more simply, and make your installer much easier to maintain.
.SH "COMMANDS"
.IX Header "COMMANDS"
.SS "can_use"
.IX Subsection "can_use"
.Vb 2
\&  can_use(\*(AqModule::Name\*(Aq);
\&  can_use(\*(AqModule::Name\*(Aq, 1.23);
.Ve
.PP
The \f(CW\*(C`can_use\*(C'\fR function tests the ability to load a specific named
module. Currently it will also actually load the module in the
process, although this may change in the future.
.PP
Takes an optional second param of a version number. The currently
installed version of the module will be tested to make sure it is
equal to or greater than the specified version.
.PP
Returns true if the module can be loaded, or false (in both scalar or
list context) if not.
.SS "can_run"
.IX Subsection "can_run"
.Vb 1
\&  can_run(\*(Aqcvs\*(Aq);
.Ve
.PP
The \f(CW\*(C`can_run\*(C'\fR function tests the ability to run a named command or
program on the local system.
.PP
Returns true if so, or false (both in scalar and list context) if not.
.SS "can_cc"
.IX Subsection "can_cc"
.Vb 1
\&  can_cc();
.Ve
.PP
The \f(CW\*(C`can_cc\*(C'\fR function tests the ability to locate a functioning C compiler
on the local system. Returns true if the C compiler can be found, or false
(both in scalar and list context) if not.
.SS "can_xs"
.IX Subsection "can_xs"
.Vb 1
\&  can_xs();
.Ve
.PP
The \f(CW\*(C`can_xs\*(C'\fR function tests for a functioning C compiler and the correct
headers to build \s-1XS\s0 modules against the current instance of Perl.
.SH "TO DO"
.IX Header "TO DO"
Currently, the use of a \f(CW\*(C`can_foo\*(C'\fR command in a single problem domain
(for example \f(CW\*(C`can_use\*(C'\fR) results in the inclusion of additional
functionality from different problem domains (for example \f(CW\*(C`can_run\*(C'\fR).
.PP
This module should ultimately be broken up, and the individual
functions redistributed to different domain-specific extensions.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <autrijus@autrijus.org>
.PP
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Install, Class::Inspector
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2012 Audrey Tang, Adam Kennedy.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
