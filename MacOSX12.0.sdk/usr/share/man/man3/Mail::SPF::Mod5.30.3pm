.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SPF::Mod 3"
.TH Mail::SPF::Mod 3 "2021-08-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SPF::Mod \- SPF record modifier base class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object of class \fBMail::SPF::Mod\fR represents a modifier within an \s-1SPF\s0
record.  Mail::SPF::Mod cannot be instantiated directly.  Create an instance of
a concrete sub-class instead.
.SS "Constructors"
.IX Subsection "Constructors"
The following constructors are provided:
.IP "\fBnew(%options)\fR: returns \fIMail::SPF::Mod\fR" 4
.IX Item "new(%options): returns Mail::SPF::Mod"
\&\fIAbstract\fR.  Creates a new \s-1SPF\s0 record modifier object.
.Sp
\&\f(CW%options\fR is a list of key/value pairs representing any of the following
options:
.RS 4
.IP "\fBtext\fR" 4
.IX Item "text"
A \fIstring\fR denoting the unparsed text of the modifier.
.IP "\fBname\fR" 4
.IX Item "name"
A \fIstring\fR denoting the name of the modifier.  \fIRequired\fR if a generic
\&\fIMail::SPF::Mod\fR object (as opposed to a specific sub-class) is being
constructed.
.IP "\fBdomain_spec\fR" 4
.IX Item "domain_spec"
Either a plain \fIstring\fR or a \fIMail::SPF::MacroString\fR object denoting an
optional \f(CW\*(C`domain\-spec\*(C'\fR parameter of the mechanism.
.RE
.RS 4
.RE
.IP "\fBnew_from_string($text, \f(CB%options\fB)\fR: returns \fIMail::SPF::Mod\fR; throws \fIMail::SPF::ENothingToParse\fR, \fIMail::SPF::EInvalidMod\fR" 4
.IX Item "new_from_string($text, %options): returns Mail::SPF::Mod; throws Mail::SPF::ENothingToParse, Mail::SPF::EInvalidMod"
\&\fIAbstract\fR.  Creates a new \s-1SPF\s0 record modifier object by parsing the string and
any options given.
.SS "Class methods"
.IX Subsection "Class methods"
The following class methods are provided:
.IP "\fBname_pattern\fR: returns \fIRegexp\fR" 4
.IX Item "name_pattern: returns Regexp"
Returns a regular expression that matches any legal modifier name.
.SS "Instance methods"
.IX Subsection "Instance methods"
The following instance methods are provided:
.IP "\fBtext\fR: returns \fIstring\fR; throws \fIMail::SPF::ENoUnparsedText\fR" 4
.IX Item "text: returns string; throws Mail::SPF::ENoUnparsedText"
Returns the unparsed text of the modifier.  Throws a
\&\fIMail::SPF::ENoUnparsedText\fR exception if the modifier was created
synthetically instead of being parsed, and no text was provided.
.IP "\fBname\fR: returns \fIstring\fR" 4
.IX Item "name: returns string"
Returns the name of the modifier.
.IP "\fBparams\fR: returns \fIstring\fR" 4
.IX Item "params: returns string"
\&\fIAbstract\fR.  Returns the modifier's parameters formatted as a string.
.Sp
A sub-class of Mail::SPF::Mod does not have to implement this method if it
supports no parameters, although this is highly unlikely.
.IP "\fBstringify\fR: returns \fIstring\fR" 4
.IX Item "stringify: returns string"
Formats the modifier's name and parameters as a string and returns it.  You can
simply use a Mail::SPF::Mod object as a string for the same effect, see
\&\*(L"\s-1OVERLOADING\*(R"\s0.
.IP "\fBprocess\fR: throws \fIMail::SPF::Result\fR, \fIMail::SPF::Result::Error\fR, \fIMail::SPF::Exception\fR" 4
.IX Item "process: throws Mail::SPF::Result, Mail::SPF::Result::Error, Mail::SPF::Exception"
\&\fIAbstract\fR.  Processes the modifier.  What that means depends on the actual
implementation in sub-classes.  See \*(L"\s-1MODIFIER TYPES\*(R"\s0 below.
.Sp
This method is abstract and must be implemented by sub-classes of
Mail::SPF::Mod.
.SH "MODIFIER TYPES"
.IX Header "MODIFIER TYPES"
There are different basic types of modifiers, which are described below.  All
of them are provided by the \fBMail::SPF::Mod\fR module.
.SS "Global modifiers \- \fBMail::SPF::GlobalMod\fP"
.IX Subsection "Global modifiers - Mail::SPF::GlobalMod"
\&\fBSPFv1\fR (\s-1RFC 4408\s0) only knows \*(L"global\*(R" modifiers.  A global modifier may
appear anywhere in an \s-1SPF\s0 record, but only once.  During evaluation of the
record, global modifiers are processed after the last mechanism has been
evaluated and an \s-1SPF\s0 result has been determined.
.PP
The following additional class method is provided by \fBMail::SPF::GlobalMod\fR:
.IP "\fBprecedence\fR: returns \fIreal\fR" 4
.IX Item "precedence: returns real"
\&\fIAbstract\fR.  Returns a \fIreal\fR number between \fB0\fR and \fB1\fR denoting the
precedence of the type of the global modifier.  Global modifiers present in an
\&\s-1SPF\s0 record are processed in the order of their precedence values, \fB0\fR meaning
\&\*(L"first\*(R".
.Sp
This method is abstract and must be implemented by sub-classes of
Mail::SPF::GlobalMod.
.PP
The following specific instance method is provided by \fBMail::SPF::GlobalMod\fR:
.IP "\fBprocess($server, \f(CB$request\fB, \f(CB$result\fB)\fR: throws \fIMail::SPF::Result\fR" 4
.IX Item "process($server, $request, $result): throws Mail::SPF::Result"
\&\fIAbstract\fR.  Processes the modifier.  What that means depends on the actual
implementation in sub-classes.  Takes both a \fIMail::SPF::Server\fR and a
\&\fIMail::SPF::Request\fR object.  As global modifiers are generally processed
\&\fIafter\fR an \s-1SPF\s0 result has already been determined, takes also the current
\&\fIMail::SPF::Result\fR.  If the modifier wishes to modify the \s-1SPF\s0 result, it may
throw a different \fIMail::SPF::Result\fR object.
.Sp
This method is abstract and must be implemented by sub-classes of
Mail::SPF::GlobalMod.
.SS "Positional modifiers \- \fBMail::SPF::PositionalMod\fP"
.IX Subsection "Positional modifiers - Mail::SPF::PositionalMod"
\&\fBSender \s-1ID\s0\fR (\s-1RFC 4406\s0) introduces the concept of \*(L"positional\*(R" modifiers.
According to \s-1RFC 4406,\s0 a positional modifier must follow a mechanism and
applies to that, and only that, mechanism.  However, because this definition is
not very useful, and because no positional modifiers have been defined based on
it as of yet, \fBMail::SPF\fR deviates from \s-1RFC 4406\s0 as follows:
.PP
A positional modifier may appear anywhere in an \s-1SPF\s0 record, and it is stateful,
i.e. it applies to all mechanisms and modifiers that follow it.  Positional
modifiers are generally multiple, i.e. they may appear any number of times
throughout the record.  During evaluation of the record, positional modifiers
are processed at exactly the time when they are encountered by the evaluator.
Consequently, all positional modifiers are processed before an \s-1SPF\s0 result is
determined.
.PP
The following specific instance method is provided by
\&\fBMail::SPF::PositionalMod\fR:
.IP "\fBprocess($server, \f(CB$request\fB)\fR: throws \fIMail::SPF::Result::Error\fR, \fIMail::SPF::Exception\fR" 4
.IX Item "process($server, $request): throws Mail::SPF::Result::Error, Mail::SPF::Exception"
\&\fIAbstract\fR.  Processes the modifier.  What that means depends on the actual
implementation in sub-classes.  Takes both a \fIMail::SPF::Server\fR and a
\&\fIMail::SPF::Request\fR object.  As global modifiers are generally processed
\&\fIbefore\fR an \s-1SPF\s0 result has been determined, no result object is available to
the modifier.  The modifier can (at least at this time) not directly modify the
final \s-1SPF\s0 result, however it may throw an exception to signal an error
condition.
.Sp
This method is abstract and must be implemented by sub-classes of
Mail::SPF::PositionalMod.
.SS "Unknown modifiers \- \fBMail::SPF::UnknownMod\fP"
.IX Subsection "Unknown modifiers - Mail::SPF::UnknownMod"
Both \fBSPFv1\fR and \fBSender \s-1ID\s0\fR allow unknown modifiers to appear in \s-1SPF\s0 records
in order to allow new modifiers to be introduced without breaking existing
implementations.  Obviously, unknown modifiers are neither global nor
positional, but they may appear any number of times throughout the record and
are simply ignored during evaluation of the record.
.PP
Also obviously, \fBMail::SPF::UnknownMod\fR does not support a \f(CW\*(C`process\*(C'\fR method.
.PP
The following specific instance method is provided by
\&\fBMail::SPF::UnknownMod\fR:
.IP "\fBparams\fR: returns \fIstring\fR" 4
.IX Item "params: returns string"
Returns the modifier's unparsed value as a string.
.SH "OVERLOADING"
.IX Header "OVERLOADING"
If a Mail::SPF::Mod object is used as a \fIstring\fR, the \f(CW\*(C`stringify\*(C'\fR method is
used to convert the object into a string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::SPF::Mod::Redirect, Mail::SPF::Mod::Exp
.PP
Mail::SPF, Mail::SPF::Record, Mail::SPF::Term
.PP
<http://tools.ietf.org/html/rfc4408>
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Mail::SPF.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>, Shevek <cpan@anarres.org>
