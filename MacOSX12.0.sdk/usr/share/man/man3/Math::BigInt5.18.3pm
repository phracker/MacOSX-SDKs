.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt 3pm"
.TH Math::BigInt 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt \- Arbitrary size integer/float math package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::BigInt;
\&
\&  # or make it faster with huge numbers: install (optional)
\&  # Math::BigInt::GMP and always use (it will fall back to
\&  # pure Perl if the GMP library is not installed):
\&  # (See also the L<MATH LIBRARY> section!)
\&
\&  # will warn if Math::BigInt::GMP cannot be found
\&  use Math::BigInt lib => \*(AqGMP\*(Aq;
\&
\&  # to suppress the warning use this:
\&  # use Math::BigInt try => \*(AqGMP\*(Aq;
\&
\&  # dies if GMP cannot be loaded:
\&  # use Math::BigInt only => \*(AqGMP\*(Aq;
\&
\&  my $str = \*(Aq1234567890\*(Aq;
\&  my @values = (64,74,18);
\&  my $n = 1; my $sign = \*(Aq\-\*(Aq;
\&
\&  # Number creation     
\&  my $x = Math::BigInt\->new($str);      # defaults to 0
\&  my $y = $x\->copy();                   # make a true copy
\&  my $nan  = Math::BigInt\->bnan();      # create a NotANumber
\&  my $zero = Math::BigInt\->bzero();     # create a +0
\&  my $inf = Math::BigInt\->binf();       # create a +inf
\&  my $inf = Math::BigInt\->binf(\*(Aq\-\*(Aq);    # create a \-inf
\&  my $one = Math::BigInt\->bone();       # create a +1
\&  my $mone = Math::BigInt\->bone(\*(Aq\-\*(Aq);   # create a \-1
\&
\&  my $pi = Math::BigInt\->bpi();         # returns \*(Aq3\*(Aq
\&                                        # see Math::BigFloat::bpi()
\&
\&  $h = Math::BigInt\->new(\*(Aq0x123\*(Aq);      # from hexadecimal
\&  $b = Math::BigInt\->new(\*(Aq0b101\*(Aq);      # from binary
\&  $o = Math::BigInt\->from_oct(\*(Aq0101\*(Aq);  # from octal
\&
\&  # Testing (don\*(Aqt modify their arguments)
\&  # (return true if the condition is met, otherwise false)
\&
\&  $x\->is_zero();        # if $x is +0
\&  $x\->is_nan();         # if $x is NaN
\&  $x\->is_one();         # if $x is +1
\&  $x\->is_one(\*(Aq\-\*(Aq);      # if $x is \-1
\&  $x\->is_odd();         # if $x is odd
\&  $x\->is_even();        # if $x is even
\&  $x\->is_pos();         # if $x > 0
\&  $x\->is_neg();         # if $x < 0
\&  $x\->is_inf($sign);    # if $x is +inf, or \-inf (sign is default \*(Aq+\*(Aq)
\&  $x\->is_int();         # if $x is an integer (not a float)
\&
\&  # comparing and digit/sign extraction
\&  $x\->bcmp($y);         # compare numbers (undef,<0,=0,>0)
\&  $x\->bacmp($y);        # compare absolutely (undef,<0,=0,>0)
\&  $x\->sign();           # return the sign, either +,\- or NaN
\&  $x\->digit($n);        # return the nth digit, counting from right
\&  $x\->digit(\-$n);       # return the nth digit, counting from left
\&
\&  # The following all modify their first argument. If you want to pre\-
\&  # serve $x, use $z = $x\->copy()\->bXXX($y); See under L<CAVEATS> for
\&  # why this is necessary when mixing $a = $b assignments with non\-over\-
\&  # loaded math.
\&
\&  $x\->bzero();          # set $x to 0
\&  $x\->bnan();           # set $x to NaN
\&  $x\->bone();           # set $x to +1
\&  $x\->bone(\*(Aq\-\*(Aq);        # set $x to \-1
\&  $x\->binf();           # set $x to inf
\&  $x\->binf(\*(Aq\-\*(Aq);        # set $x to \-inf
\&
\&  $x\->bneg();           # negation
\&  $x\->babs();           # absolute value
\&  $x\->bsgn();           # sign function (\-1, 0, 1, or NaN)
\&  $x\->bnorm();          # normalize (no\-op in BigInt)
\&  $x\->bnot();           # two\*(Aqs complement (bit wise not)
\&  $x\->binc();           # increment $x by 1
\&  $x\->bdec();           # decrement $x by 1
\&
\&  $x\->badd($y);         # addition (add $y to $x)
\&  $x\->bsub($y);         # subtraction (subtract $y from $x)
\&  $x\->bmul($y);         # multiplication (multiply $x by $y)
\&  $x\->bdiv($y);         # divide, set $x to quotient
\&                        # return (quo,rem) or quo if scalar
\&
\&  $x\->bmuladd($y,$z);   # $x = $x * $y + $z
\&
\&  $x\->bmod($y);            # modulus (x % y)
\&  $x\->bmodpow($y,$mod);    # modular exponentiation (($x ** $y) % $mod)
\&  $x\->bmodinv($mod);       # modular multiplicative inverse
\&  $x\->bpow($y);            # power of arguments (x ** y)
\&  $x\->blsft($y);           # left shift in base 2
\&  $x\->brsft($y);           # right shift in base 2
\&                           # returns (quo,rem) or quo if in sca\-
\&                           # lar context
\&  $x\->blsft($y,$n);        # left shift by $y places in base $n
\&  $x\->brsft($y,$n);        # right shift by $y places in base $n
\&                           # returns (quo,rem) or quo if in sca\-
\&                           # lar context
\&
\&  $x\->band($y);            # bitwise and
\&  $x\->bior($y);            # bitwise inclusive or
\&  $x\->bxor($y);            # bitwise exclusive or
\&  $x\->bnot();              # bitwise not (two\*(Aqs complement)
\&
\&  $x\->bsqrt();             # calculate square\-root
\&  $x\->broot($y);           # $y\*(Aqth root of $x (e.g. $y == 3 => cubic root)
\&  $x\->bfac();              # factorial of $x (1*2*3*4*..$x)
\&
\&  $x\->bnok($y);            # x over y (binomial coefficient n over k)
\&
\&  $x\->blog();              # logarithm of $x to base e (Euler\*(Aqs number)
\&  $x\->blog($base);         # logarithm of $x to base $base (f.i. 2)
\&  $x\->bexp();              # calculate e ** $x where e is Euler\*(Aqs number
\&
\&  $x\->round($A,$P,$mode);  # round to accuracy or precision using
\&                           # mode $mode
\&  $x\->bround($n);          # accuracy: preserve $n digits
\&  $x\->bfround($n);         # $n > 0: round $nth digits,
\&                           # $n < 0: round to the $nth digit after the
\&                           # dot, no\-op for BigInts
\&
\&  # The following do not modify their arguments in BigInt (are no\-ops),
\&  # but do so in BigFloat:
\&
\&  $x\->bfloor();            # return integer less or equal than $x
\&  $x\->bceil();             # return integer greater or equal than $x
\&
\&  # The following do not modify their arguments:
\&
\&  # greatest common divisor (no OO style)
\&  my $gcd = Math::BigInt::bgcd(@values);
\&  # lowest common multiple (no OO style)
\&  my $lcm = Math::BigInt::blcm(@values);
\&
\&  $x\->length();            # return number of digits in number
\&  ($xl,$f) = $x\->length(); # length of number and length of fraction
\&                           # part, latter is always 0 digits long
\&                           # for BigInts
\&
\&  $x\->exponent();         # return exponent as BigInt
\&  $x\->mantissa();         # return (signed) mantissa as BigInt
\&  $x\->parts();            # return (mantissa,exponent) as BigInt
\&  $x\->copy();             # make a true copy of $x (unlike $y = $x;)
\&  $x\->as_int();           # return as BigInt (in BigInt: same as copy())
\&  $x\->numify();           # return as scalar (might overflow!)
\&
\&  # conversion to string (do not modify their argument)
\&  $x\->bstr();         # normalized string (e.g. \*(Aq3\*(Aq)
\&  $x\->bsstr();        # norm. string in scientific notation (e.g. \*(Aq3E0\*(Aq)
\&  $x\->as_hex();       # as signed hexadecimal string with prefixed 0x
\&  $x\->as_bin();       # as signed binary string with prefixed 0b
\&  $x\->as_oct();       # as signed octal string with prefixed 0
\&
\&
\&  # precision and accuracy (see section about rounding for more)
\&  $x\->precision();       # return P of $x (or global, if P of $x undef)
\&  $x\->precision($n);     # set P of $x to $n
\&  $x\->accuracy();        # return A of $x (or global, if A of $x undef)
\&  $x\->accuracy($n);      # set A $x to $n
\&
\&  # Global methods
\&  Math::BigInt\->precision();   # get/set global P for all BigInt objects
\&  Math::BigInt\->accuracy();    # get/set global A for all BigInt objects
\&  Math::BigInt\->round_mode();  # get/set global round mode, one of
\&                               # \*(Aqeven\*(Aq, \*(Aqodd\*(Aq, \*(Aq+inf\*(Aq, \*(Aq\-inf\*(Aq, \*(Aqzero\*(Aq,
\&                               # \*(Aqtrunc\*(Aq or \*(Aqcommon\*(Aq
\&  Math::BigInt\->config();      # return hash containing configuration
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All operators (including basic math operations) are overloaded if you
declare your big integers as
.PP
.Vb 1
\&  $i = new Math::BigInt \*(Aq123_456_789_123_456_789\*(Aq;
.Ve
.PP
Operations with overloaded operators preserve the arguments which is
exactly what you expect.
.IP "Input" 2
.IX Item "Input"
Input values to these routines may be any string, that looks like a number
and results in an integer, including hexadecimal and binary numbers.
.Sp
Scalars holding numbers may also be passed, but note that non-integer numbers
may already have lost precision due to the conversion to float. Quote
your input if you want BigInt to see all the digits:
.Sp
.Vb 2
\&        $x = Math::BigInt\->new(12345678890123456789);   # bad
\&        $x = Math::BigInt\->new(\*(Aq12345678901234567890\*(Aq); # good
.Ve
.Sp
You can include one underscore between any two digits.
.Sp
This means integer values like 1.01E2 or even 1000E\-2 are also accepted.
Non-integer values result in NaN.
.Sp
Hexadecimal (prefixed with \*(L"0x\*(R") and binary numbers (prefixed with \*(L"0b\*(R")
are accepted, too. Please note that octal numbers are not recognized
by \fInew()\fR, so the following will print \*(L"123\*(R":
.Sp
.Vb 1
\&        perl \-MMath::BigInt \-le \*(Aqprint Math::BigInt\->new("0123")\*(Aq
.Ve
.Sp
To convert an octal number, use \fIfrom_oct()\fR;
.Sp
.Vb 1
\&        perl \-MMath::BigInt \-le \*(Aqprint Math::BigInt\->from_oct("0123")\*(Aq
.Ve
.Sp
Currently, \fIMath::BigInt::new()\fR defaults to 0, while Math::BigInt::new('')
results in 'NaN'. This might change in the future, so use always the following
explicit forms to get a zero or NaN:
.Sp
.Vb 2
\&        $zero = Math::BigInt\->bzero();
\&        $nan = Math::BigInt\->bnan();
.Ve
.Sp
\&\f(CW\*(C`bnorm()\*(C'\fR on a BigInt object is now effectively a no-op, since the numbers 
are always stored in normalized form. If passed a string, creates a BigInt 
object from the input.
.IP "Output" 2
.IX Item "Output"
Output values are BigInt objects (normalized), except for the methods which
return a string (see \*(L"\s-1SYNOPSIS\*(R"\s0).
.Sp
Some routines (\f(CW\*(C`is_odd()\*(C'\fR, \f(CW\*(C`is_even()\*(C'\fR, \f(CW\*(C`is_zero()\*(C'\fR, \f(CW\*(C`is_one()\*(C'\fR,
\&\f(CW\*(C`is_nan()\*(C'\fR, etc.) return true or false, while others (\f(CW\*(C`bcmp()\*(C'\fR, \f(CW\*(C`bacmp()\*(C'\fR)
return either undef (if NaN is involved), <0, 0 or >0 and are suited for sort.
.SH "METHODS"
.IX Header "METHODS"
Each of the methods below (except \fIconfig()\fR, \fIaccuracy()\fR and \fIprecision()\fR)
accepts three additional parameters. These arguments \f(CW$A\fR, \f(CW$P\fR and \f(CW$R\fR
are \f(CW\*(C`accuracy\*(C'\fR, \f(CW\*(C`precision\*(C'\fR and \f(CW\*(C`round_mode\*(C'\fR. Please see the section about
\&\*(L"\s-1ACCURACY\s0 and \s-1PRECISION\*(R"\s0 for more information.
.SS "\fIconfig()\fP"
.IX Subsection "config()"
.Vb 1
\&        use Data::Dumper;
\&
\&        print Dumper ( Math::BigInt\->config() );
\&        print Math::BigInt\->config()\->{lib},"\en";
.Ve
.PP
Returns a hash containing the configuration, e.g. the version number, lib
loaded etc. The following hash keys are currently filled in with the
appropriate information.
.PP
.Vb 10
\&        key           Description
\&                      Example
\&        ============================================================
\&        lib           Name of the low\-level math library
\&                      Math::BigInt::Calc
\&        lib_version   Version of low\-level math library (see \*(Aqlib\*(Aq)
\&                      0.30
\&        class         The class name of config() you just called
\&                      Math::BigInt
\&        upgrade       To which class math operations might be upgraded
\&                      Math::BigFloat
\&        downgrade     To which class math operations might be downgraded
\&                      undef
\&        precision     Global precision
\&                      undef
\&        accuracy      Global accuracy
\&                      undef
\&        round_mode    Global round mode
\&                      even
\&        version       version number of the class you used
\&                      1.61
\&        div_scale     Fallback accuracy for div
\&                      40
\&        trap_nan      If true, traps creation of NaN via croak()
\&                      1
\&        trap_inf      If true, traps creation of +inf/\-inf via croak()
\&                      1
.Ve
.PP
The following values can be set by passing \f(CW\*(C`config()\*(C'\fR a reference to a hash:
.PP
.Vb 2
\&        trap_inf trap_nan
\&        upgrade downgrade precision accuracy round_mode div_scale
.Ve
.PP
Example:
.PP
.Vb 3
\&        $new_cfg = Math::BigInt\->config(
\&            { trap_inf => 1, precision => 5 }
\&        );
.Ve
.SS "\fIaccuracy()\fP"
.IX Subsection "accuracy()"
.Vb 3
\&    $x\->accuracy(5);         # local for $x
\&    CLASS\->accuracy(5);      # global for all members of CLASS
\&                             # Note: This also applies to new()!
\&
\&    $A = $x\->accuracy();     # read out accuracy that affects $x
\&    $A = CLASS\->accuracy();  # read out global accuracy
.Ve
.PP
Set or get the global or local accuracy, aka how many significant digits the
results have. If you set a global accuracy, then this also applies to \fInew()\fR!
.PP
Warning! The accuracy \fIsticks\fR, e.g. once you created a number under the
influence of \f(CW\*(C`CLASS\->accuracy($A)\*(C'\fR, all results from math operations with
that number will also be rounded.
.PP
In most cases, you should probably round the results explicitly using one of
\&\*(L"\fIround()\fR\*(R", \*(L"\fIbround()\fR\*(R" or \*(L"\fIbfround()\fR\*(R" or by passing the desired accuracy
to the math operation as additional parameter:
.PP
.Vb 4
\&    my $x = Math::BigInt\->new(30000);
\&    my $y = Math::BigInt\->new(7);
\&    print scalar $x\->copy()\->bdiv($y, 2);               # print 4300
\&    print scalar $x\->copy()\->bdiv($y)\->bround(2);       # print 4300
.Ve
.PP
Please see the section about \*(L"\s-1ACCURACY\s0 and \s-1PRECISION\*(R"\s0 for further details.
.PP
Value must be greater than zero. Pass an undef value to disable it:
.PP
.Vb 2
\&    $x\->accuracy(undef);
\&    Math::BigInt\->accuracy(undef);
.Ve
.PP
Returns the current accuracy. For \f(CW\*(C`$x\->accuracy()\*(C'\fR it will return either
the local accuracy, or if not defined, the global. This means the return value
represents the accuracy that will be in effect for \f(CW$x:\fR
.PP
.Vb 10
\&    $y = Math::BigInt\->new(1234567);       # unrounded
\&    print Math::BigInt\->accuracy(4),"\en";  # set 4, print 4
\&    $x = Math::BigInt\->new(123456);        # $x will be automatic\-
\&                                           # ally rounded!
\&    print "$x $y\en";                       # \*(Aq123500 1234567\*(Aq
\&    print $x\->accuracy(),"\en";             # will be 4
\&    print $y\->accuracy(),"\en";             # also 4, since global is 4
\&    print Math::BigInt\->accuracy(5),"\en";  # set to 5, print 5
\&    print $x\->accuracy(),"\en";             # still 4
\&    print $y\->accuracy(),"\en";             # 5, since global is 5
.Ve
.PP
Note: Works also for subclasses like Math::BigFloat. Each class has it's own
globals separated from Math::BigInt, but it is possible to subclass
Math::BigInt and make the globals of the subclass aliases to the ones from
Math::BigInt.
.SS "\fIprecision()\fP"
.IX Subsection "precision()"
.Vb 4
\&    $x\->precision(\-2);          # local for $x, round at the second
\&                                # digit right of the dot
\&    $x\->precision(2);           # ditto, round at the second digit left
\&                                # of the dot
\&
\&    CLASS\->precision(5);        # Global for all members of CLASS
\&                                # This also applies to new()!
\&    CLASS\->precision(\-5);       # ditto
\&
\&    $P = CLASS\->precision();    # read out global precision
\&    $P = $x\->precision();       # read out precision that affects $x
.Ve
.PP
Note: You probably want to use \*(L"\fIaccuracy()\fR\*(R" instead. With \*(L"\fIaccuracy()\fR\*(R" you
set the number of digits each result should have, with \*(L"\fIprecision()\fR\*(R" you
set the place where to round!
.PP
\&\f(CW\*(C`precision()\*(C'\fR sets or gets the global or local precision, aka at which digit
before or after the dot to round all results. A set global precision also
applies to all newly created numbers!
.PP
In Math::BigInt, passing a negative number precision has no effect since no
numbers have digits after the dot. In Math::BigFloat, it will round all
results to P digits after the dot.
.PP
Please see the section about \*(L"\s-1ACCURACY\s0 and \s-1PRECISION\*(R"\s0 for further details.
.PP
Pass an undef value to disable it:
.PP
.Vb 2
\&    $x\->precision(undef);
\&    Math::BigInt\->precision(undef);
.Ve
.PP
Returns the current precision. For \f(CW\*(C`$x\->precision()\*(C'\fR it will return either
the local precision of \f(CW$x\fR, or if not defined, the global. This means the return
value represents the prevision that will be in effect for \f(CW$x:\fR
.PP
.Vb 4
\&    $y = Math::BigInt\->new(1234567);        # unrounded
\&    print Math::BigInt\->precision(4),"\en";  # set 4, print 4
\&    $x = Math::BigInt\->new(123456);      # will be automatically rounded
\&    print $x;                               # print "120000"!
.Ve
.PP
Note: Works also for subclasses like Math::BigFloat. Each class has its
own globals separated from Math::BigInt, but it is possible to subclass
Math::BigInt and make the globals of the subclass aliases to the ones from
Math::BigInt.
.SS "\fIbrsft()\fP"
.IX Subsection "brsft()"
.Vb 1
\&        $x\->brsft($y,$n);
.Ve
.PP
Shifts \f(CW$x\fR right by \f(CW$y\fR in base \f(CW$n\fR. Default is base 2, used are usually 10 and
2, but others work, too.
.PP
Right shifting usually amounts to dividing \f(CW$x\fR by \f(CW$n\fR ** \f(CW$y\fR and truncating the
result:
.PP
.Vb 4
\&        $x = Math::BigInt\->new(10);
\&        $x\->brsft(1);                   # same as $x >> 1: 5
\&        $x = Math::BigInt\->new(1234);
\&        $x\->brsft(2,10);                # result 12
.Ve
.PP
There is one exception, and that is base 2 with negative \f(CW$x:\fR
.PP
.Vb 2
\&        $x = Math::BigInt\->new(\-5);
\&        print $x\->brsft(1);
.Ve
.PP
This will print \-3, not \-2 (as it would if you divide \-5 by 2 and truncate the
result).
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigInt\->new($str,$A,$P,$R);
.Ve
.PP
Creates a new BigInt object from a scalar or another BigInt object. The
input is accepted as decimal, hex (with leading '0x') or binary (with leading
\&'0b').
.PP
See \*(L"Input\*(R" for more info on accepted input formats.
.SS "\fIfrom_oct()\fP"
.IX Subsection "from_oct()"
.Vb 1
\&        $x = Math::BigInt\->from_oct("0775");    # input is octal
.Ve
.PP
Interpret the input as an octal string and return the corresponding value. A
\&\*(L"0\*(R" (zero) prefix is optional. A single underscore character may be placed
right after the prefix, if present, or between any two digits. If the input is
invalid, a NaN is returned.
.SS "\fIfrom_hex()\fP"
.IX Subsection "from_hex()"
.Vb 1
\&        $x = Math::BigInt\->from_hex("0xcafe");  # input is hexadecimal
.Ve
.PP
Interpret input as a hexadecimal string. A \*(L"0x\*(R" or \*(L"x\*(R" prefix is optional. A
single underscore character may be placed right after the prefix, if present,
or between any two digits. If the input is invalid, a NaN is returned.
.SS "\fIfrom_bin()\fP"
.IX Subsection "from_bin()"
.Vb 1
\&        $x = Math::BigInt\->from_bin("0b10011"); # input is binary
.Ve
.PP
Interpret the input as a binary string. A \*(L"0b\*(R" or \*(L"b\*(R" prefix is optional. A
single underscore character may be placed right after the prefix, if present,
or between any two digits. If the input is invalid, a NaN is returned.
.SS "\fIbnan()\fP"
.IX Subsection "bnan()"
.Vb 1
\&        $x = Math::BigInt\->bnan();
.Ve
.PP
Creates a new BigInt object representing NaN (Not A Number).
If used on an object, it will set it to NaN:
.PP
.Vb 1
\&        $x\->bnan();
.Ve
.SS "\fIbzero()\fP"
.IX Subsection "bzero()"
.Vb 1
\&        $x = Math::BigInt\->bzero();
.Ve
.PP
Creates a new BigInt object representing zero.
If used on an object, it will set it to zero:
.PP
.Vb 1
\&        $x\->bzero();
.Ve
.SS "\fIbinf()\fP"
.IX Subsection "binf()"
.Vb 1
\&        $x = Math::BigInt\->binf($sign);
.Ve
.PP
Creates a new BigInt object representing infinity. The optional argument is
either '\-' or '+', indicating whether you want infinity or minus infinity.
If used on an object, it will set it to infinity:
.PP
.Vb 2
\&        $x\->binf();
\&        $x\->binf(\*(Aq\-\*(Aq);
.Ve
.SS "\fIbone()\fP"
.IX Subsection "bone()"
.Vb 1
\&        $x = Math::BigInt\->binf($sign);
.Ve
.PP
Creates a new BigInt object representing one. The optional argument is
either '\-' or '+', indicating whether you want one or minus one.
If used on an object, it will set it to one:
.PP
.Vb 2
\&        $x\->bone();             # +1
\&        $x\->bone(\*(Aq\-\*(Aq);          # \-1
.Ve
.SS "\fIis_one()\fP/\fIis_zero()\fP/\fIis_nan()\fP/\fIis_inf()\fP"
.IX Subsection "is_one()/is_zero()/is_nan()/is_inf()"
.Vb 6
\&        $x\->is_zero();          # true if arg is +0
\&        $x\->is_nan();           # true if arg is NaN
\&        $x\->is_one();           # true if arg is +1
\&        $x\->is_one(\*(Aq\-\*(Aq);        # true if arg is \-1
\&        $x\->is_inf();           # true if +inf
\&        $x\->is_inf(\*(Aq\-\*(Aq);        # true if \-inf (sign is default \*(Aq+\*(Aq)
.Ve
.PP
These methods all test the BigInt for being one specific value and return
true or false depending on the input. These are faster than doing something
like:
.PP
.Vb 1
\&        if ($x == 0)
.Ve
.SS "\fIis_pos()\fP/\fIis_neg()\fP/\fIis_positive()\fP/\fIis_negative()\fP"
.IX Subsection "is_pos()/is_neg()/is_positive()/is_negative()"
.Vb 2
\&        $x\->is_pos();                   # true if > 0
\&        $x\->is_neg();                   # true if < 0
.Ve
.PP
The methods return true if the argument is positive or negative, respectively.
\&\f(CW\*(C`NaN\*(C'\fR is neither positive nor negative, while \f(CW\*(C`+inf\*(C'\fR counts as positive, and
\&\f(CW\*(C`\-inf\*(C'\fR is negative. A \f(CW\*(C`zero\*(C'\fR is neither positive nor negative.
.PP
These methods are only testing the sign, and not the value.
.PP
\&\f(CW\*(C`is_positive()\*(C'\fR and \f(CW\*(C`is_negative()\*(C'\fR are aliases to \f(CW\*(C`is_pos()\*(C'\fR and
\&\f(CW\*(C`is_neg()\*(C'\fR, respectively. \f(CW\*(C`is_positive()\*(C'\fR and \f(CW\*(C`is_negative()\*(C'\fR were
introduced in v1.36, while \f(CW\*(C`is_pos()\*(C'\fR and \f(CW\*(C`is_neg()\*(C'\fR were only introduced
in v1.68.
.SS "\fIis_odd()\fP/\fIis_even()\fP/\fIis_int()\fP"
.IX Subsection "is_odd()/is_even()/is_int()"
.Vb 3
\&        $x\->is_odd();                   # true if odd, false for even
\&        $x\->is_even();                  # true if even, false for odd
\&        $x\->is_int();                   # true if $x is an integer
.Ve
.PP
The return true when the argument satisfies the condition. \f(CW\*(C`NaN\*(C'\fR, \f(CW\*(C`+inf\*(C'\fR,
\&\f(CW\*(C`\-inf\*(C'\fR are not integers and are neither odd nor even.
.PP
In BigInt, all numbers except \f(CW\*(C`NaN\*(C'\fR, \f(CW\*(C`+inf\*(C'\fR and \f(CW\*(C`\-inf\*(C'\fR are integers.
.SS "\fIbcmp()\fP"
.IX Subsection "bcmp()"
.Vb 1
\&        $x\->bcmp($y);
.Ve
.PP
Compares \f(CW$x\fR with \f(CW$y\fR and takes the sign into account.
Returns \-1, 0, 1 or undef.
.SS "\fIbacmp()\fP"
.IX Subsection "bacmp()"
.Vb 1
\&        $x\->bacmp($y);
.Ve
.PP
Compares \f(CW$x\fR with \f(CW$y\fR while ignoring their sign. Returns \-1, 0, 1 or undef.
.SS "\fIsign()\fP"
.IX Subsection "sign()"
.Vb 1
\&        $x\->sign();
.Ve
.PP
Return the sign, of \f(CW$x\fR, meaning either \f(CW\*(C`+\*(C'\fR, \f(CW\*(C`\-\*(C'\fR, \f(CW\*(C`\-inf\*(C'\fR, \f(CW\*(C`+inf\*(C'\fR or NaN.
.PP
If you want \f(CW$x\fR to have a certain sign, use one of the following methods:
.PP
.Vb 5
\&        $x\->babs();             # \*(Aq+\*(Aq
\&        $x\->babs()\->bneg();     # \*(Aq\-\*(Aq
\&        $x\->bnan();             # \*(AqNaN\*(Aq
\&        $x\->binf();             # \*(Aq+inf\*(Aq
\&        $x\->binf(\*(Aq\-\*(Aq);          # \*(Aq\-inf\*(Aq
.Ve
.SS "\fIdigit()\fP"
.IX Subsection "digit()"
.Vb 1
\&        $x\->digit($n);       # return the nth digit, counting from right
.Ve
.PP
If \f(CW$n\fR is negative, returns the digit counting from left.
.SS "\fIbneg()\fP"
.IX Subsection "bneg()"
.Vb 1
\&        $x\->bneg();
.Ve
.PP
Negate the number, e.g. change the sign between '+' and '\-', or between '+inf'
and '\-inf', respectively. Does nothing for NaN or zero.
.SS "\fIbabs()\fP"
.IX Subsection "babs()"
.Vb 1
\&        $x\->babs();
.Ve
.PP
Set the number to its absolute value, e.g. change the sign from '\-' to '+'
and from '\-inf' to '+inf', respectively. Does nothing for NaN or positive
numbers.
.SS "\fIbsgn()\fP"
.IX Subsection "bsgn()"
.Vb 1
\&        $x\->bsgn();
.Ve
.PP
Signum function. Set the number to \-1, 0, or 1, depending on whether the
number is negative, zero, or positive, respectivly. Does not modify NaNs.
.SS "\fIbnorm()\fP"
.IX Subsection "bnorm()"
.Vb 1
\&        $x\->bnorm();                    # normalize (no\-op)
.Ve
.SS "\fIbnot()\fP"
.IX Subsection "bnot()"
.Vb 1
\&        $x\->bnot();
.Ve
.PP
Two's complement (bitwise not). This is equivalent to
.PP
.Vb 1
\&        $x\->binc()\->bneg();
.Ve
.PP
but faster.
.SS "\fIbinc()\fP"
.IX Subsection "binc()"
.Vb 1
\&        $x\->binc();             # increment x by 1
.Ve
.SS "\fIbdec()\fP"
.IX Subsection "bdec()"
.Vb 1
\&        $x\->bdec();             # decrement x by 1
.Ve
.SS "\fIbadd()\fP"
.IX Subsection "badd()"
.Vb 1
\&        $x\->badd($y);           # addition (add $y to $x)
.Ve
.SS "\fIbsub()\fP"
.IX Subsection "bsub()"
.Vb 1
\&        $x\->bsub($y);           # subtraction (subtract $y from $x)
.Ve
.SS "\fIbmul()\fP"
.IX Subsection "bmul()"
.Vb 1
\&        $x\->bmul($y);           # multiplication (multiply $x by $y)
.Ve
.SS "\fIbmuladd()\fP"
.IX Subsection "bmuladd()"
.Vb 1
\&        $x\->bmuladd($y,$z);
.Ve
.PP
Multiply \f(CW$x\fR by \f(CW$y\fR, and then add \f(CW$z\fR to the result,
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIbdiv()\fP"
.IX Subsection "bdiv()"
.Vb 2
\&        $x\->bdiv($y);           # divide, set $x to quotient
\&                                # return (quo,rem) or quo if scalar
.Ve
.SS "\fIbmod()\fP"
.IX Subsection "bmod()"
.Vb 1
\&        $x\->bmod($y);           # modulus (x % y)
.Ve
.SS "\fIbmodinv()\fP"
.IX Subsection "bmodinv()"
.Vb 1
\&        $x\->bmodinv($mod);      # modular multiplicative inverse
.Ve
.PP
Returns the multiplicative inverse of \f(CW$x\fR modulo \f(CW$mod\fR. If
.PP
.Vb 1
\&        $y = $x \-> copy() \-> bmodinv($mod)
.Ve
.PP
then \f(CW$y\fR is the number closest to zero, and with the same sign as \f(CW$mod\fR,
satisfying
.PP
.Vb 1
\&        ($x * $y) % $mod = 1 % $mod
.Ve
.PP
If \f(CW$x\fR and \f(CW$y\fR are non-zero, they must be relative primes, i.e.,
\&\f(CW\*(C`bgcd($y, $mod)==1\*(C'\fR. '\f(CW\*(C`NaN\*(C'\fR' is returned when no modular multiplicative
inverse exists.
.SS "\fIbmodpow()\fP"
.IX Subsection "bmodpow()"
.Vb 2
\&        $num\->bmodpow($exp,$mod);       # modular exponentiation
\&                                        # ($num**$exp % $mod)
.Ve
.PP
Returns the value of \f(CW$num\fR taken to the power \f(CW$exp\fR in the modulus
\&\f(CW$mod\fR using binary exponentiation.  \f(CW\*(C`bmodpow\*(C'\fR is far superior to
writing
.PP
.Vb 1
\&        $num ** $exp % $mod
.Ve
.PP
because it is much faster \- it reduces internal variables into
the modulus whenever possible, so it operates on smaller numbers.
.PP
\&\f(CW\*(C`bmodpow\*(C'\fR also supports negative exponents.
.PP
.Vb 1
\&        bmodpow($num, \-1, $mod)
.Ve
.PP
is exactly equivalent to
.PP
.Vb 1
\&        bmodinv($num, $mod)
.Ve
.SS "\fIbpow()\fP"
.IX Subsection "bpow()"
.Vb 1
\&        $x\->bpow($y);                 # power of arguments (x ** y)
.Ve
.SS "\fIblog()\fP"
.IX Subsection "blog()"
.Vb 1
\&        $x\->blog($base, $accuracy);   # logarithm of x to the base $base
.Ve
.PP
If \f(CW$base\fR is not defined, Euler's number (e) is used:
.PP
.Vb 1
\&        print $x\->blog(undef, 100);   # log(x) to 100 digits
.Ve
.SS "\fIbexp()\fP"
.IX Subsection "bexp()"
.Vb 1
\&        $x\->bexp($accuracy);          # calculate e ** X
.Ve
.PP
Calculates the expression \f(CW\*(C`e ** $x\*(C'\fR where \f(CW\*(C`e\*(C'\fR is Euler's number.
.PP
This method was added in v1.82 of Math::BigInt (April 2007).
.PP
See also \*(L"\fIblog()\fR\*(R".
.SS "\fIbnok()\fP"
.IX Subsection "bnok()"
.Vb 1
\&        $x\->bnok($y);        # x over y (binomial coefficient n over k)
.Ve
.PP
Calculates the binomial coefficient n over k, also called the \*(L"choose\*(R"
function. The result is equivalent to:
.PP
.Vb 3
\&        ( n )      n!
\&        | \- |  = \-\-\-\-\-\-\-
\&        ( k )    k!(n\-k)!
.Ve
.PP
This method was added in v1.84 of Math::BigInt (April 2007).
.SS "\fIbpi()\fP"
.IX Subsection "bpi()"
.Vb 1
\&        print Math::BigInt\->bpi(100), "\en";             # 3
.Ve
.PP
Returns \s-1PI\s0 truncated to an integer, with the argument being ignored. This means
under BigInt this always returns \f(CW3\fR.
.PP
If upgrading is in effect, returns \s-1PI,\s0 rounded to N digits with the
current rounding mode:
.PP
.Vb 4
\&        use Math::BigFloat;
\&        use Math::BigInt upgrade => Math::BigFloat;
\&        print Math::BigInt\->bpi(3), "\en";               # 3.14
\&        print Math::BigInt\->bpi(100), "\en";             # 3.1415....
.Ve
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIbcos()\fP"
.IX Subsection "bcos()"
.Vb 2
\&        my $x = Math::BigInt\->new(1);
\&        print $x\->bcos(100), "\en";
.Ve
.PP
Calculate the cosinus of \f(CW$x\fR, modifying \f(CW$x\fR in place.
.PP
In BigInt, unless upgrading is in effect, the result is truncated to an
integer.
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIbsin()\fP"
.IX Subsection "bsin()"
.Vb 2
\&        my $x = Math::BigInt\->new(1);
\&        print $x\->bsin(100), "\en";
.Ve
.PP
Calculate the sinus of \f(CW$x\fR, modifying \f(CW$x\fR in place.
.PP
In BigInt, unless upgrading is in effect, the result is truncated to an
integer.
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIbatan2()\fP"
.IX Subsection "batan2()"
.Vb 3
\&        my $x = Math::BigInt\->new(1);
\&        my $y = Math::BigInt\->new(1);
\&        print $y\->batan2($x), "\en";
.Ve
.PP
Calculate the arcus tangens of \f(CW$y\fR divided by \f(CW$x\fR, modifying \f(CW$y\fR in place.
.PP
In BigInt, unless upgrading is in effect, the result is truncated to an
integer.
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIbatan()\fP"
.IX Subsection "batan()"
.Vb 2
\&        my $x = Math::BigFloat\->new(0.5);
\&        print $x\->batan(100), "\en";
.Ve
.PP
Calculate the arcus tangens of \f(CW$x\fR, modifying \f(CW$x\fR in place.
.PP
In BigInt, unless upgrading is in effect, the result is truncated to an
integer.
.PP
This method was added in v1.87 of Math::BigInt (June 2007).
.SS "\fIblsft()\fP"
.IX Subsection "blsft()"
.Vb 2
\&        $x\->blsft($y);          # left shift in base 2
\&        $x\->blsft($y,$n);       # left shift, in base $n (like 10)
.Ve
.SS "\fIbrsft()\fP"
.IX Subsection "brsft()"
.Vb 2
\&        $x\->brsft($y);          # right shift in base 2
\&        $x\->brsft($y,$n);       # right shift, in base $n (like 10)
.Ve
.SS "\fIband()\fP"
.IX Subsection "band()"
.Vb 1
\&        $x\->band($y);                   # bitwise and
.Ve
.SS "\fIbior()\fP"
.IX Subsection "bior()"
.Vb 1
\&        $x\->bior($y);                   # bitwise inclusive or
.Ve
.SS "\fIbxor()\fP"
.IX Subsection "bxor()"
.Vb 1
\&        $x\->bxor($y);                   # bitwise exclusive or
.Ve
.SS "\fIbnot()\fP"
.IX Subsection "bnot()"
.Vb 1
\&        $x\->bnot();                     # bitwise not (two\*(Aqs complement)
.Ve
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();                    # calculate square\-root
.Ve
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($N);
.Ve
.PP
Calculates the N'th root of \f(CW$x\fR.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();                     # factorial of $x (1*2*3*4*..$x)
.Ve
.SS "\fIround()\fP"
.IX Subsection "round()"
.Vb 1
\&        $x\->round($A,$P,$round_mode);
.Ve
.PP
Round \f(CW$x\fR to accuracy \f(CW$A\fR or precision \f(CW$P\fR using the round mode
\&\f(CW$round_mode\fR.
.SS "\fIbround()\fP"
.IX Subsection "bround()"
.Vb 1
\&        $x\->bround($N);               # accuracy: preserve $N digits
.Ve
.SS "\fIbfround()\fP"
.IX Subsection "bfround()"
.Vb 1
\&        $x\->bfround($N);
.Ve
.PP
If N is > 0, rounds to the Nth digit from the left. If N < 0, rounds to
the Nth digit after the dot. Since BigInts are integers, the case N < 0
is a no-op for them.
.PP
Examples:
.PP
.Vb 6
\&        Input           N               Result
\&        ===================================================
\&        123456.123456   3               123500
\&        123456.123456   2               123450
\&        123456.123456   \-2              123456.12
\&        123456.123456   \-3              123456.123
.Ve
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Set \f(CW$x\fR to the integer less or equal than \f(CW$x\fR. This is a no-op in BigInt, but
does change \f(CW$x\fR in BigFloat.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR to the integer greater or equal than \f(CW$x\fR. This is a no-op in BigInt, but
does change \f(CW$x\fR in BigFloat.
.SS "\fIbgcd()\fP"
.IX Subsection "bgcd()"
.Vb 1
\&        bgcd(@values);          # greatest common divisor (no OO style)
.Ve
.SS "\fIblcm()\fP"
.IX Subsection "blcm()"
.Vb 1
\&        blcm(@values);          # lowest common multiple (no OO style)
.Ve
.PP
head2 \fIlength()\fR
.PP
.Vb 2
\&        $x\->length();
\&        ($xl,$fl) = $x\->length();
.Ve
.PP
Returns the number of digits in the decimal representation of the number.
In list context, returns the length of the integer and fraction part. For
BigInt's, the length of the fraction part will always be 0.
.SS "\fIexponent()\fP"
.IX Subsection "exponent()"
.Vb 1
\&        $x\->exponent();
.Ve
.PP
Return the exponent of \f(CW$x\fR as BigInt.
.SS "\fImantissa()\fP"
.IX Subsection "mantissa()"
.Vb 1
\&        $x\->mantissa();
.Ve
.PP
Return the signed mantissa of \f(CW$x\fR as BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        $x\->parts();    # return (mantissa,exponent) as BigInt
.Ve
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        $x\->copy();     # make a true copy of $x (unlike $y = $x;)
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 1
\&        $x\->as_int();
.Ve
.PP
Returns \f(CW$x\fR as a BigInt (truncated towards zero). In BigInt this is the same as
\&\f(CW\*(C`copy()\*(C'\fR.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR is an alias to this method. \f(CW\*(C`as_number\*(C'\fR was introduced in
v1.22, while \f(CW\*(C`as_int()\*(C'\fR was only introduced in v1.68.
.SS "\fIbstr()\fP"
.IX Subsection "bstr()"
.Vb 1
\&        $x\->bstr();
.Ve
.PP
Returns a normalized string representation of \f(CW$x\fR.
.SS "\fIbsstr()\fP"
.IX Subsection "bsstr()"
.Vb 1
\&        $x\->bsstr();    # normalized string in scientific notation
.Ve
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 1
\&        $x\->as_hex();   # as signed hexadecimal string with prefixed 0x
.Ve
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 1
\&        $x\->as_bin();   # as signed binary string with prefixed 0b
.Ve
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 1
\&        $x\->as_oct();   # as signed octal string with prefixed 0
.Ve
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        print $x\->numify();
.Ve
.PP
This returns a normal Perl scalar from \f(CW$x\fR. It is used automatically
whenever a scalar is needed, for instance in array index operations.
.PP
This loses precision, to avoid this use \fIas_int()\fR instead.
.SS "\fImodify()\fP"
.IX Subsection "modify()"
.Vb 1
\&        $x\->modify(\*(Aqbpowd\*(Aq);
.Ve
.PP
This method returns 0 if the object can be modified with the given
operation, or 1 if not.
.PP
This is used for instance by Math::BigInt::Constant.
.SS "\fIupgrade()\fP/\fIdowngrade()\fP"
.IX Subsection "upgrade()/downgrade()"
Set/get the class for downgrade/upgrade operations. Thuis is used
for instance by bignum. The defaults are '', thus the following
operation will create a BigInt, not a BigFloat:
.PP
.Vb 2
\&        my $i = Math::BigInt\->new(123);
\&        my $f = Math::BigFloat\->new(\*(Aq123.1\*(Aq);
\&
\&        print $i + $f,"\en";                     # print 246
.Ve
.SS "\fIdiv_scale()\fP"
.IX Subsection "div_scale()"
Set/get the number of digits for the default precision in divide
operations.
.SS "\fIround_mode()\fP"
.IX Subsection "round_mode()"
Set/get the current round mode.
.SH "ACCURACY and PRECISION"
.IX Header "ACCURACY and PRECISION"
Since version v1.33, Math::BigInt and Math::BigFloat have full support for
accuracy and precision based rounding, both automatically after every
operation, as well as manually.
.PP
This section describes the accuracy/precision handling in Math::Big* as it
used to be and as it is now, complete with an explanation of all terms and
abbreviations.
.PP
Not yet implemented things (but with correct description) are marked with '!',
things that need to be answered are marked with '?'.
.PP
In the next paragraph follows a short description of terms used here (because
these may differ from terms used by others people or documentation).
.PP
During the rest of this document, the shortcuts A (for accuracy), P (for
precision), F (fallback) and R (rounding mode) will be used.
.SS "Precision P"
.IX Subsection "Precision P"
A fixed number of digits before (positive) or after (negative)
the decimal point. For example, 123.45 has a precision of \-2. 0 means an
integer like 123 (or 120). A precision of 2 means two digits to the left
of the decimal point are zero, so 123 with P = 1 becomes 120. Note that
numbers with zeros before the decimal point may have different precisions,
because 1200 can have p = 0, 1 or 2 (depending on what the initial value
was). It could also have p < 0, when the digits after the decimal point
are zero.
.PP
The string output (of floating point numbers) will be padded with zeros:
.PP
.Vb 9
\&        Initial value   P       A       Result          String
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        1234.01         \-3              1000            1000
\&        1234            \-2              1200            1200
\&        1234.5          \-1              1230            1230
\&        1234.001        1               1234            1234.0
\&        1234.01         0               1234            1234
\&        1234.01         2               1234.01         1234.01
\&        1234.01         5               1234.01         1234.01000
.Ve
.PP
For BigInts, no padding occurs.
.SS "Accuracy A"
.IX Subsection "Accuracy A"
Number of significant digits. Leading zeros are not counted. A
number may have an accuracy greater than the non-zero digits
when there are zeros in it or trailing zeros. For example, 123.456 has
A of 6, 10203 has 5, 123.0506 has 7, 123.450000 has 8 and 0.000123 has 3.
.PP
The string output (of floating point numbers) will be padded with zeros:
.PP
.Vb 5
\&        Initial value   P       A       Result          String
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        1234.01                 3       1230            1230
\&        1234.01                 6       1234.01         1234.01
\&        1234.1                  8       1234.1          1234.1000
.Ve
.PP
For BigInts, no padding occurs.
.SS "Fallback F"
.IX Subsection "Fallback F"
When both A and P are undefined, this is used as a fallback accuracy when
dividing numbers.
.SS "Rounding mode R"
.IX Subsection "Rounding mode R"
When rounding a number, different 'styles' or 'kinds'
of rounding are possible. (Note that random rounding, as in
Math::Round, is not implemented.)
.IP "'trunc'" 2
.IX Item "'trunc'"
truncation invariably removes all digits following the
rounding place, replacing them with zeros. Thus, 987.65 rounded
to tens (P=1) becomes 980, and rounded to the fourth sigdig
becomes 987.6 (A=4). 123.456 rounded to the second place after the
decimal point (P=\-2) becomes 123.46.
.Sp
All other implemented styles of rounding attempt to round to the
\&\*(L"nearest digit.\*(R" If the digit D immediately to the right of the
rounding place (skipping the decimal point) is greater than 5, the
number is incremented at the rounding place (possibly causing a
cascade of incrementation): e.g. when rounding to units, 0.9 rounds
to 1, and \-19.9 rounds to \-20. If D < 5, the number is similarly
truncated at the rounding place: e.g. when rounding to units, 0.4
rounds to 0, and \-19.4 rounds to \-19.
.Sp
However the results of other styles of rounding differ if the
digit immediately to the right of the rounding place (skipping the
decimal point) is 5 and if there are no digits, or no digits other
than 0, after that 5. In such cases:
.IP "'even'" 2
.IX Item "'even'"
rounds the digit at the rounding place to 0, 2, 4, 6, or 8
if it is not already. E.g., when rounding to the first sigdig, 0.45
becomes 0.4, \-0.55 becomes \-0.6, but 0.4501 becomes 0.5.
.IP "'odd'" 2
.IX Item "'odd'"
rounds the digit at the rounding place to 1, 3, 5, 7, or 9 if
it is not already. E.g., when rounding to the first sigdig, 0.45
becomes 0.5, \-0.55 becomes \-0.5, but 0.5501 becomes 0.6.
.IP "'+inf'" 2
.IX Item "'+inf'"
round to plus infinity, i.e. always round up. E.g., when
rounding to the first sigdig, 0.45 becomes 0.5, \-0.55 becomes \-0.5,
and 0.4501 also becomes 0.5.
.IP "'\-inf'" 2
.IX Item "'-inf'"
round to minus infinity, i.e. always round down. E.g., when
rounding to the first sigdig, 0.45 becomes 0.4, \-0.55 becomes \-0.6,
but 0.4501 becomes 0.5.
.IP "'zero'" 2
.IX Item "'zero'"
round to zero, i.e. positive numbers down, negative ones up.
E.g., when rounding to the first sigdig, 0.45 becomes 0.4, \-0.55
becomes \-0.5, but 0.4501 becomes 0.5.
.IP "'common'" 2
.IX Item "'common'"
round up if the digit immediately to the right of the rounding place
is 5 or greater, otherwise round down. E.g., 0.15 becomes 0.2 and
0.149 becomes 0.1.
.PP
The handling of A & P in \s-1MBI/MBF \s0(the old core code shipped with Perl
versions <= 5.7.2) is like this:
.IP "Precision" 2
.IX Item "Precision"
.Vb 3
\&  * ffround($p) is able to round to $p number of digits after the decimal
\&    point
\&  * otherwise P is unused
.Ve
.IP "Accuracy (significant digits)" 2
.IX Item "Accuracy (significant digits)"
.Vb 10
\&  * fround($a) rounds to $a significant digits
\&  * only fdiv() and fsqrt() take A as (optional) parameter
\&    + other operations simply create the same number (fneg etc), or more (fmul)
\&      of digits
\&    + rounding/truncating is only done when explicitly calling one of fround
\&      or ffround, and never for BigInt (not implemented)
\&  * fsqrt() simply hands its accuracy argument over to fdiv.
\&  * the documentation and the comment in the code indicate two different ways
\&    on how fdiv() determines the maximum number of digits it should calculate,
\&    and the actual code does yet another thing
\&    POD:
\&      max($Math::BigFloat::div_scale,length(dividend)+length(divisor))
\&    Comment:
\&      result has at most max(scale, length(dividend), length(divisor)) digits
\&    Actual code:
\&      scale = max(scale, length(dividend)\-1,length(divisor)\-1);
\&      scale += length(divisor) \- length(dividend);
\&    So for lx = 3, ly = 9, scale = 10, scale will actually be 16 (10+9\-3).
\&    Actually, the \*(Aqdifference\*(Aq added to the scale is calculated from the
\&    number of "significant digits" in dividend and divisor, which is derived
\&    by looking at the length of the mantissa. Which is wrong, since it includes
\&    the + sign (oops) and actually gets 2 for \*(Aq+100\*(Aq and 4 for \*(Aq+101\*(Aq. Oops
\&    again. Thus 124/3 with div_scale=1 will get you \*(Aq41.3\*(Aq based on the strange
\&    assumption that 124 has 3 significant digits, while 120/7 will get you
\&    \*(Aq17\*(Aq, not \*(Aq17.1\*(Aq since 120 is thought to have 2 significant digits.
\&    The rounding after the division then uses the remainder and $y to determine
\&    whether it must round up or down.
\& ?  I have no idea which is the right way. That\*(Aqs why I used a slightly more
\& ?  simple scheme and tweaked the few failing testcases to match it.
.Ve
.PP
This is how it works now:
.IP "Setting/Accessing" 2
.IX Item "Setting/Accessing"
.Vb 10
\&  * You can set the A global via Math::BigInt\->accuracy() or
\&    Math::BigFloat\->accuracy() or whatever class you are using.
\&  * You can also set P globally by using Math::SomeClass\->precision()
\&    likewise.
\&  * Globals are classwide, and not inherited by subclasses.
\&  * to undefine A, use Math::SomeCLass\->accuracy(undef);
\&  * to undefine P, use Math::SomeClass\->precision(undef);
\&  * Setting Math::SomeClass\->accuracy() clears automatically
\&    Math::SomeClass\->precision(), and vice versa.
\&  * To be valid, A must be > 0, P can have any value.
\&  * If P is negative, this means round to the P\*(Aqth place to the right of the
\&    decimal point; positive values mean to the left of the decimal point.
\&    P of 0 means round to integer.
\&  * to find out the current global A, use Math::SomeClass\->accuracy()
\&  * to find out the current global P, use Math::SomeClass\->precision()
\&  * use $x\->accuracy() respective $x\->precision() for the local
\&    setting of $x.
\&  * Please note that $x\->accuracy() respective $x\->precision()
\&    return eventually defined global A or P, when $x\*(Aqs A or P is not
\&    set.
.Ve
.IP "Creating numbers" 2
.IX Item "Creating numbers"
.Vb 12
\&  * When you create a number, you can give the desired A or P via:
\&    $x = Math::BigInt\->new($number,$A,$P);
\&  * Only one of A or P can be defined, otherwise the result is NaN
\&  * If no A or P is give ($x = Math::BigInt\->new($number) form), then the
\&    globals (if set) will be used. Thus changing the global defaults later on
\&    will not change the A or P of previously created numbers (i.e., A and P of
\&    $x will be what was in effect when $x was created)
\&  * If given undef for A and P, NO rounding will occur, and the globals will
\&    NOT be used. This is used by subclasses to create numbers without
\&    suffering rounding in the parent. Thus a subclass is able to have its own
\&    globals enforced upon creation of a number by using
\&    $x = Math::BigInt\->new($number,undef,undef):
\&
\&        use Math::BigInt::SomeSubclass;
\&        use Math::BigInt;
\&
\&        Math::BigInt\->accuracy(2);
\&        Math::BigInt::SomeSubClass\->accuracy(3);
\&        $x = Math::BigInt::SomeSubClass\->new(1234);
\&
\&    $x is now 1230, and not 1200. A subclass might choose to implement
\&    this otherwise, e.g. falling back to the parent\*(Aqs A and P.
.Ve
.IP "Usage" 2
.IX Item "Usage"
.Vb 7
\&  * If A or P are enabled/defined, they are used to round the result of each
\&    operation according to the rules below
\&  * Negative P is ignored in Math::BigInt, since BigInts never have digits
\&    after the decimal point
\&  * Math::BigFloat uses Math::BigInt internally, but setting A or P inside
\&    Math::BigInt as globals does not tamper with the parts of a BigFloat.
\&    A flag is used to mark all Math::BigFloat numbers as \*(Aqnever round\*(Aq.
.Ve
.IP "Precedence" 2
.IX Item "Precedence"
.Vb 10
\&  * It only makes sense that a number has only one of A or P at a time.
\&    If you set either A or P on one object, or globally, the other one will
\&    be automatically cleared.
\&  * If two objects are involved in an operation, and one of them has A in
\&    effect, and the other P, this results in an error (NaN).
\&  * A takes precedence over P (Hint: A comes before P).
\&    If neither of them is defined, nothing is used, i.e. the result will have
\&    as many digits as it can (with an exception for fdiv/fsqrt) and will not
\&    be rounded.
\&  * There is another setting for fdiv() (and thus for fsqrt()). If neither of
\&    A or P is defined, fdiv() will use a fallback (F) of $div_scale digits.
\&    If either the dividend\*(Aqs or the divisor\*(Aqs mantissa has more digits than
\&    the value of F, the higher value will be used instead of F.
\&    This is to limit the digits (A) of the result (just consider what would
\&    happen with unlimited A and P in the case of 1/3 :\-)
\&  * fdiv will calculate (at least) 4 more digits than required (determined by
\&    A, P or F), and, if F is not used, round the result
\&    (this will still fail in the case of a result like 0.12345000000001 with A
\&    or P of 5, but this can not be helped \- or can it?)
\&  * Thus you can have the math done by on Math::Big* class in two modi:
\&    + never round (this is the default):
\&      This is done by setting A and P to undef. No math operation
\&      will round the result, with fdiv() and fsqrt() as exceptions to guard
\&      against overflows. You must explicitly call bround(), bfround() or
\&      round() (the latter with parameters).
\&      Note: Once you have rounded a number, the settings will \*(Aqstick\*(Aq on it
\&      and \*(Aqinfect\*(Aq all other numbers engaged in math operations with it, since
\&      local settings have the highest precedence. So, to get SaferRound[tm],
\&      use a copy() before rounding like this:
\&
\&        $x = Math::BigFloat\->new(12.34);
\&        $y = Math::BigFloat\->new(98.76);
\&        $z = $x * $y;                           # 1218.6984
\&        print $x\->copy()\->fround(3);            # 12.3 (but A is now 3!)
\&        $z = $x * $y;                           # still 1218.6984, without
\&                                                # copy would have been 1210!
\&
\&    + round after each op:
\&      After each single operation (except for testing like is_zero()), the
\&      method round() is called and the result is rounded appropriately. By
\&      setting proper values for A and P, you can have all\-the\-same\-A or
\&      all\-the\-same\-P modes. For example, Math::Currency might set A to undef,
\&      and P to \-2, globally.
\&
\& ?Maybe an extra option that forbids local A & P settings would be in order,
\& ?so that intermediate rounding does not \*(Aqpoison\*(Aq further math?
.Ve
.IP "Overriding globals" 2
.IX Item "Overriding globals"
.Vb 10
\&  * you will be able to give A, P and R as an argument to all the calculation
\&    routines; the second parameter is A, the third one is P, and the fourth is
\&    R (shift right by one for binary operations like badd). P is used only if
\&    the first parameter (A) is undefined. These three parameters override the
\&    globals in the order detailed as follows, i.e. the first defined value
\&    wins:
\&    (local: per object, global: global default, parameter: argument to sub)
\&      + parameter A
\&      + parameter P
\&      + local A (if defined on both of the operands: smaller one is taken)
\&      + local P (if defined on both of the operands: bigger one is taken)
\&      + global A
\&      + global P
\&      + global F
\&  * fsqrt() will hand its arguments to fdiv(), as it used to, only now for two
\&    arguments (A and P) instead of one
.Ve
.IP "Local settings" 2
.IX Item "Local settings"
.Vb 5
\&  * You can set A or P locally by using $x\->accuracy() or
\&    $x\->precision()
\&    and thus force different A and P for different objects/numbers.
\&  * Setting A or P this way immediately rounds $x to the new value.
\&  * $x\->accuracy() clears $x\->precision(), and vice versa.
.Ve
.IP "Rounding" 2
.IX Item "Rounding"
.Vb 10
\&  * the rounding routines will use the respective global or local settings.
\&    fround()/bround() is for accuracy rounding, while ffround()/bfround()
\&    is for precision
\&  * the two rounding functions take as the second parameter one of the
\&    following rounding modes (R):
\&    \*(Aqeven\*(Aq, \*(Aqodd\*(Aq, \*(Aq+inf\*(Aq, \*(Aq\-inf\*(Aq, \*(Aqzero\*(Aq, \*(Aqtrunc\*(Aq, \*(Aqcommon\*(Aq
\&  * you can set/get the global R by using Math::SomeClass\->round_mode()
\&    or by setting $Math::SomeClass::round_mode
\&  * after each operation, $result\->round() is called, and the result may
\&    eventually be rounded (that is, if A or P were set either locally,
\&    globally or as parameter to the operation)
\&  * to manually round a number, call $x\->round($A,$P,$round_mode);
\&    this will round the number by using the appropriate rounding function
\&    and then normalize it.
\&  * rounding modifies the local settings of the number:
\&
\&        $x = Math::BigFloat\->new(123.456);
\&        $x\->accuracy(5);
\&        $x\->bround(4);
\&
\&    Here 4 takes precedence over 5, so 123.5 is the result and $x\->accuracy()
\&    will be 4 from now on.
.Ve
.IP "Default values" 2
.IX Item "Default values"
.Vb 4
\&  * R: \*(Aqeven\*(Aq
\&  * F: 40
\&  * A: undef
\&  * P: undef
.Ve
.IP "Remarks" 2
.IX Item "Remarks"
.Vb 5
\&  * The defaults are set up so that the new code gives the same results as
\&    the old code (except in a few cases on fdiv):
\&    + Both A and P are undefined and thus will not be used for rounding
\&      after each operation.
\&    + round() is thus a no\-op, unless given extra parameters A and P
.Ve
.SH "Infinity and Not a Number"
.IX Header "Infinity and Not a Number"
While BigInt has extensive handling of inf and NaN, certain quirks remain.
.IP "\fIoct()\fR/\fIhex()\fR" 2
.IX Item "oct()/hex()"
These perl routines currently (as of Perl v.5.8.6) cannot handle passed
inf.
.Sp
.Vb 9
\&        te@linux:~> perl \-wle \*(Aqprint 2 ** 3333\*(Aq
\&        inf
\&        te@linux:~> perl \-wle \*(Aqprint 2 ** 3333 == 2 ** 3333\*(Aq
\&        1
\&        te@linux:~> perl \-wle \*(Aqprint oct(2 ** 3333)\*(Aq
\&        0
\&        te@linux:~> perl \-wle \*(Aqprint hex(2 ** 3333)\*(Aq
\&        Illegal hexadecimal digit \*(Aqi\*(Aq ignored at \-e line 1.
\&        0
.Ve
.Sp
The same problems occur if you pass them Math::BigInt\->\fIbinf()\fR objects. Since
overloading these routines is not possible, this cannot be fixed from BigInt.
.IP "==, !=, <, >, <=, >= with NaNs" 2
.IX Item "==, !=, <, >, <=, >= with NaNs"
BigInt's \fIbcmp()\fR routine currently returns undef to signal that a NaN was
involved in a comparison. However, the overload code turns that into
either 1 or '' and thus operations like \f(CW\*(C`NaN != NaN\*(C'\fR might return
wrong values.
.IP "log(\-inf)" 2
.IX Item "log(-inf)"
\&\f(CW\*(C`log(\-inf)\*(C'\fR is highly weird. Since log(\-x)=pi*i+log(x), then
log(\-inf)=pi*i+inf. However, since the imaginary part is finite, the real
infinity \*(L"overshadows\*(R" it, so the number might as well just be infinity.
However, the result is a complex number, and since BigInt/BigFloat can only
have real numbers as results, the result is NaN.
.IP "\fIexp()\fR, \fIcos()\fR, \fIsin()\fR, \fIatan2()\fR" 2
.IX Item "exp(), cos(), sin(), atan2()"
These all might have problems handling infinity right.
.SH "INTERNALS"
.IX Header "INTERNALS"
The actual numbers are stored as unsigned big integers (with separate sign).
.PP
You should neither care about nor depend on the internal representation; it
might change without notice. Use \fB\s-1ONLY\s0\fR method calls like \f(CW\*(C`$x\->sign();\*(C'\fR
instead relying on the internal representation.
.SS "\s-1MATH LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
Math with the numbers is done (by default) by a module called
\&\f(CW\*(C`Math::BigInt::Calc\*(C'\fR. This is equivalent to saying:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqCalc\*(Aq;
.Ve
.PP
You can change this backend library by using:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqGMP\*(Aq;
.Ve
.PP
\&\fBNote\fR: General purpose packages should not be explicit about the library
to use; let the script author decide which is best.
.PP
If your script works with huge numbers and Calc is too slow for them,
you can also for the loading of one of these libraries and if none
of them can be used, the code will die:
.PP
.Vb 1
\&        use Math::BigInt only => \*(AqGMP,Pari\*(Aq;
.Ve
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
The library that is loaded last will be used. Note that this can be
overwritten at any time by loading a different library, and numbers
constructed with different libraries cannot be used in math operations
together.
.PP
\fIWhat library to use?\fR
.IX Subsection "What library to use?"
.PP
\&\fBNote\fR: General purpose packages should not be explicit about the library
to use; let the script author decide which is best.
.PP
Math::BigInt::GMP and Math::BigInt::Pari are in cases involving big
numbers much faster than Calc, however it is slower when dealing with very
small numbers (less than about 20 digits) and when converting very large
numbers to decimal (for instance for printing, rounding, calculating their
length in decimal etc).
.PP
So please select carefully what library you want to use.
.PP
Different low-level libraries use different formats to store the numbers.
However, you should \fB\s-1NOT\s0\fR depend on the number having a specific format
internally.
.PP
See the respective math library module documentation for further details.
.SS "\s-1SIGN\s0"
.IX Subsection "SIGN"
The sign is either '+', '\-', 'NaN', '+inf' or '\-inf'.
.PP
A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '\-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
\&'\-inf' when dividing any negative number by 0.
.SS "\fImantissa()\fP, \fIexponent()\fP and \fIparts()\fP"
.IX Subsection "mantissa(), exponent() and parts()"
\&\f(CW\*(C`mantissa()\*(C'\fR and \f(CW\*(C`exponent()\*(C'\fR return the said parts of the BigInt such
that:
.PP
.Vb 4
\&        $m = $x\->mantissa();
\&        $e = $x\->exponent();
\&        $y = $m * ( 10 ** $e );
\&        print "ok\en" if $x == $y;
.Ve
.PP
\&\f(CW\*(C`($m,$e) = $x\->parts()\*(C'\fR is just a shortcut that gives you both of them
in one go. Both the returned mantissa and exponent have a sign.
.PP
Currently, for BigInts \f(CW$e\fR is always 0, except +inf and \-inf, where it is
\&\f(CW\*(C`+inf\*(C'\fR; and for NaN, where it is \f(CW\*(C`NaN\*(C'\fR; and for \f(CW\*(C`$x == 0\*(C'\fR, where it is \f(CW1\fR
(to be compatible with Math::BigFloat's internal representation of a zero as
\&\f(CW0E1\fR).
.PP
\&\f(CW$m\fR is currently just a copy of the original number. The relation between
\&\f(CW$e\fR and \f(CW$m\fR will stay always the same, though their real values might
change.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  use Math::BigInt;
\&
\&  sub bint { Math::BigInt\->new(shift); }
\&
\&  $x = Math::BigInt\->bstr("1234")       # string "1234"
\&  $x = "$x";                            # same as bstr()
\&  $x = Math::BigInt\->bneg("1234");      # BigInt "\-1234"
\&  $x = Math::BigInt\->babs("\-12345");    # BigInt "12345"
\&  $x = Math::BigInt\->bnorm("\-0.00");    # BigInt "0"
\&  $x = bint(1) + bint(2);               # BigInt "3"
\&  $x = bint(1) + "2";                   # ditto (auto\-BigIntify of "2")
\&  $x = bint(1);                         # BigInt "1"
\&  $x = $x + 5 / 2;                      # BigInt "3"
\&  $x = $x ** 3;                         # BigInt "27"
\&  $x *= 2;                              # BigInt "54"
\&  $x = Math::BigInt\->new(0);            # BigInt "0"
\&  $x\-\-;                                 # BigInt "\-1"
\&  $x = Math::BigInt\->badd(4,5)          # BigInt "9"
\&  print $x\->bsstr();                    # 9e+0
.Ve
.PP
Examples for rounding:
.PP
.Vb 2
\&  use Math::BigFloat;
\&  use Test;
\&
\&  $x = Math::BigFloat\->new(123.4567);
\&  $y = Math::BigFloat\->new(123.456789);
\&  Math::BigFloat\->accuracy(4);          # no more A than 4
\&
\&  ok ($x\->copy()\->fround(),123.4);      # even rounding
\&  print $x\->copy()\->fround(),"\en";      # 123.4
\&  Math::BigFloat\->round_mode(\*(Aqodd\*(Aq);    # round to odd
\&  print $x\->copy()\->fround(),"\en";      # 123.5
\&  Math::BigFloat\->accuracy(5);          # no more A than 5
\&  Math::BigFloat\->round_mode(\*(Aqodd\*(Aq);    # round to odd
\&  print $x\->copy()\->fround(),"\en";      # 123.46
\&  $y = $x\->copy()\->fround(4),"\en";      # A = 4: 123.4
\&  print "$y, ",$y\->accuracy(),"\en";     # 123.4, 4
\&
\&  Math::BigFloat\->accuracy(undef);      # A not important now
\&  Math::BigFloat\->precision(2);         # P important
\&  print $x\->copy()\->bnorm(),"\en";       # 123.46
\&  print $x\->copy()\->fround(),"\en";      # 123.46
.Ve
.PP
Examples for converting:
.PP
.Vb 2
\&  my $x = Math::BigInt\->new(\*(Aq0b1\*(Aq.\*(Aq01\*(Aq x 123);
\&  print "bin: ",$x\->as_bin()," hex:",$x\->as_hex()," dec: ",$x,"\en";
.Ve
.SH "Autocreating constants"
.IX Header "Autocreating constants"
After \f(CW\*(C`use Math::BigInt \*(Aq:constant\*(Aq\*(C'\fR all the \fBinteger\fR decimal, hexadecimal
and binary constants in the given scope are converted to \f(CW\*(C`Math::BigInt\*(C'\fR.
This conversion happens at compile time.
.PP
In particular,
.PP
.Vb 1
\&  perl \-MMath::BigInt=:constant \-e \*(Aqprint 2**100,"\en"\*(Aq
.Ve
.PP
prints the integer value of \f(CW\*(C`2**100\*(C'\fR. Note that without conversion of 
constants the expression 2**100 will be calculated as perl scalar.
.PP
Please note that strings and floating point constants are not affected,
so that
.PP
.Vb 1
\&        use Math::BigInt qw/:constant/;
\&
\&        $x = 1234567890123456789012345678901234567890
\&                + 123456789123456789;
\&        $y = \*(Aq1234567890123456789012345678901234567890\*(Aq
\&                + \*(Aq123456789123456789\*(Aq;
.Ve
.PP
do not work. You need an explicit Math::BigInt\->\fInew()\fR around one of the
operands. You should also quote large constants to protect loss of precision:
.PP
.Vb 1
\&        use Math::BigInt;
\&
\&        $x = Math::BigInt\->new(\*(Aq1234567889123456789123456789123456789\*(Aq);
.Ve
.PP
Without the quotes Perl would convert the large number to a floating point
constant at compile time and then hand the result to BigInt, which results in
an truncated result or a NaN.
.PP
This also applies to integers that look like floating point constants:
.PP
.Vb 1
\&        use Math::BigInt \*(Aq:constant\*(Aq;
\&
\&        print ref(123e2),"\en";
\&        print ref(123.2e2),"\en";
.Ve
.PP
will print nothing but newlines. Use either bignum or Math::BigFloat
to get this to work.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
Using the form \f(CW$x\fR += \f(CW$y\fR; etc over \f(CW$x\fR = \f(CW$x\fR + \f(CW$y\fR is faster, since a copy of \f(CW$x\fR
must be made in the second case. For long numbers, the copy can eat up to 20%
of the work (in the case of addition/subtraction, less for
multiplication/division). If \f(CW$y\fR is very small compared to \f(CW$x\fR, the form
\&\f(CW$x\fR += \f(CW$y\fR is \s-1MUCH\s0 faster than \f(CW$x\fR = \f(CW$x\fR + \f(CW$y\fR since making the copy of \f(CW$x\fR takes
more time then the actual addition.
.PP
With a technique called copy-on-write, the cost of copying with overload could
be minimized or even completely avoided. A test implementation of \s-1COW\s0 did show
performance gains for overloaded math, but introduced a performance loss due
to a constant overhead for all other operations. So Math::BigInt does currently
not \s-1COW.\s0
.PP
The rewritten version of this module (vs. v0.01) is slower on certain
operations, like \f(CW\*(C`new()\*(C'\fR, \f(CW\*(C`bstr()\*(C'\fR and \f(CW\*(C`numify()\*(C'\fR. The reason are that it
does now more work and handles much more cases. The time spent in these
operations is usually gained in the other math operations so that code on
the average should get (much) faster. If they don't, please contact the author.
.PP
Some operations may be slower for small numbers, but are significantly faster
for big numbers. Other operations are now constant (O(1), like \f(CW\*(C`bneg()\*(C'\fR,
\&\f(CW\*(C`babs()\*(C'\fR etc), instead of O(N) and thus nearly always take much less time.
These optimizations were done on purpose.
.PP
If you find the Calc module to slow, try to install any of the replacement
modules and see if they help you.
.SS "Alternative math libraries"
.IX Subsection "Alternative math libraries"
You can use an alternative library to drive Math::BigInt. See the section
\&\*(L"\s-1MATH LIBRARY\*(R"\s0 for more information.
.PP
For more benchmark results see <http://bloodgate.com/perl/benchmarks.html>.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
.SS "Subclassing Math::BigInt"
.IX Subsection "Subclassing Math::BigInt"
The basic design of Math::BigInt allows simple subclasses with very little
work, as long as a few simple rules are followed:
.IP "\(bu" 2
The public \s-1API\s0 must remain consistent, i.e. if a sub-class is overloading
addition, the sub-class must use the same name, in this case \fIbadd()\fR. The
reason for this is that Math::BigInt is optimized to call the object methods
directly.
.IP "\(bu" 2
The private object hash keys like \f(CW\*(C`$x\->{sign}\*(C'\fR may not be changed, but
additional keys can be added, like \f(CW\*(C`$x\->{_custom}\*(C'\fR.
.IP "\(bu" 2
Accessor functions are available for all existing object hash keys and should
be used instead of directly accessing the internal hash keys. The reason for
this is that Math::BigInt itself has a pluggable interface which permits it
to support different storage methods.
.PP
More complex sub-classes may have to replicate more of the logic internal of
Math::BigInt if they need to change more basic behaviors. A subclass that
needs to merely change the output only needs to overload \f(CW\*(C`bstr()\*(C'\fR.
.PP
All other object methods and overloaded functions can be directly inherited
from the parent class.
.PP
At the very minimum, any subclass will need to provide its own \f(CW\*(C`new()\*(C'\fR and can
store additional hash keys in the object. There are also some package globals
that must be defined, e.g.:
.PP
.Vb 5
\&  # Globals
\&  $accuracy = undef;
\&  $precision = \-2;       # round to 2 decimal places
\&  $round_mode = \*(Aqeven\*(Aq;
\&  $div_scale = 40;
.Ve
.PP
Additionally, you might want to provide the following two globals to allow
auto-upgrading and auto-downgrading to work correctly:
.PP
.Vb 2
\&  $upgrade = undef;
\&  $downgrade = undef;
.Ve
.PP
This allows Math::BigInt to correctly retrieve package globals from the 
subclass, like \f(CW$SubClass::precision\fR.  See t/Math/BigInt/Subclass.pm or
t/Math/BigFloat/SubClass.pm completely functional subclass examples.
.PP
Don't forget to
.PP
.Vb 1
\&        use overload;
.Ve
.PP
in your subclass to automatically inherit the overloading from the parent. If
you like, you can change part of the overloading, look at Math::String for an
example.
.SH "UPGRADING"
.IX Header "UPGRADING"
When used like this:
.PP
.Vb 1
\&        use Math::BigInt upgrade => \*(AqFoo::Bar\*(Aq;
.Ve
.PP
certain operations will 'upgrade' their calculation and thus the result to
the class Foo::Bar. Usually this is used in conjunction with Math::BigFloat:
.PP
.Vb 1
\&        use Math::BigInt upgrade => \*(AqMath::BigFloat\*(Aq;
.Ve
.PP
As a shortcut, you can use the module \f(CW\*(C`bignum\*(C'\fR:
.PP
.Vb 1
\&        use bignum;
.Ve
.PP
Also good for one-liners:
.PP
.Vb 1
\&        perl \-Mbignum \-le \*(Aqprint 2 ** 255\*(Aq
.Ve
.PP
This makes it possible to mix arguments of different classes (as in 2.5 + 2)
as well es preserve accuracy (as in \fIsqrt\fR\|(3)).
.PP
Beware: This feature is not fully implemented yet.
.SS "Auto-upgrade"
.IX Subsection "Auto-upgrade"
The following methods upgrade themselves unconditionally; that is if upgrade
is in effect, they will always hand up their work:
.IP "\fIbsqrt()\fR" 2
.IX Item "bsqrt()"
.PD 0
.IP "\fIdiv()\fR" 2
.IX Item "div()"
.IP "\fIblog()\fR" 2
.IX Item "blog()"
.IP "\fIbexp()\fR" 2
.IX Item "bexp()"
.PD
.PP
Beware: This list is not complete.
.PP
All other methods upgrade themselves only when one (or all) of their
arguments are of the class mentioned in \f(CW$upgrade\fR (This might change in later
versions to a more sophisticated scheme):
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\f(CW\*(C`Math::BigInt\*(C'\fR exports nothing by default, but can export the following methods:
.PP
.Vb 2
\&        bgcd
\&        blcm
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
Some things might not work as you expect them. Below is documented what is
known to be troublesome:
.IP "\fIbstr()\fR, \fIbsstr()\fR and 'cmp'" 1
.IX Item "bstr(), bsstr() and 'cmp'"
Both \f(CW\*(C`bstr()\*(C'\fR and \f(CW\*(C`bsstr()\*(C'\fR as well as automated stringify via overload now
drop the leading '+'. The old code would return '+3', the new returns '3'.
This is to be consistent with Perl and to make \f(CW\*(C`cmp\*(C'\fR (especially with
overloading) to work as you expect. It also solves problems with \f(CW\*(C`Test.pm\*(C'\fR,
because its \f(CW\*(C`ok()\*(C'\fR uses 'eq' internally.
.Sp
Mark Biggar said, when asked about to drop the '+' altogether, or make only
\&\f(CW\*(C`cmp\*(C'\fR work:
.Sp
.Vb 4
\&        I agree (with the first alternative), don\*(Aqt add the \*(Aq+\*(Aq on positive
\&        numbers.  It\*(Aqs not as important anymore with the new internal 
\&        form for numbers.  It made doing things like abs and neg easier,
\&        but those have to be done differently now anyway.
.Ve
.Sp
So, the following examples will now work all as expected:
.Sp
.Vb 3
\&        use Test;
\&        BEGIN { plan tests => 1 }
\&        use Math::BigInt;
\&
\&        my $x = new Math::BigInt 3*3;
\&        my $y = new Math::BigInt 3*3;
\&
\&        ok ($x,3*3);
\&        print "$x eq 9" if $x eq $y;
\&        print "$x eq 9" if $x eq \*(Aq9\*(Aq;
\&        print "$x eq 9" if $x eq 3*3;
.Ve
.Sp
Additionally, the following still works:
.Sp
.Vb 3
\&        print "$x == 9" if $x == $y;
\&        print "$x == 9" if $x == 9;
\&        print "$x == 9" if $x == 3*3;
.Ve
.Sp
There is now a \f(CW\*(C`bsstr()\*(C'\fR method to get the string in scientific notation aka
\&\f(CW1e+2\fR instead of \f(CW100\fR. Be advised that overloaded 'eq' always uses \fIbstr()\fR
for comparison, but Perl will represent some numbers as 100 and others
as 1e+308. If in doubt, convert both arguments to Math::BigInt before 
comparing them as strings:
.Sp
.Vb 3
\&        use Test;
\&        BEGIN { plan tests => 3 }
\&        use Math::BigInt;
\&
\&        $x = Math::BigInt\->new(\*(Aq1e56\*(Aq); $y = 1e56;
\&        ok ($x,$y);                     # will fail
\&        ok ($x\->bsstr(),$y);            # okay
\&        $y = Math::BigInt\->new($y);
\&        ok ($x,$y);                     # okay
.Ve
.Sp
Alternatively, simple use \f(CW\*(C`<=>\*(C'\fR for comparisons, this will get it
always right. There is not yet a way to get a number automatically represented
as a string that matches exactly the way Perl represents it.
.Sp
See also the section about \*(L"Infinity and Not a Number\*(R" for problems in
comparing NaNs.
.IP "\fIint()\fR" 1
.IX Item "int()"
\&\f(CW\*(C`int()\*(C'\fR will return (at least for Perl v5.7.1 and up) another BigInt, not a 
Perl scalar:
.Sp
.Vb 4
\&        $x = Math::BigInt\->new(123);
\&        $y = int($x);                           # BigInt 123
\&        $x = Math::BigFloat\->new(123.45);
\&        $y = int($x);                           # BigInt 123
.Ve
.Sp
In all Perl versions you can use \f(CW\*(C`as_number()\*(C'\fR or \f(CW\*(C`as_int\*(C'\fR for the same
effect:
.Sp
.Vb 3
\&        $x = Math::BigFloat\->new(123.45);
\&        $y = $x\->as_number();                   # BigInt 123
\&        $y = $x\->as_int();                      # ditto
.Ve
.Sp
This also works for other subclasses, like Math::String.
.Sp
If you want a real Perl scalar, use \f(CW\*(C`numify()\*(C'\fR:
.Sp
.Vb 1
\&        $y = $x\->numify();                      # 123 as scalar
.Ve
.Sp
This is seldom necessary, though, because this is done automatically, like
when you access an array:
.Sp
.Vb 1
\&        $z = $array[$x];                        # does work automatically
.Ve
.IP "length" 1
.IX Item "length"
The following will probably not do what you expect:
.Sp
.Vb 2
\&        $c = Math::BigInt\->new(123);
\&        print $c\->length(),"\en";                # prints 30
.Ve
.Sp
It prints both the number of digits in the number and in the fraction part
since print calls \f(CW\*(C`length()\*(C'\fR in list context. Use something like:
.Sp
.Vb 1
\&        print scalar $c\->length(),"\en";         # prints 3
.Ve
.IP "bdiv" 1
.IX Item "bdiv"
The following will probably not do what you expect:
.Sp
.Vb 1
\&        print $c\->bdiv(10000),"\en";
.Ve
.Sp
It prints both quotient and remainder since print calls \f(CW\*(C`bdiv()\*(C'\fR in list
context. Also, \f(CW\*(C`bdiv()\*(C'\fR will modify \f(CW$c\fR, so be careful. You probably want
to use
.Sp
.Vb 2
\&        print $c / 10000,"\en";
\&        print scalar $c\->bdiv(10000),"\en";  # or if you want to modify $c
.Ve
.Sp
instead.
.Sp
The quotient is always the greatest integer less than or equal to the
real-valued quotient of the two operands, and the remainder (when it is
non-zero) always has the same sign as the second operand; so, for
example,
.Sp
.Vb 6
\&          1 / 4  => ( 0, 1)
\&          1 / \-4 => (\-1,\-3)
\&         \-3 / 4  => (\-1, 1)
\&         \-3 / \-4 => ( 0,\-3)
\&        \-11 / 2  => (\-5,1)
\&         11 /\-2  => (\-5,\-1)
.Ve
.Sp
As a consequence, the behavior of the operator % agrees with the
behavior of Perl's built-in % operator (as documented in the perlop
manpage), and the equation
.Sp
.Vb 1
\&        $x == ($x / $y) * $y + ($x % $y)
.Ve
.Sp
holds true for any \f(CW$x\fR and \f(CW$y\fR, which justifies calling the two return
values of \fIbdiv()\fR the quotient and remainder. The only exception to this rule
are when \f(CW$y\fR == 0 and \f(CW$x\fR is negative, then the remainder will also be
negative. See below under \*(L"infinity handling\*(R" for the reasoning behind this.
.Sp
Perl's 'use integer;' changes the behaviour of % and / for scalars, but will
not change BigInt's way to do things. This is because under 'use integer' Perl
will do what the underlying C thinks is right and this is different for each
system. If you need BigInt's behaving exactly like Perl's 'use integer', bug
the author to implement it ;)
.IP "infinity handling" 1
.IX Item "infinity handling"
Here are some examples that explain the reasons why certain results occur while
handling infinity:
.Sp
The following table shows the result of the division and the remainder, so that
the equation above holds true. Some \*(L"ordinary\*(R" cases are strewn in to show more
clearly the reasoning:
.Sp
.Vb 10
\&        A /  B  =   C,     R so that C *    B +    R =    A
\&     =========================================================
\&        5 /   8 =   0,     5         0 *    8 +    5 =    5
\&        0 /   8 =   0,     0         0 *    8 +    0 =    0
\&        0 / inf =   0,     0         0 *  inf +    0 =    0
\&        0 /\-inf =   0,     0         0 * \-inf +    0 =    0
\&        5 / inf =   0,     5         0 *  inf +    5 =    5
\&        5 /\-inf =   0,     5         0 * \-inf +    5 =    5
\&        \-5/ inf =   0,    \-5         0 *  inf +   \-5 =   \-5
\&        \-5/\-inf =   0,    \-5         0 * \-inf +   \-5 =   \-5
\&       inf/   5 =  inf,    0       inf *    5 +    0 =  inf
\&      \-inf/   5 = \-inf,    0      \-inf *    5 +    0 = \-inf
\&       inf/  \-5 = \-inf,    0      \-inf *   \-5 +    0 =  inf
\&      \-inf/  \-5 =  inf,    0       inf *   \-5 +    0 = \-inf
\&         5/   5 =    1,    0         1 *    5 +    0 =    5
\&        \-5/  \-5 =    1,    0         1 *   \-5 +    0 =   \-5
\&       inf/ inf =    1,    0         1 *  inf +    0 =  inf
\&      \-inf/\-inf =    1,    0         1 * \-inf +    0 = \-inf
\&       inf/\-inf =   \-1,    0        \-1 * \-inf +    0 =  inf
\&      \-inf/ inf =   \-1,    0         1 * \-inf +    0 = \-inf
\&         8/   0 =  inf,    8       inf *    0 +    8 =    8
\&       inf/   0 =  inf,  inf       inf *    0 +  inf =  inf
\&         0/   0 =  NaN
.Ve
.Sp
These cases below violate the \*(L"remainder has the sign of the second of the two
arguments\*(R", since they wouldn't match up otherwise.
.Sp
.Vb 4
\&        A /  B  =   C,     R so that C *    B +    R =    A
\&     ========================================================
\&      \-inf/   0 = \-inf, \-inf      \-inf *    0 +  inf = \-inf
\&        \-8/   0 = \-inf,   \-8      \-inf *    0 +    8 = \-8
.Ve
.IP "Modifying and =" 1
.IX Item "Modifying and ="
Beware of:
.Sp
.Vb 2
\&        $x = Math::BigFloat\->new(5);
\&        $y = $x;
.Ve
.Sp
It will not do what you think, e.g. making a copy of \f(CW$x\fR. Instead it just makes
a second reference to the \fBsame\fR object and stores it in \f(CW$y\fR. Thus anything
that modifies \f(CW$x\fR (except overloaded operators) will modify \f(CW$y\fR, and vice versa.
Or in other words, \f(CW\*(C`=\*(C'\fR is only safe if you modify your BigInts only via
overloaded math. As soon as you use a method call it breaks:
.Sp
.Vb 2
\&        $x\->bmul(2);
\&        print "$x, $y\en";       # prints \*(Aq10, 10\*(Aq
.Ve
.Sp
If you want a true copy of \f(CW$x\fR, use:
.Sp
.Vb 1
\&        $y = $x\->copy();
.Ve
.Sp
You can also chain the calls like this, this will make first a copy and then
multiply it by 2:
.Sp
.Vb 1
\&        $y = $x\->copy()\->bmul(2);
.Ve
.Sp
See also the documentation for overload.pm regarding \f(CW\*(C`=\*(C'\fR.
.IP "bpow" 1
.IX Item "bpow"
\&\f(CW\*(C`bpow()\*(C'\fR (and the rounding functions) now modifies the first argument and
returns it, unlike the old code which left it alone and only returned the
result. This is to be consistent with \f(CW\*(C`badd()\*(C'\fR etc. The first three will
modify \f(CW$x\fR, the last one won't:
.Sp
.Vb 4
\&        print bpow($x,$i),"\en";         # modify $x
\&        print $x\->bpow($i),"\en";        # ditto
\&        print $x **= $i,"\en";           # the same
\&        print $x ** $i,"\en";            # leave $x alone
.Ve
.Sp
The form \f(CW\*(C`$x **= $y\*(C'\fR is faster than \f(CW\*(C`$x = $x ** $y;\*(C'\fR, though.
.IP "Overloading \-$x" 1
.IX Item "Overloading -$x"
The following:
.Sp
.Vb 1
\&        $x = \-$x;
.Ve
.Sp
is slower than
.Sp
.Vb 1
\&        $x\->bneg();
.Ve
.Sp
since overload calls \f(CW\*(C`sub($x,0,1);\*(C'\fR instead of \f(CW\*(C`neg($x)\*(C'\fR. The first variant
needs to preserve \f(CW$x\fR since it does not know that it later will get overwritten.
This makes a copy of \f(CW$x\fR and takes O(N), but \f(CW$x\fR\->\fIbneg()\fR is O(1).
.IP "Mixing different object types" 1
.IX Item "Mixing different object types"
In Perl you will get a floating point value if you do one of the following:
.Sp
.Vb 3
\&        $float = 5.0 + 2;
\&        $float = 2 + 5.0;
\&        $float = 5 / 2;
.Ve
.Sp
With overloaded math, only the first two variants will result in a BigFloat:
.Sp
.Vb 2
\&        use Math::BigInt;
\&        use Math::BigFloat;
\&
\&        $mbf = Math::BigFloat\->new(5);
\&        $mbi2 = Math::BigInteger\->new(5);
\&        $mbi = Math::BigInteger\->new(2);
\&
\&                                        # what actually gets called:
\&        $float = $mbf + $mbi;           # $mbf\->badd()
\&        $float = $mbf / $mbi;           # $mbf\->bdiv()
\&        $integer = $mbi + $mbf;         # $mbi\->badd()
\&        $integer = $mbi2 / $mbi;        # $mbi2\->bdiv()
\&        $integer = $mbi2 / $mbf;        # $mbi2\->bdiv()
.Ve
.Sp
This is because math with overloaded operators follows the first (dominating)
operand, and the operation of that is called and returns thus the result. So,
\&\fIMath::BigInt::bdiv()\fR will always return a Math::BigInt, regardless whether
the result should be a Math::BigFloat or the second operant is one.
.Sp
To get a Math::BigFloat you either need to call the operation manually,
make sure the operands are already of the proper type or casted to that type
via Math::BigFloat\->\fInew()\fR:
.Sp
.Vb 1
\&        $float = Math::BigFloat\->new($mbi2) / $mbi;     # = 2.5
.Ve
.Sp
Beware of simple \*(L"casting\*(R" the entire expression, this would only convert
the already computed result:
.Sp
.Vb 1
\&        $float = Math::BigFloat\->new($mbi2 / $mbi);     # = 2.0 thus wrong!
.Ve
.Sp
Beware also of the order of more complicated expressions like:
.Sp
.Vb 2
\&        $integer = ($mbi2 + $mbi) / $mbf;               # int / float => int
\&        $integer = $mbi2 / Math::BigFloat\->new($mbi);   # ditto
.Ve
.Sp
If in doubt, break the expression into simpler terms, or cast all operands
to the desired resulting type.
.Sp
Scalar values are a bit different, since:
.Sp
.Vb 2
\&        $float = 2 + $mbf;
\&        $float = $mbf + 2;
.Ve
.Sp
will both result in the proper type due to the way the overloaded math works.
.Sp
This section also applies to other overloaded math packages, like Math::String.
.Sp
One solution to you problem might be autoupgrading|upgrading. See the
pragmas bignum, bigint and bigrat for an easy way to do this.
.IP "\fIbsqrt()\fR" 1
.IX Item "bsqrt()"
\&\f(CW\*(C`bsqrt()\*(C'\fR works only good if the result is a big integer, e.g. the square
root of 144 is 12, but from 12 the square root is 3, regardless of rounding
mode. The reason is that the result is always truncated to an integer.
.Sp
If you want a better approximation of the square root, then use:
.Sp
.Vb 4
\&        $x = Math::BigFloat\->new(12);
\&        Math::BigFloat\->precision(0);
\&        Math::BigFloat\->round_mode(\*(Aqeven\*(Aq);
\&        print $x\->copy\->bsqrt(),"\en";           # 4
\&
\&        Math::BigFloat\->precision(2);
\&        print $x\->bsqrt(),"\en";                 # 3.46
\&        print $x\->bsqrt(3),"\en";                # 3.464
.Ve
.IP "\fIbrsft()\fR" 1
.IX Item "brsft()"
For negative numbers in base see also brsft.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat, Math::BigRat and Math::Big as well as
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
The pragmas bignum, bigint and bigrat also might be of interest
because they solve the autoupgrading/downgrading issue, at least partly.
.PP
The package at
<http://search.cpan.org/search?mode=module&query=Math%3A%3ABigInt> contains
more documentation including a full version history, testcases, empty
subclass files and benchmarks.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original code by Mark Biggar, overloaded interface by Ilya Zakharevich.
Completely rewritten by Tels http://bloodgate.com in late 2000, 2001 \- 2006
and still at it in 2007.
.PP
Many people contributed in one or more ways to the final beast, see the file
\&\s-1CREDITS\s0 for an (incomplete) list. If you miss your name, please drop me a
mail. Thank you!
