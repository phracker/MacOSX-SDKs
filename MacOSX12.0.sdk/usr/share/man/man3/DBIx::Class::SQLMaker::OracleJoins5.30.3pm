.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::SQLMaker::OracleJoins 3"
.TH DBIx::Class::SQLMaker::OracleJoins 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::SQLMaker::OracleJoins \- Pre\-ANSI Joins\-via\-Where\-Clause Syntax
.SH "PURPOSE"
.IX Header "PURPOSE"
This module is used with Oracle < 9.0 due to lack of support for standard
\&\s-1ANSI\s0 join syntax.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not intended for use directly; used as the sql_maker_class for schemas and components.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Implements pre-ANSI joins specified in the where clause.  Instead of:
.PP
.Vb 1
\&    SELECT x FROM y JOIN z ON y.id = z.id
.Ve
.PP
It will write:
.PP
.Vb 1
\&    SELECT x FROM y, z WHERE y.id = z.id
.Ve
.PP
It should properly support left joins, and right joins.  Full outer joins are
not possible due to the fact that Oracle requires the entire query be written
to union the results of a left and right join, and by the time this module is
called to create the where query and table definition part of the sql query,
it's already too late.
.SH "METHODS"
.IX Header "METHODS"
.IP "select" 4
.IX Item "select"
Overrides DBIx::Class::SQLMaker's \fBselect()\fR method, which calls \fB_oracle_joins()\fR
to modify the column and table list before calling \fBnext::method()\fR.
.SH "BUGS"
.IX Header "BUGS"
Does not support full outer joins (however neither really does \s-1DBIC\s0 itself)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "DBIx::Class::Storage::DBI::Oracle::WhereJoins \- Storage class using this" 4
.IX Item "DBIx::Class::Storage::DBI::Oracle::WhereJoins - Storage class using this"
.PD 0
.IP "DBIx::Class::SQLMaker \- Parent module" 4
.IX Item "DBIx::Class::SQLMaker - Parent module"
.IP "DBIx::Class \- Duh" 4
.IX Item "DBIx::Class - Duh"
.PD
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
