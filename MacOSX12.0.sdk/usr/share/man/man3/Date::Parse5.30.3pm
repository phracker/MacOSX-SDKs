.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Date::Parse 3"
.TH Date::Parse 3 "2020-03-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Date::Parse \- Parse date strings into time values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Date::Parse;
\&        
\&        $time = str2time($date);
\&        
\&        ($ss,$mm,$hh,$day,$month,$year,$zone) = strptime($date);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Date::Parse\*(C'\fR provides two routines for parsing date strings into time values.
.IP "str2time(\s-1DATE\s0 [, \s-1ZONE\s0])" 4
.IX Item "str2time(DATE [, ZONE])"
\&\f(CW\*(C`str2time\*(C'\fR parses \f(CW\*(C`DATE\*(C'\fR and returns a unix time value, or undef upon failure.
\&\f(CW\*(C`ZONE\*(C'\fR, if given, specifies the timezone to assume when parsing if the
date string does not specify a timezone.
.IP "strptime(\s-1DATE\s0 [, \s-1ZONE\s0])" 4
.IX Item "strptime(DATE [, ZONE])"
\&\f(CW\*(C`strptime\*(C'\fR takes the same arguments as str2time but returns an array of
values \f(CW\*(C`($ss,$mm,$hh,$day,$month,$year,$zone,$century)\*(C'\fR. Elements are only
defined if they could be extracted from the date string. The \f(CW$zone\fR element
is the timezone offset in seconds from \s-1GMT.\s0 An empty array is returned upon
failure.
.SH "MULTI-LANGUAGE SUPPORT"
.IX Header "MULTI-LANGUAGE SUPPORT"
Date::Parse is capable of parsing dates in several languages, these include
English, French, German and Italian.
.PP
.Vb 2
\&        $lang = Date::Language\->new(\*(AqGerman\*(Aq);
\&        $lang\->str2time("25 Jun 1996 21:09:55 +0100");
.Ve
.SH "EXAMPLE DATES"
.IX Header "EXAMPLE DATES"
Below is a sample list of dates that are known to be parsable with Date::Parse
.PP
.Vb 11
\& 1995:01:24T09:08:17.1823213           ISO\-8601
\& 1995\-01\-24T09:08:17.1823213
\& Wed, 16 Jun 94 07:29:35 CST           Comma and day name are optional 
\& Thu, 13 Oct 94 10:13:13 \-0700
\& Wed, 9 Nov 1994 09:50:32 \-0500 (EST)  Text in ()\*(Aqs will be ignored.
\& 21 dec 17:05                          Will be parsed in the current time zone
\& 21\-dec 17:05
\& 21/dec 17:05
\& 21/dec/93 17:05
\& 1999 10:02:18 "GMT"
\& 16 Nov 94 22:28:20 PST
.Ve
.SH "LIMITATION"
.IX Header "LIMITATION"
Date::Parse uses Time::Local internally, so is limited to only parsing dates
which result in valid values for Time::Local::timelocal. This generally means dates
between 1901\-12\-17 00:00:00 \s-1GMT\s0 and 2038\-01\-16 23:59:59 \s-1GMT\s0
.SH "BUGS"
.IX Header "BUGS"
When both the month and the date are specified in the date as numbers
they are always parsed assuming that the month number comes before the
date. This is the usual format used in American dates.
.PP
The reason why it is like this and not dynamic is that it must be
deterministic. Several people have suggested using the current locale,
but this will not work as the date being parsed may not be in the format
of the current locale.
.PP
My plans to address this, which will be in a future release, is to allow
the programmer to state what order they want these values parsed in.
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-2009 Graham Barr. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
