.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Library::Perl 3"
.TH Specio::Library::Perl 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Library::Perl \- Implements type constraint objects for some common Perl language things
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This library provides some additional string types for common cases.
.SS "PackageName"
.IX Subsection "PackageName"
A valid package name. Unlike the \f(CW\*(C`ClassName\*(C'\fR constraint from the
Specio::Library::Builtins library, this package does not need to be loaded.
.PP
This type does allow Unicode characters.
.SS "ModuleName"
.IX Subsection "ModuleName"
Same as \f(CW\*(C`PackageName\*(C'\fR.
.SS "DistName"
.IX Subsection "DistName"
A valid distribution name like \f(CW\*(C`DBD\-Pg\*(C'\fR Basically this is the same as a
package name with the double-colons replaced by dashes. Note that there are
some historical distribution names that don't fit this pattern, like
\&\f(CW\*(C`CGI.pm\*(C'\fR.
.PP
This type does allow Unicode characters.
.SS "Identifier"
.IX Subsection "Identifier"
An Identifier is something that could be used as a
symbol name or other identifier (filehandle, directory handle, subroutine
name, format name, or label). It's what you put after the sigil (dollar sign,
at sign, percent sign) in a variable name. Generally, it's a bunch of
word characters not starting with a digit.
.PP
This type does allow Unicode characters.
.SS "SafeIdentifier"
.IX Subsection "SafeIdentifier"
This is just like an \f(CW\*(C`Identifier\*(C'\fR but it excludes the single-character
variables underscore (\f(CW\*(C`_\*(C'\fR), \f(CW\*(C`a\*(C'\fR< and \f(CW\*(C`b\*(C'\fR, as these are special variables to
the Perl interpreter.
.SS "LaxVersionStr and StrictVersionStr"
.IX Subsection "LaxVersionStr and StrictVersionStr"
Lax and strict version strings use the is_lax and
is_strict methods from \f(CW\*(C`version\*(C'\fR to check if the given
string would be a valid lax or strict version. version::Internals covers
the details but basically: lax versions are everything you may do, and strict
omit many of the usages best avoided.
.SS "\s-1CREDITS\s0"
.IX Subsection "CREDITS"
Much of the code and docs for this library comes from MooseX::Types::Perl,
written by Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
