.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_VMS 3pm"
.TH ExtUtils::MM_VMS 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_VMS \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  Do not use this directly.
\&  Instead, use ExtUtils::MM and it will figure out which MM_*
\&  class to use for you.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.SS "Methods always loaded"
.IX Subsection "Methods always loaded"
.IP "wraplist" 4
.IX Item "wraplist"
Converts a list into a string wrapped at approximately 80 columns.
.SS "Methods"
.IX Subsection "Methods"
Those methods which override default MM_Unix methods are marked
\&\*(L"(override)\*(R", while methods unique to \s-1MM_VMS\s0 are marked \*(L"(specific)\*(R".
For overridden methods, documentation is limited to an explanation
of why this method overrides the MM_Unix method; see the ExtUtils::MM_Unix
documentation for more details.
.IP "guess_name (override)" 4
.IX Item "guess_name (override)"
Try to determine name of extension being built.  We begin with the name
of the current directory.  Since \s-1VMS\s0 filenames are case-insensitive,
however, we look for a \fI.pm\fR file whose name matches that of the current
directory (presumably the 'main' \fI.pm\fR file for this extension), and try
to find a \f(CW\*(C`package\*(C'\fR statement from which to obtain the Mixed::Case
package name.
.IP "find_perl (override)" 4
.IX Item "find_perl (override)"
Use \s-1VMS\s0 file specification syntax and \s-1CLI\s0 commands to find and
invoke Perl images.
.IP "_fixin_replace_shebang (override)" 4
.IX Item "_fixin_replace_shebang (override)"
Helper routine for \s-1MM\-\s0>\fIfixin()\fR, overridden because there's no such thing as an
actual shebang line that will be intepreted by the shell, so we just prepend
\&\f(CW$Config\fR{startperl} and preserve the shebang line argument for any switches it
may contain.
.IP "maybe_command (override)" 4
.IX Item "maybe_command (override)"
Follows \s-1VMS\s0 naming conventions for executable files.
If the name passed in doesn't exactly match an executable file,
appends \fI.Exe\fR (or equivalent) to check for executable image, and \fI.Com\fR
to check for \s-1DCL\s0 procedure.  If this fails, checks directories in \s-1DCL$PATH\s0
and finally \fISys$System:\fR for an executable file having the name specified,
with or without the \fI.Exe\fR\-equivalent suffix.
.IP "pasthru (override)" 4
.IX Item "pasthru (override)"
\&\s-1VMS\s0 has $(\s-1MMSQUALIFIERS\s0) which is a listing of all the original command line
options.  This is used in every invocation of make in the \s-1VMS\s0 Makefile so
\&\s-1PASTHRU\s0 should not be necessary.  Using \s-1PASTHRU\s0 tends to blow commands past
the 256 character limit.
.IP "pm_to_blib (override)" 4
.IX Item "pm_to_blib (override)"
\&\s-1VMS\s0 wants a dot in every file so we can't have one called 'pm_to_blib',
it becomes 'pm_to_blib.' and \s-1MMS/K\s0 isn't smart enough to know that when
you have a target called 'pm_to_blib' it should look for 'pm_to_blib.'.
.Sp
So in \s-1VMS\s0 its pm_to_blib.ts.
.IP "perl_script (override)" 4
.IX Item "perl_script (override)"
If name passed in doesn't specify a readable file, appends \fI.com\fR or
\&\fI.pl\fR and tries again, since it's customary to have file types on all files
under \s-1VMS.\s0
.IP "replace_manpage_separator" 4
.IX Item "replace_manpage_separator"
Use as separator a character which is legal in a VMS-syntax file name.
.IP "init_DEST" 4
.IX Item "init_DEST"
(override) Because of the difficulty concatenating \s-1VMS\s0 filepaths we
must pre-expand the DEST* variables.
.IP "init_DIRFILESEP" 4
.IX Item "init_DIRFILESEP"
No seperator between a directory path and a filename on \s-1VMS.\s0
.IP "init_main (override)" 4
.IX Item "init_main (override)"
.PD 0
.IP "init_tools (override)" 4
.IX Item "init_tools (override)"
.PD
Provide VMS-specific forms of various utility commands.
.Sp
Sets \s-1DEV_NULL\s0 to nothing because I don't know how to do it on \s-1VMS.\s0
.Sp
Changes \s-1EQUALIZE_TIMESTAMP\s0 to set revision date of target file to
one second later than source file, since \s-1MMK\s0 interprets precisely
equal revision dates for a source and target file as a sign that the
target needs to be updated.
.IP "init_platform (override)" 4
.IX Item "init_platform (override)"
Add \s-1PERL_VMS, MM_VMS_REVISION\s0 and \s-1MM_VMS_VERSION.\s0
.Sp
\&\s-1MM_VMS_REVISION\s0 is for backwards compatibility before \s-1MM_VMS\s0 had a
\&\f(CW$VERSION\fR.
.IP "platform_constants" 4
.IX Item "platform_constants"
.PD 0
.IP "init_VERSION (override)" 4
.IX Item "init_VERSION (override)"
.PD
Override the *DEFINE_VERSION macros with \s-1VMS\s0 semantics.  Translate the
\&\s-1MAKEMAKER\s0 filepath to \s-1VMS\s0 style.
.IP "constants (override)" 4
.IX Item "constants (override)"
Fixes up numerous file and directory macros to insure \s-1VMS\s0 syntax
regardless of input syntax.  Also makes lists of files
comma-separated.
.IP "special_targets" 4
.IX Item "special_targets"
Clear the default .SUFFIXES and put in our own list.
.IP "cflags (override)" 4
.IX Item "cflags (override)"
Bypass shell script and produce qualifiers for \s-1CC\s0 directly (but warn
user if a shell script for this extension exists).  Fold multiple
/Defines into one, since some C compilers pay attention to only one
instance of this qualifier on the command line.
.IP "const_cccmd (override)" 4
.IX Item "const_cccmd (override)"
Adds directives to point C preprocessor to the right place when
handling #include <sys/foo.h> directives.  Also constructs \s-1CC\s0
command line a bit differently than MM_Unix method.
.IP "tools_other (override)" 4
.IX Item "tools_other (override)"
Throw in some dubious extra macros for Makefile args.
.Sp
Also keep around the old $(\s-1SAY\s0) macro in case somebody's using it.
.IP "init_dist (override)" 4
.IX Item "init_dist (override)"
VMSish defaults for some values.
.Sp
.Vb 1
\&  macro         description                     default
\&
\&  ZIPFLAGS      flags to pass to ZIP            \-Vu
\&
\&  COMPRESS      compression command to          gzip
\&                use for tarfiles
\&  SUFFIX        suffix to put on                \-gz 
\&                compressed files
\&
\&  SHAR          shar command to use             vms_share
\&
\&  DIST_DEFAULT  default target to use to        tardist
\&                create a distribution
\&
\&  DISTVNAME     Use VERSION_SYM instead of      $(DISTNAME)\-$(VERSION_SYM)
\&                VERSION for the name
.Ve
.IP "c_o (override)" 4
.IX Item "c_o (override)"
Use \s-1VMS\s0 syntax on command line.  In particular, $(\s-1DEFINE\s0) and
$(\s-1PERL_INC\s0) have been pulled into $(\s-1CCCMD\s0).  Also use MM[\s-1SK\s0] macros.
.IP "xs_c (override)" 4
.IX Item "xs_c (override)"
Use MM[\s-1SK\s0] macros.
.IP "xs_o (override)" 4
.IX Item "xs_o (override)"
Use MM[\s-1SK\s0] macros, and \s-1VMS\s0 command line for C compiler.
.IP "dlsyms (override)" 4
.IX Item "dlsyms (override)"
Create \s-1VMS\s0 linker options files specifying universal symbols for this
extension's shareable image, and listing other shareable images or 
libraries to which it should be linked.
.IP "dynamic_lib (override)" 4
.IX Item "dynamic_lib (override)"
Use \s-1VMS\s0 Link command.
.IP "static_lib (override)" 4
.IX Item "static_lib (override)"
Use \s-1VMS\s0 commands to manipulate object library.
.IP "extra_clean_files" 4
.IX Item "extra_clean_files"
Clean up some \s-1OS\s0 specific files.  Plus the temp file used to shorten
a lot of commands.  And the name mangler database.
.IP "zipfile_target" 4
.IX Item "zipfile_target"
.PD 0
.IP "tarfile_target" 4
.IX Item "tarfile_target"
.IP "shdist_target" 4
.IX Item "shdist_target"
.PD
Syntax for invoking shar, tar and zip differs from that for Unix.
.IP "install (override)" 4
.IX Item "install (override)"
Work around \s-1DCL\s0's 255 character limit several times,and use
VMS-style command line quoting in a few cases.
.IP "perldepend (override)" 4
.IX Item "perldepend (override)"
Use VMS-style syntax for files; it's cheaper to just do it directly here
than to have the MM_Unix method call \f(CW\*(C`catfile\*(C'\fR repeatedly.  Also, if
we have to rebuild Config.pm, use MM[\s-1SK\s0] to do it.
.IP "makeaperl (override)" 4
.IX Item "makeaperl (override)"
Undertake to build a new set of Perl images using \s-1VMS\s0 commands.  Since
\&\s-1VMS\s0 does dynamic loading, it's not necessary to statically link each
extension into the Perl image, so this isn't the normal build path.
Consequently, it hasn't really been tested, and may well be incomplete.
.IP "maketext_filter (override)" 4
.IX Item "maketext_filter (override)"
Insure that colons marking targets are preceded by space, in order
to distinguish the target delimiter from a colon appearing as
part of a filespec.
.IP "prefixify (override)" 4
.IX Item "prefixify (override)"
prefixifying on \s-1VMS\s0 is simple.  Each should simply be:
.Sp
.Vb 1
\&    perl_root:[some.dir]
.Ve
.Sp
which can just be converted to:
.Sp
.Vb 1
\&    volume:[your.prefix.some.dir]
.Ve
.Sp
otherwise you get the default layout.
.Sp
In effect, your search prefix is ignored and \f(CW$Config\fR{vms_prefix} is
used instead.
.IP "cd" 4
.IX Item "cd"
.PD 0
.IP "oneliner" 4
.IX Item "oneliner"
.IP "\fBecho\fR" 4
.IX Item "echo"
.PD
perl trips up on \*(L"<foo>\*(R" thinking it's an input redirect.  So we use the
native Write command instead.  Besides, its faster.
.IP "quote_literal" 4
.IX Item "quote_literal"
.PD 0
.IP "escape_dollarsigns" 4
.IX Item "escape_dollarsigns"
.PD
Quote, don't escape.
.IP "escape_all_dollarsigns" 4
.IX Item "escape_all_dollarsigns"
Quote, don't escape.
.IP "escape_newlines" 4
.IX Item "escape_newlines"
.PD 0
.IP "max_exec_len" 4
.IX Item "max_exec_len"
.PD
256 characters.
.IP "init_linker" 4
.IX Item "init_linker"
.PD 0
.IP "catdir (override)" 4
.IX Item "catdir (override)"
.IP "catfile (override)" 4
.IX Item "catfile (override)"
.PD
Eliminate the macros in the output to the \s-1MMS/MMK\s0 file.
.Sp
(File::Spec::VMS used to do this for us, but it's being removed)
.IP "eliminate_macros" 4
.IX Item "eliminate_macros"
Expands MM[\s-1KS\s0]/Make macros in a text string, using the contents of
identically named elements of \f(CW%$self\fR, and returns the result
as a file specification in Unix syntax.
.Sp
\&\s-1NOTE: \s0 This is the canonical version of the method.  The version in
File::Spec::VMS is deprecated.
.IP "fixpath" 4
.IX Item "fixpath"
.Vb 2
\&   my $path = $mm\->fixpath($path);
\&   my $path = $mm\->fixpath($path, $is_dir);
.Ve
.Sp
Catchall routine to clean up problem MM[\s-1SK\s0]/Make macros.  Expands macros
in any directory specification, in order to avoid juxtaposing two
VMS-syntax directories when MM[\s-1SK\s0] is run.  Also expands expressions which
are all macro, so that we can tell how long the expansion is, and avoid
overrunning \s-1DCL\s0's command buffer when MM[\s-1KS\s0] is running.
.Sp
\&\fIfixpath()\fR checks to see whether the result matches the name of a
directory in the current default directory and returns a directory or
file specification accordingly.  \f(CW$is_dir\fR can be set to true to
force \fIfixpath()\fR to consider the path to be a directory or false to force
it to be a file.
.Sp
\&\s-1NOTE: \s0 This is the canonical version of the method.  The version in
File::Spec::VMS is deprecated.
.IP "os_flavor" 4
.IX Item "os_flavor"
\&\s-1VMS\s0 is \s-1VMS.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author Charles Bailey \fIbailey@newman.upenn.edu\fR
.PP
Maintained by Michael G Schwern \fIschwern@pobox.com\fR
.PP
See ExtUtils::MakeMaker for patching and contact information.
