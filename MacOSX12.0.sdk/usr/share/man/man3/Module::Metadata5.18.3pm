.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Metadata 3pm"
.TH Module::Metadata 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Metadata \- Gather package and POD information from perl module files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Module::Metadata;
\&
\&  # information about a .pm file
\&  my $info = Module::Metadata\->new_from_file( $file );
\&  my $version = $info\->version;
\&
\&  # CPAN META \*(Aqprovides\*(Aq field for .pm files in a directory
\&  my $provides = Module::Metadata\->provides(
\&    dir => \*(Aqlib\*(Aq, version => 2
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a standard way to gather metadata about a .pm file
without executing unsafe code.
.SH "USAGE"
.IX Header "USAGE"
.SS "Class methods"
.IX Subsection "Class methods"
.ie n .IP """new_from_file($filename, collect_pod => 1)""" 4
.el .IP "\f(CWnew_from_file($filename, collect_pod => 1)\fR" 4
.IX Item "new_from_file($filename, collect_pod => 1)"
Constructs a \f(CW\*(C`Module::Metadata\*(C'\fR object given the path to a file.  Returns
undef if the filename does not exist.
.Sp
\&\f(CW\*(C`collect_pod\*(C'\fR is a optional boolean argument that determines whether \s-1POD\s0
data is collected and stored for reference.  \s-1POD\s0 data is not collected by
default.  \s-1POD\s0 headings are always collected.
.Sp
If the file begins by an \s-1UTF\-8, UTF\-16BE\s0 or \s-1UTF\-16LE\s0 byte-order mark, then
it is skipped before processing, and the content of the file is also decoded
appropriately starting from perl 5.8.
.ie n .IP """new_from_handle($handle, $filename, collect_pod => 1)""" 4
.el .IP "\f(CWnew_from_handle($handle, $filename, collect_pod => 1)\fR" 4
.IX Item "new_from_handle($handle, $filename, collect_pod => 1)"
This works just like \f(CW\*(C`new_from_file\*(C'\fR, except that a handle can be provided
as the first argument.
.Sp
Note that there is no validation to confirm that the handle is a handle or
something that can act like one.  Passing something that isn't a handle will
cause a exception when trying to read from it.  The \f(CW\*(C`filename\*(C'\fR argument is
mandatory or undef will be returned.
.Sp
You are responsible for setting the decoding layers on \f(CW$handle\fR if
required.
.ie n .IP """new_from_module($module, collect_pod => 1, inc => \e@dirs)""" 4
.el .IP "\f(CWnew_from_module($module, collect_pod => 1, inc => \e@dirs)\fR" 4
.IX Item "new_from_module($module, collect_pod => 1, inc => @dirs)"
Constructs a \f(CW\*(C`Module::Metadata\*(C'\fR object given a module or package name.
Returns undef if the module cannot be found.
.Sp
In addition to accepting the \f(CW\*(C`collect_pod\*(C'\fR argument as described above,
this method accepts a \f(CW\*(C`inc\*(C'\fR argument which is a reference to an array of
directories to search for the module.  If none are given, the default is
\&\f(CW@INC\fR.
.Sp
If the file that contains the module begins by an \s-1UTF\-8, UTF\-16BE\s0 or
\&\s-1UTF\-16LE\s0 byte-order mark, then it is skipped before processing, and the
content of the file is also decoded appropriately starting from perl 5.8.
.ie n .IP """find_module_by_name($module, \e@dirs)""" 4
.el .IP "\f(CWfind_module_by_name($module, \e@dirs)\fR" 4
.IX Item "find_module_by_name($module, @dirs)"
Returns the path to a module given the module or package name. A list
of directories can be passed in as an optional parameter, otherwise
\&\f(CW@INC\fR is searched.
.Sp
Can be called as either an object or a class method.
.ie n .IP """find_module_dir_by_name($module, \e@dirs)""" 4
.el .IP "\f(CWfind_module_dir_by_name($module, \e@dirs)\fR" 4
.IX Item "find_module_dir_by_name($module, @dirs)"
Returns the entry in \f(CW@dirs\fR (or \f(CW@INC\fR by default) that contains
the module \f(CW$module\fR. A list of directories can be passed in as an
optional parameter, otherwise \f(CW@INC\fR is searched.
.Sp
Can be called as either an object or a class method.
.ie n .IP """provides( %options )""" 4
.el .IP "\f(CWprovides( %options )\fR" 4
.IX Item "provides( %options )"
This is a convenience wrapper around \f(CW\*(C`package_versions_from_directory\*(C'\fR
to generate a \s-1CPAN META \s0\f(CW\*(C`provides\*(C'\fR data structure.  It takes key/value
pairs.  Valid option keys include:
.RS 4
.IP "version \fB(required)\fR" 4
.IX Item "version (required)"
Specifies which version of the CPAN::Meta::Spec should be used as
the format of the \f(CW\*(C`provides\*(C'\fR output.  Currently only '1.4' and '2'
are supported (and their format is identical).  This may change in
the future as the definition of \f(CW\*(C`provides\*(C'\fR changes.
.Sp
The \f(CW\*(C`version\*(C'\fR option is required.  If it is omitted or if
an unsupported version is given, then \f(CW\*(C`provides\*(C'\fR will throw an error.
.IP "dir" 4
.IX Item "dir"
Directory to search recursively for \fI.pm\fR files.  May not be specified with
\&\f(CW\*(C`files\*(C'\fR.
.IP "files" 4
.IX Item "files"
Array reference of files to examine.  May not be specified with \f(CW\*(C`dir\*(C'\fR.
.IP "prefix" 4
.IX Item "prefix"
String to prepend to the \f(CW\*(C`file\*(C'\fR field of the resulting output. This defaults
to \fIlib\fR, which is the common case for most \s-1CPAN\s0 distributions with their
\&\fI.pm\fR files in \fIlib\fR.  This option ensures the \s-1META\s0 information has the
correct relative path even when the \f(CW\*(C`dir\*(C'\fR or \f(CW\*(C`files\*(C'\fR arguments are
absolute or have relative paths from a location other than the distribution
root.
.RE
.RS 4
.Sp
For example, given \f(CW\*(C`dir\*(C'\fR of 'lib' and \f(CW\*(C`prefix\*(C'\fR of 'lib', the return value
is a hashref of the form:
.Sp
.Vb 7
\&  {
\&    \*(AqPackage::Name\*(Aq => {
\&      version => \*(Aq0.123\*(Aq,
\&      file => \*(Aqlib/Package/Name.pm\*(Aq
\&    },
\&    \*(AqOtherPackage::Name\*(Aq => ...
\&  }
.Ve
.RE
.ie n .IP """package_versions_from_directory($dir, \e@files?)""" 4
.el .IP "\f(CWpackage_versions_from_directory($dir, \e@files?)\fR" 4
.IX Item "package_versions_from_directory($dir, @files?)"
Scans \f(CW$dir\fR for .pm files (unless \f(CW@files\fR is given, in which case looks
for those files in \f(CW$dir\fR \- and reads each file for packages and versions,
returning a hashref of the form:
.Sp
.Vb 7
\&  {
\&    \*(AqPackage::Name\*(Aq => {
\&      version => \*(Aq0.123\*(Aq,
\&      file => \*(AqPackage/Name.pm\*(Aq
\&    },
\&    \*(AqOtherPackage::Name\*(Aq => ...
\&  }
.Ve
.Sp
The \f(CW\*(C`DB\*(C'\fR and \f(CW\*(C`main\*(C'\fR packages are always omitted, as are any \*(L"private\*(R"
packages that have leading underscores in the namespace (e.g.
\&\f(CW\*(C`Foo::_private\*(C'\fR)
.Sp
Note that the file path is relative to \f(CW$dir\fR if that is specified.
This \fBmust not\fR be used directly for \s-1CPAN META \s0\f(CW\*(C`provides\*(C'\fR.  See
the \f(CW\*(C`provides\*(C'\fR method instead.
.ie n .IP """log_info (internal)""" 4
.el .IP "\f(CWlog_info (internal)\fR" 4
.IX Item "log_info (internal)"
Used internally to perform logging; imported from Log::Contextual if
Log::Contextual has already been loaded, otherwise simply calls warn.
.SS "Object methods"
.IX Subsection "Object methods"
.ie n .IP """name()""" 4
.el .IP "\f(CWname()\fR" 4
.IX Item "name()"
Returns the name of the package represented by this module. If there
are more than one packages, it makes a best guess based on the
filename. If it's a script (i.e. not a *.pm) the package name is
\&'main'.
.ie n .IP """version($package)""" 4
.el .IP "\f(CWversion($package)\fR" 4
.IX Item "version($package)"
Returns the version as defined by the \f(CW$VERSION\fR variable for the
package as returned by the \f(CW\*(C`name\*(C'\fR method if no arguments are
given. If given the name of a package it will attempt to return the
version of that package if it is specified in the file.
.ie n .IP """filename()""" 4
.el .IP "\f(CWfilename()\fR" 4
.IX Item "filename()"
Returns the absolute path to the file.
.ie n .IP """packages_inside()""" 4
.el .IP "\f(CWpackages_inside()\fR" 4
.IX Item "packages_inside()"
Returns a list of packages. Note: this is a raw list of packages
discovered (or assumed, in the case of \f(CW\*(C`main\*(C'\fR).  It is not
filtered for \f(CW\*(C`DB\*(C'\fR, \f(CW\*(C`main\*(C'\fR or private packages the way the
\&\f(CW\*(C`provides\*(C'\fR method does.
.ie n .IP """pod_inside()""" 4
.el .IP "\f(CWpod_inside()\fR" 4
.IX Item "pod_inside()"
Returns a list of \s-1POD\s0 sections.
.ie n .IP """contains_pod()""" 4
.el .IP "\f(CWcontains_pod()\fR" 4
.IX Item "contains_pod()"
Returns true if there is any \s-1POD\s0 in the file.
.ie n .IP """pod($section)""" 4
.el .IP "\f(CWpod($section)\fR" 4
.IX Item "pod($section)"
Returns the \s-1POD\s0 data in the given section.
.SH "AUTHOR"
.IX Header "AUTHOR"
Original code from Module::Build::ModuleInfo by Ken Williams
<kwilliams@cpan.org>, Randy W. Sims <RandyS@ThePierianSpring.org>
.PP
Released as Module::Metadata by Matt S Trout (mst) <mst@shadowcat.co.uk> with
assistance from David Golden (xdg) <dagolden@cpan.org>.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Original code Copyright (c) 2001\-2011 Ken Williams.
Additional code Copyright (c) 2010\-2011 Matt Trout and David Golden.
All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
