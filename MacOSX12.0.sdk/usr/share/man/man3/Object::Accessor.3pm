.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Object::Accessor 3pm"
.TH Object::Accessor 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Object::Accessor \- interface to create per object accessors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    ### using the object
\&    $obj = Object::Accessor\->new;        # create object
\&    $obj = Object::Accessor\->new(@list); # create object with accessors
\&    $obj = Object::Accessor\->new(\e%h);   # create object with accessors
\&                                         # and their allow handlers
\&
\&    $bool   = $obj\->mk_accessors(\*(Aqfoo\*(Aq); # create accessors
\&    $bool   = $obj\->mk_accessors(        # create accessors with input
\&               {foo => ALLOW_HANDLER} ); # validation
\&
\&    $bool   = $obj\->mk_aliases(          # create an alias to an existing
\&                alias_name => \*(Aqmethod\*(Aq); # method name
\&
\&    $clone  = $obj\->mk_clone;            # create a clone of original
\&                                         # object without data
\&    $bool   = $obj\->mk_flush;            # clean out all data
\&
\&    @list   = $obj\->ls_accessors;        # retrieves a list of all
\&                                         # accessors for this object
\&
\&    $bar    = $obj\->foo(\*(Aqbar\*(Aq);          # set \*(Aqfoo\*(Aq to \*(Aqbar\*(Aq
\&    $bar    = $obj\->foo();               # retrieve \*(Aqbar\*(Aq again
\&
\&    $sub    = $obj\->can(\*(Aqfoo\*(Aq);          # retrieve coderef for
\&                                         # \*(Aqfoo\*(Aq accessor
\&    $bar    = $sub\->(\*(Aqbar\*(Aq);             # set \*(Aqfoo\*(Aq via coderef
\&    $bar    = $sub\->();                  # retrieve \*(Aqbar\*(Aq by coderef
\&
\&    ### using the object as base class
\&    package My::Class;
\&    use base \*(AqObject::Accessor\*(Aq;
\&
\&    $obj    = My::Class\->new;               # create base object
\&    $bool   = $obj\->mk_accessors(\*(Aqfoo\*(Aq);    # create accessors, etc...
\&
\&    ### make all attempted access to non\-existent accessors fatal
\&    ### (defaults to false)
\&    $Object::Accessor::FATAL = 1;
\&
\&    ### enable debugging
\&    $Object::Accessor::DEBUG = 1;
\&
\&    ### advanced usage \-\- callbacks
\&    {   my $obj = Object::Accessor\->new(\*(Aqfoo\*(Aq);
\&        $obj\->register_callback( sub { ... } );
\&
\&        $obj\->foo( 1 ); # these calls invoke the callback you registered
\&        $obj\->foo()     # which allows you to change the get/set
\&                        # behaviour and what is returned to the caller.
\&    }
\&
\&    ### advanced usage \-\- lvalue attributes
\&    {   my $obj = Object::Accessor::Lvalue\->new(\*(Aqfoo\*(Aq);
\&        print $obj\->foo = 1;            # will print 1
\&    }
\&
\&    ### advanced usage \-\- scoped attribute values
\&    {   my $obj = Object::Accessor\->new(\*(Aqfoo\*(Aq);
\&
\&        $obj\->foo( 1 );
\&        print $obj\->foo;                # will print 1
\&
\&        ### bind the scope of the value of attribute \*(Aqfoo\*(Aq
\&        ### to the scope of \*(Aq$x\*(Aq \-\- when $x goes out of
\&        ### scope, \*(Aqfoo\*(Aqs previous value will be restored
\&        {   $obj\->foo( 2 => \emy $x );
\&            print $obj\->foo, \*(Aq \*(Aq, $x;   # will print \*(Aq2 2\*(Aq
\&        }
\&        print $obj\->foo;                # will print 1
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Object::Accessor\*(C'\fR provides an interface to create per object
accessors (as opposed to per \f(CW\*(C`Class\*(C'\fR accessors, as, for example,
\&\f(CW\*(C`Class::Accessor\*(C'\fR provides).
.PP
You can choose to either subclass this module, and thus using its
accessors on your own module, or to store an \f(CW\*(C`Object::Accessor\*(C'\fR
object inside your own object, and access the accessors from there.
See the \f(CW\*(C`SYNOPSIS\*(C'\fR for examples.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$object = Object::Accessor\->new( [\s-1ARGS\s0] );"
.el .SS "\f(CW$object\fP = Object::Accessor\->new( [\s-1ARGS\s0] );"
.IX Subsection "$object = Object::Accessor->new( [ARGS] );"
Creates a new (and empty) \f(CW\*(C`Object::Accessor\*(C'\fR object. This method is
inheritable.
.PP
Any arguments given to \f(CW\*(C`new\*(C'\fR are passed straight to \f(CW\*(C`mk_accessors\*(C'\fR.
.PP
If you want to be able to assign to your accessors as if they
were \f(CW\*(C`lvalue\*(C'\fRs, you should create your object in the
\&\f(CW\*(C`Object::Accessor::Lvalue\*(C'\fR namespace instead. See the section
on \f(CW\*(C`LVALUE ACCESSORS\*(C'\fR below.
.ie n .SS "$bool = $object\->mk_accessors( @ACCESSORS | \e%ACCESSOR_MAP );"
.el .SS "\f(CW$bool\fP = \f(CW$object\fP\->mk_accessors( \f(CW@ACCESSORS\fP | \e%ACCESSOR_MAP );"
.IX Subsection "$bool = $object->mk_accessors( @ACCESSORS | %ACCESSOR_MAP );"
Creates a list of accessors for this object (and \f(CW\*(C`NOT\*(C'\fR for other ones
in the same class!).
Will not clobber existing data, so if an accessor already exists,
requesting to create again is effectively a \f(CW\*(C`no\-op\*(C'\fR.
.PP
When providing a \f(CW\*(C`hashref\*(C'\fR as argument, rather than a normal list,
you can specify a list of key/value pairs of accessors and their
respective input validators. The validators can be anything that
\&\f(CW\*(C`Params::Check\*(C'\fR's \f(CW\*(C`allow\*(C'\fR function accepts. Please see its manpage
for details.
.PP
For example:
.PP
.Vb 5
\&    $object\->mk_accessors( {
\&        foo     => qr/^\ed+$/,       # digits only
\&        bar     => [0,1],           # booleans
\&        zot     => \e&my_sub         # a custom verification sub
\&    } );
.Ve
.PP
Returns true on success, false on failure.
.PP
Accessors that are called on an object, that do not exist return
\&\f(CW\*(C`undef\*(C'\fR by default, but you can make this a fatal error by setting the
global variable \f(CW$FATAL\fR to true. See the section on \f(CW\*(C`GLOBAL
VARIABLES\*(C'\fR for details.
.PP
Note that you can bind the values of attributes to a scope. This allows
you to \f(CW\*(C`temporarily\*(C'\fR change a value of an attribute, and have it's
original value restored up on the end of it's bound variable's scope;
.PP
For example, in this snippet of code, the attribute \f(CW\*(C`foo\*(C'\fR will
temporarily be set to \f(CW2\fR, until the end of the scope of \f(CW$x\fR, at
which point the original value of \f(CW1\fR will be restored.
.PP
.Vb 1
\&    my $obj = Object::Accessor\->new;
\&
\&    $obj\->mk_accessors(\*(Aqfoo\*(Aq);
\&    $obj\->foo( 1 );
\&    print $obj\->foo;                # will print 1
\&
\&    ### bind the scope of the value of attribute \*(Aqfoo\*(Aq
\&    ### to the scope of \*(Aq$x\*(Aq \-\- when $x goes out of
\&    ### scope, \*(Aqfoo\*(Aq previous value will be restored
\&    {   $obj\->foo( 2 => \emy $x );
\&        print $obj\->foo, \*(Aq \*(Aq, $x;   # will print \*(Aq2 2\*(Aq
\&    }
\&    print $obj\->foo;                # will print 1
.Ve
.PP
Note that all accessors are read/write for everyone. See the \f(CW\*(C`TODO\*(C'\fR
section for details.
.ie n .SS "@list = $self\->ls_accessors;"
.el .SS "\f(CW@list\fP = \f(CW$self\fP\->ls_accessors;"
.IX Subsection "@list = $self->ls_accessors;"
Returns a list of accessors that are supported by the current object.
The corresponding coderefs can be retrieved by passing this list one
by one to the \f(CW\*(C`can\*(C'\fR method.
.ie n .SS "$ref = $self\->ls_allow(\s-1KEY\s0)"
.el .SS "\f(CW$ref\fP = \f(CW$self\fP\->ls_allow(\s-1KEY\s0)"
.IX Subsection "$ref = $self->ls_allow(KEY)"
Returns the allow handler for the given key, which can be used with
\&\f(CW\*(C`Params::Check\*(C'\fR's \f(CW\*(C`allow()\*(C'\fR handler. If there was no allow handler
specified, an allow handler that always returns true will be returned.
.ie n .SS "$bool = $self\->mk_aliases( alias => method, [alias2 => method2, ...] );"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->mk_aliases( alias => method, [alias2 => method2, ...] );"
.IX Subsection "$bool = $self->mk_aliases( alias => method, [alias2 => method2, ...] );"
Creates an alias for a given method name. For all intents and purposes,
these two accessors are now identical for this object. This is akin to
doing the following on the symbol table level:
.PP
.Vb 1
\&  *alias = *method
.Ve
.PP
This allows you to do the following:
.PP
.Vb 2
\&  $self\->mk_accessors(\*(Aqfoo\*(Aq);
\&  $self\->mk_aliases( bar => \*(Aqfoo\*(Aq );
\&
\&  $self\->bar( 42 );
\&  print $self\->foo;     # will print 42
.Ve
.ie n .SS "$clone = $self\->mk_clone;"
.el .SS "\f(CW$clone\fP = \f(CW$self\fP\->mk_clone;"
.IX Subsection "$clone = $self->mk_clone;"
Makes a clone of the current object, which will have the exact same
accessors as the current object, but without the data stored in them.
.ie n .SS "$bool = $self\->mk_flush;"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->mk_flush;"
.IX Subsection "$bool = $self->mk_flush;"
Flushes all the data from the current object; all accessors will be
set back to their default state of \f(CW\*(C`undef\*(C'\fR.
.PP
Returns true on success and false on failure.
.ie n .SS "$bool = $self\->mk_verify;"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->mk_verify;"
.IX Subsection "$bool = $self->mk_verify;"
Checks if all values in the current object are in accordance with their
own allow handler. Specifically useful to check if an empty initialised
object has been filled with values satisfying their own allow criteria.
.ie n .SS "$bool = $self\->register_callback( sub { ... } );"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->register_callback( sub { ... } );"
.IX Subsection "$bool = $self->register_callback( sub { ... } );"
This method allows you to register a callback, that is invoked
every time an accessor is called. This allows you to munge input
data, access external data stores, etc.
.PP
You are free to return whatever you wish. On a \f(CW\*(C`set\*(C'\fR call, the
data is even stored in the object.
.PP
Below is an example of the use of a callback.
.PP
.Vb 1
\&    $object\->some_method( "some_value" );
\&
\&    my $callback = sub {
\&        my $self    = shift; # the object
\&        my $meth    = shift; # "some_method"
\&        my $val     = shift; # ["some_value"]
\&                             # could be undef \-\- check \*(Aqexists\*(Aq;
\&                             # if scalar @$val is empty, it was a \*(Aqget\*(Aq
\&
\&        # your code here
\&
\&        return $new_val;     # the value you want to be set/returned
\&    }
.Ve
.PP
To access the values stored in the object, circumventing the
callback structure, you should use the \f(CW\*(C`_\|_\|_get\*(C'\fR and \f(CW\*(C`_\|_\|_set\*(C'\fR methods
documented further down.
.ie n .SS "$bool = $self\->can( \s-1METHOD_NAME \s0)"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->can( \s-1METHOD_NAME \s0)"
.IX Subsection "$bool = $self->can( METHOD_NAME )"
This method overrides \f(CW\*(C`UNIVERAL::can\*(C'\fR in order to provide coderefs to
accessors which are loaded on demand. It will behave just like
\&\f(CW\*(C`UNIVERSAL::can\*(C'\fR where it can \*(-- returning a class method if it exists,
or a closure pointing to a valid accessor of this particular object.
.PP
You can use it as follows:
.PP
.Vb 5
\&    $sub = $object\->can(\*(Aqsome_accessor\*(Aq);   # retrieve the coderef
\&    $sub\->(\*(Aqfoo\*(Aq);                          # \*(Aqsome_accessor\*(Aq now set
\&                                            # to \*(Aqfoo\*(Aq for $object
\&    $foo = $sub\->();                        # retrieve the contents
\&                                            # of \*(Aqsome_accessor\*(Aq
.Ve
.PP
See the \f(CW\*(C`SYNOPSIS\*(C'\fR for more examples.
.ie n .SS "$val = $self\->_\|_\|_get( \s-1METHOD_NAME \s0);"
.el .SS "\f(CW$val\fP = \f(CW$self\fP\->_\|_\|_get( \s-1METHOD_NAME \s0);"
.IX Subsection "$val = $self->___get( METHOD_NAME );"
Method to directly access the value of the given accessor in the
object. It circumvents all calls to allow checks, callbacks, etc.
.PP
Use only if you \f(CW\*(C`Know What You Are Doing\*(C'\fR! General usage for
this functionality would be in your own custom callbacks.
.ie n .SS "$bool = $self\->_\|_\|_set( \s-1METHOD_NAME\s0 => \s-1VALUE \s0);"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->_\|_\|_set( \s-1METHOD_NAME\s0 => \s-1VALUE \s0);"
.IX Subsection "$bool = $self->___set( METHOD_NAME => VALUE );"
Method to directly set the value of the given accessor in the
object. It circumvents all calls to allow checks, callbacks, etc.
.PP
Use only if you \f(CW\*(C`Know What You Are Doing\*(C'\fR! General usage for
this functionality would be in your own custom callbacks.
.ie n .SS "$bool = $self\->_\|_\|_alias( \s-1ALIAS\s0 => \s-1METHOD \s0);"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->_\|_\|_alias( \s-1ALIAS\s0 => \s-1METHOD \s0);"
.IX Subsection "$bool = $self->___alias( ALIAS => METHOD );"
Method to directly alias one accessor to another for
this object. It circumvents all sanity checks, etc.
.PP
Use only if you \f(CW\*(C`Know What You Are Doing\*(C'\fR!
.SH "LVALUE ACCESSORS"
.IX Header "LVALUE ACCESSORS"
\&\f(CW\*(C`Object::Accessor\*(C'\fR supports \f(CW\*(C`lvalue\*(C'\fR attributes as well. To enable
these, you should create your objects in the designated namespace,
\&\f(CW\*(C`Object::Accessor::Lvalue\*(C'\fR. For example:
.PP
.Vb 3
\&    my $obj = Object::Accessor::Lvalue\->new(\*(Aqfoo\*(Aq);
\&    $obj\->foo += 1;
\&    print $obj\->foo;
.Ve
.PP
will actually print \f(CW1\fR and work as expected. Since this is an
optional feature, that's not desirable in all cases, we require
you to explicitly use the \f(CW\*(C`Object::Accessor::Lvalue\*(C'\fR class.
.PP
Doing the same on the standard \f(CW\*(C`Object\*(C'\fR>Accessor> class would
generate the following code & errors:
.PP
.Vb 2
\&    my $obj = Object::Accessor\->new(\*(Aqfoo\*(Aq);
\&    $obj\->foo += 1;
\&
\&    Can\*(Aqt modify non\-lvalue subroutine call
.Ve
.PP
Note that \f(CW\*(C`lvalue\*(C'\fR support on \f(CW\*(C`AUTOLOAD\*(C'\fR routines is a
\&\f(CW\*(C`perl 5.8.x\*(C'\fR feature. See perldoc perl58delta for details.
.SS "\s-1CAVEATS\s0"
.IX Subsection "CAVEATS"
.IP "\(bu" 4
Allow handlers
.Sp
Due to the nature of \f(CW\*(C`lvalue subs\*(C'\fR, we never get access to the
value you are assigning, so we can not check it against your allow
handler. Allow handlers are therefor unsupported under \f(CW\*(C`lvalue\*(C'\fR
conditions.
.Sp
See \f(CW\*(C`perldoc perlsub\*(C'\fR for details.
.IP "\(bu" 4
Callbacks
.Sp
Due to the nature of \f(CW\*(C`lvalue subs\*(C'\fR, we never get access to the
value you are assigning, so we can not check provide this value
to your callback. Furthermore, we can not distinguish between
a \f(CW\*(C`get\*(C'\fR and a \f(CW\*(C`set\*(C'\fR call. Callbacks are therefor unsupported
under \f(CW\*(C`lvalue\*(C'\fR conditions.
.Sp
See \f(CW\*(C`perldoc perlsub\*(C'\fR for details.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.ie n .SS "$Object::Accessor::FATAL"
.el .SS "\f(CW$Object::Accessor::FATAL\fP"
.IX Subsection "$Object::Accessor::FATAL"
Set this variable to true to make all attempted access to non-existent
accessors be fatal.
This defaults to \f(CW\*(C`false\*(C'\fR.
.ie n .SS "$Object::Accessor::DEBUG"
.el .SS "\f(CW$Object::Accessor::DEBUG\fP"
.IX Subsection "$Object::Accessor::DEBUG"
Set this variable to enable debugging output.
This defaults to \f(CW\*(C`false\*(C'\fR.
.SH "TODO"
.IX Header "TODO"
.SS "Create read-only accessors"
.IX Subsection "Create read-only accessors"
Currently all accessors are read/write for everyone. Perhaps a future
release should make it possible to have read-only accessors as well.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you use codereferences for your allow handlers, you will not be able
to freeze the data structures using \f(CW\*(C`Storable\*(C'\fR.
.PP
Due to a bug in storable (until at least version 2.15), \f(CW\*(C`qr//\*(C'\fR compiled
regexes also don't de-serialize properly. Although this bug has been
reported, you should be aware of this issue when serializing your objects.
.PP
You can track the bug here:
.PP
.Vb 1
\&    http://rt.cpan.org/Ticket/Display.html?id=1827
.Ve
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-object\-accessor@rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
