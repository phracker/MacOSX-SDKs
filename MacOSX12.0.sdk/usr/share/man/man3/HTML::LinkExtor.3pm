.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTML::LinkExtor 3"
.TH HTML::LinkExtor 3 "2013-10-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::LinkExtor \- Extract links from an HTML document
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& require HTML::LinkExtor;
\& $p = HTML::LinkExtor\->new(\e&cb, "http://www.perl.org/");
\& sub cb {
\&     my($tag, %links) = @_;
\&     print "$tag @{[%links]}\en";
\& }
\& $p\->parse_file("index.html");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIHTML::LinkExtor\fR is an \s-1HTML\s0 parser that extracts links from an
\&\s-1HTML\s0 document.  The \fIHTML::LinkExtor\fR is a subclass of
\&\fIHTML::Parser\fR. This means that the document should be given to the
parser by calling the \f(CW$p\fR\->\fBparse()\fR or \f(CW$p\fR\->\fBparse_file()\fR methods.
.ie n .IP "$p = HTML::LinkExtor\->new" 4
.el .IP "\f(CW$p\fR = HTML::LinkExtor\->new" 4
.IX Item "$p = HTML::LinkExtor->new"
.PD 0
.ie n .IP "$p = HTML::LinkExtor\->new( $callback )" 4
.el .IP "\f(CW$p\fR = HTML::LinkExtor\->new( \f(CW$callback\fR )" 4
.IX Item "$p = HTML::LinkExtor->new( $callback )"
.ie n .IP "$p = HTML::LinkExtor\->new( $callback, $base )" 4
.el .IP "\f(CW$p\fR = HTML::LinkExtor\->new( \f(CW$callback\fR, \f(CW$base\fR )" 4
.IX Item "$p = HTML::LinkExtor->new( $callback, $base )"
.PD
The constructor takes two optional arguments. The first is a reference
to a callback routine. It will be called as links are found. If a
callback is not provided, then links are just accumulated internally
and can be retrieved by calling the \f(CW$p\fR\->\fBlinks()\fR method.
.Sp
The \f(CW$base\fR argument is an optional base \s-1URL\s0 used to absolutize all URLs found.
You need to have the \fI\s-1URI\s0\fR module installed if you provide \f(CW$base\fR.
.Sp
The callback is called with the lowercase tag name as first argument,
and then all link attributes as separate key/value pairs.  All
non-link attributes are removed.
.ie n .IP "$p\->links" 4
.el .IP "\f(CW$p\fR\->links" 4
.IX Item "$p->links"
Returns a list of all links found in the document.  The returned
values will be anonymous arrays with the following elements:
.Sp
.Vb 1
\&  [$tag, $attr => $url1, $attr2 => $url2,...]
.Ve
.Sp
The \f(CW$p\fR\->links method will also truncate the internal link list.  This
means that if the method is called twice without any parsing
between them the second call will return an empty list.
.Sp
Also note that \f(CW$p\fR\->links will always be empty if a callback routine
was provided when the \fIHTML::LinkExtor\fR was created.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This is an example showing how you can extract links from a document
received using \s-1LWP:\s0
.PP
.Vb 3
\&  use LWP::UserAgent;
\&  use HTML::LinkExtor;
\&  use URI::URL;
\&
\&  $url = "http://www.perl.org/";  # for instance
\&  $ua = LWP::UserAgent\->new;
\&
\&  # Set up a callback that collect image links
\&  my @imgs = ();
\&  sub callback {
\&     my($tag, %attr) = @_;
\&     return if $tag ne \*(Aqimg\*(Aq;  # we only look closer at <img ...>
\&     push(@imgs, values %attr);
\&  }
\&
\&  # Make the parser.  Unfortunately, we don\*(Aqt know the base yet
\&  # (it might be different from $url)
\&  $p = HTML::LinkExtor\->new(\e&callback);
\&
\&  # Request document and parse it as it arrives
\&  $res = $ua\->request(HTTP::Request\->new(GET => $url),
\&                      sub {$p\->parse($_[0])});
\&
\&  # Expand all image URLs to absolute ones
\&  my $base = $res\->base;
\&  @imgs = map { $_ = url($_, $base)\->abs; } @imgs;
\&
\&  # Print them out
\&  print join("\en", @imgs), "\en";
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser, HTML::Tagset, \s-1LWP\s0, \s-1URI::URL\s0
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2001 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
