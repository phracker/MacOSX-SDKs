.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Address 3"
.TH Mail::Address 3 "2014-01-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Address \- Parse mail addresses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Address;
\& my @addrs = Mail::Address\->parse($line);
\&
\& foreach $addr (@addrs) {
\&     print $addr\->format,"\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Mail::Address\*(C'\fR extracts and manipulates email addresses from a message
header.  It cannot be used to extract addresses from some random text.
You can use this module to create \s-1RFC822\s0 compliant fields.
.PP
Although \f(CW\*(C`Mail::Address\*(C'\fR is a very popular subject for books, and is
used in many applications, it does a very poor job on the more complex
message fields.  It does only handle simple address formats (which
covers about 95% of what can be found). Problems are with
.IP "\(bu" 4
no support for address groups, even not with the semi-colon as
separator between addresses;
.IP "\(bu" 4
limited support for escapes in phrases and comments.  There are
cases where it can get wrong; and
.IP "\(bu" 4
you have to take care of most escaping when you create an address yourself:
\&\f(CW\*(C`Mail::Address\*(C'\fR does not do that for you.
.PP
Often requests are made to the maintainers of this code improve this
situation, but this is not a good idea, where it will break zillions
of existing applications.  If you wish for a fully \s-1RFC2822\s0 compliant
implementation you may take a look at Mail::Message::Field::Full,
part of MailBox.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Address\->\fBnew\fR(\s-1PHRASE, ADDRESS,\s0 [ \s-1COMMENT \s0])" 4
.IX Item "Mail::Address->new(PHRASE, ADDRESS, [ COMMENT ])"
Create a new \f(CW\*(C`Mail::Address\*(C'\fR object which represents an address with the
elements given. In a message these 3 elements would be seen like:
.Sp
.Vb 2
\& PHRASE <ADDRESS> (COMMENT)
\& ADDRESS (COMMENT)
.Ve
.Sp
example:
.Sp
.Vb 1
\& Mail::Address\->new("Perl5 Porters", "perl5\-porters@africa.nicoh.com");
.Ve
.ie n .IP "$obj\->\fBparse\fR(\s-1LINE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR(\s-1LINE\s0)" 4
.IX Item "$obj->parse(LINE)"
Parse the given line a return a list of extracted \f(CW\*(C`Mail::Address\*(C'\fR objects.
The line would normally be one taken from a To,Cc or Bcc line in a message
.Sp
example:
.Sp
.Vb 1
\& my @addr = Mail::Address\->parse($line);
.Ve
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBaddress\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaddress\fR()" 4
.IX Item "$obj->address()"
Return the address part of the object.
.ie n .IP "$obj\->\fBcomment\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR()" 4
.IX Item "$obj->comment()"
Return the comment part of the object
.ie n .IP "$obj\->\fBformat\fR([ADDRESSes])" 4
.el .IP "\f(CW$obj\fR\->\fBformat\fR([ADDRESSes])" 4
.IX Item "$obj->format([ADDRESSes])"
Return a string representing the address in a suitable form to be placed
on a \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, or \f(CW\*(C`Bcc\*(C'\fR line of a message.  This method is called on
the first \s-1ADDRESS\s0 to be used; other specified ADDRESSes will be appended,
separated with commas.
.ie n .IP "$obj\->\fBphrase\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBphrase\fR()" 4
.IX Item "$obj->phrase()"
Return the phrase part of the object.
.SS "Smart accessors"
.IX Subsection "Smart accessors"
.ie n .IP "$obj\->\fBhost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhost\fR()" 4
.IX Item "$obj->host()"
Return the address excluding the user id and '@'
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Using the information contained within the object attempt to identify what
the person or groups name is.
.Sp
\&\fBNote:\fR This function tries to be smart with the \*(L"phrase\*(R" of the
email address, which is probably a very bad idea.  Consider to use
\&\fIphrase()\fR itself.
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
Return the address excluding the '@' and the mail domain
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
