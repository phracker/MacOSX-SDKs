.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::UTF8Columns 3"
.TH DBIx::Class::UTF8Columns 3 "2014-01-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::UTF8Columns \- Force UTF8 (Unicode) flag on columns (DEPRECATED)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Artist;
\&    use base \*(AqDBIx::Class::Core\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->load_components(qw/UTF8Columns/);
\&    _\|_PACKAGE_\|_\->utf8_columns(qw/name description/);
\&
\&    # then belows return strings with utf8 flag
\&    $artist\->name;
\&    $artist\->get_column(\*(Aqdescription\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to get and store utf8 (unicode) column data
in a database that does not natively support unicode. It ensures
that column data is correctly serialised as a byte stream when
stored and de-serialised to unicode strings on retrieval.
.PP
.Vb 2
\&  THE USE OF THIS MODULE (AND ITS COUSIN DBIx::Class::ForceUTF8) IS VERY
\&  STRONGLY DISCOURAGED, PLEASE READ THE WARNINGS BELOW FOR AN EXPLANATION.
.Ve
.PP
If you want to continue using this module and do not want to receive
further warnings set the environment variable \f(CW\*(C`DBIC_UTF8COLUMNS_OK\*(C'\fR
to a true value.
.SS "Warning \- Module does not function properly on create/insert"
.IX Subsection "Warning - Module does not function properly on create/insert"
Recently (April 2010) a bug was found deep in the core of DBIx::Class
which affects any component attempting to perform encoding/decoding by
overloading store_column and
get_columns. As a result of this problem
create sends the original column values
to the database, while update sends the
encoded values. DBIx::Class::UTF8Columns and DBIx::Class::ForceUTF8
are both affected by this bug.
.PP
It is unclear how this bug went undetected for so long (it was
introduced in March 2006), No attempts to fix it will be made while the
implications of changing such a fundamental behavior of DBIx::Class are
being evaluated. However in this day and age you should not be using
this module anyway as Unicode is properly supported by all major
database engines, as explained below.
.PP
If you have specific questions about the integrity of your data in light
of this development \- please
join us on \s-1IRC\s0 or the mailing list
to further discuss your concerns with the team.
.SS "Warning \- Native Database Unicode Support"
.IX Subsection "Warning - Native Database Unicode Support"
If your database natively supports Unicode (as does SQLite with the
\&\f(CW\*(C`sqlite_unicode\*(C'\fR connect flag, MySQL with \f(CW\*(C`mysql_enable_utf8\*(C'\fR
connect flag or Postgres with the \f(CW\*(C`pg_enable_utf8\*(C'\fR connect flag),
then this component should \fBnot\fR be used, and will corrupt unicode
data in a subtle and unexpected manner.
.PP
It is far better to do Unicode support within the database if
possible rather than converting data to and from raw bytes on every
database round trip.
.SS "Warning \- Component Overloading"
.IX Subsection "Warning - Component Overloading"
Note that this module overloads \*(L"store_column\*(R" in DBIx::Class::Row in a way
that may prevent other components overloading the same method from working
correctly. This component must be the last one before DBIx::Class::Row
(which is provided by DBIx::Class::Core). DBIx::Class will detect such
incorrect component order and issue an appropriate warning, advising which
components need to be loaded differently.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Stash::ForceUTF8, DBIx::Class::UUIDColumns.
.SH "METHODS"
.IX Header "METHODS"
.SS "utf8_columns"
.IX Subsection "utf8_columns"
.SH "EXTENDED METHODS"
.IX Header "EXTENDED METHODS"
.SS "get_column"
.IX Subsection "get_column"
.SS "get_columns"
.IX Subsection "get_columns"
.SS "store_column"
.IX Subsection "store_column"
.SH "AUTHORS"
.IX Header "AUTHORS"
See \*(L"\s-1CONTRIBUTORS\*(R"\s0 in DBIx::Class.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
