.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moo 3"
.TH Moo 3 "2013-12-31" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moo \- Minimalist Object Orientation (with Moose compatibility)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package Cat::Food;
\&
\& use Moo;
\& use namespace::clean;
\&
\& sub feed_lion {
\&   my $self = shift;
\&   my $amount = shift || 1;
\&
\&   $self\->pounds( $self\->pounds \- $amount );
\& }
\&
\& has taste => (
\&   is => \*(Aqro\*(Aq,
\& );
\&
\& has brand => (
\&   is  => \*(Aqro\*(Aq,
\&   isa => sub {
\&     die "Only SWEET\-TREATZ supported!" unless $_[0] eq \*(AqSWEET\-TREATZ\*(Aq
\&   },
\& );
\&
\& has pounds => (
\&   is  => \*(Aqrw\*(Aq,
\&   isa => sub { die "$_[0] is too much cat food!" unless $_[0] < 15 },
\& );
\&
\& 1;
.Ve
.PP
And elsewhere:
.PP
.Vb 5
\& my $full = Cat::Food\->new(
\&    taste  => \*(AqDELICIOUS.\*(Aq,
\&    brand  => \*(AqSWEET\-TREATZ\*(Aq,
\&    pounds => 10,
\& );
\&
\& $full\->feed_lion;
\&
\& say $full\->pounds;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an extremely light-weight subset of Moose optimised for
rapid startup and \*(L"pay only for what you use\*(R".
.PP
It also avoids depending on any \s-1XS\s0 modules to allow simple deployments.  The
name \f(CW\*(C`Moo\*(C'\fR is based on the idea that it provides almost \*(-- but not quite \*(-- two
thirds of Moose.
.PP
Unlike Mouse this module does not aim at full compatibility with
Moose's surface syntax, preferring instead of provide full interoperability
via the metaclass inflation capabilities described in \*(L"\s-1MOO AND MOOSE\*(R"\s0.
.PP
For a full list of the minor differences between Moose and Moo's surface
syntax, see \*(L"\s-1INCOMPATIBILITIES WITH MOOSE\*(R"\s0.
.SH "WHY MOO EXISTS"
.IX Header "WHY MOO EXISTS"
If you want a full object system with a rich Metaprotocol, Moose is
already wonderful.
.PP
However, sometimes you're writing a command line script or a \s-1CGI\s0 script
where fast startup is essential, or code designed to be deployed as a single
file via App::FatPacker, or you're writing a \s-1CPAN\s0 module and you want it
to be usable by people with those constraints.
.PP
I've tried several times to use Mouse but it's 3x the size of Moo and
takes longer to load than most of my Moo based \s-1CGI\s0 scripts take to run.
.PP
If you don't want Moose, you don't want \*(L"less metaprotocol\*(R" like Mouse,
you want \*(L"as little as possible\*(R" \*(-- which means \*(L"no metaprotocol\*(R", which is
what Moo provides.
.PP
Better still, if you install and load Moose, we set up metaclasses for your
Moo classes and Moo::Role roles, so you can use them in Moose code
without ever noticing that some of your codebase is using Moo.
.PP
Hence, Moo exists as its name \*(-- Minimal Object Orientation \*(-- with a pledge
to make it smooth to upgrade to Moose when you need more than minimal
features.
.SH "MOO AND MOOSE"
.IX Header "MOO AND MOOSE"
If Moo detects Moose being loaded, it will automatically register
metaclasses for your Moo and Moo::Role packages, so you should be able
to use them in Moose code without anybody ever noticing you aren't using
Moose everywhere.
.PP
Moo will also create Moose type constraints for
classes and roles, so that \f(CW\*(C`isa => \*(AqMyClass\*(Aq\*(C'\fR and \f(CW\*(C`isa => \*(AqMyRole\*(Aq\*(C'\fR
work the same as for Moose classes and roles.
.PP
Extending a Moose class or consuming a Moose::Role will also work.
.PP
So will extending a Mouse class or consuming a Mouse::Role \- but note
that we don't provide Mouse metaclasses or metaroles so the other way
around doesn't work. This feature exists for Any::Moose users porting to
Moo; enabling Mouse users to use Moo classes is not a priority for us.
.PP
This means that there is no need for anything like Any::Moose for Moo
code \- Moo and Moose code should simply interoperate without problem. To
handle Mouse code, you'll likely need an empty Moo role or class consuming
or extending the Mouse stuff since it doesn't register true Moose
metaclasses like Moo does.
.PP
If you want types to be upgraded to the Moose types, use
MooX::Types::MooseLike and install the MooseX::Types library to
match the MooX::Types::MooseLike library you're using \- Moo will
load the MooseX::Types library and use that type for the newly created
metaclass.
.PP
If you need to disable the metaclass creation, add:
.PP
.Vb 1
\&  no Moo::sification;
.Ve
.PP
to your code before Moose is loaded, but bear in mind that this switch is
currently global and turns the mechanism off entirely so don't put this
in library code.
.SH "MOO AND CLASS::XSACCESSOR"
.IX Header "MOO AND CLASS::XSACCESSOR"
If a new enough version of Class::XSAccessor is available, it
will be used to generate simple accessors, readers, and writers for
a speed boost.  Simple accessors are those without lazy defaults,
type checks/coercions, or triggers.  Readers and writers generated
by Class::XSAccessor will behave slightly differently: they will
reject attempts to call them with the incorrect number of parameters.
.SH "MOO VERSUS ANY::MOOSE"
.IX Header "MOO VERSUS ANY::MOOSE"
Any::Moose will load Mouse normally, and Moose in a program using
Moose \- which theoretically allows you to get the startup time of Mouse
without disadvantaging Moose users.
.PP
Sadly, this doesn't entirely work, since the selection is load order dependent
\&\- Moo's metaclass inflation system explained above in \*(L"\s-1MOO AND MOOSE\*(R"\s0 is
significantly more reliable.
.PP
So if you want to write a \s-1CPAN\s0 module that loads fast or has only pure perl
dependencies but is also fully usable by Moose users, you should be using
Moo.
.PP
For a full explanation, see the article
<http://shadow.cat/blog/matt\-s\-trout/moo\-versus\-any\-moose> which explains
the differing strategies in more detail and provides a direct example of
where Moo succeeds and Any::Moose fails.
.SH "IMPORTED METHODS"
.IX Header "IMPORTED METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& Foo::Bar\->new( attr1 => 3 );
.Ve
.PP
or
.PP
.Vb 1
\& Foo::Bar\->new({ attr1 => 3 });
.Ve
.SS "\s-1BUILDARGS\s0"
.IX Subsection "BUILDARGS"
.Vb 2
\& sub BUILDARGS {
\&   my ( $class, @args ) = @_;
\&
\&   unshift @args, "attr1" if @args % 2 == 1;
\&
\&   return { @args };
\& };
\&
\& Foo::Bar\->new( 3 );
.Ve
.PP
The default implementation of this method accepts a hash or hash reference of
named parameters. If it receives a single argument that isn't a hash reference
it throws an error.
.PP
You can override this method in your class to handle other types of options
passed to the constructor.
.PP
This method should always return a hash reference of named options.
.SS "\s-1FOREIGNBUILDARGS\s0"
.IX Subsection "FOREIGNBUILDARGS"
If you are inheriting from a non-Moo class, the arguments passed to the parent
class constructor can be manipulated by defining a \f(CW\*(C`FOREIGNBUILDARGS\*(C'\fR method.
It will receive the same arguments as \f(CW\*(C`BUILDARGS\*(C'\fR, and should return a list
of arguments to pass to the parent class constructor.
.SS "\s-1BUILD\s0"
.IX Subsection "BUILD"
Define a \f(CW\*(C`BUILD\*(C'\fR method on your class and the constructor will automatically
call the \f(CW\*(C`BUILD\*(C'\fR method from parent down to child after the object has
been instantiated.  Typically this is used for object validation or possibly
logging.
.SS "\s-1DEMOLISH\s0"
.IX Subsection "DEMOLISH"
If you have a \f(CW\*(C`DEMOLISH\*(C'\fR method anywhere in your inheritance hierarchy,
a \f(CW\*(C`DESTROY\*(C'\fR method is created on first object construction which will call
\&\f(CW\*(C`$instance\->DEMOLISH($in_global_destruction)\*(C'\fR for each \f(CW\*(C`DEMOLISH\*(C'\fR
method from child upwards to parents.
.PP
Note that the \f(CW\*(C`DESTROY\*(C'\fR method is created on first construction of an object
of your class in order to not add overhead to classes without \f(CW\*(C`DEMOLISH\*(C'\fR
methods; this may prove slightly surprising if you try and define your own.
.SS "does"
.IX Subsection "does"
.Vb 3
\& if ($foo\->does(\*(AqSome::Role1\*(Aq)) {
\&   ...
\& }
.Ve
.PP
Returns true if the object composes in the passed role.
.SH "IMPORTED SUBROUTINES"
.IX Header "IMPORTED SUBROUTINES"
.SS "extends"
.IX Subsection "extends"
.Vb 1
\& extends \*(AqParent::Class\*(Aq;
.Ve
.PP
Declares base class. Multiple superclasses can be passed for multiple
inheritance (but please use roles instead).  The class will be loaded, however
no errors will be triggered if it can't be found and there are already subs in
the class.
.PP
Calling extends more than once will \s-1REPLACE\s0 your superclasses, not add to
them like 'use base' would.
.SS "with"
.IX Subsection "with"
.Vb 1
\& with \*(AqSome::Role1\*(Aq;
.Ve
.PP
or
.PP
.Vb 1
\& with \*(AqSome::Role1\*(Aq, \*(AqSome::Role2\*(Aq;
.Ve
.PP
Composes one or more Moo::Role (or Role::Tiny) roles into the current
class.  An error will be raised if these roles have conflicting methods.  The
roles will be loaded using the same mechansim as \f(CW\*(C`extends\*(C'\fR uses.
.SS "has"
.IX Subsection "has"
.Vb 3
\& has attr => (
\&   is => \*(Aqro\*(Aq,
\& );
.Ve
.PP
Declares an attribute for the class.
.PP
.Vb 5
\& package Foo;
\& use Moo;
\& has \*(Aqattr\*(Aq => (
\&   is => \*(Aqro\*(Aq
\& );
\&
\& package Bar;
\& use Moo;
\& extends \*(AqFoo\*(Aq;
\& has \*(Aq+attr\*(Aq => (
\&   default => sub { "blah" },
\& );
.Ve
.PP
Using the \f(CW\*(C`+\*(C'\fR notation, it's possible to override an attribute.
.PP
The options for \f(CW\*(C`has\*(C'\fR are as follows:
.IP "\(bu" 2
is
.Sp
\&\fBrequired\fR, may be \f(CW\*(C`ro\*(C'\fR, \f(CW\*(C`lazy\*(C'\fR, \f(CW\*(C`rwp\*(C'\fR or \f(CW\*(C`rw\*(C'\fR.
.Sp
\&\f(CW\*(C`ro\*(C'\fR generates an accessor that dies if you attempt to write to it \- i.e.
a getter only \- by defaulting \f(CW\*(C`reader\*(C'\fR to the name of the attribute.
.Sp
\&\f(CW\*(C`lazy\*(C'\fR generates a reader like \f(CW\*(C`ro\*(C'\fR, but also sets \f(CW\*(C`lazy\*(C'\fR to 1 and
\&\f(CW\*(C`builder\*(C'\fR to \f(CW\*(C`_build_${attribute_name}\*(C'\fR to allow on-demand generated
attributes.  This feature was my attempt to fix my incompetence when
originally designing \f(CW\*(C`lazy_build\*(C'\fR, and is also implemented by
MooseX::AttributeShortcuts. There is, however, nothing to stop you
using \f(CW\*(C`lazy\*(C'\fR and \f(CW\*(C`builder\*(C'\fR yourself with \f(CW\*(C`rwp\*(C'\fR or \f(CW\*(C`rw\*(C'\fR \- it's just that
this isn't generally a good idea so we don't provide a shortcut for it.
.Sp
\&\f(CW\*(C`rwp\*(C'\fR generates a reader like \f(CW\*(C`ro\*(C'\fR, but also sets \f(CW\*(C`writer\*(C'\fR to
\&\f(CW\*(C`_set_${attribute_name}\*(C'\fR for attributes that are designed to be written
from inside of the class, but read-only from outside.
This feature comes from MooseX::AttributeShortcuts.
.Sp
\&\f(CW\*(C`rw\*(C'\fR generates a normal getter/setter by defaulting \f(CW\*(C`accessor\*(C'\fR to the
name of the attribute.
.IP "\(bu" 2
isa
.Sp
Takes a coderef which is meant to validate the attribute.  Unlike Moose, Moo
does not include a basic type system, so instead of doing \f(CW\*(C`isa => \*(AqNum\*(Aq\*(C'\fR,
one should do
.Sp
.Vb 3
\& isa => sub {
\&   die "$_[0] is not a number!" unless looks_like_number $_[0]
\& },
.Ve
.Sp
Note that the return value is ignored, only whether the sub lives or
dies matters.
.Sp
Sub::Quote aware
.Sp
Since Moo does \fBnot\fR run the \f(CW\*(C`isa\*(C'\fR check before \f(CW\*(C`coerce\*(C'\fR if a coercion
subroutine has been supplied, \f(CW\*(C`isa\*(C'\fR checks are not structural to your code
and can, if desired, be omitted on non-debug builds (although if this results
in an uncaught bug causing your program to break, the Moo authors guarantee
nothing except that you get to keep both halves).
.Sp
If you want MooseX::Types style named types, look at
MooX::Types::MooseLike.
.Sp
To cause your \f(CW\*(C`isa\*(C'\fR entries to be automatically mapped to named
Moose::Meta::TypeConstraint objects (rather than the default behaviour
of creating an anonymous type), set:
.Sp
.Vb 4
\&  $Moo::HandleMoose::TYPE_MAP{$isa_coderef} = sub {
\&    require MooseX::Types::Something;
\&    return MooseX::Types::Something::TypeName();
\&  };
.Ve
.Sp
Note that this example is purely illustrative; anything that returns a
Moose::Meta::TypeConstraint object or something similar enough to it to
make Moose happy is fine.
.IP "\(bu" 2
coerce
.Sp
Takes a coderef which is meant to coerce the attribute.  The basic idea is to
do something like the following:
.Sp
.Vb 3
\& coerce => sub {
\&   $_[0] % 2 ? $_[0] : $_[0] + 1
\& },
.Ve
.Sp
Note that Moo will always fire your coercion: this is to permit
\&\f(CW\*(C`isa\*(C'\fR entries to be used purely for bug trapping, whereas coercions are
always structural to your code. We do, however, apply any supplied \f(CW\*(C`isa\*(C'\fR
check after the coercion has run to ensure that it returned a valid value.
.Sp
Sub::Quote aware
.IP "\(bu" 2
handles
.Sp
Takes a string
.Sp
.Vb 1
\&  handles => \*(AqRobotRole\*(Aq
.Ve
.Sp
Where \f(CW\*(C`RobotRole\*(C'\fR is a role (Moo::Role) that defines an interface which
becomes the list of methods to handle.
.Sp
Takes a list of methods
.Sp
.Vb 1
\& handles => [ qw( one two ) ]
.Ve
.Sp
Takes a hashref
.Sp
.Vb 3
\& handles => {
\&   un => \*(Aqone\*(Aq,
\& }
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`trigger\*(C'\fR
.Sp
Takes a coderef which will get called any time the attribute is set. This
includes the constructor, but not default or built values. Coderef will be
invoked against the object with the new value as an argument.
.Sp
If you set this to just \f(CW1\fR, it generates a trigger which calls the
\&\f(CW\*(C`_trigger_${attr_name}\*(C'\fR method on \f(CW$self\fR. This feature comes from
MooseX::AttributeShortcuts.
.Sp
Note that Moose also passes the old value, if any; this feature is not yet
supported.
.Sp
Sub::Quote aware
.IP "\(bu" 2
\&\f(CW\*(C`default\*(C'\fR
.Sp
Takes a coderef which will get called with \f(CW$self\fR as its only argument
to populate an attribute if no value is supplied to the constructor \- or
if the attribute is lazy, when the attribute is first retrieved if no
value has yet been provided.
.Sp
If a simple scalar is provided, it will be inlined as a string. Any non-code
reference (hash, array) will result in an error \- for that case instead use
a code reference that returns the desired value.
.Sp
Note that if your default is fired during \fInew()\fR there is no guarantee that
other attributes have been populated yet so you should not rely on their
existence.
.Sp
Sub::Quote aware
.IP "\(bu" 2
\&\f(CW\*(C`predicate\*(C'\fR
.Sp
Takes a method name which will return true if an attribute has a value.
.Sp
If you set this to just \f(CW1\fR, the predicate is automatically named
\&\f(CW\*(C`has_${attr_name}\*(C'\fR if your attribute's name does not start with an
underscore, or \f(CW\*(C`_has_${attr_name_without_the_underscore}\*(C'\fR if it does.
This feature comes from MooseX::AttributeShortcuts.
.IP "\(bu" 2
\&\f(CW\*(C`builder\*(C'\fR
.Sp
Takes a method name which will be called to create the attribute \- functions
exactly like default except that instead of calling
.Sp
.Vb 1
\&  $default\->($self);
.Ve
.Sp
Moo will call
.Sp
.Vb 1
\&  $self\->$builder;
.Ve
.Sp
The following features come from MooseX::AttributeShortcuts:
.Sp
If you set this to just \f(CW1\fR, the builder is automatically named
\&\f(CW\*(C`_build_${attr_name}\*(C'\fR.
.Sp
If you set this to a coderef or code-convertible object, that variable will be
installed under \f(CW\*(C`$class::_build_${attr_name}\*(C'\fR and the builder set to the same
name.
.IP "\(bu" 2
\&\f(CW\*(C`clearer\*(C'\fR
.Sp
Takes a method name which will clear the attribute.
.Sp
If you set this to just \f(CW1\fR, the clearer is automatically named
\&\f(CW\*(C`clear_${attr_name}\*(C'\fR if your attribute's name does not start with an
underscore, or <_clear_${attr_name_without_the_underscore}> if it does.
This feature comes from MooseX::AttributeShortcuts.
.IP "\(bu" 2
\&\f(CW\*(C`lazy\*(C'\fR
.Sp
\&\fBBoolean\fR.  Set this if you want values for the attribute to be grabbed
lazily.  This is usually a good idea if you have a \*(L"builder\*(R" which requires
another attribute to be set.
.IP "\(bu" 2
\&\f(CW\*(C`required\*(C'\fR
.Sp
\&\fBBoolean\fR.  Set this if the attribute must be passed on instantiation.
.IP "\(bu" 2
\&\f(CW\*(C`reader\*(C'\fR
.Sp
The value of this attribute will be the name of the method to get the value of
the attribute.  If you like Java style methods, you might set this to
\&\f(CW\*(C`get_foo\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`writer\*(C'\fR
.Sp
The value of this attribute will be the name of the method to set the value of
the attribute.  If you like Java style methods, you might set this to
\&\f(CW\*(C`set_foo\*(C'\fR.
.IP "\(bu" 2
\&\f(CW\*(C`weak_ref\*(C'\fR
.Sp
\&\fBBoolean\fR.  Set this if you want the reference that the attribute contains to
be weakened; use this when circular references are possible, which will cause
leaks.
.IP "\(bu" 2
\&\f(CW\*(C`init_arg\*(C'\fR
.Sp
Takes the name of the key to look for at instantiation time of the object.  A
common use of this is to make an underscored attribute have a non-underscored
initialization name. \f(CW\*(C`undef\*(C'\fR means that passing the value in on instantiation
is ignored.
.IP "\(bu" 2
\&\f(CW\*(C`moosify\*(C'\fR
.Sp
Takes either a coderef or array of coderefs which is meant to transform the
given attributes specifications if necessary when upgrading to a Moose role or
class. You shouldn't need this by default, but is provided as a means of
possible extensibility.
.SS "before"
.IX Subsection "before"
.Vb 1
\& before foo => sub { ... };
.Ve
.PP
See \*(L"before method(s) => sub { ... }\*(R" in Class::Method::Modifiers for full
documentation.
.SS "around"
.IX Subsection "around"
.Vb 1
\& around foo => sub { ... };
.Ve
.PP
See \*(L"around method(s) => sub { ... }\*(R" in Class::Method::Modifiers for full
documentation.
.SS "after"
.IX Subsection "after"
.Vb 1
\& after foo => sub { ... };
.Ve
.PP
See \*(L"after method(s) => sub { ... }\*(R" in Class::Method::Modifiers for full
documentation.
.SH "SUB QUOTE AWARE"
.IX Header "SUB QUOTE AWARE"
\&\*(L"quote_sub\*(R" in Sub::Quote allows us to create coderefs that are \*(L"inlineable,\*(R"
giving us a handy, XS-free speed boost.  Any option that is Sub::Quote
aware can take advantage of this.
.PP
To do this, you can write
.PP
.Vb 1
\&  use Sub::Quote;
\&
\&  use Moo;
\&  use namespace::clean;
\&
\&  has foo => (
\&    is => \*(Aqro\*(Aq,
\&    isa => quote_sub(q{ die "Not <3" unless $_[0] < 3 })
\&  );
.Ve
.PP
which will be inlined as
.PP
.Vb 4
\&  do {
\&    local @_ = ($_[0]\->{foo});
\&    die "Not <3" unless $_[0] < 3;
\&  }
.Ve
.PP
or to avoid localizing \f(CW@_\fR,
.PP
.Vb 4
\&  has foo => (
\&    is => \*(Aqro\*(Aq,
\&    isa => quote_sub(q{ my ($val) = @_; die "Not <3" unless $val < 3 })
\&  );
.Ve
.PP
which will be inlined as
.PP
.Vb 4
\&  do {
\&    my ($val) = ($_[0]\->{foo});
\&    die "Not <3" unless $val < 3;
\&  }
.Ve
.PP
See Sub::Quote for more information, including how to pass lexical
captures that will also be compiled into the subroutine.
.SH "CLEANING UP IMPORTS"
.IX Header "CLEANING UP IMPORTS"
Moo will not clean up imported subroutines for you; you will have
to do that manually. The recommended way to do this is to declare your
imports first, then \f(CW\*(C`use Moo\*(C'\fR, then \f(CW\*(C`use namespace::clean\*(C'\fR.
Anything imported before namespace::clean will be scrubbed.
Anything imported or declared after will be still be available.
.PP
.Vb 1
\& package Record;
\&
\& use Digest::MD5 qw(md5_hex);
\&
\& use Moo;
\& use namespace::clean;
\&
\& has name => (is => \*(Aqro\*(Aq, required => 1);
\& has id => (is => \*(Aqlazy\*(Aq);
\& sub _build_id {
\&   my ($self) = @_;
\&   return md5_hex($self\->name);
\& }
\&
\& 1;
.Ve
.PP
If you were to import \f(CW\*(C`md5_hex\*(C'\fR after namespace::clean you would
be able to call \f(CW\*(C`\->md5_hex()\*(C'\fR on your \f(CW\*(C`Record\*(C'\fR instances (and it
probably wouldn't do what you expect!).
.PP
Moo::Roles behave slightly differently.  Since their methods are
composed into the consuming class, they can do a little more for you
automatically.  As long as you declare your imports before calling
\&\f(CW\*(C`use Moo::Role\*(C'\fR, those imports and the ones Moo::Role itself
provides will not be composed into consuming classes, so there's usually
no need to use namespace::clean.
.PP
\&\fBOn namespace::autoclean:\fR If you're coming to Moo from the Moose
world, you may be accustomed to using namespace::autoclean in all
your packages. This is not recommended for Moo packages, because
namespace::autoclean will inflate your class to a full Moose
class.  It'll work, but you will lose the benefits of Moo.  Instead
you are recommended to just use namespace::clean.
.SH "INCOMPATIBILITIES WITH MOOSE"
.IX Header "INCOMPATIBILITIES WITH MOOSE"
There is no built-in type system.  \f(CW\*(C`isa\*(C'\fR is verified with a coderef; if you
need complex types, just make a library of coderefs, or better yet, functions
that return quoted subs. MooX::Types::MooseLike provides a similar \s-1API\s0
to MooseX::Types::Moose so that you can write
.PP
.Vb 1
\&  has days_to_live => (is => \*(Aqro\*(Aq, isa => Int);
.Ve
.PP
and have it work with both; it is hoped that providing only subrefs as an
\&\s-1API\s0 will encourage the use of other type systems as well, since it's
probably the weakest part of Moose design-wise.
.PP
\&\f(CW\*(C`initializer\*(C'\fR is not supported in core since the author considers it to be a
bad idea and Moose best practices recommend avoiding it. Meanwhile \f(CW\*(C`trigger\*(C'\fR or
\&\f(CW\*(C`coerce\*(C'\fR are more likely to be able to fulfill your needs.
.PP
There is no meta object.  If you need this level of complexity you wanted
Moose \- Moo succeeds at being small because it explicitly does not
provide a metaprotocol. However, if you load Moose, then
.PP
.Vb 1
\&  Class::MOP::class_of($moo_class_or_role)
.Ve
.PP
will return an appropriate metaclass pre-populated by Moo.
.PP
No support for \f(CW\*(C`super\*(C'\fR, \f(CW\*(C`override\*(C'\fR, \f(CW\*(C`inner\*(C'\fR, or \f(CW\*(C`augment\*(C'\fR \- the author
considers augment to be a bad idea, and override can be translated:
.PP
.Vb 5
\&  override foo => sub {
\&    ...
\&    super();
\&    ...
\&  };
\&
\&  around foo => sub {
\&    my ($orig, $self) = (shift, shift);
\&    ...
\&    $self\->$orig(@_);
\&    ...
\&  };
.Ve
.PP
The \f(CW\*(C`dump\*(C'\fR method is not provided by default. The author suggests loading
Devel::Dwarn into \f(CW\*(C`main::\*(C'\fR (via \f(CW\*(C`perl \-MDevel::Dwarn ...\*(C'\fR for example) and
using \f(CW\*(C`$obj\->$::Dwarn()\*(C'\fR instead.
.PP
\&\*(L"default\*(R" only supports coderefs and plain scalars, because passing a hash
or array reference as a default is almost always incorrect since the value is
then shared between all objects using that default.
.PP
\&\f(CW\*(C`lazy_build\*(C'\fR is not supported; you are instead encouraged to use the
\&\f(CW\*(C`is => \*(Aqlazy\*(Aq\*(C'\fR option supported by Moo and MooseX::AttributeShortcuts.
.PP
\&\f(CW\*(C`auto_deref\*(C'\fR is not supported since the author considers it a bad idea and
it has been considered best practice to avoid it for some time.
.PP
\&\f(CW\*(C`documentation\*(C'\fR will show up in a Moose metaclass created from your class
but is otherwise ignored. Then again, Moose ignores it as well, so this
is arguably not an incompatibility.
.PP
Since \f(CW\*(C`coerce\*(C'\fR does not require \f(CW\*(C`isa\*(C'\fR to be defined but Moose does
require it, the metaclass inflation for coerce alone is a trifle insane
and if you attempt to subtype the result will almost certainly break.
.PP
\&\f(CW\*(C`BUILDARGS\*(C'\fR is not triggered if your class does not have any attributes.
Without attributes, \f(CW\*(C`BUILDARGS\*(C'\fR return value would be ignored, so we just
skip calling the method instead.
.PP
Handling of warnings: when you \f(CW\*(C`use Moo\*(C'\fR we enable \s-1FATAL\s0 warnings, and some
several extra pragmas when used in development: indirect,
multidimensional, and bareword::filehandles.  See the strictures
documentation for the details on this.
.PP
A similar invocation for Moose would be:
.PP
.Vb 2
\&  use Moose;
\&  use warnings FATAL => "all";
.Ve
.PP
Additionally, Moo supports a set of attribute option shortcuts intended to
reduce common boilerplate.  The set of shortcuts is the same as in the Moose
module MooseX::AttributeShortcuts as of its version 0.009+.  So if you:
.PP
.Vb 2
\&    package MyClass;
\&    use Moo;
.Ve
.PP
The nearest Moose invocation would be:
.PP
.Vb 1
\&    package MyClass;
\&
\&    use Moose;
\&    use warnings FATAL => "all";
\&    use MooseX::AttributeShortcuts;
.Ve
.PP
or, if you're inheriting from a non-Moose class,
.PP
.Vb 1
\&    package MyClass;
\&
\&    use Moose;
\&    use MooseX::NonMoose;
\&    use warnings FATAL => "all";
\&    use MooseX::AttributeShortcuts;
.Ve
.PP
Finally, Moose requires you to call
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->meta\->make_immutable;
.Ve
.PP
at the end of your class to get an inlined (i.e. not horribly slow)
constructor. Moo does it automatically the first time \->new is called
on your class. (\f(CW\*(C`make_immutable\*(C'\fR is a no-op in Moo to ease migration.)
.PP
An extension MooX::late exists to ease translating Moose packages
to Moo by providing a more Moose-like interface.
.SH "SUPPORT"
.IX Header "SUPPORT"
Users' \s-1IRC:\s0 #moose on irc.perl.org
.PP
Development and contribution \s-1IRC:\s0 #web\-simple on irc.perl.org
.PP
Bugtracker: <https://rt.cpan.org/Public/Dist/Display.html?Name=Moo>
.PP
Git repository: <git://github.com/moose/Moo.git>
.PP
Git browser: <https://github.com/moose/Moo>
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
dg \- David Leadbeater (cpan:DGL) <dgl@dgl.cx>
.PP
frew \- Arthur Axel \*(L"fREW\*(R" Schmidt (cpan:FREW) <frioux@gmail.com>
.PP
hobbs \- Andrew Rodland (cpan:ARODLAND) <arodland@cpan.org>
.PP
jnap \- John Napiorkowski (cpan:JJNAPIORK) <jjn1056@yahoo.com>
.PP
ribasushi \- Peter Rabbitson (cpan:RIBASUSHI) <ribasushi@cpan.org>
.PP
chip \- Chip Salzenberg (cpan:CHIPS) <chip@pobox.com>
.PP
ajgb \- Alex J. G. BurzyXski (cpan:AJGB) <ajgb@cpan.org>
.PP
doy \- Jesse Luehrs (cpan:DOY) <doy at tozt dot net>
.PP
perigrin \- Chris Prather (cpan:PERIGRIN) <chris@prather.org>
.PP
Mithaldu \- Christian Walde (cpan:MITHALDU) <walde.christian@googlemail.com>
.PP
ilmari \- Dagfinn Ilmari Mannsa\*oker (cpan:ILMARI) <ilmari@ilmari.org>
.PP
tobyink \- Toby Inkster (cpan:TOBYINK) <tobyink@cpan.org>
.PP
haarg \- Graham Knop (cpan:HAARG) <haarg@cpan.org>
.PP
mattp \- Matt Phillips (cpan:MATTP) <mattp@cpan.org>
.PP
bluefeet \- Aran Deltac (cpan:BLUEFEET) <bluefeet@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010\-2011 the Moo \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself. See <http://dev.perl.org/licenses/>.
