.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SPF::Mech::Exists 3"
.TH Mail::SPF::Mech::Exists 3 "2021-08-27" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SPF::Mech::Exists \- SPF record "exists" mechanism class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object of class \fBMail::SPF::Mech::Exists\fR represents an \s-1SPF\s0 record
mechanism of type \f(CW\*(C`exists\*(C'\fR.
.SS "Constructors"
.IX Subsection "Constructors"
The following constructors are provided:
.IP "\fBnew(%options)\fR: returns \fIMail::SPF::Mech::Exists\fR" 4
.IX Item "new(%options): returns Mail::SPF::Mech::Exists"
Creates a new \s-1SPF\s0 record \f(CW\*(C`exists\*(C'\fR mechanism object.
.Sp
\&\f(CW%options\fR is a list of key/value pairs representing any of the following
options:
.RS 4
.IP "\fBqualifier\fR" 4
.IX Item "qualifier"
.PD 0
.IP "\fBdomain_spec\fR" 4
.IX Item "domain_spec"
.PD
See \*(L"new\*(R" in Mail::SPF::Mech.
.RE
.RS 4
.RE
.ie n .IP "\fBnew_from_string($text, \fB%options\fB)\fR: returns \fIMail::SPF::Mech::Exists\fR; throws \fIMail::SPF::ENothingToParse\fR, \fIMail::SPF::EInvalidMech\fR" 4
.el .IP "\fBnew_from_string($text, \f(CB%options\fB)\fR: returns \fIMail::SPF::Mech::Exists\fR; throws \fIMail::SPF::ENothingToParse\fR, \fIMail::SPF::EInvalidMech\fR" 4
.IX Item "new_from_string($text, %options): returns Mail::SPF::Mech::Exists; throws Mail::SPF::ENothingToParse, Mail::SPF::EInvalidMech"
Creates a new \s-1SPF\s0 record \f(CW\*(C`exists\*(C'\fR mechanism object by parsing the string and
any options given.
.SS "Class methods"
.IX Subsection "Class methods"
The following class methods are provided:
.IP "\fBdefault_qualifier\fR" 4
.IX Item "default_qualifier"
.PD 0
.IP "\fBqualifier_pattern\fR" 4
.IX Item "qualifier_pattern"
.PD
See \*(L"Class methods\*(R" in Mail::SPF::Mech.
.IP "\fBname\fR: returns \fIstring\fR" 4
.IX Item "name: returns string"
Returns \fB'exists'\fR.
.IP "\fBname_pattern\fR: returns \fIRegexp\fR" 4
.IX Item "name_pattern: returns Regexp"
Returns a regular expression that matches a mechanism name of \fB'exists'\fR.
.SS "Instance methods"
.IX Subsection "Instance methods"
The following instance methods are provided:
.IP "\fBtext\fR" 4
.IX Item "text"
.PD 0
.IP "\fBqualifier\fR" 4
.IX Item "qualifier"
.IP "\fBparams\fR" 4
.IX Item "params"
.IP "\fBstringify\fR" 4
.IX Item "stringify"
.PD
See \*(L"Instance methods\*(R" in Mail::SPF::Mech.
.IP "\fBdomain_spec\fR: returns \fIMail::SPF::MacroString\fR" 4
.IX Item "domain_spec: returns Mail::SPF::MacroString"
Returns the \f(CW\*(C`domain\-spec\*(C'\fR parameter of the mechanism.
.ie n .IP "\fBmatch($server, \fB$request\fB)\fR: returns \fIboolean\fR" 4
.el .IP "\fBmatch($server, \f(CB$request\fB)\fR: returns \fIboolean\fR" 4
.IX Item "match($server, $request): returns boolean"
Checks whether a \s-1DNS \s0\f(CW\*(C`A\*(C'\fR record exists for the mechanism's target domain name,
and returns \fBtrue\fR if one does, or \fBfalse\fR otherwise.  See \s-1RFC 4408, 5.7,\s0 for
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::SPF, Mail::SPF::Record, Mail::SPF::Term, Mail::SPF::Mech
.PP
<http://tools.ietf.org/html/rfc4408>
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Mail::SPF.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>, Shevek <cpan@anarres.org>
