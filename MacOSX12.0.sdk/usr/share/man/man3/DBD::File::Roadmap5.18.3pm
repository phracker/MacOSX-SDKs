.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBD::File::Roadmap 3"
.TH DBD::File::Roadmap 3 "2013-04-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBD::File::Roadmap \- Planned Enhancements for DBD::File and pure Perl DBD's
.PP
Jens Rehsack \- May 2010
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document gives a high level overview of the future of the DBD::File \s-1DBI\s0
driver and groundwork for pure Perl \s-1DBI\s0 drivers.
.PP
The planned enhancements cover features, testing, performance, reliability,
extensibility and more.
.SH "CHANGES AND ENHANCEMENTS"
.IX Header "CHANGES AND ENHANCEMENTS"
.SS "Features"
.IX Subsection "Features"
There are some features missing we would like to add, but there is
no time plan:
.IP "\s-1LOCK TABLE\s0" 4
.IX Item "LOCK TABLE"
The newly implemented internal common table meta storage area would allow
us to implement \s-1LOCK TABLE\s0 support based on file system \f(CW\*(C`flock ()\*(C'\fR
support.
.IP "Transaction support" 4
.IX Item "Transaction support"
While DBD::AnyData recommends explicitly committing by importing and
exporting tables, DBD::File might be enhanced in a future version to allow
transparent transactions using the temporary tables of SQL::Statement as
shadow (dirty) tables.
.Sp
Transaction support will heavily rely on lock table support.
.IP "Data Dictionary Persistence" 4
.IX Item "Data Dictionary Persistence"
SQL::Statement provides dictionary information when a \*(L"\s-1CREATE TABLE ...\*(R"\s0
statement is executed. This dictionary is preserved for some statement
handle attribute fetches (as \f(CW\*(C`NULLABLE\*(C'\fR or \f(CW\*(C`PRECISION\*(C'\fR).
.Sp
It is planned to extend DBD::File to support data dictionaries to work
on the tables in it. It is not planned to support one table in different
dictionaries, but you can have several dictionaries in one directory.
.IP "\s-1SQL\s0 Engine selecting on connect" 4
.IX Item "SQL Engine selecting on connect"
Currently the \s-1SQL\s0 engine selected is chosen during the loading of the module
DBI::SQL::Nano. Ideally end users should be able to select the engine
used in \f(CW\*(C`DBI\->connect ()\*(C'\fR with a special DBD::File attribute.
.PP
Other points of view to the planned features (and more features for the
SQL::Statement engine) are shown in SQL::Statement::Roadmap.
.SS "Testing"
.IX Subsection "Testing"
DBD::File and the dependent \s-1DBD::DBM\s0 requires a lot more automated tests
covering \s-1API\s0 stability and compatibility with optional modules
like SQL::Statement.
.SS "Performance"
.IX Subsection "Performance"
Several arguments for support of features like indexes on columns
and cursors are made for \s-1DBD::CSV \s0(which is a DBD::File based driver,
too).  Similar arguments could be made for \s-1DBD::DBM,\s0 DBD::AnyData,
\&\s-1DBD::RAM\s0 or \s-1DBD::PO\s0 etc.
.PP
To improve the performance of the underlying \s-1SQL\s0 engines, a clean
re-implementation seems to be required. Currently both engines are
prematurely optimized and therefore it is not trivial to provide
further optimization without the risk of breaking existing features.
.PP
Join the \s-1DBI\s0 developers \s-1IRC\s0 channel at <irc://irc.perl.org/dbi> to
participate or post to the \s-1DBI\s0 Developers Mailing List.
.SS "Reliability"
.IX Subsection "Reliability"
DBD::File currently lacks the following points:
.IP "duplicate table names" 4
.IX Item "duplicate table names"
It is currently possible to access a table quoted with a relative path
(a) and additionally using an absolute path (b). If (a) and (b) are
the same file that is not recognized (except for
flock protection handled by the Operating System) and two independent
tables are handled.
.IP "invalid table names" 4
.IX Item "invalid table names"
The current implementation does not prevent someone choosing a
directory name as a physical file name for the table to open.
.SS "Extensibility"
.IX Subsection "Extensibility"
I (Jens Rehsack) have some (partially for example only) \s-1DBD\s0's in mind:
.IP "DBD::Sys" 4
.IX Item "DBD::Sys"
Derive DBD::Sys from a common code base shared with DBD::File which handles
all the emulation \s-1DBI\s0 needs (as getinfo, \s-1SQL\s0 engine handling, ...)
.IP "DBD::Dir" 4
.IX Item "DBD::Dir"
Provide a DBD::File derived to work with fixed table definitions through the
file system to demonstrate how \s-1DBI /\s0 Pure Perl DBDs could handle databases
with hierarchical structures.
.IP "DBD::Join" 4
.IX Item "DBD::Join"
Provide a \s-1DBI\s0 driver which is able to manage multiple connections to other
Databases (as DBD::Multiplex), but allow them to point to different data
sources and allow joins between the tables of them:
.Sp
.Vb 6
\&  # Example
\&  # Let table \*(Aqlsof\*(Aq being a table in DBD::Sys giving a list of open files using lsof utility
\&  # Let table \*(Aqdir\*(Aq being a atable from DBD::Dir
\&  $sth = $dbh\->prepare( "select * from dir,lsof where path=\*(Aq/documents\*(Aq and dir.entry = lsof.filename" )
\&  $sth\->execute(); # gives all open files in \*(Aq/documents\*(Aq
\&  ...
\&
\&  # Let table \*(Aqfilesys\*(Aq a DBD::Sys table of known file systems on current host
\&  # Let table \*(Aqapplications\*(Aq a table of your Configuration Management Database
\&  #  where current applications (relocatable, with mountpoints for filesystems)
\&  #  are stored
\&  $sth = dbh\->prepare( "select * from applications,filesys where " .
\&                       "application.mountpoint = filesys.mountpoint and ".
\&                       "filesys.mounted is true" );
\&  $sth\->execute(); # gives all currently mounted applications on this host
.Ve
.SH "PRIORITIES"
.IX Header "PRIORITIES"
Our priorities are focused on current issues. Initially many new test
cases for DBD::File and \s-1DBD::DBM\s0 should be added to the \s-1DBI\s0 test
suite. After that some additional documentation on how to use the
DBD::File \s-1API\s0 will be provided.
.PP
Any additional priorities will come later and can be modified by (paying)
users.
.SH "RESOURCES AND CONTRIBUTIONS"
.IX Header "RESOURCES AND CONTRIBUTIONS"
See <http://dbi.perl.org/contributing> for \fIhow you can help\fR.
.PP
If your company has benefited from \s-1DBI,\s0 please consider if
it could make a donation to The Perl Foundation \*(L"\s-1DBI\s0 Development\*(R"
fund at <http://dbi.perl.org/donate> to secure future development.
.PP
Alternatively, if your company would benefit from a specific new
\&\s-1DBI\s0 feature, please consider sponsoring it's development through
the options listed in the section \*(L"Commercial Support from the Author\*(R"
on <http://dbi.perl.org/support/>.
.PP
Using such targeted financing allows you to contribute to \s-1DBI\s0
development and rapidly get something specific and directly valuable
to you in return.
.PP
My company also offers annual support contracts for the \s-1DBI,\s0 which
provide another way to support the \s-1DBI\s0 and get something specific
in return. Contact me for details.
.PP
Thank you.
