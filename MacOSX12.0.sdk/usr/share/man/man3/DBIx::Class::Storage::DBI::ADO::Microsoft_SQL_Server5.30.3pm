.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::ADO::Microsoft_SQL_Server 3"
.TH DBIx::Class::Storage::DBI::ADO::Microsoft_SQL_Server 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Storage::DBI::ADO::Microsoft_SQL_Server \- Support for Microsoft
SQL Server via DBD::ADO
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This subclass supports \s-1MSSQL\s0 server connections via \s-1DBD::ADO\s0.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1MSSQL\s0 specific functionality is provided by
DBIx::Class::Storage::DBI::MSSQL.
.SH "EXAMPLE DSN"
.IX Header "EXAMPLE DSN"
.Vb 1
\&  dbi:ADO:provider=sqlncli10;server=EEEBOX\eSQLEXPRESS
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "identities"
.IX Subsection "identities"
\&\f(CW\*(C`_identity_method\*(C'\fR is set to \f(CW@@identity\fR, as \f(CW\*(C`SCOPE_IDENTITY()\*(C'\fR doesn't work
with \s-1DBD::ADO\s0. See \*(L"\s-1IMPLEMENTATION NOTES\*(R"\s0 in DBIx::Class::Storage::DBI::MSSQL
for caveats regarding this.
.SS "truncation bug"
.IX Subsection "truncation bug"
There is a bug with \s-1MSSQL ADO\s0 providers where data gets truncated based on the
size of the bind sizes in the first prepare call:
.PP
<https://rt.cpan.org/Ticket/Display.html?id=52048>
.PP
The \f(CW\*(C`ado_size\*(C'\fR workaround is used (see \*(L"\s-1ADO\s0 providers\*(R" in \s-1DBD::ADO\s0) with the
approximate maximum size of the data_type of the bound column, or 8000 (maximum
\&\s-1VARCHAR\s0 size) if the data_type is not available.
.PP
Please report problems with this driver and send patches.
.SS "LongReadLen"
.IX Subsection "LongReadLen"
\&\f(CW\*(C`LongReadLen\*(C'\fR is set to \f(CW\*(C`LongReadLen * 2 + 1\*(C'\fR on connection as it is necessary
for some \s-1LOB\s0 types. Be aware of this if you localize this value on the \f(CW$dbh\fR
directly.
.SS "binary data"
.IX Subsection "binary data"
Due perhaps to the ado_size workaround we use, and/or other reasons, binary data
such as \f(CW\*(C`varbinary\*(C'\fR column data comes back padded with trailing \f(CW\*(C`NULL\*(C'\fR chars.
The Cursor class for this driver
(DBIx::Class::Storage::DBI::ADO::Microsoft_SQL_Server::Cursor) removes them,
of course if your binary data is actually \f(CW\*(C`NULL\*(C'\fR padded that may be an issue to
keep in mind when using this driver.
.SS "uniqueidentifier columns"
.IX Subsection "uniqueidentifier columns"
uniqueidentifier columns come back from \s-1ADO\s0 wrapped in braces and must be
submitted to the \s-1MSSQL ADO\s0 driver wrapped in braces. We take care of this
transparently in this driver and the associated Cursor class
(DBIx::Class::Storage::DBI::ADO::Microsoft_SQL_Server::Cursor) so that you
don't have to use braces in most cases (except in literal \s-1SQL,\s0 in those cases
you will have to add the braces yourself.)
.SS "fractional seconds"
.IX Subsection "fractional seconds"
Fractional seconds with DBIx::Class::InflateColumn::DateTime are not
currently supported, datetimes are truncated at the second.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
