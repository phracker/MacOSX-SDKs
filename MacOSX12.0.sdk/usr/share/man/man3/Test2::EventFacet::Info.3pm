.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Info 3pm"
.TH Test2::EventFacet::Info 3pm "2019-10-21" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::EventFacet::Info \- Facet for information a developer might care about.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This facet represents messages intended for humans that will help them either
understand a result, or diagnose a failure.
.SH "NOTES"
.IX Header "NOTES"
This facet appears in a list instead of being a single item.
.SH "FIELDS"
.IX Header "FIELDS"
.ie n .IP "$string_or_structure = $info\->{details}" 4
.el .IP "\f(CW$string_or_structure\fR = \f(CW$info\fR\->{details}" 4
.IX Item "$string_or_structure = $info->{details}"
.PD 0
.ie n .IP "$string_or_structure = $info\->\fBdetails()\fR" 4
.el .IP "\f(CW$string_or_structure\fR = \f(CW$info\fR\->\fBdetails()\fR" 4
.IX Item "$string_or_structure = $info->details()"
.PD
Human readable string or data structure, this is the information to display.
Formatters are free to render the structures however they please. This may
contain a blessed object.
.Sp
If the \f(CW\*(C`table\*(C'\fR attribute (see below) is set then a renderer may choose to
display the table instead of the details.
.ie n .IP "$structure = $info\->{table}" 4
.el .IP "\f(CW$structure\fR = \f(CW$info\fR\->{table}" 4
.IX Item "$structure = $info->{table}"
.PD 0
.ie n .IP "$structure = $info\->\fBtable()\fR" 4
.el .IP "\f(CW$structure\fR = \f(CW$info\fR\->\fBtable()\fR" 4
.IX Item "$structure = $info->table()"
.PD
If the data the \f(CW\*(C`info\*(C'\fR facet needs to convey can be represented as a table
then the data may be placed in this attribute in a more raw form for better
display. The data must also be represented in the \f(CW\*(C`details\*(C'\fR attribute for
renderers which do not support rendering tables directly.
.Sp
The table structure:
.Sp
.Vb 2
\&    my %table = {
\&        header => [ \*(Aqcolumn 1 header\*(Aq, \*(Aqcolumn 2 header\*(Aq, ... ], # Optional
\&
\&        rows => [
\&            [\*(Aqrow 1 column 1\*(Aq, \*(Aqrow 1, column 2\*(Aq, ... ],
\&            [\*(Aqrow 2 column 1\*(Aq, \*(Aqrow 2, column 2\*(Aq, ... ],
\&            ...
\&        ],
\&
\&        # Allow the renderer to hide empty columns when true, Optional
\&        collapse => $BOOL,
\&
\&        # List by name or number columns that should never be collapsed
\&        no_collapse => \e@LIST,
\&    }
.Ve
.ie n .IP "$short_string = $info\->{tag}" 4
.el .IP "\f(CW$short_string\fR = \f(CW$info\fR\->{tag}" 4
.IX Item "$short_string = $info->{tag}"
.PD 0
.ie n .IP "$short_string = $info\->\fBtag()\fR" 4
.el .IP "\f(CW$short_string\fR = \f(CW$info\fR\->\fBtag()\fR" 4
.IX Item "$short_string = $info->tag()"
.PD
Short tag to categorize the info. This is usually 10 characters or less,
formatters may truncate longer tags.
.ie n .IP "$bool = $info\->{debug}" 4
.el .IP "\f(CW$bool\fR = \f(CW$info\fR\->{debug}" 4
.IX Item "$bool = $info->{debug}"
.PD 0
.ie n .IP "$bool = $info\->\fBdebug()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$info\fR\->\fBdebug()\fR" 4
.IX Item "$bool = $info->debug()"
.PD
Set this to true if the message is critical, or explains a failure. This is
info that should be displayed by formatters even in less-verbose modes.
.Sp
When false the information is not considered critical and may not be rendered
in less-verbose modes.
.ie n .IP "$bool = $info\->{important}" 4
.el .IP "\f(CW$bool\fR = \f(CW$info\fR\->{important}" 4
.IX Item "$bool = $info->{important}"
.PD 0
.ie n .IP "$bool = $info\->important" 4
.el .IP "\f(CW$bool\fR = \f(CW$info\fR\->important" 4
.IX Item "$bool = $info->important"
.PD
This should be set for non debug messages that are still important enough to
show when a formatter is in quiet mode. A formatter should send these to \s-1STDOUT\s0
not \s-1STDERR,\s0 but should show them even in non-verbose mode.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
