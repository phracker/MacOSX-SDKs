.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::IpSubnet 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::IpSubnet 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
APR::IpSubnet \- Perl API for accessing APRs ip_subnet structures
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  use APR::IpSubnet ();
\&  
\&  my $ipsub = APR::IpSubnet\->new($pool, "127.0.0.1");
\&  $ok = $ipsub\->test($sock_addr);
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`APR::IpSubnet\*(C'\fR object represents a range of \s-1IP\s0 addresses
(IPv4/IPv6). A socket connection can be matched against this range to
test whether the \s-1IP\s0 it's coming from is inside or outside of this
range.
.SH "API"
.IX Header "API"
\&\f(CW\*(C`APR::IpSubnet\*(C'\fR provides the following functions and/or methods:
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
Create an \s-1IP\s0 subnet represenation object
.PP
.Vb 2
\&  $ipsubnet = APR::IpSubnet\->new($pool, $ip);
\&  $ipsubnet = APR::IpSubnet\->new($pool, $ip, $mask_or_numbits);
.Ve
.ie n .IP "obj: ""APR::IpSubnet"" (class name)" 4
.el .IP "obj: \f(CWAPR::IpSubnet\fR (class name)" 4
.IX Item "obj: APR::IpSubnet (class name)"
.PD 0
.ie n .IP "arg1: $pool ( ""APR::Pool object"" )" 4
.el .IP "arg1: \f(CW$pool\fR ( \f(CWAPR::Pool object\fR )" 4
.IX Item "arg1: $pool ( APR::Pool object )"
.ie n .IP "arg2: $ip ( string )" 4
.el .IP "arg2: \f(CW$ip\fR ( string )" 4
.IX Item "arg2: $ip ( string )"
.PD
\&\s-1IP\s0 address in one of the two formats: IPv4 (e.g. \fI\*(L"127.0.0.1\*(R"\fR) or
IPv6 (e.g. \fI\*(L"::1\*(R"\fR). IPv6 addresses are accepted only if \s-1APR\s0 has the
IPv6 support enabled.
.ie n .IP "opt arg3: $mask_or_numbits ( string )" 4
.el .IP "opt arg3: \f(CW$mask_or_numbits\fR ( string )" 4
.IX Item "opt arg3: $mask_or_numbits ( string )"
An optional \s-1IP\s0 mask (e.g. \fI\*(L"255.0.0.0\*(R"\fR) or number of bits
(e.g. \fI\*(L"15\*(R"\fR).
.Sp
If none provided, the default is not to mask off.
.ie n .IP "ret: $ret ( ""APR::IpSubnet object"" )" 4
.el .IP "ret: \f(CW$ret\fR ( \f(CWAPR::IpSubnet object\fR )" 4
.IX Item "ret: $ret ( APR::IpSubnet object )"
The IP-subnet object
.ie n .IP "excpt: ""APR::Error""" 4
.el .IP "excpt: \f(CWAPR::Error\fR" 4
.IX Item "excpt: APR::Error"
.PD 0
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.PD
.ie n .SS """test"""
.el .SS "\f(CWtest\fP"
.IX Subsection "test"
Test the \s-1IP\s0 address in the socket address object against a pre-built
ip-subnet representation.
.PP
.Vb 1
\&  $ret = $ipsub\->test($sockaddr);
.Ve
.ie n .IP "obj: $ipsub ( ""APR::IpSubnet object"" )" 4
.el .IP "obj: \f(CW$ipsub\fR ( \f(CWAPR::IpSubnet object\fR )" 4
.IX Item "obj: $ipsub ( APR::IpSubnet object )"
The ip-subnet representation
.ie n .IP "arg1: $sockaddr ( ""APR::SockAddr object"" )" 4
.el .IP "arg1: \f(CW$sockaddr\fR ( \f(CWAPR::SockAddr object\fR )" 4
.IX Item "arg1: $sockaddr ( APR::SockAddr object )"
The socket address to test
.ie n .IP "ret: $ret ( boolean )" 4
.el .IP "ret: \f(CW$ret\fR ( boolean )" 4
.IX Item "ret: $ret ( boolean )"
true if the socket address is within the subnet, false otherwise
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.PP
This method is used for testing whether or not an address is within a
subnet. It's used by module \f(CW\*(C`mod_access\*(C'\fR to check whether the client
\&\s-1IP\s0 fits into the \s-1IP\s0 range, supplied by \f(CW\*(C`Allow\*(C'\fR/\f(CW\*(C`Deny\*(C'\fR directives.
.PP
Example:
.PP
Allow accesses only from the localhost (IPv4):
.PP
.Vb 5
\&  use APR::IpSubnet ();
\&  use Apache2::Connection ();
\&  use Apache2::RequestRec ();
\&  my $ipsub = APR::IpSubnet\->new($r\->pool, "127.0.0.1");
\&  ok $ipsub\->test($r\->connection\->remote_addr);
.Ve
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous
contributors.
