.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Exception 3"
.TH PPI::Exception 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Exception \- The PPI exception base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use PPI::Exception;
\&  
\&  my $e = PPI::Exception\->new( \*(Aqsomething happened\*(Aq );
\&  $e\->throw;
\&
\&  PPI::Exception\->new( message => \*(Aqsomething happened\*(Aq )\->throw;
\&  PPI::Exception\->throw( message => \*(Aqsomething happened\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All exceptions thrown from within \s-1PPI\s0 will be instances or derivations
of this class.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new $message | message => $message, ..."
.el .SS "new \f(CW$message\fP | message => \f(CW$message\fP, ..."
.IX Subsection "new $message | message => $message, ..."
Constructs and returns a new \f(CW\*(C`PPI::Exception\*(C'\fR object.
.PP
A message for the exception can be passed, either as a string
or as \f(CW\*(C`message => $message\*(C'\fR. The message is available via the
\&\f(CW\*(C`message\*(C'\fR method.
.SS "throw"
.IX Subsection "throw"
If called on a \f(CW\*(C`PPI::Exception\*(C'\fR object, throws the object.
If called on the class name, uses the arguments to construct a
\&\f(CW\*(C`PPI::Exception\*(C'\fR and then throw it.
.PP
Each time the object is thrown, information from the Perl <\fBcaller\fR\|(0)>
call is saved and made available via the \f(CW\*(C`callers\*(C'\fR method.
.PP
This method never returns.
.SS "message"
.IX Subsection "message"
Returns the exception message passed to the object's constructor,
or a default message.
.SS "callers"
.IX Subsection "callers"
Returns a listref, each element of which is a listref of \f(CWcaller(0)\fR
information.  The returned listref can be empty.
