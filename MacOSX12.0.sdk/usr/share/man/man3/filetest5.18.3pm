.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "filetest 3pm"
.TH filetest 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
filetest \- Perl pragma to control the filetest permission operators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    $can_perhaps_read = \-r "file";      # use the mode bits
\&    {
\&        use filetest \*(Aqaccess\*(Aq;          # intuit harder
\&        $can_really_read = \-r "file";
\&    }
\&    $can_perhaps_read = \-r "file";      # use the mode bits again
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This pragma tells the compiler to change the behaviour of the filetest
permission operators, \f(CW\*(C`\-r\*(C'\fR \f(CW\*(C`\-w\*(C'\fR \f(CW\*(C`\-x\*(C'\fR \f(CW\*(C`\-R\*(C'\fR \f(CW\*(C`\-W\*(C'\fR \f(CW\*(C`\-X\*(C'\fR
(see perlfunc).
.PP
The default behaviour of file test operators is to use the simple
mode bits as returned by the \fIstat()\fR family of system calls.  However,
many operating systems have additional features to define more complex
access rights, for example ACLs (Access Control Lists).
For such environments, \f(CW\*(C`use filetest\*(C'\fR may help the permission
operators to return results more consistent with other tools.
.PP
The \f(CW\*(C`use filetest\*(C'\fR or \f(CW\*(C`no filetest\*(C'\fR statements affect file tests defined in
their block, up to the end of the closest enclosing block (they are lexically
block-scoped).
.PP
Currently, only the \f(CW\*(C`access\*(C'\fR sub-pragma is implemented.  It enables (or
disables) the use of \fIaccess()\fR when available, that is, on most \s-1UNIX\s0 systems and
other \s-1POSIX\s0 environments.  See details below.
.SS "Consider this carefully"
.IX Subsection "Consider this carefully"
The \fIstat()\fR mode bits are probably right for most of the files and
directories found on your system, because few people want to use the
additional features offered by \fIaccess()\fR. But you may encounter surprises
if your program runs on a system that uses ACLs, since the \fIstat()\fR
information won't reflect the actual permissions.
.PP
There may be a slight performance decrease in the filetest operations
when the filetest pragma is in effect, because checking bits is very
cheap.
.PP
Also, note that using the file tests for security purposes is a lost cause
from the start: there is a window open for race conditions (who is to
say that the permissions will not change between the test and the real
operation?).  Therefore if you are serious about security, just try
the real operation and test for its success \- think in terms of atomic
operations.  Filetests are more useful for filesystem administrative
tasks, when you have no need for the content of the elements on disk.
.ie n .SS "The ""access"" sub-pragma"
.el .SS "The ``access'' sub-pragma"
.IX Subsection "The access sub-pragma"
\&\s-1UNIX\s0 and \s-1POSIX\s0 systems provide an abstract \fIaccess()\fR operating system call,
which should be used to query the read, write, and execute rights. This
function hides various distinct approaches in additional operating system
specific security features, like Access Control Lists (ACLs)
.PP
The extended filetest functionality is used by Perl only when the argument
of the operators is a filename, not when it is a filehandle.
.ie n .SS "Limitation with regard to ""_"""
.el .SS "Limitation with regard to \f(CW_\fP"
.IX Subsection "Limitation with regard to _"
Because \fIaccess()\fR does not invoke \fIstat()\fR (at least not in a way visible
to Perl), \fBthe stat result cache \*(L"_\*(R" is not set\fR.  This means that the
outcome of the following two tests is different.  The first has the stat
bits of \fI/etc/passwd\fR in \f(CW\*(C`_\*(C'\fR, and in the second case this still
contains the bits of \f(CW\*(C`/etc\*(C'\fR.
.PP
.Vb 4
\& { \-d \*(Aq/etc\*(Aq;
\&   \-w \*(Aq/etc/passwd\*(Aq;
\&   print \-f _ ? \*(AqYes\*(Aq : \*(AqNo\*(Aq;   # Yes
\& }
\&
\& { use filetest \*(Aqaccess\*(Aq;
\&   \-d \*(Aq/etc\*(Aq;
\&   \-w \*(Aq/etc/passwd\*(Aq;
\&   print \-f _ ? \*(AqYes\*(Aq : \*(AqNo\*(Aq;   # No
\& }
.Ve
.PP
Of course, unless your \s-1OS\s0 does not implement \fIaccess()\fR, in which case the
pragma is simply ignored.  Best not to use \f(CW\*(C`_\*(C'\fR at all in a file where
the filetest pragma is active!
.PP
As a side effect, as \f(CW\*(C`_\*(C'\fR doesn't work, stacked filetest operators
(\f(CW\*(C`\-f \-w $file\*(C'\fR) won't work either.
.PP
This limitation might be removed in a future version of perl.
