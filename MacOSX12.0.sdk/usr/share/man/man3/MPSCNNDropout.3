.TH "MPSCNNDropout" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNDropout
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNDropout\&.h>\fP
.PP
Inherits \fBMPSCNNKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:keepProbability:seed:maskStrideInPixels:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNDropoutGradientState\fP *__nullable) \- \fBtemporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNDropoutGradientStateBatch\fP *__nullable) \- \fBtemporaryResultStateBatchForCommandBuffer:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "float \fBkeepProbability\fP"
.br
.ti -1c
.RI "NSUInteger \fBseed\fP"
.br
.ti -1c
.RI "MTLSize \fBmaskStrideInPixels\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  Dropout is a regularization technique used to prevent neural networks from overfitting during training\&. With probability keepProbability, this filter outputs the input element scaled by 1 / keepProbability\&. Otherwise, it outputs 0\&. Each input element is kept or dropped independently\&. The scaling is performed to keep the energy of the output unchanged\&. 
.SH "Method Documentation"
.PP 
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
<NSSecureCoding> support 
.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(float) keepProbability(NSUInteger) seed(MTLSize) maskStrideInPixels"
Standard init with default properties per filter type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. 
.br
\fIkeepProbability\fP The probability that each element in the input is kept\&. The valid range is (0\&.0f, 1\&.0f)\&. 
.br
\fIseed\fP The seed used to generate random numbers\&. 
.br
\fImaskStrideInPixels\fP The mask stride in the x, y, and z dimensions, which allows for the broadcasting of mask data\&. The only valid values are 0 and 1 for each dimension\&. For no broadcasting, set the values for each dimension to 1\&. For broadcasting, set desired values to 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSCNNDropout\fP object or nil, if failure\&. 
.RE
.PP

.SS "\- (\fBMPSCNNDropoutGradientStateBatch\fP * __nullable) temporaryResultStateBatchForCommandBuffer: (__nonnull id< MTLCommandBuffer >) commandBuffer"

.SS "\- (\fBMPSCNNDropoutGradientState\fP * __nullable) temporaryResultStateForCommandBuffer: (__nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(NSArray< \fBMPSState\fP * > *__nullable) sourceStates(\fBMPSImage\fP *__nonnull) dest"

.SH "Property Documentation"
.PP 
.SS "\- keepProbability\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The probability that each element in the input is kept\&. The valid range is (0\&.0f, 1\&.0f)\&. 
.SS "\- maskStrideInPixels\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The mask stride in the x, y, and x dimensions, which allows for the broadcasting the mask data\&.  The only valid values are 0 and 1 for each dimension\&. For no broadcasting, set the values for each dimension to 1\&. For broadcasting, set desired values to 0\&. 
.SS "\- seed\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The seed used to generate random numbers\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
