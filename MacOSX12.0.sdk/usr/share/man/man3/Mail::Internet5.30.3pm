.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Internet 3"
.TH Mail::Internet 3 "2019-05-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Internet \- manipulate email messages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mail::Internet;
\&  my $msg = Mail::Internet\->new(\e*STDIN);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package implements reading, creating, manipulating, and writing email
messages.  Sometimes, the implementation tries to be too smart, but in
the general case it works as expected.
.PP
If you start writing a \fBnew application\fR, you should use the Mail::Box
distribution, which has more features and handles messages much better
according to the RFCs.  See <http://perl.overmeer.net/mailbox/>.
You may also chose MIME::Entity, to get at least some multipart
support in your application.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "$obj\->\fBdup\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdup\fR()" 4
.IX Item "$obj->dup()"
Duplicate the message as a whole.  Both header and body will be
deep-copied: a new Mail::Internet object is returned.
.ie n .IP "$obj\->\fBextract\fR(\e@lines)" 4
.el .IP "\f(CW$obj\fR\->\fBextract\fR(\e@lines)" 4
.IX Item "$obj->extract(@lines)"
Extract header and body from an \s-1ARRAY\s0 of message lines.  Requires an
object already created with \fBnew()\fR, which contents will get overwritten.
.ie n .IP "$obj\->\fBnew\fR( [$arg], [%options] )" 4
.el .IP "\f(CW$obj\fR\->\fBnew\fR( [$arg], [%options] )" 4
.IX Item "$obj->new( [$arg], [%options] )"
.PD 0
.IP "Mail::Internet\->\fBnew\fR( [$arg], [%options] )" 4
.IX Item "Mail::Internet->new( [$arg], [%options] )"
.PD
\&\f(CW$arg\fR is optional and may be either a file descriptor (reference to a \s-1GLOB\s0)
or a reference to an array. If given the new object will be
initialized with headers and body either from the array of read from 
the file descriptor.
.Sp
The \fBMail::Header::new()\fR \f(CW%options\fR \f(CW\*(C`Modify\*(C'\fR, \f(CW\*(C`MailFrom\*(C'\fR and \f(CW\*(C`FoldLength\*(C'\fR
may also be given.
.Sp
.Vb 3
\& \-Option\-\-Default
\&  Body    []
\&  Header  undef
.Ve
.RS 4
.IP "Body => ARRAY-of-LINES" 2
.IX Item "Body => ARRAY-of-LINES"
The value of this option should be a reference to an array which contains
the lines for the body of the message. Each line should be terminated with
\&\f(CW\*(C`\en\*(C'\fR (\s-1LF\s0). If Body is given then \f(CW\*(C`Mail::Internet\*(C'\fR will not attempt to
read the body from \f(CW$arg\fR (even if it is specified).
.IP "Header => Mail::Header" 2
.IX Item "Header => Mail::Header"
The value of this option should be a Mail::Header object. If given then
\&\f(CW\*(C`Mail::Internet\*(C'\fR will not attempt to read a mail header from \f(CW$arg\fR, if
it was specified.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBread\fR($fh)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR($fh)" 4
.IX Item "$obj->read($fh)"
Read a message from the \f(CW$fh\fR into an already existing message
object.  Better use \fBnew()\fR with the \f(CW$fh\fR as first argument.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBbody\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR( [$body] )" 4
.IX Item "$obj->body( [$body] )"
Returns the body of the message. This is a reference to an array.
Each entry in the array represents a single line in the message.
.Sp
If \fI\f(CI$body\fI\fR is given, it can be a reference to an array or an array, then
the body will be replaced. If a reference is passed, it is used directly
and not copied, so any subsequent changes to the array will change the
contents of the body.
.ie n .IP "$obj\->\fBhead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR()" 4
.IX Item "$obj->head()"
Returns the \f(CW\*(C`Mail::Header\*(C'\fR object which holds the headers for the current
message
.SS "Processing the message as a whole"
.IX Subsection "Processing the message as a whole"
.ie n .IP "$obj\->\fBas_mbox_string\fR( [$already_escaped] )" 4
.el .IP "\f(CW$obj\fR\->\fBas_mbox_string\fR( [$already_escaped] )" 4
.IX Item "$obj->as_mbox_string( [$already_escaped] )"
Returns the message as a string in mbox format.  \f(CW$already_escaped\fR, if
given and true, indicates that \fBescape_from()\fR has already been called on
this object.
.ie n .IP "$obj\->\fBas_string\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBas_string\fR()" 4
.IX Item "$obj->as_string()"
Returns the message as a single string.
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Print the header, body or whole message to file descriptor \fI\f(CI$fh\fI\fR.
\&\fI\f(CI$fd\fI\fR should be a reference to a \s-1GLOB.\s0 If \fI\f(CI$fh\fI\fR is not given the
output will be sent to \s-1STDOUT.\s0
.Sp
example:
.Sp
.Vb 1
\&    $mail\->print( \e*STDOUT );  # Print message to STDOUT
.Ve
.ie n .IP "$obj\->\fBprint_body\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint_body\fR( [$fh] )" 4
.IX Item "$obj->print_body( [$fh] )"
Print only the body to the \f(CW$fh\fR (default \s-1STDOUT\s0).
.ie n .IP "$obj\->\fBprint_header\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint_header\fR( [$fh] )" 4
.IX Item "$obj->print_header( [$fh] )"
Print only the header to the \f(CW$fh\fR (default \s-1STDOUT\s0).
.SS "Processing the header"
.IX Subsection "Processing the header"
Most of these methods are simply wrappers around methods provided
by Mail::Header.
.ie n .IP "$obj\->\fBadd\fR(\s-1PAIRS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1PAIRS\s0)" 4
.IX Item "$obj->add(PAIRS)"
The \s-1PAIRS\s0 are field-name and field-content.  For each \s-1PAIR,\s0
\&\fBMail::Header::add()\fR is called.  All fields are added after
existing fields.  The last addition is returned.
.ie n .IP "$obj\->\fBcombine\fR( $tag, [$with] )" 4
.el .IP "\f(CW$obj\fR\->\fBcombine\fR( \f(CW$tag\fR, [$with] )" 4
.IX Item "$obj->combine( $tag, [$with] )"
See \fBMail::Header::combine()\fR.
.ie n .IP "$obj\->\fBdelete\fR( $tag, [$tags] )" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR( \f(CW$tag\fR, [$tags] )" 4
.IX Item "$obj->delete( $tag, [$tags] )"
Delete all fields with the name \f(CW$tag\fR.  \fBMail::Header::delete()\fR is doing the
work.
.ie n .IP "$obj\->\fBfold\fR( [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR( [$length] )" 4
.IX Item "$obj->fold( [$length] )"
See \fBMail::Header::fold()\fR.
.ie n .IP "$obj\->\fBfold_length\fR( [$tag], [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold_length\fR( [$tag], [$length] )" 4
.IX Item "$obj->fold_length( [$tag], [$length] )"
See \fBMail::Header::fold_length()\fR.
.ie n .IP "$obj\->\fBget\fR( $tag, [$tags] )" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR( \f(CW$tag\fR, [$tags] )" 4
.IX Item "$obj->get( $tag, [$tags] )"
In \s-1LIST\s0 context, all fields with the name \f(CW$tag\fR are returned.  In \s-1SCALAR\s0
context, only the first field which matches the earliest \f(CW$tag\fR is returned.
\&\fBMail::Header::get()\fR is called to collect the data.
.ie n .IP "$obj\->\fBheader\fR(\e@lines)" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR(\e@lines)" 4
.IX Item "$obj->header(@lines)"
See \fBMail::Header::header()\fR.
.ie n .IP "$obj\->\fBreplace\fR(\s-1PAIRS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreplace\fR(\s-1PAIRS\s0)" 4
.IX Item "$obj->replace(PAIRS)"
The \s-1PAIRS\s0 are field-name and field-content.  For each \s-1PAIR,\s0
\&\fBMail::Header::replace()\fR is called with index 0. If a \f(CW$field\fR is already
in the header, it will be removed first.  Do not specified the same
field-name twice.
.SS "Processing the body"
.IX Subsection "Processing the body"
.ie n .IP "$obj\->\fBremove_sig\fR( [$nlines] )" 4
.el .IP "\f(CW$obj\fR\->\fBremove_sig\fR( [$nlines] )" 4
.IX Item "$obj->remove_sig( [$nlines] )"
Attempts to remove a user's signature from the body of a message. It does this 
by looking for a line equal to \f(CW\*(Aq\-\- \*(Aq\fR within the last \f(CW$nlines\fR of the
message. If found then that line and all lines after it will be removed. If
\&\f(CW$nlines\fR is not given a default value of 10 will be used. This would be of
most use in auto-reply scripts.
.ie n .IP "$obj\->\fBsign\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBsign\fR(%options)" 4
.IX Item "$obj->sign(%options)"
Add your signature to the body.  \fBremove_sig()\fR will strip existing
signatures first.
.Sp
.Vb 3
\& \-Option   \-\-Default
\&  File       undef
\&  Signature  []
.Ve
.RS 4
.IP "File => \s-1FILEHANDLE\s0" 2
.IX Item "File => FILEHANDLE"
Take from the \s-1FILEHANDLE\s0 all lines starting from the first \f(CW\*(C`\-\-\*(C'\fR.
.IP "Signature => STRING|ARRAY\-of\-LINES" 2
.IX Item "Signature => STRING|ARRAY-of-LINES"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBtidy_body\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtidy_body\fR()" 4
.IX Item "$obj->tidy_body()"
.PD
Removes all leading and trailing lines from the body that only contain
white spaces.
.SS "High-level functionality"
.IX Subsection "High-level functionality"
.ie n .IP "$obj\->\fBescape_from\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBescape_from\fR()" 4
.IX Item "$obj->escape_from()"
It can cause problems with some applications if a message contains a line
starting with \f(CW\`From \*(Aq\fR, in particular when attempting to split a folder.
This method inserts a leading \f(CW\*(C`\`\*(C'\fR'> on any line that matches the regular
expression \f(CW\*(C`/^\*(C'\fR*From/>
.ie n .IP "$obj\->\fBnntppost\fR( [%options] )" 4
.el .IP "\f(CW$obj\fR\->\fBnntppost\fR( [%options] )" 4
.IX Item "$obj->nntppost( [%options] )"
Post an article via \s-1NNTP.\s0  Requires Net::NNTP to be installed.
.Sp
.Vb 4
\& \-Option\-\-Default
\&  Debug   <false>
\&  Host    <required>
\&  Port    119
.Ve
.RS 4
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
Debug value to pass to Net::NNTP, see Net::NNTP
.IP "Host => HOSTNAME|Net::NNTP object" 2
.IX Item "Host => HOSTNAME|Net::NNTP object"
Name of \s-1NNTP\s0 server to connect to, or a Net::NNTP object to use.
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
Port number to connect to on remote host
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBreply\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(%options)" 4
.IX Item "$obj->reply(%options)"
Create a new object with header initialised for a reply to the current 
object. And the body will be a copy of the current message indented.
.Sp
The \f(CW\*(C`.mailhdr\*(C'\fR file in your home directory (if exists) will be read
first, to provide defaults.
.Sp
.Vb 5
\& \-Option  \-\-Default
\&  Exclude   []
\&  Indent    \*(Aq>\*(Aq
\&  Keep      []
\&  ReplyAll  false
.Ve
.RS 4
.IP "Exclude => ARRAY-of-FIELDS" 2
.IX Item "Exclude => ARRAY-of-FIELDS"
Remove the listed \s-1FIELDS\s0 from the produced message.
.IP "Indent => \s-1STRING\s0" 2
.IX Item "Indent => STRING"
Use as indentation string.  The string may contain \f(CW\*(C`%%\*(C'\fR to get a single \f(CW\*(C`%\*(C'\fR,
\&\f(CW%f\fR to get the first from name, \f(CW%F\fR is the first character of \f(CW%f\fR,
\&\f(CW%l\fR is the last name, \f(CW%L\fR its first character, \f(CW%n\fR the whole from
string, and \f(CW%I\fR the first character of each of the names in the from string.
.IP "Keep => ARRAY-of-FIELDS" 2
.IX Item "Keep => ARRAY-of-FIELDS"
Copy the listed \s-1FIELDS\s0 from the original message.
.IP "ReplyAll => \s-1BOOLEAN\s0" 2
.IX Item "ReplyAll => BOOLEAN"
Automatically include all To and Cc addresses of the original mail,
excluding those mentioned in the Bcc list.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBsend\fR( [$type, [$args...]] )" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR( [$type, [$args...]] )" 4
.IX Item "$obj->send( [$type, [$args...]] )"
Send a Mail::Internet message using Mail::Mailer.  \f(CW$type\fR and \f(CW$args\fR are
passed on to \fBMail::Mailer::new()\fR.
.ie n .IP "$obj\->\fBsmtpsend\fR( [%options] )" 4
.el .IP "\f(CW$obj\fR\->\fBsmtpsend\fR( [%options] )" 4
.IX Item "$obj->smtpsend( [%options] )"
Send a Mail::Internet message using direct \s-1SMTP\s0 to the given
\&\s-1ADDRESSES,\s0 each can be either a string or a reference to a list of email
addresses. If none of \f(CW\*(C`To\*(C'\fR, <Cc> or \f(CW\*(C`Bcc\*(C'\fR are given then the addresses
are extracted from the message being sent.
.Sp
The return value will be a list of email addresses that the message was sent
to. If the message was not sent the list will be empty.
.Sp
Requires Net::SMTP and Net::Domain to be installed.
.Sp
.Vb 9
\& \-Option  \-\-Default
\&  Bcc       undef
\&  Cc        undef
\&  Debug     <false>
\&  Hello     localhost.localdomain
\&  Host      $ENV{SMTPHOSTS}
\&  MailFrom  Mail::Util::mailaddress()
\&  Port      25
\&  To        undef
.Ve
.RS 4
.IP "Bcc => \s-1ADDRESSES\s0" 2
.IX Item "Bcc => ADDRESSES"
.PD 0
.IP "Cc => \s-1ADDRESSES\s0" 2
.IX Item "Cc => ADDRESSES"
.IP "Debug => \s-1BOOLEAN\s0" 2
.IX Item "Debug => BOOLEAN"
.PD
Debug value to pass to Net::SMTP, see <Net::SMTP>
.IP "Hello => \s-1STRING\s0" 2
.IX Item "Hello => STRING"
Send a \s-1HELO\s0 (or \s-1EHLO\s0) command to the server with the given name.
.IP "Host => \s-1HOSTNAME\s0" 2
.IX Item "Host => HOSTNAME"
Name of the \s-1SMTP\s0 server to connect to, or a Net::SMTP object to use
.Sp
If \f(CW\*(C`Host\*(C'\fR is not given then the \s-1SMTP\s0 host is found by attempting
connections first to hosts specified in \f(CW$ENV{SMTPHOSTS}\fR, a colon
separated list, then \f(CW\*(C`mailhost\*(C'\fR and \f(CW\*(C`localhost\*(C'\fR.
.IP "MailFrom => \s-1ADDRESS\s0" 2
.IX Item "MailFrom => ADDRESS"
The e\-mail address which is used as sender.  By default,
\&\fBMail::Util::mailaddress()\fR provides the address of the sender.
.IP "Port => \s-1INTEGER\s0" 2
.IX Item "Port => INTEGER"
Port number to connect to on remote host
.IP "To => \s-1ADDRESSES\s0" 2
.IX Item "To => ADDRESSES"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBunescape_from\fR(())" 4
.el .IP "\f(CW$obj\fR\->\fBunescape_from\fR(())" 4
.IX Item "$obj->unescape_from(())"
.PD
Remove the escaping added by \fBescape_from()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2017 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
