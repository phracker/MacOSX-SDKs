.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::FAQ 3"
.TH Net::DNS::FAQ 3 "2014-01-16" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::FAQ \- Frequently Asked Net::DNS Questions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& perldoc Net::DNS::FAQ
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions on both the
Net::DNS Mailing List and those sent to the author.
.PP
The latest version of this \s-1FAQ\s0 can be found at 
	http://www.net\-dns.org/docs/FAQ.html
.SH "GENERAL"
.IX Header "GENERAL"
.SS "What is Net::DNS?"
.IX Subsection "What is Net::DNS?"
Net::DNS is a perl implementation of a \s-1DNS\s0 resolver.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Where can I find Test::More?"
.IX Subsection "Where can I find Test::More?"
Test::More is part of the Test-Simple package, by Michael G Schwern.
You should be able to find the distrubution here:
.PP
.Vb 1
\&        http://search.cpan.org/dist/Test\-Simple/
.Ve
.SH "USAGE"
.IX Header "USAGE"
.SS "Why does \fBNet::DNS::Resolver::query()\fP return undef when the \s-1ANSWER\s0 section is empty?"
.IX Subsection "Why does Net::DNS::Resolver::query() return undef when the ANSWER section is empty?"
The short answer is, don't use \fBquery()\fR.  \fBNet::DNS::Resolver::send()\fR 
will always return the answer packet, as long as an answer was received.
.PP
The longer answer is that \fBquery()\fR is modeled after the \fBres_query()\fR function
from the libresolv C library, which has similar behaviors.
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\& $Id: FAQ.pod 872 2011\-01\-10 15:45:59Z willem $
.Ve
