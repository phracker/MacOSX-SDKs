.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::Tiny 3pm"
.TH Module::Build::Tiny 3pm "2014-10-12" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::Tiny \- A tiny replacement for Module::Build
.SH "VERSION"
.IX Header "VERSION"
version 0.039
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Module::Build::Tiny;
\& Build_PL();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Many Perl distributions use a Build.PL file instead of a Makefile.PL file
to drive distribution configuration, build, test and installation.
Traditionally, Build.PL uses Module::Build as the underlying build system.
This module provides a simple, lightweight, drop-in replacement.
.PP
Whereas Module::Build has over 6,700 lines of code; this module has less
than 120, yet supports the features needed by most distributions.
.SS "Supported"
.IX Subsection "Supported"
.IP "\(bu" 4
Pure Perl distributions
.IP "\(bu" 4
Building \s-1XS\s0 or C
.IP "\(bu" 4
Recursive test files
.IP "\(bu" 4
\&\s-1MYMETA\s0
.IP "\(bu" 4
Man page generation
.IP "\(bu" 4
Generated code from \s-1PL\s0 files
.SS "Not Supported"
.IX Subsection "Not Supported"
.IP "\(bu" 4
Dynamic prerequisites
.IP "\(bu" 4
\&\s-1HTML\s0 documentation generation
.IP "\(bu" 4
Extending Module::Build::Tiny
.IP "\(bu" 4
Module sharedirs
.SS "Directory structure"
.IX Subsection "Directory structure"
Your .pm and .pod files must be in \fIlib/\fR.  Any executables must be in
\&\fIscript/\fR.  Test files must be in \fIt/\fR. Dist sharedirs must be in \fIshare/\fR.
.SH "USAGE"
.IX Header "USAGE"
These all work pretty much like their Module::Build equivalents.
.SS "perl Build.PL"
.IX Subsection "perl Build.PL"
.SS "Build [ build ]"
.IX Subsection "Build [ build ]"
.SS "Build test"
.IX Subsection "Build test"
.SS "Build install"
.IX Subsection "Build install"
This supports the following options:
.IP "\(bu" 4
verbose
.IP "\(bu" 4
install_base
.IP "\(bu" 4
installdirs
.IP "\(bu" 4
prefix
.IP "\(bu" 4
install_path
.IP "\(bu" 4
destdir
.IP "\(bu" 4
uninst
.IP "\(bu" 4
config
.IP "\(bu" 4
pure-perl
.IP "\(bu" 4
create_packlist
.SH "AUTHORING"
.IX Header "AUTHORING"
This module doesn't support authoring. To develop modules using Module::Build::Tiny, usage of Dist::Zilla::Plugin::ModuleBuildTiny or App::ModuleBuildTiny is recommended.
.SH "CONFIG FILE AND ENVIRONMENT"
.IX Header "CONFIG FILE AND ENVIRONMENT"
Options can be provided in the \f(CW\*(C`PERL_MB_OPT\*(C'\fR environment variable the same way they can with Module::Build. This should be done during the configuration stage.
.SS "Incompatibilities"
.IX Subsection "Incompatibilities"
.IP "\(bu" 4
Argument parsing
.Sp
Module::Build has an extremely permissive way of argument handling, Module::Build::Tiny only supports a (sane) subset of that. In particular, \f(CW\*(C`./Build destdir=/foo\*(C'\fR does not work, you will need to pass it as \f(CW\*(C`./Build \-\-destdir=/foo\*(C'\fR.
.IP "\(bu" 4
\&.modulebuildrc
.Sp
Module::Build::Tiny does not support .modulebuildrc files. In particular, this means that versions of local::lib older than 1.006008 may break with \f(CW\*(C`ERROR: Can\*(Aqt create /usr/local/somepath\*(C'\fR. If the output of \f(CW\*(C`perl \-Mlocal::lib\*(C'\fR contains \f(CW\*(C`MODULEBUILDRC\*(C'\fR but not \f(CW\*(C`PERL_MB_OPT \*(C'\fR, you will need to upgrade it to resolve this issue.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Build
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Leon Timmermans, David Golden.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
