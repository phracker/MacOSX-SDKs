.TH "<MPSCNNBatchNormalizationDataSource >" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
<MPSCNNBatchNormalizationDataSource >
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNBatchNormalization\&.h>\fP
.PP
Inherits <MPSStateNSObject>, and <NSCopying>\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(NSUInteger) \- \fBnumberOfFeatureChannels\fP"
.br
.ti -1c
.RI "(float *__nullable) \- \fBgamma\fP"
.br
.ti -1c
.RI "(float *__nullable) \- \fBbeta\fP"
.br
.ti -1c
.RI "(float *__nullable) \- \fBmean\fP"
.br
.ti -1c
.RI "(float *__nullable) \- \fBvariance\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBload\fP"
.br
.ti -1c
.RI "(void) \- \fBpurge\fP"
.br
.ti -1c
.RI "(NSString *__nullable) \- \fBlabel\fP"
.br
.ti -1c
.RI "(\fBMPSCNNNormalizationGammaAndBetaState\fP *__nullable) \- \fBupdateGammaAndBetaWithCommandBuffer:batchNormalizationState:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNNormalizationMeanAndVarianceState\fP *__nullable) \- \fBupdateMeanAndVarianceWithCommandBuffer:batchNormalizationState:\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBupdateGammaAndBetaWithBatchNormalizationState:\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBupdateMeanAndVarianceWithBatchNormalizationState:\fP"
.br
.ti -1c
.RI "(float) \- \fBepsilon\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeWithCoder:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBcopyWithZone:device:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "BOOL \fBsupportsSecureCoding\fP"
.br
.in -1c
.SH "Method Documentation"
.PP 
.SS "\- (float * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) beta \fC [required]\fP"
Returns a pointer to the bias terms for the batch normalization\&. If NULL then no bias is to be applied\&. 
.SS "\- (nonnull instancetype \fBMPSCNNBatchNormalizationDataSource\fP) copyWithZone: (nullable NSZone *) zone(nullable id< MTLDevice >) device"
Optional copy method to create a copy of the data source for use with a new device\&.
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP The NSZone on which to allocate\&. 
.br
\fIdevice\fP The device where the kernel which uses this data source will be used\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP pointer to a copy of this data source\&. 
.RE
.PP

.SS "\- (void \fBMPSCNNBatchNormalizationDataSource\fP) encodeWithCoder: (NSCoder *__nonnull) aCoder\fC [optional]\fP"
\fBNSSecureCoding\fP compatibility\&. 
.SS "\- (float \fBMPSCNNBatchNormalizationDataSource\fP) epsilon \fC [optional]\fP"
An optional tiny number to use to maintain numerical stability\&.  output_image = (input_image - mean[c]) * gamma[c] / sqrt(variance[c] + epsilon) + beta[c]; Defalt value if method unavailable: FLT_MIN 
.SS "\- (float * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) gamma \fC [required]\fP"
Returns a pointer to the scale factors for the batch normalization\&. 
.SS "\- (nullable instancetype \fBMPSCNNBatchNormalizationDataSource\fP) initWithCoder: (NSCoder *__nonnull) aDecoder\fC [optional]\fP"
\fBNSSecureCoding\fP compatibility\&. 
.SS "\- (NSString* __nullable \fBMPSCNNBatchNormalizationDataSource\fP) label \fC [required]\fP"
\fBA\fP label that is transferred to the batch normalization filter at init time  Overridden by a \fBMPSCNNBatchNormalizationNode\&.label\fP if it is non-nil\&. 
.SS "\- (BOOL \fBMPSCNNBatchNormalizationDataSource\fP) load \fC [required]\fP"
Alerts the data source that the data will be needed soon  Each load alert will be balanced by a purge later, when MPS no longer needs the data from this object\&. Load will always be called atleast once after initial construction or each purge of the object before anything else is called\&. 
.PP
\fBReturns:\fP
.RS 4
Returns YES on success\&. If NO is returned, expect MPS object construction to fail\&. 
.RE
.PP

.SS "\- (float * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) mean \fC [required]\fP"
Returns a pointer to batch mean values with which to initialize the state for a subsequent batch normalization\&. 
.SS "\- (NSUInteger \fBMPSCNNBatchNormalizationDataSource\fP) numberOfFeatureChannels \fC [required]\fP"
Returns the number of feature channels within images to be normalized using the supplied parameters\&. 
.SS "\- (void \fBMPSCNNBatchNormalizationDataSource\fP) purge \fC [required]\fP"
Alerts the data source that the data is no longer needed  Each load alert will be balanced by a purge later, when MPS no longer needs the data from this object\&. 
.SS "\- (BOOL \fBMPSCNNBatchNormalizationDataSource\fP) updateGammaAndBetaWithBatchNormalizationState: (\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState\fC [optional]\fP"
Compute new gamma and beta values using current values and gradients contained within a \fBMPSCNNBatchNormalizationState\fP\&. Perform the update using the CPU\&.
.PP
\fBParameters:\fP
.RS 4
\fIbatchNormalizationState\fP The \fBMPSCNNBatchNormalizationState\fP object containing the current gamma and beta values and the gradient values\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP boolean value indicating if the update was performed\&. 
.RE
.PP

.SS "\- (\fBMPSCNNNormalizationGammaAndBetaState\fP * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) updateGammaAndBetaWithCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState\fC [optional]\fP"
Compute new gamma and beta values using current values and gradients contained within a \fBMPSCNNBatchNormalizationState\fP\&. Perform the update using a GPU\&.  This operation is expected to also decrement the read count of batchNormalizationState by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer on which to encode the update\&.
.br
\fIbatchNormalizationState\fP The \fBMPSCNNBatchNormalizationState\fP object containing the current gamma and beta values and the gradient values\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP \fBMPSCNNNormalizationMeanAndVarianceState\fP object containing updated mean and variance values\&. If NULL, the \fBMPSNNGraph\fP batch normalization filter gamma and beta values will remain unmodified\&. 
.RE
.PP

.SS "\- (BOOL \fBMPSCNNBatchNormalizationDataSource\fP) updateMeanAndVarianceWithBatchNormalizationState: (\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState\fC [optional]\fP"
Compute new mean and variance values using current batch statistics contained within a \fBMPSCNNBatchNormalizationState\fP\&. Perform the update using the CPU\&.
.PP
\fBParameters:\fP
.RS 4
\fIbatchNormalizationState\fP The \fBMPSCNNBatchNormalizationState\fP object containing the current batch statistics\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP boolean value indicating if the update was performed\&. 
.RE
.PP

.SS "\- (\fBMPSCNNNormalizationMeanAndVarianceState\fP * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) updateMeanAndVarianceWithCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState\fC [optional]\fP"
Compute new mean and variance values using current batch statistics contained within a \fBMPSCNNBatchNormalizationState\fP\&. Perform the update using a GPU\&.  This operation is expected to also decrement the read count of batchNormalizationState by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer on which to encode the update\&.
.br
\fIbatchNormalizationState\fP The \fBMPSCNNBatchNormalizationState\fP object containing the current batch statistics\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP \fBMPSCNNNormalizationMeanAndVarianceState\fP object containing updated mean and variance values\&. If NULL, the \fBMPSNNGraph\fP batch normalization filter mean and variance values will remain unmodified\&. 
.RE
.PP

.SS "\- (float * __nullable \fBMPSCNNBatchNormalizationDataSource\fP) variance \fC [required]\fP"
Returns a pointer to batch variance values with which to initialize the state for a subsequent batch normalization\&. 
.SH "Property Documentation"
.PP 
.SS "\- (BOOL \fBMPSCNNBatchNormalizationDataSource\fP) supportsSecureCoding\fC [read]\fP, \fC [optional]\fP, \fC [atomic]\fP, \fC [assign]\fP"
\fBNSSecureCoding\fP compatibility\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
