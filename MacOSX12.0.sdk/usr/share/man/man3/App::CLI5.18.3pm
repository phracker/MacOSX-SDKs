.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::CLI 3"
.TH App::CLI 3 "2010-12-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::CLI \- Dispatcher module for command line interface programs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    package MyApp;
\&    use base \*(AqApp::CLI\*(Aq;        # the DISPATCHER of your App
\&                                # it\*(Aqs not necessary putting the dispather
\&                                #  on the top level of your App
\&
\&    package main;
\&
\&    MyApp\->dispatch;            # call dispather in where you want
\&
\&
\&    package MyApp::List;
\&    use base qw(App::CLI::Command); # any (SUB)COMMAND of your App
\&
\&    use constant options => qw( 
\&        "h|help"   => "help",
\&        "verbose"  => "verbose",
\&        \*(Aqn|name=s\*(Aq  => \*(Aqname\*(Aq,
\&    );
\&
\&    use constant subcommands => qw(User Nickname type); # if you want subcommands
\&                                                        # automatically dispatch to subcommands
\&                                                        # when invoke $ myapp list [user|nickname|\-\-type]
\&                                                        # note \*(Aqtype\*(Aq lower case in first char
\&                                                        # is subcommand of old genre which is deprecated
\&
\&    sub run {
\&        my ($self, @args) = @_;
\&
\&        print "verbose" if $self\->{verbose};
\&        my $name = $self\->{name}; # get arg following long option \-\-name
\&
\&        if ($self\->{help}) {
\&            # if $ myapp list \-\-help or $ $ myapp list \-h
\&            # just only output PODs
\&        } else {
\&            # do something when imvoking $ my app list 
\&            # without subcommand and \-\-help
\&        }
\&    }
\&
\&
\&    package MyApp::List::User;
\&    use base qw(App::CLI::Command);
\&    use constant options => (
\&        "h|help"  =>  "help",
\&    );
\&
\&    sub run {
\&        my ($self,@args) = @_;
\&        # code for listing user
\&    }
\&
\&
\&    pakcage MyApp::List::Nickname;
\&    use base qw(App::CLI::Command);
\&    use constant options => (
\&        "sort=s"  =>  "sort",
\&    );
\&
\&    sub run {
\&        my ($self,@args) = @_;
\&        # code for listing nickname
\&    }
\&
\&    package MyApp::List::type;   # old genre of subcommand could not be cascading infinitely
\&    use base qw(MyApp::List);    # should inherit its parents command
\&
\&    sub run {
\&        my ($self, @args);
\&        # run to here when invoking $ myapp list \-\-type 
\&    }
\&
\&
\&    package MyApp::Help;
\&    use base \*(AqApp::CLI::Command::Help\*(Aq;
\&
\&    use constant options => (
\&        \*(Aqverbose\*(Aq => \*(Aqverbose\*(Aq,
\&    );
\&
\&    sub run {
\&        my ($self, @arg) = @_;
\&        # do something
\&        $self\->SUPER(@_); # App::CLI::Command::Help would output PDOs of each command
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`App::CLI\*(C'\fR dispatches \s-1CLI \s0(command line interface) based commands
into command classes.  It also supports subcommand and per-command
options.
.PP
\fIget_opt([@config], \f(CI%opt_map\fI)\fR
.IX Subsection "get_opt([@config], %opt_map)"
.PP
.Vb 1
\&    give options map, process by Getopt::Long::Parser
.Ve
.PP
\fI\fR
.IX Subsection ""
.PP
interface of dispatcher
.PP
\fIcmd_map($cmd)\fR
.IX Subsection "cmd_map($cmd)"
.PP
find package name of subcommand in constant \f(CW%alias\fR
.PP
if it's finded, return ucfirst of the package name,
.PP
otherwise, return ucfirst of \f(CW$cmd\fR itself.
.PP
\fIget_cmd($cmd, \f(CI@arg\fI)\fR
.IX Subsection "get_cmd($cmd, @arg)"
.PP
return subcommand of first level via \f(CW$ARGV\fR[0]
.SH "SEE ALSO"
.IX Header "SEE ALSO"
App::CLI::Command
Getopt::Long
.SH "AUTHORS"
.IX Header "AUTHORS"
Chia-liang Kao <clkao@clkao.org>
Cornelius Lin  <cornelius.howl@gmail.com>
shelling       <navyblueshellingford@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005\-2006 by Chia-liang Kao <clkao@clkao.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
