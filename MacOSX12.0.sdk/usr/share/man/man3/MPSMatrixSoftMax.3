.TH "MPSMatrixSoftMax" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixSoftMax
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixSoftMax\&.h>\fP
.PP
Inherits \fBMPSMatrixUnaryKernel\fP\&.
.PP
Inherited by \fBMPSMatrixLogSoftMax\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:inputMatrix:resultMatrix:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBcopyWithZone:device:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBsourceRows\fP"
.br
.ti -1c
.RI "NSUInteger \fBsourceColumns\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework\&.
.PP
\fBA\fP softmax kernel that operates on matrices\&.
.PP
\fBA\fP \fBMPSMatrixSoftMax\fP object computes: 
.PP
.nf
            B_ij = Exp { A_ij } / ( Sum_k Exp { A_ik } )

        A and B are matrices which are represented by MPSMatrix
        objects. This filter computes the same result for MPSMatrices as
        MPSCNNSoftMax filter does for MPSImages by interpreting the columns
        of the matrix as feature channels, that is the sum runs over column indices.
.fi
.PP
 
.SH "Method Documentation"
.PP 
.SS "\- (nonnull instancetype) copyWithZone: (nullable NSZone *) zone(nullable id< MTLDevice >) device"
Make a copy of this kernel for a new device - 
.PP
\fBSee also:\fP
.RS 4
\fBMPSKernel\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP The NSZone in which to allocate the object 
.br
\fIdevice\fP The device for the new \fBMPSKernel\fP\&. If nil, then use self\&.device\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a copy of this \fBMPSKernel\fP\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSMatrix\fP *__nonnull) inputMatrix(\fBMPSMatrix\fP *__nonnull) resultMatrix"
Encode a \fBMPSMatrixSoftMax\fP object to a command buffer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid MTLCommandBuffer to receive the encoded kernel\&.
.br
\fIinputMatrix\fP \fBA\fP valid \fBMPSMatrix\fP object which specifies the input matrix\&.
.br
\fIresultMatrix\fP \fBA\fP valid \fBMPSMatrix\fP object which specifies the matrix which will be overwritten by the result\&.
.RE
.PP
Certain constraints apply to the sizes of the matrices depending on the sizes requested at initialization time as well as the origins at the time this routine is called:
.PP
The result matrix must be large enough to hold a two dimensional array of 'sourceRows' rows and 'sourceColumns' columns beginning at resultMatrixOrigin\&.
.PP
Each matrix within the range specified by batchStart and batchSize, which also specifies a valid set of matrices within inputMatrix and resultMatrix, will be processed\&.
.PP
The datatypes of the matrices inputMatrix and resultMatrix must match and be either MPSDataTypeFloat32 or MPSDataTypeFloat16\&. 
.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  See \fBMPSKernel::initWithCoder\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSMatrixSoftMax\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSMatrixSoftMax\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSMatrixSoftMax\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Initialize an \fBMPSMatrixSoftMax\fP object on a device for a given size\&.
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device on which the kernel will execute\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSMatrixSoftMax\fP object or nil, if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SH "Property Documentation"
.PP 
.SS "\- sourceColumns\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of columns to consider from the source in the operation\&. This property is modifiable and defaults to NSUIntegerMax and the number is adjusted dynamically at kernel encode time (see encodeToCommandBuffer) to fit into the source matrix available starting from sourceMatrixOrigin\&.y, indicating that by default the whole source matrix is used\&. If a different size is desired then this should be modified prior to encoding the kernel\&. It is the user's responsibility to ensure that the resultMatrix parameter in encodeToCommandBuffer is large enough to accommodate the results of this operation, otherwise the results of the encode call are undefined\&. NOTE: sourceMatrixOrigin and resultMatrixOrigin from \fBMPSMatrixUnaryKernel\fP can be used to control the starting points in the source and destination at kernel encode time (see encodeToCommandBuffer)\&. 
.SS "\- sourceRows\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of rows to consider from the source in the operation\&. This property is modifiable and defaults to NSUIntegerMax and the number is adjusted dynamically at kernel encode time (see encodeToCommandBuffer) to fit into the source matrix available starting from sourceMatrixOrigin\&.x, indicating that by default the whole source matrix is used\&. If a different size is desired then this should be modified prior to encoding the kernel\&. It is the user's responsibility to ensure that the resultMatrix parameter in encodeToCommandBuffer is large enough to accommodate the results of this operation, otherwise the results of the encode call are undefined\&. NOTE: sourceMatrixOrigin and resultMatrixOrigin from \fBMPSMatrixUnaryKernel\fP can be used to control the starting points in the source and destination at kernel encode time (see encodeToCommandBuffer)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
