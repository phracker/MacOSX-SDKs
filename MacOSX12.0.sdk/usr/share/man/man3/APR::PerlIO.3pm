.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::PerlIO 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::APR::PerlIO 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
APR::PerlIO \-\- Perl IO layer for APR
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 2
\&  # under mod_perl
\&  use APR::PerlIO ();
\&  
\&  sub handler {
\&      my $r = shift;
\&  
\&      die "This Perl build doesn\*(Aqt support PerlIO layers"
\&          unless APR::PerlIO::PERLIO_LAYERS_ARE_ENABLED;
\&  
\&      open my $fh, ">:APR", $filename, $r\->pool or die $!;
\&      # work with $fh as normal $fh
\&      close $fh;
\&  
\&      return Apache2::Const::OK;
\&  }
\&
\&  # outside mod_perl
\&  % perl \-MAPR \-MAPR::PerlIO \-MAPR::Pool \-le \e
\&  \*(Aqopen my $fh, ">:APR", "/tmp/apr", APR::Pool\->new or die "$!"; \e
\&   print $fh "whoah!"; \e
\&   close $fh;\*(Aq
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`APR::PerlIO\*(C'\fR implements a Perl \s-1IO\s0 layer using \s-1APR\s0's file
manipulation \s-1API\s0 internally.
.PP
Why do you want to use this? Normally you shouldn't, probably it won't
be faster than Perl's default layer. It's only useful when you need to
manipulate a filehandle opened at the \s-1APR\s0 side, while using Perl.
.PP
Normally you won't call \fBopen()\fR with \s-1APR\s0 layer attribute, but some
mod_perl functions will return a filehandle which is internally hooked
to \s-1APR.\s0 But you can use \s-1APR\s0 Perl \s-1IO\s0 directly if you want.
.SH "Prerequisites"
.IX Header "Prerequisites"
Not every Perl will have full \f(CW\*(C`APR::PerlIO\*(C'\fR functionality available.
.PP
Before using the Perl \s-1IO APR\s0 layer one has to check whether it's
supported by the used APR/Perl build. Perl 5.8.x or higher with perlio
enabled is required. You can check whether your Perl fits the bill by
running:
.PP
.Vb 2
\&  % perl \-V:useperlio
\&  useperlio=\*(Aqdefine\*(Aq;
.Ve
.PP
It should say \fIdefine\fR.
.PP
If you need to do the checking in the code, there is a special
constant provided by \f(CW\*(C`APR::PerlIO\*(C'\fR, which can be used as follows:
.PP
.Vb 3
\&  use APR::PerlIO ();
\&  die "This Perl build doesn\*(Aqt support PerlIO layers"
\&      unless APR::PerlIO::PERLIO_LAYERS_ARE_ENABLED;
.Ve
.PP
Notice that loading \f(CW\*(C`APR::PerlIO\*(C'\fR won't fail when Perl \s-1IO\s0 layers
aren't available since \f(CW\*(C`APR::PerlIO\*(C'\fR provides functionality for Perl
builds not supporting Perl \s-1IO\s0 layers.
.SH "Constants"
.IX Header "Constants"
.ie n .SS """APR::PerlIO::PERLIO_LAYERS_ARE_ENABLED"""
.el .SS "\f(CWAPR::PerlIO::PERLIO_LAYERS_ARE_ENABLED\fP"
.IX Subsection "APR::PerlIO::PERLIO_LAYERS_ARE_ENABLED"
See Prerequisites.
.SH "API"
.IX Header "API"
Most of the \s-1API\s0 is as in normal perl \s-1IO\s0 with a few nuances listed in
the following sections.
.PP
\&\s-1META:\s0 need to rework the exception mechanism here. Current success in
using errno ($!) being set (e.g. on \fBopen()\fR) is purely accidental and
not guaranteed across all platforms and functions. So don't rely on
$!. Will use \f(CW\*(C`APR::Error\*(C'\fR for that
purpose.
.ie n .SS """open"""
.el .SS "\f(CWopen\fP"
.IX Subsection "open"
Open a file via \s-1APR\s0 Perl \s-1IO\s0 layer.
.PP
.Vb 1
\&  open my $fh, ">:APR", $filename, $r\->pool or die $!;
.Ve
.ie n .IP "arg1: $fh ( \s-1GLOB\s0 filehandle )" 4
.el .IP "arg1: \f(CW$fh\fR ( \s-1GLOB\s0 filehandle )" 4
.IX Item "arg1: $fh ( GLOB filehandle )"
The filehandle.
.ie n .IP "arg2: $mode ( string )" 4
.el .IP "arg2: \f(CW$mode\fR ( string )" 4
.IX Item "arg2: $mode ( string )"
The mode to open the file, constructed from two sections separated by
the \f(CW\*(C`:\*(C'\fR character: the first section is the mode to open the file
under (>, <, etc) and the second section must be a string
\&\fI\s-1APR\s0\fR. For more information refer to the \fIopen\fR entry in the
\&\fIperlfunc\fR manpage.
.ie n .IP "arg3: $filename ( string )" 4
.el .IP "arg3: \f(CW$filename\fR ( string )" 4
.IX Item "arg3: $filename ( string )"
The path to the filename to open
.ie n .IP "arg4: $p ( ""APR::Pool"" )" 4
.el .IP "arg4: \f(CW$p\fR ( \f(CWAPR::Pool\fR )" 4
.IX Item "arg4: $p ( APR::Pool )"
The pool object to use to allocate APR::PerlIO layer.
.IP "ret: ( integer )" 4
.IX Item "ret: ( integer )"
success or failure value (boolean).
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.ie n .SS """seek"""
.el .SS "\f(CWseek\fP"
.IX Subsection "seek"
Sets \f(CW$fh\fR's position, just like the \f(CW\*(C`seek()\*(C'\fR Perl call:
.PP
.Vb 1
\&  seek($fh, $offset, $whence);
.Ve
.PP
If \f(CW$offset\fR is zero, \f(CW\*(C`seek()\*(C'\fR works normally.
.PP
However if \f(CW$offset\fR is non-zero and Perl has been compiled with with
large files support (\f(CW\*(C`\-Duselargefiles\*(C'\fR), whereas \s-1APR\s0 wasn't, this
function will croak. This is because largefile size \f(CW\*(C`Off_t\*(C'\fR simply
cannot fit into a non-largefile size \f(CW\*(C`apr_off_t\*(C'\fR.
.PP
To solve the problem, rebuild Perl with \f(CW\*(C`\-Uuselargefiles\*(C'\fR. Currently
there is no way to force \s-1APR\s0 to build with large files support.
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.SH "C API"
.IX Header "C API"
The C \s-1API\s0 provides functions to convert between Perl \s-1IO\s0 and \s-1APR\s0 Perl
\&\s-1IO\s0 filehandles.
.PP
\&\s-1META:\s0 document these
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation. The \fI\f(BIperliol\fI\|(1)\fR,
\&\fI\f(BIperlapio\fI\|(1)\fR and \fI\f(BIperl\fI\|(1)\fR manpages.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous
contributors.
