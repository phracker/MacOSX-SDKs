.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Manual::Reading 3"
.TH DBIx::Class::Manual::Reading 3 "2013-12-16" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Manual::Reading \- How to read and write DBIx::Class POD.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This doc should help users to understand how the examples and
documentation found in the DBIx::Class distribution can be
interpreted.
.PP
Writers of DBIx::Class \s-1POD\s0 should also check here to make sure their
additions are consistent with the rest of the documentation.
.SH "METHODS"
.IX Header "METHODS"
Methods should be documented in the files which also contain the code
for the method, or that file should be hidden from \s-1PAUSE\s0 completely,
in which case the methods are documented in the file which loads
it. Methods may also be documented and referred to in files
representing the major objects or components on which they can be
called.
.PP
For example, DBIx::Class::Relationship documents the methods
actually coded in the helper relationship classes like
DBIx::Class::Relationship::BelongsTo. The BelongsTo file itself is
hidden from \s-1PAUSE\s0 as it has no documentation. The accessors created by
relationships should be mentioned in DBIx::Class::Row, the major
object that they will be called on.
.SS "Method documentation"
.IX Subsection "Method documentation"
.IP "\(bu" 4
Each method starts with a \*(L"head2\*(R" statement of its name.
.Sp
Just the plain method name, not an example of how to call it, or a link.
This is to ensure easy linking to method documentation from other \s-1POD.\s0
.IP "\(bu" 4
The header is followed by a two-item list. This contains a description
of the arguments the method is expected to take, and an indication of
what the method returns.
.Sp
The first item provides a list of all possible values for the
arguments of the method in order, separated by \f(CW\*(C`, \*(C'\fR, preceded by the
text \*(L"Arguments: \*(R"
.Sp
Example (for the belongs_to relationship):
.Sp
.Vb 1
\&  =item Arguments: $accessor_name, $related_class, $fk_column|\e%cond|\e@cond?, \e%attr?
.Ve
.Sp
The following possible argument sigils can be shown:
.RS 4
.IP "\(bu" 4
\&\f(CW$var\fR \- A scalar (string or numeric) variable.
.IP "\(bu" 4
\&\e%var \- A variable containing reference to a hash.
.IP "\(bu" 4
\&\e@var \- A variable containing a reference to an array.
.IP "\(bu" 4
\&\e$var \- A variable containing a reference to a scalar variable.
.IP "\(bu" 4
\&\f(CW%var\fR \- A hashref variable (list of key/value pairs) \- rarely used in DBIx::Class.
.Sp
Reading an argument as a hash variable will consume all subsequent
method arguments, use with caution.
.IP "\(bu" 4
\&\f(CW@var\fR \- An array variable (list of values).
.Sp
Reading an argument as a array variable will consume all subsequent
method arguments, use with caution.
.IP "\(bu" 4
\&\f(CW$obj\fR \- Reference to the source class or object definition
.Sp
All arguments and return values should provide a link to the object's
class documentation or definition, even if it's the same class as the current
documentation.  For example:
.Sp
.Vb 2
\&  ## Correct, if stated within DBIx::Class::ResultSet
\&  L<$resultset|/new>
\&
\&  ## Correct, if stated outside DBIx::Class::ResultSet
\&  L<$resultset|DBIx::Class::ResultSet>
.Ve
.IP "\(bu" 4
? \- Optional, should be placed after the argument type and name.
.Sp
.Vb 2
\&  ## Correct
\&  \e%myhashref|\e@myarrayref?
\&
\&  ## Wrong
\&  \e%myhashref?|\e@myarrayref
.Ve
.Sp
Applies to the entire argument.
.Sp
Optional arguments can be left out of method calls, unless the caller
needs to pass in any of the following arguments. In which case the
caller should pass \f(CW\*(C`undef\*(C'\fR in place of the missing argument.
.IP "\(bu" 4
| \- Alternate argument content types.
.Sp
At least one of these must be supplied unless the argument is also
marked optional.
.RE
.RS 4
.Sp
The second item starts with the text \*(L"Return Value:\*(R". The remainder of
the line is either the text \*(L"not defined\*(R" or a variable with a descriptive
name.
.Sp
.Vb 4
\&  ## Good examples
\&  =item Return Value: not defined
\&  =item Return Value: L<$schema|DBIx::Class::Schema>
\&  =item Return Value: $classname
\&
\&  ## Bad examples
\&  =item Return Value: The names
.Ve
.Sp
\&\*(L"not defined\*(R" means the method does not deliberately return a value, and
the caller should not use or rely on anything it does return.  (Perl
functions always return something, usually the result of the last code
statement, if there is no explicit return statement.)  This is different
than specifying \*(L"undef\*(R", which means that it explicitly returns undef,
though usually this is used an alternate return (like \f(CW\*(C`$obj | undef\*(C'\fR).
.RE
.IP "\(bu" 4
The argument/return list is followed by a single paragraph describing what
the method does.
.IP "\(bu" 4
The description paragraph is followed by another list. Each item in
the list explains one of the possible argument/type combinations.
.Sp
This list may be omitted if the author feels that the variable names are
self-explanatory enough to not require it. Use best judgement.
.IP "\(bu" 4
The argument/return list is followed by some examples of how to use the
method, using its various types of arguments.
.Sp
The examples can also include ways to use the results if
applicable. For instance, if the documentation is for a relationship
type, the examples can include how to call the resulting relation
accessor, how to use the relation name in a search and so on.
.Sp
If some of the examples assume default values, these should be shown
with and without the actual arguments, with hints about the equivalent
calls.
.Sp
The example should be followed by one or more paragraphs explaining
what it does.
.Sp
Examples and explaining paragraphs can be repeated as necessary.
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
