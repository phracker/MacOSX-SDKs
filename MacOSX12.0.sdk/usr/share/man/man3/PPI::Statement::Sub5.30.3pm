.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Statement::Sub 3"
.TH PPI::Statement::Sub 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Statement::Sub \- Subroutine declaration
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\&  PPI::Statement::Sub
\&  isa PPI::Statement
\&      isa PPI::Node
\&          isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Except for the special \s-1BEGIN, CHECK, UNITCHECK, INIT,\s0 and \s-1END\s0 subroutines
(which are part of PPI::Statement::Scheduled) all subroutine declarations
are lexed as a PPI::Statement::Sub object.
.PP
Primarily, this means all of the various \f(CW\*(C`sub foo {}\*(C'\fR statements, but also
forward declarations such as \f(CW\*(C`sub foo;\*(C'\fR or \f(CW\*(C`sub foo($);\*(C'\fR. It \fBdoes not\fR
include anonymous subroutines, as these are merely part of a normal statement.
.SH "METHODS"
.IX Header "METHODS"
\&\f(CW\*(C`PPI::Statement::Sub\*(C'\fR has a number of methods in addition to the standard
PPI::Statement, PPI::Node and PPI::Element methods.
.SS "name"
.IX Subsection "name"
The \f(CW\*(C`name\*(C'\fR method returns the name of the subroutine being declared.
.PP
In some rare cases such as a naked \f(CW\*(C`sub\*(C'\fR at the end of the file, this may return
false.
.SS "prototype"
.IX Subsection "prototype"
If it has one, the \f(CW\*(C`prototype\*(C'\fR method returns the subroutine's prototype.
It is returned in the same format as \*(L"prototype\*(R" in PPI::Token::Prototype,
cleaned and removed from its brackets.
.PP
Returns the subroutine's prototype, or undef if the subroutine does not
define one. Note that when the sub has an empty prototype (\f(CW\*(C`()\*(C'\fR) the
return is an empty string.
.SS "block"
.IX Subsection "block"
With its name and implementation shared with PPI::Statement::Scheduled,
the \f(CW\*(C`block\*(C'\fR method finds and returns the actual Structure object of the
code block for this subroutine.
.PP
Returns false if this is a forward declaration, or otherwise does not have a
code block.
.SS "forward"
.IX Subsection "forward"
The \f(CW\*(C`forward\*(C'\fR method returns true if the subroutine declaration is a
forward declaration.
.PP
That is, it returns false if the subroutine has a code block, or true
if it does not.
.SS "reserved"
.IX Subsection "reserved"
The \f(CW\*(C`reserved\*(C'\fR method provides a convenience method for checking to see
if this is a special reserved subroutine. It does not check against any
particular list of reserved sub names, but just returns true if the name
is all uppercase, as defined in perlsub.
.PP
Note that in the case of \s-1BEGIN, CHECK, UNITCHECK, INIT\s0 and \s-1END,\s0 these will be
defined as PPI::Statement::Scheduled objects, not subroutines.
.PP
Returns true if it is a special reserved subroutine, or false if not.
.SS "type"
.IX Subsection "type"
The \f(CW\*(C`type\*(C'\fR method checks and returns the declaration type of the statement,
which will be one of 'my', 'our', or 'state'.
.PP
Returns a string of the type, or \f(CW\*(C`undef\*(C'\fR if the type is not declared.
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
