.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Field 3"
.TH Mail::Field 3 "2014-01-05" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Field \- Base class for manipulation of mail header fields
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Field is extended by
\&   Mail::Field::AddrList
\&   Mail::Field::Date
\&   Mail::Field::Generic
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Mail::Field;
\&    
\& my $field = Mail::Field\->new(\*(AqSubject\*(Aq, \*(Aqsome subject text\*(Aq);
\& my $field = Mail::Field\->new(Subject => \*(Aqsome subject text\*(Aq);
\& print $field\->tag,": ",$field\->stringify,"\en";
\&
\& my $field = Mail::Field\->subject(\*(Aqsome subject text\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Mail::Field\*(C'\fR creates and manipulates fields in \s-1MIME\s0 headers, collected
within a Mail::Header object.  Different field types have their
own sub-class (extension), defining additional useful accessors to the
field content.
.PP
People are invited to merge their implementation to special fields into
MailTools, to maintain a consistent set of packages and documentation.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
Mail::Field (and it's sub-classes) define several methods which return
new objects. These can all be categorized as constructor.
.IP "Mail::Field\->\fBcombine\fR(\s-1FIELDS\s0)" 4
.IX Item "Mail::Field->combine(FIELDS)"
Take a \s-1LIST\s0 of \f(CW\*(C`Mail::Field\*(C'\fR objects (which should all be of the same
sub-class) and create a new object in that same class.
.IP "Mail::Field\->\fBextract\fR(\s-1TAG, HEAD\s0 [, \s-1INDEX \s0])" 4
.IX Item "Mail::Field->extract(TAG, HEAD [, INDEX ])"
Takes as arguments the tag name, a \f(CW\*(C`Mail::Head\*(C'\fR object
and optionally an index.
.Sp
If the index argument is given then \f(CW\*(C`extract\*(C'\fR will retrieve the given tag
from the \f(CW\*(C`Mail::Head\*(C'\fR object and create a new \f(CW\*(C`Mail::Field\*(C'\fR based object.
\&\fIundef\fR will be returned in the field does not exist.
.Sp
If the index argument is not given the result depends on the context
in which \f(CW\*(C`extract\*(C'\fR is called. If called in a scalar context the result
will be as if \f(CW\*(C`extract\*(C'\fR was called with an index value of zero. If called
in an array context then all tags will be retrieved and a list of
\&\f(CW\*(C`Mail::Field\*(C'\fR objects will be returned.
.IP "Mail::Field\->\fBnew\fR(\s-1TAG\s0 [, \s-1STRING\s0 | \s-1OPTIONS\s0])" 4
.IX Item "Mail::Field->new(TAG [, STRING | OPTIONS])"
Create an object in the class which defines the field specified by
the \s-1TAG\s0 argument.
.ie n .SS """Fake"" constructors"
.el .SS "``Fake'' constructors"
.IX Subsection "Fake constructors"
.ie n .IP "$obj\->\fBcreate\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->create(OPTIONS)"
This constructor is used internally with preprocessed field information.
When called on an existing object, its original content will get
replaced.
.ie n .IP "$obj\->\fBparse\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBparse\fR()" 4
.IX Item "$obj->parse()"
Parse a field line.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP "$obj\->\fBset\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->set(OPTIONS)"
Change the settings (the content, but then smart) of this field.
.ie n .IP "$obj\->\fBstringify\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstringify\fR()" 4
.IX Item "$obj->stringify()"
Returns the field as a string.
.ie n .IP "$obj\->\fBtag\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtag\fR()" 4
.IX Item "$obj->tag()"
.PD 0
.IP "Mail::Field\->\fBtag\fR()" 4
.IX Item "Mail::Field->tag()"
.PD
Return the tag (in the correct case) for this item.  Well, actually any
casing is \s-1OK,\s0 because the field tags are treated case-insensitive; however
people have some preferences.
.SS "Smart accessors"
.IX Subsection "Smart accessors"
.ie n .IP "$obj\->\fBtext\fR([\s-1STRING\s0])" 4
.el .IP "\f(CW$obj\fR\->\fBtext\fR([\s-1STRING\s0])" 4
.IX Item "$obj->text([STRING])"
Without arguments, the field is returned as \fIstringify()\fR does.  Otherwise,
the \s-1STRING\s0 is parsed with \fIparse()\fR to replace the object's content.
.Sp
It is more clear to call either \fIstringify()\fR or \fIparse()\fR directly, because
this method does not add additional processing.
.SH "DETAILS"
.IX Header "DETAILS"
.SS "SUB-CLASS \s-1PACKAGE NAMES\s0"
.IX Subsection "SUB-CLASS PACKAGE NAMES"
All sub-classes should be called Mail::Field::\fIname\fR where \fIname\fR is
derived from the tag using these rules.
.IP "\(bu" 4
Consider a tag as being made up of elements separated by '\-'
.IP "\(bu" 4
Convert all characters to lowercase except the first in each element, which
should be uppercase.
.IP "\(bu" 4
\&\fIname\fR is then created from these elements by using the first
N characters from each element.
.IP "\(bu" 4
N is calculated by using the formula :\-
.Sp
.Vb 1
\&    int((7 + #elements) / #elements)
.Ve
.IP "\(bu" 4
\&\fIname\fR is then limited to a maximum of 8 characters, keeping the first 8
characters.
.PP
For an example of this take a look at the definition of the 
\&\f(CW\*(C`_header_pkg_name()\*(C'\fR subroutine in \f(CW\*(C`Mail::Field\*(C'\fR
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Undefined subroutine <method> called" 4
.IX Item "Error: Undefined subroutine <method> called"
Mail::Field objects use autoloading to compile new functionality.
Apparently, the method called is not implemented for the specific
class of the field object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2007 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
