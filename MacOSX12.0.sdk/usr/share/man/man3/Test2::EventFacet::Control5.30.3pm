.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Control 3"
.TH Test2::EventFacet::Control 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::EventFacet::Control \- Facet for hub actions and behaviors.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This facet is used when the event needs to give instructions to the Test2
internals.
.SH "FIELDS"
.IX Header "FIELDS"
.ie n .IP "$string = $control\->{details}" 4
.el .IP "\f(CW$string\fR = \f(CW$control\fR\->{details}" 4
.IX Item "$string = $control->{details}"
.PD 0
.ie n .IP "$string = $control\->\fBdetails()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$control\fR\->\fBdetails()\fR" 4
.IX Item "$string = $control->details()"
.PD
Human readable explanation for the special behavior.
.ie n .IP "$bool = $control\->{global}" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->{global}" 4
.IX Item "$bool = $control->{global}"
.PD 0
.ie n .IP "$bool = $control\->\fBglobal()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->\fBglobal()\fR" 4
.IX Item "$bool = $control->global()"
.PD
True if the event is global in nature and should be seen by all hubs.
.ie n .IP "$exit = $control\->{terminate}" 4
.el .IP "\f(CW$exit\fR = \f(CW$control\fR\->{terminate}" 4
.IX Item "$exit = $control->{terminate}"
.PD 0
.ie n .IP "$exit = $control\->\fBterminate()\fR" 4
.el .IP "\f(CW$exit\fR = \f(CW$control\fR\->\fBterminate()\fR" 4
.IX Item "$exit = $control->terminate()"
.PD
Defined if the test should immediately exit, the value is the exit code and may
be \f(CW0\fR.
.ie n .IP "$bool = $control\->{halt}" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->{halt}" 4
.IX Item "$bool = $control->{halt}"
.PD 0
.ie n .IP "$bool = $control\->\fBhalt()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->\fBhalt()\fR" 4
.IX Item "$bool = $control->halt()"
.PD
True if all testing should be halted immediately.
.ie n .IP "$bool = $control\->{has_callback}" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->{has_callback}" 4
.IX Item "$bool = $control->{has_callback}"
.PD 0
.ie n .IP "$bool = $control\->\fBhas_callback()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$control\fR\->\fBhas_callback()\fR" 4
.IX Item "$bool = $control->has_callback()"
.PD
True if the \f(CW\*(C`callback($hub)\*(C'\fR method on the event should be called.
.ie n .IP "$encoding = $control\->{encoding}" 4
.el .IP "\f(CW$encoding\fR = \f(CW$control\fR\->{encoding}" 4
.IX Item "$encoding = $control->{encoding}"
.PD 0
.ie n .IP "$encoding = $control\->\fBencoding()\fR" 4
.el .IP "\f(CW$encoding\fR = \f(CW$control\fR\->\fBencoding()\fR" 4
.IX Item "$encoding = $control->encoding()"
.PD
This can be used to change the encoding from this event onward.
.ie n .IP "$phase = $control\->{phase}" 4
.el .IP "\f(CW$phase\fR = \f(CW$control\fR\->{phase}" 4
.IX Item "$phase = $control->{phase}"
.PD 0
.ie n .IP "$phase = $control\->\fBphase()\fR" 4
.el .IP "\f(CW$phase\fR = \f(CW$control\fR\->\fBphase()\fR" 4
.IX Item "$phase = $control->phase()"
.PD
Used to signal that a phase change has occurred. Currently only the perl \s-1END\s0
phase is signaled.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
