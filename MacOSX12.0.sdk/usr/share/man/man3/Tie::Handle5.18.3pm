.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tie::Handle 3pm"
.TH Tie::Handle 3pm "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Handle \- base class definitions for tied handles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package NewHandle;
\&    require Tie::Handle;
\&
\&    @ISA = qw(Tie::Handle);
\&
\&    sub READ { ... }            # Provide a needed method
\&    sub TIEHANDLE { ... }       # Overrides inherited method
\&
\&
\&    package main;
\&
\&    tie *FH, \*(AqNewHandle\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some skeletal methods for handle-tying classes. See
perltie for a list of the functions required in tying a handle to a package.
The basic \fBTie::Handle\fR package provides a \f(CW\*(C`new\*(C'\fR method, as well as methods
\&\f(CW\*(C`TIEHANDLE\*(C'\fR, \f(CW\*(C`PRINT\*(C'\fR, \f(CW\*(C`PRINTF\*(C'\fR and \f(CW\*(C`GETC\*(C'\fR.
.PP
For developers wishing to write their own tied-handle classes, the methods
are summarized below. The perltie section not only documents these, but
has sample code as well:
.IP "\s-1TIEHANDLE\s0 classname, \s-1LIST\s0" 4
.IX Item "TIEHANDLE classname, LIST"
The method invoked by the command \f(CW\*(C`tie *glob, classname\*(C'\fR. Associates a new
glob instance with the specified class. \f(CW\*(C`LIST\*(C'\fR would represent additional
arguments (along the lines of AnyDBM_File and compatriots) needed to
complete the association.
.IP "\s-1WRITE\s0 this, scalar, length, offset" 4
.IX Item "WRITE this, scalar, length, offset"
Write \fIlength\fR bytes of data from \fIscalar\fR starting at \fIoffset\fR.
.IP "\s-1PRINT\s0 this, \s-1LIST\s0" 4
.IX Item "PRINT this, LIST"
Print the values in \fI\s-1LIST\s0\fR
.IP "\s-1PRINTF\s0 this, format, \s-1LIST\s0" 4
.IX Item "PRINTF this, format, LIST"
Print the values in \fI\s-1LIST\s0\fR using \fIformat\fR
.IP "\s-1READ\s0 this, scalar, length, offset" 4
.IX Item "READ this, scalar, length, offset"
Read \fIlength\fR bytes of data into \fIscalar\fR starting at \fIoffset\fR.
.IP "\s-1READLINE\s0 this" 4
.IX Item "READLINE this"
Read a single line
.IP "\s-1GETC\s0 this" 4
.IX Item "GETC this"
Get a single character
.IP "\s-1CLOSE\s0 this" 4
.IX Item "CLOSE this"
Close the handle
.IP "\s-1OPEN\s0 this, filename" 4
.IX Item "OPEN this, filename"
(Re\-)open the handle
.IP "\s-1BINMODE\s0 this" 4
.IX Item "BINMODE this"
Specify content is binary
.IP "\s-1EOF\s0 this" 4
.IX Item "EOF this"
Test for end of file.
.IP "\s-1TELL\s0 this" 4
.IX Item "TELL this"
Return position in the file.
.IP "\s-1SEEK\s0 this, offset, whence" 4
.IX Item "SEEK this, offset, whence"
Position the file.
.Sp
Test for end of file.
.IP "\s-1DESTROY\s0 this" 4
.IX Item "DESTROY this"
Free the storage associated with the tied handle referenced by \fIthis\fR.
This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
The perltie section contains an example of tying handles.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
This version of Tie::Handle is neither related to nor compatible with
the Tie::Handle (3.0) module available on \s-1CPAN.\s0 It was due to an
accident that two modules with the same name appeared. The namespace
clash has been cleared in favor of this module that comes with the
perl core in September 2000 and accordingly the version number has
been bumped up to 4.0.
