.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Find::Rule::Extending 3"
.TH File::Find::Rule::Extending 3 "2015-12-03" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Find::Rule::Extending \- the mini\-guide to extending File::Find::Rule
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& package File::Find::Rule::Random;
\& use strict;
\& 
\& # take useful things from File::Find::Rule
\& use base \*(AqFile::Find::Rule\*(Aq;
\&
\& # and force our crack into the main namespace
\& sub File::Find::Rule::random () {
\&     my $self = shift()\->_force_object;
\&     $self\->exec( sub { rand > 0.5 } );
\& }
\& 
\& 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
File::Find::Rule went down so well with the buying public that
everyone wanted to add extra features.  With the 0.07 release this
became a possibility, using the following conventions.
.SS "Declare your package"
.IX Subsection "Declare your package"
.Vb 2
\& package File::Find::Rule::Random;
\& use strict;
.Ve
.SS "Inherit methods from File::Find::Rule"
.IX Subsection "Inherit methods from File::Find::Rule"
.Vb 2
\& # take useful things from File::Find::Rule
\& use base \*(AqFile::Find::Rule\*(Aq;
.Ve
.PP
\fIForce your madness into the main package\fR
.IX Subsection "Force your madness into the main package"
.PP
.Vb 5
\& # and force our crack into the main namespace
\& sub File::Find::Rule::random () {
\&     my $self = shift()\->_force_object;
\&     $self\->exec( sub { rand > 0.5 } );
\& }
.Ve
.PP
Yes, we're being very cavalier here and defining things into the main
File::Find::Rule namespace.  This is due to lack of imaginiation on my
part \- I simply can't find a way for the functional and oo interface
to work without doing this or some kind of inheritance, and
inheritance stops you using two File::Find::Rule::Foo modules
together.
.PP
For this reason try and pick distinct names for your extensions.  If
this becomes a problem then I may institute a semi-official registry
of taken names.
.SS "Taking no arguments."
.IX Subsection "Taking no arguments."
Note the null prototype on random.  This is a cheat for the procedural
interface to know that your sub takes no arguments, and so allows this
to happen:
.PP
.Vb 1
\& find( random => in => \*(Aq.\*(Aq );
.Ve
.PP
If you hadn't declared \f(CW\*(C`random\*(C'\fR with a null prototype it would have
consumed \f(CW\*(C`in\*(C'\fR as a parameter to it, then got all confused as it
doesn't know about a \f(CW\*(Aq.\*(Aq\fR rule.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Clamp <richardc@unixbeard.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002 Richard Clamp.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Find::Rule
.PP
File::Find::Rule::MMagic was the first extension module, so maybe
check that out.
