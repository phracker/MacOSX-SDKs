.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Proc::ProcessTable::Process 3"
.TH Proc::ProcessTable::Process 3 "2019-06-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Proc::ProcessTable::Process \- Perl process objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& $process\->kill(9);
\& $process\->priority(19);
\& $process\->pgrp(500);
\& $uid = $process\->uid;
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a stub module to provide \s-1OO\s0 process attribute access for
Proc::ProcessTable. Proc::ProcessTable::Process objects are
constructed directly by Proc::ProcessTable; there is no constructor
method, only accessors.
.SH "METHODS"
.IX Header "METHODS"
.IP "kill" 4
.IX Item "kill"
Sends a signal to the process; just an aesthetic wrapper for perl's
kill. Takes the signal (name or number) as an argument. Returns number
of processes signalled.
.IP "priority" 4
.IX Item "priority"
Get/set accessor; if called with a numeric argument, attempts to reset
the process's priority to that number using perl's <B>setpriority
function. Returns the process priority.
.IP "pgrp" 4
.IX Item "pgrp"
Same as above for the process group.
.IP "all other methods..." 4
.IX Item "all other methods..."
are simple accessors that retrieve the process attributes for which
they are named. Currently supported are:
.Sp
.Vb 10
\&  uid         UID of process
\&  gid         GID of process
\&  euid        effective UID of process           (Solaris only)
\&  egid        effective GID of process           (Solaris only)
\&  pid         process ID
\&  ppid        parent process ID
\&  spid        sprod ID                           (IRIX only)
\&  pgrp        process group
\&  sess        session ID
\&  cpuid       CPU ID of processor running on     (IRIX only)
\&  priority    priority of process
\&  ttynum      tty number of process
\&  flags       flags of process
\&  minflt      minor page faults                  (Linux only)
\&  cminflt     child minor page faults            (Linux only)
\&  majflt      major page faults                  (Linux only)
\&  cmajflt     child major page faults            (Linux only)
\&  utime       user mode time (1/100s of seconds) (Linux only)
\&  stime       kernel mode time                   (Linux only)
\&  cutime      child utime                        (Linux only)
\&  cstime      child stime                        (Linux only)
\&  time        user + system time                 
\&  ctime       child user + system time
\&  timensec    user + system nanoseconds part     (Solaris only)
\&  ctimensec   child user + system nanoseconds    (Solaris only)
\&  qtime       cumulative cpu time                (IRIX only)
\&  size        virtual memory size (bytes)
\&  rss         resident set size (bytes)
\&  wchan       address of current system call 
\&  fname       file name
\&  start       start time (seconds since the epoch)
\&  pctcpu      percent cpu used since process started
\&  state       state of process
\&  pctmem      percent memory                     
\&  cmndline    full command line of process
\&  ttydev      path of process\*(Aqs tty
\&  clname      scheduling class name              (IRIX only)
.Ve
.Sp
See the \*(L"\s-1README\s0.osname\*(R" files in the distribution for more
up-to-date information.
.SH "AUTHOR"
.IX Header "AUTHOR"
D. Urist, durist@frii.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Proc::ProcessTable, \fBperl\fR\|(1).
