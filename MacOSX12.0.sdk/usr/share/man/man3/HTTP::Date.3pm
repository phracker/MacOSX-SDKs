.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::Date 3"
.TH HTTP::Date 3 "2019-11-19" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Date \- HTTP::Date \- date conversion routines
.SH "VERSION"
.IX Header "VERSION"
version 6.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTTP::Date;
\&
\& $string = time2str($time);    # Format as GMT ASCII time
\& $time = str2time($string);    # convert ASCII date to machine time
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions that deal the date formats used by the
\&\s-1HTTP\s0 protocol (and then some more).  Only the first two functions,
\&\fBtime2str()\fR and \fBstr2time()\fR, are exported by default.
.IP "time2str( [$time] )" 4
.IX Item "time2str( [$time] )"
The \fBtime2str()\fR function converts a machine time (seconds since epoch)
to a string.  If the function is called without an argument or with an
undefined argument, it will use the current time.
.Sp
The string returned is in the format preferred for the \s-1HTTP\s0 protocol.
This is a fixed length subset of the format defined by \s-1RFC 1123,\s0
represented in Universal Time (\s-1GMT\s0).  An example of a time stamp
in this format is:
.Sp
.Vb 1
\&   Sun, 06 Nov 1994 08:49:37 GMT
.Ve
.ie n .IP "str2time( $str [, $zone] )" 4
.el .IP "str2time( \f(CW$str\fR [, \f(CW$zone\fR] )" 4
.IX Item "str2time( $str [, $zone] )"
The \fBstr2time()\fR function converts a string to machine time.  It returns
\&\f(CW\*(C`undef\*(C'\fR if the format of \f(CW$str\fR is unrecognized, otherwise whatever the
\&\f(CW\*(C`Time::Local\*(C'\fR functions can make out of the parsed time.  Dates
before the system's epoch may not work on all operating systems.  The
time formats recognized are the same as for \fBparse_date()\fR.
.Sp
The function also takes an optional second argument that specifies the
default time zone to use when converting the date.  This parameter is
ignored if the zone is found in the date string itself.  If this
parameter is missing, and the date string format does not contain any
zone specification, then the local time zone is assumed.
.Sp
If the zone is not "\f(CW\*(C`GMT\*(C'\fR\*(L" or numerical (like \*(R"\f(CW\*(C`\-0800\*(C'\fR\*(L" or
\&\*(R"\f(CW+0100\fR"), then the \f(CW\*(C`Time::Zone\*(C'\fR module must be installed in order
to get the date recognized.
.ie n .IP "parse_date( $str )" 4
.el .IP "parse_date( \f(CW$str\fR )" 4
.IX Item "parse_date( $str )"
This function will try to parse a date string, and then return it as a
list of numerical values followed by a (possible undefined) time zone
specifier; ($year, \f(CW$month\fR, \f(CW$day\fR, \f(CW$hour\fR, \f(CW$min\fR, \f(CW$sec\fR, \f(CW$tz\fR).  The \f(CW$year\fR
will be the full 4\-digit year, and \f(CW$month\fR numbers start with 1 (for January).
.Sp
In scalar context the numbers are interpolated in a string of the
\&\*(L"YYYY-MM-DD hh:mm:ss \s-1TZ\s0\*(R"\-format and returned.
.Sp
If the date is unrecognized, then the empty list is returned (\f(CW\*(C`undef\*(C'\fR in
scalar context).
.Sp
The function is able to parse the following formats:
.Sp
.Vb 5
\& "Wed, 09 Feb 1994 22:23:32 GMT"       \-\- HTTP format
\& "Thu Feb  3 17:03:55 GMT 1994"        \-\- ctime(3) format
\& "Thu Feb  3 00:00:00 1994",           \-\- ANSI C asctime() format
\& "Tuesday, 08\-Feb\-94 14:15:29 GMT"     \-\- old rfc850 HTTP format
\& "Tuesday, 08\-Feb\-1994 14:15:29 GMT"   \-\- broken rfc850 HTTP format
\&
\& "03/Feb/1994:17:03:55 \-0700"   \-\- common logfile format
\& "09 Feb 1994 22:23:32 GMT"     \-\- HTTP format (no weekday)
\& "08\-Feb\-94 14:15:29 GMT"       \-\- rfc850 format (no weekday)
\& "08\-Feb\-1994 14:15:29 GMT"     \-\- broken rfc850 format (no weekday)
\&
\& "1994\-02\-03 14:15:29 \-0100"    \-\- ISO 8601 format
\& "1994\-02\-03 14:15:29"          \-\- zone is optional
\& "1994\-02\-03"                   \-\- only date
\& "1994\-02\-03T14:15:29"          \-\- Use T as separator
\& "19940203T141529Z"             \-\- ISO 8601 compact format
\& "19940203"                     \-\- only date
\&
\& "08\-Feb\-94"         \-\- old rfc850 HTTP format    (no weekday, no time)
\& "08\-Feb\-1994"       \-\- broken rfc850 HTTP format (no weekday, no time)
\& "09 Feb 1994"       \-\- proposed new HTTP format  (no weekday, no time)
\& "03/Feb/1994"       \-\- common logfile format     (no time, no offset)
\&
\& "Feb  3  1994"      \-\- Unix \*(Aqls \-l\*(Aq format
\& "Feb  3 17:03"      \-\- Unix \*(Aqls \-l\*(Aq format
\&
\& "11\-15\-96  03:52PM" \-\- Windows \*(Aqdir\*(Aq format
.Ve
.Sp
The parser ignores leading and trailing whitespace.  It also allow the
seconds to be missing and the month to be numerical in most formats.
.Sp
If the year is missing, then we assume that the date is the first
matching date \fIbefore\fR current month.  If the year is given with only
2 digits, then \fBparse_date()\fR will select the century that makes the
year closest to the current date.
.IP "time2iso( [$time] )" 4
.IX Item "time2iso( [$time] )"
Same as \fBtime2str()\fR, but returns a \*(L"YYYY-MM-DD hh:mm:ss\*(R"\-formatted
string representing time in the local time zone.
.IP "time2isoz( [$time] )" 4
.IX Item "time2isoz( [$time] )"
Same as \fBtime2str()\fR, but returns a \*(L"YYYY-MM-DD hh:mm:ssZ\*(R"\-formatted
string representing Universal Time.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"time\*(R" in perlfunc, Time::Zone
.SH "AUTHOR"
.IX Header "AUTHOR"
Gisle Aas <gisle@activestate.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 1995\-2019 by Gisle Aas.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
