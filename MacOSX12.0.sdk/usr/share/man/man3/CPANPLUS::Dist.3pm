.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Dist 3pm"
.TH CPANPLUS::Dist 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Dist \- base class for plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $dist = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\->new(
\&                                module  => $modobj,
\&                            );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`CPANPLUS::Dist\*(C'\fR is a base class for \f(CW\*(C`CPANPLUS::Dist::MM\*(C'\fR
and \f(CW\*(C`CPANPLUS::Dist::Build\*(C'\fR. Developers of other \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR
plugins should look at \f(CW\*(C`CPANPLUS::Dist::Base\*(C'\fR.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.IP "\fIparent()\fR" 4
.IX Item "parent()"
Returns the \f(CW\*(C`CPANPLUS::Module\*(C'\fR object that parented this object.
.IP "\fIstatus()\fR" 4
.IX Item "status()"
Returns the \f(CW\*(C`Object::Accessor\*(C'\fR object that keeps the status for
this module.
.SH "STATUS ACCESSORS"
.IX Header "STATUS ACCESSORS"
All accessors can be accessed as follows:
    \f(CW$deb\fR\->status\->\s-1ACCESSOR\s0
.IP "\fIcreated()\fR" 4
.IX Item "created()"
Boolean indicating whether the dist was created successfully.
Explicitly set to \f(CW0\fR when failed, so a value of \f(CW\*(C`undef\*(C'\fR may be
interpreted as \f(CW\*(C`not yet attempted\*(C'\fR.
.IP "\fIinstalled()\fR" 4
.IX Item "installed()"
Boolean indicating whether the dist was installed successfully.
Explicitly set to \f(CW0\fR when failed, so a value of \f(CW\*(C`undef\*(C'\fR may be
interpreted as \f(CW\*(C`not yet attempted\*(C'\fR.
.IP "\fIuninstalled()\fR" 4
.IX Item "uninstalled()"
Boolean indicating whether the dist was uninstalled successfully.
Explicitly set to \f(CW0\fR when failed, so a value of \f(CW\*(C`undef\*(C'\fR may be
interpreted as \f(CW\*(C`not yet attempted\*(C'\fR.
.IP "\fIdist()\fR" 4
.IX Item "dist()"
The location of the final distribution. This may be a file or
directory, depending on how your distribution plug in of choice
works. This will be set upon a successful create.
.ie n .SS "$dist = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\->new( module => \s-1MODOBJ \s0);"
.el .SS "\f(CW$dist\fP = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\->new( module => \s-1MODOBJ \s0);"
.IX Subsection "$dist = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE->new( module => MODOBJ );"
Create a new \f(CW\*(C`CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\*(C'\fR object based on the
provided \f(CW\*(C`MODOBJ\*(C'\fR.
.PP
*** \s-1DEPRECATED\s0 ***
The optional argument \f(CW\*(C`format\*(C'\fR is used to indicate what type of dist
you would like to create (like \f(CW\*(C`CPANPLUS::Dist::MM\*(C'\fR or
\&\f(CW\*(C`CPANPLUS::Dist::Build\*(C'\fR and so on ).
.PP
\&\f(CW\*(C`CPANPLUS::Dist\->new\*(C'\fR is exclusively meant as a method to be
inherited by \f(CW\*(C`CPANPLUS::Dist::MM|Build\*(C'\fR.
.PP
Returns a \f(CW\*(C`CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\*(C'\fR object on success
and false on failure.
.ie n .SS "@dists = CPANPLUS::Dist\->dist_types;"
.el .SS "\f(CW@dists\fP = CPANPLUS::Dist\->dist_types;"
.IX Subsection "@dists = CPANPLUS::Dist->dist_types;"
Returns a list of the CPANPLUS::Dist::* classes available
.ie n .SS "$bool = CPANPLUS::Dist\->rescan_dist_types;"
.el .SS "\f(CW$bool\fP = CPANPLUS::Dist\->rescan_dist_types;"
.IX Subsection "$bool = CPANPLUS::Dist->rescan_dist_types;"
Rescans \f(CW@INC\fR for available dist types. Useful if you've installed new
\&\f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR classes and want to make them available to the
current process.
.ie n .SS "$bool = CPANPLUS::Dist\->has_dist_type( $type )"
.el .SS "\f(CW$bool\fP = CPANPLUS::Dist\->has_dist_type( \f(CW$type\fP )"
.IX Subsection "$bool = CPANPLUS::Dist->has_dist_type( $type )"
Returns true if distribution type \f(CW$type\fR is loaded/supported.
.ie n .SS "$bool = $dist\->prereq_satisfied( modobj => $modobj, version => $version_spec )"
.el .SS "\f(CW$bool\fP = \f(CW$dist\fP\->prereq_satisfied( modobj => \f(CW$modobj\fP, version => \f(CW$version_spec\fP )"
.IX Subsection "$bool = $dist->prereq_satisfied( modobj => $modobj, version => $version_spec )"
Returns true if this prereq is satisfied.  Returns false if it's not.
Also issues an error if it seems \*(L"unsatisfiable,\*(R" i.e. if it can't be
found on \s-1CPAN\s0 or the latest \s-1CPAN\s0 version doesn't satisfy it.
.ie n .SS "$configure_requires = $dist\->find_configure_requires( [file => /path/to/META.yml] )"
.el .SS "\f(CW$configure_requires\fP = \f(CW$dist\fP\->find_configure_requires( [file => /path/to/META.yml] )"
.IX Subsection "$configure_requires = $dist->find_configure_requires( [file => /path/to/META.yml] )"
Reads the configure_requires for this distribution from the \s-1META\s0.yml or \s-1META\s0.json
file in the root directory and returns a hashref with module names
and versions required.
.ie n .SS "$bool = $dist\->_resolve_prereqs( ... )"
.el .SS "\f(CW$bool\fP = \f(CW$dist\fP\->_resolve_prereqs( ... )"
.IX Subsection "$bool = $dist->_resolve_prereqs( ... )"
Makes sure prerequisites are resolved
.PP
.Vb 2
\&    format          The dist class to use to make the prereqs
\&                    (ie. CPANPLUS::Dist::MM)
\&
\&    prereqs         Hash of the prerequisite modules and their versions
\&
\&    target          What to do with the prereqs.
\&                        create  => Just build them
\&                        install => Install them
\&                        ignore  => Ignore them
\&
\&    prereq_build    If true, always build the prereqs even if already
\&                    resolved
\&
\&    verbose         Be verbose
\&
\&    force           Force the prereq to be built, even if already resolved
.Ve
