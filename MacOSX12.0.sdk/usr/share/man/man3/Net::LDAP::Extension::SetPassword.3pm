.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Extension::SetPassword 3"
.TH Net::LDAP::Extension::SetPassword 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Extension::SetPassword \- LDAPv3 Modify Password extension object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Net::LDAP;
\& use Net::LDAP::Extension::SetPassword;
\&
\& $ldap = Net::LDAP\->new( "ldap.mydomain.eg" );
\&
\& $ldap\->bind(\*(Aqcn=Joe User,cn=People,dc=mydomain,dc=eg",
\&             password => \*(AqoldPassword\*(Aq);
\&
\& $mesg = $ldap\->set_password( oldpasswd => \*(AqoldPassword\*(Aq );
\&
\& die "error: ", $mesg\->code(), ": ", $mesg\->error()  if ($mesg\->code());
\&
\& print "changed your password to", $mesg\->gen_password() , "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::LDAP::Extension::SetPassword\*(C'\fR implements the \f(CW\*(C`Modify Password\*(C'\fR
extended LDAPv3 operation as described in \s-1RFC 3062.\s0
.PP
It implements no object by itself but extends the Net::LDAP object
by another method:
.SH "METHODS"
.IX Header "METHODS"
.IP "set_password ( \s-1OPTIONS\s0 )" 4
.IX Item "set_password ( OPTIONS )"
Set the password for a user.
.Sp
\&\s-1OPTIONS\s0 is a list of key/value pairs. The following keys are recognized:
.RS 4
.IP "user" 4
.IX Item "user"
If present, this option contains the octet string representation of the
user associated with the request.  Depending on how users are identified
in the directory this string may or may not be a \s-1DN\s0 according to \s-1RFC 4514.\s0
.Sp
If this option is not present, the request acts up upon the password
of the user currently associated with the \s-1LDAP\s0 session.
.IP "oldpasswd" 4
.IX Item "oldpasswd"
This option, if present, must contain the current password of the user
for whom this operation is performed.
.Sp
It depends on the server's implementation in which circumstances this
option is allowed to be missing.
.IP "newpasswd" 4
.IX Item "newpasswd"
If present, this option contains the desired password for the user for
whom the operation is performed.
.Sp
Depending on the server's implementation this option may be required by
the \s-1LDAP\s0 server.
.RE
.RS 4
.RE
.IP "gen_password ( )" 4
.IX Item "gen_password ( )"
Return the password generated by the server in response to the
\&\f(CW\*(C`set_password()\*(C'\fR call when applicable. The server will not generate
a new password if \f(CW\*(C`newpasswd\*(C'\fR was passed to \f(CW\*(C`set_password()\*(C'\fR.
.Sp
This method is a method of the Net::LDAP::Message response object
returned in reply to \f(CW\*(C`set_password()\*(C'\fR in case the \f(CW\*(C`set_password()\*(C'\fR
call succeeded.
.Sp
By this method the caller can query for the value of the password in
case he did not call \f(CW\*(C`set_password()\*(C'\fR with the \f(CW\*(C`newpasswd\*(C'\fR option.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::LDAP,
Net::LDAP::Extension
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>,
documentation by Peter Marschall <peter@adpm.de>.
.PP
Please report any bugs, or post any suggestions, to the perl-ldap
mailing list <perl\-ldap@perl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2004 Graham Barr. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
