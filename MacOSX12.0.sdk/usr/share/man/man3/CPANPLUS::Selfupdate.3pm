.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Selfupdate 3pm"
.TH CPANPLUS::Selfupdate 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Selfupdate \- self\-updating for CPANPLUS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $su     = $cb\->selfupdate_object;
\&
\&    @feats  = $su\->list_features;
\&    @feats  = $su\->list_enabled_features;
\&
\&    @mods   = map { $su\->modules_for_feature( $_ ) } @feats;
\&    @mods   = $su\->list_core_dependencies;
\&    @mods   = $su\->list_core_modules;
\&
\&    for ( @mods ) {
\&        print $_\->name " should be version " . $_\->version_required;
\&        print "Installed version is not uptodate!"
\&            unless $_\->is_installed_version_sufficient;
\&    }
\&
\&    $ok     = $su\->selfupdate( update => \*(Aqall\*(Aq, latest => 0 );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$self = CPANPLUS::Selfupdate\->new( $backend_object );"
.el .SS "\f(CW$self\fP = CPANPLUS::Selfupdate\->new( \f(CW$backend_object\fP );"
.IX Subsection "$self = CPANPLUS::Selfupdate->new( $backend_object );"
Sets up a new selfupdate object. Called automatically when
a new backend object is created.
.ie n .SS "@cat = $self\->list_categories"
.el .SS "\f(CW@cat\fP = \f(CW$self\fP\->list_categories"
.IX Subsection "@cat = $self->list_categories"
Returns a list of categories that the \f(CW\*(C`selfupdate\*(C'\fR method accepts.
.PP
See \f(CW\*(C`selfupdate\*(C'\fR for details.
.ie n .SS "%list = $self\->list_modules_to_update( update => ""core|dependencies|enabled_features|features|all"", [latest => \s-1BOOL\s0] )"
.el .SS "\f(CW%list\fP = \f(CW$self\fP\->list_modules_to_update( update => ``core|dependencies|enabled_features|features|all'', [latest => \s-1BOOL\s0] )"
.IX Subsection "%list = $self->list_modules_to_update( update => core|dependencies|enabled_features|features|all, [latest => BOOL] )"
List which modules \f(CW\*(C`selfupdate\*(C'\fR would upgrade. You can update either
the core (\s-1CPANPLUS\s0 itself), the core dependencies, all features you have
currently turned on, or all features available, or everything.
.PP
The \f(CW\*(C`latest\*(C'\fR option determines whether it should update to the latest
version on \s-1CPAN,\s0 or if the minimal required version for \s-1CPANPLUS\s0 is
good enough.
.PP
Returns a hash of feature names and lists of module objects to be
upgraded based on the category you provided. For example:
.PP
.Vb 1
\&    %list = $self\->list_modules_to_update( update => \*(Aqcore\*(Aq );
.Ve
.PP
Would return:
.PP
.Vb 1
\&    ( core => [ $module_object_for_cpanplus ] );
.Ve
.ie n .SS "$bool = $self\->selfupdate( update => ""core|dependencies|enabled_features|features|all"", [latest => \s-1BOOL,\s0 force => \s-1BOOL\s0] )"
.el .SS "\f(CW$bool\fP = \f(CW$self\fP\->selfupdate( update => ``core|dependencies|enabled_features|features|all'', [latest => \s-1BOOL,\s0 force => \s-1BOOL\s0] )"
.IX Subsection "$bool = $self->selfupdate( update => core|dependencies|enabled_features|features|all, [latest => BOOL, force => BOOL] )"
Selfupdate \s-1CPANPLUS.\s0 You can update either the core (\s-1CPANPLUS\s0 itself),
the core dependencies, all features you have currently turned on, or
all features available, or everything.
.PP
The \f(CW\*(C`latest\*(C'\fR option determines whether it should update to the latest
version on \s-1CPAN,\s0 or if the minimal required version for \s-1CPANPLUS\s0 is
good enough.
.PP
Returns true on success, false on error.
.ie n .SS "@features = $self\->list_features"
.el .SS "\f(CW@features\fP = \f(CW$self\fP\->list_features"
.IX Subsection "@features = $self->list_features"
Returns a list of features that are supported by \s-1CPANPLUS.\s0
.ie n .SS "@features = $self\->list_enabled_features"
.el .SS "\f(CW@features\fP = \f(CW$self\fP\->list_enabled_features"
.IX Subsection "@features = $self->list_enabled_features"
Returns a list of features that are enabled in your current
\&\s-1CPANPLUS\s0 installation.
.ie n .SS "@mods = $self\->modules_for_feature( \s-1FEATURE\s0 [,AS_HASH] )"
.el .SS "\f(CW@mods\fP = \f(CW$self\fP\->modules_for_feature( \s-1FEATURE\s0 [,AS_HASH] )"
.IX Subsection "@mods = $self->modules_for_feature( FEATURE [,AS_HASH] )"
Returns a list of \f(CW\*(C`CPANPLUS::Selfupdate::Module\*(C'\fR objects which
represent the modules required to support this feature.
.PP
For a list of features, call the \f(CW\*(C`list_features\*(C'\fR method.
.PP
If the \f(CW\*(C`AS_HASH\*(C'\fR argument is provided, no module objects are
returned, but a hashref where the keys are names of the modules,
and values are their minimum versions.
.ie n .SS "@mods = $self\->list_core_dependencies( [\s-1AS_HASH\s0] )"
.el .SS "\f(CW@mods\fP = \f(CW$self\fP\->list_core_dependencies( [\s-1AS_HASH\s0] )"
.IX Subsection "@mods = $self->list_core_dependencies( [AS_HASH] )"
Returns a list of \f(CW\*(C`CPANPLUS::Selfupdate::Module\*(C'\fR objects which
represent the modules that comprise the core dependencies of \s-1CPANPLUS.\s0
.PP
If the \f(CW\*(C`AS_HASH\*(C'\fR argument is provided, no module objects are
returned, but a hashref where the keys are names of the modules,
and values are their minimum versions.
.ie n .SS "@mods = $self\->list_core_modules( [\s-1AS_HASH\s0] )"
.el .SS "\f(CW@mods\fP = \f(CW$self\fP\->list_core_modules( [\s-1AS_HASH\s0] )"
.IX Subsection "@mods = $self->list_core_modules( [AS_HASH] )"
Returns a list of \f(CW\*(C`CPANPLUS::Selfupdate::Module\*(C'\fR objects which
represent the modules that comprise the core of \s-1CPANPLUS.\s0
.PP
If the \f(CW\*(C`AS_HASH\*(C'\fR argument is provided, no module objects are
returned, but a hashref where the keys are names of the modules,
and values are their minimum versions.
.SH "CPANPLUS::Selfupdate::Module"
.IX Header "CPANPLUS::Selfupdate::Module"
\&\f(CW\*(C`CPANPLUS::Selfupdate::Module\*(C'\fR extends \f(CW\*(C`CPANPLUS::Module\*(C'\fR objects
by providing accessors to aid in selfupdating \s-1CPANPLUS.\s0
.PP
These objects are returned by all methods of \f(CW\*(C`CPANPLUS::Selfupdate\*(C'\fR
that return module objects.
.ie n .SS "$version = $mod\->version_required"
.el .SS "\f(CW$version\fP = \f(CW$mod\fP\->version_required"
.IX Subsection "$version = $mod->version_required"
Returns the version of this module required for \s-1CPANPLUS.\s0
.ie n .SS "$bool = $mod\->is_installed_version_sufficient"
.el .SS "\f(CW$bool\fP = \f(CW$mod\fP\->is_installed_version_sufficient"
.IX Subsection "$bool = $mod->is_installed_version_sufficient"
Returns true if the installed version of this module is sufficient
for \s-1CPANPLUS,\s0 or false if it is not.
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-cpanplus@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1CPAN++\s0 interface (of which this module is a part of) is copyright (c)
2001 \- 2007, Jos Boumans <kane@cpan.org>. All rights reserved.
.PP
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
