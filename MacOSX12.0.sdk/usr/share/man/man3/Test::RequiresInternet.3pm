.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::RequiresInternet 3"
.TH Test::RequiresInternet 3 "2015-05-26" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::RequiresInternet \- Easily test network connectivity
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Test::More;
\&  use Test::RequiresInternet (\*(Aqwww.example.com\*(Aq => 80, \*(Aqfoobar.io\*(Aq => 25);
\&
\&  # if you reach here, sockets successfully connected to hosts/ports above
\&  plan tests => 1;
\&
\&  ok(do_that_internet_thing());
.Ve
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This module is intended to easily test network connectivity before functional 
tests begin to non-local Internet resources.  It does not require any modules
beyond those supplied in core Perl.
.PP
If you do not specify a host/port pair, then the module defaults to using
\&\f(CW\*(C`www.google.com\*(C'\fR on port \f(CW80\fR.
.PP
You may optionally specify the port by its name, as in \f(CW\*(C`http\*(C'\fR or \f(CW\*(C`ldap\*(C'\fR.
If you do this, the test module will attempt to look up the port number
using \f(CW\*(C`getservbyname\*(C'\fR.
.PP
If you do specify a host and port, they must be specified in \fBpairs\fR. It is a
fatal error to omit one or the other.
.PP
If the environment variable \f(CW\*(C`NO_NETWORK_TESTING\*(C'\fR is set, then the tests
will be skipped without attempting any socket connections.
.PP
If the sockets cannot connect to the specified hosts and ports, the exception
is caught, reported and the tests skipped.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Allen <mrallen1@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Mark Allen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
