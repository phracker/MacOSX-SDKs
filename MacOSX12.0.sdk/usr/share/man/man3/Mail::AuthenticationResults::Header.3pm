.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::AuthenticationResults::Header 3"
.TH Mail::AuthenticationResults::Header 3 "2020-08-24" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::AuthenticationResults::Header \- Class modelling the Entire Authentication Results Header set
.SH "VERSION"
.IX Header "VERSION"
version 1.20200824.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents the main Authentication Results set
.PP
Please see Mail::AuthenticationResults::Header::Base
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "set_indent_by( $value )"
.el .SS "set_indent_by( \f(CW$value\fP )"
.IX Subsection "set_indent_by( $value )"
Number of spaces to indent by for \fBas_string()\fR
.SS "\fBindent_by()\fP"
.IX Subsection "indent_by()"
Return the number of spaces for \fBas_string()\fR to indent by
.ie n .SS "set_indent_on( $class )"
.el .SS "set_indent_on( \f(CW$class\fP )"
.IX Subsection "set_indent_on( $class )"
The given class will be indented
.ie n .SS "clear_indent_on( $class )"
.el .SS "clear_indent_on( \f(CW$class\fP )"
.IX Subsection "clear_indent_on( $class )"
The given class will not be indented
.ie n .SS "indent_on( $class )"
.el .SS "indent_on( \f(CW$class\fP )"
.IX Subsection "indent_on( $class )"
Should the given class be indented
.ie n .SS "set_eol( $eol )"
.el .SS "set_eol( \f(CW$eol\fP )"
.IX Subsection "set_eol( $eol )"
Set the eol style for as_string
.SS "\fBeol()\fP"
.IX Subsection "eol()"
Return the current eol style
.SS "\fBfold_at()\fP"
.IX Subsection "fold_at()"
Return the current fold at value if set
.PP
Strings will be folded if longer than this value where possible.
.ie n .SS "set_fold_at( $fold_at )"
.el .SS "set_fold_at( \f(CW$fold_at\fP )"
.IX Subsection "set_fold_at( $fold_at )"
set the current fold_at value for as_string
.PP
Strings will be folded if longer than this value where possible.
.SS "\fBforce_fold_at()\fP"
.IX Subsection "force_fold_at()"
Return the current force fold at value if set
.PP
Strings \s-1WILL\s0 be folded if longer than this value.
.ie n .SS "set_force_fold_at( $fold_at )"
.el .SS "set_force_fold_at( \f(CW$fold_at\fP )"
.IX Subsection "set_force_fold_at( $fold_at )"
set the current force_fold_at value for as_string
.PP
Strings \s-1WILL\s0 be folded if longer than this value.
.ie n .SS "set_indent_style( $style )"
.el .SS "set_indent_style( \f(CW$style\fP )"
.IX Subsection "set_indent_style( $style )"
Set the as_string indenting style
.PP
Options are none, entry, subentry, full
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
