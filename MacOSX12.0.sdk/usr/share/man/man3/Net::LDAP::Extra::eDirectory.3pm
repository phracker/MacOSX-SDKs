.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::LDAP::Extra::eDirectory 3"
.TH Net::LDAP::Extra::eDirectory 3 "2015-04-08" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::LDAP::Extra::eDirectory \-\- extensions for Novell eDirectory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::LDAP::Extra qw(eDirectory);
\&
\&  $ldap = Net::LDAP\->new( ... );
\&
\&  ...
\&
\&  if ($ldap\->is_eDirectory)
\&    my $mesg $ldap\->list_replicas($server_dn);
\&
\&    print "Replicas on $server_dn\en* " . join("\en* ", $mesg\->replicas) . "\en"
\&      if (!$mesg\->code);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::LDAP::Extra::eDirectory provides functions / \s-1LDAP\s0 extensions
specific to Novell eDirectory.
.PP
To do so, it provides the following methods:
.SH "METHODS"
.IX Header "METHODS"
.IP "is_eDirectory ( )" 4
.IX Item "is_eDirectory ( )"
Tell if the \s-1LDAP\s0 server queried is Novell eDirectory server.
.Sp
As the check is done by querying the root \s-1DSE\s0 of the directory,
it works without being bound to the directory.
.Sp
In contrast to other Net::LDAP methods this method returns
\&\s-1TRUE / FALSE\s0 respectively undef on error.
.IP "list_replicas ( \s-1SERVER_DN, OPTIONS\s0 )" 4
.IX Item "list_replicas ( SERVER_DN, OPTIONS )"
Query the replicas on the given server \fI\s-1SERVER_DN\s0\fR.
.Sp
On success, the resulting Net::LDAP::Message object supports the method
\&\f(CW\*(C`replicas\*(C'\fR that returns the list of replicas on \fI\s-1SERVER_DN\s0\fR.
.IP "get_replica_info ( \s-1SERVER_DN, REPLICA_DN, OPTIONS\s0 )" 4
.IX Item "get_replica_info ( SERVER_DN, REPLICA_DN, OPTIONS )"
Query information of \fI\s-1REPLICA_DN\s0\fR on \fI\s-1SERVER_DN\s0\fR.
.Sp
On success, the resulting Net::LDAP::Message object supports the method
\&\f(CW\*(C`replica_info\*(C'\fR that returns a hash containing information on \fI\s-1REPLICA_DN\s0\fR.
.IP "trigger_backlinker ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_backlinker ( OPTIONS )"
Trigger the BackLinker process, which resolves external references
to ensure they refer to real entries.
.IP "trigger_janitor ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_janitor ( OPTIONS )"
Trigger the Janitor process, which checks connectivity to all servers in database.
.IP "trigger_limber ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_limber ( OPTIONS )"
Trigger the Limber process, which verifies the server name,
internal ipx address and tree connectivity of all replicas.
.IP "trigger_skulker ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_skulker ( OPTIONS )"
Trigger the Skulker process, which checks the synchronization status
of every server in the replica ring.
.IP "trigger_schemasync ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_schemasync ( OPTIONS )"
Trigger SchemaSync.
.IP "trigger_partitionpurge ( \s-1OPTIONS\s0 )" 4
.IX Item "trigger_partitionpurge ( OPTIONS )"
Trigger PartitionPurge.
.IP "refresh_ldap_server ( \s-1OPTIONS\s0 )" 4
.IX Item "refresh_ldap_server ( OPTIONS )"
Trigger refreshing the \s-1NLDAP\s0 service.
.SH "AUTHOR"
.IX Header "AUTHOR"
Peter Marschall <peter@adpm.de>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 Peter Marschall. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
