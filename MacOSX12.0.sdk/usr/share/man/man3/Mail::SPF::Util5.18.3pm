.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SPF::Util 3"
.TH Mail::SPF::Util 3 "2021-08-27" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SPF::Util \- Mail::SPF utility class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mail::SPF::Util;
\&
\&    $hostname = Mail::SPF::Util\->hostname;
\&
\&    $ipv6_address_v4mapped =
\&        Mail::SPF::Util\->ipv4_address_to_ipv6($ipv4_address);
\&
\&    $ipv4_address =
\&        Mail::SPF::Util\->ipv6_address_to_ipv4($ipv6_address_v4mapped);
\&
\&    $is_v4mapped =
\&        Mail::SPF::Util\->ipv6_address_is_ipv4_mapped($ipv6_address);
\&
\&    $ip_address_string  = Mail::SPF::Util\->ip_address_to_string($ip_address);
\&    $reverse_name       = Mail::SPF::Util\->ip_address_reverse($ip_address);
\&
\&    $validated_domain = Mail::SPF::Util\->valid_domain_for_ip_address(
\&        $spf_server, $request,
\&        $ip_address, $domain,
\&        $find_best_match,       # defaults to false
\&        $accept_any_domain      # defaults to false
\&    );
\&
\&    $sanitized_string = Mail::SPF::Util\->sanitize_string($string);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMail::SPF::Util\fR is Mail::SPF's utility class.
.SS "Class methods"
.IX Subsection "Class methods"
The following class methods are provided:
.IP "\fBhostname\fR: returns \fIstring\fR" 4
.IX Item "hostname: returns string"
Returns the fully qualified domain name (\s-1FQDN\s0) of the local host.
.IP "\fBipv4_address_to_ipv6($ipv4_address)\fR: returns \fINetAddr::IP\fR; throws \fIMail::SPF::EInvalidOptionValue\fR" 4
.IX Item "ipv4_address_to_ipv6($ipv4_address): returns NetAddr::IP; throws Mail::SPF::EInvalidOptionValue"
Converts the specified \fINetAddr::IP\fR IPv4 address into an IPv4\-mapped IPv6
address.  Throws a \fIMail::SPF::EInvalidOptionValue\fR exception if the specified
\&\s-1IP\s0 address is not an IPv4 address.
.IP "\fBipv6_address_to_ipv4($ipv6_address)\fR: returns \fINetAddr::IP\fR; throws \fIMail::SPF::EInvalidOptionValue\fR" 4
.IX Item "ipv6_address_to_ipv4($ipv6_address): returns NetAddr::IP; throws Mail::SPF::EInvalidOptionValue"
Converts the specified \fINetAddr::IP\fR IPv4\-mapped IPv6 address into a proper
IPv4 address.  Throws a \fIMail::SPF::EInvalidOptionValue\fR exception if the
specified \s-1IP\s0 address is not an IPv4\-mapped IPv6 address.
.IP "\fBipv6_address_is_ipv4_mapped($ipv6_address)\fR: returns \fIboolean\fR" 4
.IX Item "ipv6_address_is_ipv4_mapped($ipv6_address): returns boolean"
Returns \fBtrue\fR if the specified \fINetAddr::IP\fR IPv6 address is an IPv4\-mapped
address, \fBfalse\fR otherwise.
.IP "\fBip_address_to_string($ip_address)\fR: returns \fIstring\fR; throws \fIMail::SPF::EInvalidOptionValue\fR" 4
.IX Item "ip_address_to_string($ip_address): returns string; throws Mail::SPF::EInvalidOptionValue"
Returns the given \fINetAddr::IP\fR IPv4 or IPv6 address compactly formatted as a
\&\fIstring\fR.  For IPv4 addresses, this is equivalent to calling  NetAddr::IP's
\&\f(CW\*(C`addr\*(C'\fR  method.  For IPv6 addresses, this is equivalent to
calling  NetAddr::IP's \f(CW\*(C`short\*(C'\fR  method.  Throws a
\&\fIMail::SPF::EInvalidOptionValue\fR exception if the specified object is not a
\&\fINetAddr::IP\fR IPv4 or IPv6 address object.
.IP "\fBip_address_reverse($ip_address)\fR: returns \fIstring\fR; throws \fIMail::SPF::EInvalidOptionValue\fR" 4
.IX Item "ip_address_reverse($ip_address): returns string; throws Mail::SPF::EInvalidOptionValue"
Returns the \f(CW\*(C`in\-addr.arpa.\*(C'\fR/\f(CW\*(C`ip6.arpa.\*(C'\fR reverse notation of the given
\&\fINetAddr::IP\fR IPv4 or IPv6 address.  Throws a \fIMail::SPF::EInvalidOptionValue\fR
exception if the specified object is not a \fINetAddr::IP\fR IPv4 or IPv6 address
object.
.ie n .IP "\fBvalid_domain_for_ip_address($server, \fB$request\fB, \f(BI$ip_address\fB, \f(CB$domain\fB, \f(CB$find_best_match\fB = false, \f(CB$accept_any_domain\fB = false)\fR: returns \fIstring\fR or \fBundef\fR" 4
.el .IP "\fBvalid_domain_for_ip_address($server, \f(CB$request\fB, \f(CB$ip_address\fB, \f(CB$domain\fB, \f(CB$find_best_match\fB = false, \f(CB$accept_any_domain\fB = false)\fR: returns \fIstring\fR or \fBundef\fR" 4
.IX Item "valid_domain_for_ip_address($server, $request, $ip_address, $domain, $find_best_match = false, $accept_any_domain = false): returns string or undef"
Finds a valid domain name for the given \fINetAddr::IP\fR \s-1IP\s0 address that matches
the given domain or a sub-domain thereof.  A domain name is valid for the given
\&\s-1IP\s0 address if the \s-1IP\s0 address reverse-maps to that domain name in \s-1DNS,\s0 and the
domain name in turn forward-maps to the \s-1IP\s0 address.  Uses the given
\&\fIMail::SPF::Server\fR and \fIMail::SPF::Request\fR objects to perform \s-1DNS\s0 look-ups.
Returns the validated domain name.
.Sp
If \f(CW$find_best_match\fR is \fBtrue\fR, the one domain name is selected that best
matches the given domain name, preferring direct matches over sub-domain
matches.  Defaults to \fBfalse\fR.
.Sp
If \f(CW$accept_any_domain\fR is \fBtrue\fR, \fIany\fR domain names are considered
acceptable, even if they differ completely from the given domain name (which
is then effectively unused unless a best match is requested).  Defaults to
\&\fBfalse\fR.
.IP "\fBsanitize_string($string)\fR: returns \fIstring\fR or \fBundef\fR" 4
.IX Item "sanitize_string($string): returns string or undef"
Replaces all non-printable or non-ascii characters in a string with their
hex-escaped representation (e.g., \f(CW\*(C`\ex00\*(C'\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::SPF
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Mail::SPF.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>, Shevek <cpan@anarres.org>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 157:" 4
.IX Item "Around line 157:"
L<> starts or ends with whitespace
.Sp
L<> starts or ends with whitespace
