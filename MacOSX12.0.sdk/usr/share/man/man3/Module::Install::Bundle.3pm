.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::Bundle 3"
.TH Module::Install::Bundle 3 "2017-04-04" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Install::Bundle \- Bundle distributions along with your distribution
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Have your Makefile.PL read as follows:
.PP
.Vb 1
\&  use inc::Module::Install;
\&  
\&  name      \*(AqFoo\-Bar\*(Aq;
\&  all_from  \*(Aqlib/Foo/Bar.pm\*(Aq;
\&  requires  \*(AqBaz\*(Aq => \*(Aq1.60\*(Aq;
\&  
\&  # one of either:
\&  bundle    \*(AqBaz\*(Aq => \*(Aq1.60\*(Aq;
\&  # OR:
\&  auto_bundle;
\&  
\&  WriteAll;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Module::Install::Bundle allows you to bundle a \s-1CPAN\s0 distribution within your
distribution. When your end-users install your distribution, the bundled
distribution will be installed along with yours, unless a newer version of
the bundled distribution already exists on their local filesystem.
.PP
While bundling will increase the size of your distribution, it has several
benefits:
.PP
.Vb 3
\&  Allows installation of bundled distributions when CPAN is unavailable
\&  Allows installation of bundled distributions when networking is unavailable
\&  Allows everything your distribution needs to be packaged in one place
.Ve
.PP
Bundling differs from auto-installation in that when it comes time to
install, a bundled distribution will be installed based on the distribution
bundled with your distribution, whereas with auto-installation the distribution
to be installed will be acquired from \s-1CPAN\s0 and then installed.
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
\&\fBauto_bundle()\fR
.Sp
Takes no arguments, will bundle every distribution specified by a \f(CW\*(C`requires()\*(C'\fR.
When you, as a module author, do a \f(CW\*(C`perl Makefile.PL\*(C'\fR the latest versions of
the distributions to be bundled will be acquired from \s-1CPAN\s0 and placed in
\&\fIinc/BUNDLES/\fR.
.IP "\(bu" 4
bundle($name, \f(CW$version\fR)
.Sp
Takes a list of key/value pairs specifying a distribution name and version
number. When you, as a module author, do a perl Makefile.PL the distributions
that you specified with \f(CW\*(C`bundle()\*(C'\fR will be acquired from \s-1CPAN\s0 and placed in
\&\fIinc/BUNDLES/\fR.
.IP "\(bu" 4
bundle_deps($name, \f(CW$version\fR)
.Sp
Same as \f(CW\*(C`bundle\*(C'\fR, except that all dependencies of the bundled modules are
also detected and bundled.  To use this function, you need to declare the
minimum supported perl version first, like this:
.Sp
.Vb 1
\&    perl_version( \*(Aq5.005\*(Aq );
.Ve
.IP "\(bu" 4
auto_bundle_deps
.Sp
Same as \f(CW\*(C`auto_bundle\*(C'\fR, except that all dependencies of the bundled
modules are also detected and bundled. This function has the same constraints as bundle_deps.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to (patches welcome):
.PP
.Vb 1
\&    http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Module\-Install
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <autrijus@autrijus.org>
.PP
Documentation by Adam Foxson <afoxson@pobox.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003, 2004, 2005 by Audrey Tang <autrijus@autrijus.org>.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
