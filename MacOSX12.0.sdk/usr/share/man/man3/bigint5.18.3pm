.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "bigint 3pm"
.TH bigint 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bigint \- Transparent BigInteger support for Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use bigint;
\&
\&  $x = 2 + 4.5,"\en";                    # BigInt 6
\&  print 2 ** 512,"\en";                  # really is what you think it is
\&  print inf + 42,"\en";                  # inf
\&  print NaN * 7,"\en";                   # NaN
\&  print hex("0x1234567890123490"),"\en"; # Perl v5.10.0 or later
\&
\&  {
\&    no bigint;
\&    print 2 ** 256,"\en";                # a normal Perl scalar now
\&  }
\&
\&  # Import into current package:
\&  use bigint qw/hex oct/;
\&  print hex("0x1234567890123490"),"\en";
\&  print oct("01234567890123490"),"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All operators (including basic math operations) except the range operator \f(CW\*(C`..\*(C'\fR
are overloaded. Integer constants are created as proper BigInts.
.PP
Floating point constants are truncated to integer. All parts and results of
expressions are also truncated.
.PP
Unlike integer, this pragma creates integer constants that are only
limited in their size by the available memory and \s-1CPU\s0 time.
.SS "use integer vs. use bigint"
.IX Subsection "use integer vs. use bigint"
There is one small difference between \f(CW\*(C`use integer\*(C'\fR and \f(CW\*(C`use bigint\*(C'\fR: the
former will not affect assignments to variables and the return value of
some functions. \f(CW\*(C`bigint\*(C'\fR truncates these results to integer too:
.PP
.Vb 8
\&        # perl \-Minteger \-wle \*(Aqprint 3.2\*(Aq
\&        3.2
\&        # perl \-Minteger \-wle \*(Aqprint 3.2 + 0\*(Aq
\&        3
\&        # perl \-Mbigint \-wle \*(Aqprint 3.2\*(Aq
\&        3
\&        # perl \-Mbigint \-wle \*(Aqprint 3.2 + 0\*(Aq
\&        3
\&
\&        # perl \-Mbigint \-wle \*(Aqprint exp(1) + 0\*(Aq
\&        2
\&        # perl \-Mbigint \-wle \*(Aqprint exp(1)\*(Aq
\&        2
\&        # perl \-Minteger \-wle \*(Aqprint exp(1)\*(Aq
\&        2.71828182845905
\&        # perl \-Minteger \-wle \*(Aqprint exp(1) + 0\*(Aq
\&        2
.Ve
.PP
In practice this makes seldom a difference as \fBparts and results\fR of
expressions will be truncated anyway, but this can, for instance, affect the
return value of subroutines:
.PP
.Vb 2
\&    sub three_integer { use integer; return 3.2; } 
\&    sub three_bigint { use bigint; return 3.2; }
\&
\&    print three_integer(), " ", three_bigint(),"\en";    # prints "3.2 3"
.Ve
.SS "Options"
.IX Subsection "Options"
bigint recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:
.IP "a or accuracy" 2
.IX Item "a or accuracy"
This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's \fIbround()\fR function for details.
.Sp
.Vb 1
\&        perl \-Mbigint=a,2 \-le \*(Aqprint 12345+1\*(Aq
.Ve
.Sp
Note that setting precision and accuracy at the same time is not possible.
.IP "p or precision" 2
.IX Item "p or precision"
This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, and
are <B>ignored</B> since all operations happen in integer space.
A positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer and are ignore like negative values.
.Sp
See Math::BigInt's \fIbfround()\fR function for details.
.Sp
.Vb 1
\&        perl \-Mbignum=p,5 \-le \*(Aqprint 123456789+123\*(Aq
.Ve
.Sp
Note that setting precision and accuracy at the same time is not possible.
.IP "t or trace" 2
.IX Item "t or trace"
This enables a trace mode and is primarily for debugging bigint or
Math::BigInt.
.IP "hex" 2
.IX Item "hex"
Override the built-in \fIhex()\fR method with a version that can handle big
integers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as \fIhex()\fR is lexically
overridden in the current scope whenever the bigint pragma is active.
.IP "oct" 2
.IX Item "oct"
Override the built-in \fIoct()\fR method with a version that can handle big
integers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as \fIoct()\fR is lexically
overridden in the current scope whenever the bigint pragma is active.
.IP "l, lib, try or only" 2
.IX Item "l, lib, try or only"
Load a different math lib, see \*(L"Math Library\*(R".
.Sp
.Vb 3
\&        perl \-Mbigint=lib,GMP \-e \*(Aqprint 2 ** 512\*(Aq
\&        perl \-Mbigint=try,GMP \-e \*(Aqprint 2 ** 512\*(Aq
\&        perl \-Mbigint=only,GMP \-e \*(Aqprint 2 ** 512\*(Aq
.Ve
.Sp
Currently there is no way to specify more than one library on the command
line. This means the following does not work:
.Sp
.Vb 1
\&        perl \-Mbignum=l,GMP,Pari \-e \*(Aqprint 2 ** 512\*(Aq
.Ve
.Sp
This will be hopefully fixed soon ;)
.IP "v or version" 2
.IX Item "v or version"
This prints out the name and version of all modules used and then exits.
.Sp
.Vb 1
\&        perl \-Mbigint=v
.Ve
.SS "Math Library"
.IX Subsection "Math Library"
Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:
.PP
.Vb 1
\&        use bigint lib => \*(AqCalc\*(Aq;
.Ve
.PP
You can change this by using:
.PP
.Vb 1
\&        use bignum lib => \*(AqGMP\*(Aq;
.Ve
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use bigint lib => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
Using \f(CW\*(C`lib\*(C'\fR warns if none of the specified libraries can be found and
Math::BigInt did fall back to one of the default libraries.
To suppress this warning, use \f(CW\*(C`try\*(C'\fR instead:
.PP
.Vb 1
\&        use bignum try => \*(AqGMP\*(Aq;
.Ve
.PP
If you want the code to die instead of falling back, use \f(CW\*(C`only\*(C'\fR instead:
.PP
.Vb 1
\&        use bignum only => \*(AqGMP\*(Aq;
.Ve
.PP
Please see respective module documentation for further details.
.SS "Internal Format"
.IX Subsection "Internal Format"
The numbers are stored as objects, and their internals might change at anytime,
especially between math operations. The objects also might belong to different
classes, like Math::BigInt, or Math::BigInt::Lite. Mixing them together, even
with normal scalars is not extraordinary, but normal and expected.
.PP
You should not depend on the internal format, all accesses must go through
accessor methods. E.g. looking at \f(CW$x\fR\->{sign} is not a good idea since there
is no guaranty that the object in question has such a hash key, nor is a hash
underneath at all.
.SS "Sign"
.IX Subsection "Sign"
The sign is either '+', '\-', 'NaN', '+inf' or '\-inf'.
You can access it with the \fIsign()\fR method.
.PP
A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '\-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
\&'\-inf' when dividing any negative number by 0.
.SS "Method calls"
.IX Subsection "Method calls"
Since all numbers are now objects, you can use all functions that are part of
the BigInt \s-1API.\s0 You can only use the \fIbxxx()\fR notation, and not the \fIfxxx()\fR
notation, though.
.PP
But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        $x = $y = 7;
.Ve
.PP
Using the copy or the original with overloaded math is okay, e.g. the
following work:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x + 1, " ", $y,"\en";     # prints 10 9
.Ve
.PP
but calling any method that modifies the number directly will result in
\&\fBboth\fR the original and the copy being destroyed:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x\->badd(1), " ", $y,"\en";        # prints 10 10
\&
\&        $x = 9; $y = $x;
\&        print $x\->binc(1), " ", $y,"\en";        # prints 10 10
\&
\&        $x = 9; $y = $x;
\&        print $x\->bmul(2), " ", $y,"\en";        # prints 18 18
.Ve
.PP
Using methods that do not modify, but testthe contents works:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        $z = 9 if $x\->is_zero();                # works fine
.Ve
.PP
See the documentation about the copy constructor and \f(CW\*(C`=\*(C'\fR in overload, as
well as the documentation in BigInt for further details.
.SS "Methods"
.IX Subsection "Methods"
.IP "\fIinf()\fR" 2
.IX Item "inf()"
A shortcut to return Math::BigInt\->\fIbinf()\fR. Useful because Perl does not always
handle bareword \f(CW\*(C`inf\*(C'\fR properly.
.IP "\fINaN()\fR" 2
.IX Item "NaN()"
A shortcut to return Math::BigInt\->\fIbnan()\fR. Useful because Perl does not always
handle bareword \f(CW\*(C`NaN\*(C'\fR properly.
.IP "e" 2
.IX Item "e"
.Vb 1
\&        # perl \-Mbigint=e \-wle \*(Aqprint e\*(Aq
.Ve
.Sp
Returns Euler's number \f(CW\*(C`e\*(C'\fR, aka \fIexp\fR\|(1). Note that under bigint, this is
truncated to an integer, and hence simple '2'.
.IP "\s-1PI\s0" 2
.IX Item "PI"
.Vb 1
\&        # perl \-Mbigint=PI \-wle \*(Aqprint PI\*(Aq
.Ve
.Sp
Returns \s-1PI.\s0 Note that under bigint, this is truncated to an integer, and hence
simple '3'.
.IP "\fIbexp()\fR" 2
.IX Item "bexp()"
.Vb 1
\&        bexp($power,$accuracy);
.Ve
.Sp
Returns Euler's number \f(CW\*(C`e\*(C'\fR raised to the appropriate power, to
the wanted accuracy.
.Sp
Note that under bigint, the result is truncated to an integer.
.Sp
Example:
.Sp
.Vb 1
\&        # perl \-Mbigint=bexp \-wle \*(Aqprint bexp(1,80)\*(Aq
.Ve
.IP "\fIbpi()\fR" 2
.IX Item "bpi()"
.Vb 1
\&        bpi($accuracy);
.Ve
.Sp
Returns \s-1PI\s0 to the wanted accuracy. Note that under bigint, this is truncated
to an integer, and hence simple '3'.
.Sp
Example:
.Sp
.Vb 1
\&        # perl \-Mbigint=bpi \-wle \*(Aqprint bpi(80)\*(Aq
.Ve
.IP "\fIupgrade()\fR" 2
.IX Item "upgrade()"
Return the class that numbers are upgraded to, is in fact returning
\&\f(CW$Math::BigInt::upgrade\fR.
.IP "\fIin_effect()\fR" 2
.IX Item "in_effect()"
.Vb 1
\&        use bigint;
\&
\&        print "in effect\en" if bigint::in_effect;       # true
\&        {
\&          no bigint;
\&          print "in effect\en" if bigint::in_effect;     # false
\&        }
.Ve
.Sp
Returns true or false if \f(CW\*(C`bigint\*(C'\fR is in effect in the current scope.
.Sp
This method only works on Perl v5.9.4 or later.
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "ranges" 2
.IX Item "ranges"
Perl does not allow overloading of ranges, so you can neither safely use
ranges with bigint endpoints, nor is the iterator variable a bigint.
.Sp
.Vb 7
\&        use 5.010;
\&        for my $i (12..13) {
\&          for my $j (20..21) {
\&            say $i ** $j;  # produces a floating\-point number,
\&                           # not a big integer
\&          }
\&        }
.Ve
.IP "\fIin_effect()\fR" 2
.IX Item "in_effect()"
This method only works on Perl v5.9.4 or later.
.IP "\fIhex()\fR/\fIoct()\fR" 2
.IX Item "hex()/oct()"
\&\f(CW\*(C`bigint\*(C'\fR overrides these routines with versions that can also handle
big integer values. Under Perl prior to version v5.9.4, however, this
will not happen unless you specifically ask for it with the two
import tags \*(L"hex\*(R" and \*(L"oct\*(R" \- and then it will be global and cannot be
disabled inside a scope with \*(L"no bigint\*(R":
.Sp
.Vb 1
\&        use bigint qw/hex oct/;
\&
\&        print hex("0x1234567890123456");
\&        {
\&                no bigint;
\&                print hex("0x1234567890123456");
\&        }
.Ve
.Sp
The second call to \fIhex()\fR will warn about a non-portable constant.
.Sp
Compare this to:
.Sp
.Vb 1
\&        use bigint;
\&
\&        # will warn only under Perl older than v5.9.4
\&        print hex("0x1234567890123456");
.Ve
.SH "MODULES USED"
.IX Header "MODULES USED"
\&\f(CW\*(C`bigint\*(C'\fR is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.
.PP
The following modules are currently used by bigint:
.PP
.Vb 2
\&        Math::BigInt::Lite      (for speed, and only if it is loadable)
\&        Math::BigInt
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Some cool command line examples to impress the Python crowd ;) You might want
to compare them to the results under \-Mbignum or \-Mbigrat:
.PP
.Vb 9
\&        perl \-Mbigint \-le \*(Aqprint sqrt(33)\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint 2*255\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint 4.5+2*255\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint 3/7 + 5/7 + 8/3\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint 123\->is_odd()\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint log(2)\*(Aq
\&        perl \-Mbigint \-le \*(Aqprint 2 ** 0.5\*(Aq
\&        perl \-Mbigint=a,65 \-le \*(Aqprint 2 ** 0.2\*(Aq
\&        perl \-Mbignum=a,65,l,GMP \-le \*(Aqprint 7 ** 7777\*(Aq
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Especially bigrat as in \f(CW\*(C`perl \-Mbigrat \-le \*(Aqprint 1/3+1/4\*(Aq\*(C'\fR and
bignum as in \f(CW\*(C`perl \-Mbignum \-le \*(Aqprint sqrt(2)\*(Aq\*(C'\fR.
.PP
Math::BigInt, Math::BigRat and Math::Big as well
as Math::BigInt::Pari and  Math::BigInt::GMP.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> in early 2002 \- 2007.
