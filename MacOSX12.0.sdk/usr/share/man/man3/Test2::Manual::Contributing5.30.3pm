.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Manual::Contributing 3"
.TH Test2::Manual::Contributing 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Manual::Contributing \- How to contribute to the Test2 project.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a short manual page dedicated to helping people who wish to contribute
to the Test2 project.
.SH "WAYS TO HELP"
.IX Header "WAYS TO HELP"
.SS "\s-1REPORT BUGS\s0"
.IX Subsection "REPORT BUGS"
The easiest way to help is to report bugs when you find them. Bugs are a fact
of life when writing or using software. If you use Test2 long enough you are
likely to find a bug. When you find such a bug it would help us out if you
would submit a ticket.
.PP
\fI\s-1BUG TRACKERS\s0\fR
.IX Subsection "BUG TRACKERS"
.PP
Always try to find the preferred bug tracker for the module that has the bug.
Here are the big 3 for the main Test2 project:
.IP "Test2/Test\-Builder/Test\-More" 4
.IX Item "Test2/Test-Builder/Test-More"
<https://github.com/Test\-More/test\-more/issues>
.IP "Test2\-Suite" 4
.IX Item "Test2-Suite"
<https://github.com/Test\-More/Test2\-Suite/issues>
.IP "Test2\-Harness" 4
.IX Item "Test2-Harness"
<https://github.com/Test\-More/Test2\-Harness/issues>
.SS "\s-1SUBMIT PATCHES\s0"
.IX Subsection "SUBMIT PATCHES"
You are welcome to fix bugs you find, or from the tracker. We also often accept
patches that add new features or update documentation. The preferred method of
submitting patches is a github pull request, that said we also accept patches
via email.
.SS "\s-1ADD/UPDATE DOCUMENTATION\s0"
.IX Subsection "ADD/UPDATE DOCUMENTATION"
Documentation can be flawed just like code can be. Documentation can also
become outdated. If you see some incorrect documentation, or documentation that
is missing, we would love to get a patch to fix it!
.SS "\s-1ANSWER QUESTIONS ON IRC/SLACK\s0"
.IX Subsection "ANSWER QUESTIONS ON IRC/SLACK"
We are always hanging out on <irc://irc.perl.org>, the #perl\-qa and #toolchain
channels are a good place to find us.
.PP
There is also a Test2 slack channel: <https://perl\-test2.slack.com>.
.SS "\s-1WRITE NEW TOOLS USING TEST2\s0"
.IX Subsection "WRITE NEW TOOLS USING TEST2"
Writing a new tool using Test2 is always a good way to contribute. When you
write a tool that you think is useful, it is nice to share it by putting it on
\&\s-1CPAN.\s0
.SS "\s-1PORT OLD TOOLS TO TEST2\s0"
.IX Subsection "PORT OLD TOOLS TO TEST2"
The \f(CW\*(C`Test::*\*(C'\fR namespace has been around for a long time, and has a \s-1LOT\s0 of
tools. The \f(CW\*(C`Test2::Tools::*\*(C'\fR namespace is fairly young, and has less tools.
Finding a useful old tool with no modern equivalent, and writing a port is a
very good use of your time.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test2::Manual \- Primary index of the manual.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Manual can be found at
\&\fIhttps://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
