.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Tiny 3pm"
.TH HTTP::Tiny 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Tiny \- A small, simple, correct HTTP/1.1 client
.SH "VERSION"
.IX Header "VERSION"
version 0.025
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTTP::Tiny;
\&
\&    my $response = HTTP::Tiny\->new\->get(\*(Aqhttp://example.com/\*(Aq);
\&
\&    die "Failed!\en" unless $response\->{success};
\&
\&    print "$response\->{status} $response\->{reason}\en";
\&
\&    while (my ($k, $v) = each %{$response\->{headers}}) {
\&        for (ref $v eq \*(AqARRAY\*(Aq ? @$v : $v) {
\&            print "$k: $_\en";
\&        }
\&    }
\&
\&    print $response\->{content} if length $response\->{content};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a very simple \s-1HTTP/1.1\s0 client, designed for doing simple \s-1GET\s0
requests without the overhead of a large framework like LWP::UserAgent.
.PP
It is more correct and more complete than HTTP::Lite.  It supports
proxies (currently only non-authenticating ones) and redirection.  It
also correctly resumes after \s-1EINTR.\s0
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $http = HTTP::Tiny\->new( %attributes );
.Ve
.PP
This constructor returns a new HTTP::Tiny object.  Valid attributes include:
.IP "\(bu" 4
\&\f(CW\*(C`agent\*(C'\fR
.Sp
A user-agent string (defaults to 'HTTP\-Tiny/$VERSION'). If \f(CW\*(C`agent\*(C'\fR ends in a space character, the default user-agent string is appended.
.IP "\(bu" 4
\&\f(CW\*(C`default_headers\*(C'\fR
.Sp
A hashref of default headers to apply to requests
.IP "\(bu" 4
\&\f(CW\*(C`local_address\*(C'\fR
.Sp
The local \s-1IP\s0 address to bind to
.IP "\(bu" 4
\&\f(CW\*(C`max_redirect\*(C'\fR
.Sp
Maximum number of redirects allowed (defaults to 5)
.IP "\(bu" 4
\&\f(CW\*(C`max_size\*(C'\fR
.Sp
Maximum response size (only when not using a data callback).  If defined,
responses larger than this will return an exception.
.IP "\(bu" 4
\&\f(CW\*(C`proxy\*(C'\fR
.Sp
\&\s-1URL\s0 of a proxy server to use (default is \f(CW$ENV{http_proxy}\fR if set)
.IP "\(bu" 4
\&\f(CW\*(C`timeout\*(C'\fR
.Sp
Request timeout in seconds (default is 60)
.IP "\(bu" 4
\&\f(CW\*(C`verify_SSL\*(C'\fR
.Sp
A boolean that indicates whether to validate the \s-1SSL\s0 certificate of an \f(CW\*(C`https\*(C'\fR
connection (default is false)
.IP "\(bu" 4
\&\f(CW\*(C`SSL_options\*(C'\fR
.Sp
A hashref of \f(CW\*(C`SSL_*\*(C'\fR options to pass through to IO::Socket::SSL
.PP
Exceptions from \f(CW\*(C`max_size\*(C'\fR, \f(CW\*(C`timeout\*(C'\fR or other errors will result in a
pseudo-HTTP status code of 599 and a reason of \*(L"Internal Exception\*(R". The
content field in the response will contain the text of the exception.
.PP
See \*(L"\s-1SSL SUPPORT\*(R"\s0 for more on the \f(CW\*(C`verify_SSL\*(C'\fR and \f(CW\*(C`SSL_options\*(C'\fR attributes.
.SS "get|head|put|post|delete"
.IX Subsection "get|head|put|post|delete"
.Vb 3
\&    $response = $http\->get($url);
\&    $response = $http\->get($url, \e%options);
\&    $response = $http\->head($url);
.Ve
.PP
These methods are shorthand for calling \f(CW\*(C`request()\*(C'\fR for the given method.  The
\&\s-1URL\s0 must have unsafe characters escaped and international domain names encoded.
See \f(CW\*(C`request()\*(C'\fR for valid options and a description of the response.
.PP
The \f(CW\*(C`success\*(C'\fR field of the response will be true if the status code is 2XX.
.SS "post_form"
.IX Subsection "post_form"
.Vb 2
\&    $response = $http\->post_form($url, $form_data);
\&    $response = $http\->post_form($url, $form_data, \e%options);
.Ve
.PP
This method executes a \f(CW\*(C`POST\*(C'\fR request and sends the key/value pairs from a
form data hash or array reference to the given \s-1URL\s0 with a \f(CW\*(C`content\-type\*(C'\fR of
\&\f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR.  See documentation for the
\&\f(CW\*(C`www_form_urlencode\*(C'\fR method for details on the encoding.
.PP
The \s-1URL\s0 must have unsafe characters escaped and international domain names
encoded.  See \f(CW\*(C`request()\*(C'\fR for valid options and a description of the response.
Any \f(CW\*(C`content\-type\*(C'\fR header or content in the options hashref will be ignored.
.PP
The \f(CW\*(C`success\*(C'\fR field of the response will be true if the status code is 2XX.
.SS "mirror"
.IX Subsection "mirror"
.Vb 4
\&    $response = $http\->mirror($url, $file, \e%options)
\&    if ( $response\->{success} ) {
\&        print "$file is up to date\en";
\&    }
.Ve
.PP
Executes a \f(CW\*(C`GET\*(C'\fR request for the \s-1URL\s0 and saves the response body to the file
name provided.  The \s-1URL\s0 must have unsafe characters escaped and international
domain names encoded.  If the file already exists, the request will includes an
\&\f(CW\*(C`If\-Modified\-Since\*(C'\fR header with the modification timestamp of the file.  You
may specify a different \f(CW\*(C`If\-Modified\-Since\*(C'\fR header yourself in the \f(CW\*(C`$options\->{headers}\*(C'\fR hash.
.PP
The \f(CW\*(C`success\*(C'\fR field of the response will be true if the status code is 2XX
or if the status code is 304 (unmodified).
.PP
If the file was modified and the server response includes a properly
formatted \f(CW\*(C`Last\-Modified\*(C'\fR header, the file modification time will
be updated accordingly.
.SS "request"
.IX Subsection "request"
.Vb 2
\&    $response = $http\->request($method, $url);
\&    $response = $http\->request($method, $url, \e%options);
.Ve
.PP
Executes an \s-1HTTP\s0 request of the given method type ('\s-1GET\s0', '\s-1HEAD\s0', '\s-1POST\s0',
\&'\s-1PUT\s0', etc.) on the given \s-1URL. \s0 The \s-1URL\s0 must have unsafe characters escaped and
international domain names encoded.  A hashref of options may be appended to
modify the request.
.PP
Valid options are:
.IP "\(bu" 4
\&\f(CW\*(C`headers\*(C'\fR
.Sp
A hashref containing headers to include with the request.  If the value for
a header is an array reference, the header will be output multiple times with
each value in the array.  These headers over-write any default headers.
.IP "\(bu" 4
\&\f(CW\*(C`content\*(C'\fR
.Sp
A scalar to include as the body of the request \s-1OR\s0 a code reference
that will be called iteratively to produce the body of the request
.IP "\(bu" 4
\&\f(CW\*(C`trailer_callback\*(C'\fR
.Sp
A code reference that will be called if it exists to provide a hashref
of trailing headers (only used with chunked transfer-encoding)
.IP "\(bu" 4
\&\f(CW\*(C`data_callback\*(C'\fR
.Sp
A code reference that will be called for each chunks of the response
body received.
.PP
If the \f(CW\*(C`content\*(C'\fR option is a code reference, it will be called iteratively
to provide the content body of the request.  It should return the empty
string or undef when the iterator is exhausted.
.PP
If the \f(CW\*(C`data_callback\*(C'\fR option is provided, it will be called iteratively until
the entire response body is received.  The first argument will be a string
containing a chunk of the response body, the second argument will be the
in-progress response hash reference, as described below.  (This allows
customizing the action of the callback based on the \f(CW\*(C`status\*(C'\fR or \f(CW\*(C`headers\*(C'\fR
received prior to the content body.)
.PP
The \f(CW\*(C`request\*(C'\fR method returns a hashref containing the response.  The hashref
will have the following keys:
.IP "\(bu" 4
\&\f(CW\*(C`success\*(C'\fR
.Sp
Boolean indicating whether the operation returned a 2XX status code
.IP "\(bu" 4
\&\f(CW\*(C`url\*(C'\fR
.Sp
\&\s-1URL\s0 that provided the response. This is the \s-1URL\s0 of the request unless
there were redirections, in which case it is the last \s-1URL\s0 queried
in a redirection chain
.IP "\(bu" 4
\&\f(CW\*(C`status\*(C'\fR
.Sp
The \s-1HTTP\s0 status code of the response
.IP "\(bu" 4
\&\f(CW\*(C`reason\*(C'\fR
.Sp
The response phrase returned by the server
.IP "\(bu" 4
\&\f(CW\*(C`content\*(C'\fR
.Sp
The body of the response.  If the response does not have any content
or if a data callback is provided to consume the response body,
this will be the empty string
.IP "\(bu" 4
\&\f(CW\*(C`headers\*(C'\fR
.Sp
A hashref of header fields.  All header field names will be normalized
to be lower case. If a header is repeated, the value will be an arrayref;
it will otherwise be a scalar string containing the value
.PP
On an exception during the execution of the request, the \f(CW\*(C`status\*(C'\fR field will
contain 599, and the \f(CW\*(C`content\*(C'\fR field will contain the text of the exception.
.SS "www_form_urlencode"
.IX Subsection "www_form_urlencode"
.Vb 2
\&    $params = $http\->www_form_urlencode( $data );
\&    $response = $http\->get("http://example.com/query?$params");
.Ve
.PP
This method converts the key/value pairs from a data hash or array reference
into a \f(CW\*(C`x\-www\-form\-urlencoded\*(C'\fR string.  The keys and values from the data
reference will be \s-1UTF\-8\s0 encoded and escaped per \s-1RFC 3986. \s0 If a value is an
array reference, the key will be repeated with each of the values of the array
reference.  The key/value pairs in the resulting string will be sorted by key
and value.
.SH "SSL SUPPORT"
.IX Header "SSL SUPPORT"
Direct \f(CW\*(C`https\*(C'\fR connections are supported only if IO::Socket::SSL 1.56 or
greater and Net::SSLeay 1.49 or greater are installed. An exception will be
thrown if a new enough versions of these modules not installed or if the \s-1SSL\s0
encryption fails. There is no support for \f(CW\*(C`https\*(C'\fR connections via proxy (i.e.
\&\s-1RFC 2817\s0).
.PP
\&\s-1SSL\s0 provides two distinct capabilities:
.IP "\(bu" 4
Encrypted communication channel
.IP "\(bu" 4
Verification of server identity
.PP
\&\fBBy default, HTTP::Tiny does not verify server identity\fR.
.PP
Server identity verification is controversial and potentially tricky because it
depends on a (usually paid) third-party Certificate Authority (\s-1CA\s0) trust model
to validate a certificate as legitimate.  This discriminates against servers
with self-signed certificates or certificates signed by free, community-driven
\&\s-1CA\s0's such as CAcert.org <http://cacert.org>.
.PP
By default, HTTP::Tiny does not make any assumptions about your trust model,
threat level or risk tolerance.  It just aims to give you an encrypted channel
when you need one.
.PP
Setting the \f(CW\*(C`verify_SSL\*(C'\fR attribute to a true value will make HTTP::Tiny verify
that an \s-1SSL\s0 connection has a valid \s-1SSL\s0 certificate corresponding to the host
name of the connection and that the \s-1SSL\s0 certificate has been verified by a \s-1CA.\s0
Assuming you trust the \s-1CA,\s0 this will protect against a man-in-the-middle
attack <http://en.wikipedia.org/wiki/Man-in-the-middle_attack>.  If you are
concerned about security, you should enable this option.
.PP
Certificate verification requires a file containing trusted \s-1CA\s0 certificates.
If the Mozilla::CA module is installed, HTTP::Tiny will use the \s-1CA\s0 file
included with it as a source of trusted \s-1CA\s0's.  (This means you trust Mozilla,
the author of Mozilla::CA, the \s-1CPAN\s0 mirror where you got Mozilla::CA, the
toolchain used to install it, and your operating system security, right?)
.PP
If that module is not available, then HTTP::Tiny will search several
system-specific default locations for a \s-1CA\s0 certificate file:
.IP "\(bu" 4
/etc/ssl/certs/ca\-certificates.crt
.IP "\(bu" 4
/etc/pki/tls/certs/ca\-bundle.crt
.IP "\(bu" 4
/etc/ssl/ca\-bundle.pem
.PP
An exception will be raised if \f(CW\*(C`verify_SSL\*(C'\fR is true and no \s-1CA\s0 certificate file
is available.
.PP
If you desire complete control over \s-1SSL\s0 connections, the \f(CW\*(C`SSL_options\*(C'\fR attribute
lets you provide a hash reference that will be passed through to
\&\f(CW\*(C`IO::Socket::SSL::start_SSL()\*(C'\fR, overriding any options set by HTTP::Tiny. For
example, to provide your own trusted \s-1CA\s0 file:
.PP
.Vb 3
\&    SSL_options => {
\&        SSL_ca_file => $file_path,
\&    }
.Ve
.PP
The \f(CW\*(C`SSL_options\*(C'\fR attribute could also be used for such things as providing a
client certificate for authentication to a server or controlling the choice of
cipher used for the \s-1SSL\s0 connection. See IO::Socket::SSL documentation for
details.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
HTTP::Tiny is \fIconditionally compliant\fR with the
\&\s-1HTTP/1.1\s0 specification <http://www.w3.org/Protocols/rfc2616/rfc2616.html>.
It attempts to meet all \*(L"\s-1MUST\*(R"\s0 requirements of the specification, but does not
implement all \*(L"\s-1SHOULD\*(R"\s0 requirements.
.PP
Some particular limitations of note include:
.IP "\(bu" 4
HTTP::Tiny focuses on correct transport.  Users are responsible for ensuring
that user-defined headers and content are compliant with the \s-1HTTP/1.1\s0
specification.
.IP "\(bu" 4
Users must ensure that URLs are properly escaped for unsafe characters and that
international domain names are properly encoded to \s-1ASCII.\s0 See URI::Escape,
URI::_punycode and Net::IDN::Encode.
.IP "\(bu" 4
Redirection is very strict against the specification.  Redirection is only
automatic for response codes 301, 302 and 307 if the request method is '\s-1GET\s0' or
\&'\s-1HEAD\s0'.  Response code 303 is always converted into a '\s-1GET\s0' redirection, as
mandated by the specification.  There is no automatic support for status 305
(\*(L"Use proxy\*(R") redirections.
.IP "\(bu" 4
Persistent connections are not supported.  The \f(CW\*(C`Connection\*(C'\fR header will
always be set to \f(CW\*(C`close\*(C'\fR.
.IP "\(bu" 4
Cookies are not directly supported.  Users that set a \f(CW\*(C`Cookie\*(C'\fR header
should also set \f(CW\*(C`max_redirect\*(C'\fR to zero to ensure cookies are not
inappropriately re-transmitted.
.IP "\(bu" 4
Only the \f(CW\*(C`http_proxy\*(C'\fR environment variable is supported in the format
\&\f(CW\*(C`http://HOST:PORT/\*(C'\fR.  If a \f(CW\*(C`proxy\*(C'\fR argument is passed to \f(CW\*(C`new\*(C'\fR (including
undef), then the \f(CW\*(C`http_proxy\*(C'\fR environment variable is ignored.
.IP "\(bu" 4
There is no provision for delaying a request body using an \f(CW\*(C`Expect\*(C'\fR header.
Unexpected \f(CW\*(C`1XX\*(C'\fR responses are silently ignored as per the specification.
.IP "\(bu" 4
Only 'chunked' \f(CW\*(C`Transfer\-Encoding\*(C'\fR is supported.
.IP "\(bu" 4
There is no support for a Request-URI of '*' for the '\s-1OPTIONS\s0' request.
.IP "\(bu" 4
There is no support for IPv6 of any kind.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
LWP::UserAgent
.IP "\(bu" 4
IO::Socket::SSL
.IP "\(bu" 4
Mozilla::CA
.IP "\(bu" 4
Net::SSLeay
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://rt.cpan.org/Public/Dist/Display.html?Name=HTTP\-Tiny>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/http\-tiny>
.PP
.Vb 1
\&  git clone git://github.com/dagolden/http\-tiny.git
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Christian Hansen <chansen@cpan.org>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Mike Doherty <doherty@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Christian Hansen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
