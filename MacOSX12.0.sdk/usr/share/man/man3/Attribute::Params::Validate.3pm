.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Attribute::Params::Validate 3"
.TH Attribute::Params::Validate 3 "2021-08-27" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Attribute::Params::Validate \- Define validation through subroutine attributes
.SH "VERSION"
.IX Header "VERSION"
version 1.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Attribute::Params::Validate qw(:all);
\&
\&  # takes named params (hash or hashref)
\&  # foo is mandatory, bar is optional
\&  sub foo : Validate( foo => 1, bar => 0 )
\&  {
\&      ...
\&  }
\&
\&  # takes positional params
\&  # first two are mandatory, third is optional
\&  sub bar : ValidatePos( 1, 1, 0 )
\&  {
\&      ...
\&  }
\&
\&  # for some reason Perl insists that the entire attribute be on one line
\&  sub foo2 : Validate( foo => { type => ARRAYREF }, bar => { can => [ \*(Aqprint\*(Aq, \*(Aqflush\*(Aq, \*(Aqfrobnicate\*(Aq ] }, baz => { type => SCALAR, callbacks => { \*(Aqnumbers only\*(Aq => sub { shift() =~ /^\ed+$/ }, \*(Aqless than 90\*(Aq => sub { shift() < 90 } } } )
\&  {
\&      ...
\&  }
\&
\&  # note that this is marked as a method.  This is very important!
\&  sub baz : Validate( foo => { type => ARRAYREF }, bar => { isa => \*(AqFrobnicator\*(Aq } ) method
\&  {
\&      ...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Attribute::Params::Validate module allows you to validate method
or function call parameters just like Params::Validate does.  However,
this module allows you to specify your validation spec as an
attribute, rather than by calling the \f(CW\*(C`validate\*(C'\fR routine.
.PP
Please see Params::Validate for more information on how you can
specify what validation is performed.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
This module exports everything that Params::Validate does except for
the \f(CW\*(C`validate\*(C'\fR and \f(CW\*(C`validate_pos\*(C'\fR subroutines.
.SS "\s-1ATTRIBUTES\s0"
.IX Subsection "ATTRIBUTES"
.IP "\(bu" 4
Validate
.Sp
This attribute corresponds to the \f(CW\*(C`validate\*(C'\fR subroutine in
Params::Validate.
.IP "\(bu" 4
ValidatePos
.Sp
This attribute corresponds to the \f(CW\*(C`validate_pos\*(C'\fR subroutine in
Params::Validate.
.SS "\s-1OO\s0"
.IX Subsection "OO"
If you are using this module to mark \fBmethods\fR for validation, as
opposed to subroutines, it is crucial that you mark these methods with
the \f(CW\*(C`:method\*(C'\fR attribute, as well as the \f(CW\*(C`Validate\*(C'\fR or \f(CW\*(C`ValidatePos\*(C'\fR
attribute.
.PP
If you do not do this, then the object or class used in the method
call will be passed to the validation routines, which is probably not
what you want.
.SS "\s-1CAVEATS\s0"
.IX Subsection "CAVEATS"
You \fBmust\fR put all the arguments to the \f(CW\*(C`Validate\*(C'\fR or \f(CW\*(C`ValidatePos\*(C'\fR
attribute on a single line, or Perl will complain.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Params::Validate
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org> and Ilya Martynov <ilya@martynov.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by Dave Rolsky and Ilya Martynov.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
