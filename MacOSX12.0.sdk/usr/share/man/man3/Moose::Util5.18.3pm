.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Util 3"
.TH Moose::Util 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Util \- Utilities for working with Moose classes
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Moose::Util qw/find_meta does_role search_class_by_role/;
\&
\&  my $meta = find_meta($object) || die "No metaclass found";
\&
\&  if (does_role($object, $role)) {
\&    print "The object can do $role!\en";
\&  }
\&
\&  my $class = search_class_by_role($object, \*(AqFooRole\*(Aq);
\&  print "Nearest class with \*(AqFooRole\*(Aq is $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a set of utility functions. Many of these
functions are intended for use in Moose itself or MooseX modules, but
some of them may be useful for use in your own code.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.IP "\fBfind_meta($class_or_obj)\fR" 4
.IX Item "find_meta($class_or_obj)"
This method takes a class name or object and attempts to find a
metaclass for the class, if one exists. It will \fBnot\fR create one if it
does not yet exist.
.ie n .IP "\fBdoes_role($class_or_obj, \fB$role_or_obj\fB)\fR" 4
.el .IP "\fBdoes_role($class_or_obj, \f(CB$role_or_obj\fB)\fR" 4
.IX Item "does_role($class_or_obj, $role_or_obj)"
Returns true if \f(CW$class_or_obj\fR does the given \f(CW$role_or_obj\fR. The role can
be provided as a name or a Moose::Meta::Role object.
.Sp
The class must already have a metaclass for this to work. If it doesn't, this
function simply returns false.
.ie n .IP "\fBsearch_class_by_role($class_or_obj, \fB$role_or_obj\fB)\fR" 4
.el .IP "\fBsearch_class_by_role($class_or_obj, \f(CB$role_or_obj\fB)\fR" 4
.IX Item "search_class_by_role($class_or_obj, $role_or_obj)"
Returns the first class in the class's precedence list that does
\&\f(CW$role_or_obj\fR, if any. The role can be either a name or a
Moose::Meta::Role object.
.Sp
The class must already have a metaclass for this to work.
.ie n .IP "\fBapply_all_roles($applicant, \fB@roles\fB)\fR" 4
.el .IP "\fBapply_all_roles($applicant, \f(CB@roles\fB)\fR" 4
.IX Item "apply_all_roles($applicant, @roles)"
This function applies one or more roles to the given \f(CW$applicant\fR The
applicant can be a role name, class name, or object.
.Sp
The \f(CW$applicant\fR must already have a metaclass object.
.Sp
The list of \f(CW@roles\fR should a list of names or Moose::Meta::Role objects,
each of which can be followed by an optional hash reference of options
(\f(CW\*(C`\-excludes\*(C'\fR and \f(CW\*(C`\-alias\*(C'\fR).
.ie n .IP "\fBensure_all_roles($applicant, \fB@roles\fB)\fR" 4
.el .IP "\fBensure_all_roles($applicant, \f(CB@roles\fB)\fR" 4
.IX Item "ensure_all_roles($applicant, @roles)"
This function is similar to \f(CW\*(C`apply_all_roles\*(C'\fR, but only applies roles that
\&\f(CW$applicant\fR does not already consume.
.ie n .IP "\fBwith_traits($class_name, \fB@role_names\fB)\fR" 4
.el .IP "\fBwith_traits($class_name, \f(CB@role_names\fB)\fR" 4
.IX Item "with_traits($class_name, @role_names)"
This function creates a new class from \f(CW$class_name\fR with each of
\&\f(CW@role_names\fR applied. It returns the name of the new class.
.ie n .IP "\fBget_all_attribute_values($meta, \fB$instance\fB)\fR" 4
.el .IP "\fBget_all_attribute_values($meta, \f(CB$instance\fB)\fR" 4
.IX Item "get_all_attribute_values($meta, $instance)"
Returns a hash reference containing all of the \f(CW$instance\fR's
attributes. The keys are attribute names.
.ie n .IP "\fBget_all_init_args($meta, \fB$instance\fB)\fR" 4
.el .IP "\fBget_all_init_args($meta, \f(CB$instance\fB)\fR" 4
.IX Item "get_all_init_args($meta, $instance)"
Returns a hash reference containing all of the \f(CW\*(C`init_arg\*(C'\fR values for
the instance's attributes. The values are the associated attribute
values. If an attribute does not have a defined \f(CW\*(C`init_arg\*(C'\fR, it is
skipped.
.Sp
This could be useful in cloning an object.
.ie n .IP "\fBresolve_metaclass_alias($category, \fB$name\fB, \f(BI%options\fB)\fR" 4
.el .IP "\fBresolve_metaclass_alias($category, \f(CB$name\fB, \f(CB%options\fB)\fR" 4
.IX Item "resolve_metaclass_alias($category, $name, %options)"
.PD 0
.ie n .IP "\fBresolve_metatrait_alias($category, \fB$name\fB, \f(BI%options\fB)\fR" 4
.el .IP "\fBresolve_metatrait_alias($category, \f(CB$name\fB, \f(CB%options\fB)\fR" 4
.IX Item "resolve_metatrait_alias($category, $name, %options)"
.PD
Resolves a short name to a full class name. Short names are often used
when specifying the \f(CW\*(C`metaclass\*(C'\fR or \f(CW\*(C`traits\*(C'\fR option for an attribute:
.Sp
.Vb 3
\&    has foo => (
\&        metaclass => "Bar",
\&    );
.Ve
.Sp
The name resolution mechanism is covered in
\&\*(L"Metaclass and Trait Name Resolution\*(R" in Moose.
.ie n .IP "\fBmeta_class_alias($to[, \fB$from\fB])\fR" 4
.el .IP "\fBmeta_class_alias($to[, \f(CB$from\fB])\fR" 4
.IX Item "meta_class_alias($to[, $from])"
.PD 0
.ie n .IP "\fBmeta_attribute_alias($to[, \fB$from\fB])\fR" 4
.el .IP "\fBmeta_attribute_alias($to[, \f(CB$from\fB])\fR" 4
.IX Item "meta_attribute_alias($to[, $from])"
.PD
Create an alias from the class \f(CW$from\fR (or the current package, if
\&\f(CW$from\fR is unspecified), so that
\&\*(L"Metaclass and Trait Name Resolution\*(R" in Moose works properly.
.IP "\fBenglish_list(@items)\fR" 4
.IX Item "english_list(@items)"
Given a list of scalars, turns them into a proper list in English
(\*(L"one and two\*(R", \*(L"one, two, three, and four\*(R"). This is used to help us
make nicer error messages.
.ie n .IP "\fBthrow_exception( \fB$class_name\fB, \f(BI%arguments_to_exception\fB)\fR" 4
.el .IP "\fBthrow_exception( \f(CB$class_name\fB, \f(CB%arguments_to_exception\fB)\fR" 4
.IX Item "throw_exception( $class_name, %arguments_to_exception)"
Calls die with an object of Moose::Exception::$class_name, with
\&\f(CW%arguments_to_exception\fR passed as arguments.
.SH "TODO"
.IX Header "TODO"
Here is a list of possible functions to write
.IP "discovering original method from modified method" 4
.IX Item "discovering original method from modified method"
.PD 0
.IP "search for origin class of a method or attribute" 4
.IX Item "search for origin class of a method or attribute"
.PD
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
