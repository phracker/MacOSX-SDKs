.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Meta::Attribute::Native::Trait::String 3"
.TH Moose::Meta::Attribute::Native::Trait::String 3 "2014-01-19" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Meta::Attribute::Native::Trait::String \- Helper trait for Str attributes
.SH "VERSION"
.IX Header "VERSION"
version 2.1202
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyHomePage;
\&  use Moose;
\&
\&  has \*(Aqtext\*(Aq => (
\&      traits  => [\*(AqString\*(Aq],
\&      is      => \*(Aqrw\*(Aq,
\&      isa     => \*(AqStr\*(Aq,
\&      default => q{},
\&      handles => {
\&          add_text     => \*(Aqappend\*(Aq,
\&          replace_text => \*(Aqreplace\*(Aq,
\&      },
\&  );
\&
\&  my $page = MyHomePage\->new();
\&  $page\->add_text("foo");    # same as $page\->text($page\->text . "foo");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This trait provides native delegation methods for strings.
.SH "DEFAULT TYPE"
.IX Header "DEFAULT TYPE"
If you don't provide an \f(CW\*(C`isa\*(C'\fR value for your attribute, it will default to
\&\f(CW\*(C`Str\*(C'\fR.
.SH "PROVIDED METHODS"
.IX Header "PROVIDED METHODS"
.IP "\(bu" 4
\&\fBinc\fR
.Sp
Increments the value stored in this slot using the magical string autoincrement
operator. Note that Perl doesn't provide analogous behavior in \f(CW\*(C`\-\-\*(C'\fR, so
\&\f(CW\*(C`dec\*(C'\fR is not available. This method returns the new value.
.Sp
This method does not accept any arguments.
.IP "\(bu" 4
\&\fBappend($string)\fR
.Sp
Appends to the string, like \f(CW\*(C`.=\*(C'\fR, and returns the new value.
.Sp
This method requires a single argument.
.IP "\(bu" 4
\&\fBprepend($string)\fR
.Sp
Prepends to the string and returns the new value.
.Sp
This method requires a single argument.
.IP "\(bu" 4
\&\fBreplace($pattern, \f(CB$replacement\fB)\fR
.Sp
Performs a regexp substitution (\*(L"s\*(R" in perlop). There is no way to provide the
\&\f(CW\*(C`g\*(C'\fR flag, but code references will be accepted for the replacement, causing
the regex to be modified with a single \f(CW\*(C`e\*(C'\fR. \f(CW\*(C`/smxi\*(C'\fR can be applied using the
\&\f(CW\*(C`qr\*(C'\fR operator. This method returns the new value.
.Sp
This method requires two arguments.
.IP "\(bu" 4
\&\fBmatch($pattern)\fR
.Sp
Runs the regex against the string and returns the matching value(s).
.Sp
This method requires a single argument.
.IP "\(bu" 4
\&\fBchop\fR
.Sp
Just like \*(L"chop\*(R" in perlfunc. This method returns the chopped character.
.Sp
This method does not accept any arguments.
.IP "\(bu" 4
\&\fBchomp\fR
.Sp
Just like \*(L"chomp\*(R" in perlfunc. This method returns the number of characters
removed.
.Sp
This method does not accept any arguments.
.IP "\(bu" 4
\&\fBclear\fR
.Sp
Sets the string to the empty string (not the value passed to \f(CW\*(C`default\*(C'\fR).
.Sp
This method does not have a defined return value.
.Sp
This method does not accept any arguments.
.IP "\(bu" 4
\&\fBlength\fR
.Sp
Just like \*(L"length\*(R" in perlfunc, returns the length of the string.
.IP "\(bu" 4
\&\fBsubstr\fR
.Sp
This acts just like \*(L"substr\*(R" in perlfunc. When called as a writer, it returns
the substring that was replaced, just like the Perl builtin.
.Sp
This method requires at least one argument, and accepts no more than three.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\*(R"\s0 in Moose for details on reporting bugs.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Stevan Little <stevan.little@iinteractive.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Shawn M Moore <code@sartak.org>
.IP "\(bu" 4
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
