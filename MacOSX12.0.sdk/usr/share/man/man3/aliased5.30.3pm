.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "aliased 3pm"
.TH aliased 3pm "2015-01-03" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
aliased \- Use shorter versions of class names.
.SH "VERSION"
.IX Header "VERSION"
version 0.34
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Class name interface
\&  use aliased \*(AqMy::Company::Namespace::Customer\*(Aq;
\&  my $cust = Customer\->new;
\&
\&  use aliased \*(AqMy::Company::Namespace::Preferred::Customer\*(Aq => \*(AqPreferred\*(Aq;
\&  my $pref = Preferred\->new;
\&
\&
\&  # Variable interface
\&  use aliased;
\&  my $Customer  = alias "My::Other::Namespace::Customer";
\&  my $cust      = $Customer\->new;
\&
\&  my $Preferred = alias "My::Other::Namespace::Preferred::Customer";
\&  my $pref      = $Preferred\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`aliased\*(C'\fR is simple in concept but is a rather handy module.  It loads the
class you specify and exports into your namespace a subroutine that returns
the class name.  You can explicitly alias the class to another name or, if you
prefer, you can do so implicitly.  In the latter case, the name of the
subroutine is the last part of the class name.  Thus, it does something
similar to the following:
.PP
.Vb 1
\&  #use aliased \*(AqSome::Annoyingly::Long::Module::Name::Customer\*(Aq;
\&
\&  use Some::Annoyingly::Long::Module::Name::Customer;
\&  sub Customer {
\&    return \*(AqSome::Annoyingly::Long::Module::Name::Customer\*(Aq;
\&  }
\&  my $cust = Customer\->new;
.Ve
.PP
This module is useful if you prefer a shorter name for a class.  It's also
handy if a class has been renamed.
.PP
(Some may object to the term \*(L"aliasing\*(R" because we're not aliasing one
namespace to another, but it's a handy term.  Just keep in mind that this is
done with a subroutine and not with typeglobs and weird namespace munging.)
.PP
Note that this is \fBonly\fR for \f(CW\*(C`use\*(C'\fRing \s-1OO\s0 modules.  You cannot use this to
load procedural modules.  See the \*(L"Why \s-1OO\s0 Only?\*(R" section.  Also, don't let
the version number fool you.  This code is ridiculously simple and is just
fine for most use.
.SS "Implicit Aliasing"
.IX Subsection "Implicit Aliasing"
The most common use of this module is:
.PP
.Vb 1
\&  use aliased \*(AqSome::Module::name\*(Aq;
.Ve
.PP
\&\f(CW\*(C`aliased\*(C'\fR will  allow you to reference the class by the last part of the
class name.  Thus, \f(CW\*(C`Really::Long::Name\*(C'\fR becomes \f(CW\*(C`Name\*(C'\fR.  It does this by
exporting a subroutine into your namespace with the same name as the aliased
name.  This subroutine returns the original class name.
.PP
For example:
.PP
.Vb 2
\&  use aliased "Acme::Company::Customer";
\&  my $cust = Customer\->find($id);
.Ve
.PP
Note that any class method can be called on the shorter version of the class
name, not just the constructor.
.SS "Explicit Aliasing"
.IX Subsection "Explicit Aliasing"
Sometimes two class names can cause a conflict (they both end with \f(CW\*(C`Customer\*(C'\fR
for example), or you already have a subroutine with the same name as the
aliased name.  In that case, you can make an explicit alias by stating the
name you wish to alias to:
.PP
.Vb 1
\&  use aliased \*(AqOriginal::Module::Name\*(Aq => \*(AqNewName\*(Aq;
.Ve
.PP
Here's how we use \f(CW\*(C`aliased\*(C'\fR to avoid conflicts:
.PP
.Vb 4
\&  use aliased "Really::Long::Name";
\&  use aliased "Another::Really::Long::Name" => "Aname";
\&  my $name  = Name\->new;
\&  my $aname = Aname\->new;
.Ve
.PP
You can even alias to a different package:
.PP
.Vb 2
\&  use aliased "Another::Really::Long::Name" => "Another::Name";
\&  my $aname = Another::Name\->new;
.Ve
.PP
Messing around with different namespaces is a really bad idea and you probably
don't want to do this.  However, it might prove handy if the module you are
using has been renamed.  If the interface has not changed, this allows you to
use the new module by only changing one line of code.
.PP
.Vb 2
\&  use aliased "New::Module::Name" => "Old::Module::Name";
\&  my $thing = Old::Module::Name\->new;
.Ve
.SS "Import Lists"
.IX Subsection "Import Lists"
Sometimes, even with an \s-1OO\s0 module, you need to specify extra arguments when
using the module.  When this happens, simply use \*(L"Explicit Aliasing\*(R" followed
by the import list:
.PP
Snippet 1:
.PP
.Vb 2
\&  use Some::Module::Name qw/foo bar/;
\&  my $o = Some::Module::Name\->some_class_method;
.Ve
.PP
Snippet 2 (equivalent to snippet 1):
.PP
.Vb 2
\&  use aliased \*(AqSome::Module::Name\*(Aq => \*(AqName\*(Aq, qw/foo bar/;
\&  my $o = Name\->some_class_method;
.Ve
.PP
\&\fBNote\fR:  remember, you cannot use import lists with \*(L"Implicit Aliasing\*(R".  As
a result, you may simply prefer to only use \*(L"Explicit Aliasing\*(R" as a matter
of style.
.SS "\fBalias()\fP"
.IX Subsection "alias()"
This function is only exported if you specify \f(CW\*(C`use aliased\*(C'\fR with no import
list.
.PP
.Vb 3
\&    use aliased;
\&    my $alias = alias($class);
\&    my $alias = alias($class, @imports);
.Ve
.PP
\&\f(CW\*(C`alias()\*(C'\fR is an alternative to \f(CW\*(C`use aliased ...\*(C'\fR which uses less magic and
avoids some of the ambiguities.
.PP
Like \f(CW\*(C`use aliased\*(C'\fR it \f(CW\*(C`use\*(C'\fRs the \f(CW$class\fR (pass in \f(CW@imports\fR, if given)
but instead of providing an \f(CW\*(C`Alias\*(C'\fR constant it simply returns a scalar set
to the \f(CW$class\fR name.
.PP
.Vb 1
\&    my $thing = alias("Some::Thing::With::A::Long::Name");
\&
\&    # Just like Some::Thing::With::A::Long::Name\->method
\&    $thing\->method;
.Ve
.PP
The use of a scalar instead of a constant avoids any possible ambiguity
when aliasing two similar names:
.PP
.Vb 3
\&    # No ambiguity despite the fact that they both end with "Name"
\&    my $thing = alias("Some::Thing::With::A::Long::Name");
\&    my $other = alias("Some::Other::Thing::With::A::Long::Name");
.Ve
.PP
and there is no magic constant exported into your namespace.
.PP
The only caveat is loading of the \f(CW$class\fR happens at run time.  If \f(CW$class\fR
exports anything you might want to ensure it is loaded at compile time with:
.PP
.Vb 2
\&    my $thing;
\&    BEGIN { $thing = alias("Some::Thing"); }
.Ve
.PP
However, since \s-1OO\s0 classes rarely export this should not be necessary.
.SS "\fBprefix()\fP (experimental)"
.IX Subsection "prefix() (experimental)"
This function is only exported if you specify \f(CW\*(C`use aliased\*(C'\fR with no import
list.
.PP
.Vb 1
\&    use aliased;
.Ve
.PP
Sometimes you find you have a ton of packages in the same top-level namespace
and you want to alias them, but only use them on demand.  For example:
.PP
.Vb 2
\&    # instead of:
\&    MailVerwaltung::Client::Exception::REST::Response\->throw()
\&
\&    my $error = prefix(\*(AqMailVerwaltung::Client::Exception\*(Aq);
\&    $error\->(\*(AqREST::Response\*(Aq)\->throw();   # same as above
\&    $error\->()\->throw; # same as MailVerwaltung::Client::Exception\->throw
.Ve
.SS "Why \s-1OO\s0 Only?"
.IX Subsection "Why OO Only?"
Some people have asked why this code only support object-oriented modules
(\s-1OO\s0).  If I were to support normal subroutines, I would have to allow the
following syntax:
.PP
.Vb 2
\&  use aliased \*(AqSome::Really::Long::Module::Name\*(Aq;
\&  my $data = Name::data();
.Ve
.PP
That causes a serious problem.  The only (reasonable) way it can be done is to
handle the aliasing via typeglobs.  Thus, instead of a subroutine that
provides the class name, we alias one package to another (as the
namespace module does.)  However, we really don't want to simply
alias one package to another and wipe out namespaces willy-nilly.  By merely
exporting a single subroutine to a namespace, we minimize the issue.
.PP
Fortunately, this doesn't seem to be that much of a problem.  Non-OO modules
generally support exporting of the functions you need and this eliminates the
need for a module such as this.
.SH "EXPORT"
.IX Header "EXPORT"
This modules exports a subroutine with the same name as the \*(L"aliased\*(R" name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The namespace module.
.SH "THANKS"
.IX Header "THANKS"
Many thanks to Rentrak, Inc. (http://www.rentrak.com/) for graciously allowing
me to replicate the functionality of some of their internal code.
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2005 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Curtis Poe <ovid@cpan.org>
.IP "\(bu" 4
Ovid <curtis_ovid_poe@yahoo.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Grzegorz RoXniecki <xaerxess@gmail.com>
.IP "\(bu" 4
Father Chrysostomos <sprout@cpan.org>
.IP "\(bu" 4
Belden Lyman <belden@shutterstock.com>
.IP "\(bu" 4
Olivier Mengue\*' <dolmen@cpan.org>
