.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::Command 3"
.TH install::TempContent::Objects::mod_perl-2.0.9::docs::api::Apache2::Command 3 "2015-06-18" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache2::Command \- Perl API for accessing Apache module command information
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&  use Apache2::Module ();
\&  use Apache2::Command ();
\&  my $module = Apache2::Module::find_linked_module(\*(Aqmod_perl.c\*(Aq);
\&  
\&  for (my $cmd = $module\->cmds; $cmd; $cmd = $cmd\->next) {
\&      $cmd\->args_how();
\&      $cmd\->errmsg();
\&      $cmd\->name();
\&      $cmd\->req_override();
\&  }
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`Apache2::Command\*(C'\fR provides the Perl \s-1API\s0 for accessing Apache module
command information
.SH "API"
.IX Header "API"
\&\f(CW\*(C`Apache2::Command\*(C'\fR provides the following functions and/or methods:
.ie n .SS """args_how"""
.el .SS "\f(CWargs_how\fP"
.IX Subsection "args_how"
What the command expects as arguments:
.PP
.Vb 1
\&  $how = $cmd\->args_how();
.Ve
.ie n .IP "obj: $cmd ( ""Apache2::Command object"" )" 4
.el .IP "obj: \f(CW$cmd\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "obj: $cmd ( Apache2::Command object )"
.PD 0
.ie n .IP "ret: $how ( ""Apache2::Const :cmd_how constant"" )" 4
.el .IP "ret: \f(CW$how\fR ( \f(CWApache2::Const :cmd_how constant\fR )" 4
.IX Item "ret: $how ( Apache2::Const :cmd_how constant )"
.PD
The flag value representing the type of this command
(i.e. \f(CW\*(C`Apache2::Const::ITERATE\*(C'\fR, \f(CW\*(C`Apache2::Const::TAKE2\*(C'\fR).
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.ie n .SS """errmsg"""
.el .SS "\f(CWerrmsg\fP"
.IX Subsection "errmsg"
Get \fIusage\fR message for that command, in case of syntax errors:
.PP
.Vb 1
\&  $error = $cmd\->errmsg();
.Ve
.ie n .IP "obj: $cmd ( ""Apache2::Command object"" )" 4
.el .IP "obj: \f(CW$cmd\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "obj: $cmd ( Apache2::Command object )"
.PD 0
.ie n .IP "ret: $error ( string )" 4
.el .IP "ret: \f(CW$error\fR ( string )" 4
.IX Item "ret: $error ( string )"
.PD
The error message
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.ie n .SS """name"""
.el .SS "\f(CWname\fP"
.IX Subsection "name"
Get the name of this command:
.PP
.Vb 1
\&  $name = $cmd\->name();
.Ve
.ie n .IP "obj: $cmd ( ""Apache2::Command object"" )" 4
.el .IP "obj: \f(CW$cmd\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "obj: $cmd ( Apache2::Command object )"
.PD 0
.ie n .IP "ret: $name ( string )" 4
.el .IP "ret: \f(CW$name\fR ( string )" 4
.IX Item "ret: $name ( string )"
.PD
The command name
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.ie n .SS """next"""
.el .SS "\f(CWnext\fP"
.IX Subsection "next"
Get the next command in the chain of commands for this module:
.PP
.Vb 1
\&  $next = $cmd\->next();
.Ve
.ie n .IP "obj: $cmd ( ""Apache2::Command object"" )" 4
.el .IP "obj: \f(CW$cmd\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "obj: $cmd ( Apache2::Command object )"
.PD 0
.ie n .IP "ret: $next ( ""Apache2::Command object"" )" 4
.el .IP "ret: \f(CW$next\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "ret: $next ( Apache2::Command object )"
.PD
Returns the next command in the chain for this module, \f(CW\*(C`undef\*(C'\fR for
the last command.
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.ie n .SS """req_override"""
.el .SS "\f(CWreq_override\fP"
.IX Subsection "req_override"
What overrides need to be allowed to enable this command:
.PP
.Vb 1
\&  $override = $cmd\->req_override
.Ve
.ie n .IP "obj: $cmd ( ""Apache2::Command object"" )" 4
.el .IP "obj: \f(CW$cmd\fR ( \f(CWApache2::Command object\fR )" 4
.IX Item "obj: $cmd ( Apache2::Command object )"
.PD 0
.ie n .IP "ret: $override ( ""Apache2::Const :override constant"" )" 4
.el .IP "ret: \f(CW$override\fR ( \f(CWApache2::Const :override constant\fR )" 4
.IX Item "ret: $override ( Apache2::Const :override constant )"
.PD
The bit mask representing the overrides this command is allowed in
(i.e \f(CW\*(C`Apache2::Const::OR_ALL\*(C'\fR/\f(CW\*(C`Apache2::Const::ACCESS_CONF\*(C'\fR).
.IP "since: 2.0.00" 4
.IX Item "since: 2.0.00"
.PP
For example:
.PP
.Vb 3
\&  use Apache2::Const \-compile => qw(:override);
\&  $cmd\->req_override() & Apache2::Const::OR_AUTHCFG;
\&  $cmd\->req_override() & Apache2::Const::OR_LIMIT;
.Ve
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous
contributors.
