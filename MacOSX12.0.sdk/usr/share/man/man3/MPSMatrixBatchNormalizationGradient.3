.TH "MPSMatrixBatchNormalizationGradient" 3 "Mon Jul 9 2018" "Version MetalPerformanceShaders-119.3" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSMatrixBatchNormalizationGradient
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSMatrixBatchNormalization\&.h>\fP
.PP
Inherits \fBMPSMatrixBinaryKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(void) \- \fBsetNeuronType:parameterA:parameterB:parameterC:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNNeuronType\fP) \- \fBneuronType\fP"
.br
.ti -1c
.RI "(float) \- \fBneuronParameterA\fP"
.br
.ti -1c
.RI "(float) \- \fBneuronParameterB\fP"
.br
.ti -1c
.RI "(float) \- \fBneuronParameterC\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:gradientMatrix:inputMatrix:meanVector:varianceVector:gammaVector:betaVector:resultGradientForDataMatrix:resultGradientForGammaVector:resultGradientForBetaVector:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBcopyWithZone:device:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBsourceNumberOfFeatureVectors\fP"
.br
.ti -1c
.RI "NSUInteger \fBsourceInputFeatureChannels\fP"
.br
.ti -1c
.RI "float \fBepsilon\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework\&.
.PP
\fBA\fP kernel to compute the gradient of the batch normalization operation\&.
.PP
\fBA\fP \fBMPSMatrixBatchNormalizationGradient\fP object computes the results of backpropagating the gradients of a loss function with respect to the outputs of an \fBMPSMatrixBatchNormalization\fP object\&. The corresponding properties and data used by the \fBMPSMatrixBatchNormalizationGradient\fP object should correspond to those used by the forward \fBMPSMatrixBatchNormalization\fP object for which the gradient is being computed\&. 
.SH "Method Documentation"
.PP 
.SS "\- (nonnull instancetype) copyWithZone: (nullable NSZone *) zone(nullable id< MTLDevice >) device"
Make a copy of this kernel for a new device - 
.PP
\fBSee also:\fP
.RS 4
\fBMPSKernel\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP The NSZone in which to allocate the object 
.br
\fIdevice\fP The device for the new \fBMPSKernel\fP\&. If nil, then use self\&.device\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP pointer to a copy of this \fBMPSKernel\fP\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSMatrix\fP *__nonnull) gradientMatrix(\fBMPSMatrix\fP *__nonnull) inputMatrix(\fBMPSVector\fP *__nonnull) meanVector(\fBMPSVector\fP *__nonnull) varianceVector(\fBMPSVector\fP *__nullable) gammaVector(\fBMPSVector\fP *__nullable) betaVector(\fBMPSMatrix\fP *__nonnull) resultGradientForDataMatrix(\fBMPSVector\fP *__nullable) resultGradientForGammaVector(\fBMPSVector\fP *__nullable) resultGradientForBetaVector"
Encode a \fBMPSMatrixBatchNormalizationGradient\fP object to a command buffer and compute its gradient with respect to its input data\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The commandBuffer on which to encode the operation\&.
.br
\fIgradientMatrix\fP \fBA\fP matrix whose values represent the gradient of a loss function with respect to the results of a forward \fBMPSMatrixBatchNormalization\fP operation\&.
.br
\fIinputMatrix\fP \fBA\fP matrix containing the inputs to a forward \fBMPSMatrixBatchNormalization\fP operation for which the gradient values are to be computed\&.
.br
\fImeanVector\fP \fBA\fP vector containing the batch mean values\&. Should contain either the specified values used to compute the forward result, or the computed values resulting from the forward kernel execution\&.
.br
\fIvarianceVector\fP \fBA\fP vector containing the batch variance values\&. Should contain either the specified values used to compute the forward result, or the computed values resulting from the forward kernel execution\&.
.br
\fIgammaVector\fP \fBA\fP vector containing the gamma terms\&. Should be the same values as used when computing the forward result\&.
.br
\fIbetaVector\fP \fBA\fP vector containing the beta terms\&. Should be the same values as used when computing the forward result\&.
.br
\fIresultGradientForDataMatrix\fP The matrix containing the resulting gradient values\&.
.br
\fIresultGradientForGammaVector\fP If non-NULL the vector containing gradients for the gamma terms\&.
.br
\fIresultGradientForBetaVector\fP If non-NULL the vector containing gradients for the beta terms\&. 
.RE
.PP

.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  See \fBMPSKernel::initWithCoder\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSMatrixBatchNormalizationGradient\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSMatrixBatchNormalizationGradient\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSMatrixBatchNormalizationGradient\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSKernel\fP\&.
.SS "\- (float) neuronParameterA "
Getter funtion for neuronType set using setNeuronType:parameterA:parameterB:parameterC method 
.SS "\- (float) neuronParameterB "
Getter funtion for neuronType set using setNeuronType:parameterA:parameterB:parameterC method 
.SS "\- (float) neuronParameterC "
Getter funtion for neuronType set using setNeuronType:parameterA:parameterB:parameterC method 
.SS "\- (\fBMPSCNNNeuronType\fP) neuronType "
Getter funtion for neuronType set using setNeuronType:parameterA:parameterB:parameterC method 
.SS "\- (void) setNeuronType: (\fBMPSCNNNeuronType\fP) neuronType(float) parameterA(float) parameterB(float) parameterC"
Specifies a neuron activation function to be used\&.
.PP
This method can be used to add a neuron activation funtion of given type with associated scalar parameters \fBA\fP, B, and C that are shared across all output values\&. Note that this method can only be used to specify neurons which are specified by three (or fewer) parameters shared across all output values (or channels, in CNN nomenclature)\&. It is an error to call this method for neuron activation functions like MPSCNNNeuronTypePReLU, which require per-channel parameter values\&. An \fBMPSMatrixBatchNormalizationGradient\fP kernel is initialized with a default neuron function of MPSCNNNeuronTypeNone\&.
.PP
\fBParameters:\fP
.RS 4
\fIneuronType\fP Type of neuron activation function\&. For full list see \fBMPSCNNNeuronType\&.h\fP 
.br
\fIparameterA\fP parameterA of neuron activation that is shared across all output values\&. 
.br
\fIparameterB\fP parameterB of neuron activation that is shared across all output values\&. 
.br
\fIparameterC\fP parameterC of neuron activation that is shared across all output values\&. 
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\- epsilon\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
\fBA\fP small term added to the variance when normalizing the input\&. 
.SS "\- sourceInputFeatureChannels\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of feature channels in the input vectors\&. 
.SS "\- sourceNumberOfFeatureVectors\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of input vectors which make up the input array\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
