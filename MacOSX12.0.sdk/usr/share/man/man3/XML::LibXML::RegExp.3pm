.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::LibXML::RegExp 3"
.TH XML::LibXML::RegExp 3 "2014-02-01" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::LibXML::RegExp \- XML::LibXML::RegExp \- interface to libxml2 regular expressions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use XML::LibXML;
\&  my $compiled_re = XML::LibXML::RegExp\->new(\*(Aq[0\-9]{5}(\-[0\-9]{4})?\*(Aq);
\&  if ($compiled_re\->isDeterministic()) { ... }
\&  if ($compiled_re\->matches($string)) { ... }
\&
\&  $compiled_re = XML::LibXML::RegExp\->new( $regexp_str );
\&  $bool = $compiled_re\->matches($string);
\&  $bool = $compiled_re\->isDeterministic();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a perl interface to libxml2's implementation of regular expressions,
which are used e.g. for validation of \s-1XML\s0 Schema simple types (pattern facet).
.IP "\fBnew()\fR" 4
.IX Item "new()"
.Vb 1
\&  $compiled_re = XML::LibXML::RegExp\->new( $regexp_str );
.Ve
.Sp
The constructor takes a string containing a regular expression and returns a
compiled regexp object.
.IP "matches($string)" 4
.IX Item "matches($string)"
.Vb 1
\&  $bool = $compiled_re\->matches($string);
.Ve
.Sp
Given a string value, returns a true value if the value is matched by the
compiled regular expression.
.IP "\fBisDeterministic()\fR" 4
.IX Item "isDeterministic()"
.Vb 1
\&  $bool = $compiled_re\->isDeterministic();
.Ve
.Sp
Returns a true value if the regular expression is deterministic; returns false
otherwise. (See the definition of determinism in the \s-1XML\s0 spec (<http://www.w3.org/TR/REC\-xml/#determinism>))
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt Sergeant,
Christian Glahn,
Petr Pajas
.SH "VERSION"
.IX Header "VERSION"
2.0110
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2001\-2007, AxKit.com Ltd.
.PP
2002\-2006, Christian Glahn.
.PP
2006\-2009, Petr Pajas.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
