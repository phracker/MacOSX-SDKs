.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Render 3"
.TH Test2::EventFacet::Render 3 "2020-10-22" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::EventFacet::Render \- Facet that dictates how to render an event.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This facet is used to dictate how the event should be rendered by the standard
test2 rendering tools. If this facet is present then \s-1ONLY\s0 what is specified by
it will be rendered. It is assumed that anything important or note-worthy will
be present here, no other facets will be considered for rendering/display.
.PP
This facet is a list type, you can add as many items as needed.
.SH "FIELDS"
.IX Header "FIELDS"
.ie n .IP "$string = $render\->[#]\->{details}" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->{details}" 4
.IX Item "$string = $render->[#]->{details}"
.PD 0
.ie n .IP "$string = $render\->[#]\->\fBdetails()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->\fBdetails()\fR" 4
.IX Item "$string = $render->[#]->details()"
.PD
Human readable text for display.
.ie n .IP "$string = $render\->[#]\->{tag}" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->{tag}" 4
.IX Item "$string = $render->[#]->{tag}"
.PD 0
.ie n .IP "$string = $render\->[#]\->\fBtag()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->\fBtag()\fR" 4
.IX Item "$string = $render->[#]->tag()"
.PD
Tag that should prefix/identify the main text.
.ie n .IP "$string = $render\->[#]\->{facet}" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->{facet}" 4
.IX Item "$string = $render->[#]->{facet}"
.PD 0
.ie n .IP "$string = $render\->[#]\->\fBfacet()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$render\fR\->[#]\->\fBfacet()\fR" 4
.IX Item "$string = $render->[#]->facet()"
.PD
Optional, if the display text was generated from another facet this should
state what facet it was.
.ie n .IP "$mode = $render\->[#]\->{mode}" 4
.el .IP "\f(CW$mode\fR = \f(CW$render\fR\->[#]\->{mode}" 4
.IX Item "$mode = $render->[#]->{mode}"
.PD 0
.ie n .IP "$mode = $render\->[#]\->\fBmode()\fR" 4
.el .IP "\f(CW$mode\fR = \f(CW$render\fR\->[#]\->\fBmode()\fR" 4
.IX Item "$mode = $render->[#]->mode()"
.RS 4
.IP "calculated" 4
.IX Item "calculated"
.PD
Calculated means the facet was generated from another facet. Calculated facets
may be cleared and regenerated whenever the event state changes.
.IP "replace" 4
.IX Item "replace"
Replace means the facet is intended to replace the normal rendering of the
event.
.RE
.RS 4
.RE
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
