.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::RobotUA 3"
.TH LWP::RobotUA 3 "2020-04-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::RobotUA \- a class for well\-behaved Web robots
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use LWP::RobotUA;
\&  my $ua = LWP::RobotUA\->new(\*(Aqmy\-robot/0.1\*(Aq, \*(Aqme@foo.com\*(Aq);
\&  $ua\->delay(10);  # be very nice \-\- max one hit every ten minutes!
\&  ...
\&
\&  # Then just use it just like a normal LWP::UserAgent:
\&  my $response = $ua\->get(\*(Aqhttp://whatever.int/...\*(Aq);
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements a user agent that is suitable for robot
applications.  Robots should be nice to the servers they visit.  They
should consult the \fI/robots.txt\fR file to ensure that they are welcomed
and they should not make requests too frequently.
.PP
But before you consider writing a robot, take a look at
<URL:http://www.robotstxt.org/>.
.PP
When you use an \fILWP::RobotUA\fR object as your user agent, then you do not
really have to think about these things yourself; \f(CW\*(C`robots.txt\*(C'\fR files
are automatically consulted and obeyed, the server isn't queried
too rapidly, and so on.  Just send requests
as you do when you are using a normal \fILWP::UserAgent\fR
object (using \f(CW\*(C`$ua\->get(...)\*(C'\fR, \f(CW\*(C`$ua\->head(...)\*(C'\fR,
\&\f(CW\*(C`$ua\->request(...)\*(C'\fR, etc.), and this
special agent will make sure you are nice.
.SH "METHODS"
.IX Header "METHODS"
The LWP::RobotUA is a sub-class of LWP::UserAgent and implements the
same methods. In addition the following methods are provided:
.SS "new"
.IX Subsection "new"
.Vb 3
\&    my $ua = LWP::RobotUA\->new( %options )
\&    my $ua = LWP::RobotUA\->new( $agent, $from )
\&    my $ua = LWP::RobotUA\->new( $agent, $from, $rules )
.Ve
.PP
The LWP::UserAgent options \f(CW\*(C`agent\*(C'\fR and \f(CW\*(C`from\*(C'\fR are mandatory.  The
options \f(CW\*(C`delay\*(C'\fR, \f(CW\*(C`use_sleep\*(C'\fR and \f(CW\*(C`rules\*(C'\fR initialize attributes
private to the RobotUA.  If \f(CW\*(C`rules\*(C'\fR are not provided, then
\&\f(CW\*(C`WWW::RobotRules\*(C'\fR is instantiated providing an internal database of
\&\fIrobots.txt\fR.
.PP
It is also possible to just pass the value of \f(CW\*(C`agent\*(C'\fR, \f(CW\*(C`from\*(C'\fR and
optionally \f(CW\*(C`rules\*(C'\fR as plain positional arguments.
.SS "delay"
.IX Subsection "delay"
.Vb 2
\&    my $delay = $ua\->delay;
\&    $ua\->delay( $minutes );
.Ve
.PP
Get/set the minimum delay between requests to the same server, in
\&\fIminutes\fR.  The default is \f(CW1\fR minute.  Note that this number doesn't
have to be an integer; for example, this sets the delay to \f(CW10\fR seconds:
.PP
.Vb 1
\&    $ua\->delay(10/60);
.Ve
.SS "use_sleep"
.IX Subsection "use_sleep"
.Vb 2
\&    my $bool = $ua\->use_sleep;
\&    $ua\->use_sleep( $boolean );
.Ve
.PP
Get/set a value indicating whether the \s-1UA\s0 should \*(L"sleep\*(R" in LWP::RobotUA if
requests arrive too fast, defined as \f(CW\*(C`$ua\->delay\*(C'\fR minutes not passed since
last request to the given server.  The default is true.  If this value is
false then an internal \f(CW\*(C`SERVICE_UNAVAILABLE\*(C'\fR response will be generated.
It will have a \f(CW\*(C`Retry\-After\*(C'\fR header that indicates when it is \s-1OK\s0 to
send another request to this server.
.SS "rules"
.IX Subsection "rules"
.Vb 2
\&    my $rules = $ua\->rules;
\&    $ua\->rules( $rules );
.Ve
.PP
Set/get which \fIWWW::RobotRules\fR object to use.
.SS "no_visits"
.IX Subsection "no_visits"
.Vb 1
\&    my $num = $ua\->no_visits( $netloc )
.Ve
.PP
Returns the number of documents fetched from this server host. Yeah I
know, this method should probably have been named \f(CW\*(C`num_visits\*(C'\fR or
something like that. :\-(
.SS "host_wait"
.IX Subsection "host_wait"
.Vb 1
\&    my $num = $ua\->host_wait( $netloc )
.Ve
.PP
Returns the number of \fIseconds\fR (from now) you must wait before you can
make a new request to this host.
.SS "as_string"
.IX Subsection "as_string"
.Vb 1
\&    my $string = $ua\->as_string;
.Ve
.PP
Returns a string that describes the state of the \s-1UA.\s0
Mainly useful for debugging.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::UserAgent, WWW::RobotRules
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2004 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
