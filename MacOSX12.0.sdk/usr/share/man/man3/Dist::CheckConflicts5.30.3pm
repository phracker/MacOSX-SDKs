.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::CheckConflicts 3"
.TH Dist::CheckConflicts 3 "2014-04-03" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::CheckConflicts \- declare version conflicts for your dist
.SH "VERSION"
.IX Header "VERSION"
version 0.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    use Dist::CheckConflicts
\&        \-dist => \*(AqClass\-MOP\*(Aq,
\&        \-conflicts => {
\&            \*(AqMoose\*(Aq                => \*(Aq1.14\*(Aq,
\&            \*(Aqnamespace::autoclean\*(Aq => \*(Aq0.08\*(Aq,
\&        },
\&        \-also => [
\&            \*(AqPackage::Stash::Conflicts\*(Aq,
\&        ];
\&
\&    _\|_PACKAGE_\|_\->check_conflicts;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
One shortcoming of the \s-1CPAN\s0 clients that currently exist is that they have no
way of specifying conflicting downstream dependencies of modules. This module
attempts to work around this issue by allowing you to specify conflicting
versions of modules separately, and deal with them after the module is done
installing.
.PP
For instance, say you have a module \f(CW\*(C`Foo\*(C'\fR, and some other module \f(CW\*(C`Bar\*(C'\fR uses
\&\f(CW\*(C`Foo\*(C'\fR. If \f(CW\*(C`Foo\*(C'\fR were to change its \s-1API\s0 in a non-backwards-compatible way,
this would cause \f(CW\*(C`Bar\*(C'\fR to break until it is updated to use the new \s-1API.\s0 \f(CW\*(C`Foo\*(C'\fR
can't just depend on the fixed version of \f(CW\*(C`Bar\*(C'\fR, because this will cause a
circular dependency (because \f(CW\*(C`Bar\*(C'\fR is already depending on \f(CW\*(C`Foo\*(C'\fR), and this
doesn't express intent properly anyway \- \f(CW\*(C`Foo\*(C'\fR doesn't use \f(CW\*(C`Bar\*(C'\fR at all. The
ideal solution would be for there to be a way to specify conflicting versions
of modules in a way that would let \s-1CPAN\s0 clients update conflicting modules
automatically after an existing module is upgraded, but until that happens,
this module will allow users to do this manually.
.PP
This module accepts a hash of options passed to its \f(CW\*(C`use\*(C'\fR statement, with
these keys being valid:
.IP "\-conflicts" 4
.IX Item "-conflicts"
A hashref of conflict specifications, where keys are module names, and values
are the last broken version \- any version greater than the specified version
should work.
.IP "\-also" 4
.IX Item "-also"
Additional modules to get conflicts from (potentially recursively). This should
generally be a list of modules which use Dist::CheckConflicts, which correspond
to the dists that your dist depends on. (In an ideal world, this would be
intuited directly from your dependency list, but the dependency list isn't
available outside of build time).
.IP "\-dist" 4
.IX Item "-dist"
The name of the distribution, to make the error message from check_conflicts
more user-friendly.
.PP
The methods listed below are exported by this module into the module that uses
it, so you should call these methods on your module, not Dist::CheckConflicts.
.PP
As an example, this command line can be used to update your modules, after
installing the \f(CW\*(C`Foo\*(C'\fR dist (assuming that \f(CW\*(C`Foo::Conflicts\*(C'\fR is the module in
the \f(CW\*(C`Foo\*(C'\fR dist which uses Dist::CheckConflicts):
.PP
.Vb 2
\&    perl \-MFoo::Conflicts \-e\*(Aqprint "$_\en"
\&        for map { $_\->{package} } Foo::Conflicts\->calculate_conflicts\*(Aq | cpanm
.Ve
.PP
As an added bonus, loading your conflicts module will provide warnings at
runtime if conflicting modules are detected (regardless of whether they are
loaded before or afterwards).
.SH "METHODS"
.IX Header "METHODS"
.SS "conflicts"
.IX Subsection "conflicts"
Returns the conflict specification (the \f(CW\*(C`\-conflicts\*(C'\fR parameter to
\&\f(CW\*(C`import()\*(C'\fR), as a hash.
.SS "dist"
.IX Subsection "dist"
Returns the dist name (either as specified by the \f(CW\*(C`\-dist\*(C'\fR parameter to
\&\f(CW\*(C`import()\*(C'\fR, or the package name which \f(CW\*(C`use\*(C'\fRd this module).
.SS "check_conflicts"
.IX Subsection "check_conflicts"
Examine the modules that are currently installed, and throw an exception with
useful information if any modules are at versions which conflict with the dist.
.SS "calculate_conflicts"
.IX Subsection "calculate_conflicts"
Examine the modules that are currently installed, and return a list of modules
which conflict with the dist. The modules will be returned as a list of
hashrefs, each containing \f(CW\*(C`package\*(C'\fR, \f(CW\*(C`installed\*(C'\fR, and \f(CW\*(C`required\*(C'\fR keys.
.SH "BUGS"
.IX Header "BUGS"
No known bugs.
.PP
Please report any bugs to GitHub Issues at
<https://github.com/doy/dist\-checkconflicts/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Install::CheckConflicts
.PP
Dist::Zilla::Plugin::Conflicts
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find this documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Dist::CheckConflicts
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
MetaCPAN
.Sp
<https://metacpan.org/release/Dist\-CheckConflicts>
.IP "\(bu" 4
Github
.Sp
<https://github.com/doy/dist\-checkconflicts>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist\-CheckConflicts>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Dist\-CheckConflicts>
.SH "AUTHOR"
.IX Header "AUTHOR"
Jesse Luehrs <doy@tozt.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Jesse Luehrs.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
