.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPANPLUS::Internals::Report 3pm"
.TH CPANPLUS::Internals::Report 3pm "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPANPLUS::Internals::Report \- internals for sending test reports
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  ### enable test reporting
\&  $cb\->configure_object\->set_conf( cpantest => 1 );
\&
\&  ### set custom mx host, shouldn\*(Aqt normally be needed
\&  $cb\->configure_object\->set_conf( cpantest_mx => \*(Aqsmtp.example.com\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides all the functionality to send test reports to
\&\f(CW\*(C`http://testers.cpan.org\*(C'\fR using the \f(CW\*(C`Test::Reporter\*(C'\fR module.
.PP
All methods will be called automatically if you have \f(CW\*(C`CPANPLUS\*(C'\fR
configured to enable test reporting (see the \f(CW\*(C`SYNOPSIS\*(C'\fR).
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$bool = $cb\->_have_query_report_modules"
.el .SS "\f(CW$bool\fP = \f(CW$cb\fP\->_have_query_report_modules"
.IX Subsection "$bool = $cb->_have_query_report_modules"
This function checks if all the required modules are here for querying
reports. It returns true and loads them if they are, or returns false
otherwise.
.ie n .SS "$bool = $cb\->_have_send_report_modules"
.el .SS "\f(CW$bool\fP = \f(CW$cb\fP\->_have_send_report_modules"
.IX Subsection "$bool = $cb->_have_send_report_modules"
This function checks if all the required modules are here for sending
reports. It returns true and loads them if they are, or returns false
otherwise.
.ie n .SS "@list = $cb\->_query_report( module => $modobj, [all_versions => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )"
.el .SS "\f(CW@list\fP = \f(CW$cb\fP\->_query_report( module => \f(CW$modobj\fP, [all_versions => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )"
.IX Subsection "@list = $cb->_query_report( module => $modobj, [all_versions => BOOL, verbose => BOOL] )"
This function queries the \s-1CPAN\s0 testers database at
\&\fIhttp://testers.cpan.org/\fR for test results of specified module objects,
module names or distributions.
.PP
The optional argument \f(CW\*(C`all_versions\*(C'\fR controls whether all versions of
a given distribution should be grabbed.  It defaults to false
(fetching only reports for the current version).
.PP
Returns the a list with the following data structures (for \s-1CPANPLUS\s0
version 0.042) on success, or false on failure. The contents of the
data structure depends on what \fIhttp://testers.cpan.org\fR returns,
but generally looks like this:
.PP
.Vb 10
\&          {
\&            \*(Aqgrade\*(Aq => \*(AqPASS\*(Aq,
\&            \*(Aqdist\*(Aq => \*(AqCPANPLUS\-0.042\*(Aq,
\&            \*(Aqplatform\*(Aq => \*(Aqi686\-pld\-linux\-thread\-multi\*(Aq
\&            \*(Aqdetails\*(Aq => \*(Aqhttp://nntp.x.perl.org/group/perl.cpan.testers/98316\*(Aq
\&            ...
\&          },
\&          {
\&            \*(Aqgrade\*(Aq => \*(AqPASS\*(Aq,
\&            \*(Aqdist\*(Aq => \*(AqCPANPLUS\-0.042\*(Aq,
\&            \*(Aqplatform\*(Aq => \*(Aqi686\-linux\-thread\-multi\*(Aq
\&            \*(Aqdetails\*(Aq => \*(Aqhttp://nntp.x.perl.org/group/perl.cpan.testers/99416\*(Aq
\&            ...
\&          },
\&          {
\&            \*(Aqgrade\*(Aq => \*(AqFAIL\*(Aq,
\&            \*(Aqdist\*(Aq => \*(AqCPANPLUS\-0.042\*(Aq,
\&            \*(Aqplatform\*(Aq => \*(Aqcygwin\-multi\-64int\*(Aq,
\&            \*(Aqdetails\*(Aq => \*(Aqhttp://nntp.x.perl.org/group/perl.cpan.testers/99371\*(Aq
\&            ...
\&          },
\&          {
\&            \*(Aqgrade\*(Aq => \*(AqFAIL\*(Aq,
\&            \*(Aqdist\*(Aq => \*(AqCPANPLUS\-0.042\*(Aq,
\&            \*(Aqplatform\*(Aq => \*(Aqi586\-linux\*(Aq,
\&            \*(Aqdetails\*(Aq => \*(Aqhttp://nntp.x.perl.org/group/perl.cpan.testers/99396\*(Aq
\&            ...
\&          },
.Ve
.PP
The status of the test can be one of the following:
\&\s-1UNKNOWN, PASS, FAIL\s0 or \s-1NA \s0(not applicable).
.ie n .SS "$bool = $cb\->_send_report( module => $modobj, buffer => $make_output, failed => \s-1BOOL,\s0 [save => \s-1BOOL,\s0 address => $email_to, verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0]);"
.el .SS "\f(CW$bool\fP = \f(CW$cb\fP\->_send_report( module => \f(CW$modobj\fP, buffer => \f(CW$make_output\fP, failed => \s-1BOOL,\s0 [save => \s-1BOOL,\s0 address => \f(CW$email_to\fP, verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0]);"
.IX Subsection "$bool = $cb->_send_report( module => $modobj, buffer => $make_output, failed => BOOL, [save => BOOL, address => $email_to, verbose => BOOL, force => BOOL]);"
This function sends a testers report to \f(CW\*(C`cpan\-testers@perl.org\*(C'\fR for a
particular distribution.
It returns true on success, and false on failure.
.PP
It takes the following options:
.IP "module" 4
.IX Item "module"
The module object of this particular distribution
.IP "buffer" 4
.IX Item "buffer"
The output buffer from the 'make/make test' process
.IP "failed" 4
.IX Item "failed"
Boolean indicating if the 'make/make test' went wrong
.IP "save" 4
.IX Item "save"
Boolean indicating if the report should be saved locally instead of
mailed out. If provided, this function will return the location the
report was saved to, rather than a simple boolean '\s-1TRUE\s0'.
.Sp
Defaults to false.
.IP "address" 4
.IX Item "address"
The email address to mail the report for. You should never need to
override this, but it might be useful for debugging purposes.
.Sp
Defaults to \f(CW\*(C`cpan\-testers@perl.org\*(C'\fR.
.IP "verbose" 4
.IX Item "verbose"
Boolean indicating on whether or not to be verbose.
.Sp
Defaults to your configuration settings
.IP "force" 4
.IX Item "force"
Boolean indicating whether to force the sending, even if the max
amount of reports for fails have already been reached, or if you
may already have sent it before.
.Sp
Defaults to your configuration settings
