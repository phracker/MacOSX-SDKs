.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::ResultSourceProxy::Table 3"
.TH DBIx::Class::ResultSourceProxy::Table 3 "2018-01-29" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::ResultSourceProxy::Table \- provides a classdata table
object and method proxies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  _\|_PACKAGE_\|_\->table(\*(Aqcd\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/cdid artist title year/);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqcdid\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "add_columns"
.IX Subsection "add_columns"
.Vb 1
\&  _\|_PACKAGE_\|_\->add_columns(qw/cdid artist title year/);
.Ve
.PP
Adds columns to the current class and creates accessors for them.
.SS "table"
.IX Subsection "table"
.Vb 1
\&  _\|_PACKAGE_\|_\->table(\*(Aqtbl_name\*(Aq);
.Ve
.PP
Gets or sets the table name.
.SS "table_class"
.IX Subsection "table_class"
.Vb 1
\&  _\|_PACKAGE_\|_\->table_class(\*(AqDBIx::Class::ResultSource::Table\*(Aq);
.Ve
.PP
Gets or sets the table class used for construction and validation.
.SS "has_column"
.IX Subsection "has_column"
.Vb 1
\&  if ($obj\->has_column($col)) { ... }
.Ve
.PP
Returns 1 if the class has a column of this name, 0 otherwise.
.SS "column_info"
.IX Subsection "column_info"
.Vb 1
\&  my $info = $obj\->column_info($col);
.Ve
.PP
Returns the column metadata hashref for a column. For a description of
the various types of column data in this hashref, see
\&\*(L"add_column\*(R" in DBIx::Class::ResultSource
.SS "columns"
.IX Subsection "columns"
.Vb 1
\&  my @column_names = $obj\->columns;
.Ve
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional \s-1DBIC\s0 resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (\s-1DBIC\s0) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
