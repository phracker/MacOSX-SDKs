.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPI::Token::Regexp 3"
.TH PPI::Token::Regexp 3 "2019-07-09" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPI::Token::Regexp \- Regular expression abstract base class
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\&  PPI::Token::Regexp
\&  isa PPI::Token
\&      isa PPI::Element
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`PPI::Token::Regexp\*(C'\fR class is never instantiated, and simply
provides a common abstract base class for the three regular expression
classes. These being:
.IP "m// \- PPI::Token::Regexp::Match" 2
.IX Item "m// - PPI::Token::Regexp::Match"
.PD 0
.IP "s/// \- PPI::Token::Regexp::Substitute" 2
.IX Item "s/// - PPI::Token::Regexp::Substitute"
.IP "tr/// \- PPI::Token::Regexp::Transliterate" 2
.IX Item "tr/// - PPI::Token::Regexp::Transliterate"
.PD
.PP
The names are hopefully obvious enough not to have to explain what
each class is. See their pages for more details.
.PP
To save some confusion, it's worth pointing out here that \f(CW\*(C`qr//\*(C'\fR is
\&\fBnot\fR a regular expression (which \s-1PPI\s0 takes to mean something that
will actually examine or modify a string), but rather a quote-like
operator that acts as a constructor for compiled Regexp objects.
.SH "METHODS"
.IX Header "METHODS"
The following methods are inherited by this class' offspring:
.SS "get_match_string"
.IX Subsection "get_match_string"
The \f(CW\*(C`get_match_string\*(C'\fR method returns the portion of the regexp that
performs the match.
.SS "get_substitute_string"
.IX Subsection "get_substitute_string"
The \f(CW\*(C`get_substitute_string\*(C'\fR method returns the portion of the regexp
that is substituted for the match, if any.  If the regexp does not
substitute, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "get_modifiers"
.IX Subsection "get_modifiers"
The \f(CW\*(C`get_modifiers\*(C'\fR method returns the modifiers of the regexp.
.SS "get_delimiters"
.IX Subsection "get_delimiters"
The \f(CW\*(C`get_delimiters\*(C'\fR method returns the delimiters of the regexp as
an array. The first element is the delimiters of the match string, and
the second element (if any) is the delimiters of the substitute string
(if any).
.SH "SUPPORT"
.IX Header "SUPPORT"
See the support section in the main module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
