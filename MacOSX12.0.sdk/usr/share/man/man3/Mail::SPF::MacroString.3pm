.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SPF::MacroString 3"
.TH Mail::SPF::MacroString 3 "2021-08-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SPF::MacroString \- SPF record macro string class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Providing the expansion context early"
.IX Subsection "Providing the expansion context early"
.Vb 1
\&    use Mail::SPF::MacroString;
\&
\&    my $macrostring = Mail::SPF::MacroString\->new(
\&        text    => \*(Aq%{ir}.%{v}._spf.%{d2}\*(Aq,
\&        server  => $server,
\&        request => $request
\&    );
\&
\&    my $expanded = $macrostring\->expand;
.Ve
.SS "Providing the expansion context late"
.IX Subsection "Providing the expansion context late"
.Vb 1
\&    use Mail::SPF::MacroString;
\&
\&    my $macrostring = Mail::SPF::MacroString\->new(
\&        text    => \*(Aq%{ir}.%{v}._spf.%{d2}\*(Aq
\&    );
\&
\&    my $expanded1 = $macrostring\->expand($server, $request1);
\&
\&    $macrostring\->context($server, $request2);
\&    my $expanded2 = $macrostring\->expand;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object of class \fBMail::SPF::MacroString\fR represents a macro string that
can be expanded to a plain string in the context of an \s-1SPF\s0 request.
.SS "Constructor"
.IX Subsection "Constructor"
The following constructor is provided:
.IP "\fBnew(%options)\fR: returns \fIMail::SPF::MacroString\fR" 4
.IX Item "new(%options): returns Mail::SPF::MacroString"
Creates a new \s-1SPF\s0 record macro string object.
.Sp
\&\f(CW%options\fR is a list of key/value pairs representing any of the following
options:
.RS 4
.IP "\fBtext\fR" 4
.IX Item "text"
\&\fIRequired\fR.  The unexpanded text of the new macro string.
.IP "\fBserver\fR" 4
.IX Item "server"
The \fIMail::SPF::Server\fR object that is to be used when expanding the macro
string.  A server object need not be attached statically to the macro string;
it can be specified dynamically when calling the \f(CW\*(C`expand\*(C'\fR method.
.IP "\fBrequest\fR" 4
.IX Item "request"
The \fIMail::SPF::Request\fR object that is to be used when expanding the macro
string.  A request object need not be attached statically to the macro string;
it can be specified dynamically when calling the \f(CW\*(C`expand\*(C'\fR method.
.IP "\fBis_explanation\fR" 4
.IX Item "is_explanation"
A \fIboolean\fR denoting whether the macro string is an explanation string
obtained via an \f(CW\*(C`exp\*(C'\fR modifier.  If \fBtrue\fR, the \f(CW\*(C`c\*(C'\fR, \f(CW\*(C`r\*(C'\fR, and \f(CW\*(C`t\*(C'\fR macros
may appear in the macro string, otherwise they may not, and if they do, a
\&\fIMail::SPF::EInvalidMacro\fR exception will be thrown when the macro string is
expanded.  Defaults to \fBfalse\fR.
.RE
.RS 4
.RE
.SS "Instance methods"
.IX Subsection "Instance methods"
The following instance methods are provided:
.IP "\fBtext\fR: returns \fIstring\fR" 4
.IX Item "text: returns string"
Returns the unexpanded text of the macro string.
.IP "\fBcontext($server, \f(CB$request\fB)\fR: throws \fIMail::SPF::EOptionRequired\fR" 4
.IX Item "context($server, $request): throws Mail::SPF::EOptionRequired"
Attaches the given \fIMail::SPF::Server\fR and \fIMail::SPF::Request\fR objects as
the context for the macro string.
.IP "\fBexpand\fR: returns \fIstring\fR; throws \fIMail::SPF::EMacroExpansionCtxRequired\fR, \fIMail::SPF::EInvalidMacroString\fR, \fIMail::SPF::Result::PermError\fR" 4
.IX Item "expand: returns string; throws Mail::SPF::EMacroExpansionCtxRequired, Mail::SPF::EInvalidMacroString, Mail::SPF::Result::PermError"
.PD 0
.IP "\fBexpand($server, \f(CB$request\fB)\fR: returns \fIstring\fR; throws \fIMail::SPF::EMacroExpansionCtxRequired\fR, \fIMail::SPF::EInvalidMacroString\fR, \fIMail::SPF::Result::PermError\fR" 4
.IX Item "expand($server, $request): returns string; throws Mail::SPF::EMacroExpansionCtxRequired, Mail::SPF::EInvalidMacroString, Mail::SPF::Result::PermError"
.PD
Expands the text of the macro string using either the context specified through
an earlier call to the \f(CW\*(C`context()\*(C'\fR method, or the given context, and returns
the resulting string.  See \s-1RFC 4408, 8,\s0 for how macros are expanded.
.IP "\fBis_explanation\fR: returns \fIboolean\fR" 4
.IX Item "is_explanation: returns boolean"
Returns \fBtrue\fR if the macro string is an explanation string obtained via an
\&\f(CW\*(C`exp\*(C'\fR modifier.  See the description of the \*(L"new\*(R" constructor's
\&\f(CW\*(C`is_explanation\*(C'\fR option.
.IP "\fBstringify\fR: returns \fIstring\fR" 4
.IX Item "stringify: returns string"
Returns the expanded text of the macro string if a context is attached to the
object.  Returns the unexpanded text otherwise.  You can simply use a
Mail::SPF::MacroString object as a string for the same effect, see
\&\*(L"\s-1OVERLOADING\*(R"\s0.
.SH "OVERLOADING"
.IX Header "OVERLOADING"
If a Mail::SPF::MacroString object is used as a \fIstring\fR, the \f(CW\*(C`stringify\*(C'\fR
method is used to convert the object into a string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::SPF, Mail::SPF::Record, Mail::SPF::Server, Mail::SPF::Request
.PP
<http://tools.ietf.org/html/rfc4408>
.PP
For availability, support, and license information, see the \s-1README\s0 file
included with Mail::SPF.
.SH "AUTHORS"
.IX Header "AUTHORS"
Julian Mehnle <julian@mehnle.net>, Shevek <cpan@anarres.org>
