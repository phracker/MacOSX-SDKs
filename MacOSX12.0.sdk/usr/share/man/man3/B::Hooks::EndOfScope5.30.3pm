.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "B::Hooks::EndOfScope 3"
.TH B::Hooks::EndOfScope 3 "2018-04-21" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Hooks::EndOfScope \- Execute code after a scope finished compilation
.SH "VERSION"
.IX Header "VERSION"
version 0.24
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    on_scope_end { ... };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to execute code when perl finished compiling the
surrounding scope.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "on_scope_end"
.IX Subsection "on_scope_end"
.Vb 1
\&    on_scope_end { ... };
\&
\&    on_scope_end $code;
.Ve
.PP
Registers \f(CW$code\fR to be executed after the surrounding scope has been
compiled.
.PP
This is exported by default. See Sub::Exporter on how to customize it.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Pure-perl mode caveat"
.IX Subsection "Pure-perl mode caveat"
This caveat applies to \fBany\fR version of perl where Variable::Magic
is unavailable or otherwise disabled.
.PP
While Variable::Magic has access to some very dark sorcery to make it
possible to throw an exception from within a callback, the pure-perl
implementation does not have access to these hacks. Therefore, what
would have been a \fBcompile-time exception\fR is instead \fBconverted to a
warning\fR, and your execution will continue as if the exception never
happened.
.PP
To explicitly request an \s-1XS\s0 (or \s-1PP\s0) implementation one has two choices. Either
to import from the desired implementation explicitly:
.PP
.Vb 3
\& use B::Hooks::EndOfScope::XS
\&   or
\& use B::Hooks::EndOfScope::PP
.Ve
.PP
or by setting \f(CW$ENV{B_HOOKS_ENDOFSCOPE_IMPLEMENTATION}\fR to either \f(CW\*(C`XS\*(C'\fR or
\&\f(CW\*(C`PP\*(C'\fR.
.SS "Perl 5.8.0 ~ 5.8.3"
.IX Subsection "Perl 5.8.0 ~ 5.8.3"
Due to a core interpreter bug
 <https://rt.perl.org/Public/Bug/Display.html?id=27040#txn-82797> present in
older perl versions, the implementation of B::Hooks::EndOfScope deliberately
leaks a single empty hash for every scope being cleaned. This is done to
avoid the memory corruption associated with the bug mentioned above.
.PP
In order to stabilize this workaround use of Variable::Magic is disabled
on perls prior to version 5.8.4. On such systems loading/requesting
B::Hooks::EndOfScope::XS explicitly will result in a compile-time
exception.
.SS "Perl versions 5.6.x"
.IX Subsection "Perl versions 5.6.x"
Versions of perl before 5.8.0 lack a feature allowing changing the visibility
of \f(CW\*(C`%^H\*(C'\fR via setting bit 17 within \f(CW$^H\fR. As such the only way to achieve
the effect necessary for this module to work, is to use the \f(CW\*(C`local\*(C'\fR operator
explicitly on these platforms. This might lead to unexpected interference
with other scope-driven libraries relying on the same mechanism. On the flip
side there are no such known incompatibilities at the time this note was
written.
.PP
For further details on the unavailable behavior please refer to the test
file \fIt/02\-localise.t\fR included with the distribution.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sub::Exporter
.PP
Variable::Magic
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=B-Hooks-EndOfScope>
(or bug\-B\-Hooks\-EndOfScope@rt.cpan.org <mailto:bug-B-Hooks-EndOfScope@rt.cpan.org>).
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Peter Rabbitson <ribasushi@leporine.io>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.IP "\(bu" 4
Christian Walde <walde.christian@googlemail.com>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.IP "\(bu" 4
Graham Knop <haarg@haarg.org>
.IP "\(bu" 4
Simon Wilper <sxw@chronowerks.de>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2008 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
