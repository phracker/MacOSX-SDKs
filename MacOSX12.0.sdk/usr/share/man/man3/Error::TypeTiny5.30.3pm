.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Error::TypeTiny 3"
.TH Error::TypeTiny 3 "2020-10-28" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Error::TypeTiny \- exceptions for Type::Tiny and friends
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   use Data::Dumper;
\&   use Try::Tiny;
\&   use Types::Standard qw(Str);
\&   
\&   try {
\&      Str\->assert_valid(undef);
\&   }
\&   catch {
\&      my $exception = shift;
\&      warn "Encountered Error: $exception";
\&      warn Dumper($exception\->explain)
\&         if $exception\->isa("Error::TypeTiny::Assertion");
\&   };
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When Type::Tiny and its related modules encounter an error, they throw an
exception object. These exception objects inherit from Error::TypeTiny.
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP """new(%attributes)""" 4
.el .IP "\f(CWnew(%attributes)\fR" 4
.IX Item "new(%attributes)"
Moose-style constructor function.
.ie n .IP """throw(%attributes)""" 4
.el .IP "\f(CWthrow(%attributes)\fR" 4
.IX Item "throw(%attributes)"
Constructs an exception and passes it to \f(CW\*(C`die\*(C'\fR.
.Sp
Automatically populates \f(CW\*(C`context\*(C'\fR and \f(CW\*(C`stack_trace\*(C'\fR if appropriate.
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP """message""" 4
.el .IP "\f(CWmessage\fR" 4
.IX Item "message"
The error message.
.ie n .IP """context""" 4
.el .IP "\f(CWcontext\fR" 4
.IX Item "context"
Hashref containing the package, file and line that generated the error.
.ie n .IP """stack_trace""" 4
.el .IP "\f(CWstack_trace\fR" 4
.IX Item "stack_trace"
A more complete stack trace. This feature requires Devel::StackTrace;
use the \f(CW$StackTrace\fR package variable to switch it on.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """to_string""" 4
.el .IP "\f(CWto_string\fR" 4
.IX Item "to_string"
Returns the message, followed by the context if it is set.
.SS "Functions"
.IX Subsection "Functions"
.ie n .IP """Error::TypeTiny::croak($format, @args)""" 4
.el .IP "\f(CWError::TypeTiny::croak($format, @args)\fR" 4
.IX Item "Error::TypeTiny::croak($format, @args)"
Functional-style shortcut to \f(CW\*(C`throw\*(C'\fR method. Takes an \f(CW\*(C`sprintf\*(C'\fR\-style
format string and optional arguments to construct the \f(CW\*(C`message\*(C'\fR.
.SS "Overloading"
.IX Subsection "Overloading"
.IP "\(bu" 4
Stringification is overloaded to call \f(CW\*(C`to_string\*(C'\fR.
.SS "Package Variables"
.IX Subsection "Package Variables"
.ie n .IP "%Error::TypeTiny::CarpInternal" 4
.el .IP "\f(CW%Error::TypeTiny::CarpInternal\fR" 4
.IX Item "%Error::TypeTiny::CarpInternal"
Serves a similar purpose to \f(CW%Carp::CarpInternal\fR.
.ie n .IP "$Error::TypeTiny::StackTrace" 4
.el .IP "\f(CW$Error::TypeTiny::StackTrace\fR" 4
.IX Item "$Error::TypeTiny::StackTrace"
Boolean to toggle stack trace generation.
.ie n .IP "$Error::TypeTiny::LastError" 4
.el .IP "\f(CW$Error::TypeTiny::LastError\fR" 4
.IX Item "$Error::TypeTiny::LastError"
A reference to the last exception object thrown.
.SH "CAVEATS"
.IX Header "CAVEATS"
Although Error::TypeTiny objects are thrown for errors produced by
Type::Tiny, that doesn't mean every time you use Type::Tiny you'll get
Error::TypeTinys whenever you want.
.PP
For example, if you use a Type::Tiny type constraint in a Moose attribute,
Moose will not call the constraint's \f(CW\*(C`assert_valid\*(C'\fR method (which throws
an exception). Instead it will call \f(CW\*(C`check\*(C'\fR and \f(CW\*(C`get_message\*(C'\fR (which do
not), and will \f(CW\*(C`confess\*(C'\fR an error message of its own. (The \f(CW$LastError\fR
package variable may save your bacon.)
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Type\-Tiny>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Error::TypeTiny::Assertion,
Error::TypeTiny::WrongNumberOfParameters.
.PP
Try::Tiny, Try::Tiny::ByClass.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2020 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
