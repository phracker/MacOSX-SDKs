.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Constraint::Structurable 3"
.TH Specio::Constraint::Structurable 3 "2020-03-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Constraint::Structurable \- A class which represents structurable constraints
.SH "VERSION"
.IX Header "VERSION"
version 0.46
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $tuple = t(\*(AqTuple\*(Aq);
\&
\&    my $tuple_of_str_int = $tuple\->parameterize( of => [ t(\*(AqStr\*(Aq), t(\*(AqInt\*(Aq) ] );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements the \s-1API\s0 for structurable types like \f(CW\*(C`Dict\*(C'\fR, \f(CW\*(C`Map\*(C'\fR< and
\&\f(CW\*(C`Tuple\*(C'\fR.
.SH "API"
.IX Header "API"
This class implements the same \s-1API\s0 as Specio::Constraint::Simple, with a few
additions.
.SS "Specio::Constraint::Structurable\->new(...)"
.IX Subsection "Specio::Constraint::Structurable->new(...)"
This class's constructor accepts two additional parameters:
.IP "\(bu" 4
parameterization_args_builder
.Sp
This is a subroutine that takes the values passed to \f(CW\*(C`of\*(C'\fR and returns a hash
of named arguments. These arguments will then be passed into the
\&\f(CW\*(C`structured_constraint_generator\*(C'\fR or \f(CW\*(C`structured_inline_generator\*(C'\fR.
.Sp
This should also do argument checking to make sure that the argument passed
are valid. For example, the \f(CW\*(C`Tuple\*(C'\fR type turns the arrayref passed to \f(CW\*(C`of\*(C'\fR
into a hash, along the way checking that the caller did not do things like
interleave optional and required elements or mix optional and slurpy together
in the definition.
.Sp
This parameter is required.
.IP "\(bu" 4
name_builder
.Sp
This is a subroutine that is called to generate a name for the structured type
when it is created. This will be called as a method on the
\&\f(CW\*(C`Specio::Constraint::Structurable\*(C'\fR object. It will be passed the hash of
arguments returned by the \f(CW\*(C`parameterization_args_builder\*(C'\fR.
.Sp
This parameter is required.
.IP "\(bu" 4
structured_constraint_generator
.Sp
This is a subroutine that generates a new constraint subroutine when the type
is structured.
.Sp
It will be called as a method on the type and will be passed the hash of
arguments returned by the \f(CW\*(C`parameterization_args_builder\*(C'\fR.
.Sp
This parameter is mutually exclusive with the \f(CW\*(C`structured_inline_generator\*(C'\fR
parameter.
.Sp
This parameter or the \f(CW\*(C`structured_inline_generator\*(C'\fR parameter is required.
.IP "\(bu" 4
structured_inline_generator
.Sp
This is a subroutine that generates a new inline generator subroutine when the
type is structured.
.Sp
It will be called as a method on the Specio::Constraint::Structured object
when that object needs to generate an inline constraint. It will receive the
type parameter as the first argument and the variable name as a string as the
second.
.Sp
The remaining arguments will be the parameter hash returned by the
\&\f(CW\*(C`parameterization_args_builder\*(C'\fR.
.Sp
This probably seems fairly confusing, so looking at the examples in the
Specio::Library::Structured::* code may be helpful.
.Sp
This parameter is mutually exclusive with the
\&\f(CW\*(C`structured_constraint_generator\*(C'\fR parameter.
.Sp
This parameter or the \f(CW\*(C`structured_constraint_generator\*(C'\fR parameter is
required.
.ie n .SS "$type\->parameterize(...)"
.el .SS "\f(CW$type\fP\->parameterize(...)"
.IX Subsection "$type->parameterize(...)"
This method takes two arguments. The \f(CW\*(C`of\*(C'\fR argument should be an object which
does the Specio::Constraint::Role::Interface role, and is required.
.PP
The other argument, \f(CW\*(C`declared_at\*(C'\fR, is optional. If it is not given, then a
new Specio::DeclaredAt object is creating using a call stack depth of 1.
.PP
This method returns a new Specio::Constraint::Structured object.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2020 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
