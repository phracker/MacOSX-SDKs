'\"
'\" Generated from file '/System/Volumes/Data/SWE/macOS/BuildRoots/6b362bc7f6/Library/Caches/com.apple.xbs/Sources/tcl/tcl-134/tcl_ext/tcllib/tcllib/modules/struct/prioqueue.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2003 Michael Schlenker <mic42@users.sourceforge.net>
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "struct::prioqueue" n 1.4 struct "Tcl Data Structures"
.BS
.SH NAME
struct::prioqueue \- Create and manipulate prioqueue objects
.SH SYNOPSIS
package require \fBTcl  8.2\fR
.sp
package require \fBstruct::prioqueue  ?1.4?\fR
.sp
\fB::struct::prioqueue\fR ?\fB-ascii|-dictionary|-integer|-real\fR? ?\fIprioqueueName\fR?
.sp
\fIprioqueueName\fR \fBoption\fR ?\fIarg arg ...\fR?
.sp
\fIprioqueueName\fR \fBclear\fR
.sp
\fIprioqueueName\fR \fBremove\fR \fIitem\fR
.sp
\fIprioqueueName\fR \fBdestroy\fR
.sp
\fIprioqueueName\fR \fBget\fR ?\fIcount\fR?
.sp
\fIprioqueueName\fR \fBpeek\fR ?\fIcount\fR?
.sp
\fIprioqueueName\fR \fBpeekpriority\fR ?\fIcount\fR?
.sp
\fIprioqueueName\fR \fBput\fR \fIitem prio\fR ?\fIitem prio ...\fR?
.sp
\fIprioqueueName\fR \fBsize\fR
.sp
.BE
.SH DESCRIPTION
This package implements a simple priority queue using nested tcl lists.
.PP
The command \fB::struct::prioqueue\fR creates a new priority queue
with default priority key type \fI-integer\fR. This means that keys
given to the \fBput\fR subcommand must have this type.
.PP
This also sets the priority ordering. For key types \fI-ascii\fR and
\fI-dictionary\fR the data is sorted in ascending order (as with
\fBlsort\fR \fI-increasing\fR), thereas for \fI-integer\fR and
\fI-real\fR the data is sorted in descending order (as with
\fBlsort\fR \fI-decreasing\fR).
.PP
Prioqueue names are unrestricted, but may be recognized as options if
no priority type is given.
.TP
\fB::struct::prioqueue\fR ?\fB-ascii|-dictionary|-integer|-real\fR? ?\fIprioqueueName\fR?
The \fB::struct::prioqueue\fR command creates a new prioqueue object
with an associated global Tcl command whose name is
\fIprioqueueName\fR. This command may be used to invoke various
operations on the prioqueue.  It has the following general form:
.TP
\fIprioqueueName\fR \fBoption\fR ?\fIarg arg ...\fR?
\fBoption\fR and the \fIarg\fRs determine the exact behavior of the
command.  The following commands are possible for prioqueue objects:
.TP
\fIprioqueueName\fR \fBclear\fR
Remove all items from the prioqueue.
.TP
\fIprioqueueName\fR \fBremove\fR \fIitem\fR
Remove the selected item from this priority queue.
.TP
\fIprioqueueName\fR \fBdestroy\fR
Destroy the prioqueue, including its storage space and associated
command.
.TP
\fIprioqueueName\fR \fBget\fR ?\fIcount\fR?
Return the front \fIcount\fR items of the prioqueue (but not their
priorities) and remove them from the prioqueue.
If \fIcount\fR is not specified, it defaults to 1.  If \fIcount\fR is
1, the result is a simple string; otherwise, it is a list.  If
specified, \fIcount\fR must be greater than or equal to 1.  If there
are no or too few items in the prioqueue, this command will throw an
error.
.TP
\fIprioqueueName\fR \fBpeek\fR ?\fIcount\fR?
Return the front \fIcount\fR items of the prioqueue (but not their
priorities), without removing them from the prioqueue.
If \fIcount\fR is not specified, it defaults to 1.  If \fIcount\fR is
1, the result is a simple string; otherwise, it is a list.  If
specified, \fIcount\fR must be greater than or equal to 1.  If there
are no or too few items in the queue, this command will throw an
error.
.TP
\fIprioqueueName\fR \fBpeekpriority\fR ?\fIcount\fR?
Return the front \fIcount\fR items priority keys, without removing
them from the prioqueue.
If \fIcount\fR is not specified, it defaults to 1.  If \fIcount\fR is
1, the result is a simple string; otherwise, it is a list.  If
specified, \fIcount\fR must be greater than or equal to 1.  If there
are no or too few items in the queue, this command will throw an
error.
.TP
\fIprioqueueName\fR \fBput\fR \fIitem prio\fR ?\fIitem prio ...\fR?
Put the \fIitem\fR or items specified into the prioqueue. \fIprio\fR
must be a valid priority key for this type of prioqueue, otherwise an
error is thrown and no item is added.  Items are inserted at their
priority ranking. Items with equal priority are added in the order
they were added.
.TP
\fIprioqueueName\fR \fBsize\fR
Return the number of items in the prioqueue.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such in the category \fIstruct :: prioqueue\fR of the
\fITcllib SF Trackers\fR [http://sourceforge.net/tracker/?group_id=12883].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
ordered list, prioqueue, priority queue
.SH CATEGORY
Data structures
.SH COPYRIGHT
.nf
Copyright (c) 2003 Michael Schlenker <mic42@users.sourceforge.net>

.fi