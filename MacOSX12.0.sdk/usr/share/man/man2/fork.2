.\"	$NetBSD: fork.2,v 1.6 1995/02/27 12:32:36 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)fork.2	8.1 (Berkeley) 6/4/93
.\"
.Dd June 4, 1993
.Dt FORK 2
.Os BSD 4
.Sh NAME
.Nm fork
.Nd create a new process
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft pid_t
.Fo fork
.Fa void
.Fc
.Sh DESCRIPTION
.Fn fork
causes creation of a new process.
The new process (child process) is an exact copy of the
calling process (parent process) except for the following:
.Bl -bullet -offset indent
.It
The child process has a unique process ID.
.It
The child process has a different parent
process ID (i.e., the process ID of the parent process).
.It
The child process has its own copy of the parent's descriptors.
These descriptors reference the same underlying objects, so that,
for instance, file pointers in file objects are shared between
the child and the parent, so that an
.Xr lseek 2
on a descriptor in the child process can affect a subsequent
.Xr read
or
.Xr write
by the parent.
This descriptor copying is also used by the shell to
establish standard input and output for newly created processes
as well as to set up pipes.
.It
The child processes resource utilizations
are set to 0; see
.Xr setrlimit 2 .
.El
.Sh RETURN VALUES
Upon successful completion,
.Fn fork
returns a value of 0 to the child process
and returns the process ID of the child process to the parent process.
Otherwise, a value of -1 is returned to the parent process,
no child process is created, and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn fork
will fail and no child process will be created if:
.Bl -tag -width Er
.\" ==========
.It Bq Er EAGAIN
The system-imposed limit
on the total number of processes under execution
would be exceeded.
This limit is configuration-dependent.
.\" ==========
.It Bq Er EAGAIN
The system-imposed limit
.Dv MAXUPRC
.Pq Aq Pa sys/param.h
on the total number of
processes under execution by a single user would be exceeded.
.\" ==========
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh LEGACY SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <unistd.h>
.Pp
The include file
.In sys/types.h
is necessary.
.Sh SEE ALSO
.Xr execve 2 ,
.Xr sigaction 2 ,
.Xr wait 2 ,
.Xr compat 5
.Sh HISTORY
A
.Fn fork
function call appeared in
.At v6 .
.Sh CAVEATS
There are limits to what you can do in the child process.
To be totally safe you should restrict yourself to only
executing async-signal safe operations until such time
as one of the exec functions is called.  All APIs, including
global data symbols, in any framework or library should be 
assumed to be unsafe after a 
.Fn fork
unless explicitly documented to be safe or async-signal 
safe.  If you need to use these frameworks in the child 
process, you must exec.  In this situation it is reasonable 
to exec yourself.