.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP-DUMP 1"
.TH LWP-DUMP 1 "2020-04-14" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
lwp\-dump \- See what headers and content is returned for a URL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBlwp-dump\fR [ \fIoptions\fR ] \fI\s-1URL\s0\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBlwp-dump\fR program will get the resource identified by the \s-1URL\s0 and then
dump the response object to \s-1STDOUT.\s0  This will display the headers returned and
the initial part of the content, escaped so that it's safe to display even
binary content.  The escapes syntax used is the same as for Perl's double
quoted strings.  If there is no content the string \*(L"(no content)\*(R" is shown in
its place.
.PP
The following options are recognized:
.IP "\fB\-\-agent\fR \fIstring\fR" 4
.IX Item "--agent string"
Override the user agent string passed to the server.
.IP "\fB\-\-keep\-client\-headers\fR" 4
.IX Item "--keep-client-headers"
\&\s-1LWP\s0 internally generate various \f(CW\*(C`Client\-*\*(C'\fR headers that are stripped by
\&\fBlwp-dump\fR in order to show the headers exactly as the server provided them.
This option will suppress this.
.IP "\fB\-\-max\-length\fR \fIn\fR" 4
.IX Item "--max-length n"
How much of the content to show.  The default is 512.  Set this
to 0 for unlimited.
.Sp
If the content is longer then the string is chopped at the
limit and the string \*(L"...\en(### more bytes not shown)\*(R"
appended.
.IP "\fB\-\-method\fR \fIstring\fR" 4
.IX Item "--method string"
Use the given method for the request instead of the default \*(L"\s-1GET\*(R".\s0
.IP "\fB\-\-parse\-head\fR" 4
.IX Item "--parse-head"
By default \fBlwp-dump\fR will not try to initialize headers by looking at the
head section of \s-1HTML\s0 documents.  This option enables this.  This corresponds to
\&\*(L"parse_head\*(R" in LWP::UserAgent.
.IP "\fB\-\-request\fR" 4
.IX Item "--request"
Also dump the request sent.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
lwp-request, \s-1LWP\s0, \*(L"dump\*(R" in HTTP::Message
