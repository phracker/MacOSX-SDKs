.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLINTERN 1"
.TH PERLINTERN 1 "2021-08-28" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlintern \- autogenerated documentation of purely internal
		 Perl functions
.SH "DESCRIPTION"
.IX Xref "internal Perl functions interpreter functions"
.IX Header "DESCRIPTION"
This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl \s-1API.\s0  In other words,
\&\fBthey are not for use in extensions\fR!
.SH "Compile-time scope hooks"
.IX Header "Compile-time scope hooks"
.IP "BhkENTRY" 8
.IX Xref "BhkENTRY"
.IX Item "BhkENTRY"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Return an entry from the \s-1BHK\s0 structure.  \f(CW\*(C`which\*(C'\fR is a preprocessor token
indicating which entry to return.  If the appropriate flag is not set
this will return \f(CW\*(C`NULL\*(C'\fR.  The type of the return value depends on which
entry you ask for.
.Sp
.Vb 1
\&        void *  BhkENTRY(BHK *hk, which)
.Ve
.IP "BhkFLAGS" 8
.IX Xref "BhkFLAGS"
.IX Item "BhkFLAGS"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Return the \s-1BHK\s0's flags.
.Sp
.Vb 1
\&        U32     BhkFLAGS(BHK *hk)
.Ve
.IP "\s-1CALL_BLOCK_HOOKS\s0" 8
.IX Xref "CALL_BLOCK_HOOKS"
.IX Item "CALL_BLOCK_HOOKS"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Call all the registered block hooks for type \f(CW\*(C`which\*(C'\fR.  \f(CW\*(C`which\*(C'\fR is a
preprocessing token; the type of \f(CW\*(C`arg\*(C'\fR depends on \f(CW\*(C`which\*(C'\fR.
.Sp
.Vb 1
\&        void    CALL_BLOCK_HOOKS(which, arg)
.Ve
.SH "Custom Operators"
.IX Header "Custom Operators"
.IP "core_prototype" 8
.IX Xref "core_prototype"
.IX Item "core_prototype"
This function assigns the prototype of the named core function to \f(CW\*(C`sv\*(C'\fR, or
to a new mortal \s-1SV\s0 if \f(CW\*(C`sv\*(C'\fR is \f(CW\*(C`NULL\*(C'\fR.  It returns the modified \f(CW\*(C`sv\*(C'\fR, or
\&\f(CW\*(C`NULL\*(C'\fR if the core function has no prototype.  \f(CW\*(C`code\*(C'\fR is a code as returned
by \f(CW\*(C`keyword()\*(C'\fR.  It must not be equal to 0.
.Sp
.Vb 3
\&        SV *    core_prototype(SV *sv, const char *name,
\&                               const int code,
\&                               int * const opnum)
.Ve
.SH "CV Manipulation Functions"
.IX Header "CV Manipulation Functions"
.IP "docatch" 8
.IX Xref "docatch"
.IX Item "docatch"
Check for the cases 0 or 3 of cur_env.je_ret, only used inside an eval context.
.Sp
0 is used as continue inside eval,
.Sp
3 is used for a die caught by an inner eval \- continue inner loop
.Sp
See \fIcop.h\fR: je_mustcatch, when set at any runlevel to \s-1TRUE,\s0 means eval ops must
establish a local jmpenv to handle exception traps.
.Sp
.Vb 1
\&        OP*     docatch(Perl_ppaddr_t firstpp)
.Ve
.SH "CV reference counts and CvOUTSIDE"
.IX Header "CV reference counts and CvOUTSIDE"
.IP "CvWEAKOUTSIDE" 8
.IX Xref "CvWEAKOUTSIDE"
.IX Item "CvWEAKOUTSIDE"
Each \s-1CV\s0 has a pointer, \f(CW\*(C`CvOUTSIDE()\*(C'\fR, to its lexically enclosing
\&\s-1CV\s0 (if any).  Because pointers to anonymous sub prototypes are
stored in \f(CW\*(C`&\*(C'\fR pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa.  To avoid the
ensuing memory leak, we do not increment the reference count of the \s-1CV\s0
pointed to by \f(CW\*(C`CvOUTSIDE\*(C'\fR in the \fIone specific instance\fR that the parent
has a \f(CW\*(C`&\*(C'\fR pad slot pointing back to us.  In this case, we set the
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR flag in the child.  This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.
.Sp
There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub).  In this case, the
anonymous prototype is shared rather than being cloned.  This has the
consequence that the parent may be freed while there are still active
children, \fIe.g.\fR,
.Sp
.Vb 1
\&    BEGIN { $a = sub { eval \*(Aq$x\*(Aq } }
.Ve
.Sp
In this case, the \s-1BEGIN\s0 is freed immediately after execution since there
are no active references to it: the anon sub prototype has
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR set since it's not a closure, and \f(CW$a\fR points to the same
\&\s-1CV,\s0 so it doesn't contribute to \s-1BEGIN\s0's refcount either.  When \f(CW$a\fR is
executed, the \f(CW\*(C`eval \*(Aq$x\*(Aq\*(C'\fR causes the chain of \f(CW\*(C`CvOUTSIDE\*(C'\fRs to be followed,
and the freed \s-1BEGIN\s0 is accessed.
.Sp
To avoid this, whenever a \s-1CV\s0 and its associated pad is freed, any
\&\f(CW\*(C`&\*(C'\fR entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's \f(CW\*(C`CvOUTSIDE\*(C'\fR is set to point to its grandparent.  This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as \f(CW$a\fR above).
.Sp
One other thing to consider is that a \s-1CV\s0 may be merely undefined
rather than freed, eg \f(CW\*(C`undef &foo\*(C'\fR.  In this case, its refcount may
not have reached zero, but we still delete its pad and its \f(CW\*(C`CvROOT\*(C'\fR etc.
Since various children may still have their \f(CW\*(C`CvOUTSIDE\*(C'\fR pointing at this
undefined \s-1CV,\s0 we keep its own \f(CW\*(C`CvOUTSIDE\*(C'\fR for the time being, so that
the chain of lexical scopes is unbroken.  For example, the following
should print 123:
.Sp
.Vb 5
\&    my $x = 123;
\&    sub tmp { sub { eval \*(Aq$x\*(Aq } }
\&    my $a = tmp();
\&    undef &tmp;
\&    print  $a\->();
\&
\&        bool    CvWEAKOUTSIDE(CV *cv)
.Ve
.SH "Embedding Functions"
.IX Header "Embedding Functions"
.IP "cv_dump" 8
.IX Xref "cv_dump"
.IX Item "cv_dump"
dump the contents of a \s-1CV\s0
.Sp
.Vb 1
\&        void    cv_dump(CV *cv, const char *title)
.Ve
.IP "cv_forget_slab" 8
.IX Xref "cv_forget_slab"
.IX Item "cv_forget_slab"
When a \s-1CV\s0 has a reference count on its slab (\f(CW\*(C`CvSLABBED\*(C'\fR), it is responsible
for making sure it is freed.  (Hence, no two CVs should ever have a
reference count on the same slab.)  The \s-1CV\s0 only needs to reference the slab
during compilation.  Once it is compiled and \f(CW\*(C`CvROOT\*(C'\fR attached, it has
finished its job, so it can forget the slab.
.Sp
.Vb 1
\&        void    cv_forget_slab(CV *cv)
.Ve
.IP "do_dump_pad" 8
.IX Xref "do_dump_pad"
.IX Item "do_dump_pad"
Dump the contents of a padlist
.Sp
.Vb 2
\&        void    do_dump_pad(I32 level, PerlIO *file,
\&                            PADLIST *padlist, int full)
.Ve
.IP "pad_alloc_name" 8
.IX Xref "pad_alloc_name"
.IX Item "pad_alloc_name"
Allocates a place in the currently-compiling
pad (via \*(L"pad_alloc\*(R" in perlapi) and
then stores a name for that entry.  \f(CW\*(C`name\*(C'\fR is adopted and
becomes the name entry; it must already contain the name
string.  \f(CW\*(C`typestash\*(C'\fR and \f(CW\*(C`ourstash\*(C'\fR and the \f(CW\*(C`padadd_STATE\*(C'\fR
flag get added to \f(CW\*(C`name\*(C'\fR.  None of the other
processing of \*(L"pad_add_name_pvn\*(R" in perlapi
is done.  Returns the offset of the allocated pad slot.
.Sp
.Vb 2
\&        PADOFFSET pad_alloc_name(PADNAME *name, U32 flags,
\&                                 HV *typestash, HV *ourstash)
.Ve
.IP "pad_block_start" 8
.IX Xref "pad_block_start"
.IX Item "pad_block_start"
Update the pad compilation state variables on entry to a new block.
.Sp
.Vb 1
\&        void    pad_block_start(int full)
.Ve
.IP "pad_check_dup" 8
.IX Xref "pad_check_dup"
.IX Item "pad_check_dup"
Check for duplicate declarations: report any of:
.Sp
.Vb 3
\&     * a \*(Aqmy\*(Aq in the current scope with the same name;
\&     * an \*(Aqour\*(Aq (anywhere in the pad) with the same name and the
\&       same stash as \*(Aqourstash\*(Aq
.Ve
.Sp
\&\f(CW\*(C`is_our\*(C'\fR indicates that the name to check is an \f(CW"our"\fR declaration.
.Sp
.Vb 2
\&        void    pad_check_dup(PADNAME *name, U32 flags,
\&                              const HV *ourstash)
.Ve
.IP "pad_findlex" 8
.IX Xref "pad_findlex"
.IX Item "pad_findlex"
Find a named lexical anywhere in a chain of nested pads.  Add fake entries
in the inner pads if it's found in an outer one.
.Sp
Returns the offset in the bottom pad of the lex or the fake lex.
\&\f(CW\*(C`cv\*(C'\fR is the \s-1CV\s0 in which to start the search, and seq is the current \f(CW\*(C`cop_seq\*(C'\fR
to match against.  If \f(CW\*(C`warn\*(C'\fR is true, print appropriate warnings.  The \f(CW\*(C`out_\*(C'\fR*
vars return values, and so are pointers to where the returned values
should be stored.  \f(CW\*(C`out_capture\*(C'\fR, if non-null, requests that the innermost
instance of the lexical is captured; \f(CW\*(C`out_name\*(C'\fR is set to the innermost
matched pad name or fake pad name; \f(CW\*(C`out_flags\*(C'\fR returns the flags normally
associated with the \f(CW\*(C`PARENT_FAKELEX_FLAGS\*(C'\fR field of a fake pad name.
.Sp
Note that \f(CW\*(C`pad_findlex()\*(C'\fR is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries
as it goes.  It has to be this way
because fake names in anon protoypes have to store in \f(CW\*(C`xpadn_low\*(C'\fR the
index into the parent pad.
.Sp
.Vb 6
\&        PADOFFSET pad_findlex(const char *namepv,
\&                              STRLEN namelen, U32 flags,
\&                              const CV* cv, U32 seq, int warn,
\&                              SV** out_capture,
\&                              PADNAME** out_name,
\&                              int *out_flags)
.Ve
.IP "pad_fixup_inner_anons" 8
.IX Xref "pad_fixup_inner_anons"
.IX Item "pad_fixup_inner_anons"
For any anon CVs in the pad, change \f(CW\*(C`CvOUTSIDE\*(C'\fR of that \s-1CV\s0 from
\&\f(CW\*(C`old_cv\*(C'\fR to \f(CW\*(C`new_cv\*(C'\fR if necessary.  Needed when a newly-compiled \s-1CV\s0 has to be
moved to a pre-existing \s-1CV\s0 struct.
.Sp
.Vb 2
\&        void    pad_fixup_inner_anons(PADLIST *padlist,
\&                                      CV *old_cv, CV *new_cv)
.Ve
.IP "pad_free" 8
.IX Xref "pad_free"
.IX Item "pad_free"
Free the \s-1SV\s0 at offset po in the current pad.
.Sp
.Vb 1
\&        void    pad_free(PADOFFSET po)
.Ve
.IP "pad_leavemy" 8
.IX Xref "pad_leavemy"
.IX Item "pad_leavemy"
Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.
.Sp
.Vb 1
\&        void    pad_leavemy()
.Ve
.IP "padlist_dup" 8
.IX Xref "padlist_dup"
.IX Item "padlist_dup"
Duplicates a pad.
.Sp
.Vb 2
\&        PADLIST * padlist_dup(PADLIST *srcpad,
\&                              CLONE_PARAMS *param)
.Ve
.IP "padname_dup" 8
.IX Xref "padname_dup"
.IX Item "padname_dup"
Duplicates a pad name.
.Sp
.Vb 1
\&        PADNAME * padname_dup(PADNAME *src, CLONE_PARAMS *param)
.Ve
.IP "padnamelist_dup" 8
.IX Xref "padnamelist_dup"
.IX Item "padnamelist_dup"
Duplicates a pad name list.
.Sp
.Vb 2
\&        PADNAMELIST * padnamelist_dup(PADNAMELIST *srcpad,
\&                                      CLONE_PARAMS *param)
.Ve
.IP "pad_push" 8
.IX Xref "pad_push"
.IX Item "pad_push"
Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an \f(CW@_\fR in slot zero.
.Sp
.Vb 1
\&        void    pad_push(PADLIST *padlist, int depth)
.Ve
.IP "pad_reset" 8
.IX Xref "pad_reset"
.IX Item "pad_reset"
Mark all the current temporaries for reuse
.Sp
.Vb 1
\&        void    pad_reset()
.Ve
.IP "pad_swipe" 8
.IX Xref "pad_swipe"
.IX Item "pad_swipe"
Abandon the tmp in the current pad at offset \f(CW\*(C`po\*(C'\fR and replace with a
new one.
.Sp
.Vb 1
\&        void    pad_swipe(PADOFFSET po, bool refadjust)
.Ve
.SH "GV Functions"
.IX Header "GV Functions"
.IP "gv_try_downgrade" 8
.IX Xref "gv_try_downgrade"
.IX Item "gv_try_downgrade"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
If the typeglob \f(CW\*(C`gv\*(C'\fR can be expressed more succinctly, by having
something other than a real \s-1GV\s0 in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that \f(CW\*(C`gv\*(C'\fR
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a \s-1GV\s0 has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real \s-1GV\s0 isn't required after all.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a completely empty typeglob, it is deleted from the stash.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a typeglob containing only a sufficiently-ordinary constant
sub, the typeglob is replaced with a scalar-reference placeholder that
more compactly represents the same thing.
.Sp
.Vb 1
\&        void    gv_try_downgrade(GV* gv)
.Ve
.SH "Hash Manipulation Functions"
.IX Header "Hash Manipulation Functions"
.IP "hv_ename_add" 8
.IX Xref "hv_ename_add"
.IX Item "hv_ename_add"
Adds a name to a stash's internal list of effective names.  See
\&\f(CW"hv_ename_delete"\fR.
.Sp
This is called when a stash is assigned to a new location in the symbol
table.
.Sp
.Vb 2
\&        void    hv_ename_add(HV *hv, const char *name, U32 len,
\&                             U32 flags)
.Ve
.IP "hv_ename_delete" 8
.IX Xref "hv_ename_delete"
.IX Item "hv_ename_delete"
Removes a name from a stash's internal list of effective names.  If this is
the name returned by \f(CW\*(C`HvENAME\*(C'\fR, then another name in the list will take
its place (\f(CW\*(C`HvENAME\*(C'\fR will use it).
.Sp
This is called when a stash is deleted from the symbol table.
.Sp
.Vb 2
\&        void    hv_ename_delete(HV *hv, const char *name,
\&                                U32 len, U32 flags)
.Ve
.IP "refcounted_he_chain_2hv" 8
.IX Xref "refcounted_he_chain_2hv"
.IX Item "refcounted_he_chain_2hv"
Generates and returns a \f(CW\*(C`HV *\*(C'\fR representing the content of a
\&\f(CW\*(C`refcounted_he\*(C'\fR chain.
\&\f(CW\*(C`flags\*(C'\fR is currently unused and must be zero.
.Sp
.Vb 3
\&        HV *    refcounted_he_chain_2hv(
\&                    const struct refcounted_he *c, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pv" 8
.IX Xref "refcounted_he_fetch_pv"
.IX Item "refcounted_he_fetch_pv"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a nul-terminated string
instead of a string/length pair.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_pv(
\&                    const struct refcounted_he *chain,
\&                    const char *key, U32 hash, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pvn" 8
.IX Xref "refcounted_he_fetch_pvn"
.IX Item "refcounted_he_fetch_pvn"
Search along a \f(CW\*(C`refcounted_he\*(C'\fR chain for an entry with the key specified
by \f(CW\*(C`keypv\*(C'\fR and \f(CW\*(C`keylen\*(C'\fR.  If \f(CW\*(C`flags\*(C'\fR has the \f(CW\*(C`REFCOUNTED_HE_KEY_UTF8\*(C'\fR
bit set, the key octets are interpreted as \s-1UTF\-8,\s0 otherwise they
are interpreted as Latin\-1.  \f(CW\*(C`hash\*(C'\fR is a precomputed hash of the key
string, or zero if it has not been precomputed.  Returns a mortal scalar
representing the value associated with the key, or \f(CW&PL_sv_placeholder\fR
if there is no value associated with the key.
.Sp
.Vb 5
\&        SV *    refcounted_he_fetch_pvn(
\&                    const struct refcounted_he *chain,
\&                    const char *keypv, STRLEN keylen, U32 hash,
\&                    U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pvs" 8
.IX Xref "refcounted_he_fetch_pvs"
.IX Item "refcounted_he_fetch_pvs"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a literal string
instead of a string/length pair, and no precomputed hash.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_pvs(
\&                    const struct refcounted_he *chain,
\&                    "literal string" key, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_sv" 8
.IX Xref "refcounted_he_fetch_sv"
.IX Item "refcounted_he_fetch_sv"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a Perl scalar instead of a
string/length pair.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_sv(
\&                    const struct refcounted_he *chain, SV *key,
\&                    U32 hash, U32 flags
\&                )
.Ve
.IP "refcounted_he_free" 8
.IX Xref "refcounted_he_free"
.IX Item "refcounted_he_free"
Decrements the reference count of a \f(CW\*(C`refcounted_he\*(C'\fR by one.  If the
reference count reaches zero the structure's memory is freed, which
(recursively) causes a reduction of its parent \f(CW\*(C`refcounted_he\*(C'\fR's
reference count.  It is safe to pass a null pointer to this function:
no action occurs in this case.
.Sp
.Vb 1
\&        void    refcounted_he_free(struct refcounted_he *he)
.Ve
.IP "refcounted_he_inc" 8
.IX Xref "refcounted_he_inc"
.IX Item "refcounted_he_inc"
Increment the reference count of a \f(CW\*(C`refcounted_he\*(C'\fR.  The pointer to the
\&\f(CW\*(C`refcounted_he\*(C'\fR is also returned.  It is safe to pass a null pointer
to this function: no action occurs and a null pointer is returned.
.Sp
.Vb 3
\&        struct refcounted_he * refcounted_he_inc(
\&                                   struct refcounted_he *he
\&                               )
.Ve
.IP "refcounted_he_new_pv" 8
.IX Xref "refcounted_he_new_pv"
.IX Item "refcounted_he_new_pv"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a nul-terminated string instead
of a string/length pair.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_pv(
\&                                   struct refcounted_he *parent,
\&                                   const char *key, U32 hash,
\&                                   SV *value, U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_pvn" 8
.IX Xref "refcounted_he_new_pvn"
.IX Item "refcounted_he_new_pvn"
Creates a new \f(CW\*(C`refcounted_he\*(C'\fR.  This consists of a single key/value
pair and a reference to an existing \f(CW\*(C`refcounted_he\*(C'\fR chain (which may
be empty), and thus forms a longer chain.  When using the longer chain,
the new key/value pair takes precedence over any entry for the same key
further along the chain.
.Sp
The new key is specified by \f(CW\*(C`keypv\*(C'\fR and \f(CW\*(C`keylen\*(C'\fR.  If \f(CW\*(C`flags\*(C'\fR has
the \f(CW\*(C`REFCOUNTED_HE_KEY_UTF8\*(C'\fR bit set, the key octets are interpreted
as \s-1UTF\-8,\s0 otherwise they are interpreted as Latin\-1.  \f(CW\*(C`hash\*(C'\fR is
a precomputed hash of the key string, or zero if it has not been
precomputed.
.Sp
\&\f(CW\*(C`value\*(C'\fR is the scalar value to store for this key.  \f(CW\*(C`value\*(C'\fR is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the \f(CW\*(C`refcounted_he\*(C'\fR.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
\&\f(CW\*(C`value\*(C'\fR may be either null or \f(CW&PL_sv_placeholder\fR to indicate that no
value is to be associated with the key; this, as with any non-null value,
takes precedence over the existence of a value for the key further along
the chain.
.Sp
\&\f(CW\*(C`parent\*(C'\fR points to the rest of the \f(CW\*(C`refcounted_he\*(C'\fR chain to be
attached to the new \f(CW\*(C`refcounted_he\*(C'\fR.  This function takes ownership
of one reference to \f(CW\*(C`parent\*(C'\fR, and returns one reference to the new
\&\f(CW\*(C`refcounted_he\*(C'\fR.
.Sp
.Vb 6
\&        struct refcounted_he * refcounted_he_new_pvn(
\&                                   struct refcounted_he *parent,
\&                                   const char *keypv,
\&                                   STRLEN keylen, U32 hash,
\&                                   SV *value, U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_pvs" 8
.IX Xref "refcounted_he_new_pvs"
.IX Item "refcounted_he_new_pvs"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a literal string
instead of a string/length pair, and no precomputed hash.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_pvs(
\&                                   struct refcounted_he *parent,
\&                                   "literal string" key,
\&                                   SV *value, U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_sv" 8
.IX Xref "refcounted_he_new_sv"
.IX Item "refcounted_he_new_sv"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a Perl scalar instead of a
string/length pair.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_sv(
\&                                   struct refcounted_he *parent,
\&                                   SV *key, U32 hash, SV *value,
\&                                   U32 flags
\&                               )
.Ve
.SH "IO Functions"
.IX Header "IO Functions"
.IP "start_glob" 8
.IX Xref "start_glob"
.IX Item "start_glob"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Function called by \f(CW\*(C`do_readline\*(C'\fR to spawn a glob (or do the glob inside
perl on \s-1VMS\s0).  This code used to be inline, but now perl uses \f(CW\*(C`File::Glob\*(C'\fR
this glob starter is only used by miniperl during the build process,
or when \s-1PERL_EXTERNAL_GLOB\s0 is defined.
Moving it away shrinks \fIpp_hot.c\fR; shrinking \fIpp_hot.c\fR helps speed perl up.
.Sp
.Vb 1
\&        PerlIO* start_glob(SV *tmpglob, IO *io)
.Ve
.SH "Lexer interface"
.IX Header "Lexer interface"
.IP "validate_proto" 8
.IX Xref "validate_proto"
.IX Item "validate_proto"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
This function performs syntax checking on a prototype, \f(CW\*(C`proto\*(C'\fR.
If \f(CW\*(C`warn\*(C'\fR is true, any illegal characters or mismatched brackets
will trigger illegalproto warnings, declaring that they were
detected in the prototype for \f(CW\*(C`name\*(C'\fR.
.Sp
The return value is \f(CW\*(C`true\*(C'\fR if this is a valid prototype, and
\&\f(CW\*(C`false\*(C'\fR if it is not, regardless of whether \f(CW\*(C`warn\*(C'\fR was \f(CW\*(C`true\*(C'\fR or
\&\f(CW\*(C`false\*(C'\fR.
.Sp
Note that \f(CW\*(C`NULL\*(C'\fR is a valid \f(CW\*(C`proto\*(C'\fR and will always return \f(CW\*(C`true\*(C'\fR.
.Sp
\&\s-1NOTE:\s0 the perl_ form of this function is deprecated.
.Sp
.Vb 2
\&        bool    validate_proto(SV *name, SV *proto, bool warn,
\&                               bool curstash)
.Ve
.SH "Magical Functions"
.IX Header "Magical Functions"
.IP "magic_clearhint" 8
.IX Xref "magic_clearhint"
.IX Item "magic_clearhint"
Triggered by a delete from \f(CW\*(C`%^H\*(C'\fR, records the key to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhint(SV* sv, MAGIC* mg)
.Ve
.IP "magic_clearhints" 8
.IX Xref "magic_clearhints"
.IX Item "magic_clearhints"
Triggered by clearing \f(CW\*(C`%^H\*(C'\fR, resets \f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhints(SV* sv, MAGIC* mg)
.Ve
.IP "magic_methcall" 8
.IX Xref "magic_methcall"
.IX Item "magic_methcall"
Invoke a magic method (like \s-1FETCH\s0).
.Sp
\&\f(CW\*(C`sv\*(C'\fR and \f(CW\*(C`mg\*(C'\fR are the tied thingy and the tie magic.
.Sp
\&\f(CW\*(C`meth\*(C'\fR is the name of the method to call.
.Sp
\&\f(CW\*(C`argc\*(C'\fR is the number of args (in addition to \f(CW$self\fR) to pass to the method.
.Sp
The \f(CW\*(C`flags\*(C'\fR can be:
.Sp
.Vb 4
\&    G_DISCARD     invoke method with G_DISCARD flag and don\*(Aqt
\&                  return a value
\&    G_UNDEF_FILL  fill the stack with argc pointers to
\&                  PL_sv_undef
.Ve
.Sp
The arguments themselves are any values following the \f(CW\*(C`flags\*(C'\fR argument.
.Sp
Returns the \s-1SV\s0 (if any) returned by the method, or \f(CW\*(C`NULL\*(C'\fR on failure.
.Sp
.Vb 3
\&        SV*     magic_methcall(SV *sv, const MAGIC *mg,
\&                               SV *meth, U32 flags, U32 argc,
\&                               ...)
.Ve
.IP "magic_sethint" 8
.IX Xref "magic_sethint"
.IX Item "magic_sethint"
Triggered by a store to \f(CW\*(C`%^H\*(C'\fR, records the key/value pair to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.
.Sp
.Vb 1
\&        int     magic_sethint(SV* sv, MAGIC* mg)
.Ve
.IP "mg_localize" 8
.IX Xref "mg_localize"
.IX Item "mg_localize"
Copy some of the magic from an existing \s-1SV\s0 to new localized version of that
\&\s-1SV.\s0  Container magic (\fIe.g.\fR, \f(CW%ENV\fR, \f(CW$1\fR, \f(CW\*(C`tie\*(C'\fR)
gets copied, value magic doesn't (\fIe.g.\fR,
\&\f(CW\*(C`taint\*(C'\fR, \f(CW\*(C`pos\*(C'\fR).
.Sp
If \f(CW\*(C`setmagic\*(C'\fR is false then no set magic will be called on the new (empty) \s-1SV.\s0
This typically means that assignment will soon follow (e.g. \f(CW\*(Aqlocal\ $x\ =\ $y\*(Aq\fR),
and that will handle the magic.
.Sp
.Vb 1
\&        void    mg_localize(SV* sv, SV* nsv, bool setmagic)
.Ve
.SH "Miscellaneous Functions"
.IX Header "Miscellaneous Functions"
.IP "free_c_backtrace" 8
.IX Xref "free_c_backtrace"
.IX Item "free_c_backtrace"
Deallocates a backtrace received from get_c_bracktrace.
.Sp
.Vb 1
\&        void    free_c_backtrace(Perl_c_backtrace* bt)
.Ve
.IP "get_c_backtrace" 8
.IX Xref "get_c_backtrace"
.IX Item "get_c_backtrace"
Collects the backtrace (aka \*(L"stacktrace\*(R") into a single linear
malloced buffer, which the caller \fBmust\fR \f(CW\*(C`Perl_free_c_backtrace()\*(C'\fR.
.Sp
Scans the frames back by \f(CW\*(C`depth\ +\ skip\*(C'\fR, then drops the \f(CW\*(C`skip\*(C'\fR innermost,
returning at most \f(CW\*(C`depth\*(C'\fR frames.
.Sp
.Vb 2
\&        Perl_c_backtrace* get_c_backtrace(int max_depth,
\&                                          int skip)
.Ve
.SH "MRO Functions"
.IX Header "MRO Functions"
.IP "mro_get_linear_isa_dfs" 8
.IX Xref "mro_get_linear_isa_dfs"
.IX Item "mro_get_linear_isa_dfs"
Returns the Depth-First Search linearization of \f(CW@ISA\fR
the given stash.  The return value is a read-only AV*.
\&\f(CW\*(C`level\*(C'\fR should be 0 (it is used internally in this
function's recursion).
.Sp
You are responsible for \f(CW\*(C`SvREFCNT_inc()\*(C'\fR on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
.Sp
.Vb 1
\&        AV*     mro_get_linear_isa_dfs(HV* stash, U32 level)
.Ve
.IP "mro_isa_changed_in" 8
.IX Xref "mro_isa_changed_in"
.IX Item "mro_isa_changed_in"
Takes the necessary steps (cache invalidations, mostly)
when the \f(CW@ISA\fR of the given package has changed.  Invoked
by the \f(CW\*(C`setisa\*(C'\fR magic, should not need to invoke directly.
.Sp
.Vb 1
\&        void    mro_isa_changed_in(HV* stash)
.Ve
.IP "mro_package_moved" 8
.IX Xref "mro_package_moved"
.IX Item "mro_package_moved"
Call this function to signal to a stash that it has been assigned to
another spot in the stash hierarchy.  \f(CW\*(C`stash\*(C'\fR is the stash that has been
assigned.  \f(CW\*(C`oldstash\*(C'\fR is the stash it replaces, if any.  \f(CW\*(C`gv\*(C'\fR is the glob
that is actually being assigned to.
.Sp
This can also be called with a null first argument to
indicate that \f(CW\*(C`oldstash\*(C'\fR has been deleted.
.Sp
This function invalidates isa caches on the old stash, on all subpackages
nested inside it, and on the subclasses of all those, including
non-existent packages that have corresponding entries in \f(CW\*(C`stash\*(C'\fR.
.Sp
It also sets the effective names (\f(CW\*(C`HvENAME\*(C'\fR) on all the stashes as
appropriate.
.Sp
If the \f(CW\*(C`gv\*(C'\fR is present and is not in the symbol table, then this function
simply returns.  This checked will be skipped if \f(CW\*(C`flags & 1\*(C'\fR.
.Sp
.Vb 4
\&        void    mro_package_moved(HV * const stash,
\&                                  HV * const oldstash,
\&                                  const GV * const gv,
\&                                  U32 flags)
.Ve
.SH "Numeric functions"
.IX Header "Numeric functions"
.IP "grok_atoUV" 8
.IX Xref "grok_atoUV"
.IX Item "grok_atoUV"
parse a string, looking for a decimal unsigned integer.
.Sp
On entry, \f(CW\*(C`pv\*(C'\fR points to the beginning of the string;
\&\f(CW\*(C`valptr\*(C'\fR points to a \s-1UV\s0 that will receive the converted value, if found;
\&\f(CW\*(C`endptr\*(C'\fR is either \s-1NULL\s0 or points to a variable that points to one byte
beyond the point in \f(CW\*(C`pv\*(C'\fR that this routine should examine.
If \f(CW\*(C`endptr\*(C'\fR is \s-1NULL,\s0 \f(CW\*(C`pv\*(C'\fR is assumed to be NUL-terminated.
.Sp
Returns \s-1FALSE\s0 if \f(CW\*(C`pv\*(C'\fR doesn't represent a valid unsigned integer value (with
no leading zeros).  Otherwise it returns \s-1TRUE,\s0 and sets \f(CW*valptr\fR to that
value.
.Sp
If you constrain the portion of \f(CW\*(C`pv\*(C'\fR that is looked at by this function (by
passing a non-NULL \f(CW\*(C`endptr\*(C'\fR), and if the intial bytes of that portion form a
valid value, it will return \s-1TRUE,\s0 setting \f(CW*endptr\fR to the byte following the
final digit of the value.  But if there is no constraint at what's looked at,
all of \f(CW\*(C`pv\*(C'\fR must be valid in order for \s-1TRUE\s0 to be returned.
.Sp
The only characters this accepts are the decimal digits '0'..'9'.
.Sp
As opposed to \fBatoi\fR\|(3) or \fBstrtol\fR\|(3), \f(CW\*(C`grok_atoUV\*(C'\fR does \s-1NOT\s0 allow optional
leading whitespace, nor negative inputs.  If such features are required, the
calling code needs to explicitly implement those.
.Sp
Note that this function returns \s-1FALSE\s0 for inputs that would overflow a \s-1UV,\s0
or have leading zeros.  Thus a single \f(CW0\fR is accepted, but not \f(CW00\fR nor
\&\f(CW01\fR, \f(CW002\fR, \fIetc\fR.
.Sp
Background: \f(CW\*(C`atoi\*(C'\fR has severe problems with illegal inputs, it cannot be
used for incremental parsing, and therefore should be avoided
\&\f(CW\*(C`atoi\*(C'\fR and \f(CW\*(C`strtol\*(C'\fR are also affected by locale settings, which can also be
seen as a bug (global state controlled by user environment).
.Sp
.Vb 2
\&        bool    grok_atoUV(const char* pv, UV* valptr,
\&                           const char** endptr)
.Ve
.SH "Optree Manipulation Functions"
.IX Header "Optree Manipulation Functions"
.IP "finalize_optree" 8
.IX Xref "finalize_optree"
.IX Item "finalize_optree"
This function finalizes the optree.  Should be called directly after
the complete optree is built.  It does some additional
checking which can't be done in the normal \f(CW\*(C`ck_\*(C'\fRxxx functions and makes
the tree thread-safe.
.Sp
.Vb 1
\&        void    finalize_optree(OP* o)
.Ve
.IP "newATTRSUB_x" 8
.IX Xref "newATTRSUB_x"
.IX Item "newATTRSUB_x"
Construct a Perl subroutine, also performing some surrounding jobs.
.Sp
This function is expected to be called in a Perl compilation context,
and some aspects of the subroutine are taken from global variables
associated with compilation.  In particular, \f(CW\*(C`PL_compcv\*(C'\fR represents
the subroutine that is currently being compiled.  It must be non-null
when this function is called, and some aspects of the subroutine being
constructed are taken from it.  The constructed subroutine may actually
be a reuse of the \f(CW\*(C`PL_compcv\*(C'\fR object, but will not necessarily be so.
.Sp
If \f(CW\*(C`block\*(C'\fR is null then the subroutine will have no body, and for the
time being it will be an error to call it.  This represents a forward
subroutine declaration such as \f(CW\*(C`sub\ foo\ ($$);\*(C'\fR.  If \f(CW\*(C`block\*(C'\fR is
non-null then it provides the Perl code of the subroutine body, which
will be executed when the subroutine is called.  This body includes
any argument unwrapping code resulting from a subroutine signature or
similar.  The pad use of the code must correspond to the pad attached
to \f(CW\*(C`PL_compcv\*(C'\fR.  The code is not expected to include a \f(CW\*(C`leavesub\*(C'\fR or
\&\f(CW\*(C`leavesublv\*(C'\fR op; this function will add such an op.  \f(CW\*(C`block\*(C'\fR is consumed
by this function and will become part of the constructed subroutine.
.Sp
\&\f(CW\*(C`proto\*(C'\fR specifies the subroutine's prototype, unless one is supplied
as an attribute (see below).  If \f(CW\*(C`proto\*(C'\fR is null, then the subroutine
will not have a prototype.  If \f(CW\*(C`proto\*(C'\fR is non-null, it must point to a
\&\f(CW\*(C`const\*(C'\fR op whose value is a string, and the subroutine will have that
string as its prototype.  If a prototype is supplied as an attribute, the
attribute takes precedence over \f(CW\*(C`proto\*(C'\fR, but in that case \f(CW\*(C`proto\*(C'\fR should
preferably be null.  In any case, \f(CW\*(C`proto\*(C'\fR is consumed by this function.
.Sp
\&\f(CW\*(C`attrs\*(C'\fR supplies attributes to be applied the subroutine.  A handful of
attributes take effect by built-in means, being applied to \f(CW\*(C`PL_compcv\*(C'\fR
immediately when seen.  Other attributes are collected up and attached
to the subroutine by this route.  \f(CW\*(C`attrs\*(C'\fR may be null to supply no
attributes, or point to a \f(CW\*(C`const\*(C'\fR op for a single attribute, or point
to a \f(CW\*(C`list\*(C'\fR op whose children apart from the \f(CW\*(C`pushmark\*(C'\fR are \f(CW\*(C`const\*(C'\fR
ops for one or more attributes.  Each \f(CW\*(C`const\*(C'\fR op must be a string,
giving the attribute name optionally followed by parenthesised arguments,
in the manner in which attributes appear in Perl source.  The attributes
will be applied to the sub by this function.  \f(CW\*(C`attrs\*(C'\fR is consumed by
this function.
.Sp
If \f(CW\*(C`o_is_gv\*(C'\fR is false and \f(CW\*(C`o\*(C'\fR is null, then the subroutine will
be anonymous.  If \f(CW\*(C`o_is_gv\*(C'\fR is false and \f(CW\*(C`o\*(C'\fR is non-null, then \f(CW\*(C`o\*(C'\fR
must point to a \f(CW\*(C`const\*(C'\fR op, which will be consumed by this function,
and its string value supplies a name for the subroutine.  The name may
be qualified or unqualified, and if it is unqualified then a default
stash will be selected in some manner.  If \f(CW\*(C`o_is_gv\*(C'\fR is true, then \f(CW\*(C`o\*(C'\fR
doesn't point to an \f(CW\*(C`OP\*(C'\fR at all, but is instead a cast pointer to a \f(CW\*(C`GV\*(C'\fR
by which the subroutine will be named.
.Sp
If there is already a subroutine of the specified name, then the new
sub will either replace the existing one in the glob or be merged with
the existing one.  A warning may be generated about redefinition.
.Sp
If the subroutine has one of a few special names, such as \f(CW\*(C`BEGIN\*(C'\fR or
\&\f(CW\*(C`END\*(C'\fR, then it will be claimed by the appropriate queue for automatic
running of phase-related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of \f(CW\*(C`BEGIN\*(C'\fR, the subroutine will be executed and the reference
to it disposed of before this function returns.
.Sp
The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non-phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase-named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a \f(CW\*(C`BEGIN\*(C'\fR subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.
.Sp
.Vb 2
\&        CV *    newATTRSUB_x(I32 floor, OP *o, OP *proto,
\&                             OP *attrs, OP *block, bool o_is_gv)
.Ve
.IP "newXS_len_flags" 8
.IX Xref "newXS_len_flags"
.IX Item "newXS_len_flags"
Construct an \s-1XS\s0 subroutine, also performing some surrounding jobs.
.Sp
The subroutine will have the entry point \f(CW\*(C`subaddr\*(C'\fR.  It will have
the prototype specified by the nul-terminated string \f(CW\*(C`proto\*(C'\fR, or
no prototype if \f(CW\*(C`proto\*(C'\fR is null.  The prototype string is copied;
the caller can mutate the supplied string afterwards.  If \f(CW\*(C`filename\*(C'\fR
is non-null, it must be a nul-terminated filename, and the subroutine
will have its \f(CW\*(C`CvFILE\*(C'\fR set accordingly.  By default \f(CW\*(C`CvFILE\*(C'\fR is set to
point directly to the supplied string, which must be static.  If \f(CW\*(C`flags\*(C'\fR
has the \f(CW\*(C`XS_DYNAMIC_FILENAME\*(C'\fR bit set, then a copy of the string will
be taken instead.
.Sp
Other aspects of the subroutine will be left in their default state.
If anything else needs to be done to the subroutine for it to function
correctly, it is the caller's responsibility to do that after this
function has constructed it.  However, beware of the subroutine
potentially being destroyed before this function returns, as described
below.
.Sp
If \f(CW\*(C`name\*(C'\fR is null then the subroutine will be anonymous, with its
\&\f(CW\*(C`CvGV\*(C'\fR referring to an \f(CW\*(C`_\|_ANON_\|_\*(C'\fR glob.  If \f(CW\*(C`name\*(C'\fR is non-null then the
subroutine will be named accordingly, referenced by the appropriate glob.
\&\f(CW\*(C`name\*(C'\fR is a string of length \f(CW\*(C`len\*(C'\fR bytes giving a sigilless symbol name,
in \s-1UTF\-8\s0 if \f(CW\*(C`flags\*(C'\fR has the \f(CW\*(C`SVf_UTF8\*(C'\fR bit set and in Latin\-1 otherwise.
The name may be either qualified or unqualified, with the stash defaulting
in the same manner as for \f(CW\*(C`gv_fetchpvn_flags\*(C'\fR.  \f(CW\*(C`flags\*(C'\fR may contain
flag bits understood by \f(CW\*(C`gv_fetchpvn_flags\*(C'\fR with the same meaning as
they have there, such as \f(CW\*(C`GV_ADDWARN\*(C'\fR.  The symbol is always added to
the stash if necessary, with \f(CW\*(C`GV_ADDMULTI\*(C'\fR semantics.
.Sp
If there is already a subroutine of the specified name, then the new sub
will replace the existing one in the glob.  A warning may be generated
about the redefinition.  If the old subroutine was \f(CW\*(C`CvCONST\*(C'\fR then the
decision about whether to warn is influenced by an expectation about
whether the new subroutine will become a constant of similar value.
That expectation is determined by \f(CW\*(C`const_svp\*(C'\fR.  (Note that the call to
this function doesn't make the new subroutine \f(CW\*(C`CvCONST\*(C'\fR in any case;
that is left to the caller.)  If \f(CW\*(C`const_svp\*(C'\fR is null then it indicates
that the new subroutine will not become a constant.  If \f(CW\*(C`const_svp\*(C'\fR
is non-null then it indicates that the new subroutine will become a
constant, and it points to an \f(CW\*(C`SV*\*(C'\fR that provides the constant value
that the subroutine will have.
.Sp
If the subroutine has one of a few special names, such as \f(CW\*(C`BEGIN\*(C'\fR or
\&\f(CW\*(C`END\*(C'\fR, then it will be claimed by the appropriate queue for automatic
running of phase-related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of \f(CW\*(C`BEGIN\*(C'\fR, the subroutine will be executed and the reference
to it disposed of before this function returns, and also before its
prototype is set.  If a \f(CW\*(C`BEGIN\*(C'\fR subroutine would not be sufficiently
constructed by this function to be ready for execution then the caller
must prevent this happening by giving the subroutine a different name.
.Sp
The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non-phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase-named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a \f(CW\*(C`BEGIN\*(C'\fR subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.
.Sp
.Vb 5
\&        CV *    newXS_len_flags(const char *name, STRLEN len,
\&                                XSUBADDR_t subaddr,
\&                                const char *const filename,
\&                                const char *const proto,
\&                                SV **const_svp, U32 flags)
.Ve
.IP "optimize_optree" 8
.IX Xref "optimize_optree"
.IX Item "optimize_optree"
This function applies some optimisations to the optree in top-down order.
It is called before the peephole optimizer, which processes ops in
execution order. Note that \fBfinalize_optree()\fR also does a top-down scan,
but is called *after* the peephole optimizer.
.Sp
.Vb 1
\&        void    optimize_optree(OP* o)
.Ve
.IP "traverse_op_tree" 8
.IX Xref "traverse_op_tree"
.IX Item "traverse_op_tree"
Return the next op in a depth-first traversal of the op tree,
returning \s-1NULL\s0 when the traversal is complete.
.Sp
The initial call must supply the root of the tree as both top and o.
.Sp
For now it's static, but it may be exposed to the \s-1API\s0 in the future.
.Sp
.Vb 1
\&                traverse_op_tree;
.Ve
.SH "Pad Data Structures"
.IX Header "Pad Data Structures"
.IP "\s-1CX_CURPAD_SAVE\s0" 8
.IX Xref "CX_CURPAD_SAVE"
.IX Item "CX_CURPAD_SAVE"
Save the current pad in the given context block structure.
.Sp
.Vb 1
\&        void    CX_CURPAD_SAVE(struct context)
.Ve
.IP "\s-1CX_CURPAD_SV\s0" 8
.IX Xref "CX_CURPAD_SV"
.IX Item "CX_CURPAD_SV"
Access the \s-1SV\s0 at offset \f(CW\*(C`po\*(C'\fR in the saved current pad in the given
context block structure (can be used as an lvalue).
.Sp
.Vb 1
\&        SV *    CX_CURPAD_SV(struct context, PADOFFSET po)
.Ve
.IP "\s-1PAD_BASE_SV\s0" 8
.IX Xref "PAD_BASE_SV"
.IX Item "PAD_BASE_SV"
Get the value from slot \f(CW\*(C`po\*(C'\fR in the base (DEPTH=1) pad of a padlist
.Sp
.Vb 1
\&        SV *    PAD_BASE_SV(PADLIST padlist, PADOFFSET po)
.Ve
.IP "\s-1PAD_CLONE_VARS\s0" 8
.IX Xref "PAD_CLONE_VARS"
.IX Item "PAD_CLONE_VARS"
Clone the state variables associated with running and compiling pads.
.Sp
.Vb 2
\&        void    PAD_CLONE_VARS(PerlInterpreter *proto_perl,
\&                               CLONE_PARAMS* param)
.Ve
.IP "\s-1PAD_COMPNAME_FLAGS\s0" 8
.IX Xref "PAD_COMPNAME_FLAGS"
.IX Item "PAD_COMPNAME_FLAGS"
Return the flags for the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR.  Assumes a valid slot entry.
.Sp
.Vb 1
\&        U32     PAD_COMPNAME_FLAGS(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_GEN\s0" 8
.IX Xref "PAD_COMPNAME_GEN"
.IX Item "PAD_COMPNAME_GEN"
The generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
compiling pad (lvalue).
.Sp
.Vb 1
\&        STRLEN  PAD_COMPNAME_GEN(PADOFFSET po)
.Ve
.IP "PAD_COMPNAME_GEN_set" 8
.IX Xref "PAD_COMPNAME_GEN_set"
.IX Item "PAD_COMPNAME_GEN_set"
Sets the generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
ling pad (lvalue) to \f(CW\*(C`gen\*(C'\fR.
	\s-1STRLEN\s0	PAD_COMPNAME_GEN_set(\s-1PADOFFSET\s0 po, int gen)
.IP "\s-1PAD_COMPNAME_OURSTASH\s0" 8
.IX Xref "PAD_COMPNAME_OURSTASH"
.IX Item "PAD_COMPNAME_OURSTASH"
Return the stash associated with an \f(CW\*(C`our\*(C'\fR variable.
Assumes the slot entry is a valid \f(CW\*(C`our\*(C'\fR lexical.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_OURSTASH(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_PV\s0" 8
.IX Xref "PAD_COMPNAME_PV"
.IX Item "PAD_COMPNAME_PV"
Return the name of the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR.  Assumes a valid slot entry.
.Sp
.Vb 1
\&        char *  PAD_COMPNAME_PV(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_TYPE\s0" 8
.IX Xref "PAD_COMPNAME_TYPE"
.IX Item "PAD_COMPNAME_TYPE"
Return the type (stash) of the current compiling pad name at offset
\&\f(CW\*(C`po\*(C'\fR.  Must be a valid name.  Returns null if not typed.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_TYPE(PADOFFSET po)
.Ve
.IP "PadnameIsOUR" 8
.IX Xref "PadnameIsOUR"
.IX Item "PadnameIsOUR"
Whether this is an \*(L"our\*(R" variable.
.Sp
.Vb 1
\&        bool    PadnameIsOUR(PADNAME pn)
.Ve
.IP "PadnameIsSTATE" 8
.IX Xref "PadnameIsSTATE"
.IX Item "PadnameIsSTATE"
Whether this is a \*(L"state\*(R" variable.
.Sp
.Vb 1
\&        bool    PadnameIsSTATE(PADNAME pn)
.Ve
.IP "PadnameOURSTASH" 8
.IX Xref "PadnameOURSTASH"
.IX Item "PadnameOURSTASH"
The stash in which this \*(L"our\*(R" variable was declared.
.Sp
.Vb 1
\&        HV *    PadnameOURSTASH()
.Ve
.IP "PadnameOUTER" 8
.IX Xref "PadnameOUTER"
.IX Item "PadnameOUTER"
Whether this entry belongs to an outer pad.  Entries for which this is true
are often referred to as 'fake'.
.Sp
.Vb 1
\&        bool    PadnameOUTER(PADNAME pn)
.Ve
.IP "PadnameTYPE" 8
.IX Xref "PadnameTYPE"
.IX Item "PadnameTYPE"
The stash associated with a typed lexical.  This returns the \f(CW%Foo::\fR hash
for \f(CW\*(C`my Foo $bar\*(C'\fR.
.Sp
.Vb 1
\&        HV *    PadnameTYPE(PADNAME pn)
.Ve
.IP "\s-1PAD_RESTORE_LOCAL\s0" 8
.IX Xref "PAD_RESTORE_LOCAL"
.IX Item "PAD_RESTORE_LOCAL"
Restore the old pad saved into the local variable \f(CW\*(C`opad\*(C'\fR by \f(CW\*(C`PAD_SAVE_LOCAL()\*(C'\fR
.Sp
.Vb 1
\&        void    PAD_RESTORE_LOCAL(PAD *opad)
.Ve
.IP "\s-1PAD_SAVE_LOCAL\s0" 8
.IX Xref "PAD_SAVE_LOCAL"
.IX Item "PAD_SAVE_LOCAL"
Save the current pad to the local variable \f(CW\*(C`opad\*(C'\fR, then make the
current pad equal to \f(CW\*(C`npad\*(C'\fR
.Sp
.Vb 1
\&        void    PAD_SAVE_LOCAL(PAD *opad, PAD *npad)
.Ve
.IP "\s-1PAD_SAVE_SETNULLPAD\s0" 8
.IX Xref "PAD_SAVE_SETNULLPAD"
.IX Item "PAD_SAVE_SETNULLPAD"
Save the current pad then set it to null.
.Sp
.Vb 1
\&        void    PAD_SAVE_SETNULLPAD()
.Ve
.IP "\s-1PAD_SETSV\s0" 8
.IX Xref "PAD_SETSV"
.IX Item "PAD_SETSV"
Set the slot at offset \f(CW\*(C`po\*(C'\fR in the current pad to \f(CW\*(C`sv\*(C'\fR
.Sp
.Vb 1
\&        SV *    PAD_SETSV(PADOFFSET po, SV* sv)
.Ve
.IP "\s-1PAD_SET_CUR\s0" 8
.IX Xref "PAD_SET_CUR"
.IX Item "PAD_SET_CUR"
Set the current pad to be pad \f(CW\*(C`n\*(C'\fR in the padlist, saving
the previous current pad.  \s-1NB\s0 currently this macro expands to a string too
long for some compilers, so it's best to replace it with
.Sp
.Vb 2
\&    SAVECOMPPAD();
\&    PAD_SET_CUR_NOSAVE(padlist,n);
\&
\&
\&        void    PAD_SET_CUR(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SET_CUR_NOSAVE\s0" 8
.IX Xref "PAD_SET_CUR_NOSAVE"
.IX Item "PAD_SET_CUR_NOSAVE"
like \s-1PAD_SET_CUR,\s0 but without the save
.Sp
.Vb 1
\&        void    PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SV\s0" 8
.IX Xref "PAD_SV"
.IX Item "PAD_SV"
Get the value at offset \f(CW\*(C`po\*(C'\fR in the current pad
.Sp
.Vb 1
\&        SV *    PAD_SV(PADOFFSET po)
.Ve
.IP "PAD_SVl" 8
.IX Xref "PAD_SVl"
.IX Item "PAD_SVl"
Lightweight and lvalue version of \f(CW\*(C`PAD_SV\*(C'\fR.
Get or set the value at offset \f(CW\*(C`po\*(C'\fR in the current pad.
Unlike \f(CW\*(C`PAD_SV\*(C'\fR, does not print diagnostics with \-DX.
For internal use only.
.Sp
.Vb 1
\&        SV *    PAD_SVl(PADOFFSET po)
.Ve
.IP "\s-1SAVECLEARSV\s0" 8
.IX Xref "SAVECLEARSV"
.IX Item "SAVECLEARSV"
Clear the pointed to pad value on scope exit.  (i.e. the runtime action of
\&\f(CW\*(C`my\*(C'\fR)
.Sp
.Vb 1
\&        void    SAVECLEARSV(SV **svp)
.Ve
.IP "\s-1SAVECOMPPAD\s0" 8
.IX Xref "SAVECOMPPAD"
.IX Item "SAVECOMPPAD"
save \f(CW\*(C`PL_comppad\*(C'\fR and \f(CW\*(C`PL_curpad\*(C'\fR
.Sp
.Vb 1
\&        void    SAVECOMPPAD()
.Ve
.IP "\s-1SAVEPADSV\s0" 8
.IX Xref "SAVEPADSV"
.IX Item "SAVEPADSV"
Save a pad slot (used to restore after an iteration)
.Sp
\&\s-1XXX DAPM\s0 it would make more sense to make the arg a \s-1PADOFFSET\s0
	void	\s-1SAVEPADSV\s0(\s-1PADOFFSET\s0 po)
.SH "Per-Interpreter Variables"
.IX Header "Per-Interpreter Variables"
.IP "PL_DBsingle" 8
.IX Xref "PL_DBsingle"
.IX Item "PL_DBsingle"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1SV\s0 is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's \f(CW$DB::single\fR variable.  See
\&\f(CW"PL_DBsub"\fR.
.Sp
.Vb 1
\&        SV *    PL_DBsingle
.Ve
.IP "PL_DBsub" 8
.IX Xref "PL_DBsub"
.IX Item "PL_DBsub"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1GV\s0 contains
the \s-1SV\s0 which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's \f(CW$DB::sub\fR variable.  See
\&\f(CW"PL_DBsingle"\fR.
.Sp
.Vb 1
\&        GV *    PL_DBsub
.Ve
.IP "PL_DBtrace" 8
.IX Xref "PL_DBtrace"
.IX Item "PL_DBtrace"
Trace variable used when Perl is run in debugging mode, with the \fB\-d\fR
switch.  This is the C variable which corresponds to Perl's \f(CW$DB::trace\fR
variable.  See \f(CW"PL_DBsingle"\fR.
.Sp
.Vb 1
\&        SV *    PL_DBtrace
.Ve
.IP "PL_dowarn" 8
.IX Xref "PL_dowarn"
.IX Item "PL_dowarn"
The C variable that roughly corresponds to Perl's \f(CW$^W\fR warning variable.
However, \f(CW$^W\fR is treated as a boolean, whereas \f(CW\*(C`PL_dowarn\*(C'\fR is a
collection of flag bits.
.Sp
.Vb 1
\&        U8      PL_dowarn
.Ve
.IP "PL_last_in_gv" 8
.IX Xref "PL_last_in_gv"
.IX Item "PL_last_in_gv"
The \s-1GV\s0 which was last used for a filehandle input operation.  (\f(CW\*(C`<FH>\*(C'\fR)
.Sp
.Vb 1
\&        GV*     PL_last_in_gv
.Ve
.IP "PL_ofsgv" 8
.IX Xref "PL_ofsgv"
.IX Item "PL_ofsgv"
The glob containing the output field separator \- \f(CW\*(C`*,\*(C'\fR in Perl space.
.Sp
.Vb 1
\&        GV*     PL_ofsgv
.Ve
.IP "PL_rs" 8
.IX Xref "PL_rs"
.IX Item "PL_rs"
The input record separator \- \f(CW$/\fR in Perl space.
.Sp
.Vb 1
\&        SV*     PL_rs
.Ve
.SH "Stack Manipulation Macros"
.IX Header "Stack Manipulation Macros"
.IP "djSP" 8
.IX Xref "djSP"
.IX Item "djSP"
Declare Just \f(CW\*(C`SP\*(C'\fR.  This is actually identical to \f(CW\*(C`dSP\*(C'\fR, and declares
a local copy of perl's stack pointer, available via the \f(CW\*(C`SP\*(C'\fR macro.
See \f(CW\*(C`"SP" in perlapi\*(C'\fR.  (Available for backward source code compatibility with
the old (Perl 5.005) thread model.)
.Sp
.Vb 1
\&                djSP;
.Ve
.IP "\s-1LVRET\s0" 8
.IX Xref "LVRET"
.IX Item "LVRET"
True if this op will be the return value of an lvalue subroutine
.SH "SV Manipulation Functions"
.IX Header "SV Manipulation Functions"
An \s-1SV\s0 (or \s-1AV, HV,\s0 etc.) is allocated in two parts: the head (struct
sv, av, hv...) contains type and reference count information, and for
many types, a pointer to the body (struct xrv, xpv, xpviv...), which
contains fields specific to each type.  Some types store all they need
in the head, so don't have a body.
.PP
In all but the most memory-paranoid configurations (ex: \s-1PURIFY\s0), heads
and bodies are allocated out of arenas, which by default are
approximately 4K chunks of memory parcelled up into N heads or bodies.
Sv-bodies are allocated by their sv-type, guaranteeing size
consistency needed to allocate safely from arrays.
.PP
For SV-heads, the first slot in each arena is reserved, and holds a
link to the next arena, some flags, and a note of the number of slots.
Snaked through each arena chain is a linked list of free items; when
this becomes empty, an extra arena is allocated and divided up into N
items which are threaded into the free list.
.PP
SV-bodies are similar, but they use arena-sets by default, which
separate the link and info from the arena itself, and reclaim the 1st
slot in the arena.  SV-bodies are further described later.
.PP
The following global variables are associated with arenas:
.PP
.Vb 2
\& PL_sv_arenaroot     pointer to list of SV arenas
\& PL_sv_root          pointer to list of free SV structures
\&
\& PL_body_arenas      head of linked\-list of body arenas
\& PL_body_roots[]     array of pointers to list of free bodies of svtype
\&                     arrays are indexed by the svtype needed
.Ve
.PP
A few special \s-1SV\s0 heads are not allocated from an arena, but are
instead directly created in the interpreter structure, eg PL_sv_undef.
The size of arenas can be changed from the default by setting
\&\s-1PERL_ARENA_SIZE\s0 appropriately at compile time.
.PP
The \s-1SV\s0 arena serves the secondary purpose of allowing still-live SVs
to be located and destroyed during final cleanup.
.PP
At the lowest level, the macros \fBnew_SV()\fR and \fBdel_SV()\fR grab and free
an \s-1SV\s0 head.  (If debugging with \-DD, \fBdel_SV()\fR calls the function \fBS_del_sv()\fR
to return the \s-1SV\s0 to the free list with error checking.) \fBnew_SV()\fR calls
\&\fBmore_sv()\fR / \fBsv_add_arena()\fR to add an extra arena if the free list is empty.
SVs in the free list have their SvTYPE field set to all ones.
.PP
At the time of very final cleanup, \fBsv_free_arenas()\fR is called from
\&\fBperl_destruct()\fR to physically free all the arenas allocated since the
start of the interpreter.
.PP
The function \fBvisit()\fR scans the \s-1SV\s0 arenas list, and calls a specified
function for each \s-1SV\s0 it finds which is still live \- ie which has an SvTYPE
other than all 1's, and a non-zero SvREFCNT. \fBvisit()\fR is used by the
following functions (specified as [function that calls \fBvisit()\fR] / [function
called by \fBvisit()\fR for each \s-1SV\s0]):
.PP
.Vb 2
\&    sv_report_used() / do_report_used()
\&                        dump all remaining SVs (debugging aid)
\&
\&    sv_clean_objs() / do_clean_objs(),do_clean_named_objs(),
\&                      do_clean_named_io_objs(),do_curse()
\&                        Attempt to free all objects pointed to by RVs,
\&                        try to do the same for all objects indir\-
\&                        ectly referenced by typeglobs too, and
\&                        then do a final sweep, cursing any
\&                        objects that remain.  Called once from
\&                        perl_destruct(), prior to calling sv_clean_all()
\&                        below.
\&
\&    sv_clean_all() / do_clean_all()
\&                        SvREFCNT_dec(sv) each remaining SV, possibly
\&                        triggering an sv_free(). It also sets the
\&                        SVf_BREAK flag on the SV to indicate that the
\&                        refcnt has been artificially lowered, and thus
\&                        stopping sv_free() from giving spurious warnings
\&                        about SVs which unexpectedly have a refcnt
\&                        of zero.  called repeatedly from perl_destruct()
\&                        until there are no SVs left.
.Ve
.IP "sv_2num" 8
.IX Xref "sv_2num"
.IX Item "sv_2num"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Return an \s-1SV\s0 with the numeric value of the source \s-1SV,\s0 doing any necessary
reference or overload conversion.  The caller is expected to have handled
get-magic already.
.Sp
.Vb 1
\&        SV*     sv_2num(SV *const sv)
.Ve
.IP "sv_add_arena" 8
.IX Xref "sv_add_arena"
.IX Item "sv_add_arena"
Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.
.Sp
.Vb 2
\&        void    sv_add_arena(char *const ptr, const U32 size,
\&                             const U32 flags)
.Ve
.IP "sv_clean_all" 8
.IX Xref "sv_clean_all"
.IX Item "sv_clean_all"
Decrement the refcnt of each remaining \s-1SV,\s0 possibly triggering a
cleanup.  This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.
.Sp
.Vb 1
\&        I32     sv_clean_all()
.Ve
.IP "sv_clean_objs" 8
.IX Xref "sv_clean_objs"
.IX Item "sv_clean_objs"
Attempt to destroy all objects not yet freed.
.Sp
.Vb 1
\&        void    sv_clean_objs()
.Ve
.IP "sv_free_arenas" 8
.IX Xref "sv_free_arenas"
.IX Item "sv_free_arenas"
Deallocate the memory used by all arenas.  Note that all the individual \s-1SV\s0
heads and bodies within the arenas must already have been freed.
.Sp
.Vb 1
\&        void    sv_free_arenas()
.Ve
.IP "SvTHINKFIRST" 8
.IX Xref "SvTHINKFIRST"
.IX Item "SvTHINKFIRST"
A quick flag check to see whether an \f(CW\*(C`sv\*(C'\fR should be passed to \f(CW\*(C`sv_force_normal\*(C'\fR
to be \*(L"downgraded\*(R" before \f(CW\*(C`SvIVX\*(C'\fR or \f(CW\*(C`SvPVX\*(C'\fR can be modified directly.
.Sp
For example, if your scalar is a reference and you want to modify the \f(CW\*(C`SvIVX\*(C'\fR
slot, you can't just do \f(CW\*(C`SvROK_off\*(C'\fR, as that will leak the referent.
.Sp
This is used internally by various sv-modifying functions, such as
\&\f(CW\*(C`sv_setsv\*(C'\fR, \f(CW\*(C`sv_setiv\*(C'\fR and \f(CW\*(C`sv_pvn_force\*(C'\fR.
.Sp
One case that this does not handle is a gv without SvFAKE set.  After
.Sp
.Vb 1
\&    if (SvTHINKFIRST(gv)) sv_force_normal(gv);
.Ve
.Sp
it will still be a gv.
.Sp
\&\f(CW\*(C`SvTHINKFIRST\*(C'\fR sometimes produces false positives.  In those cases
\&\f(CW\*(C`sv_force_normal\*(C'\fR does nothing.
.Sp
.Vb 1
\&        U32     SvTHINKFIRST(SV *sv)
.Ve
.SH "Unicode Support"
.IX Header "Unicode Support"
.IP "find_uninit_var" 8
.IX Xref "find_uninit_var"
.IX Item "find_uninit_var"
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
Find the name of the undefined variable (if any) that caused the operator
to issue a \*(L"Use of uninitialized value\*(R" warning.
If match is true, only return a name if its value matches \f(CW\*(C`uninit_sv\*(C'\fR.
So roughly speaking, if a unary operator (such as \f(CW\*(C`OP_COS\*(C'\fR) generates a
warning, then following the direct child of the op may yield an
\&\f(CW\*(C`OP_PADSV\*(C'\fR or \f(CW\*(C`OP_GV\*(C'\fR that gives the name of the undefined variable.  On the
other hand, with \f(CW\*(C`OP_ADD\*(C'\fR there are two branches to follow, so we only print
the variable name if we get an exact match.
\&\f(CW\*(C`desc_p\*(C'\fR points to a string pointer holding the description of the op.
This may be updated if needed.
.Sp
The name is returned as a mortal \s-1SV.\s0
.Sp
Assumes that \f(CW\*(C`PL_op\*(C'\fR is the \s-1OP\s0 that originally triggered the error, and that
\&\f(CW\*(C`PL_comppad\*(C'\fR/\f(CW\*(C`PL_curpad\*(C'\fR points to the currently executing pad.
.Sp
.Vb 3
\&        SV*     find_uninit_var(const OP *const obase,
\&                                const SV *const uninit_sv,
\&                                bool match, const char **desc_p)
.Ve
.IP "isSCRIPT_RUN" 8
.IX Xref "isSCRIPT_RUN"
.IX Item "isSCRIPT_RUN"
Returns a bool as to whether or not the sequence of bytes from \f(CW\*(C`s\*(C'\fR up to but
not including \f(CW\*(C`send\*(C'\fR form a \*(L"script run\*(R".  \f(CW\*(C`utf8_target\*(C'\fR is \s-1TRUE\s0 iff the
sequence starting at \f(CW\*(C`s\*(C'\fR is to be treated as \s-1UTF\-8.\s0  To be precise, except for
two degenerate cases given below, this function returns \s-1TRUE\s0 iff all code
points in it come from any combination of three \*(L"scripts\*(R" given by the Unicode
\&\*(L"Script Extensions\*(R" property: Common, Inherited, and possibly one other.
Additionally all decimal digits must come from the same consecutive sequence of
10.
.Sp
For example, if all the characters in the sequence are Greek, or Common, or
Inherited, this function will return \s-1TRUE,\s0 provided any decimal digits in it
are from the same block of digits in Common.  (These are the \s-1ASCII\s0 digits
\&\*(L"0\*(R"..\*(L"9\*(R" and additionally a block for full width forms of these, and several
others used in mathematical notation.)   For scripts (unlike Greek) that have
their own digits defined this will accept either digits from that set or from
one of the Common digit sets, but not a combination of the two.  Some scripts,
such as Arabic, have more than one set of digits.  All digits must come from
the same set for this function to return \s-1TRUE.\s0
.Sp
\&\f(CW*ret_script\fR, if \f(CW\*(C`ret_script\*(C'\fR is not \s-1NULL,\s0 will on return of \s-1TRUE\s0
contain the script found, using the \f(CW\*(C`SCX_enum\*(C'\fR typedef.  Its value will be
\&\f(CW\*(C`SCX_INVALID\*(C'\fR if the function returns \s-1FALSE.\s0
.Sp
If the sequence is empty, \s-1TRUE\s0 is returned, but \f(CW*ret_script\fR (if asked for)
will be \f(CW\*(C`SCX_INVALID\*(C'\fR.
.Sp
If the sequence contains a single code point which is unassigned to a character
in the version of Unicode being used, the function will return \s-1TRUE,\s0 and the
script will be \f(CW\*(C`SCX_Unknown\*(C'\fR.  Any other combination of unassigned code points
in the input sequence will result in the function treating the input as not
being a script run.
.Sp
The returned script will be \f(CW\*(C`SCX_Inherited\*(C'\fR iff all the code points in it are
from the Inherited script.
.Sp
Otherwise, the returned script will be \f(CW\*(C`SCX_Common\*(C'\fR iff all the code points in
it are from the Inherited or Common scripts.
.Sp
.Vb 2
\&        bool    isSCRIPT_RUN(const U8 *s, const U8 *send,
\&                             const bool utf8_target)
.Ve
.IP "is_utf8_non_invariant_string" 8
.IX Xref "is_utf8_non_invariant_string"
.IX Item "is_utf8_non_invariant_string"
Returns \s-1TRUE\s0 if \*(L"is_utf8_invariant_string\*(R" in perlapi returns \s-1FALSE\s0 for the first
\&\f(CW\*(C`len\*(C'\fR bytes of the string \f(CW\*(C`s\*(C'\fR, but they are, nonetheless, legal Perl-extended
\&\s-1UTF\-8\s0; otherwise returns \s-1FALSE.\s0
.Sp
A \s-1TRUE\s0 return means that at least one code point represented by the sequence
either is a wide character not representable as a single byte, or the
representation differs depending on whether the sequence is encoded in \s-1UTF\-8\s0 or
not.
.Sp
See also
\&\f(CW\*(C`"is_utf8_invariant_string" in perlapi\*(C'\fR,
\&\f(CW\*(C`"is_utf8_string" in perlapi\*(C'\fR
.Sp
.Vb 2
\&        bool    is_utf8_non_invariant_string(const U8* const s,
\&                                             STRLEN len)
.Ve
.IP "report_uninit" 8
.IX Xref "report_uninit"
.IX Item "report_uninit"
Print appropriate \*(L"Use of uninitialized variable\*(R" warning.
.Sp
.Vb 1
\&        void    report_uninit(const SV *uninit_sv)
.Ve
.IP "variant_under_utf8_count" 8
.IX Xref "variant_under_utf8_count"
.IX Item "variant_under_utf8_count"
This function looks at the sequence of bytes between \f(CW\*(C`s\*(C'\fR and \f(CW\*(C`e\*(C'\fR, which are
assumed to be encoded in ASCII/Latin1, and returns how many of them would
change should the string be translated into \s-1UTF\-8.\s0  Due to the nature of \s-1UTF\-8,\s0
each of these would occupy two bytes instead of the single one in the input
string.  Thus, this function returns the precise number of bytes the string
would expand by when translated to \s-1UTF\-8.\s0
.Sp
Unlike most of the other functions that have \f(CW\*(C`utf8\*(C'\fR in their name, the input
to this function is \s-1NOT\s0 a UTF\-8\-encoded string.  The function name is slightly
\&\fIodd\fR to emphasize this.
.Sp
This function is internal to Perl because khw thinks that any \s-1XS\s0 code that
would want this is probably operating too close to the internals.  Presenting a
valid use case could change that.
.Sp
See also
\&\f(CW\*(C`"is_utf8_invariant_string" in perlapi\*(C'\fR
and
\&\f(CW\*(C`"is_utf8_invariant_string_loc" in perlapi\*(C'\fR,
.Sp
.Vb 2
\&        Size_t  variant_under_utf8_count(const U8* const s,
\&                                         const U8* const e)
.Ve
.SH "Undocumented functions"
.IX Header "Undocumented functions"
The following functions are currently undocumented.  If you use one of
them, you may wish to consider creating and submitting documentation for
it.
.IP "PerlIO_restore_errno" 4
.IX Xref "PerlIO_restore_errno"
.IX Item "PerlIO_restore_errno"
.PD 0
.IP "PerlIO_save_errno" 4
.IX Xref "PerlIO_save_errno"
.IX Item "PerlIO_save_errno"
.IP "PerlLIO_dup2_cloexec" 4
.IX Xref "PerlLIO_dup2_cloexec"
.IX Item "PerlLIO_dup2_cloexec"
.IP "PerlLIO_dup_cloexec" 4
.IX Xref "PerlLIO_dup_cloexec"
.IX Item "PerlLIO_dup_cloexec"
.IP "PerlLIO_open3_cloexec" 4
.IX Xref "PerlLIO_open3_cloexec"
.IX Item "PerlLIO_open3_cloexec"
.IP "PerlLIO_open_cloexec" 4
.IX Xref "PerlLIO_open_cloexec"
.IX Item "PerlLIO_open_cloexec"
.IP "PerlProc_pipe_cloexec" 4
.IX Xref "PerlProc_pipe_cloexec"
.IX Item "PerlProc_pipe_cloexec"
.IP "PerlSock_accept_cloexec" 4
.IX Xref "PerlSock_accept_cloexec"
.IX Item "PerlSock_accept_cloexec"
.IP "PerlSock_socket_cloexec" 4
.IX Xref "PerlSock_socket_cloexec"
.IX Item "PerlSock_socket_cloexec"
.IP "PerlSock_socketpair_cloexec" 4
.IX Xref "PerlSock_socketpair_cloexec"
.IX Item "PerlSock_socketpair_cloexec"
.IP "Slab_Alloc" 4
.IX Xref "Slab_Alloc"
.IX Item "Slab_Alloc"
.IP "Slab_Free" 4
.IX Xref "Slab_Free"
.IX Item "Slab_Free"
.IP "Slab_to_ro" 4
.IX Xref "Slab_to_ro"
.IX Item "Slab_to_ro"
.IP "Slab_to_rw" 4
.IX Xref "Slab_to_rw"
.IX Item "Slab_to_rw"
.IP "_add_range_to_invlist" 4
.IX Xref "_add_range_to_invlist"
.IX Item "_add_range_to_invlist"
.IP "_byte_dump_string" 4
.IX Xref "_byte_dump_string"
.IX Item "_byte_dump_string"
.IP "_get_regclass_nonbitmap_data" 4
.IX Xref "_get_regclass_nonbitmap_data"
.IX Item "_get_regclass_nonbitmap_data"
.IP "_inverse_folds" 4
.IX Xref "_inverse_folds"
.IX Item "_inverse_folds"
.IP "_invlistEQ" 4
.IX Xref "_invlistEQ"
.IX Item "_invlistEQ"
.IP "_invlist_array_init" 4
.IX Xref "_invlist_array_init"
.IX Item "_invlist_array_init"
.IP "_invlist_contains_cp" 4
.IX Xref "_invlist_contains_cp"
.IX Item "_invlist_contains_cp"
.IP "_invlist_dump" 4
.IX Xref "_invlist_dump"
.IX Item "_invlist_dump"
.IP "_invlist_intersection" 4
.IX Xref "_invlist_intersection"
.IX Item "_invlist_intersection"
.IP "_invlist_intersection_maybe_complement_2nd" 4
.IX Xref "_invlist_intersection_maybe_complement_2nd"
.IX Item "_invlist_intersection_maybe_complement_2nd"
.IP "_invlist_invert" 4
.IX Xref "_invlist_invert"
.IX Item "_invlist_invert"
.IP "_invlist_len" 4
.IX Xref "_invlist_len"
.IX Item "_invlist_len"
.IP "_invlist_search" 4
.IX Xref "_invlist_search"
.IX Item "_invlist_search"
.IP "_invlist_subtract" 4
.IX Xref "_invlist_subtract"
.IX Item "_invlist_subtract"
.IP "_invlist_union" 4
.IX Xref "_invlist_union"
.IX Item "_invlist_union"
.IP "_invlist_union_maybe_complement_2nd" 4
.IX Xref "_invlist_union_maybe_complement_2nd"
.IX Item "_invlist_union_maybe_complement_2nd"
.IP "_is_grapheme" 4
.IX Xref "_is_grapheme"
.IX Item "_is_grapheme"
.IP "_is_in_locale_category" 4
.IX Xref "_is_in_locale_category"
.IX Item "_is_in_locale_category"
.IP "_mem_collxfrm" 4
.IX Xref "_mem_collxfrm"
.IX Item "_mem_collxfrm"
.IP "_new_invlist" 4
.IX Xref "_new_invlist"
.IX Item "_new_invlist"
.IP "_new_invlist_C_array" 4
.IX Xref "_new_invlist_C_array"
.IX Item "_new_invlist_C_array"
.IP "_setup_canned_invlist" 4
.IX Xref "_setup_canned_invlist"
.IX Item "_setup_canned_invlist"
.IP "_to_fold_latin1" 4
.IX Xref "_to_fold_latin1"
.IX Item "_to_fold_latin1"
.IP "_to_upper_title_latin1" 4
.IX Xref "_to_upper_title_latin1"
.IX Item "_to_upper_title_latin1"
.IP "_warn_problematic_locale" 4
.IX Xref "_warn_problematic_locale"
.IX Item "_warn_problematic_locale"
.IP "abort_execution" 4
.IX Xref "abort_execution"
.IX Item "abort_execution"
.IP "add_cp_to_invlist" 4
.IX Xref "add_cp_to_invlist"
.IX Item "add_cp_to_invlist"
.IP "alloc_LOGOP" 4
.IX Xref "alloc_LOGOP"
.IX Item "alloc_LOGOP"
.IP "allocmy" 4
.IX Xref "allocmy"
.IX Item "allocmy"
.IP "amagic_is_enabled" 4
.IX Xref "amagic_is_enabled"
.IX Item "amagic_is_enabled"
.IP "append_utf8_from_native_byte" 4
.IX Xref "append_utf8_from_native_byte"
.IX Item "append_utf8_from_native_byte"
.IP "apply" 4
.IX Xref "apply"
.IX Item "apply"
.IP "av_extend_guts" 4
.IX Xref "av_extend_guts"
.IX Item "av_extend_guts"
.IP "av_nonelem" 4
.IX Xref "av_nonelem"
.IX Item "av_nonelem"
.IP "av_reify" 4
.IX Xref "av_reify"
.IX Item "av_reify"
.IP "bind_match" 4
.IX Xref "bind_match"
.IX Item "bind_match"
.IP "boot_core_PerlIO" 4
.IX Xref "boot_core_PerlIO"
.IX Item "boot_core_PerlIO"
.IP "boot_core_UNIVERSAL" 4
.IX Xref "boot_core_UNIVERSAL"
.IX Item "boot_core_UNIVERSAL"
.IP "boot_core_mro" 4
.IX Xref "boot_core_mro"
.IX Item "boot_core_mro"
.IP "cando" 4
.IX Xref "cando"
.IX Item "cando"
.IP "check_utf8_print" 4
.IX Xref "check_utf8_print"
.IX Item "check_utf8_print"
.IP "ck_anoncode" 4
.IX Xref "ck_anoncode"
.IX Item "ck_anoncode"
.IP "ck_backtick" 4
.IX Xref "ck_backtick"
.IX Item "ck_backtick"
.IP "ck_bitop" 4
.IX Xref "ck_bitop"
.IX Item "ck_bitop"
.IP "ck_cmp" 4
.IX Xref "ck_cmp"
.IX Item "ck_cmp"
.IP "ck_concat" 4
.IX Xref "ck_concat"
.IX Item "ck_concat"
.IP "ck_defined" 4
.IX Xref "ck_defined"
.IX Item "ck_defined"
.IP "ck_delete" 4
.IX Xref "ck_delete"
.IX Item "ck_delete"
.IP "ck_each" 4
.IX Xref "ck_each"
.IX Item "ck_each"
.IP "ck_entersub_args_core" 4
.IX Xref "ck_entersub_args_core"
.IX Item "ck_entersub_args_core"
.IP "ck_eof" 4
.IX Xref "ck_eof"
.IX Item "ck_eof"
.IP "ck_eval" 4
.IX Xref "ck_eval"
.IX Item "ck_eval"
.IP "ck_exec" 4
.IX Xref "ck_exec"
.IX Item "ck_exec"
.IP "ck_exists" 4
.IX Xref "ck_exists"
.IX Item "ck_exists"
.IP "ck_ftst" 4
.IX Xref "ck_ftst"
.IX Item "ck_ftst"
.IP "ck_fun" 4
.IX Xref "ck_fun"
.IX Item "ck_fun"
.IP "ck_glob" 4
.IX Xref "ck_glob"
.IX Item "ck_glob"
.IP "ck_grep" 4
.IX Xref "ck_grep"
.IX Item "ck_grep"
.IP "ck_index" 4
.IX Xref "ck_index"
.IX Item "ck_index"
.IP "ck_join" 4
.IX Xref "ck_join"
.IX Item "ck_join"
.IP "ck_length" 4
.IX Xref "ck_length"
.IX Item "ck_length"
.IP "ck_lfun" 4
.IX Xref "ck_lfun"
.IX Item "ck_lfun"
.IP "ck_listiob" 4
.IX Xref "ck_listiob"
.IX Item "ck_listiob"
.IP "ck_match" 4
.IX Xref "ck_match"
.IX Item "ck_match"
.IP "ck_method" 4
.IX Xref "ck_method"
.IX Item "ck_method"
.IP "ck_null" 4
.IX Xref "ck_null"
.IX Item "ck_null"
.IP "ck_open" 4
.IX Xref "ck_open"
.IX Item "ck_open"
.IP "ck_prototype" 4
.IX Xref "ck_prototype"
.IX Item "ck_prototype"
.IP "ck_readline" 4
.IX Xref "ck_readline"
.IX Item "ck_readline"
.IP "ck_refassign" 4
.IX Xref "ck_refassign"
.IX Item "ck_refassign"
.IP "ck_repeat" 4
.IX Xref "ck_repeat"
.IX Item "ck_repeat"
.IP "ck_require" 4
.IX Xref "ck_require"
.IX Item "ck_require"
.IP "ck_return" 4
.IX Xref "ck_return"
.IX Item "ck_return"
.IP "ck_rfun" 4
.IX Xref "ck_rfun"
.IX Item "ck_rfun"
.IP "ck_rvconst" 4
.IX Xref "ck_rvconst"
.IX Item "ck_rvconst"
.IP "ck_sassign" 4
.IX Xref "ck_sassign"
.IX Item "ck_sassign"
.IP "ck_select" 4
.IX Xref "ck_select"
.IX Item "ck_select"
.IP "ck_shift" 4
.IX Xref "ck_shift"
.IX Item "ck_shift"
.IP "ck_smartmatch" 4
.IX Xref "ck_smartmatch"
.IX Item "ck_smartmatch"
.IP "ck_sort" 4
.IX Xref "ck_sort"
.IX Item "ck_sort"
.IP "ck_spair" 4
.IX Xref "ck_spair"
.IX Item "ck_spair"
.IP "ck_split" 4
.IX Xref "ck_split"
.IX Item "ck_split"
.IP "ck_stringify" 4
.IX Xref "ck_stringify"
.IX Item "ck_stringify"
.IP "ck_subr" 4
.IX Xref "ck_subr"
.IX Item "ck_subr"
.IP "ck_substr" 4
.IX Xref "ck_substr"
.IX Item "ck_substr"
.IP "ck_svconst" 4
.IX Xref "ck_svconst"
.IX Item "ck_svconst"
.IP "ck_tell" 4
.IX Xref "ck_tell"
.IX Item "ck_tell"
.IP "ck_trunc" 4
.IX Xref "ck_trunc"
.IX Item "ck_trunc"
.IP "closest_cop" 4
.IX Xref "closest_cop"
.IX Item "closest_cop"
.IP "compute_EXACTish" 4
.IX Xref "compute_EXACTish"
.IX Item "compute_EXACTish"
.IP "coresub_op" 4
.IX Xref "coresub_op"
.IX Item "coresub_op"
.IP "create_eval_scope" 4
.IX Xref "create_eval_scope"
.IX Item "create_eval_scope"
.IP "croak_caller" 4
.IX Xref "croak_caller"
.IX Item "croak_caller"
.IP "croak_no_mem" 4
.IX Xref "croak_no_mem"
.IX Item "croak_no_mem"
.IP "croak_popstack" 4
.IX Xref "croak_popstack"
.IX Item "croak_popstack"
.IP "current_re_engine" 4
.IX Xref "current_re_engine"
.IX Item "current_re_engine"
.IP "custom_op_get_field" 4
.IX Xref "custom_op_get_field"
.IX Item "custom_op_get_field"
.IP "cv_ckproto_len_flags" 4
.IX Xref "cv_ckproto_len_flags"
.IX Item "cv_ckproto_len_flags"
.IP "cv_clone_into" 4
.IX Xref "cv_clone_into"
.IX Item "cv_clone_into"
.IP "cv_const_sv_or_av" 4
.IX Xref "cv_const_sv_or_av"
.IX Item "cv_const_sv_or_av"
.IP "cv_undef_flags" 4
.IX Xref "cv_undef_flags"
.IX Item "cv_undef_flags"
.IP "cvgv_from_hek" 4
.IX Xref "cvgv_from_hek"
.IX Item "cvgv_from_hek"
.IP "cvgv_set" 4
.IX Xref "cvgv_set"
.IX Item "cvgv_set"
.IP "cvstash_set" 4
.IX Xref "cvstash_set"
.IX Item "cvstash_set"
.IP "deb_stack_all" 4
.IX Xref "deb_stack_all"
.IX Item "deb_stack_all"
.IP "defelem_target" 4
.IX Xref "defelem_target"
.IX Item "defelem_target"
.IP "delete_eval_scope" 4
.IX Xref "delete_eval_scope"
.IX Item "delete_eval_scope"
.IP "delimcpy_no_escape" 4
.IX Xref "delimcpy_no_escape"
.IX Item "delimcpy_no_escape"
.IP "die_unwind" 4
.IX Xref "die_unwind"
.IX Item "die_unwind"
.IP "do_aexec" 4
.IX Xref "do_aexec"
.IX Item "do_aexec"
.IP "do_aexec5" 4
.IX Xref "do_aexec5"
.IX Item "do_aexec5"
.IP "do_eof" 4
.IX Xref "do_eof"
.IX Item "do_eof"
.IP "do_exec" 4
.IX Xref "do_exec"
.IX Item "do_exec"
.IP "do_exec3" 4
.IX Xref "do_exec3"
.IX Item "do_exec3"
.IP "do_ipcctl" 4
.IX Xref "do_ipcctl"
.IX Item "do_ipcctl"
.IP "do_ipcget" 4
.IX Xref "do_ipcget"
.IX Item "do_ipcget"
.IP "do_msgrcv" 4
.IX Xref "do_msgrcv"
.IX Item "do_msgrcv"
.IP "do_msgsnd" 4
.IX Xref "do_msgsnd"
.IX Item "do_msgsnd"
.IP "do_ncmp" 4
.IX Xref "do_ncmp"
.IX Item "do_ncmp"
.IP "do_open6" 4
.IX Xref "do_open6"
.IX Item "do_open6"
.IP "do_open_raw" 4
.IX Xref "do_open_raw"
.IX Item "do_open_raw"
.IP "do_print" 4
.IX Xref "do_print"
.IX Item "do_print"
.IP "do_readline" 4
.IX Xref "do_readline"
.IX Item "do_readline"
.IP "do_seek" 4
.IX Xref "do_seek"
.IX Item "do_seek"
.IP "do_semop" 4
.IX Xref "do_semop"
.IX Item "do_semop"
.IP "do_shmio" 4
.IX Xref "do_shmio"
.IX Item "do_shmio"
.IP "do_sysseek" 4
.IX Xref "do_sysseek"
.IX Item "do_sysseek"
.IP "do_tell" 4
.IX Xref "do_tell"
.IX Item "do_tell"
.IP "do_trans" 4
.IX Xref "do_trans"
.IX Item "do_trans"
.IP "do_vecget" 4
.IX Xref "do_vecget"
.IX Item "do_vecget"
.IP "do_vecset" 4
.IX Xref "do_vecset"
.IX Item "do_vecset"
.IP "do_vop" 4
.IX Xref "do_vop"
.IX Item "do_vop"
.IP "does_utf8_overflow" 4
.IX Xref "does_utf8_overflow"
.IX Item "does_utf8_overflow"
.IP "dofile" 4
.IX Xref "dofile"
.IX Item "dofile"
.IP "drand48_init_r" 4
.IX Xref "drand48_init_r"
.IX Item "drand48_init_r"
.IP "drand48_r" 4
.IX Xref "drand48_r"
.IX Item "drand48_r"
.IP "dtrace_probe_call" 4
.IX Xref "dtrace_probe_call"
.IX Item "dtrace_probe_call"
.IP "dtrace_probe_load" 4
.IX Xref "dtrace_probe_load"
.IX Item "dtrace_probe_load"
.IP "dtrace_probe_op" 4
.IX Xref "dtrace_probe_op"
.IX Item "dtrace_probe_op"
.IP "dtrace_probe_phase" 4
.IX Xref "dtrace_probe_phase"
.IX Item "dtrace_probe_phase"
.IP "dump_all_perl" 4
.IX Xref "dump_all_perl"
.IX Item "dump_all_perl"
.IP "dump_packsubs_perl" 4
.IX Xref "dump_packsubs_perl"
.IX Item "dump_packsubs_perl"
.IP "dump_sub_perl" 4
.IX Xref "dump_sub_perl"
.IX Item "dump_sub_perl"
.IP "dump_sv_child" 4
.IX Xref "dump_sv_child"
.IX Item "dump_sv_child"
.IP "dup_warnings" 4
.IX Xref "dup_warnings"
.IX Item "dup_warnings"
.IP "emulate_cop_io" 4
.IX Xref "emulate_cop_io"
.IX Item "emulate_cop_io"
.IP "feature_is_enabled" 4
.IX Xref "feature_is_enabled"
.IX Item "feature_is_enabled"
.IP "find_lexical_cv" 4
.IX Xref "find_lexical_cv"
.IX Item "find_lexical_cv"
.IP "find_runcv_where" 4
.IX Xref "find_runcv_where"
.IX Item "find_runcv_where"
.IP "find_script" 4
.IX Xref "find_script"
.IX Item "find_script"
.IP "foldEQ_latin1_s2_folded" 4
.IX Xref "foldEQ_latin1_s2_folded"
.IX Item "foldEQ_latin1_s2_folded"
.IP "form_short_octal_warning" 4
.IX Xref "form_short_octal_warning"
.IX Item "form_short_octal_warning"
.IP "free_tied_hv_pool" 4
.IX Xref "free_tied_hv_pool"
.IX Item "free_tied_hv_pool"
.IP "get_and_check_backslash_N_name" 4
.IX Xref "get_and_check_backslash_N_name"
.IX Item "get_and_check_backslash_N_name"
.IP "get_db_sub" 4
.IX Xref "get_db_sub"
.IX Item "get_db_sub"
.IP "get_debug_opts" 4
.IX Xref "get_debug_opts"
.IX Item "get_debug_opts"
.IP "get_hash_seed" 4
.IX Xref "get_hash_seed"
.IX Item "get_hash_seed"
.IP "get_invlist_iter_addr" 4
.IX Xref "get_invlist_iter_addr"
.IX Item "get_invlist_iter_addr"
.IP "get_invlist_offset_addr" 4
.IX Xref "get_invlist_offset_addr"
.IX Item "get_invlist_offset_addr"
.IP "get_invlist_previous_index_addr" 4
.IX Xref "get_invlist_previous_index_addr"
.IX Item "get_invlist_previous_index_addr"
.IP "get_no_modify" 4
.IX Xref "get_no_modify"
.IX Item "get_no_modify"
.IP "get_opargs" 4
.IX Xref "get_opargs"
.IX Item "get_opargs"
.IP "get_re_arg" 4
.IX Xref "get_re_arg"
.IX Item "get_re_arg"
.IP "getenv_len" 4
.IX Xref "getenv_len"
.IX Item "getenv_len"
.IP "grok_bslash_c" 4
.IX Xref "grok_bslash_c"
.IX Item "grok_bslash_c"
.IP "grok_bslash_o" 4
.IX Xref "grok_bslash_o"
.IX Item "grok_bslash_o"
.IP "grok_bslash_x" 4
.IX Xref "grok_bslash_x"
.IX Item "grok_bslash_x"
.IP "gv_fetchmeth_internal" 4
.IX Xref "gv_fetchmeth_internal"
.IX Item "gv_fetchmeth_internal"
.IP "gv_override" 4
.IX Xref "gv_override"
.IX Item "gv_override"
.IP "gv_setref" 4
.IX Xref "gv_setref"
.IX Item "gv_setref"
.IP "gv_stashpvn_internal" 4
.IX Xref "gv_stashpvn_internal"
.IX Item "gv_stashpvn_internal"
.IP "gv_stashsvpvn_cached" 4
.IX Xref "gv_stashsvpvn_cached"
.IX Item "gv_stashsvpvn_cached"
.IP "handle_named_backref" 4
.IX Xref "handle_named_backref"
.IX Item "handle_named_backref"
.IP "handle_user_defined_property" 4
.IX Xref "handle_user_defined_property"
.IX Item "handle_user_defined_property"
.IP "hfree_next_entry" 4
.IX Xref "hfree_next_entry"
.IX Item "hfree_next_entry"
.IP "hv_backreferences_p" 4
.IX Xref "hv_backreferences_p"
.IX Item "hv_backreferences_p"
.IP "hv_kill_backrefs" 4
.IX Xref "hv_kill_backrefs"
.IX Item "hv_kill_backrefs"
.IP "hv_placeholders_p" 4
.IX Xref "hv_placeholders_p"
.IX Item "hv_placeholders_p"
.IP "hv_pushkv" 4
.IX Xref "hv_pushkv"
.IX Item "hv_pushkv"
.IP "hv_undef_flags" 4
.IX Xref "hv_undef_flags"
.IX Item "hv_undef_flags"
.IP "init_argv_symbols" 4
.IX Xref "init_argv_symbols"
.IX Item "init_argv_symbols"
.IP "init_constants" 4
.IX Xref "init_constants"
.IX Item "init_constants"
.IP "init_dbargs" 4
.IX Xref "init_dbargs"
.IX Item "init_dbargs"
.IP "init_debugger" 4
.IX Xref "init_debugger"
.IX Item "init_debugger"
.IP "init_named_cv" 4
.IX Xref "init_named_cv"
.IX Item "init_named_cv"
.IP "init_uniprops" 4
.IX Xref "init_uniprops"
.IX Item "init_uniprops"
.IP "invert" 4
.IX Xref "invert"
.IX Item "invert"
.IP "invlist_array" 4
.IX Xref "invlist_array"
.IX Item "invlist_array"
.IP "invlist_clear" 4
.IX Xref "invlist_clear"
.IX Item "invlist_clear"
.IP "invlist_clone" 4
.IX Xref "invlist_clone"
.IX Item "invlist_clone"
.IP "invlist_highest" 4
.IX Xref "invlist_highest"
.IX Item "invlist_highest"
.IP "invlist_is_iterating" 4
.IX Xref "invlist_is_iterating"
.IX Item "invlist_is_iterating"
.IP "invlist_iterfinish" 4
.IX Xref "invlist_iterfinish"
.IX Item "invlist_iterfinish"
.IP "invlist_iterinit" 4
.IX Xref "invlist_iterinit"
.IX Item "invlist_iterinit"
.IP "invlist_max" 4
.IX Xref "invlist_max"
.IX Item "invlist_max"
.IP "invlist_previous_index" 4
.IX Xref "invlist_previous_index"
.IX Item "invlist_previous_index"
.IP "invlist_set_len" 4
.IX Xref "invlist_set_len"
.IX Item "invlist_set_len"
.IP "invlist_set_previous_index" 4
.IX Xref "invlist_set_previous_index"
.IX Item "invlist_set_previous_index"
.IP "invlist_trim" 4
.IX Xref "invlist_trim"
.IX Item "invlist_trim"
.IP "io_close" 4
.IX Xref "io_close"
.IX Item "io_close"
.IP "isFF_OVERLONG" 4
.IX Xref "isFF_OVERLONG"
.IX Item "isFF_OVERLONG"
.IP "isFOO_lc" 4
.IX Xref "isFOO_lc"
.IX Item "isFOO_lc"
.IP "is_invlist" 4
.IX Xref "is_invlist"
.IX Item "is_invlist"
.IP "is_utf8_common" 4
.IX Xref "is_utf8_common"
.IX Item "is_utf8_common"
.IP "is_utf8_common_with_len" 4
.IX Xref "is_utf8_common_with_len"
.IX Item "is_utf8_common_with_len"
.IP "is_utf8_overlong_given_start_byte_ok" 4
.IX Xref "is_utf8_overlong_given_start_byte_ok"
.IX Item "is_utf8_overlong_given_start_byte_ok"
.IP "isinfnansv" 4
.IX Xref "isinfnansv"
.IX Item "isinfnansv"
.IP "jmaybe" 4
.IX Xref "jmaybe"
.IX Item "jmaybe"
.IP "keyword" 4
.IX Xref "keyword"
.IX Item "keyword"
.IP "keyword_plugin_standard" 4
.IX Xref "keyword_plugin_standard"
.IX Item "keyword_plugin_standard"
.IP "list" 4
.IX Xref "list"
.IX Item "list"
.IP "localize" 4
.IX Xref "localize"
.IX Item "localize"
.IP "magic_clear_all_env" 4
.IX Xref "magic_clear_all_env"
.IX Item "magic_clear_all_env"
.IP "magic_cleararylen_p" 4
.IX Xref "magic_cleararylen_p"
.IX Item "magic_cleararylen_p"
.IP "magic_clearenv" 4
.IX Xref "magic_clearenv"
.IX Item "magic_clearenv"
.IP "magic_clearisa" 4
.IX Xref "magic_clearisa"
.IX Item "magic_clearisa"
.IP "magic_clearpack" 4
.IX Xref "magic_clearpack"
.IX Item "magic_clearpack"
.IP "magic_clearsig" 4
.IX Xref "magic_clearsig"
.IX Item "magic_clearsig"
.IP "magic_copycallchecker" 4
.IX Xref "magic_copycallchecker"
.IX Item "magic_copycallchecker"
.IP "magic_existspack" 4
.IX Xref "magic_existspack"
.IX Item "magic_existspack"
.IP "magic_freearylen_p" 4
.IX Xref "magic_freearylen_p"
.IX Item "magic_freearylen_p"
.IP "magic_freeovrld" 4
.IX Xref "magic_freeovrld"
.IX Item "magic_freeovrld"
.IP "magic_get" 4
.IX Xref "magic_get"
.IX Item "magic_get"
.IP "magic_getarylen" 4
.IX Xref "magic_getarylen"
.IX Item "magic_getarylen"
.IP "magic_getdebugvar" 4
.IX Xref "magic_getdebugvar"
.IX Item "magic_getdebugvar"
.IP "magic_getdefelem" 4
.IX Xref "magic_getdefelem"
.IX Item "magic_getdefelem"
.IP "magic_getnkeys" 4
.IX Xref "magic_getnkeys"
.IX Item "magic_getnkeys"
.IP "magic_getpack" 4
.IX Xref "magic_getpack"
.IX Item "magic_getpack"
.IP "magic_getpos" 4
.IX Xref "magic_getpos"
.IX Item "magic_getpos"
.IP "magic_getsig" 4
.IX Xref "magic_getsig"
.IX Item "magic_getsig"
.IP "magic_getsubstr" 4
.IX Xref "magic_getsubstr"
.IX Item "magic_getsubstr"
.IP "magic_gettaint" 4
.IX Xref "magic_gettaint"
.IX Item "magic_gettaint"
.IP "magic_getuvar" 4
.IX Xref "magic_getuvar"
.IX Item "magic_getuvar"
.IP "magic_getvec" 4
.IX Xref "magic_getvec"
.IX Item "magic_getvec"
.IP "magic_killbackrefs" 4
.IX Xref "magic_killbackrefs"
.IX Item "magic_killbackrefs"
.IP "magic_nextpack" 4
.IX Xref "magic_nextpack"
.IX Item "magic_nextpack"
.IP "magic_regdata_cnt" 4
.IX Xref "magic_regdata_cnt"
.IX Item "magic_regdata_cnt"
.IP "magic_regdatum_get" 4
.IX Xref "magic_regdatum_get"
.IX Item "magic_regdatum_get"
.IP "magic_regdatum_set" 4
.IX Xref "magic_regdatum_set"
.IX Item "magic_regdatum_set"
.IP "magic_scalarpack" 4
.IX Xref "magic_scalarpack"
.IX Item "magic_scalarpack"
.IP "magic_set" 4
.IX Xref "magic_set"
.IX Item "magic_set"
.IP "magic_set_all_env" 4
.IX Xref "magic_set_all_env"
.IX Item "magic_set_all_env"
.IP "magic_setarylen" 4
.IX Xref "magic_setarylen"
.IX Item "magic_setarylen"
.IP "magic_setcollxfrm" 4
.IX Xref "magic_setcollxfrm"
.IX Item "magic_setcollxfrm"
.IP "magic_setdbline" 4
.IX Xref "magic_setdbline"
.IX Item "magic_setdbline"
.IP "magic_setdebugvar" 4
.IX Xref "magic_setdebugvar"
.IX Item "magic_setdebugvar"
.IP "magic_setdefelem" 4
.IX Xref "magic_setdefelem"
.IX Item "magic_setdefelem"
.IP "magic_setenv" 4
.IX Xref "magic_setenv"
.IX Item "magic_setenv"
.IP "magic_setisa" 4
.IX Xref "magic_setisa"
.IX Item "magic_setisa"
.IP "magic_setlvref" 4
.IX Xref "magic_setlvref"
.IX Item "magic_setlvref"
.IP "magic_setmglob" 4
.IX Xref "magic_setmglob"
.IX Item "magic_setmglob"
.IP "magic_setnkeys" 4
.IX Xref "magic_setnkeys"
.IX Item "magic_setnkeys"
.IP "magic_setnonelem" 4
.IX Xref "magic_setnonelem"
.IX Item "magic_setnonelem"
.IP "magic_setpack" 4
.IX Xref "magic_setpack"
.IX Item "magic_setpack"
.IP "magic_setpos" 4
.IX Xref "magic_setpos"
.IX Item "magic_setpos"
.IP "magic_setregexp" 4
.IX Xref "magic_setregexp"
.IX Item "magic_setregexp"
.IP "magic_setsig" 4
.IX Xref "magic_setsig"
.IX Item "magic_setsig"
.IP "magic_setsubstr" 4
.IX Xref "magic_setsubstr"
.IX Item "magic_setsubstr"
.IP "magic_settaint" 4
.IX Xref "magic_settaint"
.IX Item "magic_settaint"
.IP "magic_setutf8" 4
.IX Xref "magic_setutf8"
.IX Item "magic_setutf8"
.IP "magic_setuvar" 4
.IX Xref "magic_setuvar"
.IX Item "magic_setuvar"
.IP "magic_setvec" 4
.IX Xref "magic_setvec"
.IX Item "magic_setvec"
.IP "magic_sizepack" 4
.IX Xref "magic_sizepack"
.IX Item "magic_sizepack"
.IP "magic_wipepack" 4
.IX Xref "magic_wipepack"
.IX Item "magic_wipepack"
.IP "malloc_good_size" 4
.IX Xref "malloc_good_size"
.IX Item "malloc_good_size"
.IP "malloced_size" 4
.IX Xref "malloced_size"
.IX Item "malloced_size"
.IP "mem_collxfrm" 4
.IX Xref "mem_collxfrm"
.IX Item "mem_collxfrm"
.IP "mem_log_alloc" 4
.IX Xref "mem_log_alloc"
.IX Item "mem_log_alloc"
.IP "mem_log_free" 4
.IX Xref "mem_log_free"
.IX Item "mem_log_free"
.IP "mem_log_realloc" 4
.IX Xref "mem_log_realloc"
.IX Item "mem_log_realloc"
.IP "mg_find_mglob" 4
.IX Xref "mg_find_mglob"
.IX Item "mg_find_mglob"
.IP "mode_from_discipline" 4
.IX Xref "mode_from_discipline"
.IX Item "mode_from_discipline"
.IP "more_bodies" 4
.IX Xref "more_bodies"
.IX Item "more_bodies"
.IP "mro_meta_dup" 4
.IX Xref "mro_meta_dup"
.IX Item "mro_meta_dup"
.IP "mro_meta_init" 4
.IX Xref "mro_meta_init"
.IX Item "mro_meta_init"
.IP "multiconcat_stringify" 4
.IX Xref "multiconcat_stringify"
.IX Item "multiconcat_stringify"
.IP "multideref_stringify" 4
.IX Xref "multideref_stringify"
.IX Item "multideref_stringify"
.IP "my_attrs" 4
.IX Xref "my_attrs"
.IX Item "my_attrs"
.IP "my_clearenv" 4
.IX Xref "my_clearenv"
.IX Item "my_clearenv"
.IP "my_lstat_flags" 4
.IX Xref "my_lstat_flags"
.IX Item "my_lstat_flags"
.IP "my_memrchr" 4
.IX Xref "my_memrchr"
.IX Item "my_memrchr"
.IP "my_mkostemp" 4
.IX Xref "my_mkostemp"
.IX Item "my_mkostemp"
.IP "my_mkstemp" 4
.IX Xref "my_mkstemp"
.IX Item "my_mkstemp"
.IP "my_mkstemp_cloexec" 4
.IX Xref "my_mkstemp_cloexec"
.IX Item "my_mkstemp_cloexec"
.IP "my_stat_flags" 4
.IX Xref "my_stat_flags"
.IX Item "my_stat_flags"
.IP "my_strerror" 4
.IX Xref "my_strerror"
.IX Item "my_strerror"
.IP "my_unexec" 4
.IX Xref "my_unexec"
.IX Item "my_unexec"
.IP "newGP" 4
.IX Xref "newGP"
.IX Item "newGP"
.IP "newMETHOP_internal" 4
.IX Xref "newMETHOP_internal"
.IX Item "newMETHOP_internal"
.IP "newSTUB" 4
.IX Xref "newSTUB"
.IX Item "newSTUB"
.IP "newSVavdefelem" 4
.IX Xref "newSVavdefelem"
.IX Item "newSVavdefelem"
.IP "newXS_deffile" 4
.IX Xref "newXS_deffile"
.IX Item "newXS_deffile"
.IP "new_warnings_bitfield" 4
.IX Xref "new_warnings_bitfield"
.IX Item "new_warnings_bitfield"
.IP "nextargv" 4
.IX Xref "nextargv"
.IX Item "nextargv"
.IP "noperl_die" 4
.IX Xref "noperl_die"
.IX Item "noperl_die"
.IP "notify_parser_that_changed_to_utf8" 4
.IX Xref "notify_parser_that_changed_to_utf8"
.IX Item "notify_parser_that_changed_to_utf8"
.IP "oopsAV" 4
.IX Xref "oopsAV"
.IX Item "oopsAV"
.IP "oopsHV" 4
.IX Xref "oopsHV"
.IX Item "oopsHV"
.IP "op_clear" 4
.IX Xref "op_clear"
.IX Item "op_clear"
.IP "op_integerize" 4
.IX Xref "op_integerize"
.IX Item "op_integerize"
.IP "op_lvalue_flags" 4
.IX Xref "op_lvalue_flags"
.IX Item "op_lvalue_flags"
.IP "op_refcnt_dec" 4
.IX Xref "op_refcnt_dec"
.IX Item "op_refcnt_dec"
.IP "op_refcnt_inc" 4
.IX Xref "op_refcnt_inc"
.IX Item "op_refcnt_inc"
.IP "op_relocate_sv" 4
.IX Xref "op_relocate_sv"
.IX Item "op_relocate_sv"
.IP "op_std_init" 4
.IX Xref "op_std_init"
.IX Item "op_std_init"
.IP "op_unscope" 4
.IX Xref "op_unscope"
.IX Item "op_unscope"
.IP "opmethod_stash" 4
.IX Xref "opmethod_stash"
.IX Item "opmethod_stash"
.IP "opslab_force_free" 4
.IX Xref "opslab_force_free"
.IX Item "opslab_force_free"
.IP "opslab_free" 4
.IX Xref "opslab_free"
.IX Item "opslab_free"
.IP "opslab_free_nopad" 4
.IX Xref "opslab_free_nopad"
.IX Item "opslab_free_nopad"
.IP "package" 4
.IX Xref "package"
.IX Item "package"
.IP "package_version" 4
.IX Xref "package_version"
.IX Item "package_version"
.IP "pad_add_weakref" 4
.IX Xref "pad_add_weakref"
.IX Item "pad_add_weakref"
.IP "padlist_store" 4
.IX Xref "padlist_store"
.IX Item "padlist_store"
.IP "padname_free" 4
.IX Xref "padname_free"
.IX Item "padname_free"
.IP "padnamelist_free" 4
.IX Xref "padnamelist_free"
.IX Item "padnamelist_free"
.IP "parse_unicode_opts" 4
.IX Xref "parse_unicode_opts"
.IX Item "parse_unicode_opts"
.IP "parse_uniprop_string" 4
.IX Xref "parse_uniprop_string"
.IX Item "parse_uniprop_string"
.IP "parser_free" 4
.IX Xref "parser_free"
.IX Item "parser_free"
.IP "parser_free_nexttoke_ops" 4
.IX Xref "parser_free_nexttoke_ops"
.IX Item "parser_free_nexttoke_ops"
.IP "path_is_searchable" 4
.IX Xref "path_is_searchable"
.IX Item "path_is_searchable"
.IP "peep" 4
.IX Xref "peep"
.IX Item "peep"
.IP "pmruntime" 4
.IX Xref "pmruntime"
.IX Item "pmruntime"
.IP "populate_isa" 4
.IX Xref "populate_isa"
.IX Item "populate_isa"
.IP "ptr_hash" 4
.IX Xref "ptr_hash"
.IX Item "ptr_hash"
.IP "qerror" 4
.IX Xref "qerror"
.IX Item "qerror"
.IP "re_exec_indentf" 4
.IX Xref "re_exec_indentf"
.IX Item "re_exec_indentf"
.IP "re_indentf" 4
.IX Xref "re_indentf"
.IX Item "re_indentf"
.IP "re_op_compile" 4
.IX Xref "re_op_compile"
.IX Item "re_op_compile"
.IP "re_printf" 4
.IX Xref "re_printf"
.IX Item "re_printf"
.IP "reg_named_buff" 4
.IX Xref "reg_named_buff"
.IX Item "reg_named_buff"
.IP "reg_named_buff_iter" 4
.IX Xref "reg_named_buff_iter"
.IX Item "reg_named_buff_iter"
.IP "reg_numbered_buff_fetch" 4
.IX Xref "reg_numbered_buff_fetch"
.IX Item "reg_numbered_buff_fetch"
.IP "reg_numbered_buff_length" 4
.IX Xref "reg_numbered_buff_length"
.IX Item "reg_numbered_buff_length"
.IP "reg_numbered_buff_store" 4
.IX Xref "reg_numbered_buff_store"
.IX Item "reg_numbered_buff_store"
.IP "reg_qr_package" 4
.IX Xref "reg_qr_package"
.IX Item "reg_qr_package"
.IP "reg_skipcomment" 4
.IX Xref "reg_skipcomment"
.IX Item "reg_skipcomment"
.IP "reg_temp_copy" 4
.IX Xref "reg_temp_copy"
.IX Item "reg_temp_copy"
.IP "regcurly" 4
.IX Xref "regcurly"
.IX Item "regcurly"
.IP "regprop" 4
.IX Xref "regprop"
.IX Item "regprop"
.IP "report_evil_fh" 4
.IX Xref "report_evil_fh"
.IX Item "report_evil_fh"
.IP "report_redefined_cv" 4
.IX Xref "report_redefined_cv"
.IX Item "report_redefined_cv"
.IP "report_wrongway_fh" 4
.IX Xref "report_wrongway_fh"
.IX Item "report_wrongway_fh"
.IP "rpeep" 4
.IX Xref "rpeep"
.IX Item "rpeep"
.IP "rsignal_restore" 4
.IX Xref "rsignal_restore"
.IX Item "rsignal_restore"
.IP "rsignal_save" 4
.IX Xref "rsignal_save"
.IX Item "rsignal_save"
.IP "rxres_save" 4
.IX Xref "rxres_save"
.IX Item "rxres_save"
.IP "same_dirent" 4
.IX Xref "same_dirent"
.IX Item "same_dirent"
.IP "save_strlen" 4
.IX Xref "save_strlen"
.IX Item "save_strlen"
.IP "save_to_buffer" 4
.IX Xref "save_to_buffer"
.IX Item "save_to_buffer"
.IP "sawparens" 4
.IX Xref "sawparens"
.IX Item "sawparens"
.IP "scalar" 4
.IX Xref "scalar"
.IX Item "scalar"
.IP "scalarvoid" 4
.IX Xref "scalarvoid"
.IX Item "scalarvoid"
.IP "scan_str" 4
.IX Xref "scan_str"
.IX Item "scan_str"
.IP "scan_word" 4
.IX Xref "scan_word"
.IX Item "scan_word"
.IP "set_caret_X" 4
.IX Xref "set_caret_X"
.IX Item "set_caret_X"
.IP "set_numeric_standard" 4
.IX Xref "set_numeric_standard"
.IX Item "set_numeric_standard"
.IP "set_numeric_underlying" 4
.IX Xref "set_numeric_underlying"
.IX Item "set_numeric_underlying"
.IP "set_padlist" 4
.IX Xref "set_padlist"
.IX Item "set_padlist"
.IP "setfd_cloexec" 4
.IX Xref "setfd_cloexec"
.IX Item "setfd_cloexec"
.IP "setfd_cloexec_for_nonsysfd" 4
.IX Xref "setfd_cloexec_for_nonsysfd"
.IX Item "setfd_cloexec_for_nonsysfd"
.IP "setfd_cloexec_or_inhexec_by_sysfdness" 4
.IX Xref "setfd_cloexec_or_inhexec_by_sysfdness"
.IX Item "setfd_cloexec_or_inhexec_by_sysfdness"
.IP "setfd_inhexec" 4
.IX Xref "setfd_inhexec"
.IX Item "setfd_inhexec"
.IP "setfd_inhexec_for_sysfd" 4
.IX Xref "setfd_inhexec_for_sysfd"
.IX Item "setfd_inhexec_for_sysfd"
.IP "should_warn_nl" 4
.IX Xref "should_warn_nl"
.IX Item "should_warn_nl"
.IP "sighandler" 4
.IX Xref "sighandler"
.IX Item "sighandler"
.IP "skipspace_flags" 4
.IX Xref "skipspace_flags"
.IX Item "skipspace_flags"
.IP "softref2xv" 4
.IX Xref "softref2xv"
.IX Item "softref2xv"
.IP "ssc_add_range" 4
.IX Xref "ssc_add_range"
.IX Item "ssc_add_range"
.IP "ssc_clear_locale" 4
.IX Xref "ssc_clear_locale"
.IX Item "ssc_clear_locale"
.IP "ssc_cp_and" 4
.IX Xref "ssc_cp_and"
.IX Item "ssc_cp_and"
.IP "ssc_intersection" 4
.IX Xref "ssc_intersection"
.IX Item "ssc_intersection"
.IP "ssc_union" 4
.IX Xref "ssc_union"
.IX Item "ssc_union"
.IP "sub_crush_depth" 4
.IX Xref "sub_crush_depth"
.IX Item "sub_crush_depth"
.IP "sv_add_backref" 4
.IX Xref "sv_add_backref"
.IX Item "sv_add_backref"
.IP "sv_buf_to_ro" 4
.IX Xref "sv_buf_to_ro"
.IX Item "sv_buf_to_ro"
.IP "sv_del_backref" 4
.IX Xref "sv_del_backref"
.IX Item "sv_del_backref"
.IP "sv_free2" 4
.IX Xref "sv_free2"
.IX Item "sv_free2"
.IP "sv_kill_backrefs" 4
.IX Xref "sv_kill_backrefs"
.IX Item "sv_kill_backrefs"
.IP "sv_len_utf8_nomg" 4
.IX Xref "sv_len_utf8_nomg"
.IX Item "sv_len_utf8_nomg"
.IP "sv_magicext_mglob" 4
.IX Xref "sv_magicext_mglob"
.IX Item "sv_magicext_mglob"
.IP "sv_mortalcopy_flags" 4
.IX Xref "sv_mortalcopy_flags"
.IX Item "sv_mortalcopy_flags"
.IP "sv_only_taint_gmagic" 4
.IX Xref "sv_only_taint_gmagic"
.IX Item "sv_only_taint_gmagic"
.IP "sv_or_pv_pos_u2b" 4
.IX Xref "sv_or_pv_pos_u2b"
.IX Item "sv_or_pv_pos_u2b"
.IP "sv_resetpvn" 4
.IX Xref "sv_resetpvn"
.IX Item "sv_resetpvn"
.IP "sv_sethek" 4
.IX Xref "sv_sethek"
.IX Item "sv_sethek"
.IP "sv_setsv_cow" 4
.IX Xref "sv_setsv_cow"
.IX Item "sv_setsv_cow"
.IP "sv_unglob" 4
.IX Xref "sv_unglob"
.IX Item "sv_unglob"
.IP "swash_fetch" 4
.IX Xref "swash_fetch"
.IX Item "swash_fetch"
.IP "swash_init" 4
.IX Xref "swash_init"
.IX Item "swash_init"
.IP "tied_method" 4
.IX Xref "tied_method"
.IX Item "tied_method"
.IP "tmps_grow_p" 4
.IX Xref "tmps_grow_p"
.IX Item "tmps_grow_p"
.IP "translate_substr_offsets" 4
.IX Xref "translate_substr_offsets"
.IX Item "translate_substr_offsets"
.IP "try_amagic_bin" 4
.IX Xref "try_amagic_bin"
.IX Item "try_amagic_bin"
.IP "try_amagic_un" 4
.IX Xref "try_amagic_un"
.IX Item "try_amagic_un"
.IP "uiv_2buf" 4
.IX Xref "uiv_2buf"
.IX Item "uiv_2buf"
.IP "unshare_hek" 4
.IX Xref "unshare_hek"
.IX Item "unshare_hek"
.IP "utf16_to_utf8" 4
.IX Xref "utf16_to_utf8"
.IX Item "utf16_to_utf8"
.IP "utf16_to_utf8_reversed" 4
.IX Xref "utf16_to_utf8_reversed"
.IX Item "utf16_to_utf8_reversed"
.IP "utilize" 4
.IX Xref "utilize"
.IX Item "utilize"
.IP "varname" 4
.IX Xref "varname"
.IX Item "varname"
.IP "vivify_defelem" 4
.IX Xref "vivify_defelem"
.IX Item "vivify_defelem"
.IP "vivify_ref" 4
.IX Xref "vivify_ref"
.IX Item "vivify_ref"
.IP "wait4pid" 4
.IX Xref "wait4pid"
.IX Item "wait4pid"
.IP "was_lvalue_sub" 4
.IX Xref "was_lvalue_sub"
.IX Item "was_lvalue_sub"
.IP "watch" 4
.IX Xref "watch"
.IX Item "watch"
.IP "win32_croak_not_implemented" 4
.IX Xref "win32_croak_not_implemented"
.IX Item "win32_croak_not_implemented"
.IP "write_to_stderr" 4
.IX Xref "write_to_stderr"
.IX Item "write_to_stderr"
.IP "xs_boot_epilog" 4
.IX Xref "xs_boot_epilog"
.IX Item "xs_boot_epilog"
.IP "xs_handshake" 4
.IX Xref "xs_handshake"
.IX Item "xs_handshake"
.IP "yyerror" 4
.IX Xref "yyerror"
.IX Item "yyerror"
.IP "yyerror_pv" 4
.IX Xref "yyerror_pv"
.IX Item "yyerror_pv"
.IP "yyerror_pvn" 4
.IX Xref "yyerror_pvn"
.IX Item "yyerror_pvn"
.IP "yylex" 4
.IX Xref "yylex"
.IX Item "yylex"
.IP "yyparse" 4
.IX Xref "yyparse"
.IX Item "yyparse"
.IP "yyquit" 4
.IX Xref "yyquit"
.IX Item "yyquit"
.IP "yyunlex" 4
.IX Xref "yyunlex"
.IX Item "yyunlex"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl.  Documentation is by whoever was kind enough to
document their functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlguts, perlapi
