.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SCANDEPS 1"
.TH SCANDEPS 1 "2012-02-21" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
scandeps.pl \- Scan file prerequisites
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    % scandeps.pl *.pm          # Print PREREQ_PM section for *.pm
\&    % scandeps.pl \-e \*(AqSTRING\*(Aq   # Scan an one\-liner
\&    % scandeps.pl \-B *.pm       # Include core modules
\&    % scandeps.pl \-V *.pm       # Show autoload/shared/data files
\&    % scandeps.pl \-R *.pm       # Don\*(Aqt recurse
\&    % scandeps.pl \-C CACHEFILE  # use CACHEFILE to cache dependencies
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIscandeps.pl\fR is a simple-minded utility that prints out the
\&\f(CW\*(C`PREREQ_PM\*(C'\fR section needed by modules.
.PP
If you have \fB\s-1CPANPLUS\s0\fR installed, modules that are part of an
earlier module's distribution with be denoted with \f(CW\*(C`S\*(C'\fR; modules
without a distribution name on \s-1CPAN\s0 are marked with \f(CW\*(C`?\*(C'\fR.
.PP
Also, if the \f(CW\*(C`\-B\*(C'\fR option is specified, module belongs to a perl
distribution on \s-1CPAN \s0(and thus uninstallable by \f(CW\*(C`CPAN.pm\*(C'\fR or
\&\f(CW\*(C`CPANPLUS.pm\*(C'\fR) are marked with \f(CW\*(C`C\*(C'\fR.
.PP
Finally, modules that has loadable shared object files (usually
needing a compiler to install) are marked with \f(CW\*(C`X\*(C'\fR; with the
\&\f(CW\*(C`\-V\*(C'\fR flag, those files (and all other files found) will be listed
before the main output. Additionally, all module files that the
scanned code depends on but were not found (and thus not scanned
recursively) are listed. These may include genuinely missing
modules or false positives. That means, modules your code does
not depend on (on this particular platform) but that were picked
up by the heuristic anyway.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-e \s-1STRING\s0" 4
.IX Item "-e STRING"
Scan \fI\s-1STRING\s0\fR as a string containing perl code.
.IP "\-c" 4
.IX Item "-c"
Compiles the code and inspects its \f(CW%INC\fR, in addition to static scanning.
.IP "\-x" 4
.IX Item "-x"
Executes the code and inspects its \f(CW%INC\fR, in addition to static scanning.
.IP "\-B" 4
.IX Item "-B"
Include core modules in the output and the recursive search list.
.IP "\-R" 4
.IX Item "-R"
Only show dependencies found in the files listed and do not recurse.
.IP "\-V" 4
.IX Item "-V"
Verbose mode: Output all files found during the process; 
show dependencies between modules and availability.
.Sp
Additionally, warns of any missing dependencies. If you find missing
dependencies that aren't really dependencies, you have probably found
false positives.
.IP "\-C \s-1CACHEFILE\s0" 4
.IX Item "-C CACHEFILE"
Use \s-1CACHEFILE\s0 to speed up the scanning process by caching dependencies.
Creates \s-1CACHEFILE\s0 if it does not exist yet.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::ScanDeps, CPANPLUS::Backend, \s-1PAR\s0
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Simon Cozens, for suggesting this script to be written.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <autrijus@autrijus.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003, 2004, 2005, 2006 by Audrey Tang <autrijus@autrijus.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
