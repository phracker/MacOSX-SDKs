.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODINSTALL 1"
.TH PERLMODINSTALL 1 "2014-01-31" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodinstall \- Installing CPAN Modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can think of a module as the fundamental unit of reusable Perl
code; see perlmod for details.  Whenever anyone creates a chunk of
Perl code that they think will be useful to the world, they register
as a Perl developer at http://www.cpan.org/modules/04pause.html
so that they can then upload their code to the \s-1CPAN. \s0 The \s-1CPAN\s0 is the
Comprehensive Perl Archive Network and can be accessed at
http://www.cpan.org/ , and searched at http://search.cpan.org/ .
.PP
This documentation is for people who want to download \s-1CPAN\s0 modules
and install them on their own computer.
.SS "\s-1PREAMBLE\s0"
.IX Subsection "PREAMBLE"
First, are you sure that the module isn't already on your system?  Try
\&\f(CW\*(C`perl \-MFoo \-e 1\*(C'\fR.  (Replace \*(L"Foo\*(R" with the name of the module; for
instance, \f(CW\*(C`perl \-MCGI::Carp \-e 1\*(C'\fR.)
.PP
If you don't see an error message, you have the module.  (If you do
see an error message, it's still possible you have the module, but
that it's not in your path, which you can display with \f(CW\*(C`perl \-e
"print qq(@INC)"\*(C'\fR.)  For the remainder of this document, we'll assume
that you really honestly truly lack an installed module, but have
found it on the \s-1CPAN.\s0
.PP
So now you have a file ending in .tar.gz (or, less often, .zip).  You
know there's a tasty module inside.  There are four steps you must now
take:
.IP "\fB\s-1DECOMPRESS\s0\fR the file" 5
.IX Item "DECOMPRESS the file"
.PD 0
.IP "\fB\s-1UNPACK\s0\fR the file into a directory" 5
.IX Item "UNPACK the file into a directory"
.IP "\fB\s-1BUILD\s0\fR the module (sometimes unnecessary)" 5
.IX Item "BUILD the module (sometimes unnecessary)"
.IP "\fB\s-1INSTALL\s0\fR the module." 5
.IX Item "INSTALL the module."
.PD
.PP
Here's how to perform each step for each operating system.  This is
<not> a substitute for reading the \s-1README\s0 and \s-1INSTALL\s0 files that
might have come with your module!
.PP
Also note that these instructions are tailored for installing the
module into your system's repository of Perl modules, but you can
install modules into any directory you wish.  For instance, where I
say \f(CW\*(C`perl Makefile.PL\*(C'\fR, you can substitute \f(CW\*(C`perl Makefile.PL
PREFIX=/my/perl_directory\*(C'\fR to install the modules into
\&\fI/my/perl_directory\fR.  Then you can use the modules from your Perl
programs with \f(CW\*(C`use lib "/my/perl_directory/lib/site_perl";\*(C'\fR or
sometimes just \f(CW\*(C`use "/my/perl_directory";\*(C'\fR.  If you're on a system
that requires superuser/root access to install modules into the
directories you see when you type \f(CW\*(C`perl \-e "print qq(@INC)"\*(C'\fR, you'll
want to install them into a local directory (such as your home
directory) and use this approach.
.IP "\(bu" 4
\&\fBIf you're on a Unix or Unix-like system,\fR
.Sp
You can use Andreas Koenig's \s-1CPAN\s0 module
( http://www.cpan.org/modules/by\-module/CPAN )
to automate the following steps, from \s-1DECOMPRESS\s0 through \s-1INSTALL.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from ftp://prep.ai.mit.edu/pub/gnu/
.Sp
Or, you can combine this step with the next to save disk space:
.Sp
.Vb 1
\&     gzip \-dc yourmodule.tar.gz | tar \-xof \-
.Ve
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with \f(CW\*(C`tar \-xof yourmodule.tar\*(C'\fR
.Sp
C. \s-1BUILD\s0
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
or
.Sp
.Vb 1
\&      perl Makefile.PL PREFIX=/my/perl_directory
.Ve
.Sp
to install it locally.  (Remember that if you do this, you'll have to
put \f(CW\*(C`use lib "/my/perl_directory";\*(C'\fR near the top of the program that
is to use this module.
.Sp
D. \s-1INSTALL\s0
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      make install
.Ve
.Sp
Make sure you have the appropriate permissions to install the module
in your Perl 5 library directory.  Often, you'll need to be root.
.Sp
That's all you need to do on Unix systems with dynamic linking.
Most Unix systems have dynamic linking. If yours doesn't, or if for
another reason you have a statically-linked perl, \fBand\fR the
module requires compilation, you'll need to build a new Perl binary
that includes the module.  Again, you'll probably need to be root.
.IP "\(bu" 4
\&\fBIf you're running ActivePerl (Win95/98/2K/NT/XP, Linux, Solaris),\fR
.Sp
First, type \f(CW\*(C`ppm\*(C'\fR from a shell and see whether ActiveState's \s-1PPM\s0
repository has your module.  If so, you can install it with \f(CW\*(C`ppm\*(C'\fR and
you won't have to bother with any of the other steps here.  You might
be able to use the \s-1CPAN\s0 instructions from the \*(L"Unix or Linux\*(R" section
above as well; give it a try.  Otherwise, you'll have to follow the
steps below.
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
You can use the shareware Winzip ( http://www.winzip.com ) to
decompress and unpack modules.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
If you used WinZip, this was already done for you.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
You'll need the \f(CW\*(C`nmake\*(C'\fR utility, available at
http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe
or dmake, available on \s-1CPAN.\s0
http://search.cpan.org/dist/dmake/
.Sp
Does the module require compilation (i.e. does it have files that end
in .xs, .c, .h, .y, .cc, .cxx, or .C)?  If it does, life is now
officially tough for you, because you have to compile the module
yourself (no easy feat on Windows).  You'll need a compiler such as
Visual \*(C+.  Alternatively, you can download a pre-built \s-1PPM\s0 package
from ActiveState.
http://aspn.activestate.com/ASPN/Downloads/ActivePerl/PPM/
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      nmake test
\&
\&
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      nmake install
.Ve
.IP "\(bu" 4
\&\fBIf you're using a Macintosh with \*(L"Classic\*(R" MacOS and MacPerl,\fR
.Sp
A. \s-1DECOMPRESS\s0
.Sp
First, make sure you have the latest \fBcpan-mac\fR distribution (
http://www.cpan.org/authors/id/CNANDOR/ ), which has utilities for
doing all of the steps.  Read the cpan-mac directions carefully and
install it.  If you choose not to use cpan-mac for some reason, there
are alternatives listed here.
.Sp
After installing cpan-mac, drop the module archive on the
\&\fBuntarzipme\fR droplet, which will decompress and unpack for you.
.Sp
\&\fBOr\fR, you can either use the shareware \fBStuffIt Expander\fR program
( http://my.smithmicro.com/mac/stuffit/ )
or the freeware \fBMacGzip\fR program (
http://persephone.cps.unizar.es/general/gente/spd/gzip/gzip.html ).
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using untarzipme or StuffIt, the archive should be extracted
now.  \fBOr\fR, you can use the freeware \fBsuntar\fR or \fITar\fR (
http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/ ).
.Sp
C. \s-1BUILD\s0
.Sp
Check the contents of the distribution.
Read the module's documentation, looking for
reasons why you might have trouble using it with MacPerl.  Look for
\&\fI.xs\fR and \fI.c\fR files, which normally denote that the distribution
must be compiled, and you cannot install it \*(L"out of the box.\*(R"
(See \*(L"\s-1PORTABILITY\*(R"\s0.)
.Sp
D. \s-1INSTALL\s0
.Sp
If you are using cpan-mac, just drop the folder on the
\&\fBinstallme\fR droplet, and use the module.
.Sp
\&\fBOr\fR, if you aren't using cpan-mac, do some manual labor.
.Sp
Make sure the newlines for the modules are in Mac format, not Unix format.
If they are not then you might have decompressed them incorrectly.  Check
your decompression and unpacking utilities settings to make sure they are
translating text files properly.
.Sp
As a last resort, you can use the perl one-liner:
.Sp
.Vb 1
\&    perl \-i.bak \-pe \*(Aqs/(?:\e015)?\e012/\e015/g\*(Aq <filenames>
.Ve
.Sp
on the source files.
.Sp
Then move the files (probably just the \fI.pm\fR files, though there
may be some additional ones, too; check the module documentation)
to their final destination: This will
most likely be in \f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR (i.e.,
\&\f(CW\*(C`HD:MacPerl folder:site_lib:\*(C'\fR).  You can add new paths to
the default \f(CW@INC\fR in the Preferences menu item in the
MacPerl application (\f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR is added
automagically).  Create whatever directory structures are required
(i.e., for \f(CW\*(C`Some::Module\*(C'\fR, create
\&\f(CW\*(C`$ENV{MACPERL}site_lib:Some:\*(C'\fR and put
\&\f(CW\*(C`Module.pm\*(C'\fR in that directory).
.Sp
Then run the following script (or something like it):
.Sp
.Vb 4
\&     #!perl \-w
\&     use AutoSplit;
\&     my $dir = "${MACPERL}site_perl";
\&     autosplit("$dir:Some:Module.pm", "$dir:auto", 0, 1, 1);
.Ve
.IP "\(bu" 4
\&\fBIf you're on the \s-1DJGPP\s0 port of \s-1DOS,\s0\fR
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
djtarx ( ftp://ftp.delorie.com/pub/djgpp/current/v2/ )
will both uncompress and unpack.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
See above.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR
in the Perl distribution.
.Sp
.Vb 1
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&     make install
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR in the Perl distribution.
.IP "\(bu" 4
\&\fBIf you're on \s-1OS/2,\s0\fR
.Sp
Get the \s-1EMX\s0 development suite and gzip/tar, from either Hobbes (
http://hobbes.nmsu.edu ) or Leo ( http://www.leo.org ), and then follow
the instructions for Unix.
.IP "\(bu" 4
\&\fBIf you're on \s-1VMS,\s0\fR
.Sp
When downloading from \s-1CPAN,\s0 save your file with a \f(CW\*(C`.tgz\*(C'\fR
extension instead of \f(CW\*(C`.tar.gz\*(C'\fR.  All other periods in the
filename should be replaced with underscores.  For example,
\&\f(CW\*(C`Your\-Module\-1.33.tar.gz\*(C'\fR should be downloaded as
\&\f(CW\*(C`Your\-Module\-1_33.tgz\*(C'\fR.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Type
.Sp
.Vb 1
\&    gzip \-d Your\-Module.tgz
.Ve
.Sp
or, for zipped modules, type
.Sp
.Vb 1
\&    unzip Your\-Module.zip
.Ve
.Sp
Executables for gzip, zip, and VMStar:
.Sp
.Vb 1
\&    http://www.hp.com/go/openvms/freeware/
.Ve
.Sp
and their source code:
.Sp
.Vb 1
\&    http://www.fsf.org/order/ftp.html
.Ve
.Sp
Note that \s-1GNU\s0's gzip/gunzip is not the same as Info-ZIP's zip/unzip
package.  The former is a simple compression tool; the latter permits
creation of multi-file archives.
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using VMStar:
.Sp
.Vb 1
\&     VMStar xf Your\-Module.tar
.Ve
.Sp
Or, if you're fond of \s-1VMS\s0 command syntax:
.Sp
.Vb 1
\&     tar/extract/verbose Your_Module.tar
.Ve
.Sp
C. \s-1BUILD\s0
.Sp
Make sure you have \s-1MMS \s0(from Digital) or the freeware \s-1MMK \s0( available
from MadGoat at http://www.madgoat.com ).  Then type this to create
the \s-1DESCRIP.MMS\s0 for the module:
.Sp
.Vb 1
\&    perl Makefile.PL
.Ve
.Sp
Now you're ready to build:
.Sp
.Vb 1
\&    mms test
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.Sp
D. \s-1INSTALL\s0
.Sp
Type
.Sp
.Vb 1
\&    mms install
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.IP "\(bu" 4
\&\fBIf you're on \s-1MVS\s0\fR,
.Sp
Introduce the \fI.tar.gz\fR file into an \s-1HFS\s0 as binary; don't translate from
\&\s-1ASCII\s0 to \s-1EBCDIC.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from
http://www.s390.ibm.com/products/oe/bpxqp1.html
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with
.Sp
.Vb 1
\&     pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < yourmodule.tar
.Ve
.Sp
The \s-1BUILD\s0 and \s-1INSTALL\s0 steps are identical to those for Unix.  Some
modules generate Makefiles that work better with \s-1GNU\s0 make, which is
available from http://www.mks.com/s390/gnu/
.SH "PORTABILITY"
.IX Header "PORTABILITY"
Note that not all modules will work with on all platforms.
See perlport for more information on portability issues.
Read the documentation to see if the module will work on your
system.  There are basically three categories
of modules that will not work \*(L"out of the box\*(R" with all
platforms (with some possibility of overlap):
.IP "\(bu" 4
\&\fBThose that should, but don't.\fR  These need to be fixed; consider
contacting the author and possibly writing a patch.
.IP "\(bu" 4
\&\fBThose that need to be compiled, where the target platform
doesn't have compilers readily available.\fR  (These modules contain
\&\fI.xs\fR or \fI.c\fR files, usually.)  You might be able to find
existing binaries on the \s-1CPAN\s0 or elsewhere, or you might
want to try getting compilers and building it yourself, and then
release the binary for other poor souls to use.
.IP "\(bu" 4
\&\fBThose that are targeted at a specific platform.\fR
(Such as the Win32:: modules.)  If the module is targeted
specifically at a platform other than yours, you're out
of luck, most likely.
.PP
Check the \s-1CPAN\s0 Testers if a module should work with your platform
but it doesn't behave as you'd expect, or you aren't sure whether or
not a module will work under your platform.  If the module you want
isn't listed there, you can test it yourself and let \s-1CPAN\s0 Testers know,
you can join \s-1CPAN\s0 Testers, or you can request it be tested.
.PP
.Vb 1
\&    http://testers.cpan.org/
.Ve
.SH "HEY"
.IX Header "HEY"
If you have any suggested changes for this page, let me know.  Please
don't send me mail asking for help on how to install your modules.
There are too many modules, and too few Orwants, for me to be able to
answer or even acknowledge all your questions.  Contact the module
author instead, or post to comp.lang.perl.modules, or ask someone
familiar with Perl on your operating system.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Orwant
.PP
orwant@medita.mit.edu
.PP
with invaluable help from Chris Nandor, and valuable help from Brandon
Allbery, Charles Bailey, Graham Barr, Dominic Dunlop, Jarkko
Hietaniemi, Ben Holzman, Tom Horsley, Nick Ing-Simmons, Tuomas
J. Lukka, Laszlo Molnar, Alan Olsen, Peter Prymmer, Gurusamy Sarathy,
Christoph Spalinger, Dan Sugalski, Larry Virden, and Ilya Zakharevich.
.PP
First version July 22, 1998; last revised November 21, 2001.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1998, 2002, 2003 Jon Orwant.  All Rights Reserved.
.PP
This document may be distributed under the same terms as Perl itself.
