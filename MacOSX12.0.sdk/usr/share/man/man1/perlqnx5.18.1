.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLQNX 1"
.TH PERLQNX 1 "2014-09-30" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlqnx \- Perl version 5 on QNX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of perl5.7.2 all tests pass under:
.PP
.Vb 3
\&  QNX 4.24G
\&  Watcom 10.6 with Beta/970211.wcc.update.tar.F
\&  socket3r.lib Nov21 1996.
.Ve
.PP
As of perl5.8.1 there is at least one test still failing.
.PP
Some tests may complain under known circumstances.
.PP
See below and hints/qnx.sh for more information.
.PP
Under \s-1QNX 6.2.0\s0 there are still a few tests which fail.
See below and hints/qnx.sh for more information.
.SS "Required Software for Compiling Perl on \s-1QNX4\s0"
.IX Subsection "Required Software for Compiling Perl on QNX4"
As with many unix ports, this one depends on a few \*(L"standard\*(R"
unix utilities which are not necessarily standard for \s-1QNX4.\s0
.IP "/bin/sh" 4
.IX Item "/bin/sh"
This is used heavily by Configure and then by
perl itself. \s-1QNX4\s0's version is fine, but Configure
will choke on the 16\-bit version, so if you are
running \s-1QNX 4.22,\s0 link /bin/sh to /bin32/ksh
.IP "ar" 4
.IX Item "ar"
This is the standard unix library builder.
We use wlib. With Watcom 10.6, when wlib is
linked as \*(L"ar\*(R", it behaves like ar and all is
fine. Under 9.5, a cover is required. One is
included in ../qnx
.IP "nm" 4
.IX Item "nm"
This is used (optionally) by configure to list
the contents of libraries. I will generate
a cover function on the fly in the \s-1UU\s0 directory.
.IP "cpp" 4
.IX Item "cpp"
Configure and perl need a way to invoke a C
preprocessor. I have created a simple cover
for cc which does the right thing. Without this,
Configure will create its own wrapper which works,
but it doesn't handle some of the command line arguments
that perl will throw at it.
.IP "make" 4
.IX Item "make"
You really need \s-1GNU\s0 make to compile this. \s-1GNU\s0 make
ships by default with \s-1QNX 4.23,\s0 but you can get it
from quics for earlier versions.
.SS "Outstanding Issues with Perl on \s-1QNX4\s0"
.IX Subsection "Outstanding Issues with Perl on QNX4"
There is no support for dynamically linked libraries in \s-1QNX4.\s0
.PP
If you wish to compile with the Socket extension, you need
to have the \s-1TCP/IP\s0 toolkit, and you need to make sure that
\&\-lsocket locates the correct copy of socket3r.lib. Beware
that the Watcom compiler ships with a stub version of
socket3r.lib which has very little functionality. Also
beware the order in which wlink searches directories for
libraries. You may have /usr/lib/socket3r.lib pointing to
the correct library, but wlink may pick up
/usr/watcom/10.6/usr/lib/socket3r.lib instead. Make sure
they both point to the correct library, that is,
/usr/tcptk/current/usr/lib/socket3r.lib.
.PP
The following tests may report errors under \s-1QNX4:\s0
.PP
dist/Cwd/Cwd.t will complain if `pwd` and cwd don't give
the same results. cwd calls `fullpath \-t`, so if you
cd `fullpath \-t` before running the test, it will
pass.
.PP
lib/File/Find/taint.t will complain if '.' is in your
\&\s-1PATH.\s0 The \s-1PATH\s0 test is triggered because cwd calls
`fullpath \-t`.
.PP
ext/IO/lib/IO/t/io_sock.t: Subtests 14 and 22 are skipped due to
the fact that the functionality to read back the non-blocking
status of a socket is not implemented in \s-1QNX\s0's \s-1TCP/IP.\s0 This has
been reported to \s-1QNX\s0 and it may work with later versions of
\&\s-1TCP/IP.\s0
.PP
t/io/tell.t: Subtest 27 is failing. We are still investigating.
.SS "\s-1QNX\s0 auxiliary files"
.IX Subsection "QNX auxiliary files"
The files in the \*(L"qnx\*(R" directory are:
.IP "qnx/ar" 4
.IX Item "qnx/ar"
A script that emulates the standard unix archive (aka library)
utility.  Under Watcom 10.6, ar is linked to wlib and provides the
expected interface. With Watcom 9.5, a cover function is
required. This one is fairly crude but has proved adequate for
compiling perl.
.IP "qnx/cpp" 4
.IX Item "qnx/cpp"
A script that provides C preprocessing functionality.  Configure can
generate a similar cover, but it doesn't handle all the command-line
options that perl throws at it. This might be reasonably placed in
/usr/local/bin.
.SS "Outstanding issues with perl under \s-1QNX6\s0"
.IX Subsection "Outstanding issues with perl under QNX6"
The following tests are still failing for Perl 5.8.1 under \s-1QNX 6.2.0:\s0
.PP
.Vb 2
\&  op/sprintf.........................FAILED at test 91
\&  lib/Benchmark......................FAILED at test 26
.Ve
.PP
This is due to a bug in the C library's printf routine.
printf(\*(L"'%e'\*(R", 0. ) produces '0.000000e+0', but \s-1ANSI\s0 requires
\&'0.000000e+00'. \s-1QNX\s0 has acknowledged the bug.
.SH "AUTHOR"
.IX Header "AUTHOR"
Norton T. Allen (allen@huarp.harvard.edu)
