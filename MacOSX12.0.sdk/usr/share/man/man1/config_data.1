.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CONFIG_DATA 1"
.TH CONFIG_DATA 1 "2021-08-27" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
config_data \- Query or change configuration of Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Get config/feature values
\&  config_data \-\-module Foo::Bar \-\-feature bazzable
\&  config_data \-\-module Foo::Bar \-\-config magic_number
\&
\&  # Set config/feature values
\&  config_data \-\-module Foo::Bar \-\-set_feature bazzable=1
\&  config_data \-\-module Foo::Bar \-\-set_config magic_number=42
\&
\&  # Print a usage message
\&  config_data \-\-help
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`config_data\*(C'\fR tool provides a command-line interface to the
configuration of Perl modules.  By \*(L"configuration\*(R", we mean something
akin to \*(L"user preferences\*(R" or \*(L"local settings\*(R".  This is a
formalization and abstraction of the systems that people like Andreas
Koenig (\f(CW\*(C`CPAN::Config\*(C'\fR), Jon Swartz (\f(CW\*(C`HTML::Mason::Config\*(C'\fR), Andy
Wardley (\f(CW\*(C`Template::Config\*(C'\fR), and Larry Wall (perl's own Config.pm)
have developed independently.
.PP
The configuration system employed here was developed in the context of
\&\f(CW\*(C`Module::Build\*(C'\fR.  Under this system, configuration information for a
module \f(CW\*(C`Foo\*(C'\fR, for example, is stored in a module called
\&\f(CW\*(C`Foo::ConfigData\*(C'\fR) (I would have called it \f(CW\*(C`Foo::Config\*(C'\fR, but that
was taken by all those other systems mentioned in the previous
paragraph...).  These \f(CW\*(C`...::ConfigData\*(C'\fR modules contain the
configuration data, as well as publicly accessible methods for
querying and setting (yes, actually re-writing) the configuration
data.  The \f(CW\*(C`config_data\*(C'\fR script (whose docs you are currently
reading) is merely a front-end for those methods.  If you wish, you
may create alternate front-ends.
.PP
The two types of data that may be stored are called \f(CW\*(C`config\*(C'\fR values
and \f(CW\*(C`feature\*(C'\fR values.  A \f(CW\*(C`config\*(C'\fR value may be any perl scalar,
including references to complex data structures.  It must, however, be
serializable using \f(CW\*(C`Data::Dumper\*(C'\fR.  A \f(CW\*(C`feature\*(C'\fR is a boolean (1 or
0) value.
.SH "USAGE"
.IX Header "USAGE"
This script functions as a basic getter/setter wrapper around the
configuration of a single module.  On the command line, specify which
module's configuration you're interested in, and pass options to get
or set \f(CW\*(C`config\*(C'\fR or \f(CW\*(C`feature\*(C'\fR values.  The following options are
supported:
.IP "module" 4
.IX Item "module"
Specifies the name of the module to configure (required).
.IP "feature" 4
.IX Item "feature"
When passed the name of a \f(CW\*(C`feature\*(C'\fR, shows its value.  The value will
be 1 if the feature is enabled, 0 if the feature is not enabled, or
empty if the feature is unknown.  When no feature name is supplied,
the names and values of all known features will be shown.
.IP "config" 4
.IX Item "config"
When passed the name of a \f(CW\*(C`config\*(C'\fR entry, shows its value.  The value
will be displayed using \f(CW\*(C`Data::Dumper\*(C'\fR (or similar) as perl code.
When no config name is supplied, the names and values of all known
config entries will be shown.
.IP "set_feature" 4
.IX Item "set_feature"
Sets the given \f(CW\*(C`feature\*(C'\fR to the given boolean value.  Specify the value
as either 1 or 0.
.IP "set_config" 4
.IX Item "set_config"
Sets the given \f(CW\*(C`config\*(C'\fR entry to the given value.
.IP "eval" 4
.IX Item "eval"
If the \f(CW\*(C`\-\-eval\*(C'\fR option is used, the values in \f(CW\*(C`set_config\*(C'\fR will be
evaluated as perl code before being stored.  This allows moderately
complicated data structures to be stored.  For really complicated
structures, you probably shouldn't use this command-line interface,
just use the Perl \s-1API\s0 instead.
.IP "help" 4
.IX Item "help"
Prints a help message, including a few examples, and exits.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams, kwilliams@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999, Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIModule::Build\fR\|(3), \fIperl\fR\|(1).
