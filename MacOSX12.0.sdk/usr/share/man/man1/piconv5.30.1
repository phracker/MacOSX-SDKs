.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PICONV 1"
.TH PICONV 1 "2021-08-28" "perl v5.30.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
piconv \-\- iconv(1), reinvented in perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  piconv [\-f from_encoding] [\-t to_encoding]
\&         [\-p|\-\-perlqq|\-\-htmlcref|\-\-xmlcref] [\-C N|\-c] [\-D] [\-S scheme]
\&         [\-s string|file...]
\&  piconv \-l
\&  piconv \-r encoding_alias
\&  piconv \-h
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBpiconv\fR is perl version of \fBiconv\fR, a character encoding converter
widely available for various Unixen today.  This script was primarily
a technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.
.PP
piconv converts the character encoding of either \s-1STDIN\s0 or files
specified in the argument and prints out to \s-1STDOUT.\s0
.PP
Here is the list of options.  Some options can be in short format (\-f)
or long (\-\-from) one.
.IP "\-f,\-\-from \fIfrom_encoding\fR" 4
.IX Item "-f,--from from_encoding"
Specifies the encoding you are converting from.  Unlike \fBiconv\fR,
this option can be omitted.  In such cases, the current locale is used.
.IP "\-t,\-\-to \fIto_encoding\fR" 4
.IX Item "-t,--to to_encoding"
Specifies the encoding you are converting to.  Unlike \fBiconv\fR,
this option can be omitted.  In such cases, the current locale is used.
.Sp
Therefore, when both \-f and \-t are omitted, \fBpiconv\fR just acts
like \fBcat\fR.
.IP "\-s,\-\-string \fIstring\fR" 4
.IX Item "-s,--string string"
uses \fIstring\fR instead of file for the source of text.
.IP "\-l,\-\-list" 4
.IX Item "-l,--list"
Lists all available encodings, one per line, in case-insensitive
order.  Note that only the canonical names are listed; many aliases
exist.  For example, the names are case-insensitive, and many standard
and common aliases work, such as \*(L"latin1\*(R" for \*(L"\s-1ISO\-8859\-1\*(R",\s0 or \*(L"ibm850\*(R"
instead of \*(L"cp850\*(R", or \*(L"winlatin1\*(R" for \*(L"cp1252\*(R".  See Encode::Supported
for a full discussion.
.IP "\-r,\-\-resolve \fIencoding_alias\fR" 4
.IX Item "-r,--resolve encoding_alias"
Resolve \fIencoding_alias\fR to Encode canonical encoding name.
.IP "\-C,\-\-check \fIN\fR" 4
.IX Item "-C,--check N"
Check the validity of the stream if \fIN\fR = 1.  When \fIN\fR = \-1, something
interesting happens when it encounters an invalid character.
.IP "\-c" 4
.IX Item "-c"
Same as \f(CW\*(C`\-C 1\*(C'\fR.
.IP "\-p,\-\-perlqq" 4
.IX Item "-p,--perlqq"
Transliterate characters missing in encoding to \ex{\s-1HHHH\s0} where \s-1HHHH\s0 is the
hexadecimal Unicode code point.
.IP "\-\-htmlcref" 4
.IX Item "--htmlcref"
Transliterate characters missing in encoding to &#NNN; where \s-1NNN\s0 is the
decimal Unicode code point.
.IP "\-\-xmlcref" 4
.IX Item "--xmlcref"
Transliterate characters missing in encoding to &#xHHHH; where \s-1HHHH\s0 is the
hexadecimal Unicode code point.
.IP "\-h,\-\-help" 4
.IX Item "-h,--help"
Show usage.
.IP "\-D,\-\-debug" 4
.IX Item "-D,--debug"
Invokes debugging mode.  Primarily for Encode hackers.
.IP "\-S,\-\-scheme \fIscheme\fR" 4
.IX Item "-S,--scheme scheme"
Selects which scheme is to be used for conversion.  Available schemes
are as follows:
.RS 4
.IP "from_to" 4
.IX Item "from_to"
Uses Encode::from_to for conversion.  This is the default.
.IP "decode_encode" 4
.IX Item "decode_encode"
Input strings are \fBdecode()\fRd then \fBencode()\fRd.  A straight two-step
implementation.
.IP "perlio" 4
.IX Item "perlio"
The new perlIO layer is used.  \s-1NI\-S\s0' favorite.
.Sp
You should use this option if you are using \s-1UTF\-16\s0 and others which
linefeed is not $/.
.RE
.RS 4
.Sp
Like the \fI\-D\fR option, this is also for Encode hackers.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBiconv\fR\|(1)
\&\fBlocale\fR\|(3)
Encode
Encode::Supported
Encode::Alias
PerlIO
