.TH COMPRESSION_TOOL 1
.SH NAME
compression_tool \- encode/decode files using the Compression library
.SH SYNOPSIS
.B compression_tool
\fB\-encode\fR | \fB\-decode\fR
[\fB\-a\fR\ \fIalgorithm\fR]
[\fB\-A\fR\ \fIalgorithm\fR]
[\fB\-i\fR\ \fIinput_file\fR]
[\fB\-o\fR\ \fIoutput_file\fR]
[\fB\-v\fR\]
[\fB\-h\fR\]
.SH DESCRIPTION
.B compression_tool
encodes (compresses), or decodes (uncompresses) files using the Compression library.
.SH OPTIONS
.TP
.BR \-encode
Encode (compress) the input
.TP
.BR \-decode
Decode (uncompress) the input
.TP
.BR \-a\ \fIalgorithm\fR
Set the compression algorithm, valid options are \fBzlib\fR, \fBlzma\fR, \fBlzfse\fR, \fBlz4\fR, \fBlz4_raw\fR.
Default is \fBlzfse\fR.
.br
\- \fBzlib\ \ \ \ \ \fR raw DEFLATE payload, as defined in IETF RFC 1951, encoder is zlib level 5,
.fc
.br
\- \fBlzma\ \ \ \ \ \ \fRLZMA2 payload inside a XZ container, encoder is LZMA2 preset 6,
.br
\- \fBlz4\ \ \ \ \ \ \ \fRraw LZ4 payload inside a simple frame format (described in compression.h),
.br
\- \fBlz4_raw\ \ \ \fRraw LZ4 payload,
.br
\- \fBlzfse\ \ \ \ \ \fRLZFSE payload.
.TP
.BR \-A\ \fIalgorithm\fR
Enable block compression, and set compression algorithm, valid options are \fBzlib\fR, \fBlzma\fR, \fBlzfse\fR, \fBlz4\fR.
Default is \fBlzfse\fR.
.TP
.BR \-b\ \fIblock_size\fR
Set block size for block compression.  The integer value can be followed by \fBm\fR or \fBk\fR or \fBb\fR.
.TP
.BR \-t\ \fIthread_count\fR
Set the number of worker threads to use for block compression/decompression.  Default is the number of logical threads on the machine.
.TP
.BR \-i\ \fIinput_file\fR
Input file. If omitted, read from standard input.
.TP
.BR \-o\ \fIoutput_file\fR
Output file. If omitted, write to standard output.
.TP
.BR \-v
Increase verbosity. Default is silent operation.
.TP
.BR \-h
Print usage and exit.
.RE
.SH BLOCK COMPRESSION FILE FORMAT
The file starts with a 4-byte header 'p','b','z',<algo>, where <algo> indicates the algorithm used to compress data.
The header is followed by the 64-bit block size in bytes.
Then for each block, we have 64-bit uncompressed size (will batch the block size, except possibly for the last block), 64-bit compressed size, and the compressed payload.
If both uncompressed and compressed sizes for a block are equal, the payload is stored uncompressed.  All 64-bit values are stored big-endian.
Valid values for <algo> are: 'z' for zlib, 'x' for lzma, '4' for lz4, and 'e' for lzfse.
