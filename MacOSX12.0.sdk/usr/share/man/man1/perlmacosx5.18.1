.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOSX 1"
.TH PERLMACOSX 1 "2021-08-27" "perl v5.18.4" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacosx \- Perl under Mac OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document briefly describes Perl under Mac \s-1OS X.\s0
.PP
.Vb 7
\&  curl http://www.cpan.org/src/perl\-5.18.4.tar.gz > perl\-5.18.0.tar.gz
\&  tar \-xzf perl\-5.18.4.tar.gz
\&  cd perl\-5.18.4
\&  ./Configure \-des \-Dprefix=/usr/local/
\&  make
\&  make test
\&  sudo make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The latest Perl release (5.18.4 as of this writing) builds without changes
under all versions of Mac \s-1OS X\s0 from 10.3 \*(L"Panther\*(R" onwards.
.PP
In order to build your own version of Perl you will need 'make',
which is part of Apple's developer tools \- also known as Xcode. From
Mac \s-1OS X 10.7 \s0\*(L"Lion\*(R" onwards, it can be downloaded separately as the
\&'Command Line Tools' bundle directly from <https://developer.apple.com/downloads/>
(you will need a free account to log in), or as a part of the Xcode suite,
freely available at the App Store. Xcode is a pretty big app, so
unless you already have it or really want it, you are advised to get the
\&'Command Line Tools' bundle separately from the link above. If you want
to do it from within Xcode, go to Xcode \-> Preferences \-> Downloads and
select the 'Command Line Tools' option.
.PP
Between Mac \s-1OS X 10.3 \s0\*(L"Panther\*(R" and 10.6 \*(L"Snow Leopard\*(R", the 'Command
Line Tools' bundle was called 'unix tools', and was usually supplied
with Mac \s-1OS\s0 install DVDs.
.PP
Earlier Mac \s-1OS X\s0 releases (10.2 \*(L"Jaguar\*(R" and older) did not include a
completely thread-safe libc, so threading is not fully supported. Also,
earlier releases included a buggy libdb, so some of the DB_File tests
are known to fail on those releases.
.SH "Customizations in Apple's Perl"
.IX Header "Customizations in Apple's Perl"
Several custom features have been added to the version of perl in Mac \s-1OS X.\s0
.SS "Module Search Path (@INC)"
.IX Subsection "Module Search Path (@INC)"
Since 10.4 \*(L"Tiger\*(R", system administrators can easily add paths to perl's
module search path.
The file '/Library/Perl/${version}/PrependToPath' contains paths (one per
line) that will be added to the beginning of the search path, while the file
\&'/Library/Perl/${version}/AppendToPath' contains paths that will be added
to the end of the search path.
.PP
By default, Mac \s-1OS X\s0 does not come with a PrependToPath file, but does come
with an AppendToPath file.
This file contains the path '/System/Library/Perl/Extras/${version}', where
third-party perl modules that Apple ships on Mac \s-1OS X,\s0 are installed.
In addition, it contains the paths to previous versions of
\&'/Library/Perl/${version}' (where ${version} are the previous versions of perl
that shipped in Mac \s-1OS X\s0), to maintain backwards compatibility.
.PP
In 10.5 \*(L"Leopard\*(R" and beyond, the environment variable \s-1NO_PERL_PREPENDTOPATH
\&\s0(set to anything) will cause perl to not load any PrependToPath file.
Likewise, the \s-1NO_PERL_APPENDTOPATH\s0 environment variable will case perl to not
load any AppendToPath file.
.PP
In 10.5.7 for versions of perl before 5.18.4, there is a new path,
\&'/Library/Perl/Updates/${version}' that comes before the system perl directory.
When 'INSTALLDIRS=perl' is specified to Makefile.PL, modules that
previous overwrite those in '/System/Library/Perl/${version}', will now be
install in '/Library/Perl/Updates/${version}'.
This allows Apple to update modules in the system perl, but users will
get the versions they installed in '/Library/Perl/Updates/${version}'.
.PP
In addition, the Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" now
corresponds to this new directory.
There are also the new parameters \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R", which also correspond to this new directory,
and are provided for completeness.
.PP
However, for perl 5.18.4 in Mac \s-1OS X 10.7,\s0 the order of the include
paths was changed so that '/Library/Perl/5.18.4' came before
\&'/System/Library/Perl/5.18.4', so '/Library/Perl/Updates' is no longer needed.
The Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" have returned
to their original values, and \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R" have been removed.
.SS "Dtrace Support"
.IX Subsection "Dtrace Support"
Dtrace support has been added to perl to allow tracing of perl subroutine
calls, both entry and return.
Here is a quick example:
.PP
.Vb 2
\&    % cat test.pl
\&    #!/usr/bin/perl
\&
\&    sub a {
\&        print "Ah! death. Welcome to thee brother\en";
\&    }
\&
\&    sub b {
\&        print "Where art thou a()?\en";
\&        a();
\&    }
\&
\&    sub c {
\&        print "The band of alphabets\en";
\&        b();
\&    }
\&
\&    sub main {
\&        c();
\&    }
\&
\&    main();
\&    % cat pltest.d
\&    perl$target:::
\&    {
\&        printf("%s\en", copyinstr(arg0));
\&    }
\&    % sudo dtrace \-s pltest.d \-c \*(Aqperl test.pl\*(Aq
\&    dtrace: description \*(Aqperl$target::: \*(Aq matched 8 probes
\&    The band of alphabets
\&    Where art thou a()?
\&    Ah! death. Welcome to thee brother
\&    dtrace: pid 50272 has exited
\&    CPU     ID                    FUNCTION:NAME
\&      0  14231       Perl_pp_entersub:sub\-entry main
\&
\&      0  14231       Perl_pp_entersub:sub\-entry c
\&
\&      0  14231       Perl_pp_entersub:sub\-entry b
\&
\&      0  14231       Perl_pp_entersub:sub\-entry a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return b
\&
\&      0  15806      Perl_pp_leavesub:sub\-return c
\&
\&      0  15806      Perl_pp_leavesub:sub\-return main
.Ve
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Since 10.5 \*(L"Leopard\*(R", Mac \s-1OS X\s0 provided both 32 and 64\-bit support for libraries
and frameworks, allowing both 32 and 64\-bit applications to be written.
While running perl (and all other command-line programs) remained 32\-bit, the
\&'libperl.dylib' library is 32/64 bits.
This allows programs with embedded
perl support to run in both 32 and 64\-bit mode as needed.
.PP
To support this, changes to the Config module were made to return the correct
values for the internal sizes of perl types.
For example, \*(L"longsize\*(R" return 4 in 32\-bits, while it returns 8 in 64\-bits.
.PP
Related to this support is the new environment variable \s-1ARCHFLAGS,\s0 which
provides a way to build extensions for different machine and 32/64\-bit
architectures.
The default architecture to build extensions before 10.5 was the (single)
architecture of the building machine.
In 10.5, this became building both 32\-bit PowerPC and Intel.
In 10.6 and beyond, the default architectures were changed to building 32\-bit
for both PowerPC and Intel, and 64\-bit only for Intel.
With \s-1ARCHFLAGS,\s0 this can be changed to whatever architectures the user
wants to build.
For example:
.PP
.Vb 3
\&    % env ARCHFLAGS=\*(Aq\-arch i386 \-arch x86_64\*(Aq perl Makefile.PL
\&    % make
\&    % make install
.Ve
.PP
will build only 2\-way universal.
.SS "Multiple Version Support"
.IX Subsection "Multiple Version Support"
Since 10.6 \*(L"SnowLeopard\*(R", more than one version of perl are supported.
So out of the box, the default version of perl is 5.18.
However, to provide backwards compatibility with previous versions of perl,
especially for systems that have installed (version-specific) perl modules, or
to provide newer versions of perl that we aren't ready to make the default,
\&'/usr/bin/perl' can be switched to use an alternate version, on a per-user or
system-wide basis.
The alternate version of perl that is provided is .
.PP
Users can select the alternate version
by simply running the following command:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Version
.Ve
.PP
Subsequent invocations of '/usr/bin/perl' will then use the  version.
.PP
To set defaults systemwide, use the above command, but replace the third
argument with '/Library/Preferences/com.apple.versioner.perl' (admin privileges
will be required).
.PP
The environment variable \s-1VERSIONER_PERL_VERSION \s0(set to one of the supported versions)
can also be set, and it overrides the settings in any preference files.
.PP
Note: this may changes in future versions of Mac \s-1OS X,\s0 which may use
an improved scheme for making such settings.
.SH "Building Perl"
.IX Header "Building Perl"
.SS "Installation Prefix"
.IX Subsection "Installation Prefix"
The default installation location for this release uses the traditional
\&\s-1UNIX\s0 directory layout under /usr/local. This is the recommended location
for most users, and will leave the Apple-supplied Perl and its modules
undisturbed.
.PP
Using an installation prefix of '/usr' will result in a directory layout
that mirrors that of Apple's default Perl, with core modules stored in
\&'/System/Library/Perl/${version}', \s-1CPAN\s0 modules stored in
\&'/Library/Perl/${version}', and the addition of
\&'/Network/Library/Perl/${version}' to \f(CW@INC\fR for modules that are stored
on a file server and used by many Macs.
.SS "\s-1SDK\s0 support"
.IX Subsection "SDK support"
First, export the path to the \s-1SDK\s0 into the build environment:
.PP
.Vb 1
\&    export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk
.Ve
.PP
Please make sure the \s-1SDK\s0 version (i.e. the numbers right before '.sdk')
matches your system's (in this case, Mac \s-1OS X 10.8 \s0\*(L"Mountain Lion\*(R"), as it is
possible to have more than one \s-1SDK\s0 installed. Also make sure the path exists
in your system, and if it doesn't please make sure the \s-1SDK\s0 is properly
installed, as it should come with the 'Command Line Tools' bundle mentioned
above. Finally, if you have an older Mac \s-1OS X \s0(10.6 \*(L"Snow Leopard\*(R" and below)
running Xcode 4.2 or lower, the \s-1SDK\s0 path might be something like
\&\f(CW\*(Aq/Developer/SDKs/MacOSX10.3.9.sdk\*(Aq\fR.
.PP
You can use the \s-1SDK\s0 by exporting some additions to Perl's 'ccflags' and '..flags'
config variables:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.SS "Universal Binary support"
.IX Subsection "Universal Binary support"
Note: From Mac \s-1OS X 10.6 \s0\*(L"Snow Leopard\*(R" onwards, Apple only supports
Intel-based hardware. This means you can safely skip this section unless
you have an older Apple computer running on ppc or wish to create a perl
binary with backwards compatibility.
.PP
You can compile perl as a universal binary (built for both ppc and intel).
In Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R", you must export the 'u' variant of the \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.4u.sdk
.Ve
.PP
Mac \s-1OS X 10.5 \s0\*(L"Leopard\*(R" and above do not require the 'u' variant.
.PP
In addition to the compiler flags used to select the \s-1SDK,\s0 also add the flags
for creating a universal binary:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-arch i686 \-arch ppc \-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-arch i686 \-arch ppc \-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.PP
Keep in mind that these compiler and linker settings will also be used when
building \s-1CPAN\s0 modules. For \s-1XS\s0 modules to be compiled as a universal binary, any
libraries it links to must also be universal binaries. The system libraries that
Apple includes with the 10.4u \s-1SDK\s0 are all universal, but user-installed libraries
may need to be re-installed as universal binaries.
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Follow the instructions in \fI\s-1INSTALL\s0\fR to build perl with support for 64\-bit 
integers (\f(CW\*(C`use64bitint\*(C'\fR) or both 64\-bit integers and 64\-bit addressing
(\f(CW\*(C`use64bitall\*(C'\fR). In the latter case, the resulting binary will run only
on G5\-based hosts.
.PP
Support for 64\-bit addressing is experimental: some aspects of Perl may be
omitted or buggy. Note the messages output by \fIConfigure\fR for further 
information. Please use \f(CW\*(C`perlbug\*(C'\fR to submit a problem report in the
event that you encounter difficulties.
.PP
When building 64\-bit modules, it is your responsibility to ensure that linked
external libraries and frameworks provide 64\-bit support: if they do not,
module building may appear to succeed, but attempts to use the module will
result in run-time dynamic linking errors, and subsequent test failures.
You can use \f(CW\*(C`file\*(C'\fR to discover the architectures supported by a library:
.PP
.Vb 4
\&    $ file libgdbm.3.0.0.dylib 
\&    libgdbm.3.0.0.dylib: Mach\-O fat file with 2 architectures
\&    libgdbm.3.0.0.dylib (for architecture ppc):      Mach\-O dynamically linked shared library ppc
\&    libgdbm.3.0.0.dylib (for architecture ppc64):    Mach\-O 64\-bit dynamically linked shared library ppc64
.Ve
.PP
Note that this issue precludes the building of many Macintosh-specific \s-1CPAN\s0
modules (\f(CW\*(C`Mac::*\*(C'\fR), as the required Apple frameworks do not provide 64\-bit
support. Similarly, downloads from Fink or Darwinports are unlikely to provide
64\-bit support; the libraries must be rebuilt from source with the appropriate
compiler and linker flags. For further information, see Apple's
\&\fI64\-Bit Transition Guide\fR at 
<http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.
.SS "libperl and Prebinding"
.IX Subsection "libperl and Prebinding"
Mac \s-1OS X\s0 ships with a dynamically-loaded libperl, but the default for
this release is to compile a static libperl. The reason for this is
pre-binding. Dynamic libraries can be pre-bound to a specific address in
memory in order to decrease load time. To do this, one needs to be aware
of the location and size of all previously-loaded libraries. Apple
collects this information as part of their overall \s-1OS\s0 build process, and
thus has easy access to it when building Perl, but ordinary users would
need to go to a great deal of effort to obtain the information needed
for pre-binding.
.PP
You can override the default and build a shared libperl if you wish
(Configure\ ...\ \-Duseshrplib).
.PP
With Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R" and newer, there is almost no performance
penalty for non-prebound libraries. Earlier releases will suffer a greater
load time than either the static library, or Apple's pre-bound dynamic library.
.SS "Updating Apple's Perl"
.IX Subsection "Updating Apple's Perl"
In a word \- don't, at least not without a *very* good reason. Your scripts
can just as easily begin with \*(L"#!/usr/local/bin/perl\*(R" as with
\&\*(L"#!/usr/bin/perl\*(R". Scripts supplied by Apple and other third parties as
part of installation packages and such have generally only been tested
with the /usr/bin/perl that's installed by Apple.
.PP
If you find that you do need to update the system Perl, one issue worth
keeping in mind is the question of static vs. dynamic libraries. If you
upgrade using the default static libperl, you will find that the dynamic
libperl supplied by Apple will not be deleted. If both libraries are
present when an application that links against libperl is built, ld will
link against the dynamic library by default. So, if you need to replace
Apple's dynamic libperl with a static libperl, you need to be sure to
delete the older dynamic library after you've installed the update.
.SS "Known problems"
.IX Subsection "Known problems"
If you have installed extra libraries such as \s-1GDBM\s0 through Fink
(in other words, you have libraries under \fI/sw/lib\fR), or libdlcompat
to \fI/usr/local/lib\fR, you may need to be extra careful when running
Configure to not to confuse Configure and Perl about which libraries
to use.  Being confused will show up for example as \*(L"dyld\*(R" errors about
symbol problems, for example during \*(L"make test\*(R". The safest bet is to run
Configure as
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=/usr/lib
.Ve
.PP
to make Configure look only into the system libraries.  If you have some
extra library directories that you really want to use (such as newer
Berkeley \s-1DB\s0 libraries in pre-Panther systems), add those to the libpth:
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=\*(Aq/usr/lib /opt/lib\*(Aq
.Ve
.PP
The default of building Perl statically may cause problems with complex
applications like Tk: in that case consider building shared Perl
.PP
.Vb 1
\&    Configure ... \-Duseshrplib
.Ve
.PP
but remember that there's a startup cost to pay in that case (see above
\&\*(L"libperl and Prebinding\*(R").
.PP
Starting with Tiger (Mac \s-1OS X 10.4\s0), Apple shipped broken locale files for
the eu_ES locale (Basque-Spain).  In previous releases of Perl, this resulted in
failures in the \fIlib/locale\fR test. These failures have been suppressed
in the current release of Perl by making the test ignore the broken locale.
If you need to use the eu_ES locale, you should contact Apple support.
.SS "Cocoa"
.IX Subsection "Cocoa"
There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge
module, included with Mac \s-1OS X,\s0 can be used by standalone scripts to
access Foundation (i.e. non-GUI) classes and objects.
.PP
An alternative is CamelBones, a framework that allows access to both
Foundation and AppKit classes and objects, so that full \s-1GUI\s0 applications
can be built in Perl. CamelBones can be found on SourceForge, at
<http://www.sourceforge.net/projects/camelbones/>.
.SH "Starting From Scratch"
.IX Header "Starting From Scratch"
Unfortunately it is not that difficult somehow manage to break one's
Mac \s-1OS X\s0 Perl rather severely.  If all else fails and you want to
really, \fB\s-1REALLY\s0\fR, start from scratch and remove even your Apple Perl
installation (which has become corrupted somehow), the following
instructions should do it.  \fBPlease think twice before following
these instructions: they are much like conducting brain surgery to
yourself.  Without anesthesia.\fR  We will \fBnot\fR come to fix your system
if you do this.
.PP
First, get rid of the libperl.dylib:
.PP
.Vb 2
\&    # cd /System/Library/Perl/darwin/CORE
\&    # rm libperl.dylib
.Ve
.PP
Then delete every .bundle file found anywhere in the folders:
.PP
.Vb 2
\&    /System/Library/Perl
\&    /Library/Perl
.Ve
.PP
You can find them for example by
.PP
.Vb 1
\&    # find /System/Library/Perl /Library/Perl \-name \*(Aq*.bundle\*(Aq \-print
.Ve
.PP
After this you can either copy Perl from your operating system media
(you will need at least the /System/Library/Perl and /usr/bin/perl),
or rebuild Perl from the source code with \f(CW\*(C`Configure \-Dprefix=/usr
\&\-Duseshrplib\*(C'\fR \s-1NOTE:\s0 the \f(CW\*(C`\-Dprefix=/usr\*(C'\fR to replace the system Perl
works much better with Perl 5.8.1 and later, in Perl 5.8.0 the
settings were not quite right.
.PP
\&\*(L"Pacifist\*(R" from CharlesSoft (<http://www.charlessoft.com/>) is a nice
way to extract the Perl binaries from the \s-1OS\s0 media, without having to
reinstall the entire \s-1OS.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
This \s-1README\s0 was written by Sherm Pendley <sherm@dot\-app.org>,
and subsequently updated by Dominic Dunlop <domo@computer.org>
and Breno G. de Oliveira <garu@cpan.org>. The \*(L"Starting From Scratch\*(R"
recipe was contributed by John Montbriand <montbriand@apple.com>.
.SH "DATE"
.IX Header "DATE"
Last modified 2011\-10\-31.
