// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.29.207 clang-1300.0.28.1)
// swift-module-flags: -target x86_64-apple-ios15.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FamilyControls
import Combine
import CoreServices
import Foundation
import ManagedSettings
import Swift
import SwiftUI
import UIKit
import _Concurrency
import os.log
import os
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum FamilyControlsError : Foundation.LocalizedError {
  case restricted
  case unavailable
  case invalidAccountType
  case invalidArgument
  case authorizationConflict
  case authorizationCanceled
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: FamilyControls.FamilyControlsError, b: FamilyControls.FamilyControlsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum AuthorizationStatus : Swift.Int, Swift.Codable, Swift.CustomStringConvertible {
  case notDetermined
  case denied
  case approved
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FamilyActivitySelection : Swift.Codable, Swift.Equatable {
  public var applicationTokens: Swift.Set<ManagedSettings.ApplicationToken>
  public var categoryTokens: Swift.Set<ManagedSettings.ActivityCategoryToken>
  public var webDomainTokens: Swift.Set<ManagedSettings.WebDomainToken>
  public var applications: Swift.Set<ManagedSettings.Application> {
    get
  }
  public var categories: Swift.Set<ManagedSettings.ActivityCategory> {
    get
  }
  public var webDomains: Swift.Set<ManagedSettings.WebDomain> {
    get
  }
  public init()
  public static func == (a: FamilyControls.FamilyActivitySelection, b: FamilyControls.FamilyActivitySelection) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FamilyActivityPicker : SwiftUI.View {
  public init(selection: SwiftUI.Binding<FamilyControls.FamilyActivitySelection>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14FamilyControls0A14ActivityPickerV4bodyQrvp", 0) __
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func familyActivityPicker(isPresented: SwiftUI.Binding<Swift.Bool>, selection: SwiftUI.Binding<FamilyControls.FamilyActivitySelection>) -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class AuthorizationCenter : Combine.ObservableObject {
  public static let shared: FamilyControls.AuthorizationCenter
  @Combine.Published @_projectedValueProperty($authorizationStatus) public var authorizationStatus: FamilyControls.AuthorizationStatus {
    get
  }
  public var $authorizationStatus: Combine.Published<FamilyControls.AuthorizationStatus>.Publisher {
    get
  }
  public func requestAuthorization(completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func revokeAuthorization(completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FamilyControls.FamilyControlsError : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FamilyControls.FamilyControlsError : Swift.Hashable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FamilyControls.AuthorizationStatus : Swift.Equatable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FamilyControls.AuthorizationStatus : Swift.Hashable {}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension FamilyControls.AuthorizationStatus : Swift.RawRepresentable {}
