// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.29.207 clang-1300.0.28.1)
// swift-module-flags: -target arm64e-apple-ios15.0-macabi -enable-objc-interop -swift-version 5 -enforce-exclusivity=checked -O -enable-library-evolution -enable-experimental-concurrency -module-name RealityKit
import ARKit
import Combine
import CoreGraphics
import Foundation
import Metal
import MultipeerConnectivity
@_exported import RealityFoundation
import Swift
import UIKit
import _Concurrency
import simd
@available(macOS 12.0, iOS 15.0, *)
extension RealityKit.ARView {
  @available(macOS 12.0, iOS 15.0, *)
  public struct PostProcessContext {
    public init(_ device: Metal.MTLDevice, _ commandBuffer: Metal.MTLCommandBuffer, _ sourceColorTexture: Metal.MTLTexture, _ sourceDepthTexture: Metal.MTLTexture, _ targetColorTexture: Metal.MTLTexture, _ projection: simd.float4x4, _ time: Foundation.TimeInterval)
    public var device: Metal.MTLDevice
    public var commandBuffer: Metal.MTLCommandBuffer
    public var sourceColorTexture: Metal.MTLTexture
    public var sourceDepthTexture: Metal.MTLTexture
    public var targetColorTexture: Metal.MTLTexture
    public var projection: simd.float4x4
    public var time: Foundation.TimeInterval
  }
  @available(macOS 12.0, iOS 15.0, *)
  public struct RenderCallbacks {
    public var prepareWithDevice: ((Metal.MTLDevice) -> Swift.Void)?
    public var postProcess: ((RealityKit.ARView.PostProcessContext) -> Swift.Void)?
    public init()
  }
  @available(macOS 12.0, iOS 15.0, *)
  @_Concurrency.MainActor(unsafe) public var renderCallbacks: RealityKit.ARView.RenderCallbacks {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_Concurrency.MainActor(unsafe) open class EntityTranslationGestureRecognizer : UIKit.UIGestureRecognizer, RealityKit.EntityGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public var entity: RealityFoundation.HasCollision? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func reset()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPrevent(_ preventedGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func translation(in entity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) open func setTranslation(_ translation: Swift.SIMD3<Swift.Float>, in entity: RealityFoundation.Entity?)
  @_Concurrency.MainActor(unsafe) open func velocity(in entity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor(unsafe) public func location(in entity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_Concurrency.MainActor(unsafe) open class EntityScaleGestureRecognizer : UIKit.UIPinchGestureRecognizer, RealityKit.EntityGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public var entity: RealityFoundation.HasCollision? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPrevent(_ preventedGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
}
@available(macOS 10.15, iOS 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xy: Swift.SIMD2<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
extension Swift.SIMD4 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xyz: Swift.SIMD3<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.MeshResource {
  public typealias Font = UIKit.UIFont
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.MeshResource {
  public static func generateText(_ string: Swift.String, extrusionDepth: Swift.Float = 0.25, font: RealityFoundation.MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CoreGraphics.CGRect = CGRect.zero, alignment: CoreText.CTTextAlignment = .left, lineBreakMode: CoreText.CTLineBreakMode = .byTruncatingTail) -> RealityFoundation.MeshResource
  public static func __generateText(_ string: Swift.String, extrusionDepth: Swift.Float = 0.25, font: RealityFoundation.MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CoreGraphics.CGRect = CGRect.zero, alignment: CoreText.CTTextAlignment = .left, lineBreakMode: CoreText.CTLineBreakMode = .byTruncatingTail, segmentCount: Swift.UInt8 = 6) -> RealityFoundation.MeshResource
}
@usableFromInline
internal typealias REMatrix2x2F = simd.simd_float2x2
@usableFromInline
internal typealias REMatrix3x3F = simd.simd_float3x3
@usableFromInline
internal typealias REMatrix4x4F = simd.simd_float4x4
@available(macOS 10.15, iOS 13.0, *)
extension simd.simd_float3x3 {
  @inlinable internal init(_ matrix: RealityKit.REMatrix4x4F) {
        self = REMatrix3x3F(columns: (matrix[0]._xyz, matrix[1]._xyz, matrix[2]._xyz))
    }
}
@available(macOS 10.15, iOS 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
extension simd.simd_float4x4 {
  @inlinable internal static var identity: RealityKit.REMatrix4x4F {
    get { return REMatrix4x4F( diagonal: SIMD4<Float>(repeating: 1.0)) }
  }
  @inlinable internal init(rows: (Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>)) {
        self = simd_matrix_from_rows(rows.0, rows.1, rows.2, rows.3)
    }
  @inlinable internal init(rows r: ((Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float))) {
        self = simd_matrix_from_rows(SIMD4<Float>(r.0.0, r.0.1, r.0.2, r.0.3),
                                     SIMD4<Float>(r.1.0, r.1.1, r.1.2, r.1.3),
                                     SIMD4<Float>(r.2.0, r.2.1, r.2.2, r.2.3),
                                     SIMD4<Float>(r.3.0, r.3.1, r.3.2, r.3.3))
    }
  @inlinable internal init(translation t: Swift.SIMD3<Swift.Float>) {
        self.init(columns: (SIMD4<Float>(1, 0, 0, 0),
                            SIMD4<Float>(0, 1, 0, 0),
                            SIMD4<Float>(0, 0, 1, 0),
                            SIMD4<Float>(t.x, t.y, t.z, 1)))
    }
  @inlinable internal init(scale s: Swift.SIMD3<Swift.Float>) {
        self.init(diagonal: SIMD4<Float>(s.x, s.y, s.z, 1))
    }
  @inlinable internal init(rotation: simd.simd_quatf) {
        self = simd_matrix4x4(rotation)
    }
  @inlinable internal init(translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        self = simd_matrix4x4(rotation)
        self.scale(scale)
        self.translate(translation)
    }
  @inlinable internal func scaled(_ scale: Swift.SIMD3<Swift.Float>) -> RealityKit.REMatrix4x4F {
        var m = self
        m.columns.0 *= scale.x
        m.columns.1 *= scale.y
        m.columns.2 *= scale.z
        return m
    }
  @inlinable internal func translated(_ trans: Swift.SIMD3<Swift.Float>) -> RealityKit.REMatrix4x4F {
        var m = self
        m.columns.3._xyz += trans
        return m
    }
  @inlinable internal mutating func scale(_ scale: Swift.SIMD3<Swift.Float>) {
        self.columns.0 *= scale.x
        self.columns.1 *= scale.y
        self.columns.2 *= scale.z
    }
  @inlinable internal mutating func translate(_ trans: Swift.SIMD3<Swift.Float>) {
        self.columns.3._xyz += trans
    }
  @inlinable internal var scale: Swift.SIMD3<Swift.Float> {
    get {
            // See `Matrix4x4.extractScale()` for additional comments.
            let minor = matrix_float3x3(self)
            let sign = minor.determinant > Float(0) ? Float(1) : Float(-1)
            return sign * SIMD3<Float>(simd.length(minor.columns.0),
                                       simd.length(minor.columns.1),
                                       simd.length(minor.columns.2))
        }
    set {
            self.columns.0._xyz = simd.normalize(self.columns.0._xyz)
            self.columns.1._xyz = simd.normalize(self.columns.1._xyz)
            self.columns.2._xyz = simd.normalize(self.columns.2._xyz)
            scale(newValue)
        }
  }
  @usableFromInline
  internal var rotation: simd.simd_quatf {
    get
    set
  }
  @inlinable internal var translation: Swift.SIMD3<Swift.Float> {
    get {
            return columns.3._xyz
        }
    set {
            columns.3._xyz = newValue
        }
  }
  @inlinable internal func decompose() -> (translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        return (translation, rotation, scale)
    }
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.ARView {
  public struct Environment {
    public typealias Color = UIKit.UIColor
    public struct Background {
      @available(macCatalyst 14.0, *)
      public static func cameraFeed(exposureCompensation: Swift.Float = 0.0) -> RealityKit.ARView.Environment.Background
      public static func skybox(_ resource: RealityFoundation.EnvironmentResource) -> RealityKit.ARView.Environment.Background
      public static func color(_ color: RealityKit.ARView.Environment.Color) -> RealityKit.ARView.Environment.Background
    }
    public struct ImageBasedLight {
      public var resource: RealityFoundation.EnvironmentResource?
      public var intensityExponent: Swift.Float
    }
    public enum Reverb {
      public enum Preset {
        case smallRoom
        case mediumRoom
        case largeRoom
        case mediumHall
        case largeHall
        case cathedral
        public static func == (a: RealityKit.ARView.Environment.Reverb.Preset, b: RealityKit.ARView.Environment.Reverb.Preset) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noReverb
      case preset(RealityKit.ARView.Environment.Reverb.Preset)
      @available(macOS 12.0, iOS 15.0, *)
      case simulated
      public static var automatic: RealityKit.ARView.Environment.Reverb {
        get
      }
    }
    @available(iOS 13.4, macCatalyst 14.0, *)
    public struct SceneUnderstanding {
      public struct Options : Swift.OptionSet {
        public let rawValue: Swift.UInt32
        public static let occlusion: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let receivesLighting: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let collision: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let physics: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let __disableFeathering: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let __disableGuidedFilterOcclusions: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public static let `default`: RealityKit.ARView.Environment.SceneUnderstanding.Options
        public init(rawValue: Swift.UInt32)
        public typealias ArrayLiteralElement = RealityKit.ARView.Environment.SceneUnderstanding.Options
        public typealias Element = RealityKit.ARView.Environment.SceneUnderstanding.Options
        public typealias RawValue = Swift.UInt32
      }
      public struct __InternalSettings {
        public var guidedFilterOcclusionUseSingleMTLEvent: Swift.Bool
      }
      public var __internalSettings: RealityKit.ARView.Environment.SceneUnderstanding.__InternalSettings {
        get
        set
      }
      public var options: RealityKit.ARView.Environment.SceneUnderstanding.Options {
        get
        set
      }
    }
    @available(iOS 13.4, macCatalyst 14.0, *)
    public var sceneUnderstanding: RealityKit.ARView.Environment.SceneUnderstanding {
      mutating get
      set
    }
    public var background: RealityKit.ARView.Environment.Background
    public var lighting: RealityKit.ARView.Environment.ImageBasedLight
    public var reverb: RealityKit.ARView.Environment.Reverb
    public init(background: RealityKit.ARView.Environment.Background, lighting: RealityKit.ARView.Environment.ImageBasedLight, reverb: RealityKit.ARView.Environment.Reverb)
  }
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_Concurrency.MainActor(unsafe) open class EntityRotationGestureRecognizer : UIKit.UIRotationGestureRecognizer, RealityKit.EntityGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public var entity: RealityFoundation.HasCollision? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPrevent(_ preventedGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.MeshResource {
  public static func __generateFace(from faceGeometry: ARKit.ARFaceGeometry, fillMesh: Swift.Bool = true) -> RealityFoundation.MeshResource
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.AnchorEntity {
  convenience public init(anchor: ARKit.ARAnchor)
  convenience public init(raycastResult: ARKit.ARRaycastResult)
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.AnchoringComponent {
  public init(_ anchor: ARKit.ARAnchor)
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.__ARReferenceProviding {
  public func fetchReferenceObject(group: Swift.String, name: Swift.String) -> ARKit.ARReferenceObject?
  public func fetchReferenceImage(group: Swift.String, name: Swift.String, physicalWidth: CoreGraphics.CGFloat = 0.0) -> ARKit.ARReferenceImage?
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.__REAnchoringType {
  public func isEqualToARAnchor(anchor: ARKit.ARAnchor) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
public protocol EntityGestureRecognizer : UIKit.UIGestureRecognizer {
  var entity: RealityFoundation.HasCollision? { get set }
  func location(in entity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>?
}
extension RealityKit.EntityGestureRecognizer {
  public func location(in entity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>?
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.PointLightComponent {
  public typealias Color = UIKit.UIColor
  public var color: RealityFoundation.PointLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.PointLightComponent.Color = .white, intensity: Swift.Float = 26963.76, attenuationRadius: Swift.Float = 10.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
extension RealityKit.ARView {
  public struct RenderOptions : Swift.OptionSet {
    public static let disableCameraGrain: RealityKit.ARView.RenderOptions
    @available(*, deprecated, message: "Use .disableAREnvironmentLighting in ARView instead")
    public static let disableAutomaticLighting: RealityKit.ARView.RenderOptions
    public static let disableGroundingShadows: RealityKit.ARView.RenderOptions
    public static let disableMotionBlur: RealityKit.ARView.RenderOptions
    public static let disableDepthOfField: RealityKit.ARView.RenderOptions
    public static let disableHDR: RealityKit.ARView.RenderOptions
    @available(*, deprecated, message: "Use .disableFaceMesh in ARView instead")
    public static let disableFaceOcclusions: RealityKit.ARView.RenderOptions
    public static let disablePersonOcclusion: RealityKit.ARView.RenderOptions
    public static let disableAREnvironmentLighting: RealityKit.ARView.RenderOptions
    public static let __disableLocalizedProbes: RealityKit.ARView.RenderOptions
    public static let disableFaceMesh: RealityKit.ARView.RenderOptions
    public let rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = RealityKit.ARView.RenderOptions
    public typealias Element = RealityKit.ARView.RenderOptions
    public typealias RawValue = Swift.UInt
  }
  @_Concurrency.MainActor(unsafe) public var renderOptions: RealityKit.ARView.RenderOptions {
    get
    set
  }
  @available(*, deprecated, message: "Use RenderOptions instead")
  public enum __RenderQuality {
    case tier1
    case tier2
    case tier3
    case tier4
    case fastest
    case standard
    case high
    case best
    public static func == (a: RealityKit.ARView.__RenderQuality, b: RealityKit.ARView.__RenderQuality) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var __renderQuality: RealityKit.ARView.__RenderQuality {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) public func project(_ point: Swift.SIMD3<Swift.Float>) -> CoreGraphics.CGPoint?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreGraphics.CGPoint, viewport: CoreGraphics.CGRect) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreGraphics.CGPoint, ontoPlane planeTransform: simd.float4x4) -> Swift.SIMD3<Swift.Float>?
  @available(macOS 11.0, iOS 14.0, *)
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreGraphics.CGPoint, ontoPlane planeTransform: simd.float4x4, relativeToCamera: Swift.Bool) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) public func ray(through screenPoint: CoreGraphics.CGPoint) -> (origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>)?
  @_Concurrency.MainActor(unsafe) public func hitTest(_ point: CoreGraphics.CGPoint, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all) -> [RealityFoundation.CollisionCastHit]
  @_Concurrency.MainActor(unsafe) public func entity(at point: CoreGraphics.CGPoint) -> RealityFoundation.Entity?
  @_Concurrency.MainActor(unsafe) public func entities(at point: CoreGraphics.CGPoint) -> [RealityFoundation.Entity]
  @_Concurrency.MainActor(unsafe) public func hitTest(_ point: CoreGraphics.CGPoint, types: ARKit.ARHitTestResult.ResultType) -> [ARKit.ARHitTestResult]
  @_Concurrency.MainActor(unsafe) public func makeRaycastQuery(from point: CoreGraphics.CGPoint, allowing target: ARKit.ARRaycastQuery.Target, alignment: ARKit.ARRaycastQuery.TargetAlignment) -> ARKit.ARRaycastQuery?
  @_Concurrency.MainActor(unsafe) public func trackedRaycast(from point: CoreGraphics.CGPoint, allowing target: ARKit.ARRaycastQuery.Target, alignment: ARKit.ARRaycastQuery.TargetAlignment, updateHandler: @escaping ([ARKit.ARRaycastResult]) -> Swift.Void) -> ARKit.ARTrackedRaycast?
  @_Concurrency.MainActor(unsafe) public func raycast(from point: CoreGraphics.CGPoint, allowing target: ARKit.ARRaycastQuery.Target, alignment: ARKit.ARRaycastQuery.TargetAlignment) -> [ARKit.ARRaycastResult]
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.SpotLightComponent {
  public typealias Color = UIKit.UIColor
  public var color: RealityFoundation.SpotLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.SpotLightComponent.Color = .white, intensity: Swift.Float = 6740.94, innerAngleInDegrees: Swift.Float = 45.0, outerAngleInDegrees: Swift.Float = 60.0, attenuationRadius: Swift.Float = 10.0)
}
@available(macOS 10.15, iOS 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
internal struct REAngleF {
  public init(radians: Swift.Float)
  public init(degrees: Swift.Float)
  public var radians: Swift.Float
  @inlinable public var degrees: Swift.Float {
    get {
            return radians * 180 / .pi
        }
    set {
            radians = newValue * .pi / 180
        }
  }
}
@available(macOS 10.15, iOS 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
internal enum RotationOrder : Swift.UInt8 {
  public static let `default`: RealityKit.RotationOrder
  public static let sceneKit: RealityKit.RotationOrder
  case xyz
  case yzx
  case zxy
  case xzy
  case yxz
  case zyx
  @usableFromInline
  internal init?(rawValue: Swift.UInt8)
  @usableFromInline
  internal typealias RawValue = Swift.UInt8
  @usableFromInline
  internal var rawValue: Swift.UInt8 {
    @usableFromInline
    get
  }
}
@available(macOS 10.15, iOS 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal init(eulerAngles: Swift.SIMD3<Swift.Float>, order: RealityKit.RotationOrder = .default)
}
@available(macOS 10.15, iOS 13.0, *)
public protocol __ARViewDelegatePrivate : AnyObject {
  func viewWillProcessTapInteraction(_ view: RealityKit.ARView)
  func view(_ view: RealityKit.ARView, performedTapInteraction: Swift.Bool, for entity: RealityFoundation.Entity?)
  @available(macOS 11.0, iOS 14.0, *)
  func view(_ view: RealityKit.ARView, performedProximityInteractionsForEntities: [RealityFoundation.Entity])
  func update(_ view: RealityKit.ARView, deltaTime: Swift.Float)
}
@available(macOS 11.0, iOS 14.0, *)
extension RealityKit.__ARViewDelegatePrivate {
  public func view(_ view: RealityKit.ARView, performedProximityInteractionsForEntities: [RealityFoundation.Entity])
}
@available(macOS 10.15, iOS 13.0, *)
public typealias ARViewBase = UIKit.UIView
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, *)
@_Concurrency.MainActor(unsafe) open class ARView : RealityKit.ARViewBase {
  @_Concurrency.MainActor(unsafe) public var __services: RealityFoundation.__ServiceLocator {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scene: RealityFoundation.Scene {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var __delegatePrivate: RealityKit.__ARViewDelegatePrivate?
  @_Concurrency.MainActor(unsafe) public var __automaticallyInvokesStartTrigger: Swift.Bool {
    get
    set
  }
  @available(macCatalyst 14.0, *)
  @_Concurrency.MainActor(unsafe) public var debugOptions: RealityKit.ARView.DebugOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var environment: RealityKit.ARView.Environment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cameraTransform: RealityFoundation.Transform {
    get
  }
  @_Concurrency.MainActor(unsafe) public var audioListener: RealityFoundation.Entity? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __environmentEntity: RealityFoundation.Entity!
  @_Concurrency.MainActor(unsafe) public var __enableAutomaticFrameRate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __preferredFrameRate: Swift.Float
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame frameRect: CoreGraphics.CGRect)
  @available(*, deprecated, message: "Renamed to `init(frame:cameraMode:automaticallyConfigureSession:)`.")
  @_Concurrency.MainActor(unsafe) convenience public init(frame frameRect: CoreGraphics.CGRect, cameraMode: RealityKit.ARView.CameraMode)
  @available(macCatalyst 14.0, *)
  @_Concurrency.MainActor(unsafe) public init(frame frameRect: CoreGraphics.CGRect, cameraMode: RealityKit.ARView.CameraMode, automaticallyConfigureSession: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func __customizeMetalLayer()
  @_Concurrency.MainActor(unsafe) public var __renderGraphEmitter: RealityFoundation.__RERenderGraphEmitter! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __setWireframeMode(displayWireframe: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var __forceLocalizedProbes: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __parallaxBackgroundProbe: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __targetIdentifier: Swift.UInt {
    get
  }
  @_Concurrency.MainActor(unsafe) open func __didInitializeEngine()
  @_Concurrency.MainActor(unsafe) public static func __queryModelIdentifier() -> Swift.String
  @_Concurrency.MainActor(unsafe) public static var __nonARKitModelIdentifiers: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var __disableCounterRotation: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __disableComposition: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __nonARKitDevices: Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func __handleTapAtPoint(point: CoreGraphics.CGPoint)
  public struct DebugOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let none: RealityKit.ARView.DebugOptions
    public static let showPhysics: RealityKit.ARView.DebugOptions
    public static let showStatistics: RealityKit.ARView.DebugOptions
    public static let showWorldOrigin: RealityKit.ARView.DebugOptions
    public static let showAnchorOrigins: RealityKit.ARView.DebugOptions
    public static let showAnchorGeometry: RealityKit.ARView.DebugOptions
    public static let showFeaturePoints: RealityKit.ARView.DebugOptions
    @available(iOS 13.4, *)
    public static let showSceneUnderstanding: RealityKit.ARView.DebugOptions
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = RealityKit.ARView.DebugOptions
    public typealias Element = RealityKit.ARView.DebugOptions
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor(unsafe) public var __statisticsOptions: RealityKit.ARView.__StatisticsOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __frameProfilerAddCustomStatistic(_ statName: Swift.String, _ statValue: Swift.Float)
  @_Concurrency.MainActor(unsafe) public var __disableStatisticsRendering: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __getStatisticsStringForSingleOption(statisticOption: RealityKit.ARView.__StatisticsOptions) -> Swift.String
  public struct __StatisticsOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public static let frameTimeStatistics: RealityKit.ARView.__StatisticsOptions
    public static let animationStatistics: RealityKit.ARView.__StatisticsOptions
    public static let assetPipelineStatistics: RealityKit.ARView.__StatisticsOptions
    public static let audioStatistics: RealityKit.ARView.__StatisticsOptions
    public static let ecsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let meshStatistics: RealityKit.ARView.__StatisticsOptions
    public static let networkStatistics: RealityKit.ARView.__StatisticsOptions
    public static let physicsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let renderingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let memoryStatistics: RealityKit.ARView.__StatisticsOptions
    public static let thermalStatistics: RealityKit.ARView.__StatisticsOptions
    public static let sceneUnderstandingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let mtlCounterAPIStatistics: RealityKit.ARView.__StatisticsOptions
    public static let customStatistics: RealityKit.ARView.__StatisticsOptions
    public static let attributionStatistics: RealityKit.ARView.__StatisticsOptions
    public init(rawValue: Swift.UInt32)
    public typealias ArrayLiteralElement = RealityKit.ARView.__StatisticsOptions
    public typealias Element = RealityKit.ARView.__StatisticsOptions
    public typealias RawValue = Swift.UInt32
  }
  @_Concurrency.MainActor(unsafe) public func __setProfilerUpdateInterval(newInterval: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func __frameTime() -> Swift.Float
  public typealias Image = UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public func snapshot(saveToHDR: Swift.Bool, completion: @escaping (_ image: RealityKit.ARView.Image?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func __startAudioEngine()
  @_Concurrency.MainActor(unsafe) public func __stopAudioEngine()
  @_Concurrency.MainActor(unsafe) public func __distanceInMetersFromEntity(_ entity: RealityFoundation.Entity) -> Swift.Float
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.DirectionalLightComponent {
  public typealias Color = UIKit.UIColor
  public var color: RealityFoundation.DirectionalLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.DirectionalLightComponent.Color = .white, intensity: Swift.Float = 2145.7078, isRealWorldProxy: Swift.Bool = false)
}
extension RealityKit.ARView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentScaleFactor: CoreGraphics.CGFloat {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public func __enablePauseEngineOnLeaveForeground()
  @_Concurrency.MainActor(unsafe) public func __disablePauseEngineOnLeaveForeground()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.TextureResource {
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.TextureResource
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.TextureResource {
  public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
}
@available(macOS 10.15, iOS 13.0, *)
extension MultipeerConnectivity.MCPeerID : RealityFoundation.SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, *)
public class MultipeerConnectivityService : RealityFoundation.SynchronizationService {
  final public let session: MultipeerConnectivity.MCSession
  public init(session: MultipeerConnectivity.MCSession) throws
  public func setHandshake(count: Swift.UInt32, timeoutMs: Swift.UInt32)
  public func entity(for identifier: RealityKit.MultipeerConnectivityService.Identifier) -> RealityFoundation.Entity?
  public func owner(of entity: RealityFoundation.Entity) -> RealityFoundation.SynchronizationPeerID?
  public func giveOwnership(of entity: RealityFoundation.Entity, toPeer peer: RealityFoundation.SynchronizationPeerID) -> Swift.Bool
  public func __fromCore(peerID: RealityFoundation.__PeerIDRef) -> RealityFoundation.SynchronizationPeerID?
  public func __toCore(peerID: RealityFoundation.SynchronizationPeerID) -> RealityFoundation.__PeerIDRef
  public func startSync()
  public func stopSync()
  @objc deinit
}
@available(iOS 13.4, *)
extension RealityFoundation.Entity {
  public func __accessibilityWrappers(rootEntityWrapper: RealityKit.__EntityAccessibilityWrapper? = nil) -> [RealityKit.__EntityAccessibilityWrapper]
  public func __calculateScreenBoundingRect(in arView: RealityKit.ARView) -> CoreGraphics.CGRect
}
@objc @_hasMissingDesignatedInitializers @available(macOS 10.15.4, iOS 13.4, *)
public class __EntityAccessibilityWrapper : ObjectiveC.NSObject {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) public var physicsOrigin: RealityFoundation.Entity? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.Material {
  public typealias Color = UIKit.UIColor
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.SimpleMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: UIKit.UIColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: RealityKit.MaterialColorParameter {
    get
    set
  }
  public init(color: RealityFoundation.SimpleMaterial.Color, roughness: RealityFoundation.MaterialScalarParameter = 0.0, isMetallic: Swift.Bool)
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityFoundation.UnlitMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: UIKit.UIColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: RealityKit.MaterialColorParameter {
    get
    set
  }
  public init(color: UIKit.UIColor)
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.BaseColor {
  public init(tint: UIKit.UIColor = .white, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var tint: UIKit.UIColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.EmissiveColor {
  public init(color: UIKit.UIColor = .black, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var color: UIKit.UIColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.SheenColor {
  public init(tint: UIKit.UIColor = .white, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var tint: UIKit.UIColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.CustomMaterial.BaseColor {
  public init(tint: UIKit.UIColor = .white, texture: RealityFoundation.CustomMaterial.Texture? = nil)
  public var tint: UIKit.UIColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, *)
extension RealityFoundation.CustomMaterial.EmissiveColor {
  public init(color: UIKit.UIColor = .black, texture: RealityFoundation.CustomMaterial.Texture? = nil)
  public var color: UIKit.UIColor {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, *)
public enum MaterialColorParameter : Swift._ExpressibleByColorLiteral, Swift.Hashable {
  case color(UIKit.UIColor)
  case texture(RealityFoundation.TextureResource)
  public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  public static func == (lhs: RealityKit.MaterialColorParameter, rhs: RealityKit.MaterialColorParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RealityKit.ARView : ARKit.ARSessionProviding {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var session: ARKit.ARSession {
    @objc get
    @objc set
  }
  public enum CameraMode {
    case ar, nonAR
    public static func == (a: RealityKit.ARView.CameraMode, b: RealityKit.ARView.CameraMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var cameraMode: RealityKit.ARView.CameraMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var automaticallyConfigureSession: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __passthroughTextureY: Metal.MTLTexture? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var __passthroughTextureCbCr: Metal.MTLTexture? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var __passthroughCorrectionMatrix: simd.float4x4 {
    get
  }
  @_Concurrency.MainActor(unsafe) public var __passthroughIntensityExponent: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __backgroundReplacementBuffer: CoreVideo.CVPixelBuffer? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __enableUpdateCameraWorldMatrixFromARFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __enableUpdateCameraProjectionMatrixFromARFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __fallbackAmbientIntensity: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __fallbackAmbientColor: CoreGraphics.CGColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __autoFireStartTriggerOnPlacement: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __enableRayTracedGroundingShadow()
  @_Concurrency.MainActor(unsafe) public func __disableRayTracedGroundingShadow()
}
extension RealityKit.ARView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func __occlusionEntity(for faceAnchor: ARKit.ARFaceAnchor) -> RealityFoundation.Entity?
  @_Concurrency.MainActor(unsafe) public func __removeOcclusionEntity(for faceAnchor: ARKit.ARFaceAnchor)
}
@available(macCatalyst 14.0, *)
extension RealityKit.ARView {
  public struct EntityGestures : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let translation: RealityKit.ARView.EntityGestures
    public static let rotation: RealityKit.ARView.EntityGestures
    public static let scale: RealityKit.ARView.EntityGestures
    public static let all: RealityKit.ARView.EntityGestures
    public typealias ArrayLiteralElement = RealityKit.ARView.EntityGestures
    public typealias Element = RealityKit.ARView.EntityGestures
    public typealias RawValue = Swift.Int
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func installGestures(_ gestures: RealityKit.ARView.EntityGestures = .all, for entity: RealityFoundation.HasCollision) -> [RealityKit.EntityGestureRecognizer]
}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@available(*, deprecated, message: "Use RenderOptions instead")
extension RealityKit.ARView.__RenderQuality : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@available(*, deprecated, message: "Use RenderOptions instead")
extension RealityKit.ARView.__RenderQuality : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.RotationOrder : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.RotationOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, *)
extension RealityKit.RotationOrder : Swift.RawRepresentable {}
extension RealityKit.ARView.CameraMode : Swift.Equatable {}
extension RealityKit.ARView.CameraMode : Swift.Hashable {}
