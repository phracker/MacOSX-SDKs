// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.29.207 clang-1300.0.28.1)
// swift-module-flags: -target x86_64-apple-ios15.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreNFC -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreNFC
@_exported import CoreNFC
import Swift
import _Concurrency
@available(iOS 14.0, *)
public struct NFCISO15693SystemInfo {
  public var uniqueIdentifier: Foundation.Data
  public var dataStorageFormatIdentifier: Swift.Int
  public var applicationFamilyIdentifier: Swift.Int
  public var blockSize: Swift.Int
  public var totalBlocks: Swift.Int
  public var icReference: Swift.Int
  public init(uniqueIdentifier _uniqueIdentifier: Foundation.Data, dataStorageFormatIdentifier _dataStorageFormatIdentifier: Swift.Int, applicationFamilyIdentifier _applicationFamilyIdentifier: Swift.Int, blockSize _blockSize: Swift.Int, totalBlocks _totalBlocks: Swift.Int, icReference _icReference: Swift.Int)
}
@available(iOS 14.0, *)
public struct NFCISO15693MultipleBlockSecurityStatus {
  public var blockSecurityStatus: [Swift.Int]
  public init(blockSecurityStatus _blockSecurityStatus: [Swift.Int])
}
@available(iOS 11.0, *)
extension CoreNFC.NFCISO15693Tag {
  @available(iOS 14.0, *)
  public func readSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.UInt8, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func readMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func getSystemInfo(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693SystemInfo, Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func systemInfo(requestFlags flags: CoreNFC.NFCISO15693RequestFlag) async throws -> CoreNFC.NFCISO15693SystemInfo {
        let (uid, dsfid, afi, blockSize, blockCount, icReference) = try await self.__systemInfoAndUID(with: flags)
        return NFCISO15693SystemInfo(uniqueIdentifier: uid,
                                     dataStorageFormatIdentifier: dsfid,
                                     applicationFamilyIdentifier: afi,
                                     blockSize: blockSize,
                                     totalBlocks: blockCount,
                                     icReference: icReference)
    }
  #endif

  @available(iOS 14.0, *)
  public func fastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func fastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> [Foundation.Data] {
        return try await self.__fastReadMultipleBlocks(with: flags, blockRange: blockRange)
    }
  #endif

  @available(iOS 14.0, *)
  public func customCommand(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, customCommandCode: Swift.Int, customRequestParameters: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedReadSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.Int, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func extendedWriteMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, dataBlocks: [Foundation.Data], completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func extendedWriteMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, dataBlocks: [Foundation.Data]) async throws {
        return try await self.__extendedWriteMultipleBlocks(withRequestFlags: flags, blockRange: blockRange, dataBlocks: dataBlocks)
    }
  #endif

  @available(iOS 14.0, *)
  public func authenticate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func authenticate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__authenticate(withRequestFlags: flags, cryptoSuiteIdentifier: cryptoSuiteIdentifier, message: message)
    }
  #endif

  @available(iOS 14.0, *)
  public func keyUpdate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, keyIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func keyUpdate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, keyIdentifier: Swift.Int, message: Foundation.Data) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__keyUpdate(withRequestFlags: flags, keyIdentifier: keyIdentifier, message: message)
    }
  #endif

  @available(iOS 14.0, *)
  public func challenge(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func challenge(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data) async throws {
        return try await self.__challenge(withRequestFlags: flags, cryptoSuiteIdentifier: cryptoSuiteIdentifier, message: message)
    }
  #endif

  @available(iOS 14.0, *)
  public func readBuffer(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func readBuffer(requestFlags flags: CoreNFC.NFCISO15693RequestFlag) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__readBuffer(withRequestFlags: flags)
    }
  #endif

  @available(iOS 14.0, *)
  public func extendedGetMultipleBlockSecurityStatus(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693MultipleBlockSecurityStatus, Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func extendedGetMultipleBlockSecurityStatus(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> CoreNFC.NFCISO15693MultipleBlockSecurityStatus {
        let listOfStatus = try await self.__extendedGetMultipleBlockSecurityStatus(with: flags, blockRange: blockRange)
        return NFCISO15693MultipleBlockSecurityStatus(blockSecurityStatus: listOfStatus.map { $0.intValue } )
    }
  #endif

  @available(iOS 14.0, *)
  public func extendedFastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func extendedFastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> [Foundation.Data] {
        return try await self.__extendedFastReadMultipleBlocks(with: flags, blockRange: blockRange)
    }
  #endif

  @available(iOS 14.0, *)
  public func sendRequest(requestFlags flags: Swift.Int, commandCode: Swift.Int, data: Foundation.Data?, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data?), Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func sendRequest(requestFlags flags: Swift.Int, commandCode: Swift.Int, data: Foundation.Data?) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data?) {
        return try await self.__sendRequest(withFlag: flags, commandCode: commandCode, data: data)
    }
  #endif

}
@available(iOS 13.0, *)
extension CoreNFC.NFCTagReaderSession {
  @usableFromInline
  internal func upcastTag(_ tag: CoreNFC.NFCTag) -> CoreNFC.__NFCTag
  @available(iOS 13.0, *)
  open var connectedTag: CoreNFC.NFCTag? {
    get
  }
  @available(iOS 13.0, *)
  convenience public init?(pollingOption: CoreNFC.NFCTagReaderSession.PollingOption, delegate: CoreNFC.NFCTagReaderSessionDelegate, queue: Dispatch.DispatchQueue? = nil)
  @available(iOS 13.0, *)
  open func connect(to tag: CoreNFC.NFCTag, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient open func connect(to tag: CoreNFC.NFCTag) async throws {
        var upcastedTag: __NFCTag
        
        if #available(iOS 15.0, *) {
            // Forward handling of potential changes to NFCTag
            upcastedTag = self.upcastTag(tag)
        } else {
            // Inline handling of NFCTag for back-deployment
            switch (tag) {
            case let .feliCa(t):
                upcastedTag = t
            case let .iso7816(t):
                upcastedTag = t
            case let .iso15693(t):
                upcastedTag = t
            case let .miFare(t):
                upcastedTag = t
            @unknown case _:
                fatalError("Please recompile with a newer SDK")
            }
        }
        
        return try await self.__connect(to:upcastedTag)
    }
  #endif

}
@available(iOS 14.0, *)
public struct NFCISO7816ResponseAPDU {
  public var statusWord1: Swift.UInt8
  public var statusWord2: Swift.UInt8
  public var payload: Foundation.Data?
  public init(statusWord1 _statusWord1: Swift.UInt8, statusWord2 _statusWord2: Swift.UInt8, paylaod _paylaod: Foundation.Data?)
}
@available(iOS 14.0, *)
extension CoreNFC.NFCISO7816Tag {
  @available(iOS 14.0, *)
  public func sendCommand(apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func sendCommand(apdu: CoreNFC.NFCISO7816APDU) async throws -> CoreNFC.NFCISO7816ResponseAPDU {
        let (data, sw1, sw2) = try await self.sendCommand(apdu: apdu)
        return NFCISO7816ResponseAPDU(statusWord1: sw1, statusWord2: sw2, paylaod: (data.count > 0) ? data : nil)
    }
  #endif

}
@available(iOS 11.0, *)
extension CoreNFC.NFCNDEFPayload {
  @available(iOS 13.0, *)
  open func wellKnownTypeTextPayload() -> (Swift.String?, Foundation.Locale?)
}
@available(iOS 14.0, *)
extension CoreNFC.NFCMiFareTag {
  @available(iOS 14.0, *)
  public func sendMiFareCommand(commandPacket command: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func sendMiFareISO7816Command(_ apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, Swift.Error>) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_alwaysEmitIntoClient public func sendMiFareISO7816Command(_ apdu: CoreNFC.NFCISO7816APDU) async throws -> CoreNFC.NFCISO7816ResponseAPDU {
        let (responseData, sw1, sw2) = try await self.sendMiFareISO7816Command(apdu)
        return NFCISO7816ResponseAPDU(statusWord1: sw1,
                                      statusWord2: sw2,
                                      paylaod: (responseData.count > 0) ? responseData : nil)
    }
  #endif

}
@available(iOS 13.0, *)
public protocol NFCTagReaderSessionDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 13.0, *)
  func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 14.0, *)
public struct NFCFeliCaPollingResponse {
  public var manufactureParameter: Foundation.Data
  public var requestData: Foundation.Data?
  public init(manufactureParameter _manufactureParameter: Foundation.Data, requestData _requestData: Foundation.Data?)
}
@available(iOS 14.0, *)
public struct NFCFeliCaStatusFlag {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int)
}
@available(iOS 14.0, *)
public struct NFCFeliCaRequsetServiceV2Response {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId
  public var nodeKeyVersionListAES: [Foundation.Data]?
  public var nodeKeyVersionListDES: [Foundation.Data]?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, encryptionIdentifier _encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId, nodeKeyVersionListAES _nodeKeyVersionListAES: [Foundation.Data]?, nodeKeyVersionListDES _nodeKeyVersionListDES: [Foundation.Data]?)
}
@available(iOS 14.0, *)
public struct NFCFeliCaRequestSpecificationVersionResponse {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var basicVersion: Foundation.Data?
  public var optionVersion: Foundation.Data?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, basicVersion _basicVersion: Foundation.Data?, optionVersion _optionVersion: Foundation.Data?)
}
@available(iOS 14.0, *)
extension CoreNFC.NFCFeliCaTag {
  @available(iOS 14.0, *)
  public func polling(systemCode: Foundation.Data, requestCode: CoreNFC.NFCFeliCaPollingRequestCode, timeSlot: CoreNFC.NFCFeliCaPollingTimeSlot, resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaPollingResponse, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestService(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestResponse(resultHandler: @escaping (Swift.Result<Swift.Int, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func readWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], resultHandler: @escaping (Swift.Result<(CoreNFC.NFCFeliCaStatusFlag, [Foundation.Data]), Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func writeWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], blockData: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestSystemCode(resultHandler: @escaping (Swift.Result<[Foundation.Data], Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestServiceV2(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequsetServiceV2Response, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func requestSpecificationVersion(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequestSpecificationVersionResponse, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func resetMode(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  public func sendFeliCaCommand(commandPacket: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
}
@available(iOS 13.0, *)
public enum NFCTag {
  case feliCa(CoreNFC.NFCFeliCaTag)
  case iso7816(CoreNFC.NFCISO7816Tag)
  case iso15693(CoreNFC.NFCISO15693Tag)
  case miFare(CoreNFC.NFCMiFareTag)
  public var isAvailable: Swift.Bool {
    get
  }
}
